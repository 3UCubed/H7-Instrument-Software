
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001530c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080155ac  080155ac  000255ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015960  08015960  00025960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015968  08015968  00025968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801596c  0801596c  0002596c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08015970  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004fdc  24000100  08015a70  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240050dc  08015a70  000350dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003279a  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000548f  00000000  00000000  000628c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  00067d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002430  00000000  00000000  0006a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a9c  00000000  00000000  0006c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030945  00000000  00000000  0007424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194501  00000000  00000000  000a4b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00239092  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad64  00000000  00000000  002390e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015594 	.word	0x08015594

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08015594 	.word	0x08015594

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f010 fd16 	bl	80110cc <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f010 fd0b 	bl	80110cc <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 fd00 	bl	80110cc <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f014 f8c2 	bl	8014858 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004e8 	.word	0x240004e8
 80006e0:	24000688 	.word	0x24000688
 80006e4:	24000534 	.word	0x24000534
 80006e8:	24000580 	.word	0x24000580
 80006ec:	080155ec 	.word	0x080155ec

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49bf      	ldr	r1, [pc, #764]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 80006fc:	48bf      	ldr	r0, [pc, #764]	; (80009fc <HAL_UART_RxCpltCallback+0x30c>)
 80006fe:	f00d fffb 	bl	800e6f8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bbd      	ldr	r3, [pc, #756]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 8204 	bhi.w	8000b18 <HAL_UART_RxCpltCallback+0x428>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080008e7 	.word	0x080008e7
 800071c:	0800090f 	.word	0x0800090f
 8000720:	08000937 	.word	0x08000937
 8000724:	0800095f 	.word	0x0800095f
 8000728:	0800098b 	.word	0x0800098b
 800072c:	080009b7 	.word	0x080009b7
 8000730:	080009e3 	.word	0x080009e3
 8000734:	08000a87 	.word	0x08000a87
 8000738:	08000b19 	.word	0x08000b19
 800073c:	08000b19 	.word	0x08000b19
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000aaf 	.word	0x08000aaf
 800074c:	08000ab7 	.word	0x08000ab7
 8000750:	08000ad3 	.word	0x08000ad3
 8000754:	08000aef 	.word	0x08000aef
 8000758:	08000ac5 	.word	0x08000ac5
 800075c:	08000ae1 	.word	0x08000ae1
 8000760:	08000afd 	.word	0x08000afd
 8000764:	080008fb 	.word	0x080008fb
 8000768:	08000923 	.word	0x08000923
 800076c:	0800094b 	.word	0x0800094b
 8000770:	08000975 	.word	0x08000975
 8000774:	080009a1 	.word	0x080009a1
 8000778:	080009cd 	.word	0x080009cd
 800077c:	08000a71 	.word	0x08000a71
 8000780:	08000a9b 	.word	0x08000a9b
 8000784:	080007d9 	.word	0x080007d9
 8000788:	08000815 	.word	0x08000815
 800078c:	08000851 	.word	0x08000851
 8000790:	08000b19 	.word	0x08000b19
 8000794:	08000b19 	.word	0x08000b19
 8000798:	08000b19 	.word	0x08000b19
 800079c:	08000b19 	.word	0x08000b19
 80007a0:	08000b19 	.word	0x08000b19
 80007a4:	08000b19 	.word	0x08000b19
 80007a8:	08000893 	.word	0x08000893
 80007ac:	080008bd 	.word	0x080008bd
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4893      	ldr	r0, [pc, #588]	; (8000a00 <HAL_UART_RxCpltCallback+0x310>)
 80007b2:	f014 f851 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fe19 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 80007c2:	e1a9      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007c4:	4890      	ldr	r0, [pc, #576]	; (8000a08 <HAL_UART_RxCpltCallback+0x318>)
 80007c6:	f014 f847 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80007ca:	4b8e      	ldr	r3, [pc, #568]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fe0f 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 80007d6:	e19f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007d8:	488c      	ldr	r0, [pc, #560]	; (8000a0c <HAL_UART_RxCpltCallback+0x31c>)
 80007da:	f014 f83d 	bl	8014858 <puts>
		if (step < 17) {
 80007de:	4b8c      	ldr	r3, [pc, #560]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	f200 8191 	bhi.w	8000b0a <HAL_UART_RxCpltCallback+0x41a>
			step+=2;
 80007e8:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b86      	ldr	r3, [pc, #536]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4884      	ldr	r0, [pc, #528]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000806:	f004 fbc8 	bl	8004f9a <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	4882      	ldr	r0, [pc, #520]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800080e:	f004 fa09 	bl	8004c24 <HAL_DAC_Start>

		}
		break;
 8000812:	e17a      	b.n	8000b0a <HAL_UART_RxCpltCallback+0x41a>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <HAL_UART_RxCpltCallback+0x32c>)
 8000816:	f014 f81f 	bl	8014858 <puts>
		if (step > 3) {
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	f240 8175 	bls.w	8000b0e <HAL_UART_RxCpltCallback+0x41e>
			step-=2;
 8000824:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b02      	subs	r3, #2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800082e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000830:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	4875      	ldr	r0, [pc, #468]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000842:	f004 fbaa 	bl	8004f9a <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4873      	ldr	r0, [pc, #460]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800084a:	f004 f9eb 	bl	8004c24 <HAL_DAC_Start>

		}
		break;
 800084e:	e15e      	b.n	8000b0e <HAL_UART_RxCpltCallback+0x41e>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000850:	4873      	ldr	r0, [pc, #460]	; (8000a20 <HAL_UART_RxCpltCallback+0x330>)
 8000852:	f014 f801 	bl	8014858 <puts>
		if (!auto_sweep) {
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10e      	bne.n	800087c <HAL_UART_RxCpltCallback+0x18c>
			auto_sweep = 1;
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000864:	4870      	ldr	r0, [pc, #448]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000866:	f00c f92b 	bl	800cac0 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2320      	movs	r3, #32
 8000870:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000872:	2100      	movs	r1, #0
 8000874:	4868      	ldr	r0, [pc, #416]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000876:	f004 fa2d 	bl	8004cd4 <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 800087a:	e14d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
			auto_sweep = 0;
 800087c:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000882:	4869      	ldr	r0, [pc, #420]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000884:	f00c f98c 	bl	800cba0 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000888:	2100      	movs	r1, #0
 800088a:	4863      	ldr	r0, [pc, #396]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800088c:	f004 fae2 	bl	8004e54 <HAL_DAC_Stop_DMA>
		break;
 8000890:	e142      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <HAL_UART_RxCpltCallback+0x33c>)
 8000894:	f013 ffe0 	bl	8014858 <puts>
		if (cadence <= 50000){
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f200 8136 	bhi.w	8000b12 <HAL_UART_RxCpltCallback+0x422>
			cadence *= 2;
 80008a6:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008ae:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008ba:	e12a      	b.n	8000b12 <HAL_UART_RxCpltCallback+0x422>
	}
	case 0x25: {
		printf("Factor Down\n");
 80008bc:	485d      	ldr	r0, [pc, #372]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 80008be:	f013 ffcb 	bl	8014858 <puts>
		if (cadence >= 6250){
 80008c2:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f641 0269 	movw	r2, #6249	; 0x1869
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f240 8123 	bls.w	8000b16 <HAL_UART_RxCpltCallback+0x426>
			cadence /= 2;
 80008d0:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008e4:	e117      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x426>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80008e6:	4854      	ldr	r0, [pc, #336]	; (8000a38 <HAL_UART_RxCpltCallback+0x348>)
 80008e8:	f013 ffb6 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80008ee:	2120      	movs	r1, #32
 80008f0:	2201      	movs	r2, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fd7e 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 80008f8:	e10e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80008fa:	4850      	ldr	r0, [pc, #320]	; (8000a3c <HAL_UART_RxCpltCallback+0x34c>)
 80008fc:	f013 ffac 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000902:	2120      	movs	r1, #32
 8000904:	2200      	movs	r2, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fd74 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 800090c:	e104      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 800090e:	484c      	ldr	r0, [pc, #304]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 8000910:	f013 ffa2 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	2201      	movs	r2, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fd6a 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 8000920:	e0fa      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000922:	4848      	ldr	r0, [pc, #288]	; (8000a44 <HAL_UART_RxCpltCallback+0x354>)
 8000924:	f013 ff98 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fd60 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 8000934:	e0f0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x02: {
		printf("5v ON PC7\n");
 8000936:	4844      	ldr	r0, [pc, #272]	; (8000a48 <HAL_UART_RxCpltCallback+0x358>)
 8000938:	f013 ff8e 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800093e:	2180      	movs	r1, #128	; 0x80
 8000940:	2201      	movs	r2, #1
 8000942:	4618      	mov	r0, r3
 8000944:	f007 fd56 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 8000948:	e0e6      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x15: {
		printf("5v OFF PC7\n");
 800094a:	4841      	ldr	r0, [pc, #260]	; (8000a50 <HAL_UART_RxCpltCallback+0x360>)
 800094c:	f013 ff84 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000950:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	2200      	movs	r2, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f007 fd4c 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 800095c:	e0dc      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 800095e:	483d      	ldr	r0, [pc, #244]	; (8000a54 <HAL_UART_RxCpltCallback+0x364>)
 8000960:	f013 ff7a 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000964:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096a:	2201      	movs	r2, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f007 fd41 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 8000972:	e0d1      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000974:	4838      	ldr	r0, [pc, #224]	; (8000a58 <HAL_UART_RxCpltCallback+0x368>)
 8000976:	f013 ff6f 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800097c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000980:	2200      	movs	r2, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f007 fd36 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 8000988:	e0c6      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x04: {
		printf("3v3 ON PC10\n");
 800098a:	4834      	ldr	r0, [pc, #208]	; (8000a5c <HAL_UART_RxCpltCallback+0x36c>)
 800098c:	f013 ff64 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000992:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000996:	2201      	movs	r2, #1
 8000998:	4618      	mov	r0, r3
 800099a:	f007 fd2b 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 800099e:	e0bb      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x17: {
		printf("3v3 OFF PC10\n");
 80009a0:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_UART_RxCpltCallback+0x370>)
 80009a2:	f013 ff59 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ac:	2200      	movs	r2, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fd20 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 80009b4:	e0b0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 80009b6:	482b      	ldr	r0, [pc, #172]	; (8000a64 <HAL_UART_RxCpltCallback+0x374>)
 80009b8:	f013 ff4e 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	2201      	movs	r2, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f007 fd15 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 80009ca:	e0a5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <HAL_UART_RxCpltCallback+0x378>)
 80009ce:	f013 ff43 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	2200      	movs	r2, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fd0a 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 80009e0:	e09a      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <HAL_UART_RxCpltCallback+0x37c>)
 80009e4:	f013 ff38 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fcff 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 80009f6:	e08f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
 80009f8:	2400068c 	.word	0x2400068c
 80009fc:	240005cc 	.word	0x240005cc
 8000a00:	08015604 	.word	0x08015604
 8000a04:	58020400 	.word	0x58020400
 8000a08:	0801560c 	.word	0x0801560c
 8000a0c:	08015618 	.word	0x08015618
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000008 	.word	0x24000008
 8000a18:	240002d4 	.word	0x240002d4
 8000a1c:	08015620 	.word	0x08015620
 8000a20:	0801562c 	.word	0x0801562c
 8000a24:	24000684 	.word	0x24000684
 8000a28:	24000534 	.word	0x24000534
 8000a2c:	08015640 	.word	0x08015640
 8000a30:	24000000 	.word	0x24000000
 8000a34:	0801564c 	.word	0x0801564c
 8000a38:	08015658 	.word	0x08015658
 8000a3c:	08015664 	.word	0x08015664
 8000a40:	08015670 	.word	0x08015670
 8000a44:	0801567c 	.word	0x0801567c
 8000a48:	0801568c 	.word	0x0801568c
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	08015698 	.word	0x08015698
 8000a54:	080156a4 	.word	0x080156a4
 8000a58:	080156b4 	.word	0x080156b4
 8000a5c:	080156c4 	.word	0x080156c4
 8000a60:	080156d0 	.word	0x080156d0
 8000a64:	080156e0 	.word	0x080156e0
 8000a68:	080156ec 	.word	0x080156ec
 8000a6c:	080156f8 	.word	0x080156f8
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000a70:	482b      	ldr	r0, [pc, #172]	; (8000b20 <HAL_UART_RxCpltCallback+0x430>)
 8000a72:	f013 fef1 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 fcb8 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 8000a84:	e048      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <HAL_UART_RxCpltCallback+0x438>)
 8000a88:	f013 fee6 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2201      	movs	r2, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fcae 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 8000a98:	e03e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <HAL_UART_RxCpltCallback+0x43c>)
 8000a9c:	f013 fedc 	bl	8014858 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fca4 	bl	80083f4 <HAL_GPIO_WritePin>
		break;
 8000aac:	e034      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000aae:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_UART_RxCpltCallback+0x440>)
 8000ab0:	f013 fed2 	bl	8014858 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x444>)
 8000ab8:	f013 fece 	bl	8014858 <puts>
		PMT_ON = 1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		break;
 8000ac2:	e029      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <HAL_UART_RxCpltCallback+0x44c>)
 8000ac6:	f013 fec7 	bl	8014858 <puts>
		PMT_ON = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	e022      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000ad2:	481b      	ldr	r0, [pc, #108]	; (8000b40 <HAL_UART_RxCpltCallback+0x450>)
 8000ad4:	f013 fec0 	bl	8014858 <puts>
		ERPA_ON = 1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e01b      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x458>)
 8000ae2:	f013 feb9 	bl	8014858 <puts>
		ERPA_ON = 0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
		break;
 8000aec:	e014      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_UART_RxCpltCallback+0x45c>)
 8000af0:	f013 feb2 	bl	8014858 <puts>
		HK_ON = 1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		break;
 8000afa:	e00d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x464>)
 8000afe:	f013 feab 	bl	8014858 <puts>
		HK_ON = 0;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		break;
 8000b08:	e006      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b16:	bf00      	nop
	}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08015704 	.word	0x08015704
 8000b24:	58020800 	.word	0x58020800
 8000b28:	08015710 	.word	0x08015710
 8000b2c:	0801571c 	.word	0x0801571c
 8000b30:	0801572c 	.word	0x0801572c
 8000b34:	0801573c 	.word	0x0801573c
 8000b38:	2400067e 	.word	0x2400067e
 8000b3c:	08015744 	.word	0x08015744
 8000b40:	0801574c 	.word	0x0801574c
 8000b44:	2400067f 	.word	0x2400067f
 8000b48:	08015754 	.word	0x08015754
 8000b4c:	08015760 	.word	0x08015760
 8000b50:	24000680 	.word	0x24000680
 8000b54:	08015768 	.word	0x08015768

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f002 face 	bl	80030fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f89a 	bl	8000c98 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f918 	bl	8000d98 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 fe6a 	bl	8001840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 fe38 	bl	80017e0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b70:	f000 fd9c 	bl	80016ac <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fde8 	bl	8001748 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b78:	f000 fb28 	bl	80011cc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b7c:	f000 fc1a 	bl	80013b4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b80:	f000 fd1e 	bl	80015c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b84:	f000 fc6e 	bl	8001464 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b88:	f000 fa5c 	bl	8001044 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000b8c:	f000 f934 	bl	8000df8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b90:	f000 faea 	bl	8001168 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000b94:	f000 fbb6 	bl	8001304 <MX_SPI1_Init>
  MX_RTC_Init();
 8000b98:	f000 fb58 	bl	800124c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  if (!handshake())
 8000b9c:	f000 feca 	bl	8001934 <handshake>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <main+0x52>
  {
	  Error_Handler();
 8000ba6:	f001 fbcd 	bl	8002344 <Error_Handler>
  }


  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000baa:	2100      	movs	r1, #0
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <main+0xec>)
 8000bae:	f00c f897 	bl	800cce0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4824      	ldr	r0, [pc, #144]	; (8000c48 <main+0xf0>)
 8000bb6:	f00c f893 	bl	800cce0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4823      	ldr	r0, [pc, #140]	; (8000c4c <main+0xf4>)
 8000bbe:	f00c f88f 	bl	800cce0 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bc2:	f010 f92d 	bl	8010e20 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2108      	movs	r1, #8
 8000bca:	2010      	movs	r0, #16
 8000bcc:	f010 fb28 	bl	8011220 <osMessageQueueNew>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a1f      	ldr	r2, [pc, #124]	; (8000c50 <main+0xf8>)
 8000bd4:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000bd6:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <main+0xfc>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <main+0x100>)
 8000bdc:	f010 f96a 	bl	8010eb4 <osThreadNew>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <main+0x104>)
 8000be4:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <main+0x108>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <main+0x10c>)
 8000bec:	f010 f962 	bl	8010eb4 <osThreadNew>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <main+0x110>)
 8000bf4:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <main+0x114>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	481d      	ldr	r0, [pc, #116]	; (8000c70 <main+0x118>)
 8000bfc:	f010 f95a 	bl	8010eb4 <osThreadNew>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <main+0x11c>)
 8000c04:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <main+0x120>)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	481c      	ldr	r0, [pc, #112]	; (8000c7c <main+0x124>)
 8000c0c:	f010 f952 	bl	8010eb4 <osThreadNew>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <main+0x128>)
 8000c14:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000c16:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <main+0x12c>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	481b      	ldr	r0, [pc, #108]	; (8000c88 <main+0x130>)
 8000c1c:	f010 f94a 	bl	8010eb4 <osThreadNew>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a1a      	ldr	r2, [pc, #104]	; (8000c8c <main+0x134>)
 8000c24:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f010 fa11 	bl	801104e <osEventFlagsNew>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <main+0x138>)
 8000c30:	6013      	str	r3, [r2, #0]
  system_setup();
 8000c32:	f000 ff0d 	bl	8001a50 <system_setup>
  printf("Starting kernal...\n");
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <main+0x13c>)
 8000c38:	f013 fe0e 	bl	8014858 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c3c:	f010 f914 	bl	8010e68 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c40:	e7fe      	b.n	8000c40 <main+0xe8>
 8000c42:	bf00      	nop
 8000c44:	240004e8 	.word	0x240004e8
 8000c48:	24000534 	.word	0x24000534
 8000c4c:	24000580 	.word	0x24000580
 8000c50:	24000674 	.word	0x24000674
 8000c54:	080157d4 	.word	0x080157d4
 8000c58:	080021d5 	.word	0x080021d5
 8000c5c:	24000660 	.word	0x24000660
 8000c60:	080157f8 	.word	0x080157f8
 8000c64:	08002219 	.word	0x08002219
 8000c68:	24000664 	.word	0x24000664
 8000c6c:	0801581c 	.word	0x0801581c
 8000c70:	0800225d 	.word	0x0800225d
 8000c74:	24000668 	.word	0x24000668
 8000c78:	08015840 	.word	0x08015840
 8000c7c:	080022a1 	.word	0x080022a1
 8000c80:	2400066c 	.word	0x2400066c
 8000c84:	08015864 	.word	0x08015864
 8000c88:	080022c5 	.word	0x080022c5
 8000c8c:	24000670 	.word	0x24000670
 8000c90:	24000688 	.word	0x24000688
 8000c94:	08015770 	.word	0x08015770

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b09c      	sub	sp, #112	; 0x70
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	224c      	movs	r2, #76	; 0x4c
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f013 fc68 	bl	801457c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2220      	movs	r2, #32
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f013 fc62 	bl	801457c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f007 fce9 	bl	8008690 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <SystemClock_Config+0xf8>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	4a32      	ldr	r2, [pc, #200]	; (8000d90 <SystemClock_Config+0xf8>)
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <SystemClock_Config+0xf8>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <SystemClock_Config+0xfc>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ce0:	4a2c      	ldr	r2, [pc, #176]	; (8000d94 <SystemClock_Config+0xfc>)
 8000ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <SystemClock_Config+0xfc>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cf4:	bf00      	nop
 8000cf6:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <SystemClock_Config+0xfc>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d02:	d1f8      	bne.n	8000cf6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d04:	230a      	movs	r3, #10
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0c:	2340      	movs	r3, #64	; 0x40
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d20:	230c      	movs	r3, #12
 8000d22:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d30:	230c      	movs	r3, #12
 8000d32:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f007 fcdf 	bl	8008704 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d4c:	f001 fafa 	bl	8002344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	233f      	movs	r3, #63	; 0x3f
 8000d52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	2303      	movs	r3, #3
 8000d56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2101      	movs	r1, #1
 8000d76:	4618      	mov	r0, r3
 8000d78:	f008 f91e 	bl	8008fb8 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d82:	f001 fadf 	bl	8002344 <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3770      	adds	r7, #112	; 0x70
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	58000400 	.word	0x58000400
 8000d94:	58024800 	.word	0x58024800

08000d98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0b0      	sub	sp, #192	; 0xc0
 8000d9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9e:	463b      	mov	r3, r7
 8000da0:	22c0      	movs	r2, #192	; 0xc0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f013 fbe9 	bl	801457c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000daa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000db6:	2304      	movs	r3, #4
 8000db8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000dba:	2309      	movs	r3, #9
 8000dbc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dca:	23c0      	movs	r3, #192	; 0xc0
 8000dcc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dce:	2320      	movs	r3, #32
 8000dd0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000dd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	4618      	mov	r0, r3
 8000de2:	f008 fcb7 	bl	8009754 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000dec:	f001 faaa 	bl	8002344 <Error_Handler>
  }
}
 8000df0:	bf00      	nop
 8000df2:	37c0      	adds	r7, #192	; 0xc0
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1c:	4b7c      	ldr	r3, [pc, #496]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e1e:	4a7d      	ldr	r2, [pc, #500]	; (8001014 <MX_ADC1_Init+0x21c>)
 8000e20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e22:	4b7b      	ldr	r3, [pc, #492]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2a:	4b79      	ldr	r3, [pc, #484]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e30:	4b77      	ldr	r3, [pc, #476]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e36:	4b76      	ldr	r3, [pc, #472]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e3c:	4b74      	ldr	r3, [pc, #464]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e42:	4b73      	ldr	r3, [pc, #460]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000e48:	4b71      	ldr	r3, [pc, #452]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e4a:	220b      	movs	r2, #11
 8000e4c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4e:	4b70      	ldr	r3, [pc, #448]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e54:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b6d      	ldr	r3, [pc, #436]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e60:	4b6b      	ldr	r3, [pc, #428]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e66:	4b6a      	ldr	r3, [pc, #424]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e6e:	4b68      	ldr	r3, [pc, #416]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e74:	4b66      	ldr	r3, [pc, #408]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7c:	4864      	ldr	r0, [pc, #400]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e7e:	f002 fbc9 	bl	8003614 <HAL_ADC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e88:	f001 fa5c 	bl	8002344 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	485e      	ldr	r0, [pc, #376]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e98:	f003 fce4 	bl	8004864 <HAL_ADCEx_MultiModeConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000ea2:	f001 fa4f 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <MX_ADC1_Init+0x220>)
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000eb6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4851      	ldr	r0, [pc, #324]	; (8001010 <MX_ADC1_Init+0x218>)
 8000eca:	f002 fe27 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ed4:	f001 fa36 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ed8:	4b50      	ldr	r3, [pc, #320]	; (800101c <MX_ADC1_Init+0x224>)
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000edc:	230c      	movs	r3, #12
 8000ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	484a      	ldr	r0, [pc, #296]	; (8001010 <MX_ADC1_Init+0x218>)
 8000ee6:	f002 fe19 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ef0:	f001 fa28 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ef4:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <MX_ADC1_Init+0x228>)
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ef8:	2312      	movs	r3, #18
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4843      	ldr	r0, [pc, #268]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f02:	f002 fe0b 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000f0c:	f001 fa1a 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f10:	4b44      	ldr	r3, [pc, #272]	; (8001024 <MX_ADC1_Init+0x22c>)
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f14:	2318      	movs	r3, #24
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	483c      	ldr	r0, [pc, #240]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f1e:	f002 fdfd 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000f28:	f001 fa0c 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_ADC1_Init+0x230>)
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4835      	ldr	r0, [pc, #212]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f3c:	f002 fdee 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000f46:	f001 f9fd 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <MX_ADC1_Init+0x234>)
 8000f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f4e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	482d      	ldr	r0, [pc, #180]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f5a:	f002 fddf 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000f64:	f001 f9ee 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f68:	4b31      	ldr	r3, [pc, #196]	; (8001030 <MX_ADC1_Init+0x238>)
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f6c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000f70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	4826      	ldr	r0, [pc, #152]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f78:	f002 fdd0 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000f82:	f001 f9df 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_ADC1_Init+0x23c>)
 8000f88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000f8a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000f8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	481e      	ldr	r0, [pc, #120]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f96:	f002 fdc1 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000fa0:	f001 f9d0 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_ADC1_Init+0x240>)
 8000fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000fa8:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000fac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <MX_ADC1_Init+0x218>)
 8000fb4:	f002 fdb2 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000fbe:	f001 f9c1 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_ADC1_Init+0x244>)
 8000fc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_ADC1_Init+0x218>)
 8000fd6:	f002 fda1 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000fe0:	f001 f9b0 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_ADC1_Init+0x248>)
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000fe8:	f240 2306 	movw	r3, #518	; 0x206
 8000fec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_ADC1_Init+0x218>)
 8000ff8:	f002 fd90 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8001002:	f001 f99f 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2400011c 	.word	0x2400011c
 8001014:	40022000 	.word	0x40022000
 8001018:	0c900008 	.word	0x0c900008
 800101c:	10c00010 	.word	0x10c00010
 8001020:	14f00020 	.word	0x14f00020
 8001024:	1d500080 	.word	0x1d500080
 8001028:	21800100 	.word	0x21800100
 800102c:	25b00200 	.word	0x25b00200
 8001030:	2a000400 	.word	0x2a000400
 8001034:	2e300800 	.word	0x2e300800
 8001038:	3ac04000 	.word	0x3ac04000
 800103c:	3ef08000 	.word	0x3ef08000
 8001040:	47520000 	.word	0x47520000

08001044 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800105c:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <MX_ADC3_Init+0x110>)
 800105e:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <MX_ADC3_Init+0x114>)
 8001060:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <MX_ADC3_Init+0x110>)
 8001064:	2208      	movs	r2, #8
 8001066:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001068:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <MX_ADC3_Init+0x110>)
 800106a:	2201      	movs	r2, #1
 800106c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <MX_ADC3_Init+0x110>)
 8001070:	2204      	movs	r2, #4
 8001072:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <MX_ADC3_Init+0x110>)
 8001076:	2200      	movs	r2, #0
 8001078:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <MX_ADC3_Init+0x110>)
 800107c:	2201      	movs	r2, #1
 800107e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001080:	4b34      	ldr	r3, [pc, #208]	; (8001154 <MX_ADC3_Init+0x110>)
 8001082:	2204      	movs	r2, #4
 8001084:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MX_ADC3_Init+0x110>)
 8001088:	2200      	movs	r2, #0
 800108a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_ADC3_Init+0x110>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <MX_ADC3_Init+0x110>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <MX_ADC3_Init+0x110>)
 800109a:	2203      	movs	r2, #3
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_ADC3_Init+0x110>)
 80010a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <MX_ADC3_Init+0x110>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_ADC3_Init+0x110>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010b4:	4827      	ldr	r0, [pc, #156]	; (8001154 <MX_ADC3_Init+0x110>)
 80010b6:	f002 faad 	bl	8003614 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80010c0:	f001 f940 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_ADC3_Init+0x118>)
 80010c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c8:	2306      	movs	r3, #6
 80010ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80010cc:	2307      	movs	r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d6:	2304      	movs	r3, #4
 80010d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	481b      	ldr	r0, [pc, #108]	; (8001154 <MX_ADC3_Init+0x110>)
 80010e8:	f002 fd18 	bl	8003b1c <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80010f2:	f001 f927 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_ADC3_Init+0x11c>)
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010fa:	230c      	movs	r3, #12
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <MX_ADC3_Init+0x110>)
 8001104:	f002 fd0a 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800110e:	f001 f919 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001116:	2312      	movs	r3, #18
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC3_Init+0x110>)
 8001120:	f002 fcfc 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800112a:	f001 f90b 	bl	8002344 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <MX_ADC3_Init+0x120>)
 8001130:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001132:	2318      	movs	r3, #24
 8001134:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC3_Init+0x110>)
 800113c:	f002 fcee 	bl	8003b1c <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001146:	f001 f8fd 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000180 	.word	0x24000180
 8001158:	58026000 	.word	0x58026000
 800115c:	cb840000 	.word	0xcb840000
 8001160:	cfb80000 	.word	0xcfb80000
 8001164:	04300002 	.word	0x04300002

08001168 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2224      	movs	r2, #36	; 0x24
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f013 fa01 	bl	801457c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_DAC1_Init+0x5c>)
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_DAC1_Init+0x60>)
 800117e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001180:	4810      	ldr	r0, [pc, #64]	; (80011c4 <MX_DAC1_Init+0x5c>)
 8001182:	f003 fd2d 	bl	8004be0 <HAL_DAC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800118c:	f001 f8da 	bl	8002344 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001194:	230a      	movs	r3, #10
 8001196:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800119c:	2301      	movs	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_DAC1_Init+0x5c>)
 80011ac:	f003 ff48 	bl	8005040 <HAL_DAC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011b6:	f001 f8c5 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	240002d4 	.word	0x240002d4
 80011c8:	40007400 	.word	0x40007400

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <MX_I2C1_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_I2C1_Init+0x7c>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_I2C1_Init+0x74>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_I2C1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_I2C1_Init+0x74>)
 8001208:	f007 f90e 	bl	8008428 <HAL_I2C_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001212:	f001 f897 	bl	8002344 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_I2C1_Init+0x74>)
 800121a:	f007 f9a1 	bl	8008560 <HAL_I2CEx_ConfigAnalogFilter>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001224:	f001 f88e 	bl	8002344 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_I2C1_Init+0x74>)
 800122c:	f007 f9e3 	bl	80085f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001236:	f001 f885 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24000360 	.word	0x24000360
 8001244:	40005400 	.word	0x40005400
 8001248:	00506682 	.word	0x00506682

0800124c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MX_RTC_Init+0xb0>)
 8001266:	4a26      	ldr	r2, [pc, #152]	; (8001300 <MX_RTC_Init+0xb4>)
 8001268:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_RTC_Init+0xb0>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_RTC_Init+0xb0>)
 8001272:	227f      	movs	r2, #127	; 0x7f
 8001274:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_RTC_Init+0xb0>)
 8001278:	22ff      	movs	r2, #255	; 0xff
 800127a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_RTC_Init+0xb0>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_RTC_Init+0xb0>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_RTC_Init+0xb0>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_RTC_Init+0xb0>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001294:	4819      	ldr	r0, [pc, #100]	; (80012fc <MX_RTC_Init+0xb0>)
 8001296:	f00a ff5b 	bl	800c150 <HAL_RTC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80012a0:	f001 f850 	bl	8002344 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	480f      	ldr	r0, [pc, #60]	; (80012fc <MX_RTC_Init+0xb0>)
 80012c0:	f00a ffc8 	bl	800c254 <HAL_RTC_SetTime>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012ca:	f001 f83b 	bl	8002344 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80012ce:	2305      	movs	r3, #5
 80012d0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80012d2:	2305      	movs	r3, #5
 80012d4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 80012d6:	2331      	movs	r3, #49	; 0x31
 80012d8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80012da:	2324      	movs	r3, #36	; 0x24
 80012dc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_RTC_Init+0xb0>)
 80012e6:	f00b f8af 	bl	800c448 <HAL_RTC_SetDate>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012f0:	f001 f828 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	240003b4 	.word	0x240003b4
 8001300:	58004000 	.word	0x58004000

08001304 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <MX_SPI1_Init+0xa8>)
 800130a:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <MX_SPI1_Init+0xac>)
 800130c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001310:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001318:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800131c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001320:	220f      	movs	r2, #15
 8001322:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_SPI1_Init+0xa8>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001332:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001336:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_SPI1_Init+0xa8>)
 800133a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800133e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_SPI1_Init+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001354:	2200      	movs	r2, #0
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_SPI1_Init+0xa8>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001362:	2200      	movs	r2, #0
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001368:	2200      	movs	r2, #0
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_SPI1_Init+0xa8>)
 800136e:	2200      	movs	r2, #0
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001374:	2200      	movs	r2, #0
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI1_Init+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001386:	2200      	movs	r2, #0
 8001388:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_SPI1_Init+0xa8>)
 800138c:	2200      	movs	r2, #0
 800138e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001392:	2200      	movs	r2, #0
 8001394:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001398:	f00b f9fc 	bl	800c794 <HAL_SPI_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80013a2:	f000 ffcf 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	240003d8 	.word	0x240003d8
 80013b0:	40013000 	.word	0x40013000

080013b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <MX_SPI2_Init+0xa8>)
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <MX_SPI2_Init+0xac>)
 80013bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_SPI2_Init+0xa8>)
 80013c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <MX_SPI2_Init+0xa8>)
 80013c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_SPI2_Init+0xa8>)
 80013d0:	220f      	movs	r2, #15
 80013d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_SPI2_Init+0xa8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_SPI2_Init+0xa8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_SPI2_Init+0xa8>)
 80013e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_SPI2_Init+0xa8>)
 80013ea:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80013ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_SPI2_Init+0xa8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_SPI2_Init+0xa8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_SPI2_Init+0xa8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_SPI2_Init+0xa8>)
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_SPI2_Init+0xa8>)
 800140a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_SPI2_Init+0xa8>)
 8001412:	2200      	movs	r2, #0
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_SPI2_Init+0xa8>)
 8001418:	2200      	movs	r2, #0
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_SPI2_Init+0xa8>)
 800141e:	2200      	movs	r2, #0
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_SPI2_Init+0xa8>)
 8001424:	2200      	movs	r2, #0
 8001426:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_SPI2_Init+0xa8>)
 800142a:	2200      	movs	r2, #0
 800142c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_SPI2_Init+0xa8>)
 8001430:	2200      	movs	r2, #0
 8001432:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SPI2_Init+0xa8>)
 8001436:	2200      	movs	r2, #0
 8001438:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_SPI2_Init+0xa8>)
 800143c:	2200      	movs	r2, #0
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_SPI2_Init+0xa8>)
 8001442:	2200      	movs	r2, #0
 8001444:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_SPI2_Init+0xa8>)
 8001448:	f00b f9a4 	bl	800c794 <HAL_SPI_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001452:	f000 ff77 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24000460 	.word	0x24000460
 8001460:	40003800 	.word	0x40003800

08001464 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b09a      	sub	sp, #104	; 0x68
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	222c      	movs	r2, #44	; 0x2c
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f013 f86c 	bl	801457c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a4:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014a6:	4a45      	ldr	r2, [pc, #276]	; (80015bc <MX_TIM1_Init+0x158>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014ac:	225f      	movs	r2, #95	; 0x5f
 80014ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80014b6:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014b8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80014bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d0:	4839      	ldr	r0, [pc, #228]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014d2:	f00b fa9e 	bl	800ca12 <HAL_TIM_Base_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014dc:	f000 ff32 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ea:	4619      	mov	r1, r3
 80014ec:	4832      	ldr	r0, [pc, #200]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014ee:	f00c f8dd 	bl	800d6ac <HAL_TIM_ConfigClockSource>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014f8:	f000 ff24 	bl	8002344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014fc:	482e      	ldr	r0, [pc, #184]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014fe:	f00b fd49 	bl	800cf94 <HAL_TIM_PWM_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001508:	f000 ff1c 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001518:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800151c:	4619      	mov	r1, r3
 800151e:	4826      	ldr	r0, [pc, #152]	; (80015b8 <MX_TIM1_Init+0x154>)
 8001520:	f00c fe1a 	bl	800e158 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800152a:	f000 ff0b 	bl	8002344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152e:	2360      	movs	r3, #96	; 0x60
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001532:	f240 13df 	movw	r3, #479	; 0x1df
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4818      	ldr	r0, [pc, #96]	; (80015b8 <MX_TIM1_Init+0x154>)
 8001556:	f00b ff95 	bl	800d484 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001560:	f000 fef0 	bl	8002344 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <MX_TIM1_Init+0x154>)
 800159a:	f00c fe6b 	bl	800e274 <HAL_TIMEx_ConfigBreakDeadTime>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80015a4:	f000 fece 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <MX_TIM1_Init+0x154>)
 80015aa:	f001 fa59 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 80015ae:	bf00      	nop
 80015b0:	3768      	adds	r7, #104	; 0x68
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	240004e8 	.word	0x240004e8
 80015bc:	40010000 	.word	0x40010000

080015c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <MX_TIM2_Init+0xe8>)
 80015f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <MX_TIM2_Init+0xe8>)
 80015fc:	222f      	movs	r2, #47	; 0x2f
 80015fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001608:	f640 4234 	movw	r2, #3124	; 0xc34
 800160c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800161a:	4823      	ldr	r0, [pc, #140]	; (80016a8 <MX_TIM2_Init+0xe8>)
 800161c:	f00b f9f9 	bl	800ca12 <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001626:	f000 fe8d 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001634:	4619      	mov	r1, r3
 8001636:	481c      	ldr	r0, [pc, #112]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001638:	f00c f838 	bl	800d6ac <HAL_TIM_ConfigClockSource>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001642:	f000 fe7f 	bl	8002344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001648:	f00b fca4 	bl	800cf94 <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001652:	f000 fe77 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001656:	2320      	movs	r3, #32
 8001658:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001666:	f00c fd77 	bl	800e158 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001670:	f000 fe68 	bl	8002344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	; 0x60
 8001676:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	220c      	movs	r2, #12
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM2_Init+0xe8>)
 800168c:	f00b fefa 	bl	800d484 <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001696:	f000 fe55 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM2_Init+0xe8>)
 800169c:	f001 f9e0 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3738      	adds	r7, #56	; 0x38
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	24000534 	.word	0x24000534

080016ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM3_Init+0x94>)
 80016cc:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <MX_TIM3_Init+0x98>)
 80016ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_TIM3_Init+0x94>)
 80016d2:	222f      	movs	r2, #47	; 0x2f
 80016d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM3_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_TIM3_Init+0x94>)
 80016de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_TIM3_Init+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_TIM3_Init+0x94>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016f0:	4813      	ldr	r0, [pc, #76]	; (8001740 <MX_TIM3_Init+0x94>)
 80016f2:	f00b f98e 	bl	800ca12 <HAL_TIM_Base_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016fc:	f000 fe22 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001704:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_TIM3_Init+0x94>)
 800170e:	f00b ffcd 	bl	800d6ac <HAL_TIM_ConfigClockSource>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001718:	f000 fe14 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_TIM3_Init+0x94>)
 800172a:	f00c fd15 	bl	800e158 <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001734:	f000 fe06 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	24000580 	.word	0x24000580
 8001744:	40000400 	.word	0x40000400

08001748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <MX_USART1_UART_Init+0x94>)
 8001750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001754:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001792:	f00c fe0b 	bl	800e3ac <HAL_UART_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800179c:	f000 fdd2 	bl	8002344 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a0:	2100      	movs	r1, #0
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 80017a4:	f00f fa2d 	bl	8010c02 <HAL_UARTEx_SetTxFifoThreshold>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017ae:	f000 fdc9 	bl	8002344 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 80017b6:	f00f fa62 	bl	8010c7e <HAL_UARTEx_SetRxFifoThreshold>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f000 fdc0 	bl	8002344 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 80017c6:	f00f f9e3 	bl	8010b90 <HAL_UARTEx_DisableFifoMode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017d0:	f000 fdb8 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	240005cc 	.word	0x240005cc
 80017dc:	40011000 	.word	0x40011000

080017e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_DMA_Init+0x5c>)
 80017e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <MX_DMA_Init+0x5c>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_DMA_Init+0x5c>)
 80017f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2105      	movs	r1, #5
 8001808:	200b      	movs	r0, #11
 800180a:	f003 f9c1 	bl	8004b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800180e:	200b      	movs	r0, #11
 8001810:	f003 f9d8 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2105      	movs	r1, #5
 8001818:	200c      	movs	r0, #12
 800181a:	f003 f9b9 	bl	8004b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800181e:	200c      	movs	r0, #12
 8001820:	f003 f9d0 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2105      	movs	r1, #5
 8001828:	2010      	movs	r0, #16
 800182a:	f003 f9b1 	bl	8004b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800182e:	2010      	movs	r0, #16
 8001830:	f003 f9c8 	bl	8004bc4 <HAL_NVIC_EnableIRQ>

}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	58024400 	.word	0x58024400

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4b34      	ldr	r3, [pc, #208]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	4a32      	ldr	r2, [pc, #200]	; (8001928 <MX_GPIO_Init+0xe8>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001874:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <MX_GPIO_Init+0xe8>)
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	4a23      	ldr	r2, [pc, #140]	; (8001928 <MX_GPIO_Init+0xe8>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80018d4:	4815      	ldr	r0, [pc, #84]	; (800192c <MX_GPIO_Init+0xec>)
 80018d6:	f006 fd8d 	bl	80083f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2164      	movs	r1, #100	; 0x64
 80018de:	4814      	ldr	r0, [pc, #80]	; (8001930 <MX_GPIO_Init+0xf0>)
 80018e0:	f006 fd88 	bl	80083f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018e4:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80018e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <MX_GPIO_Init+0xec>)
 80018fe:	f006 fbb1 	bl	8008064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001902:	2364      	movs	r3, #100	; 0x64
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_GPIO_Init+0xf0>)
 800191a:	f006 fba3 	bl	8008064 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	58024400 	.word	0x58024400
 800192c:	58020800 	.word	0x58020800
 8001930:	58020400 	.word	0x58020400

08001934 <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b090      	sub	sp, #64	; 0x40
 8001938:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 800193a:	230a      	movs	r3, #10
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 800193e:	f107 011c 	add.w	r1, r7, #28
 8001942:	2364      	movs	r3, #100	; 0x64
 8001944:	2209      	movs	r2, #9
 8001946:	4840      	ldr	r0, [pc, #256]	; (8001a48 <handshake+0x114>)
 8001948:	f00c fe0e 	bl	800e568 <HAL_UART_Receive>
		key = rx_buffer[0];
 800194c:	7f3b      	ldrb	r3, [r7, #28]
 800194e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001952:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d1f1      	bne.n	800193e <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 800195a:	7f7b      	ldrb	r3, [r7, #29]
 800195c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001960:	7fbb      	ldrb	r3, [r7, #30]
 8001962:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 800196c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001970:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001974:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001978:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 800197c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001980:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b21a      	sxth	r2, r3
 800198c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001990:	b21b      	sxth	r3, r3
 8001992:	4313      	orrs	r3, r2
 8001994:	b21b      	sxth	r3, r3
 8001996:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001998:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800199c:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 800199e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80019a2:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 80019a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019a8:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 80019aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019ae:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 80019b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80019b4:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 80019b6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80019ba:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 80019bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019be:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	2200      	movs	r2, #0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4820      	ldr	r0, [pc, #128]	; (8001a4c <handshake+0x118>)
 80019ca:	f00a fd3d 	bl	800c448 <HAL_RTC_SetDate>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 80019d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <handshake+0xac>
	{
	    Error_Handler();
 80019dc:	f000 fcb2 	bl	8002344 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4819      	ldr	r0, [pc, #100]	; (8001a4c <handshake+0x118>)
 80019e8:	f00a fc34 	bl	800c254 <HAL_RTC_SetTime>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 80019f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <handshake+0xca>
	{
	    Error_Handler();
 80019fa:	f000 fca3 	bl	8002344 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 80019fe:	23fa      	movs	r3, #250	; 0xfa
 8001a00:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8001a16:	2302      	movs	r3, #2
 8001a18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a20:	e009      	b.n	8001a36 <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8001a22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a26:	2364      	movs	r3, #100	; 0x64
 8001a28:	2205      	movs	r2, #5
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <handshake+0x114>)
 8001a2c:	f00c fd0e 	bl	800e44c <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8001a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a32:	3301      	adds	r3, #1
 8001a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dbf1      	blt.n	8001a22 <handshake+0xee>
	}

	return 1;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3740      	adds	r7, #64	; 0x40
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	240005cc 	.word	0x240005cc
 8001a4c:	240003b4 	.word	0x240003b4

08001a50 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a58:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001a5e:	210c      	movs	r1, #12
 8001a60:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <system_setup+0x74>)
 8001a62:	f00b faf9 	bl	800d058 <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001a66:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001a6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a6e:	4816      	ldr	r0, [pc, #88]	; (8001ac8 <system_setup+0x78>)
 8001a70:	f002 fe94 	bl	800479c <HAL_ADCEx_Calibration_Start>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 8001a7a:	f000 fc63 	bl	8002344 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001a7e:	220b      	movs	r2, #11
 8001a80:	4912      	ldr	r1, [pc, #72]	; (8001acc <system_setup+0x7c>)
 8001a82:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <system_setup+0x78>)
 8001a84:	f001 ff68 	bl	8003958 <HAL_ADC_Start_DMA>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 8001a8e:	f000 fc59 	bl	8002344 <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001a92:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001a96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <system_setup+0x80>)
 8001a9c:	f002 fe7e 	bl	800479c <HAL_ADCEx_Calibration_Start>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 8001aa6:	f000 fc4d 	bl	8002344 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001aaa:	2204      	movs	r2, #4
 8001aac:	4909      	ldr	r1, [pc, #36]	; (8001ad4 <system_setup+0x84>)
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <system_setup+0x80>)
 8001ab0:	f001 ff52 	bl	8003958 <HAL_ADC_Start_DMA>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 8001aba:	f000 fc43 	bl	8002344 <Error_Handler>
	  	}
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	24000534 	.word	0x24000534
 8001ac8:	2400011c 	.word	0x2400011c
 8001acc:	24000700 	.word	0x24000700
 8001ad0:	24000180 	.word	0x24000180
 8001ad4:	24000720 	.word	0x24000720

08001ad8 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	481d      	ldr	r0, [pc, #116]	; (8001b60 <getTimestamp+0x88>)
 8001aea:	f00a fc51 	bl	800c390 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	2200      	movs	r2, #0
 8001af4:	4619      	mov	r1, r3
 8001af6:	481a      	ldr	r0, [pc, #104]	; (8001b60 <getTimestamp+0x88>)
 8001af8:	f00a fd2e 	bl	800c558 <HAL_RTC_GetDate>
    uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b02:	fb03 f202 	mul.w	r2, r3, r2
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <getTimestamp+0x88>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24



    buffer[0] = currentDate.Year;		// 0-99
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	701a      	strb	r2, [r3, #0]
    buffer[1] = currentDate.Month;		// 1-12
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	7b7a      	ldrb	r2, [r7, #13]
 8001b20:	701a      	strb	r2, [r3, #0]
    buffer[2] = currentDate.Date;		// 1-31
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3302      	adds	r3, #2
 8001b26:	7bba      	ldrb	r2, [r7, #14]
 8001b28:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	7c3a      	ldrb	r2, [r7, #16]
 8001b30:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3304      	adds	r3, #4
 8001b36:	7c7a      	ldrb	r2, [r7, #17]
 8001b38:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3305      	adds	r3, #5
 8001b3e:	7cba      	ldrb	r2, [r7, #18]
 8001b40:	701a      	strb	r2, [r3, #0]
    buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	0a1a      	lsrs	r2, r3, #8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3306      	adds	r3, #6
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
    buffer[7] = milliseconds & 0xFF;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3307      	adds	r3, #7
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	701a      	strb	r2, [r3, #0]

}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	240003b4 	.word	0x240003b4

08001b64 <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f012 fce3 	bl	8014540 <malloc>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	88fa      	ldrh	r2, [r7, #6]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f012 fceb 	bl	8014560 <memcpy>
    packet.size = size;
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	461a      	mov	r2, r3
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b9a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001bae:	bf00      	nop
 8001bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb4:	483f      	ldr	r0, [pc, #252]	; (8001cb4 <sample_pmt+0x10c>)
 8001bb6:	f006 fc05 	bl	80083c4 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f7      	bne.n	8001bb0 <sample_pmt+0x8>
	}
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001bc0:	200e      	movs	r0, #14
 8001bc2:	f012 fcbd 	bl	8014540 <malloc>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f012 fcb8 	bl	8014540 <malloc>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001bd4:	2008      	movs	r0, #8
 8001bd6:	f012 fcb3 	bl	8014540 <malloc>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	60fb      	str	r3, [r7, #12]
    getTimestamp(timestamp);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff ff7a 	bl	8001ad8 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	220e      	movs	r2, #14
 8001be8:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	3301      	adds	r3, #1
 8001bee:	220d      	movs	r2, #13
 8001bf0:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	22bb      	movs	r2, #187	; 0xbb
 8001bf6:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	22bb      	movs	r2, #187	; 0xbb
 8001bfe:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <sample_pmt+0x110>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <sample_pmt+0x110>)
 8001c12:	881a      	ldrh	r2, [r3, #0]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3303      	adds	r3, #3
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3305      	adds	r3, #5
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	7852      	ldrb	r2, [r2, #1]
 8001c2e:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3306      	adds	r3, #6
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	7812      	ldrb	r2, [r2, #0]
 8001c38:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3307      	adds	r3, #7
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	7852      	ldrb	r2, [r2, #1]
 8001c42:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3308      	adds	r3, #8
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	7892      	ldrb	r2, [r2, #2]
 8001c4c:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3309      	adds	r3, #9
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	78d2      	ldrb	r2, [r2, #3]
 8001c56:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	330a      	adds	r3, #10
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	7912      	ldrb	r2, [r2, #4]
 8001c60:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	330b      	adds	r3, #11
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	7952      	ldrb	r2, [r2, #5]
 8001c6a:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	330c      	adds	r3, #12
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	7992      	ldrb	r2, [r2, #6]
 8001c74:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	330d      	adds	r3, #13
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	79d2      	ldrb	r2, [r2, #7]
 8001c7e:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	220e      	movs	r2, #14
 8001c84:	6979      	ldr	r1, [r7, #20]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff6c 	bl	8001b64 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <sample_pmt+0x114>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	1d39      	adds	r1, r7, #4
 8001c92:	2300      	movs	r3, #0
 8001c94:	2200      	movs	r2, #0
 8001c96:	f00f fb37 	bl	8011308 <osMessageQueuePut>
	free(buffer);
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f012 fc58 	bl	8014550 <free>
	free(pmt_spi);
 8001ca0:	6938      	ldr	r0, [r7, #16]
 8001ca2:	f012 fc55 	bl	8014550 <free>
	free(timestamp);
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f012 fc52 	bl	8014550 <free>
}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	58020000 	.word	0x58020000
 8001cb8:	24000678 	.word	0x24000678
 8001cbc:	24000674 	.word	0x24000674

08001cc0 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8001cc6:	bf00      	nop
 8001cc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ccc:	4856      	ldr	r0, [pc, #344]	; (8001e28 <sample_erpa+0x168>)
 8001cce:	f006 fb79 	bl	80083c4 <HAL_GPIO_ReadPin>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f7      	bne.n	8001cc8 <sample_erpa+0x8>
	}

    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001cd8:	2012      	movs	r0, #18
 8001cda:	f012 fc31 	bl	8014540 <malloc>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f012 fc2c 	bl	8014540 <malloc>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8001cec:	2004      	movs	r0, #4
 8001cee:	f012 fc27 	bl	8014540 <malloc>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001cf6:	2008      	movs	r0, #8
 8001cf8:	f012 fc22 	bl	8014540 <malloc>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60bb      	str	r3, [r7, #8]
    getTimestamp(timestamp);
 8001d00:	68b8      	ldr	r0, [r7, #8]
 8001d02:	f7ff fee9 	bl	8001ad8 <getTimestamp>

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	220e      	movs	r2, #14
 8001d0a:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	220d      	movs	r2, #13
 8001d12:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	22ee      	movs	r2, #238	; 0xee
 8001d18:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	22dd      	movs	r2, #221	; 0xdd
 8001d20:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	22aa      	movs	r2, #170	; 0xaa
 8001d26:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	22aa      	movs	r2, #170	; 0xaa
 8001d2e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8001d30:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <sample_erpa+0x16c>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001d40:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <sample_erpa+0x16c>)
 8001d42:	881a      	ldrh	r2, [r3, #0]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3303      	adds	r3, #3
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3304      	adds	r3, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	881a      	ldrh	r2, [r3, #0]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3305      	adds	r3, #5
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3306      	adds	r3, #6
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	881a      	ldrh	r2, [r3, #0]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3307      	adds	r3, #7
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3308      	adds	r3, #8
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	7812      	ldrb	r2, [r2, #0]
 8001d90:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3309      	adds	r3, #9
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	7852      	ldrb	r2, [r2, #1]
 8001d9a:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	330a      	adds	r3, #10
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	330b      	adds	r3, #11
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	7852      	ldrb	r2, [r2, #1]
 8001dae:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	330c      	adds	r3, #12
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	7892      	ldrb	r2, [r2, #2]
 8001db8:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	330d      	adds	r3, #13
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	78d2      	ldrb	r2, [r2, #3]
 8001dc2:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	330e      	adds	r3, #14
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	7912      	ldrb	r2, [r2, #4]
 8001dcc:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	330f      	adds	r3, #15
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	7952      	ldrb	r2, [r2, #5]
 8001dd6:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3310      	adds	r3, #16
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	7992      	ldrb	r2, [r2, #6]
 8001de0:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3311      	adds	r3, #17
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	79d2      	ldrb	r2, [r2, #7]
 8001dea:	701a      	strb	r2, [r3, #0]



	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001dec:	463b      	mov	r3, r7
 8001dee:	2212      	movs	r2, #18
 8001df0:	6979      	ldr	r1, [r7, #20]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff feb6 	bl	8001b64 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <sample_erpa+0x170>)
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	4639      	mov	r1, r7
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2200      	movs	r2, #0
 8001e02:	f00f fa81 	bl	8011308 <osMessageQueuePut>
	free(buffer);
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f012 fba2 	bl	8014550 <free>
	free(erpa_spi);
 8001e0c:	6938      	ldr	r0, [r7, #16]
 8001e0e:	f012 fb9f 	bl	8014550 <free>
	free(erpa_adc);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f012 fb9c 	bl	8014550 <free>
	free(timestamp);
 8001e18:	68b8      	ldr	r0, [r7, #8]
 8001e1a:	f012 fb99 	bl	8014550 <free>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	58020400 	.word	0x58020400
 8001e2c:	2400067a 	.word	0x2400067a
 8001e30:	24000674 	.word	0x24000674

08001e34 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001e3a:	202e      	movs	r0, #46	; 0x2e
 8001e3c:	f012 fb80 	bl	8014540 <malloc>
 8001e40:	4603      	mov	r3, r0
 8001e42:	61fb      	str	r3, [r7, #28]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8001e44:	2008      	movs	r0, #8
 8001e46:	f012 fb7b 	bl	8014540 <malloc>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001e4e:	2012      	movs	r0, #18
 8001e50:	f012 fb76 	bl	8014540 <malloc>
 8001e54:	4603      	mov	r3, r0
 8001e56:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001e58:	2008      	movs	r0, #8
 8001e5a:	f012 fb71 	bl	8014540 <malloc>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001e62:	2008      	movs	r0, #8
 8001e64:	f012 fb6c 	bl	8014540 <malloc>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]
    getTimestamp(timestamp);
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fe33 	bl	8001ad8 <getTimestamp>

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2211      	movs	r2, #17
 8001e76:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	2212      	movs	r2, #18
 8001e7e:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	3304      	adds	r3, #4
 8001e84:	2213      	movs	r2, #19
 8001e86:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	3306      	adds	r3, #6
 8001e8c:	2214      	movs	r2, #20
 8001e8e:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	22a0      	movs	r2, #160	; 0xa0
 8001e94:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	22a1      	movs	r2, #161	; 0xa1
 8001e9c:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	22a2      	movs	r2, #162	; 0xa2
 8001ea4:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3306      	adds	r3, #6
 8001eaa:	22a3      	movs	r2, #163	; 0xa3
 8001eac:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	22a4      	movs	r2, #164	; 0xa4
 8001eb4:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	330a      	adds	r3, #10
 8001eba:	22a5      	movs	r2, #165	; 0xa5
 8001ebc:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	22a6      	movs	r2, #166	; 0xa6
 8001ec4:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	330e      	adds	r3, #14
 8001eca:	22a7      	movs	r2, #167	; 0xa7
 8001ecc:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3310      	adds	r3, #16
 8001ed2:	22a8      	movs	r2, #168	; 0xa8
 8001ed4:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	22b0      	movs	r2, #176	; 0xb0
 8001eda:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	3302      	adds	r3, #2
 8001ee0:	22b1      	movs	r2, #177	; 0xb1
 8001ee2:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	22b2      	movs	r2, #178	; 0xb2
 8001eea:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	3306      	adds	r3, #6
 8001ef0:	22b3      	movs	r2, #179	; 0xb3
 8001ef2:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	22cc      	movs	r2, #204	; 0xcc
 8001ef8:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3301      	adds	r3, #1
 8001efe:	22cc      	movs	r2, #204	; 0xcc
 8001f00:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8001f02:	4ba5      	ldr	r3, [pc, #660]	; (8002198 <sample_hk+0x364>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001f12:	4ba1      	ldr	r3, [pc, #644]	; (8002198 <sample_hk+0x364>)
 8001f14:	881a      	ldrh	r2, [r3, #0]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3303      	adds	r3, #3
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	3302      	adds	r3, #2
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	3302      	adds	r3, #2
 8001f34:	881a      	ldrh	r2, [r3, #0]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3305      	adds	r3, #5
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3306      	adds	r3, #6
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	881a      	ldrh	r2, [r3, #0]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3307      	adds	r3, #7
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f60:	121a      	asrs	r2, r3, #8
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3308      	adds	r3, #8
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3309      	adds	r3, #9
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f80:	121a      	asrs	r2, r3, #8
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	330a      	adds	r3, #10
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	330b      	adds	r3, #11
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa2:	121a      	asrs	r2, r3, #8
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	330d      	adds	r3, #13
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	3306      	adds	r3, #6
 8001fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc4:	121a      	asrs	r2, r3, #8
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	330e      	adds	r3, #14
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	3306      	adds	r3, #6
 8001fd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	330f      	adds	r3, #15
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3310      	adds	r3, #16
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3311      	adds	r3, #17
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	b29a      	uxth	r2, r3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	3312      	adds	r3, #18
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3302      	adds	r3, #2
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3313      	adds	r3, #19
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3304      	adds	r3, #4
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b29a      	uxth	r2, r3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	3314      	adds	r3, #20
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3304      	adds	r3, #4
 8002030:	881a      	ldrh	r2, [r3, #0]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3315      	adds	r3, #21
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3306      	adds	r3, #6
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	b29a      	uxth	r2, r3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	3316      	adds	r3, #22
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3306      	adds	r3, #6
 8002050:	881a      	ldrh	r2, [r3, #0]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3317      	adds	r3, #23
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	330c      	adds	r3, #12
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29a      	uxth	r2, r3
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	3318      	adds	r3, #24
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	330c      	adds	r3, #12
 8002070:	881a      	ldrh	r2, [r3, #0]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3319      	adds	r3, #25
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3306      	adds	r3, #6
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	b29a      	uxth	r2, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	331a      	adds	r3, #26
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3306      	adds	r3, #6
 8002090:	881a      	ldrh	r2, [r3, #0]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	331b      	adds	r3, #27
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3304      	adds	r3, #4
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	331c      	adds	r3, #28
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3304      	adds	r3, #4
 80020b0:	881a      	ldrh	r2, [r3, #0]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	331d      	adds	r3, #29
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	330e      	adds	r3, #14
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	331e      	adds	r3, #30
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	330e      	adds	r3, #14
 80020d0:	881a      	ldrh	r2, [r3, #0]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	331f      	adds	r3, #31
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3310      	adds	r3, #16
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3320      	adds	r3, #32
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3310      	adds	r3, #16
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3321      	adds	r3, #33	; 0x21
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3308      	adds	r3, #8
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	b29a      	uxth	r2, r3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3322      	adds	r3, #34	; 0x22
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3308      	adds	r3, #8
 8002110:	881a      	ldrh	r2, [r3, #0]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3323      	adds	r3, #35	; 0x23
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	330a      	adds	r3, #10
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	b29a      	uxth	r2, r3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	3324      	adds	r3, #36	; 0x24
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	330a      	adds	r3, #10
 8002130:	881a      	ldrh	r2, [r3, #0]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3325      	adds	r3, #37	; 0x25
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3326      	adds	r3, #38	; 0x26
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3327      	adds	r3, #39	; 0x27
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	7852      	ldrb	r2, [r2, #1]
 800214c:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3328      	adds	r3, #40	; 0x28
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	7892      	ldrb	r2, [r2, #2]
 8002156:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	3329      	adds	r3, #41	; 0x29
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	78d2      	ldrb	r2, [r2, #3]
 8002160:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	332a      	adds	r3, #42	; 0x2a
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	7912      	ldrb	r2, [r2, #4]
 800216a:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	332b      	adds	r3, #43	; 0x2b
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	7952      	ldrb	r2, [r2, #5]
 8002174:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	332c      	adds	r3, #44	; 0x2c
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	7992      	ldrb	r2, [r2, #6]
 800217e:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	332d      	adds	r3, #45	; 0x2d
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	79d2      	ldrb	r2, [r2, #7]
 8002188:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	222e      	movs	r2, #46	; 0x2e
 800218e:	69f9      	ldr	r1, [r7, #28]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fce7 	bl	8001b64 <create_packet>
 8002196:	e001      	b.n	800219c <sample_hk+0x368>
 8002198:	2400067c 	.word	0x2400067c
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <sample_hk+0x39c>)
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	1d39      	adds	r1, r7, #4
 80021a2:	2300      	movs	r3, #0
 80021a4:	2200      	movs	r2, #0
 80021a6:	f00f f8af 	bl	8011308 <osMessageQueuePut>
	free(buffer);
 80021aa:	69f8      	ldr	r0, [r7, #28]
 80021ac:	f012 f9d0 	bl	8014550 <free>
	free(hk_i2c);
 80021b0:	69b8      	ldr	r0, [r7, #24]
 80021b2:	f012 f9cd 	bl	8014550 <free>
	free(hk_adc1);
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f012 f9ca 	bl	8014550 <free>
	free(hk_adc3);
 80021bc:	6938      	ldr	r0, [r7, #16]
 80021be:	f012 f9c7 	bl	8014550 <free>
	free(timestamp);
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f012 f9c4 	bl	8014550 <free>
}
 80021c8:	bf00      	nop
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	24000674 	.word	0x24000674

080021d4 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <PMT_init+0x38>)
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021e4:	2200      	movs	r2, #0
 80021e6:	2101      	movs	r1, #1
 80021e8:	f00e ffb4 	bl	8011154 <osEventFlagsWait>
		if(PMT_ON){
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <PMT_init+0x3c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <PMT_init+0x30>
	    sample_pmt();
 80021f4:	f7ff fcd8 	bl	8001ba8 <sample_pmt>
		pmt_seq++;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <PMT_init+0x40>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <PMT_init+0x40>)
 8002202:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8002204:	f00e fee8 	bl	8010fd8 <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002208:	e7e8      	b.n	80021dc <PMT_init+0x8>
 800220a:	bf00      	nop
 800220c:	24000688 	.word	0x24000688
 8002210:	2400067e 	.word	0x2400067e
 8002214:	24000678 	.word	0x24000678

08002218 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <ERPA_init+0x38>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002228:	2200      	movs	r2, #0
 800222a:	2102      	movs	r1, #2
 800222c:	f00e ff92 	bl	8011154 <osEventFlagsWait>
	  if (ERPA_ON)
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <ERPA_init+0x3c>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8002238:	f7ff fd42 	bl	8001cc0 <sample_erpa>
		erpa_seq++;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <ERPA_init+0x40>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <ERPA_init+0x40>)
 8002246:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8002248:	f00e fec6 	bl	8010fd8 <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800224c:	e7e8      	b.n	8002220 <ERPA_init+0x8>
 800224e:	bf00      	nop
 8002250:	24000688 	.word	0x24000688
 8002254:	2400067f 	.word	0x2400067f
 8002258:	2400067a 	.word	0x2400067a

0800225c <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HK_init+0x38>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800226c:	2200      	movs	r2, #0
 800226e:	2104      	movs	r1, #4
 8002270:	f00e ff70 	bl	8011154 <osEventFlagsWait>
	  if(HK_ON)
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HK_init+0x3c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HK_init+0x30>
	  {
	    sample_hk();
 800227c:	f7ff fdda 	bl	8001e34 <sample_hk>
		hk_seq++;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HK_init+0x40>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <HK_init+0x40>)
 800228a:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 800228c:	f00e fea4 	bl	8010fd8 <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002290:	e7e8      	b.n	8002264 <HK_init+0x8>
 8002292:	bf00      	nop
 8002294:	24000688 	.word	0x24000688
 8002298:	24000680 	.word	0x24000680
 800229c:	2400067c 	.word	0x2400067c

080022a0 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80022a8:	2201      	movs	r2, #1
 80022aa:	4904      	ldr	r1, [pc, #16]	; (80022bc <UART_RX_init+0x1c>)
 80022ac:	4804      	ldr	r0, [pc, #16]	; (80022c0 <UART_RX_init+0x20>)
 80022ae:	f00c fa23 	bl	800e6f8 <HAL_UART_Receive_IT>
		osDelay(5);
 80022b2:	2005      	movs	r0, #5
 80022b4:	f00e feb0 	bl	8011018 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80022b8:	e7f6      	b.n	80022a8 <UART_RX_init+0x8>
 80022ba:	bf00      	nop
 80022bc:	2400068c 	.word	0x2400068c
 80022c0:	240005cc 	.word	0x240005cc

080022c4 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <UART_TX_init+0x50>)
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	f107 010c 	add.w	r1, r7, #12
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d8:	2200      	movs	r2, #0
 80022da:	f00f f875 	bl	80113c8 <osMessageQueueGet>
 80022de:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d113      	bne.n	800230e <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <UART_TX_init+0x50>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f00f f8ca 	bl	8011484 <osMessageQueueGetCount>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	4808      	ldr	r0, [pc, #32]	; (8002318 <UART_TX_init+0x54>)
 80022f6:	f012 fa29 	bl	801474c <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 80022fa:	68f9      	ldr	r1, [r7, #12]
 80022fc:	8a3a      	ldrh	r2, [r7, #16]
 80022fe:	2364      	movs	r3, #100	; 0x64
 8002300:	4806      	ldr	r0, [pc, #24]	; (800231c <UART_TX_init+0x58>)
 8002302:	f00c f8a3 	bl	800e44c <HAL_UART_Transmit>
	       free(msg.array);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4618      	mov	r0, r3
 800230a:	f012 f921 	bl	8014550 <free>
	   }
	   osThreadYield();
 800230e:	f00e fe63 	bl	8010fd8 <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8002312:	e7db      	b.n	80022cc <UART_TX_init+0x8>
 8002314:	24000674 	.word	0x24000674
 8002318:	080157a4 	.word	0x080157a4
 800231c:	240005cc 	.word	0x240005cc

08002320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002332:	f000 ff1f 	bl	8003174 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40001000 	.word	0x40001000

08002344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800234c:	e7fe      	b.n	800234c <Error_Handler+0x8>
	...

08002350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_MspInit+0x38>)
 8002358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_MspInit+0x38>)
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_MspInit+0x38>)
 8002368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	210f      	movs	r1, #15
 8002378:	f06f 0001 	mvn.w	r0, #1
 800237c:	f002 fc08 	bl	8004b90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	58024400 	.word	0x58024400

0800238c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a7b      	ldr	r2, [pc, #492]	; (8002598 <HAL_ADC_MspInit+0x20c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	f040 8091 	bne.w	80024d2 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023b0:	4b7a      	ldr	r3, [pc, #488]	; (800259c <HAL_ADC_MspInit+0x210>)
 80023b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023b6:	4a79      	ldr	r2, [pc, #484]	; (800259c <HAL_ADC_MspInit+0x210>)
 80023b8:	f043 0320 	orr.w	r3, r3, #32
 80023bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023c0:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_ADC_MspInit+0x210>)
 80023c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	623b      	str	r3, [r7, #32]
 80023cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_ADC_MspInit+0x210>)
 80023d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d4:	4a71      	ldr	r2, [pc, #452]	; (800259c <HAL_ADC_MspInit+0x210>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023de:	4b6f      	ldr	r3, [pc, #444]	; (800259c <HAL_ADC_MspInit+0x210>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ec:	4b6b      	ldr	r3, [pc, #428]	; (800259c <HAL_ADC_MspInit+0x210>)
 80023ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f2:	4a6a      	ldr	r2, [pc, #424]	; (800259c <HAL_ADC_MspInit+0x210>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fc:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_ADC_MspInit+0x210>)
 80023fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	4b64      	ldr	r3, [pc, #400]	; (800259c <HAL_ADC_MspInit+0x210>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002410:	4a62      	ldr	r2, [pc, #392]	; (800259c <HAL_ADC_MspInit+0x210>)
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_ADC_MspInit+0x210>)
 800241c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002428:	2333      	movs	r3, #51	; 0x33
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800242c:	2303      	movs	r3, #3
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	4619      	mov	r1, r3
 800243a:	4859      	ldr	r0, [pc, #356]	; (80025a0 <HAL_ADC_MspInit+0x214>)
 800243c:	f005 fe12 	bl	8008064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002440:	23ce      	movs	r3, #206	; 0xce
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002444:	2303      	movs	r3, #3
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002450:	4619      	mov	r1, r3
 8002452:	4854      	ldr	r0, [pc, #336]	; (80025a4 <HAL_ADC_MspInit+0x218>)
 8002454:	f005 fe06 	bl	8008064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002458:	2303      	movs	r3, #3
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800245c:	2303      	movs	r3, #3
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002468:	4619      	mov	r1, r3
 800246a:	484f      	ldr	r0, [pc, #316]	; (80025a8 <HAL_ADC_MspInit+0x21c>)
 800246c:	f005 fdfa 	bl	8008064 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002470:	4b4e      	ldr	r3, [pc, #312]	; (80025ac <HAL_ADC_MspInit+0x220>)
 8002472:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_ADC_MspInit+0x224>)
 8002474:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002476:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <HAL_ADC_MspInit+0x220>)
 8002478:	2209      	movs	r2, #9
 800247a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800247c:	4b4b      	ldr	r3, [pc, #300]	; (80025ac <HAL_ADC_MspInit+0x220>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002482:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <HAL_ADC_MspInit+0x220>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002488:	4b48      	ldr	r3, [pc, #288]	; (80025ac <HAL_ADC_MspInit+0x220>)
 800248a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800248e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002490:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_ADC_MspInit+0x220>)
 8002492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002496:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002498:	4b44      	ldr	r3, [pc, #272]	; (80025ac <HAL_ADC_MspInit+0x220>)
 800249a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800249e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024a0:	4b42      	ldr	r3, [pc, #264]	; (80025ac <HAL_ADC_MspInit+0x220>)
 80024a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024a8:	4b40      	ldr	r3, [pc, #256]	; (80025ac <HAL_ADC_MspInit+0x220>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ae:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_ADC_MspInit+0x220>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024b4:	483d      	ldr	r0, [pc, #244]	; (80025ac <HAL_ADC_MspInit+0x220>)
 80024b6:	f002 ff99 	bl	80053ec <HAL_DMA_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80024c0:	f7ff ff40 	bl	8002344 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a39      	ldr	r2, [pc, #228]	; (80025ac <HAL_ADC_MspInit+0x220>)
 80024c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80024ca:	4a38      	ldr	r2, [pc, #224]	; (80025ac <HAL_ADC_MspInit+0x220>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80024d0:	e05e      	b.n	8002590 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a37      	ldr	r2, [pc, #220]	; (80025b4 <HAL_ADC_MspInit+0x228>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d159      	bne.n	8002590 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024dc:	4b2f      	ldr	r3, [pc, #188]	; (800259c <HAL_ADC_MspInit+0x210>)
 80024de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e2:	4a2e      	ldr	r2, [pc, #184]	; (800259c <HAL_ADC_MspInit+0x210>)
 80024e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_ADC_MspInit+0x210>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <HAL_ADC_MspInit+0x210>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002500:	4a26      	ldr	r2, [pc, #152]	; (800259c <HAL_ADC_MspInit+0x210>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_ADC_MspInit+0x210>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002518:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800251c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002520:	f000 fe54 	bl	80031cc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002524:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002528:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800252c:	f000 fe4e 	bl	80031cc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002530:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 8002532:	4a22      	ldr	r2, [pc, #136]	; (80025bc <HAL_ADC_MspInit+0x230>)
 8002534:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 8002538:	2273      	movs	r2, #115	; 0x73
 800253a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 800254a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 8002552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002556:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 800255a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800255e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 8002562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002566:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002574:	4810      	ldr	r0, [pc, #64]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 8002576:	f002 ff39 	bl	80053ec <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002580:	f7ff fee0 	bl	8002344 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 8002588:	64da      	str	r2, [r3, #76]	; 0x4c
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_ADC_MspInit+0x22c>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002590:	bf00      	nop
 8002592:	3738      	adds	r7, #56	; 0x38
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40022000 	.word	0x40022000
 800259c:	58024400 	.word	0x58024400
 80025a0:	58020800 	.word	0x58020800
 80025a4:	58020000 	.word	0x58020000
 80025a8:	58020400 	.word	0x58020400
 80025ac:	240001e4 	.word	0x240001e4
 80025b0:	40020010 	.word	0x40020010
 80025b4:	58026000 	.word	0x58026000
 80025b8:	2400025c 	.word	0x2400025c
 80025bc:	40020028 	.word	0x40020028

080025c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a34      	ldr	r2, [pc, #208]	; (80026b0 <HAL_DAC_MspInit+0xf0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d161      	bne.n	80026a6 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_DAC_MspInit+0xf4>)
 80025e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025e8:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <HAL_DAC_MspInit+0xf4>)
 80025ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_DAC_MspInit+0xf4>)
 80025f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002600:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <HAL_DAC_MspInit+0xf4>)
 8002602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002606:	4a2b      	ldr	r2, [pc, #172]	; (80026b4 <HAL_DAC_MspInit+0xf4>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <HAL_DAC_MspInit+0xf4>)
 8002612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800261e:	2310      	movs	r3, #16
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002622:	2303      	movs	r3, #3
 8002624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4619      	mov	r1, r3
 8002630:	4821      	ldr	r0, [pc, #132]	; (80026b8 <HAL_DAC_MspInit+0xf8>)
 8002632:	f005 fd17 	bl	8008064 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 8002638:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <HAL_DAC_MspInit+0x100>)
 800263a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800263c:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 800263e:	2243      	movs	r2, #67	; 0x43
 8002640:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 8002644:	2240      	movs	r2, #64	; 0x40
 8002646:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 8002650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002654:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002656:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 8002658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800265c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 8002660:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002664:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 8002668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 8002676:	2200      	movs	r2, #0
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800267a:	4810      	ldr	r0, [pc, #64]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 800267c:	f002 feb6 	bl	80053ec <HAL_DMA_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002686:	f7ff fe5d 	bl	8002344 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <HAL_DAC_MspInit+0xfc>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2105      	movs	r1, #5
 800269a:	2036      	movs	r0, #54	; 0x36
 800269c:	f002 fa78 	bl	8004b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026a0:	2036      	movs	r0, #54	; 0x36
 80026a2:	f002 fa8f 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80026a6:	bf00      	nop
 80026a8:	3728      	adds	r7, #40	; 0x28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40007400 	.word	0x40007400
 80026b4:	58024400 	.word	0x58024400
 80026b8:	58020000 	.word	0x58020000
 80026bc:	240002e8 	.word	0x240002e8
 80026c0:	40020088 	.word	0x40020088

080026c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0ba      	sub	sp, #232	; 0xe8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	22c0      	movs	r2, #192	; 0xc0
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f011 ff49 	bl	801457c <memset>
  if(hi2c->Instance==I2C1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a27      	ldr	r2, [pc, #156]	; (800278c <HAL_I2C_MspInit+0xc8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d146      	bne.n	8002782 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026f4:	f04f 0208 	mov.w	r2, #8
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002706:	f107 0310 	add.w	r3, r7, #16
 800270a:	4618      	mov	r0, r3
 800270c:	f007 f822 	bl	8009754 <HAL_RCCEx_PeriphCLKConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002716:	f7ff fe15 	bl	8002344 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271a:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <HAL_I2C_MspInit+0xcc>)
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002720:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <HAL_I2C_MspInit+0xcc>)
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_I2C_MspInit+0xcc>)
 800272c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002738:	f44f 7340 	mov.w	r3, #768	; 0x300
 800273c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002740:	2312      	movs	r3, #18
 8002742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002752:	2304      	movs	r3, #4
 8002754:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800275c:	4619      	mov	r1, r3
 800275e:	480d      	ldr	r0, [pc, #52]	; (8002794 <HAL_I2C_MspInit+0xd0>)
 8002760:	f005 fc80 	bl	8008064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_I2C_MspInit+0xcc>)
 8002766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_I2C_MspInit+0xcc>)
 800276c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002770:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_I2C_MspInit+0xcc>)
 8002776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800277a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002782:	bf00      	nop
 8002784:	37e8      	adds	r7, #232	; 0xe8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40005400 	.word	0x40005400
 8002790:	58024400 	.word	0x58024400
 8002794:	58020400 	.word	0x58020400

08002798 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0b2      	sub	sp, #200	; 0xc8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a0:	f107 0308 	add.w	r3, r7, #8
 80027a4:	22c0      	movs	r2, #192	; 0xc0
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f011 fee7 	bl	801457c <memset>
  if(hrtc->Instance==RTC)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <HAL_RTC_MspInit+0x5c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d119      	bne.n	80027ec <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	4618      	mov	r0, r3
 80027d2:	f006 ffbf 	bl	8009754 <HAL_RCCEx_PeriphCLKConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80027dc:	f7ff fdb2 	bl	8002344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RTC_MspInit+0x60>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_RTC_MspInit+0x60>)
 80027e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027ec:	bf00      	nop
 80027ee:	37c8      	adds	r7, #200	; 0xc8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	58004000 	.word	0x58004000
 80027f8:	58024400 	.word	0x58024400

080027fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0bc      	sub	sp, #240	; 0xf0
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002814:	f107 0318 	add.w	r3, r7, #24
 8002818:	22c0      	movs	r2, #192	; 0xc0
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f011 fead 	bl	801457c <memset>
  if(hspi->Instance==SPI1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a4c      	ldr	r2, [pc, #304]	; (8002958 <HAL_SPI_MspInit+0x15c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d145      	bne.n	80028b8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800282c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002838:	2300      	movs	r3, #0
 800283a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800283c:	f107 0318 	add.w	r3, r7, #24
 8002840:	4618      	mov	r0, r3
 8002842:	f006 ff87 	bl	8009754 <HAL_RCCEx_PeriphCLKConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800284c:	f7ff fd7a 	bl	8002344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002850:	4b42      	ldr	r3, [pc, #264]	; (800295c <HAL_SPI_MspInit+0x160>)
 8002852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002856:	4a41      	ldr	r2, [pc, #260]	; (800295c <HAL_SPI_MspInit+0x160>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800285c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002860:	4b3e      	ldr	r3, [pc, #248]	; (800295c <HAL_SPI_MspInit+0x160>)
 8002862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286e:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_SPI_MspInit+0x160>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002874:	4a39      	ldr	r2, [pc, #228]	; (800295c <HAL_SPI_MspInit+0x160>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287e:	4b37      	ldr	r3, [pc, #220]	; (800295c <HAL_SPI_MspInit+0x160>)
 8002880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800288c:	2318      	movs	r3, #24
 800288e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028a4:	2305      	movs	r3, #5
 80028a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028ae:	4619      	mov	r1, r3
 80028b0:	482b      	ldr	r0, [pc, #172]	; (8002960 <HAL_SPI_MspInit+0x164>)
 80028b2:	f005 fbd7 	bl	8008064 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028b6:	e04a      	b.n	800294e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a29      	ldr	r2, [pc, #164]	; (8002964 <HAL_SPI_MspInit+0x168>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d145      	bne.n	800294e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80028c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d2:	f107 0318 	add.w	r3, r7, #24
 80028d6:	4618      	mov	r0, r3
 80028d8:	f006 ff3c 	bl	8009754 <HAL_RCCEx_PeriphCLKConfig>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80028e2:	f7ff fd2f 	bl	8002344 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_SPI_MspInit+0x160>)
 80028e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_SPI_MspInit+0x160>)
 80028ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_SPI_MspInit+0x160>)
 80028f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_SPI_MspInit+0x160>)
 8002906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290a:	4a14      	ldr	r2, [pc, #80]	; (800295c <HAL_SPI_MspInit+0x160>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_SPI_MspInit+0x160>)
 8002916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002922:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800293c:	2305      	movs	r3, #5
 800293e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002942:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002946:	4619      	mov	r1, r3
 8002948:	4805      	ldr	r0, [pc, #20]	; (8002960 <HAL_SPI_MspInit+0x164>)
 800294a:	f005 fb8b 	bl	8008064 <HAL_GPIO_Init>
}
 800294e:	bf00      	nop
 8002950:	37f0      	adds	r7, #240	; 0xf0
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40013000 	.word	0x40013000
 800295c:	58024400 	.word	0x58024400
 8002960:	58020400 	.word	0x58020400
 8002964:	40003800 	.word	0x40003800

08002968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a37      	ldr	r2, [pc, #220]	; (8002a54 <HAL_TIM_Base_MspInit+0xec>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d12f      	bne.n	80029da <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800297a:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <HAL_TIM_Base_MspInit+0xf0>)
 800297c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002980:	4a35      	ldr	r2, [pc, #212]	; (8002a58 <HAL_TIM_Base_MspInit+0xf0>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800298a:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <HAL_TIM_Base_MspInit+0xf0>)
 800298c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002998:	2200      	movs	r2, #0
 800299a:	2105      	movs	r1, #5
 800299c:	2018      	movs	r0, #24
 800299e:	f002 f8f7 	bl	8004b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80029a2:	2018      	movs	r0, #24
 80029a4:	f002 f90e 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2105      	movs	r1, #5
 80029ac:	2019      	movs	r0, #25
 80029ae:	f002 f8ef 	bl	8004b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80029b2:	2019      	movs	r0, #25
 80029b4:	f002 f906 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2105      	movs	r1, #5
 80029bc:	201a      	movs	r0, #26
 80029be:	f002 f8e7 	bl	8004b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80029c2:	201a      	movs	r0, #26
 80029c4:	f002 f8fe 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80029c8:	2200      	movs	r2, #0
 80029ca:	2105      	movs	r1, #5
 80029cc:	201b      	movs	r0, #27
 80029ce:	f002 f8df 	bl	8004b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80029d2:	201b      	movs	r0, #27
 80029d4:	f002 f8f6 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029d8:	e038      	b.n	8002a4c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e2:	d117      	bne.n	8002a14 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029e4:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <HAL_TIM_Base_MspInit+0xf0>)
 80029e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029ea:	4a1b      	ldr	r2, [pc, #108]	; (8002a58 <HAL_TIM_Base_MspInit+0xf0>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_TIM_Base_MspInit+0xf0>)
 80029f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2105      	movs	r1, #5
 8002a06:	201c      	movs	r0, #28
 8002a08:	f002 f8c2 	bl	8004b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a0c:	201c      	movs	r0, #28
 8002a0e:	f002 f8d9 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
}
 8002a12:	e01b      	b.n	8002a4c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_TIM_Base_MspInit+0xf4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d116      	bne.n	8002a4c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_TIM_Base_MspInit+0xf0>)
 8002a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a24:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <HAL_TIM_Base_MspInit+0xf0>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_TIM_Base_MspInit+0xf0>)
 8002a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2105      	movs	r1, #5
 8002a40:	201d      	movs	r0, #29
 8002a42:	f002 f8a5 	bl	8004b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a46:	201d      	movs	r0, #29
 8002a48:	f002 f8bc 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
}
 8002a4c:	bf00      	nop
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40010000 	.word	0x40010000
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	40000400 	.word	0x40000400

08002a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <HAL_TIM_MspPostInit+0xb8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d120      	bne.n	8002ac4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_TIM_MspPostInit+0xbc>)
 8002a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a88:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <HAL_TIM_MspPostInit+0xbc>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_TIM_MspPostInit+0xbc>)
 8002a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	4619      	mov	r1, r3
 8002abc:	4818      	ldr	r0, [pc, #96]	; (8002b20 <HAL_TIM_MspPostInit+0xc0>)
 8002abe:	f005 fad1 	bl	8008064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ac2:	e024      	b.n	8002b0e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d11f      	bne.n	8002b0e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_TIM_MspPostInit+0xbc>)
 8002ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad4:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <HAL_TIM_MspPostInit+0xbc>)
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_TIM_MspPostInit+0xbc>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002aec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002afe:	2301      	movs	r3, #1
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	4806      	ldr	r0, [pc, #24]	; (8002b24 <HAL_TIM_MspPostInit+0xc4>)
 8002b0a:	f005 faab 	bl	8008064 <HAL_GPIO_Init>
}
 8002b0e:	bf00      	nop
 8002b10:	3728      	adds	r7, #40	; 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	58024400 	.word	0x58024400
 8002b20:	58020000 	.word	0x58020000
 8002b24:	58020400 	.word	0x58020400

08002b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b0ba      	sub	sp, #232	; 0xe8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	22c0      	movs	r2, #192	; 0xc0
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f011 fd17 	bl	801457c <memset>
  if(huart->Instance==USART1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a2b      	ldr	r2, [pc, #172]	; (8002c00 <HAL_UART_MspInit+0xd8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d14e      	bne.n	8002bf6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b58:	f04f 0201 	mov.w	r2, #1
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b6a:	f107 0310 	add.w	r3, r7, #16
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f006 fdf0 	bl	8009754 <HAL_RCCEx_PeriphCLKConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002b7a:	f7ff fbe3 	bl	8002344 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_UART_MspInit+0xdc>)
 8002b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b84:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <HAL_UART_MspInit+0xdc>)
 8002b86:	f043 0310 	orr.w	r3, r3, #16
 8002b8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_UART_MspInit+0xdc>)
 8002b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_UART_MspInit+0xdc>)
 8002b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba2:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_UART_MspInit+0xdc>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_UART_MspInit+0xdc>)
 8002bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4809      	ldr	r0, [pc, #36]	; (8002c08 <HAL_UART_MspInit+0xe0>)
 8002be2:	f005 fa3f 	bl	8008064 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2105      	movs	r1, #5
 8002bea:	2025      	movs	r0, #37	; 0x25
 8002bec:	f001 ffd0 	bl	8004b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bf0:	2025      	movs	r0, #37	; 0x25
 8002bf2:	f001 ffe7 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bf6:	bf00      	nop
 8002bf8:	37e8      	adds	r7, #232	; 0xe8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40011000 	.word	0x40011000
 8002c04:	58024400 	.word	0x58024400
 8002c08:	58020000 	.word	0x58020000

08002c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b090      	sub	sp, #64	; 0x40
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	d827      	bhi.n	8002c6a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	2036      	movs	r0, #54	; 0x36
 8002c20:	f001 ffb6 	bl	8004b90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c24:	2036      	movs	r0, #54	; 0x36
 8002c26:	f001 ffcd 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002c2a:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <HAL_InitTick+0xc4>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c30:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <HAL_InitTick+0xc8>)
 8002c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c36:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <HAL_InitTick+0xc8>)
 8002c38:	f043 0310 	orr.w	r3, r3, #16
 8002c3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c40:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_InitTick+0xc8>)
 8002c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c4e:	f107 0210 	add.w	r2, r7, #16
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f006 fd39 	bl	80096d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <HAL_InitTick+0x6a>
 8002c68:	e001      	b.n	8002c6e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e02b      	b.n	8002cc6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c6e:	f006 fd03 	bl	8009678 <HAL_RCC_GetPCLK1Freq>
 8002c72:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002c74:	e004      	b.n	8002c80 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c76:	f006 fcff 	bl	8009678 <HAL_RCC_GetPCLK1Freq>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c82:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <HAL_InitTick+0xcc>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	0c9b      	lsrs	r3, r3, #18
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_InitTick+0xd0>)
 8002c90:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <HAL_InitTick+0xd4>)
 8002c92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_InitTick+0xd0>)
 8002c96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c9a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c9c:	4a0f      	ldr	r2, [pc, #60]	; (8002cdc <HAL_InitTick+0xd0>)
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_InitTick+0xd0>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_InitTick+0xd0>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002cae:	480b      	ldr	r0, [pc, #44]	; (8002cdc <HAL_InitTick+0xd0>)
 8002cb0:	f009 feaf 	bl	800ca12 <HAL_TIM_Base_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002cba:	4808      	ldr	r0, [pc, #32]	; (8002cdc <HAL_InitTick+0xd0>)
 8002cbc:	f009 ff98 	bl	800cbf0 <HAL_TIM_Base_Start_IT>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	e000      	b.n	8002cc6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3740      	adds	r7, #64	; 0x40
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	24000090 	.word	0x24000090
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	431bde83 	.word	0x431bde83
 8002cdc:	24000728 	.word	0x24000728
 8002ce0:	40001000 	.word	0x40001000

08002ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002ce8:	e7fe      	b.n	8002ce8 <NMI_Handler+0x4>

08002cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cee:	e7fe      	b.n	8002cee <HardFault_Handler+0x4>

08002cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <MemManage_Handler+0x4>

08002cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cfa:	e7fe      	b.n	8002cfa <BusFault_Handler+0x4>

08002cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <UsageFault_Handler+0x4>

08002d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <DMA1_Stream0_IRQHandler+0x10>)
 8002d16:	f003 fe93 	bl	8006a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	240001e4 	.word	0x240001e4

08002d24 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <DMA1_Stream1_IRQHandler+0x10>)
 8002d2a:	f003 fe89 	bl	8006a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	2400025c 	.word	0x2400025c

08002d38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002d3c:	4802      	ldr	r0, [pc, #8]	; (8002d48 <DMA1_Stream5_IRQHandler+0x10>)
 8002d3e:	f003 fe7f 	bl	8006a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	240002e8 	.word	0x240002e8

08002d4c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d50:	4802      	ldr	r0, [pc, #8]	; (8002d5c <TIM1_BRK_IRQHandler+0x10>)
 8002d52:	f00a fa8f 	bl	800d274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	240004e8 	.word	0x240004e8

08002d60 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d64:	4802      	ldr	r0, [pc, #8]	; (8002d70 <TIM1_UP_IRQHandler+0x10>)
 8002d66:	f00a fa85 	bl	800d274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	240004e8 	.word	0x240004e8

08002d74 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002d7a:	f00a fa7b 	bl	800d274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	240004e8 	.word	0x240004e8

08002d88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <TIM1_CC_IRQHandler+0x10>)
 8002d8e:	f00a fa71 	bl	800d274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	240004e8 	.word	0x240004e8

08002d9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <TIM2_IRQHandler+0x10>)
 8002da2:	f00a fa67 	bl	800d274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	24000534 	.word	0x24000534

08002db0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <TIM3_IRQHandler+0x10>)
 8002db6:	f00a fa5d 	bl	800d274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	24000580 	.word	0x24000580

08002dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <USART1_IRQHandler+0x10>)
 8002dca:	f00b fce1 	bl	800e790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	240005cc 	.word	0x240005cc

08002dd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <TIM6_DAC_IRQHandler+0x20>)
 8002dde:	791b      	ldrb	r3, [r3, #4]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002de6:	4804      	ldr	r0, [pc, #16]	; (8002df8 <TIM6_DAC_IRQHandler+0x20>)
 8002de8:	f002 f881 	bl	8004eee <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002dec:	4803      	ldr	r0, [pc, #12]	; (8002dfc <TIM6_DAC_IRQHandler+0x24>)
 8002dee:	f00a fa41 	bl	800d274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	240002d4 	.word	0x240002d4
 8002dfc:	24000728 	.word	0x24000728

08002e00 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <ITM_SendChar+0x48>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <ITM_SendChar+0x48>)
 8002e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e14:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <ITM_SendChar+0x4c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <ITM_SendChar+0x4c>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002e22:	bf00      	nop
 8002e24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f8      	beq.n	8002e24 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002e32:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	6013      	str	r3, [r2, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000edfc 	.word	0xe000edfc
 8002e4c:	e0000e00 	.word	0xe0000e00

08002e50 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e00a      	b.n	8002e78 <_read+0x28>
		*ptr++ = __io_getchar();
 8002e62:	f3af 8000 	nop.w
 8002e66:	4601      	mov	r1, r0
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	60ba      	str	r2, [r7, #8]
 8002e6e:	b2ca      	uxtb	r2, r1
 8002e70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3301      	adds	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	dbf0      	blt.n	8002e62 <_read+0x12>
	}

	return len;
 8002e80:	687b      	ldr	r3, [r7, #4]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e009      	b.n	8002eb0 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	60ba      	str	r2, [r7, #8]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ffab 	bl	8002e00 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3301      	adds	r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	dbf1      	blt.n	8002e9c <_write+0x12>
	}
	return len;
 8002eb8:	687b      	ldr	r3, [r7, #4]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <_close>:

int _close(int file) {
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <_fstat>:

int _fstat(int file, struct stat *st) {
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eea:	605a      	str	r2, [r3, #4]
	return 0;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <_isatty>:

int _isatty(int file) {
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002f02:	2301      	movs	r3, #1
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002f34:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <_sbrk+0x64>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <_sbrk+0x64>)
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <_sbrk+0x68>)
 8002f4c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <_sbrk+0x64>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d207      	bcs.n	8002f6c <_sbrk+0x40>
		errno = ENOMEM;
 8002f5c:	f011 fac6 	bl	80144ec <__errno>
 8002f60:	4603      	mov	r3, r0
 8002f62:	220c      	movs	r2, #12
 8002f64:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f6a:	e009      	b.n	8002f80 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <_sbrk+0x64>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <_sbrk+0x64>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <_sbrk+0x64>)
 8002f7c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	24080000 	.word	0x24080000
 8002f8c:	00000400 	.word	0x00000400
 8002f90:	24000774 	.word	0x24000774
 8002f94:	240050e0 	.word	0x240050e0

08002f98 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002f9c:	4b37      	ldr	r3, [pc, #220]	; (800307c <SystemInit+0xe4>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	4a36      	ldr	r2, [pc, #216]	; (800307c <SystemInit+0xe4>)
 8002fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002fac:	4b34      	ldr	r3, [pc, #208]	; (8003080 <SystemInit+0xe8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	2b06      	cmp	r3, #6
 8002fb6:	d807      	bhi.n	8002fc8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002fb8:	4b31      	ldr	r3, [pc, #196]	; (8003080 <SystemInit+0xe8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 030f 	bic.w	r3, r3, #15
 8002fc0:	4a2f      	ldr	r2, [pc, #188]	; (8003080 <SystemInit+0xe8>)
 8002fc2:	f043 0307 	orr.w	r3, r3, #7
 8002fc6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002fc8:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <SystemInit+0xec>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <SystemInit+0xec>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <SystemInit+0xec>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002fda:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <SystemInit+0xec>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4929      	ldr	r1, [pc, #164]	; (8003084 <SystemInit+0xec>)
 8002fe0:	4b29      	ldr	r3, [pc, #164]	; (8003088 <SystemInit+0xf0>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002fe6:	4b26      	ldr	r3, [pc, #152]	; (8003080 <SystemInit+0xe8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002ff2:	4b23      	ldr	r3, [pc, #140]	; (8003080 <SystemInit+0xe8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 030f 	bic.w	r3, r3, #15
 8002ffa:	4a21      	ldr	r2, [pc, #132]	; (8003080 <SystemInit+0xe8>)
 8002ffc:	f043 0307 	orr.w	r3, r3, #7
 8003000:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <SystemInit+0xec>)
 8003004:	2200      	movs	r2, #0
 8003006:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003008:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <SystemInit+0xec>)
 800300a:	2200      	movs	r2, #0
 800300c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <SystemInit+0xec>)
 8003010:	2200      	movs	r2, #0
 8003012:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <SystemInit+0xec>)
 8003016:	4a1d      	ldr	r2, [pc, #116]	; (800308c <SystemInit+0xf4>)
 8003018:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <SystemInit+0xec>)
 800301c:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <SystemInit+0xf8>)
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <SystemInit+0xec>)
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <SystemInit+0xfc>)
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <SystemInit+0xec>)
 8003028:	2200      	movs	r2, #0
 800302a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 800302c:	4b15      	ldr	r3, [pc, #84]	; (8003084 <SystemInit+0xec>)
 800302e:	4a19      	ldr	r2, [pc, #100]	; (8003094 <SystemInit+0xfc>)
 8003030:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <SystemInit+0xec>)
 8003034:	2200      	movs	r2, #0
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <SystemInit+0xec>)
 800303a:	4a16      	ldr	r2, [pc, #88]	; (8003094 <SystemInit+0xfc>)
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <SystemInit+0xec>)
 8003040:	2200      	movs	r2, #0
 8003042:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <SystemInit+0xec>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <SystemInit+0xec>)
 800304a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <SystemInit+0xec>)
 8003052:	2200      	movs	r2, #0
 8003054:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <SystemInit+0x100>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <SystemInit+0x104>)
 800305c:	4013      	ands	r3, r2
 800305e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003062:	d202      	bcs.n	800306a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <SystemInit+0x108>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800306a:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <SystemInit+0x10c>)
 800306c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003070:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003072:	bf00      	nop
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00
 8003080:	52002000 	.word	0x52002000
 8003084:	58024400 	.word	0x58024400
 8003088:	eaf6ed7f 	.word	0xeaf6ed7f
 800308c:	02020200 	.word	0x02020200
 8003090:	01ff0000 	.word	0x01ff0000
 8003094:	01010280 	.word	0x01010280
 8003098:	5c001000 	.word	0x5c001000
 800309c:	ffff0000 	.word	0xffff0000
 80030a0:	51008108 	.word	0x51008108
 80030a4:	52004000 	.word	0x52004000

080030a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80030a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030ac:	f7ff ff74 	bl	8002f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b0:	480c      	ldr	r0, [pc, #48]	; (80030e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030b2:	490d      	ldr	r1, [pc, #52]	; (80030e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030b4:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b8:	e002      	b.n	80030c0 <LoopCopyDataInit>

080030ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030be:	3304      	adds	r3, #4

080030c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c4:	d3f9      	bcc.n	80030ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030c8:	4c0a      	ldr	r4, [pc, #40]	; (80030f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030cc:	e001      	b.n	80030d2 <LoopFillZerobss>

080030ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d0:	3204      	adds	r2, #4

080030d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d4:	d3fb      	bcc.n	80030ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030d6:	f011 fa0f 	bl	80144f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030da:	f7fd fd3d 	bl	8000b58 <main>
  bx  lr
 80030de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80030e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80030e8:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 80030ec:	08015970 	.word	0x08015970
  ldr r2, =_sbss
 80030f0:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 80030f4:	240050dc 	.word	0x240050dc

080030f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030f8:	e7fe      	b.n	80030f8 <ADC3_IRQHandler>
	...

080030fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003102:	2003      	movs	r0, #3
 8003104:	f001 fd39 	bl	8004b7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003108:	f006 f90c 	bl	8009324 <HAL_RCC_GetSysClockFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_Init+0x68>)
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	4913      	ldr	r1, [pc, #76]	; (8003168 <HAL_Init+0x6c>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003126:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_Init+0x68>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_Init+0x6c>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	4a0b      	ldr	r2, [pc, #44]	; (800316c <HAL_Init+0x70>)
 800313e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003140:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <HAL_Init+0x74>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003146:	2005      	movs	r0, #5
 8003148:	f7ff fd60 	bl	8002c0c <HAL_InitTick>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e002      	b.n	800315c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003156:	f7ff f8fb 	bl	8002350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	58024400 	.word	0x58024400
 8003168:	08015888 	.word	0x08015888
 800316c:	2400008c 	.word	0x2400008c
 8003170:	24000088 	.word	0x24000088

08003174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_IncTick+0x20>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_IncTick+0x24>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4413      	add	r3, r2
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_IncTick+0x24>)
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	24000094 	.word	0x24000094
 8003198:	24000778 	.word	0x24000778

0800319c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return uwTick;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_GetTick+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	24000778 	.word	0x24000778

080031b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_GetREVID+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	0c1b      	lsrs	r3, r3, #16
}
 80031be:	4618      	mov	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	5c001000 	.word	0x5c001000

080031cc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80031d6:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	43db      	mvns	r3, r3
 80031de:	401a      	ands	r2, r3
 80031e0:	4904      	ldr	r1, [pc, #16]	; (80031f4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	58000400 	.word	0x58000400

080031f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	609a      	str	r2, [r3, #8]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3360      	adds	r3, #96	; 0x60
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	430b      	orrs	r3, r1
 800328e:	431a      	orrs	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	611a      	str	r2, [r3, #16]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b087      	sub	sp, #28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3360      	adds	r3, #96	; 0x60
 80032e2:	461a      	mov	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	601a      	str	r2, [r3, #0]
  }
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800332e:	b480      	push	{r7}
 8003330:	b087      	sub	sp, #28
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3330      	adds	r3, #48	; 0x30
 800333e:	461a      	mov	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	4413      	add	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	211f      	movs	r1, #31
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	401a      	ands	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	f003 011f 	and.w	r1, r3, #31
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	431a      	orrs	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f023 0203 	bic.w	r2, r3, #3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	60da      	str	r2, [r3, #12]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3314      	adds	r3, #20
 80033bc:	461a      	mov	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	0e5b      	lsrs	r3, r3, #25
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	4413      	add	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	0d1b      	lsrs	r3, r3, #20
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	2107      	movs	r1, #7
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	401a      	ands	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	0d1b      	lsrs	r3, r3, #20
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	431a      	orrs	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800341c:	43db      	mvns	r3, r3
 800341e:	401a      	ands	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0318 	and.w	r3, r3, #24
 8003426:	4908      	ldr	r1, [pc, #32]	; (8003448 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003428:	40d9      	lsrs	r1, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	400b      	ands	r3, r1
 800342e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003432:	431a      	orrs	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	000fffff 	.word	0x000fffff

0800344c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 031f 	and.w	r3, r3, #31
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003476:	4013      	ands	r3, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6093      	str	r3, [r2, #8]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	5fffffc0 	.word	0x5fffffc0

0800348c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800349c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a0:	d101      	bne.n	80034a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	6fffffc0 	.word	0x6fffffc0

080034dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034f0:	d101      	bne.n	80034f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <LL_ADC_Enable+0x24>)
 8003512:	4013      	ands	r3, r2
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	7fffffc0 	.word	0x7fffffc0

0800352c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <LL_ADC_Disable+0x24>)
 800353a:	4013      	ands	r3, r2
 800353c:	f043 0202 	orr.w	r2, r3, #2
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	7fffffc0 	.word	0x7fffffc0

08003554 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <LL_ADC_IsEnabled+0x18>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <LL_ADC_IsEnabled+0x1a>
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d101      	bne.n	8003592 <LL_ADC_IsDisableOngoing+0x18>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <LL_ADC_IsDisableOngoing+0x1a>
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <LL_ADC_REG_StartConversion+0x24>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	f043 0204 	orr.w	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	7fffffc0 	.word	0x7fffffc0

080035c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d101      	bne.n	80035e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d101      	bne.n	8003606 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b089      	sub	sp, #36	; 0x24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e18f      	b.n	800394e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fe fea5 	bl	800238c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff19 	bl	800348c <LL_ADC_IsDeepPowerDownEnabled>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff feff 	bl	8003468 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff34 	bl	80034dc <LL_ADC_IsInternalRegulatorEnabled>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d114      	bne.n	80036a4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ff18 	bl	80034b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003684:	4b87      	ldr	r3, [pc, #540]	; (80038a4 <HAL_ADC_Init+0x290>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	4a87      	ldr	r2, [pc, #540]	; (80038a8 <HAL_ADC_Init+0x294>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	099b      	lsrs	r3, r3, #6
 8003692:	3301      	adds	r3, #1
 8003694:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003696:	e002      	b.n	800369e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	3b01      	subs	r3, #1
 800369c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f9      	bne.n	8003698 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff17 	bl	80034dc <LL_ADC_IsInternalRegulatorEnabled>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10d      	bne.n	80036d0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	f043 0210 	orr.w	r2, r3, #16
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff77 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 80036da:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 8129 	bne.w	800393c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 8125 	bne.w	800393c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ff24 	bl	8003554 <LL_ADC_IsEnabled>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d136      	bne.n	8003780 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a65      	ldr	r2, [pc, #404]	; (80038ac <HAL_ADC_Init+0x298>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_ADC_Init+0x112>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a63      	ldr	r2, [pc, #396]	; (80038b0 <HAL_ADC_Init+0x29c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10e      	bne.n	8003744 <HAL_ADC_Init+0x130>
 8003726:	4861      	ldr	r0, [pc, #388]	; (80038ac <HAL_ADC_Init+0x298>)
 8003728:	f7ff ff14 	bl	8003554 <LL_ADC_IsEnabled>
 800372c:	4604      	mov	r4, r0
 800372e:	4860      	ldr	r0, [pc, #384]	; (80038b0 <HAL_ADC_Init+0x29c>)
 8003730:	f7ff ff10 	bl	8003554 <LL_ADC_IsEnabled>
 8003734:	4603      	mov	r3, r0
 8003736:	4323      	orrs	r3, r4
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e008      	b.n	8003756 <HAL_ADC_Init+0x142>
 8003744:	485b      	ldr	r0, [pc, #364]	; (80038b4 <HAL_ADC_Init+0x2a0>)
 8003746:	f7ff ff05 	bl	8003554 <LL_ADC_IsEnabled>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d012      	beq.n	8003780 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a53      	ldr	r2, [pc, #332]	; (80038ac <HAL_ADC_Init+0x298>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_ADC_Init+0x15a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a51      	ldr	r2, [pc, #324]	; (80038b0 <HAL_ADC_Init+0x29c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d101      	bne.n	8003772 <HAL_ADC_Init+0x15e>
 800376e:	4a52      	ldr	r2, [pc, #328]	; (80038b8 <HAL_ADC_Init+0x2a4>)
 8003770:	e000      	b.n	8003774 <HAL_ADC_Init+0x160>
 8003772:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_ADC_Init+0x2a8>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f7ff fd3c 	bl	80031f8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003780:	f7ff fd18 	bl	80031b4 <HAL_GetREVID>
 8003784:	4603      	mov	r3, r0
 8003786:	f241 0203 	movw	r2, #4099	; 0x1003
 800378a:	4293      	cmp	r3, r2
 800378c:	d914      	bls.n	80037b8 <HAL_ADC_Init+0x1a4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b10      	cmp	r3, #16
 8003794:	d110      	bne.n	80037b8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7d5b      	ldrb	r3, [r3, #21]
 800379a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037a0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80037a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7f1b      	ldrb	r3, [r3, #28]
 80037ac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80037ae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037b0:	f043 030c 	orr.w	r3, r3, #12
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e00d      	b.n	80037d4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	7d5b      	ldrb	r3, [r3, #21]
 80037bc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037c2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80037c8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7f1b      	ldrb	r3, [r3, #28]
 80037ce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7f1b      	ldrb	r3, [r3, #28]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d106      	bne.n	80037ea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	045b      	lsls	r3, r3, #17
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	4b2c      	ldr	r3, [pc, #176]	; (80038c0 <HAL_ADC_Init+0x2ac>)
 800380e:	4013      	ands	r3, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	69b9      	ldr	r1, [r7, #24]
 8003816:	430b      	orrs	r3, r1
 8003818:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fed2 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 8003824:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fedf 	bl	80035ee <LL_ADC_INJ_IsConversionOngoing>
 8003830:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d15f      	bne.n	80038f8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d15c      	bne.n	80038f8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7d1b      	ldrb	r3, [r3, #20]
 8003842:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	4b1c      	ldr	r3, [pc, #112]	; (80038c4 <HAL_ADC_Init+0x2b0>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	69b9      	ldr	r1, [r7, #24]
 800385c:	430b      	orrs	r3, r1
 800385e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003866:	2b01      	cmp	r3, #1
 8003868:	d130      	bne.n	80038cc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <HAL_ADC_Init+0x2b4>)
 8003878:	4013      	ands	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800387e:	3a01      	subs	r2, #1
 8003880:	0411      	lsls	r1, r2, #16
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003892:	430a      	orrs	r2, r1
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	611a      	str	r2, [r3, #16]
 80038a0:	e01c      	b.n	80038dc <HAL_ADC_Init+0x2c8>
 80038a2:	bf00      	nop
 80038a4:	24000088 	.word	0x24000088
 80038a8:	053e2d63 	.word	0x053e2d63
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40022100 	.word	0x40022100
 80038b4:	58026000 	.word	0x58026000
 80038b8:	40022300 	.word	0x40022300
 80038bc:	58026300 	.word	0x58026300
 80038c0:	fff0c003 	.word	0xfff0c003
 80038c4:	ffffbffc 	.word	0xffffbffc
 80038c8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fdec 	bl	80044d0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d10c      	bne.n	800391a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f023 010f 	bic.w	r1, r3, #15
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	1e5a      	subs	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
 8003918:	e007      	b.n	800392a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 020f 	bic.w	r2, r2, #15
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	f023 0303 	bic.w	r3, r3, #3
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
 800393a:	e007      	b.n	800394c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003940:	f043 0210 	orr.w	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800394c:	7ffb      	ldrb	r3, [r7, #31]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3724      	adds	r7, #36	; 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}
 8003956:	bf00      	nop

08003958 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a55      	ldr	r2, [pc, #340]	; (8003ac0 <HAL_ADC_Start_DMA+0x168>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_ADC_Start_DMA+0x20>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a54      	ldr	r2, [pc, #336]	; (8003ac4 <HAL_ADC_Start_DMA+0x16c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_ADC_Start_DMA+0x24>
 8003978:	4b53      	ldr	r3, [pc, #332]	; (8003ac8 <HAL_ADC_Start_DMA+0x170>)
 800397a:	e000      	b.n	800397e <HAL_ADC_Start_DMA+0x26>
 800397c:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_ADC_Start_DMA+0x174>)
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fd64 	bl	800344c <LL_ADC_GetMultimode>
 8003984:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fe1c 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 808c 	bne.w	8003ab0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_Start_DMA+0x4e>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e087      	b.n	8003ab6 <HAL_ADC_Start_DMA+0x15e>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b05      	cmp	r3, #5
 80039b8:	d002      	beq.n	80039c0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b09      	cmp	r3, #9
 80039be:	d170      	bne.n	8003aa2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fc07 	bl	80041d4 <ADC_Enable>
 80039c6:	4603      	mov	r3, r0
 80039c8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d163      	bne.n	8003a98 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039d4:	4b3e      	ldr	r3, [pc, #248]	; (8003ad0 <HAL_ADC_Start_DMA+0x178>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a37      	ldr	r2, [pc, #220]	; (8003ac4 <HAL_ADC_Start_DMA+0x16c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d002      	beq.n	80039f0 <HAL_ADC_Start_DMA+0x98>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	e000      	b.n	80039f2 <HAL_ADC_Start_DMA+0x9a>
 80039f0:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <HAL_ADC_Start_DMA+0x168>)
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d002      	beq.n	8003a00 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d105      	bne.n	8003a0c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d006      	beq.n	8003a26 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f023 0206 	bic.w	r2, r3, #6
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	659a      	str	r2, [r3, #88]	; 0x58
 8003a24:	e002      	b.n	8003a2c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a30:	4a28      	ldr	r2, [pc, #160]	; (8003ad4 <HAL_ADC_Start_DMA+0x17c>)
 8003a32:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a38:	4a27      	ldr	r2, [pc, #156]	; (8003ad8 <HAL_ADC_Start_DMA+0x180>)
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a40:	4a26      	ldr	r2, [pc, #152]	; (8003adc <HAL_ADC_Start_DMA+0x184>)
 8003a42:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	221c      	movs	r2, #28
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0210 	orr.w	r2, r2, #16
 8003a62:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f7ff fc89 	bl	8003386 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3340      	adds	r3, #64	; 0x40
 8003a7e:	4619      	mov	r1, r3
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f002 f80e 	bl	8005aa4 <HAL_DMA_Start_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff fd85 	bl	80035a0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003a96:	e00d      	b.n	8003ab4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003aa0:	e008      	b.n	8003ab4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003aae:	e001      	b.n	8003ab4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40022000 	.word	0x40022000
 8003ac4:	40022100 	.word	0x40022100
 8003ac8:	40022300 	.word	0x40022300
 8003acc:	58026300 	.word	0x58026300
 8003ad0:	fffff0fe 	.word	0xfffff0fe
 8003ad4:	080043a7 	.word	0x080043a7
 8003ad8:	0800447f 	.word	0x0800447f
 8003adc:	0800449b 	.word	0x0800449b

08003ae0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b1c:	b590      	push	{r4, r7, lr}
 8003b1e:	b0a1      	sub	sp, #132	; 0x84
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a65      	ldr	r2, [pc, #404]	; (8003ccc <HAL_ADC_ConfigChannel+0x1b0>)
 8003b36:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x2a>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e32e      	b.n	80041a4 <HAL_ADC_ConfigChannel+0x688>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fd38 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 8313 	bne.w	8004186 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	db2c      	blt.n	8003bc2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d108      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x6a>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0e9b      	lsrs	r3, r3, #26
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	2201      	movs	r2, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	e016      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x98>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b96:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	e003      	b.n	8003baa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	69d1      	ldr	r1, [r2, #28]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f7ff fbad 	bl	800332e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fcf5 	bl	80035c8 <LL_ADC_REG_IsConversionOngoing>
 8003bde:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fd02 	bl	80035ee <LL_ADC_INJ_IsConversionOngoing>
 8003bea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f040 80b8 	bne.w	8003d64 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f040 80b4 	bne.w	8003d64 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f7ff fbcf 	bl	80033ac <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_ADC_ConfigChannel+0x1b4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c1a:	d10b      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x118>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	e01d      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x154>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x13e>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	e00a      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x154>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d02c      	beq.n	8003cd4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6919      	ldr	r1, [r3, #16]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c88:	f7ff faea 	bl	8003260 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6919      	ldr	r1, [r3, #16]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	7e5b      	ldrb	r3, [r3, #25]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d102      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x186>
 8003c9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ca0:	e000      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x188>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f7ff fb14 	bl	80032d2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6919      	ldr	r1, [r3, #16]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	7e1b      	ldrb	r3, [r3, #24]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d102      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x1a4>
 8003cba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cbe:	e000      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x1a6>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f7ff faec 	bl	80032a0 <LL_ADC_SetDataRightShift>
 8003cc8:	e04c      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x248>
 8003cca:	bf00      	nop
 8003ccc:	47ff0000 	.word	0x47ff0000
 8003cd0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	069b      	lsls	r3, r3, #26
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d107      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cf6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	069b      	lsls	r3, r3, #26
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d1a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	069b      	lsls	r3, r3, #26
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d107      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d3e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	069b      	lsls	r3, r3, #26
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d107      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d62:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fbf3 	bl	8003554 <LL_ADC_IsEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 8211 	bne.w	8004198 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f7ff fb3e 	bl	8003404 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4aa1      	ldr	r2, [pc, #644]	; (8004014 <HAL_ADC_ConfigChannel+0x4f8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	f040 812e 	bne.w	8003ff0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x2a0>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0e9b      	lsrs	r3, r3, #26
 8003daa:	3301      	adds	r3, #1
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2b09      	cmp	r3, #9
 8003db2:	bf94      	ite	ls
 8003db4:	2301      	movls	r3, #1
 8003db6:	2300      	movhi	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	e019      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x2d4>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e003      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	3301      	adds	r3, #1
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	2b09      	cmp	r3, #9
 8003de8:	bf94      	ite	ls
 8003dea:	2301      	movls	r3, #1
 8003dec:	2300      	movhi	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d079      	beq.n	8003ee8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d107      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x2f4>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0e9b      	lsrs	r3, r3, #26
 8003e06:	3301      	adds	r3, #1
 8003e08:	069b      	lsls	r3, r3, #26
 8003e0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e0e:	e015      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x320>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e18:	fa93 f3a3 	rbit	r3, r3
 8003e1c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e20:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003e28:	2320      	movs	r3, #32
 8003e2a:	e003      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	069b      	lsls	r3, r3, #26
 8003e38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x340>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	0e9b      	lsrs	r3, r3, #26
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5a:	e017      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x370>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003e74:	2320      	movs	r3, #32
 8003e76:	e003      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	3301      	adds	r3, #1
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	2101      	movs	r1, #1
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	ea42 0103 	orr.w	r1, r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x396>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	0e9b      	lsrs	r3, r3, #26
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	f003 021f 	and.w	r2, r3, #31
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	051b      	lsls	r3, r3, #20
 8003eb0:	e018      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x3c8>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eba:	fa93 f3a3 	rbit	r3, r3
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003eca:	2320      	movs	r3, #32
 8003ecc:	e003      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f003 021f 	and.w	r2, r3, #31
 8003edc:	4613      	mov	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4413      	add	r3, r2
 8003ee2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	e07e      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d107      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x3e8>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0e9b      	lsrs	r3, r3, #26
 8003efa:	3301      	adds	r3, #1
 8003efc:	069b      	lsls	r3, r3, #26
 8003efe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f02:	e015      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x414>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	e003      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	069b      	lsls	r3, r3, #26
 8003f2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x434>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	0e9b      	lsrs	r3, r3, #26
 8003f42:	3301      	adds	r3, #1
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2101      	movs	r1, #1
 8003f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4e:	e017      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x464>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	61bb      	str	r3, [r7, #24]
  return result;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003f68:	2320      	movs	r3, #32
 8003f6a:	e003      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f80:	ea42 0103 	orr.w	r1, r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10d      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x490>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	0e9b      	lsrs	r3, r3, #26
 8003f96:	3301      	adds	r3, #1
 8003f98:	f003 021f 	and.w	r2, r3, #31
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3b1e      	subs	r3, #30
 8003fa4:	051b      	lsls	r3, r3, #20
 8003fa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003faa:	e01b      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x4c8>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	60fb      	str	r3, [r7, #12]
  return result;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	e003      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f003 021f 	and.w	r2, r3, #31
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	3b1e      	subs	r3, #30
 8003fde:	051b      	lsls	r3, r3, #20
 8003fe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	6892      	ldr	r2, [r2, #8]
 8003fea:	4619      	mov	r1, r3
 8003fec:	f7ff f9de 	bl	80033ac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f280 80cf 	bge.w	8004198 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a06      	ldr	r2, [pc, #24]	; (8004018 <HAL_ADC_ConfigChannel+0x4fc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_ADC_ConfigChannel+0x4f2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <HAL_ADC_ConfigChannel+0x500>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10a      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x508>
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <HAL_ADC_ConfigChannel+0x504>)
 8004010:	e009      	b.n	8004026 <HAL_ADC_ConfigChannel+0x50a>
 8004012:	bf00      	nop
 8004014:	47ff0000 	.word	0x47ff0000
 8004018:	40022000 	.word	0x40022000
 800401c:	40022100 	.word	0x40022100
 8004020:	40022300 	.word	0x40022300
 8004024:	4b61      	ldr	r3, [pc, #388]	; (80041ac <HAL_ADC_ConfigChannel+0x690>)
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff f90c 	bl	8003244 <LL_ADC_GetCommonPathInternalCh>
 800402c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a5f      	ldr	r2, [pc, #380]	; (80041b0 <HAL_ADC_ConfigChannel+0x694>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_ADC_ConfigChannel+0x526>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a5d      	ldr	r2, [pc, #372]	; (80041b4 <HAL_ADC_ConfigChannel+0x698>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10e      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x544>
 8004042:	485b      	ldr	r0, [pc, #364]	; (80041b0 <HAL_ADC_ConfigChannel+0x694>)
 8004044:	f7ff fa86 	bl	8003554 <LL_ADC_IsEnabled>
 8004048:	4604      	mov	r4, r0
 800404a:	485a      	ldr	r0, [pc, #360]	; (80041b4 <HAL_ADC_ConfigChannel+0x698>)
 800404c:	f7ff fa82 	bl	8003554 <LL_ADC_IsEnabled>
 8004050:	4603      	mov	r3, r0
 8004052:	4323      	orrs	r3, r4
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	e008      	b.n	8004072 <HAL_ADC_ConfigChannel+0x556>
 8004060:	4855      	ldr	r0, [pc, #340]	; (80041b8 <HAL_ADC_ConfigChannel+0x69c>)
 8004062:	f7ff fa77 	bl	8003554 <LL_ADC_IsEnabled>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d07d      	beq.n	8004172 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a50      	ldr	r2, [pc, #320]	; (80041bc <HAL_ADC_ConfigChannel+0x6a0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d130      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x5c6>
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d12b      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a4a      	ldr	r2, [pc, #296]	; (80041b8 <HAL_ADC_ConfigChannel+0x69c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	f040 8081 	bne.w	8004198 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a45      	ldr	r2, [pc, #276]	; (80041b0 <HAL_ADC_ConfigChannel+0x694>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_ADC_ConfigChannel+0x58e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a43      	ldr	r2, [pc, #268]	; (80041b4 <HAL_ADC_ConfigChannel+0x698>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x592>
 80040aa:	4a45      	ldr	r2, [pc, #276]	; (80041c0 <HAL_ADC_ConfigChannel+0x6a4>)
 80040ac:	e000      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x594>
 80040ae:	4a3f      	ldr	r2, [pc, #252]	; (80041ac <HAL_ADC_ConfigChannel+0x690>)
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f7ff f8b0 	bl	800321e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040be:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <HAL_ADC_ConfigChannel+0x6a8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	099b      	lsrs	r3, r3, #6
 80040c4:	4a40      	ldr	r2, [pc, #256]	; (80041c8 <HAL_ADC_ConfigChannel+0x6ac>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	099b      	lsrs	r3, r3, #6
 80040cc:	3301      	adds	r3, #1
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80040d2:	e002      	b.n	80040da <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f9      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040e0:	e05a      	b.n	8004198 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a39      	ldr	r2, [pc, #228]	; (80041cc <HAL_ADC_ConfigChannel+0x6b0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d11e      	bne.n	800412a <HAL_ADC_ConfigChannel+0x60e>
 80040ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d119      	bne.n	800412a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2f      	ldr	r2, [pc, #188]	; (80041b8 <HAL_ADC_ConfigChannel+0x69c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d14b      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <HAL_ADC_ConfigChannel+0x694>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_ADC_ConfigChannel+0x5f8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a29      	ldr	r2, [pc, #164]	; (80041b4 <HAL_ADC_ConfigChannel+0x698>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x5fc>
 8004114:	4a2a      	ldr	r2, [pc, #168]	; (80041c0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004116:	e000      	b.n	800411a <HAL_ADC_ConfigChannel+0x5fe>
 8004118:	4a24      	ldr	r2, [pc, #144]	; (80041ac <HAL_ADC_ConfigChannel+0x690>)
 800411a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f7ff f87b 	bl	800321e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004128:	e036      	b.n	8004198 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a28      	ldr	r2, [pc, #160]	; (80041d0 <HAL_ADC_ConfigChannel+0x6b4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d131      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x67c>
 8004134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d12c      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_ADC_ConfigChannel+0x69c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d127      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_ADC_ConfigChannel+0x694>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_ADC_ConfigChannel+0x640>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a17      	ldr	r2, [pc, #92]	; (80041b4 <HAL_ADC_ConfigChannel+0x698>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x644>
 800415c:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <HAL_ADC_ConfigChannel+0x6a4>)
 800415e:	e000      	b.n	8004162 <HAL_ADC_ConfigChannel+0x646>
 8004160:	4a12      	ldr	r2, [pc, #72]	; (80041ac <HAL_ADC_ConfigChannel+0x690>)
 8004162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7ff f857 	bl	800321e <LL_ADC_SetCommonPathInternalCh>
 8004170:	e012      	b.n	8004198 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004184:	e008      	b.n	8004198 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3784      	adds	r7, #132	; 0x84
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd90      	pop	{r4, r7, pc}
 80041ac:	58026300 	.word	0x58026300
 80041b0:	40022000 	.word	0x40022000
 80041b4:	40022100 	.word	0x40022100
 80041b8:	58026000 	.word	0x58026000
 80041bc:	cb840000 	.word	0xcb840000
 80041c0:	40022300 	.word	0x40022300
 80041c4:	24000088 	.word	0x24000088
 80041c8:	053e2d63 	.word	0x053e2d63
 80041cc:	c7520000 	.word	0xc7520000
 80041d0:	cfb80000 	.word	0xcfb80000

080041d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff f9b7 	bl	8003554 <LL_ADC_IsEnabled>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d16e      	bne.n	80042ca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4b38      	ldr	r3, [pc, #224]	; (80042d4 <ADC_Enable+0x100>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	f043 0210 	orr.w	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	f043 0201 	orr.w	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e05a      	b.n	80042cc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff f972 	bl	8003504 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004220:	f7fe ffbc 	bl	800319c <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <ADC_Enable+0x104>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <ADC_Enable+0x66>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a29      	ldr	r2, [pc, #164]	; (80042dc <ADC_Enable+0x108>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <ADC_Enable+0x6a>
 800423a:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <ADC_Enable+0x10c>)
 800423c:	e000      	b.n	8004240 <ADC_Enable+0x6c>
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <ADC_Enable+0x110>)
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff f903 	bl	800344c <LL_ADC_GetMultimode>
 8004246:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a23      	ldr	r2, [pc, #140]	; (80042dc <ADC_Enable+0x108>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d002      	beq.n	8004258 <ADC_Enable+0x84>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	e000      	b.n	800425a <ADC_Enable+0x86>
 8004258:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <ADC_Enable+0x104>)
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	4293      	cmp	r3, r2
 8004260:	d02c      	beq.n	80042bc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d130      	bne.n	80042ca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004268:	e028      	b.n	80042bc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff f970 	bl	8003554 <LL_ADC_IsEnabled>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff f940 	bl	8003504 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004284:	f7fe ff8a 	bl	800319c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d914      	bls.n	80042bc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d00d      	beq.n	80042bc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0210 	orr.w	r2, r3, #16
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	f043 0201 	orr.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e007      	b.n	80042cc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d1cf      	bne.n	800426a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	8000003f 	.word	0x8000003f
 80042d8:	40022000 	.word	0x40022000
 80042dc:	40022100 	.word	0x40022100
 80042e0:	40022300 	.word	0x40022300
 80042e4:	58026300 	.word	0x58026300

080042e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff f940 	bl	800357a <LL_ADC_IsDisableOngoing>
 80042fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff f927 	bl	8003554 <LL_ADC_IsEnabled>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d047      	beq.n	800439c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d144      	bne.n	800439c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030d 	and.w	r3, r3, #13
 800431c:	2b01      	cmp	r3, #1
 800431e:	d10c      	bne.n	800433a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff f901 	bl	800352c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2203      	movs	r2, #3
 8004330:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004332:	f7fe ff33 	bl	800319c <HAL_GetTick>
 8004336:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004338:	e029      	b.n	800438e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	f043 0210 	orr.w	r2, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e023      	b.n	800439e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004356:	f7fe ff21 	bl	800319c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d914      	bls.n	800438e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f043 0210 	orr.w	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e007      	b.n	800439e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1dc      	bne.n	8004356 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d14b      	bne.n	8004458 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d021      	beq.n	800441e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe ff92 	bl	8003308 <LL_ADC_REG_IsTriggerSourceSWStart>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d032      	beq.n	8004450 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d12b      	bne.n	8004450 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d11f      	bne.n	8004450 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	655a      	str	r2, [r3, #84]	; 0x54
 800441c:	e018      	b.n	8004450 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d111      	bne.n	8004450 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	f043 0201 	orr.w	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f7ff fb45 	bl	8003ae0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004456:	e00e      	b.n	8004476 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff fb4f 	bl	8003b08 <HAL_ADC_ErrorCallback>
}
 800446a:	e004      	b.n	8004476 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
}
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f7ff fb31 	bl	8003af4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	f043 0204 	orr.w	r2, r3, #4
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f7ff fb21 	bl	8003b08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a7a      	ldr	r2, [pc, #488]	; (80046c8 <ADC_ConfigureBoostMode+0x1f8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <ADC_ConfigureBoostMode+0x1c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a79      	ldr	r2, [pc, #484]	; (80046cc <ADC_ConfigureBoostMode+0x1fc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d109      	bne.n	8004500 <ADC_ConfigureBoostMode+0x30>
 80044ec:	4b78      	ldr	r3, [pc, #480]	; (80046d0 <ADC_ConfigureBoostMode+0x200>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e008      	b.n	8004512 <ADC_ConfigureBoostMode+0x42>
 8004500:	4b74      	ldr	r3, [pc, #464]	; (80046d4 <ADC_ConfigureBoostMode+0x204>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01c      	beq.n	8004550 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004516:	f005 f87f 	bl	8009618 <HAL_RCC_GetHCLKFreq>
 800451a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004524:	d010      	beq.n	8004548 <ADC_ConfigureBoostMode+0x78>
 8004526:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800452a:	d873      	bhi.n	8004614 <ADC_ConfigureBoostMode+0x144>
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004530:	d002      	beq.n	8004538 <ADC_ConfigureBoostMode+0x68>
 8004532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004536:	d16d      	bne.n	8004614 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	60fb      	str	r3, [r7, #12]
        break;
 8004546:	e068      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	089b      	lsrs	r3, r3, #2
 800454c:	60fb      	str	r3, [r7, #12]
        break;
 800454e:	e064      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004550:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004554:	f04f 0100 	mov.w	r1, #0
 8004558:	f006 fb06 	bl	800ab68 <HAL_RCCEx_GetPeriphCLKFreq>
 800455c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004566:	d051      	beq.n	800460c <ADC_ConfigureBoostMode+0x13c>
 8004568:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800456c:	d854      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 800456e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004572:	d047      	beq.n	8004604 <ADC_ConfigureBoostMode+0x134>
 8004574:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004578:	d84e      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 800457a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800457e:	d03d      	beq.n	80045fc <ADC_ConfigureBoostMode+0x12c>
 8004580:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004584:	d848      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 8004586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800458a:	d033      	beq.n	80045f4 <ADC_ConfigureBoostMode+0x124>
 800458c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004590:	d842      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 8004592:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004596:	d029      	beq.n	80045ec <ADC_ConfigureBoostMode+0x11c>
 8004598:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800459c:	d83c      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 800459e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80045a2:	d01a      	beq.n	80045da <ADC_ConfigureBoostMode+0x10a>
 80045a4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80045a8:	d836      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 80045aa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80045ae:	d014      	beq.n	80045da <ADC_ConfigureBoostMode+0x10a>
 80045b0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80045b4:	d830      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ba:	d00e      	beq.n	80045da <ADC_ConfigureBoostMode+0x10a>
 80045bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c0:	d82a      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 80045c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80045c6:	d008      	beq.n	80045da <ADC_ConfigureBoostMode+0x10a>
 80045c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80045cc:	d824      	bhi.n	8004618 <ADC_ConfigureBoostMode+0x148>
 80045ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045d2:	d002      	beq.n	80045da <ADC_ConfigureBoostMode+0x10a>
 80045d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045d8:	d11e      	bne.n	8004618 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	0c9b      	lsrs	r3, r3, #18
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	60fb      	str	r3, [r7, #12]
        break;
 80045ea:	e016      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	60fb      	str	r3, [r7, #12]
        break;
 80045f2:	e012      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	60fb      	str	r3, [r7, #12]
        break;
 80045fa:	e00e      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	099b      	lsrs	r3, r3, #6
 8004600:	60fb      	str	r3, [r7, #12]
        break;
 8004602:	e00a      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	09db      	lsrs	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
        break;
 800460a:	e006      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	60fb      	str	r3, [r7, #12]
        break;
 8004612:	e002      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004614:	bf00      	nop
 8004616:	e000      	b.n	800461a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004618:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800461a:	f7fe fdcb 	bl	80031b4 <HAL_GetREVID>
 800461e:	4603      	mov	r3, r0
 8004620:	f241 0203 	movw	r2, #4099	; 0x1003
 8004624:	4293      	cmp	r3, r2
 8004626:	d815      	bhi.n	8004654 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a2b      	ldr	r2, [pc, #172]	; (80046d8 <ADC_ConfigureBoostMode+0x208>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d908      	bls.n	8004642 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004640:	e03e      	b.n	80046c0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004650:	609a      	str	r2, [r3, #8]
}
 8004652:	e035      	b.n	80046c0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <ADC_ConfigureBoostMode+0x20c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d808      	bhi.n	8004674 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004670:	609a      	str	r2, [r3, #8]
}
 8004672:	e025      	b.n	80046c0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a1a      	ldr	r2, [pc, #104]	; (80046e0 <ADC_ConfigureBoostMode+0x210>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d80a      	bhi.n	8004692 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	e016      	b.n	80046c0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <ADC_ConfigureBoostMode+0x214>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d80a      	bhi.n	80046b0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ac:	609a      	str	r2, [r3, #8]
}
 80046ae:	e007      	b.n	80046c0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80046be:	609a      	str	r2, [r3, #8]
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40022000 	.word	0x40022000
 80046cc:	40022100 	.word	0x40022100
 80046d0:	40022300 	.word	0x40022300
 80046d4:	58026300 	.word	0x58026300
 80046d8:	01312d00 	.word	0x01312d00
 80046dc:	005f5e10 	.word	0x005f5e10
 80046e0:	00bebc20 	.word	0x00bebc20
 80046e4:	017d7840 	.word	0x017d7840

080046e8 <LL_ADC_IsEnabled>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <LL_ADC_IsEnabled+0x18>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <LL_ADC_IsEnabled+0x1a>
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <LL_ADC_StartCalibration>:
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <LL_ADC_StartCalibration+0x38>)
 8004722:	4013      	ands	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004730:	430a      	orrs	r2, r1
 8004732:	4313      	orrs	r3, r2
 8004734:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	609a      	str	r2, [r3, #8]
}
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	3ffeffc0 	.word	0x3ffeffc0

0800474c <LL_ADC_IsCalibrationOnGoing>:
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800475c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004760:	d101      	bne.n	8004766 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_ADC_REG_IsConversionOngoing>:
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b04      	cmp	r3, #4
 8004786:	d101      	bne.n	800478c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_ADCEx_Calibration_Start+0x1e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e04c      	b.n	8004854 <HAL_ADCEx_Calibration_Start+0xb8>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff fd90 	bl	80042e8 <ADC_Disable>
 80047c8:	4603      	mov	r3, r0
 80047ca:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d135      	bne.n	800483e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047d6:	4b21      	ldr	r3, [pc, #132]	; (800485c <HAL_ADCEx_Calibration_Start+0xc0>)
 80047d8:	4013      	ands	r3, r2
 80047da:	f043 0202 	orr.w	r2, r3, #2
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff ff90 	bl	8004710 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047f0:	e014      	b.n	800481c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3301      	adds	r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	4a19      	ldr	r2, [pc, #100]	; (8004860 <HAL_ADCEx_Calibration_Start+0xc4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d30d      	bcc.n	800481c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f023 0312 	bic.w	r3, r3, #18
 8004808:	f043 0210 	orr.w	r2, r3, #16
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e01b      	b.n	8004854 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff93 	bl	800474c <LL_ADC_IsCalibrationOnGoing>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e2      	bne.n	80047f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f023 0303 	bic.w	r3, r3, #3
 8004834:	f043 0201 	orr.w	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
 800483c:	e005      	b.n	800484a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f043 0210 	orr.w	r2, r3, #16
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004852:	7dfb      	ldrb	r3, [r7, #23]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	ffffeefd 	.word	0xffffeefd
 8004860:	25c3f800 	.word	0x25c3f800

08004864 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b09f      	sub	sp, #124	; 0x7c
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800487e:	2302      	movs	r3, #2
 8004880:	e0be      	b.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800488a:	2300      	movs	r3, #0
 800488c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800488e:	2300      	movs	r3, #0
 8004890:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a5c      	ldr	r2, [pc, #368]	; (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d102      	bne.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800489c:	4b5b      	ldr	r3, [pc, #364]	; (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	e001      	b.n	80048a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10b      	bne.n	80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e09d      	b.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff ff54 	bl	8004774 <LL_ADC_REG_IsConversionOngoing>
 80048cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff ff4e 	bl	8004774 <LL_ADC_REG_IsConversionOngoing>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d17f      	bne.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d17c      	bne.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a47      	ldr	r2, [pc, #284]	; (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a46      	ldr	r2, [pc, #280]	; (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d101      	bne.n	80048fc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80048f8:	4b45      	ldr	r3, [pc, #276]	; (8004a10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048fa:	e000      	b.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048fc:	4b45      	ldr	r3, [pc, #276]	; (8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d039      	beq.n	800497c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	431a      	orrs	r2, r3
 8004916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004918:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a3a      	ldr	r2, [pc, #232]	; (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a38      	ldr	r2, [pc, #224]	; (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10e      	bne.n	800494c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800492e:	4836      	ldr	r0, [pc, #216]	; (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004930:	f7ff feda 	bl	80046e8 <LL_ADC_IsEnabled>
 8004934:	4604      	mov	r4, r0
 8004936:	4835      	ldr	r0, [pc, #212]	; (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004938:	f7ff fed6 	bl	80046e8 <LL_ADC_IsEnabled>
 800493c:	4603      	mov	r3, r0
 800493e:	4323      	orrs	r3, r4
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	e008      	b.n	800495e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800494c:	4832      	ldr	r0, [pc, #200]	; (8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800494e:	f7ff fecb 	bl	80046e8 <LL_ADC_IsEnabled>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d047      	beq.n	80049f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004968:	4013      	ands	r3, r2
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	6811      	ldr	r1, [r2, #0]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	430a      	orrs	r2, r1
 8004974:	431a      	orrs	r2, r3
 8004976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004978:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800497a:	e03a      	b.n	80049f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800497c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004986:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1e      	ldr	r2, [pc, #120]	; (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d10e      	bne.n	80049ba <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800499c:	481a      	ldr	r0, [pc, #104]	; (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800499e:	f7ff fea3 	bl	80046e8 <LL_ADC_IsEnabled>
 80049a2:	4604      	mov	r4, r0
 80049a4:	4819      	ldr	r0, [pc, #100]	; (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049a6:	f7ff fe9f 	bl	80046e8 <LL_ADC_IsEnabled>
 80049aa:	4603      	mov	r3, r0
 80049ac:	4323      	orrs	r3, r4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf0c      	ite	eq
 80049b2:	2301      	moveq	r3, #1
 80049b4:	2300      	movne	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e008      	b.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80049ba:	4817      	ldr	r0, [pc, #92]	; (8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049bc:	f7ff fe94 	bl	80046e8 <LL_ADC_IsEnabled>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d010      	beq.n	80049f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049dc:	e009      	b.n	80049f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80049f0:	e000      	b.n	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	377c      	adds	r7, #124	; 0x7c
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd90      	pop	{r4, r7, pc}
 8004a08:	40022000 	.word	0x40022000
 8004a0c:	40022100 	.word	0x40022100
 8004a10:	40022300 	.word	0x40022300
 8004a14:	58026300 	.word	0x58026300
 8004a18:	58026000 	.word	0x58026000
 8004a1c:	fffff0e0 	.word	0xfffff0e0

08004a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a30:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <__NVIC_SetPriorityGrouping+0x40>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <__NVIC_SetPriorityGrouping+0x44>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a4e:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <__NVIC_SetPriorityGrouping+0x40>)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	60d3      	str	r3, [r2, #12]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	e000ed00 	.word	0xe000ed00
 8004a64:	05fa0000 	.word	0x05fa0000

08004a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a6c:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <__NVIC_GetPriorityGrouping+0x18>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	0a1b      	lsrs	r3, r3, #8
 8004a72:	f003 0307 	and.w	r3, r3, #7
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	db0b      	blt.n	8004aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	f003 021f 	and.w	r2, r3, #31
 8004a9c:	4907      	ldr	r1, [pc, #28]	; (8004abc <__NVIC_EnableIRQ+0x38>)
 8004a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	e000e100 	.word	0xe000e100

08004ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	6039      	str	r1, [r7, #0]
 8004aca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	db0a      	blt.n	8004aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	490c      	ldr	r1, [pc, #48]	; (8004b0c <__NVIC_SetPriority+0x4c>)
 8004ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ade:	0112      	lsls	r2, r2, #4
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ae8:	e00a      	b.n	8004b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	4908      	ldr	r1, [pc, #32]	; (8004b10 <__NVIC_SetPriority+0x50>)
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	3b04      	subs	r3, #4
 8004af8:	0112      	lsls	r2, r2, #4
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	440b      	add	r3, r1
 8004afe:	761a      	strb	r2, [r3, #24]
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	e000e100 	.word	0xe000e100
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b089      	sub	sp, #36	; 0x24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f1c3 0307 	rsb	r3, r3, #7
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	bf28      	it	cs
 8004b32:	2304      	movcs	r3, #4
 8004b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	2b06      	cmp	r3, #6
 8004b3c:	d902      	bls.n	8004b44 <NVIC_EncodePriority+0x30>
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3b03      	subs	r3, #3
 8004b42:	e000      	b.n	8004b46 <NVIC_EncodePriority+0x32>
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43da      	mvns	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	401a      	ands	r2, r3
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	43d9      	mvns	r1, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b6c:	4313      	orrs	r3, r2
         );
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3724      	adds	r7, #36	; 0x24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff ff4c 	bl	8004a20 <__NVIC_SetPriorityGrouping>
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b9e:	f7ff ff63 	bl	8004a68 <__NVIC_GetPriorityGrouping>
 8004ba2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	6978      	ldr	r0, [r7, #20]
 8004baa:	f7ff ffb3 	bl	8004b14 <NVIC_EncodePriority>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ff82 	bl	8004ac0 <__NVIC_SetPriority>
}
 8004bbc:	bf00      	nop
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff56 	bl	8004a84 <__NVIC_EnableIRQ>
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e014      	b.n	8004c1c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	791b      	ldrb	r3, [r3, #4]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fd fcdc 	bl	80025c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e046      	b.n	8004cc6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	795b      	ldrb	r3, [r3, #5]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_DAC_Start+0x20>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e040      	b.n	8004cc6 <HAL_DAC_Start+0xa2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6819      	ldr	r1, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10f      	bne.n	8004c8e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d11d      	bne.n	8004cb8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	e014      	b.n	8004cb8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d107      	bne.n	8004cb8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0202 	orr.w	r2, r2, #2
 8004cb6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0a2      	b.n	8004e32 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	795b      	ldrb	r3, [r3, #5]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_DAC_Start_DMA+0x24>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e09c      	b.n	8004e32 <HAL_DAC_Start_DMA+0x15e>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2202      	movs	r2, #2
 8004d02:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d129      	bne.n	8004d5e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	4a4b      	ldr	r2, [pc, #300]	; (8004e3c <HAL_DAC_Start_DMA+0x168>)
 8004d10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	4a4a      	ldr	r2, [pc, #296]	; (8004e40 <HAL_DAC_Start_DMA+0x16c>)
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4a49      	ldr	r2, [pc, #292]	; (8004e44 <HAL_DAC_Start_DMA+0x170>)
 8004d20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d30:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_DAC_Start_DMA+0x6c>
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d005      	beq.n	8004d4a <HAL_DAC_Start_DMA+0x76>
 8004d3e:	e009      	b.n	8004d54 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	613b      	str	r3, [r7, #16]
        break;
 8004d48:	e033      	b.n	8004db2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	613b      	str	r3, [r7, #16]
        break;
 8004d52:	e02e      	b.n	8004db2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3310      	adds	r3, #16
 8004d5a:	613b      	str	r3, [r7, #16]
        break;
 8004d5c:	e029      	b.n	8004db2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4a39      	ldr	r2, [pc, #228]	; (8004e48 <HAL_DAC_Start_DMA+0x174>)
 8004d64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	4a38      	ldr	r2, [pc, #224]	; (8004e4c <HAL_DAC_Start_DMA+0x178>)
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4a37      	ldr	r2, [pc, #220]	; (8004e50 <HAL_DAC_Start_DMA+0x17c>)
 8004d74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d84:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_DAC_Start_DMA+0xc0>
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d005      	beq.n	8004d9e <HAL_DAC_Start_DMA+0xca>
 8004d92:	e009      	b.n	8004da8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3314      	adds	r3, #20
 8004d9a:	613b      	str	r3, [r7, #16]
        break;
 8004d9c:	e009      	b.n	8004db2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3318      	adds	r3, #24
 8004da4:	613b      	str	r3, [r7, #16]
        break;
 8004da6:	e004      	b.n	8004db2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	331c      	adds	r3, #28
 8004dae:	613b      	str	r3, [r7, #16]
        break;
 8004db0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d111      	bne.n	8004ddc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dc6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6898      	ldr	r0, [r3, #8]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	f000 fe67 	bl	8005aa4 <HAL_DMA_Start_IT>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	75fb      	strb	r3, [r7, #23]
 8004dda:	e010      	b.n	8004dfe <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004dea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68d8      	ldr	r0, [r3, #12]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	f000 fe55 	bl	8005aa4 <HAL_DMA_Start_IT>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10c      	bne.n	8004e24 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2201      	movs	r2, #1
 8004e18:	409a      	lsls	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e005      	b.n	8004e30 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f043 0204 	orr.w	r2, r3, #4
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	080052c5 	.word	0x080052c5
 8004e40:	080052e7 	.word	0x080052e7
 8004e44:	08005303 	.word	0x08005303
 8004e48:	08005381 	.word	0x08005381
 8004e4c:	080053a3 	.word	0x080053a3
 8004e50:	080053bf 	.word	0x080053bf

08004e54 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e03e      	b.n	8004ee6 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6819      	ldr	r1, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	43da      	mvns	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	400a      	ands	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6819      	ldr	r1, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2201      	movs	r2, #1
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43da      	mvns	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	400a      	ands	r2, r1
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10d      	bne.n	8004ec4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 f863 	bl	8005f78 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e00c      	b.n	8004ede <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 f855 	bl	8005f78 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004edc:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f04:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01d      	beq.n	8004f4c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d018      	beq.n	8004f4c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f043 0201 	orr.w	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f44:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f86f 	bl	800502a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01d      	beq.n	8004f92 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d018      	beq.n	8004f92 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2204      	movs	r2, #4
 8004f64:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f043 0202 	orr.w	r2, r3, #2
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004f7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f9ed 	bl	800536c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b087      	sub	sp, #28
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e015      	b.n	8004fe2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d105      	bne.n	8004fce <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3308      	adds	r3, #8
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	e004      	b.n	8004fd8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08a      	sub	sp, #40	; 0x28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_DAC_ConfigChannel+0x1e>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e12a      	b.n	80052b8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	795b      	ldrb	r3, [r3, #5]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_DAC_ConfigChannel+0x2e>
 800506a:	2302      	movs	r3, #2
 800506c:	e124      	b.n	80052b8 <HAL_DAC_ConfigChannel+0x278>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2202      	movs	r2, #2
 8005078:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b04      	cmp	r3, #4
 8005080:	d17a      	bne.n	8005178 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005082:	f7fe f88b 	bl	800319c <HAL_GetTick>
 8005086:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d13d      	bne.n	800510a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800508e:	e018      	b.n	80050c2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005090:	f7fe f884 	bl	800319c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d911      	bls.n	80050c2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a4:	4b86      	ldr	r3, [pc, #536]	; (80052c0 <HAL_DAC_ConfigChannel+0x280>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f043 0208 	orr.w	r2, r3, #8
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2203      	movs	r2, #3
 80050bc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e0fa      	b.n	80052b8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c8:	4b7d      	ldr	r3, [pc, #500]	; (80052c0 <HAL_DAC_ConfigChannel+0x280>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1df      	bne.n	8005090 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	6992      	ldr	r2, [r2, #24]
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40
 80050da:	e020      	b.n	800511e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80050dc:	f7fe f85e 	bl	800319c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d90f      	bls.n	800510a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	da0a      	bge.n	800510a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f043 0208 	orr.w	r2, r3, #8
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2203      	movs	r2, #3
 8005104:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e0d6      	b.n	80052b8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	2b00      	cmp	r3, #0
 8005112:	dbe3      	blt.n	80050dc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	6992      	ldr	r2, [r2, #24]
 800511c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800512e:	fa01 f303 	lsl.w	r3, r1, r3
 8005132:	43db      	mvns	r3, r3
 8005134:	ea02 0103 	and.w	r1, r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	409a      	lsls	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	21ff      	movs	r1, #255	; 0xff
 800515a:	fa01 f303 	lsl.w	r3, r1, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	ea02 0103 	and.w	r1, r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	409a      	lsls	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d11d      	bne.n	80051bc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	221f      	movs	r2, #31
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4013      	ands	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2207      	movs	r2, #7
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d102      	bne.n	80051e6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
 80051e4:	e00f      	b.n	8005206 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d102      	bne.n	80051f4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80051ee:	2301      	movs	r3, #1
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
 80051f2:	e008      	b.n	8005206 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80051fc:	2301      	movs	r3, #1
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005200:	e001      	b.n	8005206 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005202:	2300      	movs	r3, #0
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	4313      	orrs	r3, r2
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6819      	ldr	r1, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43da      	mvns	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	400a      	ands	r2, r1
 800524c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4013      	ands	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4313      	orrs	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6819      	ldr	r1, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	22c0      	movs	r2, #192	; 0xc0
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43da      	mvns	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	400a      	ands	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80052b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3728      	adds	r7, #40	; 0x28
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20008000 	.word	0x20008000

080052c4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff fe8b 	bl	8004fee <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	711a      	strb	r2, [r3, #4]
}
 80052de:	bf00      	nop
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff fe84 	bl	8005002 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f043 0204 	orr.w	r2, r3, #4
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff fe7a 	bl	8005016 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	711a      	strb	r2, [r3, #4]
}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff ffce 	bl	8005330 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	711a      	strb	r2, [r3, #4]
}
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff ffc7 	bl	8005344 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f043 0204 	orr.w	r2, r3, #4
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff ffbd 	bl	8005358 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	711a      	strb	r2, [r3, #4]
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80053f4:	f7fd fed2 	bl	800319c <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e316      	b.n	8005a32 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a66      	ldr	r2, [pc, #408]	; (80055a4 <HAL_DMA_Init+0x1b8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d04a      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a65      	ldr	r2, [pc, #404]	; (80055a8 <HAL_DMA_Init+0x1bc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d045      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a63      	ldr	r2, [pc, #396]	; (80055ac <HAL_DMA_Init+0x1c0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d040      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a62      	ldr	r2, [pc, #392]	; (80055b0 <HAL_DMA_Init+0x1c4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d03b      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a60      	ldr	r2, [pc, #384]	; (80055b4 <HAL_DMA_Init+0x1c8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d036      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a5f      	ldr	r2, [pc, #380]	; (80055b8 <HAL_DMA_Init+0x1cc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d031      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a5d      	ldr	r2, [pc, #372]	; (80055bc <HAL_DMA_Init+0x1d0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d02c      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a5c      	ldr	r2, [pc, #368]	; (80055c0 <HAL_DMA_Init+0x1d4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d027      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a5a      	ldr	r2, [pc, #360]	; (80055c4 <HAL_DMA_Init+0x1d8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d022      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a59      	ldr	r2, [pc, #356]	; (80055c8 <HAL_DMA_Init+0x1dc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d01d      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a57      	ldr	r2, [pc, #348]	; (80055cc <HAL_DMA_Init+0x1e0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d018      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a56      	ldr	r2, [pc, #344]	; (80055d0 <HAL_DMA_Init+0x1e4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d013      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a54      	ldr	r2, [pc, #336]	; (80055d4 <HAL_DMA_Init+0x1e8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00e      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a53      	ldr	r2, [pc, #332]	; (80055d8 <HAL_DMA_Init+0x1ec>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d009      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a51      	ldr	r2, [pc, #324]	; (80055dc <HAL_DMA_Init+0x1f0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_DMA_Init+0xb8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a50      	ldr	r2, [pc, #320]	; (80055e0 <HAL_DMA_Init+0x1f4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d101      	bne.n	80054a8 <HAL_DMA_Init+0xbc>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <HAL_DMA_Init+0xbe>
 80054a8:	2300      	movs	r3, #0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 813b 	beq.w	8005726 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a37      	ldr	r2, [pc, #220]	; (80055a4 <HAL_DMA_Init+0x1b8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04a      	beq.n	8005560 <HAL_DMA_Init+0x174>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a36      	ldr	r2, [pc, #216]	; (80055a8 <HAL_DMA_Init+0x1bc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d045      	beq.n	8005560 <HAL_DMA_Init+0x174>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a34      	ldr	r2, [pc, #208]	; (80055ac <HAL_DMA_Init+0x1c0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d040      	beq.n	8005560 <HAL_DMA_Init+0x174>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a33      	ldr	r2, [pc, #204]	; (80055b0 <HAL_DMA_Init+0x1c4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d03b      	beq.n	8005560 <HAL_DMA_Init+0x174>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a31      	ldr	r2, [pc, #196]	; (80055b4 <HAL_DMA_Init+0x1c8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d036      	beq.n	8005560 <HAL_DMA_Init+0x174>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a30      	ldr	r2, [pc, #192]	; (80055b8 <HAL_DMA_Init+0x1cc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d031      	beq.n	8005560 <HAL_DMA_Init+0x174>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a2e      	ldr	r2, [pc, #184]	; (80055bc <HAL_DMA_Init+0x1d0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02c      	beq.n	8005560 <HAL_DMA_Init+0x174>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a2d      	ldr	r2, [pc, #180]	; (80055c0 <HAL_DMA_Init+0x1d4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d027      	beq.n	8005560 <HAL_DMA_Init+0x174>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2b      	ldr	r2, [pc, #172]	; (80055c4 <HAL_DMA_Init+0x1d8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_DMA_Init+0x174>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <HAL_DMA_Init+0x1dc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d01d      	beq.n	8005560 <HAL_DMA_Init+0x174>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a28      	ldr	r2, [pc, #160]	; (80055cc <HAL_DMA_Init+0x1e0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_DMA_Init+0x174>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a27      	ldr	r2, [pc, #156]	; (80055d0 <HAL_DMA_Init+0x1e4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_DMA_Init+0x174>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a25      	ldr	r2, [pc, #148]	; (80055d4 <HAL_DMA_Init+0x1e8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_DMA_Init+0x174>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a24      	ldr	r2, [pc, #144]	; (80055d8 <HAL_DMA_Init+0x1ec>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_DMA_Init+0x174>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a22      	ldr	r2, [pc, #136]	; (80055dc <HAL_DMA_Init+0x1f0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_DMA_Init+0x174>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <HAL_DMA_Init+0x1f4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <HAL_DMA_Init+0x186>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e007      	b.n	8005582 <HAL_DMA_Init+0x196>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005582:	e02f      	b.n	80055e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005584:	f7fd fe0a 	bl	800319c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b05      	cmp	r3, #5
 8005590:	d928      	bls.n	80055e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2203      	movs	r2, #3
 800559c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e246      	b.n	8005a32 <HAL_DMA_Init+0x646>
 80055a4:	40020010 	.word	0x40020010
 80055a8:	40020028 	.word	0x40020028
 80055ac:	40020040 	.word	0x40020040
 80055b0:	40020058 	.word	0x40020058
 80055b4:	40020070 	.word	0x40020070
 80055b8:	40020088 	.word	0x40020088
 80055bc:	400200a0 	.word	0x400200a0
 80055c0:	400200b8 	.word	0x400200b8
 80055c4:	40020410 	.word	0x40020410
 80055c8:	40020428 	.word	0x40020428
 80055cc:	40020440 	.word	0x40020440
 80055d0:	40020458 	.word	0x40020458
 80055d4:	40020470 	.word	0x40020470
 80055d8:	40020488 	.word	0x40020488
 80055dc:	400204a0 	.word	0x400204a0
 80055e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1c8      	bne.n	8005584 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4b83      	ldr	r3, [pc, #524]	; (800580c <HAL_DMA_Init+0x420>)
 80055fe:	4013      	ands	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800560a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005616:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005622:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b04      	cmp	r3, #4
 8005636:	d107      	bne.n	8005648 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	4313      	orrs	r3, r2
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005648:	4b71      	ldr	r3, [pc, #452]	; (8005810 <HAL_DMA_Init+0x424>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b71      	ldr	r3, [pc, #452]	; (8005814 <HAL_DMA_Init+0x428>)
 800564e:	4013      	ands	r3, r2
 8005650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005654:	d328      	bcc.n	80056a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b28      	cmp	r3, #40	; 0x28
 800565c:	d903      	bls.n	8005666 <HAL_DMA_Init+0x27a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b2e      	cmp	r3, #46	; 0x2e
 8005664:	d917      	bls.n	8005696 <HAL_DMA_Init+0x2aa>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b3e      	cmp	r3, #62	; 0x3e
 800566c:	d903      	bls.n	8005676 <HAL_DMA_Init+0x28a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b42      	cmp	r3, #66	; 0x42
 8005674:	d90f      	bls.n	8005696 <HAL_DMA_Init+0x2aa>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b46      	cmp	r3, #70	; 0x46
 800567c:	d903      	bls.n	8005686 <HAL_DMA_Init+0x29a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b48      	cmp	r3, #72	; 0x48
 8005684:	d907      	bls.n	8005696 <HAL_DMA_Init+0x2aa>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b4e      	cmp	r3, #78	; 0x4e
 800568c:	d905      	bls.n	800569a <HAL_DMA_Init+0x2ae>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b52      	cmp	r3, #82	; 0x52
 8005694:	d801      	bhi.n	800569a <HAL_DMA_Init+0x2ae>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <HAL_DMA_Init+0x2b0>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0307 	bic.w	r3, r3, #7
 80056be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d117      	bne.n	8005702 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00e      	beq.n	8005702 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f002 fb33 	bl	8007d50 <DMA_CheckFifoParam>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2240      	movs	r2, #64	; 0x40
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e197      	b.n	8005a32 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f002 fa6e 	bl	8007bec <DMA_CalcBaseAndBitshift>
 8005710:	4603      	mov	r3, r0
 8005712:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	223f      	movs	r2, #63	; 0x3f
 800571e:	409a      	lsls	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]
 8005724:	e0cd      	b.n	80058c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a3b      	ldr	r2, [pc, #236]	; (8005818 <HAL_DMA_Init+0x42c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d022      	beq.n	8005776 <HAL_DMA_Init+0x38a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a39      	ldr	r2, [pc, #228]	; (800581c <HAL_DMA_Init+0x430>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <HAL_DMA_Init+0x38a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a38      	ldr	r2, [pc, #224]	; (8005820 <HAL_DMA_Init+0x434>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d018      	beq.n	8005776 <HAL_DMA_Init+0x38a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a36      	ldr	r2, [pc, #216]	; (8005824 <HAL_DMA_Init+0x438>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_DMA_Init+0x38a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a35      	ldr	r2, [pc, #212]	; (8005828 <HAL_DMA_Init+0x43c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_DMA_Init+0x38a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a33      	ldr	r2, [pc, #204]	; (800582c <HAL_DMA_Init+0x440>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_DMA_Init+0x38a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a32      	ldr	r2, [pc, #200]	; (8005830 <HAL_DMA_Init+0x444>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_DMA_Init+0x38a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a30      	ldr	r2, [pc, #192]	; (8005834 <HAL_DMA_Init+0x448>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d101      	bne.n	800577a <HAL_DMA_Init+0x38e>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <HAL_DMA_Init+0x390>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8097 	beq.w	80058b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a24      	ldr	r2, [pc, #144]	; (8005818 <HAL_DMA_Init+0x42c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d021      	beq.n	80057d0 <HAL_DMA_Init+0x3e4>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a22      	ldr	r2, [pc, #136]	; (800581c <HAL_DMA_Init+0x430>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01c      	beq.n	80057d0 <HAL_DMA_Init+0x3e4>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a21      	ldr	r2, [pc, #132]	; (8005820 <HAL_DMA_Init+0x434>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d017      	beq.n	80057d0 <HAL_DMA_Init+0x3e4>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <HAL_DMA_Init+0x438>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d012      	beq.n	80057d0 <HAL_DMA_Init+0x3e4>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <HAL_DMA_Init+0x43c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00d      	beq.n	80057d0 <HAL_DMA_Init+0x3e4>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1c      	ldr	r2, [pc, #112]	; (800582c <HAL_DMA_Init+0x440>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d008      	beq.n	80057d0 <HAL_DMA_Init+0x3e4>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_DMA_Init+0x444>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <HAL_DMA_Init+0x3e4>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a19      	ldr	r2, [pc, #100]	; (8005834 <HAL_DMA_Init+0x448>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4b12      	ldr	r3, [pc, #72]	; (8005838 <HAL_DMA_Init+0x44c>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b40      	cmp	r3, #64	; 0x40
 80057f8:	d020      	beq.n	800583c <HAL_DMA_Init+0x450>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d102      	bne.n	8005808 <HAL_DMA_Init+0x41c>
 8005802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005806:	e01a      	b.n	800583e <HAL_DMA_Init+0x452>
 8005808:	2300      	movs	r3, #0
 800580a:	e018      	b.n	800583e <HAL_DMA_Init+0x452>
 800580c:	fe10803f 	.word	0xfe10803f
 8005810:	5c001000 	.word	0x5c001000
 8005814:	ffff0000 	.word	0xffff0000
 8005818:	58025408 	.word	0x58025408
 800581c:	5802541c 	.word	0x5802541c
 8005820:	58025430 	.word	0x58025430
 8005824:	58025444 	.word	0x58025444
 8005828:	58025458 	.word	0x58025458
 800582c:	5802546c 	.word	0x5802546c
 8005830:	58025480 	.word	0x58025480
 8005834:	58025494 	.word	0x58025494
 8005838:	fffe000f 	.word	0xfffe000f
 800583c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68d2      	ldr	r2, [r2, #12]
 8005842:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005844:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800584c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800585c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005864:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800586c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	4b6e      	ldr	r3, [pc, #440]	; (8005a3c <HAL_DMA_Init+0x650>)
 8005884:	4413      	add	r3, r2
 8005886:	4a6e      	ldr	r2, [pc, #440]	; (8005a40 <HAL_DMA_Init+0x654>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	009a      	lsls	r2, r3, #2
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f002 f9a9 	bl	8007bec <DMA_CalcBaseAndBitshift>
 800589a:	4603      	mov	r3, r0
 800589c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	2201      	movs	r2, #1
 80058a8:	409a      	lsls	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	605a      	str	r2, [r3, #4]
 80058ae:	e008      	b.n	80058c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2240      	movs	r2, #64	; 0x40
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2203      	movs	r2, #3
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e0b7      	b.n	8005a32 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a5f      	ldr	r2, [pc, #380]	; (8005a44 <HAL_DMA_Init+0x658>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d072      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a5d      	ldr	r2, [pc, #372]	; (8005a48 <HAL_DMA_Init+0x65c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d06d      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a5c      	ldr	r2, [pc, #368]	; (8005a4c <HAL_DMA_Init+0x660>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d068      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a5a      	ldr	r2, [pc, #360]	; (8005a50 <HAL_DMA_Init+0x664>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d063      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a59      	ldr	r2, [pc, #356]	; (8005a54 <HAL_DMA_Init+0x668>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d05e      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a57      	ldr	r2, [pc, #348]	; (8005a58 <HAL_DMA_Init+0x66c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d059      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a56      	ldr	r2, [pc, #344]	; (8005a5c <HAL_DMA_Init+0x670>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d054      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a54      	ldr	r2, [pc, #336]	; (8005a60 <HAL_DMA_Init+0x674>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d04f      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a53      	ldr	r2, [pc, #332]	; (8005a64 <HAL_DMA_Init+0x678>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d04a      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a51      	ldr	r2, [pc, #324]	; (8005a68 <HAL_DMA_Init+0x67c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d045      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a50      	ldr	r2, [pc, #320]	; (8005a6c <HAL_DMA_Init+0x680>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d040      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a4e      	ldr	r2, [pc, #312]	; (8005a70 <HAL_DMA_Init+0x684>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d03b      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a4d      	ldr	r2, [pc, #308]	; (8005a74 <HAL_DMA_Init+0x688>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d036      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a4b      	ldr	r2, [pc, #300]	; (8005a78 <HAL_DMA_Init+0x68c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d031      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a4a      	ldr	r2, [pc, #296]	; (8005a7c <HAL_DMA_Init+0x690>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d02c      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a48      	ldr	r2, [pc, #288]	; (8005a80 <HAL_DMA_Init+0x694>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d027      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a47      	ldr	r2, [pc, #284]	; (8005a84 <HAL_DMA_Init+0x698>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d022      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a45      	ldr	r2, [pc, #276]	; (8005a88 <HAL_DMA_Init+0x69c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a44      	ldr	r2, [pc, #272]	; (8005a8c <HAL_DMA_Init+0x6a0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d018      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a42      	ldr	r2, [pc, #264]	; (8005a90 <HAL_DMA_Init+0x6a4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a41      	ldr	r2, [pc, #260]	; (8005a94 <HAL_DMA_Init+0x6a8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3f      	ldr	r2, [pc, #252]	; (8005a98 <HAL_DMA_Init+0x6ac>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a3e      	ldr	r2, [pc, #248]	; (8005a9c <HAL_DMA_Init+0x6b0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_DMA_Init+0x5c6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a3c      	ldr	r2, [pc, #240]	; (8005aa0 <HAL_DMA_Init+0x6b4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <HAL_DMA_Init+0x5ca>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_DMA_Init+0x5cc>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d032      	beq.n	8005a22 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f002 fa43 	bl	8007e48 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b80      	cmp	r3, #128	; 0x80
 80059c8:	d102      	bne.n	80059d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d010      	beq.n	8005a10 <HAL_DMA_Init+0x624>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d80c      	bhi.n	8005a10 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f002 fac0 	bl	8007f7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	e008      	b.n	8005a22 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	a7fdabf8 	.word	0xa7fdabf8
 8005a40:	cccccccd 	.word	0xcccccccd
 8005a44:	40020010 	.word	0x40020010
 8005a48:	40020028 	.word	0x40020028
 8005a4c:	40020040 	.word	0x40020040
 8005a50:	40020058 	.word	0x40020058
 8005a54:	40020070 	.word	0x40020070
 8005a58:	40020088 	.word	0x40020088
 8005a5c:	400200a0 	.word	0x400200a0
 8005a60:	400200b8 	.word	0x400200b8
 8005a64:	40020410 	.word	0x40020410
 8005a68:	40020428 	.word	0x40020428
 8005a6c:	40020440 	.word	0x40020440
 8005a70:	40020458 	.word	0x40020458
 8005a74:	40020470 	.word	0x40020470
 8005a78:	40020488 	.word	0x40020488
 8005a7c:	400204a0 	.word	0x400204a0
 8005a80:	400204b8 	.word	0x400204b8
 8005a84:	58025408 	.word	0x58025408
 8005a88:	5802541c 	.word	0x5802541c
 8005a8c:	58025430 	.word	0x58025430
 8005a90:	58025444 	.word	0x58025444
 8005a94:	58025458 	.word	0x58025458
 8005a98:	5802546c 	.word	0x5802546c
 8005a9c:	58025480 	.word	0x58025480
 8005aa0:	58025494 	.word	0x58025494

08005aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e226      	b.n	8005f0e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_DMA_Start_IT+0x2a>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e21f      	b.n	8005f0e <HAL_DMA_Start_IT+0x46a>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	f040 820a 	bne.w	8005ef8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a68      	ldr	r2, [pc, #416]	; (8005c98 <HAL_DMA_Start_IT+0x1f4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d04a      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a66      	ldr	r2, [pc, #408]	; (8005c9c <HAL_DMA_Start_IT+0x1f8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d045      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a65      	ldr	r2, [pc, #404]	; (8005ca0 <HAL_DMA_Start_IT+0x1fc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d040      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a63      	ldr	r2, [pc, #396]	; (8005ca4 <HAL_DMA_Start_IT+0x200>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d03b      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a62      	ldr	r2, [pc, #392]	; (8005ca8 <HAL_DMA_Start_IT+0x204>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d036      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a60      	ldr	r2, [pc, #384]	; (8005cac <HAL_DMA_Start_IT+0x208>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d031      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a5f      	ldr	r2, [pc, #380]	; (8005cb0 <HAL_DMA_Start_IT+0x20c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d02c      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a5d      	ldr	r2, [pc, #372]	; (8005cb4 <HAL_DMA_Start_IT+0x210>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d027      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a5c      	ldr	r2, [pc, #368]	; (8005cb8 <HAL_DMA_Start_IT+0x214>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d022      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a5a      	ldr	r2, [pc, #360]	; (8005cbc <HAL_DMA_Start_IT+0x218>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01d      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a59      	ldr	r2, [pc, #356]	; (8005cc0 <HAL_DMA_Start_IT+0x21c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d018      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a57      	ldr	r2, [pc, #348]	; (8005cc4 <HAL_DMA_Start_IT+0x220>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d013      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a56      	ldr	r2, [pc, #344]	; (8005cc8 <HAL_DMA_Start_IT+0x224>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00e      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a54      	ldr	r2, [pc, #336]	; (8005ccc <HAL_DMA_Start_IT+0x228>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d009      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a53      	ldr	r2, [pc, #332]	; (8005cd0 <HAL_DMA_Start_IT+0x22c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d004      	beq.n	8005b92 <HAL_DMA_Start_IT+0xee>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a51      	ldr	r2, [pc, #324]	; (8005cd4 <HAL_DMA_Start_IT+0x230>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d108      	bne.n	8005ba4 <HAL_DMA_Start_IT+0x100>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e007      	b.n	8005bb4 <HAL_DMA_Start_IT+0x110>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f001 fe6a 	bl	8007894 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a34      	ldr	r2, [pc, #208]	; (8005c98 <HAL_DMA_Start_IT+0x1f4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d04a      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a33      	ldr	r2, [pc, #204]	; (8005c9c <HAL_DMA_Start_IT+0x1f8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d045      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a31      	ldr	r2, [pc, #196]	; (8005ca0 <HAL_DMA_Start_IT+0x1fc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d040      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a30      	ldr	r2, [pc, #192]	; (8005ca4 <HAL_DMA_Start_IT+0x200>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d03b      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a2e      	ldr	r2, [pc, #184]	; (8005ca8 <HAL_DMA_Start_IT+0x204>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d036      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a2d      	ldr	r2, [pc, #180]	; (8005cac <HAL_DMA_Start_IT+0x208>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d031      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <HAL_DMA_Start_IT+0x20c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d02c      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2a      	ldr	r2, [pc, #168]	; (8005cb4 <HAL_DMA_Start_IT+0x210>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d027      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <HAL_DMA_Start_IT+0x214>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d022      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a27      	ldr	r2, [pc, #156]	; (8005cbc <HAL_DMA_Start_IT+0x218>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d01d      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a25      	ldr	r2, [pc, #148]	; (8005cc0 <HAL_DMA_Start_IT+0x21c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d018      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a24      	ldr	r2, [pc, #144]	; (8005cc4 <HAL_DMA_Start_IT+0x220>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d013      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <HAL_DMA_Start_IT+0x224>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00e      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a21      	ldr	r2, [pc, #132]	; (8005ccc <HAL_DMA_Start_IT+0x228>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d009      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <HAL_DMA_Start_IT+0x22c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <HAL_DMA_Start_IT+0x1bc>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1e      	ldr	r2, [pc, #120]	; (8005cd4 <HAL_DMA_Start_IT+0x230>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d101      	bne.n	8005c64 <HAL_DMA_Start_IT+0x1c0>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <HAL_DMA_Start_IT+0x1c2>
 8005c64:	2300      	movs	r3, #0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d036      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f023 021e 	bic.w	r2, r3, #30
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0216 	orr.w	r2, r2, #22
 8005c7c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d03e      	beq.n	8005d04 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0208 	orr.w	r2, r2, #8
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e035      	b.n	8005d04 <HAL_DMA_Start_IT+0x260>
 8005c98:	40020010 	.word	0x40020010
 8005c9c:	40020028 	.word	0x40020028
 8005ca0:	40020040 	.word	0x40020040
 8005ca4:	40020058 	.word	0x40020058
 8005ca8:	40020070 	.word	0x40020070
 8005cac:	40020088 	.word	0x40020088
 8005cb0:	400200a0 	.word	0x400200a0
 8005cb4:	400200b8 	.word	0x400200b8
 8005cb8:	40020410 	.word	0x40020410
 8005cbc:	40020428 	.word	0x40020428
 8005cc0:	40020440 	.word	0x40020440
 8005cc4:	40020458 	.word	0x40020458
 8005cc8:	40020470 	.word	0x40020470
 8005ccc:	40020488 	.word	0x40020488
 8005cd0:	400204a0 	.word	0x400204a0
 8005cd4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f023 020e 	bic.w	r2, r3, #14
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 020a 	orr.w	r2, r2, #10
 8005cea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0204 	orr.w	r2, r2, #4
 8005d02:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a83      	ldr	r2, [pc, #524]	; (8005f18 <HAL_DMA_Start_IT+0x474>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d072      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a82      	ldr	r2, [pc, #520]	; (8005f1c <HAL_DMA_Start_IT+0x478>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d06d      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a80      	ldr	r2, [pc, #512]	; (8005f20 <HAL_DMA_Start_IT+0x47c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d068      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a7f      	ldr	r2, [pc, #508]	; (8005f24 <HAL_DMA_Start_IT+0x480>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d063      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a7d      	ldr	r2, [pc, #500]	; (8005f28 <HAL_DMA_Start_IT+0x484>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d05e      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a7c      	ldr	r2, [pc, #496]	; (8005f2c <HAL_DMA_Start_IT+0x488>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d059      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a7a      	ldr	r2, [pc, #488]	; (8005f30 <HAL_DMA_Start_IT+0x48c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d054      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a79      	ldr	r2, [pc, #484]	; (8005f34 <HAL_DMA_Start_IT+0x490>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d04f      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a77      	ldr	r2, [pc, #476]	; (8005f38 <HAL_DMA_Start_IT+0x494>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d04a      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a76      	ldr	r2, [pc, #472]	; (8005f3c <HAL_DMA_Start_IT+0x498>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d045      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a74      	ldr	r2, [pc, #464]	; (8005f40 <HAL_DMA_Start_IT+0x49c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d040      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a73      	ldr	r2, [pc, #460]	; (8005f44 <HAL_DMA_Start_IT+0x4a0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d03b      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a71      	ldr	r2, [pc, #452]	; (8005f48 <HAL_DMA_Start_IT+0x4a4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d036      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a70      	ldr	r2, [pc, #448]	; (8005f4c <HAL_DMA_Start_IT+0x4a8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d031      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a6e      	ldr	r2, [pc, #440]	; (8005f50 <HAL_DMA_Start_IT+0x4ac>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d02c      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a6d      	ldr	r2, [pc, #436]	; (8005f54 <HAL_DMA_Start_IT+0x4b0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d027      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a6b      	ldr	r2, [pc, #428]	; (8005f58 <HAL_DMA_Start_IT+0x4b4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d022      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6a      	ldr	r2, [pc, #424]	; (8005f5c <HAL_DMA_Start_IT+0x4b8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d01d      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a68      	ldr	r2, [pc, #416]	; (8005f60 <HAL_DMA_Start_IT+0x4bc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d018      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a67      	ldr	r2, [pc, #412]	; (8005f64 <HAL_DMA_Start_IT+0x4c0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a65      	ldr	r2, [pc, #404]	; (8005f68 <HAL_DMA_Start_IT+0x4c4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00e      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a64      	ldr	r2, [pc, #400]	; (8005f6c <HAL_DMA_Start_IT+0x4c8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d009      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a62      	ldr	r2, [pc, #392]	; (8005f70 <HAL_DMA_Start_IT+0x4cc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_DMA_Start_IT+0x350>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a61      	ldr	r2, [pc, #388]	; (8005f74 <HAL_DMA_Start_IT+0x4d0>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d101      	bne.n	8005df8 <HAL_DMA_Start_IT+0x354>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_DMA_Start_IT+0x356>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01a      	beq.n	8005e34 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d007      	beq.n	8005e1c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e1a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e32:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a37      	ldr	r2, [pc, #220]	; (8005f18 <HAL_DMA_Start_IT+0x474>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d04a      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a36      	ldr	r2, [pc, #216]	; (8005f1c <HAL_DMA_Start_IT+0x478>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d045      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a34      	ldr	r2, [pc, #208]	; (8005f20 <HAL_DMA_Start_IT+0x47c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d040      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a33      	ldr	r2, [pc, #204]	; (8005f24 <HAL_DMA_Start_IT+0x480>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d03b      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a31      	ldr	r2, [pc, #196]	; (8005f28 <HAL_DMA_Start_IT+0x484>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d036      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a30      	ldr	r2, [pc, #192]	; (8005f2c <HAL_DMA_Start_IT+0x488>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d031      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a2e      	ldr	r2, [pc, #184]	; (8005f30 <HAL_DMA_Start_IT+0x48c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d02c      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2d      	ldr	r2, [pc, #180]	; (8005f34 <HAL_DMA_Start_IT+0x490>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d027      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a2b      	ldr	r2, [pc, #172]	; (8005f38 <HAL_DMA_Start_IT+0x494>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d022      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a2a      	ldr	r2, [pc, #168]	; (8005f3c <HAL_DMA_Start_IT+0x498>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d01d      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a28      	ldr	r2, [pc, #160]	; (8005f40 <HAL_DMA_Start_IT+0x49c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d018      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a27      	ldr	r2, [pc, #156]	; (8005f44 <HAL_DMA_Start_IT+0x4a0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d013      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a25      	ldr	r2, [pc, #148]	; (8005f48 <HAL_DMA_Start_IT+0x4a4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00e      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a24      	ldr	r2, [pc, #144]	; (8005f4c <HAL_DMA_Start_IT+0x4a8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d009      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <HAL_DMA_Start_IT+0x4ac>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d004      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x430>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a21      	ldr	r2, [pc, #132]	; (8005f54 <HAL_DMA_Start_IT+0x4b0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d108      	bne.n	8005ee6 <HAL_DMA_Start_IT+0x442>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e012      	b.n	8005f0c <HAL_DMA_Start_IT+0x468>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0201 	orr.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e009      	b.n	8005f0c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40020010 	.word	0x40020010
 8005f1c:	40020028 	.word	0x40020028
 8005f20:	40020040 	.word	0x40020040
 8005f24:	40020058 	.word	0x40020058
 8005f28:	40020070 	.word	0x40020070
 8005f2c:	40020088 	.word	0x40020088
 8005f30:	400200a0 	.word	0x400200a0
 8005f34:	400200b8 	.word	0x400200b8
 8005f38:	40020410 	.word	0x40020410
 8005f3c:	40020428 	.word	0x40020428
 8005f40:	40020440 	.word	0x40020440
 8005f44:	40020458 	.word	0x40020458
 8005f48:	40020470 	.word	0x40020470
 8005f4c:	40020488 	.word	0x40020488
 8005f50:	400204a0 	.word	0x400204a0
 8005f54:	400204b8 	.word	0x400204b8
 8005f58:	58025408 	.word	0x58025408
 8005f5c:	5802541c 	.word	0x5802541c
 8005f60:	58025430 	.word	0x58025430
 8005f64:	58025444 	.word	0x58025444
 8005f68:	58025458 	.word	0x58025458
 8005f6c:	5802546c 	.word	0x5802546c
 8005f70:	58025480 	.word	0x58025480
 8005f74:	58025494 	.word	0x58025494

08005f78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005f80:	f7fd f90c 	bl	800319c <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e2dc      	b.n	800654a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d008      	beq.n	8005fae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e2cd      	b.n	800654a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a76      	ldr	r2, [pc, #472]	; (800618c <HAL_DMA_Abort+0x214>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d04a      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a74      	ldr	r2, [pc, #464]	; (8006190 <HAL_DMA_Abort+0x218>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d045      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a73      	ldr	r2, [pc, #460]	; (8006194 <HAL_DMA_Abort+0x21c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d040      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a71      	ldr	r2, [pc, #452]	; (8006198 <HAL_DMA_Abort+0x220>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d03b      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a70      	ldr	r2, [pc, #448]	; (800619c <HAL_DMA_Abort+0x224>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d036      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a6e      	ldr	r2, [pc, #440]	; (80061a0 <HAL_DMA_Abort+0x228>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d031      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a6d      	ldr	r2, [pc, #436]	; (80061a4 <HAL_DMA_Abort+0x22c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d02c      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a6b      	ldr	r2, [pc, #428]	; (80061a8 <HAL_DMA_Abort+0x230>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d027      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a6a      	ldr	r2, [pc, #424]	; (80061ac <HAL_DMA_Abort+0x234>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d022      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a68      	ldr	r2, [pc, #416]	; (80061b0 <HAL_DMA_Abort+0x238>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01d      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a67      	ldr	r2, [pc, #412]	; (80061b4 <HAL_DMA_Abort+0x23c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d018      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a65      	ldr	r2, [pc, #404]	; (80061b8 <HAL_DMA_Abort+0x240>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a64      	ldr	r2, [pc, #400]	; (80061bc <HAL_DMA_Abort+0x244>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00e      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a62      	ldr	r2, [pc, #392]	; (80061c0 <HAL_DMA_Abort+0x248>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d009      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a61      	ldr	r2, [pc, #388]	; (80061c4 <HAL_DMA_Abort+0x24c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d004      	beq.n	800604e <HAL_DMA_Abort+0xd6>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a5f      	ldr	r2, [pc, #380]	; (80061c8 <HAL_DMA_Abort+0x250>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d101      	bne.n	8006052 <HAL_DMA_Abort+0xda>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <HAL_DMA_Abort+0xdc>
 8006052:	2300      	movs	r3, #0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d013      	beq.n	8006080 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 021e 	bic.w	r2, r2, #30
 8006066:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006076:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e00a      	b.n	8006096 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 020e 	bic.w	r2, r2, #14
 800608e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a3c      	ldr	r2, [pc, #240]	; (800618c <HAL_DMA_Abort+0x214>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d072      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a3a      	ldr	r2, [pc, #232]	; (8006190 <HAL_DMA_Abort+0x218>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d06d      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a39      	ldr	r2, [pc, #228]	; (8006194 <HAL_DMA_Abort+0x21c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d068      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a37      	ldr	r2, [pc, #220]	; (8006198 <HAL_DMA_Abort+0x220>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d063      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a36      	ldr	r2, [pc, #216]	; (800619c <HAL_DMA_Abort+0x224>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d05e      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a34      	ldr	r2, [pc, #208]	; (80061a0 <HAL_DMA_Abort+0x228>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d059      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a33      	ldr	r2, [pc, #204]	; (80061a4 <HAL_DMA_Abort+0x22c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d054      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a31      	ldr	r2, [pc, #196]	; (80061a8 <HAL_DMA_Abort+0x230>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d04f      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a30      	ldr	r2, [pc, #192]	; (80061ac <HAL_DMA_Abort+0x234>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d04a      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2e      	ldr	r2, [pc, #184]	; (80061b0 <HAL_DMA_Abort+0x238>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d045      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <HAL_DMA_Abort+0x23c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d040      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2b      	ldr	r2, [pc, #172]	; (80061b8 <HAL_DMA_Abort+0x240>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d03b      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2a      	ldr	r2, [pc, #168]	; (80061bc <HAL_DMA_Abort+0x244>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d036      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a28      	ldr	r2, [pc, #160]	; (80061c0 <HAL_DMA_Abort+0x248>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d031      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a27      	ldr	r2, [pc, #156]	; (80061c4 <HAL_DMA_Abort+0x24c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d02c      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a25      	ldr	r2, [pc, #148]	; (80061c8 <HAL_DMA_Abort+0x250>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d027      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a24      	ldr	r2, [pc, #144]	; (80061cc <HAL_DMA_Abort+0x254>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d022      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <HAL_DMA_Abort+0x258>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01d      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a21      	ldr	r2, [pc, #132]	; (80061d4 <HAL_DMA_Abort+0x25c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d018      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1f      	ldr	r2, [pc, #124]	; (80061d8 <HAL_DMA_Abort+0x260>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1e      	ldr	r2, [pc, #120]	; (80061dc <HAL_DMA_Abort+0x264>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1c      	ldr	r2, [pc, #112]	; (80061e0 <HAL_DMA_Abort+0x268>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1b      	ldr	r2, [pc, #108]	; (80061e4 <HAL_DMA_Abort+0x26c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_DMA_Abort+0x20e>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a19      	ldr	r2, [pc, #100]	; (80061e8 <HAL_DMA_Abort+0x270>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d132      	bne.n	80061ec <HAL_DMA_Abort+0x274>
 8006186:	2301      	movs	r3, #1
 8006188:	e031      	b.n	80061ee <HAL_DMA_Abort+0x276>
 800618a:	bf00      	nop
 800618c:	40020010 	.word	0x40020010
 8006190:	40020028 	.word	0x40020028
 8006194:	40020040 	.word	0x40020040
 8006198:	40020058 	.word	0x40020058
 800619c:	40020070 	.word	0x40020070
 80061a0:	40020088 	.word	0x40020088
 80061a4:	400200a0 	.word	0x400200a0
 80061a8:	400200b8 	.word	0x400200b8
 80061ac:	40020410 	.word	0x40020410
 80061b0:	40020428 	.word	0x40020428
 80061b4:	40020440 	.word	0x40020440
 80061b8:	40020458 	.word	0x40020458
 80061bc:	40020470 	.word	0x40020470
 80061c0:	40020488 	.word	0x40020488
 80061c4:	400204a0 	.word	0x400204a0
 80061c8:	400204b8 	.word	0x400204b8
 80061cc:	58025408 	.word	0x58025408
 80061d0:	5802541c 	.word	0x5802541c
 80061d4:	58025430 	.word	0x58025430
 80061d8:	58025444 	.word	0x58025444
 80061dc:	58025458 	.word	0x58025458
 80061e0:	5802546c 	.word	0x5802546c
 80061e4:	58025480 	.word	0x58025480
 80061e8:	58025494 	.word	0x58025494
 80061ec:	2300      	movs	r3, #0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006200:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a6d      	ldr	r2, [pc, #436]	; (80063bc <HAL_DMA_Abort+0x444>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d04a      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a6b      	ldr	r2, [pc, #428]	; (80063c0 <HAL_DMA_Abort+0x448>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d045      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a6a      	ldr	r2, [pc, #424]	; (80063c4 <HAL_DMA_Abort+0x44c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d040      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a68      	ldr	r2, [pc, #416]	; (80063c8 <HAL_DMA_Abort+0x450>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d03b      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a67      	ldr	r2, [pc, #412]	; (80063cc <HAL_DMA_Abort+0x454>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d036      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a65      	ldr	r2, [pc, #404]	; (80063d0 <HAL_DMA_Abort+0x458>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d031      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a64      	ldr	r2, [pc, #400]	; (80063d4 <HAL_DMA_Abort+0x45c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d02c      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a62      	ldr	r2, [pc, #392]	; (80063d8 <HAL_DMA_Abort+0x460>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d027      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a61      	ldr	r2, [pc, #388]	; (80063dc <HAL_DMA_Abort+0x464>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a5f      	ldr	r2, [pc, #380]	; (80063e0 <HAL_DMA_Abort+0x468>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01d      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a5e      	ldr	r2, [pc, #376]	; (80063e4 <HAL_DMA_Abort+0x46c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a5c      	ldr	r2, [pc, #368]	; (80063e8 <HAL_DMA_Abort+0x470>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a5b      	ldr	r2, [pc, #364]	; (80063ec <HAL_DMA_Abort+0x474>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a59      	ldr	r2, [pc, #356]	; (80063f0 <HAL_DMA_Abort+0x478>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a58      	ldr	r2, [pc, #352]	; (80063f4 <HAL_DMA_Abort+0x47c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_DMA_Abort+0x32a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a56      	ldr	r2, [pc, #344]	; (80063f8 <HAL_DMA_Abort+0x480>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d108      	bne.n	80062b4 <HAL_DMA_Abort+0x33c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e007      	b.n	80062c4 <HAL_DMA_Abort+0x34c>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80062c4:	e013      	b.n	80062ee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062c6:	f7fc ff69 	bl	800319c <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b05      	cmp	r3, #5
 80062d2:	d90c      	bls.n	80062ee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2203      	movs	r2, #3
 80062de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e12d      	b.n	800654a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e5      	bne.n	80062c6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a2f      	ldr	r2, [pc, #188]	; (80063bc <HAL_DMA_Abort+0x444>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d04a      	beq.n	800639a <HAL_DMA_Abort+0x422>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2d      	ldr	r2, [pc, #180]	; (80063c0 <HAL_DMA_Abort+0x448>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d045      	beq.n	800639a <HAL_DMA_Abort+0x422>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a2c      	ldr	r2, [pc, #176]	; (80063c4 <HAL_DMA_Abort+0x44c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d040      	beq.n	800639a <HAL_DMA_Abort+0x422>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2a      	ldr	r2, [pc, #168]	; (80063c8 <HAL_DMA_Abort+0x450>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d03b      	beq.n	800639a <HAL_DMA_Abort+0x422>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a29      	ldr	r2, [pc, #164]	; (80063cc <HAL_DMA_Abort+0x454>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d036      	beq.n	800639a <HAL_DMA_Abort+0x422>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a27      	ldr	r2, [pc, #156]	; (80063d0 <HAL_DMA_Abort+0x458>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d031      	beq.n	800639a <HAL_DMA_Abort+0x422>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a26      	ldr	r2, [pc, #152]	; (80063d4 <HAL_DMA_Abort+0x45c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d02c      	beq.n	800639a <HAL_DMA_Abort+0x422>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a24      	ldr	r2, [pc, #144]	; (80063d8 <HAL_DMA_Abort+0x460>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d027      	beq.n	800639a <HAL_DMA_Abort+0x422>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a23      	ldr	r2, [pc, #140]	; (80063dc <HAL_DMA_Abort+0x464>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d022      	beq.n	800639a <HAL_DMA_Abort+0x422>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a21      	ldr	r2, [pc, #132]	; (80063e0 <HAL_DMA_Abort+0x468>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01d      	beq.n	800639a <HAL_DMA_Abort+0x422>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a20      	ldr	r2, [pc, #128]	; (80063e4 <HAL_DMA_Abort+0x46c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d018      	beq.n	800639a <HAL_DMA_Abort+0x422>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a1e      	ldr	r2, [pc, #120]	; (80063e8 <HAL_DMA_Abort+0x470>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_DMA_Abort+0x422>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a1d      	ldr	r2, [pc, #116]	; (80063ec <HAL_DMA_Abort+0x474>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_DMA_Abort+0x422>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1b      	ldr	r2, [pc, #108]	; (80063f0 <HAL_DMA_Abort+0x478>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_DMA_Abort+0x422>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <HAL_DMA_Abort+0x47c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_DMA_Abort+0x422>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <HAL_DMA_Abort+0x480>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d101      	bne.n	800639e <HAL_DMA_Abort+0x426>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <HAL_DMA_Abort+0x428>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d02b      	beq.n	80063fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	223f      	movs	r2, #63	; 0x3f
 80063b4:	409a      	lsls	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	609a      	str	r2, [r3, #8]
 80063ba:	e02a      	b.n	8006412 <HAL_DMA_Abort+0x49a>
 80063bc:	40020010 	.word	0x40020010
 80063c0:	40020028 	.word	0x40020028
 80063c4:	40020040 	.word	0x40020040
 80063c8:	40020058 	.word	0x40020058
 80063cc:	40020070 	.word	0x40020070
 80063d0:	40020088 	.word	0x40020088
 80063d4:	400200a0 	.word	0x400200a0
 80063d8:	400200b8 	.word	0x400200b8
 80063dc:	40020410 	.word	0x40020410
 80063e0:	40020428 	.word	0x40020428
 80063e4:	40020440 	.word	0x40020440
 80063e8:	40020458 	.word	0x40020458
 80063ec:	40020470 	.word	0x40020470
 80063f0:	40020488 	.word	0x40020488
 80063f4:	400204a0 	.word	0x400204a0
 80063f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	2201      	movs	r2, #1
 800640c:	409a      	lsls	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a4f      	ldr	r2, [pc, #316]	; (8006554 <HAL_DMA_Abort+0x5dc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d072      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a4d      	ldr	r2, [pc, #308]	; (8006558 <HAL_DMA_Abort+0x5e0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d06d      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a4c      	ldr	r2, [pc, #304]	; (800655c <HAL_DMA_Abort+0x5e4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d068      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a4a      	ldr	r2, [pc, #296]	; (8006560 <HAL_DMA_Abort+0x5e8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d063      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a49      	ldr	r2, [pc, #292]	; (8006564 <HAL_DMA_Abort+0x5ec>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d05e      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a47      	ldr	r2, [pc, #284]	; (8006568 <HAL_DMA_Abort+0x5f0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d059      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a46      	ldr	r2, [pc, #280]	; (800656c <HAL_DMA_Abort+0x5f4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d054      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a44      	ldr	r2, [pc, #272]	; (8006570 <HAL_DMA_Abort+0x5f8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d04f      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a43      	ldr	r2, [pc, #268]	; (8006574 <HAL_DMA_Abort+0x5fc>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d04a      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a41      	ldr	r2, [pc, #260]	; (8006578 <HAL_DMA_Abort+0x600>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d045      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a40      	ldr	r2, [pc, #256]	; (800657c <HAL_DMA_Abort+0x604>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d040      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a3e      	ldr	r2, [pc, #248]	; (8006580 <HAL_DMA_Abort+0x608>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d03b      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a3d      	ldr	r2, [pc, #244]	; (8006584 <HAL_DMA_Abort+0x60c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d036      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a3b      	ldr	r2, [pc, #236]	; (8006588 <HAL_DMA_Abort+0x610>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d031      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a3a      	ldr	r2, [pc, #232]	; (800658c <HAL_DMA_Abort+0x614>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d02c      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a38      	ldr	r2, [pc, #224]	; (8006590 <HAL_DMA_Abort+0x618>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d027      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a37      	ldr	r2, [pc, #220]	; (8006594 <HAL_DMA_Abort+0x61c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d022      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a35      	ldr	r2, [pc, #212]	; (8006598 <HAL_DMA_Abort+0x620>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01d      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a34      	ldr	r2, [pc, #208]	; (800659c <HAL_DMA_Abort+0x624>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d018      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a32      	ldr	r2, [pc, #200]	; (80065a0 <HAL_DMA_Abort+0x628>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a31      	ldr	r2, [pc, #196]	; (80065a4 <HAL_DMA_Abort+0x62c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00e      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <HAL_DMA_Abort+0x630>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2e      	ldr	r2, [pc, #184]	; (80065ac <HAL_DMA_Abort+0x634>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d004      	beq.n	8006502 <HAL_DMA_Abort+0x58a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2c      	ldr	r2, [pc, #176]	; (80065b0 <HAL_DMA_Abort+0x638>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d101      	bne.n	8006506 <HAL_DMA_Abort+0x58e>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <HAL_DMA_Abort+0x590>
 8006506:	2300      	movs	r3, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d015      	beq.n	8006538 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006514:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00c      	beq.n	8006538 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800652c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006536:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40020010 	.word	0x40020010
 8006558:	40020028 	.word	0x40020028
 800655c:	40020040 	.word	0x40020040
 8006560:	40020058 	.word	0x40020058
 8006564:	40020070 	.word	0x40020070
 8006568:	40020088 	.word	0x40020088
 800656c:	400200a0 	.word	0x400200a0
 8006570:	400200b8 	.word	0x400200b8
 8006574:	40020410 	.word	0x40020410
 8006578:	40020428 	.word	0x40020428
 800657c:	40020440 	.word	0x40020440
 8006580:	40020458 	.word	0x40020458
 8006584:	40020470 	.word	0x40020470
 8006588:	40020488 	.word	0x40020488
 800658c:	400204a0 	.word	0x400204a0
 8006590:	400204b8 	.word	0x400204b8
 8006594:	58025408 	.word	0x58025408
 8006598:	5802541c 	.word	0x5802541c
 800659c:	58025430 	.word	0x58025430
 80065a0:	58025444 	.word	0x58025444
 80065a4:	58025458 	.word	0x58025458
 80065a8:	5802546c 	.word	0x5802546c
 80065ac:	58025480 	.word	0x58025480
 80065b0:	58025494 	.word	0x58025494

080065b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e237      	b.n	8006a36 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d004      	beq.n	80065dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2280      	movs	r2, #128	; 0x80
 80065d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e22c      	b.n	8006a36 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a5c      	ldr	r2, [pc, #368]	; (8006754 <HAL_DMA_Abort_IT+0x1a0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d04a      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a5b      	ldr	r2, [pc, #364]	; (8006758 <HAL_DMA_Abort_IT+0x1a4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d045      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a59      	ldr	r2, [pc, #356]	; (800675c <HAL_DMA_Abort_IT+0x1a8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d040      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a58      	ldr	r2, [pc, #352]	; (8006760 <HAL_DMA_Abort_IT+0x1ac>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d03b      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a56      	ldr	r2, [pc, #344]	; (8006764 <HAL_DMA_Abort_IT+0x1b0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d036      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a55      	ldr	r2, [pc, #340]	; (8006768 <HAL_DMA_Abort_IT+0x1b4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d031      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a53      	ldr	r2, [pc, #332]	; (800676c <HAL_DMA_Abort_IT+0x1b8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d02c      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a52      	ldr	r2, [pc, #328]	; (8006770 <HAL_DMA_Abort_IT+0x1bc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d027      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a50      	ldr	r2, [pc, #320]	; (8006774 <HAL_DMA_Abort_IT+0x1c0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d022      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a4f      	ldr	r2, [pc, #316]	; (8006778 <HAL_DMA_Abort_IT+0x1c4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d01d      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a4d      	ldr	r2, [pc, #308]	; (800677c <HAL_DMA_Abort_IT+0x1c8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d018      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a4c      	ldr	r2, [pc, #304]	; (8006780 <HAL_DMA_Abort_IT+0x1cc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d013      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a4a      	ldr	r2, [pc, #296]	; (8006784 <HAL_DMA_Abort_IT+0x1d0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00e      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a49      	ldr	r2, [pc, #292]	; (8006788 <HAL_DMA_Abort_IT+0x1d4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d009      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a47      	ldr	r2, [pc, #284]	; (800678c <HAL_DMA_Abort_IT+0x1d8>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <HAL_DMA_Abort_IT+0xc8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a46      	ldr	r2, [pc, #280]	; (8006790 <HAL_DMA_Abort_IT+0x1dc>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d101      	bne.n	8006680 <HAL_DMA_Abort_IT+0xcc>
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <HAL_DMA_Abort_IT+0xce>
 8006680:	2300      	movs	r3, #0
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 8086 	beq.w	8006794 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2204      	movs	r2, #4
 800668c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a2f      	ldr	r2, [pc, #188]	; (8006754 <HAL_DMA_Abort_IT+0x1a0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d04a      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2e      	ldr	r2, [pc, #184]	; (8006758 <HAL_DMA_Abort_IT+0x1a4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d045      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2c      	ldr	r2, [pc, #176]	; (800675c <HAL_DMA_Abort_IT+0x1a8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d040      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2b      	ldr	r2, [pc, #172]	; (8006760 <HAL_DMA_Abort_IT+0x1ac>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d03b      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a29      	ldr	r2, [pc, #164]	; (8006764 <HAL_DMA_Abort_IT+0x1b0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d036      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a28      	ldr	r2, [pc, #160]	; (8006768 <HAL_DMA_Abort_IT+0x1b4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d031      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a26      	ldr	r2, [pc, #152]	; (800676c <HAL_DMA_Abort_IT+0x1b8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d02c      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a25      	ldr	r2, [pc, #148]	; (8006770 <HAL_DMA_Abort_IT+0x1bc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d027      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a23      	ldr	r2, [pc, #140]	; (8006774 <HAL_DMA_Abort_IT+0x1c0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d022      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a22      	ldr	r2, [pc, #136]	; (8006778 <HAL_DMA_Abort_IT+0x1c4>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d01d      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a20      	ldr	r2, [pc, #128]	; (800677c <HAL_DMA_Abort_IT+0x1c8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d018      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1f      	ldr	r2, [pc, #124]	; (8006780 <HAL_DMA_Abort_IT+0x1cc>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d013      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <HAL_DMA_Abort_IT+0x1d0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00e      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <HAL_DMA_Abort_IT+0x1d4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d009      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1a      	ldr	r2, [pc, #104]	; (800678c <HAL_DMA_Abort_IT+0x1d8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <HAL_DMA_Abort_IT+0x17c>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a19      	ldr	r2, [pc, #100]	; (8006790 <HAL_DMA_Abort_IT+0x1dc>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d108      	bne.n	8006742 <HAL_DMA_Abort_IT+0x18e>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0201 	bic.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	e178      	b.n	8006a34 <HAL_DMA_Abort_IT+0x480>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0201 	bic.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	e16f      	b.n	8006a34 <HAL_DMA_Abort_IT+0x480>
 8006754:	40020010 	.word	0x40020010
 8006758:	40020028 	.word	0x40020028
 800675c:	40020040 	.word	0x40020040
 8006760:	40020058 	.word	0x40020058
 8006764:	40020070 	.word	0x40020070
 8006768:	40020088 	.word	0x40020088
 800676c:	400200a0 	.word	0x400200a0
 8006770:	400200b8 	.word	0x400200b8
 8006774:	40020410 	.word	0x40020410
 8006778:	40020428 	.word	0x40020428
 800677c:	40020440 	.word	0x40020440
 8006780:	40020458 	.word	0x40020458
 8006784:	40020470 	.word	0x40020470
 8006788:	40020488 	.word	0x40020488
 800678c:	400204a0 	.word	0x400204a0
 8006790:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 020e 	bic.w	r2, r2, #14
 80067a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a6c      	ldr	r2, [pc, #432]	; (800695c <HAL_DMA_Abort_IT+0x3a8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d04a      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a6b      	ldr	r2, [pc, #428]	; (8006960 <HAL_DMA_Abort_IT+0x3ac>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d045      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a69      	ldr	r2, [pc, #420]	; (8006964 <HAL_DMA_Abort_IT+0x3b0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d040      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a68      	ldr	r2, [pc, #416]	; (8006968 <HAL_DMA_Abort_IT+0x3b4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d03b      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a66      	ldr	r2, [pc, #408]	; (800696c <HAL_DMA_Abort_IT+0x3b8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d036      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a65      	ldr	r2, [pc, #404]	; (8006970 <HAL_DMA_Abort_IT+0x3bc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d031      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a63      	ldr	r2, [pc, #396]	; (8006974 <HAL_DMA_Abort_IT+0x3c0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d02c      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a62      	ldr	r2, [pc, #392]	; (8006978 <HAL_DMA_Abort_IT+0x3c4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d027      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a60      	ldr	r2, [pc, #384]	; (800697c <HAL_DMA_Abort_IT+0x3c8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d022      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a5f      	ldr	r2, [pc, #380]	; (8006980 <HAL_DMA_Abort_IT+0x3cc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d01d      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a5d      	ldr	r2, [pc, #372]	; (8006984 <HAL_DMA_Abort_IT+0x3d0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d018      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a5c      	ldr	r2, [pc, #368]	; (8006988 <HAL_DMA_Abort_IT+0x3d4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d013      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a5a      	ldr	r2, [pc, #360]	; (800698c <HAL_DMA_Abort_IT+0x3d8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00e      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a59      	ldr	r2, [pc, #356]	; (8006990 <HAL_DMA_Abort_IT+0x3dc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d009      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a57      	ldr	r2, [pc, #348]	; (8006994 <HAL_DMA_Abort_IT+0x3e0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <HAL_DMA_Abort_IT+0x290>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a56      	ldr	r2, [pc, #344]	; (8006998 <HAL_DMA_Abort_IT+0x3e4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d108      	bne.n	8006856 <HAL_DMA_Abort_IT+0x2a2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0201 	bic.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e007      	b.n	8006866 <HAL_DMA_Abort_IT+0x2b2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a3c      	ldr	r2, [pc, #240]	; (800695c <HAL_DMA_Abort_IT+0x3a8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d072      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a3a      	ldr	r2, [pc, #232]	; (8006960 <HAL_DMA_Abort_IT+0x3ac>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d06d      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a39      	ldr	r2, [pc, #228]	; (8006964 <HAL_DMA_Abort_IT+0x3b0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d068      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a37      	ldr	r2, [pc, #220]	; (8006968 <HAL_DMA_Abort_IT+0x3b4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d063      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a36      	ldr	r2, [pc, #216]	; (800696c <HAL_DMA_Abort_IT+0x3b8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d05e      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a34      	ldr	r2, [pc, #208]	; (8006970 <HAL_DMA_Abort_IT+0x3bc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d059      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a33      	ldr	r2, [pc, #204]	; (8006974 <HAL_DMA_Abort_IT+0x3c0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d054      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a31      	ldr	r2, [pc, #196]	; (8006978 <HAL_DMA_Abort_IT+0x3c4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d04f      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a30      	ldr	r2, [pc, #192]	; (800697c <HAL_DMA_Abort_IT+0x3c8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d04a      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a2e      	ldr	r2, [pc, #184]	; (8006980 <HAL_DMA_Abort_IT+0x3cc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d045      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <HAL_DMA_Abort_IT+0x3d0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d040      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a2b      	ldr	r2, [pc, #172]	; (8006988 <HAL_DMA_Abort_IT+0x3d4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d03b      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a2a      	ldr	r2, [pc, #168]	; (800698c <HAL_DMA_Abort_IT+0x3d8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d036      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a28      	ldr	r2, [pc, #160]	; (8006990 <HAL_DMA_Abort_IT+0x3dc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d031      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a27      	ldr	r2, [pc, #156]	; (8006994 <HAL_DMA_Abort_IT+0x3e0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d02c      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a25      	ldr	r2, [pc, #148]	; (8006998 <HAL_DMA_Abort_IT+0x3e4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d027      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a24      	ldr	r2, [pc, #144]	; (800699c <HAL_DMA_Abort_IT+0x3e8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d022      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a22      	ldr	r2, [pc, #136]	; (80069a0 <HAL_DMA_Abort_IT+0x3ec>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d01d      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a21      	ldr	r2, [pc, #132]	; (80069a4 <HAL_DMA_Abort_IT+0x3f0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d018      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a1f      	ldr	r2, [pc, #124]	; (80069a8 <HAL_DMA_Abort_IT+0x3f4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1e      	ldr	r2, [pc, #120]	; (80069ac <HAL_DMA_Abort_IT+0x3f8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00e      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a1c      	ldr	r2, [pc, #112]	; (80069b0 <HAL_DMA_Abort_IT+0x3fc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d009      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1b      	ldr	r2, [pc, #108]	; (80069b4 <HAL_DMA_Abort_IT+0x400>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d004      	beq.n	8006956 <HAL_DMA_Abort_IT+0x3a2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a19      	ldr	r2, [pc, #100]	; (80069b8 <HAL_DMA_Abort_IT+0x404>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d132      	bne.n	80069bc <HAL_DMA_Abort_IT+0x408>
 8006956:	2301      	movs	r3, #1
 8006958:	e031      	b.n	80069be <HAL_DMA_Abort_IT+0x40a>
 800695a:	bf00      	nop
 800695c:	40020010 	.word	0x40020010
 8006960:	40020028 	.word	0x40020028
 8006964:	40020040 	.word	0x40020040
 8006968:	40020058 	.word	0x40020058
 800696c:	40020070 	.word	0x40020070
 8006970:	40020088 	.word	0x40020088
 8006974:	400200a0 	.word	0x400200a0
 8006978:	400200b8 	.word	0x400200b8
 800697c:	40020410 	.word	0x40020410
 8006980:	40020428 	.word	0x40020428
 8006984:	40020440 	.word	0x40020440
 8006988:	40020458 	.word	0x40020458
 800698c:	40020470 	.word	0x40020470
 8006990:	40020488 	.word	0x40020488
 8006994:	400204a0 	.word	0x400204a0
 8006998:	400204b8 	.word	0x400204b8
 800699c:	58025408 	.word	0x58025408
 80069a0:	5802541c 	.word	0x5802541c
 80069a4:	58025430 	.word	0x58025430
 80069a8:	58025444 	.word	0x58025444
 80069ac:	58025458 	.word	0x58025458
 80069b0:	5802546c 	.word	0x5802546c
 80069b4:	58025480 	.word	0x58025480
 80069b8:	58025494 	.word	0x58025494
 80069bc:	2300      	movs	r3, #0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d028      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069dc:	f003 031f 	and.w	r3, r3, #31
 80069e0:	2201      	movs	r2, #1
 80069e2:	409a      	lsls	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80069f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop

08006a40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a4c:	4b67      	ldr	r3, [pc, #412]	; (8006bec <HAL_DMA_IRQHandler+0x1ac>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a67      	ldr	r2, [pc, #412]	; (8006bf0 <HAL_DMA_IRQHandler+0x1b0>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	0a9b      	lsrs	r3, r3, #10
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a64:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a5f      	ldr	r2, [pc, #380]	; (8006bf4 <HAL_DMA_IRQHandler+0x1b4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d04a      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a5d      	ldr	r2, [pc, #372]	; (8006bf8 <HAL_DMA_IRQHandler+0x1b8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d045      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a5c      	ldr	r2, [pc, #368]	; (8006bfc <HAL_DMA_IRQHandler+0x1bc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d040      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a5a      	ldr	r2, [pc, #360]	; (8006c00 <HAL_DMA_IRQHandler+0x1c0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d03b      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a59      	ldr	r2, [pc, #356]	; (8006c04 <HAL_DMA_IRQHandler+0x1c4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d036      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a57      	ldr	r2, [pc, #348]	; (8006c08 <HAL_DMA_IRQHandler+0x1c8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d031      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a56      	ldr	r2, [pc, #344]	; (8006c0c <HAL_DMA_IRQHandler+0x1cc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d02c      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a54      	ldr	r2, [pc, #336]	; (8006c10 <HAL_DMA_IRQHandler+0x1d0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d027      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a53      	ldr	r2, [pc, #332]	; (8006c14 <HAL_DMA_IRQHandler+0x1d4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d022      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a51      	ldr	r2, [pc, #324]	; (8006c18 <HAL_DMA_IRQHandler+0x1d8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d01d      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a50      	ldr	r2, [pc, #320]	; (8006c1c <HAL_DMA_IRQHandler+0x1dc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d018      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a4e      	ldr	r2, [pc, #312]	; (8006c20 <HAL_DMA_IRQHandler+0x1e0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d013      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a4d      	ldr	r2, [pc, #308]	; (8006c24 <HAL_DMA_IRQHandler+0x1e4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00e      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a4b      	ldr	r2, [pc, #300]	; (8006c28 <HAL_DMA_IRQHandler+0x1e8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d009      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a4a      	ldr	r2, [pc, #296]	; (8006c2c <HAL_DMA_IRQHandler+0x1ec>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d004      	beq.n	8006b12 <HAL_DMA_IRQHandler+0xd2>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a48      	ldr	r2, [pc, #288]	; (8006c30 <HAL_DMA_IRQHandler+0x1f0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d101      	bne.n	8006b16 <HAL_DMA_IRQHandler+0xd6>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <HAL_DMA_IRQHandler+0xd8>
 8006b16:	2300      	movs	r3, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 842b 	beq.w	8007374 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	2208      	movs	r2, #8
 8006b28:	409a      	lsls	r2, r3
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 80a2 	beq.w	8006c78 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a2e      	ldr	r2, [pc, #184]	; (8006bf4 <HAL_DMA_IRQHandler+0x1b4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d04a      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a2d      	ldr	r2, [pc, #180]	; (8006bf8 <HAL_DMA_IRQHandler+0x1b8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d045      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a2b      	ldr	r2, [pc, #172]	; (8006bfc <HAL_DMA_IRQHandler+0x1bc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d040      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2a      	ldr	r2, [pc, #168]	; (8006c00 <HAL_DMA_IRQHandler+0x1c0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d03b      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a28      	ldr	r2, [pc, #160]	; (8006c04 <HAL_DMA_IRQHandler+0x1c4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d036      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a27      	ldr	r2, [pc, #156]	; (8006c08 <HAL_DMA_IRQHandler+0x1c8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d031      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a25      	ldr	r2, [pc, #148]	; (8006c0c <HAL_DMA_IRQHandler+0x1cc>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d02c      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a24      	ldr	r2, [pc, #144]	; (8006c10 <HAL_DMA_IRQHandler+0x1d0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d027      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <HAL_DMA_IRQHandler+0x1d4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d022      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <HAL_DMA_IRQHandler+0x1d8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d01d      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a1f      	ldr	r2, [pc, #124]	; (8006c1c <HAL_DMA_IRQHandler+0x1dc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d018      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <HAL_DMA_IRQHandler+0x1e0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d013      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1c      	ldr	r2, [pc, #112]	; (8006c24 <HAL_DMA_IRQHandler+0x1e4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00e      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1b      	ldr	r2, [pc, #108]	; (8006c28 <HAL_DMA_IRQHandler+0x1e8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d009      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a19      	ldr	r2, [pc, #100]	; (8006c2c <HAL_DMA_IRQHandler+0x1ec>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d004      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x194>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <HAL_DMA_IRQHandler+0x1f0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d12f      	bne.n	8006c34 <HAL_DMA_IRQHandler+0x1f4>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bf14      	ite	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	2300      	moveq	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	e02e      	b.n	8006c48 <HAL_DMA_IRQHandler+0x208>
 8006bea:	bf00      	nop
 8006bec:	24000088 	.word	0x24000088
 8006bf0:	1b4e81b5 	.word	0x1b4e81b5
 8006bf4:	40020010 	.word	0x40020010
 8006bf8:	40020028 	.word	0x40020028
 8006bfc:	40020040 	.word	0x40020040
 8006c00:	40020058 	.word	0x40020058
 8006c04:	40020070 	.word	0x40020070
 8006c08:	40020088 	.word	0x40020088
 8006c0c:	400200a0 	.word	0x400200a0
 8006c10:	400200b8 	.word	0x400200b8
 8006c14:	40020410 	.word	0x40020410
 8006c18:	40020428 	.word	0x40020428
 8006c1c:	40020440 	.word	0x40020440
 8006c20:	40020458 	.word	0x40020458
 8006c24:	40020470 	.word	0x40020470
 8006c28:	40020488 	.word	0x40020488
 8006c2c:	400204a0 	.word	0x400204a0
 8006c30:	400204b8 	.word	0x400204b8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bf14      	ite	ne
 8006c42:	2301      	movne	r3, #1
 8006c44:	2300      	moveq	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d015      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 0204 	bic.w	r2, r2, #4
 8006c5a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	2208      	movs	r2, #8
 8006c66:	409a      	lsls	r2, r3
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c70:	f043 0201 	orr.w	r2, r3, #1
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	fa22 f303 	lsr.w	r3, r2, r3
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d06e      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a69      	ldr	r2, [pc, #420]	; (8006e38 <HAL_DMA_IRQHandler+0x3f8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d04a      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a67      	ldr	r2, [pc, #412]	; (8006e3c <HAL_DMA_IRQHandler+0x3fc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d045      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a66      	ldr	r2, [pc, #408]	; (8006e40 <HAL_DMA_IRQHandler+0x400>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d040      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a64      	ldr	r2, [pc, #400]	; (8006e44 <HAL_DMA_IRQHandler+0x404>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d03b      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a63      	ldr	r2, [pc, #396]	; (8006e48 <HAL_DMA_IRQHandler+0x408>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d036      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a61      	ldr	r2, [pc, #388]	; (8006e4c <HAL_DMA_IRQHandler+0x40c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d031      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a60      	ldr	r2, [pc, #384]	; (8006e50 <HAL_DMA_IRQHandler+0x410>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d02c      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a5e      	ldr	r2, [pc, #376]	; (8006e54 <HAL_DMA_IRQHandler+0x414>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d027      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a5d      	ldr	r2, [pc, #372]	; (8006e58 <HAL_DMA_IRQHandler+0x418>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a5b      	ldr	r2, [pc, #364]	; (8006e5c <HAL_DMA_IRQHandler+0x41c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01d      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a5a      	ldr	r2, [pc, #360]	; (8006e60 <HAL_DMA_IRQHandler+0x420>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a58      	ldr	r2, [pc, #352]	; (8006e64 <HAL_DMA_IRQHandler+0x424>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a57      	ldr	r2, [pc, #348]	; (8006e68 <HAL_DMA_IRQHandler+0x428>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a55      	ldr	r2, [pc, #340]	; (8006e6c <HAL_DMA_IRQHandler+0x42c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a54      	ldr	r2, [pc, #336]	; (8006e70 <HAL_DMA_IRQHandler+0x430>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_DMA_IRQHandler+0x2ee>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a52      	ldr	r2, [pc, #328]	; (8006e74 <HAL_DMA_IRQHandler+0x434>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d10a      	bne.n	8006d44 <HAL_DMA_IRQHandler+0x304>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	bf14      	ite	ne
 8006d3c:	2301      	movne	r3, #1
 8006d3e:	2300      	moveq	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	e003      	b.n	8006d4c <HAL_DMA_IRQHandler+0x30c>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00d      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2201      	movs	r2, #1
 8006d5a:	409a      	lsls	r2, r3
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d64:	f043 0202 	orr.w	r2, r3, #2
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	2204      	movs	r2, #4
 8006d76:	409a      	lsls	r2, r3
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 808f 	beq.w	8006ea0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a2c      	ldr	r2, [pc, #176]	; (8006e38 <HAL_DMA_IRQHandler+0x3f8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d04a      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a2a      	ldr	r2, [pc, #168]	; (8006e3c <HAL_DMA_IRQHandler+0x3fc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d045      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a29      	ldr	r2, [pc, #164]	; (8006e40 <HAL_DMA_IRQHandler+0x400>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d040      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a27      	ldr	r2, [pc, #156]	; (8006e44 <HAL_DMA_IRQHandler+0x404>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d03b      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a26      	ldr	r2, [pc, #152]	; (8006e48 <HAL_DMA_IRQHandler+0x408>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d036      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a24      	ldr	r2, [pc, #144]	; (8006e4c <HAL_DMA_IRQHandler+0x40c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d031      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a23      	ldr	r2, [pc, #140]	; (8006e50 <HAL_DMA_IRQHandler+0x410>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d02c      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a21      	ldr	r2, [pc, #132]	; (8006e54 <HAL_DMA_IRQHandler+0x414>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a20      	ldr	r2, [pc, #128]	; (8006e58 <HAL_DMA_IRQHandler+0x418>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a1e      	ldr	r2, [pc, #120]	; (8006e5c <HAL_DMA_IRQHandler+0x41c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01d      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a1d      	ldr	r2, [pc, #116]	; (8006e60 <HAL_DMA_IRQHandler+0x420>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <HAL_DMA_IRQHandler+0x424>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1a      	ldr	r2, [pc, #104]	; (8006e68 <HAL_DMA_IRQHandler+0x428>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <HAL_DMA_IRQHandler+0x42c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a17      	ldr	r2, [pc, #92]	; (8006e70 <HAL_DMA_IRQHandler+0x430>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_DMA_IRQHandler+0x3e2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <HAL_DMA_IRQHandler+0x434>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d12a      	bne.n	8006e78 <HAL_DMA_IRQHandler+0x438>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bf14      	ite	ne
 8006e30:	2301      	movne	r3, #1
 8006e32:	2300      	moveq	r3, #0
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	e023      	b.n	8006e80 <HAL_DMA_IRQHandler+0x440>
 8006e38:	40020010 	.word	0x40020010
 8006e3c:	40020028 	.word	0x40020028
 8006e40:	40020040 	.word	0x40020040
 8006e44:	40020058 	.word	0x40020058
 8006e48:	40020070 	.word	0x40020070
 8006e4c:	40020088 	.word	0x40020088
 8006e50:	400200a0 	.word	0x400200a0
 8006e54:	400200b8 	.word	0x400200b8
 8006e58:	40020410 	.word	0x40020410
 8006e5c:	40020428 	.word	0x40020428
 8006e60:	40020440 	.word	0x40020440
 8006e64:	40020458 	.word	0x40020458
 8006e68:	40020470 	.word	0x40020470
 8006e6c:	40020488 	.word	0x40020488
 8006e70:	400204a0 	.word	0x400204a0
 8006e74:	400204b8 	.word	0x400204b8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00d      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	f043 0204 	orr.w	r2, r3, #4
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea4:	f003 031f 	and.w	r3, r3, #31
 8006ea8:	2210      	movs	r2, #16
 8006eaa:	409a      	lsls	r2, r3
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80a6 	beq.w	8007002 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a85      	ldr	r2, [pc, #532]	; (80070d0 <HAL_DMA_IRQHandler+0x690>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d04a      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a83      	ldr	r2, [pc, #524]	; (80070d4 <HAL_DMA_IRQHandler+0x694>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d045      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a82      	ldr	r2, [pc, #520]	; (80070d8 <HAL_DMA_IRQHandler+0x698>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d040      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a80      	ldr	r2, [pc, #512]	; (80070dc <HAL_DMA_IRQHandler+0x69c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d03b      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a7f      	ldr	r2, [pc, #508]	; (80070e0 <HAL_DMA_IRQHandler+0x6a0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d036      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a7d      	ldr	r2, [pc, #500]	; (80070e4 <HAL_DMA_IRQHandler+0x6a4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d031      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a7c      	ldr	r2, [pc, #496]	; (80070e8 <HAL_DMA_IRQHandler+0x6a8>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d02c      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a7a      	ldr	r2, [pc, #488]	; (80070ec <HAL_DMA_IRQHandler+0x6ac>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d027      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a79      	ldr	r2, [pc, #484]	; (80070f0 <HAL_DMA_IRQHandler+0x6b0>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d022      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a77      	ldr	r2, [pc, #476]	; (80070f4 <HAL_DMA_IRQHandler+0x6b4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d01d      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a76      	ldr	r2, [pc, #472]	; (80070f8 <HAL_DMA_IRQHandler+0x6b8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d018      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a74      	ldr	r2, [pc, #464]	; (80070fc <HAL_DMA_IRQHandler+0x6bc>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d013      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a73      	ldr	r2, [pc, #460]	; (8007100 <HAL_DMA_IRQHandler+0x6c0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00e      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a71      	ldr	r2, [pc, #452]	; (8007104 <HAL_DMA_IRQHandler+0x6c4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d009      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a70      	ldr	r2, [pc, #448]	; (8007108 <HAL_DMA_IRQHandler+0x6c8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d004      	beq.n	8006f56 <HAL_DMA_IRQHandler+0x516>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a6e      	ldr	r2, [pc, #440]	; (800710c <HAL_DMA_IRQHandler+0x6cc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d10a      	bne.n	8006f6c <HAL_DMA_IRQHandler+0x52c>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	bf14      	ite	ne
 8006f64:	2301      	movne	r3, #1
 8006f66:	2300      	moveq	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e009      	b.n	8006f80 <HAL_DMA_IRQHandler+0x540>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0304 	and.w	r3, r3, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bf14      	ite	ne
 8006f7a:	2301      	movne	r3, #1
 8006f7c:	2300      	moveq	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d03e      	beq.n	8007002 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f88:	f003 031f 	and.w	r3, r3, #31
 8006f8c:	2210      	movs	r2, #16
 8006f8e:	409a      	lsls	r2, r3
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d018      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d108      	bne.n	8006fc2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d024      	beq.n	8007002 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
 8006fc0:	e01f      	b.n	8007002 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d01b      	beq.n	8007002 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
 8006fd2:	e016      	b.n	8007002 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d107      	bne.n	8006ff2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0208 	bic.w	r2, r2, #8
 8006ff0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2220      	movs	r2, #32
 800700c:	409a      	lsls	r2, r3
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	4013      	ands	r3, r2
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8110 	beq.w	8007238 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a2c      	ldr	r2, [pc, #176]	; (80070d0 <HAL_DMA_IRQHandler+0x690>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d04a      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a2b      	ldr	r2, [pc, #172]	; (80070d4 <HAL_DMA_IRQHandler+0x694>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d045      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a29      	ldr	r2, [pc, #164]	; (80070d8 <HAL_DMA_IRQHandler+0x698>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d040      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a28      	ldr	r2, [pc, #160]	; (80070dc <HAL_DMA_IRQHandler+0x69c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d03b      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a26      	ldr	r2, [pc, #152]	; (80070e0 <HAL_DMA_IRQHandler+0x6a0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d036      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a25      	ldr	r2, [pc, #148]	; (80070e4 <HAL_DMA_IRQHandler+0x6a4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d031      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a23      	ldr	r2, [pc, #140]	; (80070e8 <HAL_DMA_IRQHandler+0x6a8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d02c      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a22      	ldr	r2, [pc, #136]	; (80070ec <HAL_DMA_IRQHandler+0x6ac>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d027      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a20      	ldr	r2, [pc, #128]	; (80070f0 <HAL_DMA_IRQHandler+0x6b0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d022      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1f      	ldr	r2, [pc, #124]	; (80070f4 <HAL_DMA_IRQHandler+0x6b4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d01d      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1d      	ldr	r2, [pc, #116]	; (80070f8 <HAL_DMA_IRQHandler+0x6b8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d018      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a1c      	ldr	r2, [pc, #112]	; (80070fc <HAL_DMA_IRQHandler+0x6bc>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d013      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1a      	ldr	r2, [pc, #104]	; (8007100 <HAL_DMA_IRQHandler+0x6c0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00e      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a19      	ldr	r2, [pc, #100]	; (8007104 <HAL_DMA_IRQHandler+0x6c4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d009      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a17      	ldr	r2, [pc, #92]	; (8007108 <HAL_DMA_IRQHandler+0x6c8>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d004      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x678>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a16      	ldr	r2, [pc, #88]	; (800710c <HAL_DMA_IRQHandler+0x6cc>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d12b      	bne.n	8007110 <HAL_DMA_IRQHandler+0x6d0>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bf14      	ite	ne
 80070c6:	2301      	movne	r3, #1
 80070c8:	2300      	moveq	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	e02a      	b.n	8007124 <HAL_DMA_IRQHandler+0x6e4>
 80070ce:	bf00      	nop
 80070d0:	40020010 	.word	0x40020010
 80070d4:	40020028 	.word	0x40020028
 80070d8:	40020040 	.word	0x40020040
 80070dc:	40020058 	.word	0x40020058
 80070e0:	40020070 	.word	0x40020070
 80070e4:	40020088 	.word	0x40020088
 80070e8:	400200a0 	.word	0x400200a0
 80070ec:	400200b8 	.word	0x400200b8
 80070f0:	40020410 	.word	0x40020410
 80070f4:	40020428 	.word	0x40020428
 80070f8:	40020440 	.word	0x40020440
 80070fc:	40020458 	.word	0x40020458
 8007100:	40020470 	.word	0x40020470
 8007104:	40020488 	.word	0x40020488
 8007108:	400204a0 	.word	0x400204a0
 800710c:	400204b8 	.word	0x400204b8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	bf14      	ite	ne
 800711e:	2301      	movne	r3, #1
 8007120:	2300      	moveq	r3, #0
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8087 	beq.w	8007238 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2220      	movs	r2, #32
 8007134:	409a      	lsls	r2, r3
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b04      	cmp	r3, #4
 8007144:	d139      	bne.n	80071ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0216 	bic.w	r2, r2, #22
 8007154:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695a      	ldr	r2, [r3, #20]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007164:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <HAL_DMA_IRQHandler+0x736>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007172:	2b00      	cmp	r3, #0
 8007174:	d007      	beq.n	8007186 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0208 	bic.w	r2, r2, #8
 8007184:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718a:	f003 031f 	and.w	r3, r3, #31
 800718e:	223f      	movs	r2, #63	; 0x3f
 8007190:	409a      	lsls	r2, r3
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 834a 	beq.w	8007844 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
          }
          return;
 80071b8:	e344      	b.n	8007844 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d018      	beq.n	80071fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d108      	bne.n	80071e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d02c      	beq.n	8007238 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	4798      	blx	r3
 80071e6:	e027      	b.n	8007238 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d023      	beq.n	8007238 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
 80071f8:	e01e      	b.n	8007238 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10f      	bne.n	8007228 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0210 	bic.w	r2, r2, #16
 8007216:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 8306 	beq.w	800784e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8088 	beq.w	8007360 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2204      	movs	r2, #4
 8007254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a7a      	ldr	r2, [pc, #488]	; (8007448 <HAL_DMA_IRQHandler+0xa08>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d04a      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a79      	ldr	r2, [pc, #484]	; (800744c <HAL_DMA_IRQHandler+0xa0c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d045      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a77      	ldr	r2, [pc, #476]	; (8007450 <HAL_DMA_IRQHandler+0xa10>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d040      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a76      	ldr	r2, [pc, #472]	; (8007454 <HAL_DMA_IRQHandler+0xa14>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d03b      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a74      	ldr	r2, [pc, #464]	; (8007458 <HAL_DMA_IRQHandler+0xa18>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d036      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a73      	ldr	r2, [pc, #460]	; (800745c <HAL_DMA_IRQHandler+0xa1c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d031      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a71      	ldr	r2, [pc, #452]	; (8007460 <HAL_DMA_IRQHandler+0xa20>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d02c      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a70      	ldr	r2, [pc, #448]	; (8007464 <HAL_DMA_IRQHandler+0xa24>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d027      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a6e      	ldr	r2, [pc, #440]	; (8007468 <HAL_DMA_IRQHandler+0xa28>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d022      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a6d      	ldr	r2, [pc, #436]	; (800746c <HAL_DMA_IRQHandler+0xa2c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d01d      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a6b      	ldr	r2, [pc, #428]	; (8007470 <HAL_DMA_IRQHandler+0xa30>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d018      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a6a      	ldr	r2, [pc, #424]	; (8007474 <HAL_DMA_IRQHandler+0xa34>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d013      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a68      	ldr	r2, [pc, #416]	; (8007478 <HAL_DMA_IRQHandler+0xa38>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00e      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a67      	ldr	r2, [pc, #412]	; (800747c <HAL_DMA_IRQHandler+0xa3c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d009      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a65      	ldr	r2, [pc, #404]	; (8007480 <HAL_DMA_IRQHandler+0xa40>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d004      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x8b8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a64      	ldr	r2, [pc, #400]	; (8007484 <HAL_DMA_IRQHandler+0xa44>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d108      	bne.n	800730a <HAL_DMA_IRQHandler+0x8ca>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0201 	bic.w	r2, r2, #1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e007      	b.n	800731a <HAL_DMA_IRQHandler+0x8da>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0201 	bic.w	r2, r2, #1
 8007318:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3301      	adds	r3, #1
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007322:	429a      	cmp	r2, r3
 8007324:	d307      	bcc.n	8007336 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f2      	bne.n	800731a <HAL_DMA_IRQHandler+0x8da>
 8007334:	e000      	b.n	8007338 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007336:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d004      	beq.n	8007350 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2203      	movs	r2, #3
 800734a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800734e:	e003      	b.n	8007358 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 8272 	beq.w	800784e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
 8007372:	e26c      	b.n	800784e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a43      	ldr	r2, [pc, #268]	; (8007488 <HAL_DMA_IRQHandler+0xa48>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d022      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x984>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a42      	ldr	r2, [pc, #264]	; (800748c <HAL_DMA_IRQHandler+0xa4c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d01d      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x984>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a40      	ldr	r2, [pc, #256]	; (8007490 <HAL_DMA_IRQHandler+0xa50>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d018      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x984>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a3f      	ldr	r2, [pc, #252]	; (8007494 <HAL_DMA_IRQHandler+0xa54>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d013      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x984>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a3d      	ldr	r2, [pc, #244]	; (8007498 <HAL_DMA_IRQHandler+0xa58>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00e      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x984>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a3c      	ldr	r2, [pc, #240]	; (800749c <HAL_DMA_IRQHandler+0xa5c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d009      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x984>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a3a      	ldr	r2, [pc, #232]	; (80074a0 <HAL_DMA_IRQHandler+0xa60>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x984>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a39      	ldr	r2, [pc, #228]	; (80074a4 <HAL_DMA_IRQHandler+0xa64>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d101      	bne.n	80073c8 <HAL_DMA_IRQHandler+0x988>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e000      	b.n	80073ca <HAL_DMA_IRQHandler+0x98a>
 80073c8:	2300      	movs	r3, #0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 823f 	beq.w	800784e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	2204      	movs	r2, #4
 80073e2:	409a      	lsls	r2, r3
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 80cd 	beq.w	8007588 <HAL_DMA_IRQHandler+0xb48>
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 80c7 	beq.w	8007588 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	2204      	movs	r2, #4
 8007404:	409a      	lsls	r2, r3
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d049      	beq.n	80074a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 8210 	beq.w	8007848 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007430:	e20a      	b.n	8007848 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8206 	beq.w	8007848 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007444:	e200      	b.n	8007848 <HAL_DMA_IRQHandler+0xe08>
 8007446:	bf00      	nop
 8007448:	40020010 	.word	0x40020010
 800744c:	40020028 	.word	0x40020028
 8007450:	40020040 	.word	0x40020040
 8007454:	40020058 	.word	0x40020058
 8007458:	40020070 	.word	0x40020070
 800745c:	40020088 	.word	0x40020088
 8007460:	400200a0 	.word	0x400200a0
 8007464:	400200b8 	.word	0x400200b8
 8007468:	40020410 	.word	0x40020410
 800746c:	40020428 	.word	0x40020428
 8007470:	40020440 	.word	0x40020440
 8007474:	40020458 	.word	0x40020458
 8007478:	40020470 	.word	0x40020470
 800747c:	40020488 	.word	0x40020488
 8007480:	400204a0 	.word	0x400204a0
 8007484:	400204b8 	.word	0x400204b8
 8007488:	58025408 	.word	0x58025408
 800748c:	5802541c 	.word	0x5802541c
 8007490:	58025430 	.word	0x58025430
 8007494:	58025444 	.word	0x58025444
 8007498:	58025458 	.word	0x58025458
 800749c:	5802546c 	.word	0x5802546c
 80074a0:	58025480 	.word	0x58025480
 80074a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d160      	bne.n	8007574 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a7f      	ldr	r2, [pc, #508]	; (80076b4 <HAL_DMA_IRQHandler+0xc74>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d04a      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a7d      	ldr	r2, [pc, #500]	; (80076b8 <HAL_DMA_IRQHandler+0xc78>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d045      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a7c      	ldr	r2, [pc, #496]	; (80076bc <HAL_DMA_IRQHandler+0xc7c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d040      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a7a      	ldr	r2, [pc, #488]	; (80076c0 <HAL_DMA_IRQHandler+0xc80>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d03b      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a79      	ldr	r2, [pc, #484]	; (80076c4 <HAL_DMA_IRQHandler+0xc84>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d036      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a77      	ldr	r2, [pc, #476]	; (80076c8 <HAL_DMA_IRQHandler+0xc88>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d031      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a76      	ldr	r2, [pc, #472]	; (80076cc <HAL_DMA_IRQHandler+0xc8c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d02c      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a74      	ldr	r2, [pc, #464]	; (80076d0 <HAL_DMA_IRQHandler+0xc90>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d027      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a73      	ldr	r2, [pc, #460]	; (80076d4 <HAL_DMA_IRQHandler+0xc94>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d022      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a71      	ldr	r2, [pc, #452]	; (80076d8 <HAL_DMA_IRQHandler+0xc98>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d01d      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a70      	ldr	r2, [pc, #448]	; (80076dc <HAL_DMA_IRQHandler+0xc9c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d018      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a6e      	ldr	r2, [pc, #440]	; (80076e0 <HAL_DMA_IRQHandler+0xca0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d013      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a6d      	ldr	r2, [pc, #436]	; (80076e4 <HAL_DMA_IRQHandler+0xca4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00e      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a6b      	ldr	r2, [pc, #428]	; (80076e8 <HAL_DMA_IRQHandler+0xca8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d009      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a6a      	ldr	r2, [pc, #424]	; (80076ec <HAL_DMA_IRQHandler+0xcac>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d004      	beq.n	8007552 <HAL_DMA_IRQHandler+0xb12>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a68      	ldr	r2, [pc, #416]	; (80076f0 <HAL_DMA_IRQHandler+0xcb0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d108      	bne.n	8007564 <HAL_DMA_IRQHandler+0xb24>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0208 	bic.w	r2, r2, #8
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e007      	b.n	8007574 <HAL_DMA_IRQHandler+0xb34>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0204 	bic.w	r2, r2, #4
 8007572:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 8165 	beq.w	8007848 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007586:	e15f      	b.n	8007848 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758c:	f003 031f 	and.w	r3, r3, #31
 8007590:	2202      	movs	r2, #2
 8007592:	409a      	lsls	r2, r3
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	4013      	ands	r3, r2
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80c5 	beq.w	8007728 <HAL_DMA_IRQHandler+0xce8>
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 80bf 	beq.w	8007728 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	2202      	movs	r2, #2
 80075b4:	409a      	lsls	r2, r3
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d018      	beq.n	80075f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d109      	bne.n	80075e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 813a 	beq.w	800784c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e0:	e134      	b.n	800784c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 8130 	beq.w	800784c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075f4:	e12a      	b.n	800784c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8089 	bne.w	8007714 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2b      	ldr	r2, [pc, #172]	; (80076b4 <HAL_DMA_IRQHandler+0xc74>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d04a      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a29      	ldr	r2, [pc, #164]	; (80076b8 <HAL_DMA_IRQHandler+0xc78>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d045      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a28      	ldr	r2, [pc, #160]	; (80076bc <HAL_DMA_IRQHandler+0xc7c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d040      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a26      	ldr	r2, [pc, #152]	; (80076c0 <HAL_DMA_IRQHandler+0xc80>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d03b      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a25      	ldr	r2, [pc, #148]	; (80076c4 <HAL_DMA_IRQHandler+0xc84>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d036      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a23      	ldr	r2, [pc, #140]	; (80076c8 <HAL_DMA_IRQHandler+0xc88>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d031      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a22      	ldr	r2, [pc, #136]	; (80076cc <HAL_DMA_IRQHandler+0xc8c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d02c      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a20      	ldr	r2, [pc, #128]	; (80076d0 <HAL_DMA_IRQHandler+0xc90>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d027      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1f      	ldr	r2, [pc, #124]	; (80076d4 <HAL_DMA_IRQHandler+0xc94>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d022      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1d      	ldr	r2, [pc, #116]	; (80076d8 <HAL_DMA_IRQHandler+0xc98>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d01d      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1c      	ldr	r2, [pc, #112]	; (80076dc <HAL_DMA_IRQHandler+0xc9c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d018      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1a      	ldr	r2, [pc, #104]	; (80076e0 <HAL_DMA_IRQHandler+0xca0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d013      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a19      	ldr	r2, [pc, #100]	; (80076e4 <HAL_DMA_IRQHandler+0xca4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00e      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <HAL_DMA_IRQHandler+0xca8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d009      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a16      	ldr	r2, [pc, #88]	; (80076ec <HAL_DMA_IRQHandler+0xcac>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d004      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xc62>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a14      	ldr	r2, [pc, #80]	; (80076f0 <HAL_DMA_IRQHandler+0xcb0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d128      	bne.n	80076f4 <HAL_DMA_IRQHandler+0xcb4>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0214 	bic.w	r2, r2, #20
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	e027      	b.n	8007704 <HAL_DMA_IRQHandler+0xcc4>
 80076b4:	40020010 	.word	0x40020010
 80076b8:	40020028 	.word	0x40020028
 80076bc:	40020040 	.word	0x40020040
 80076c0:	40020058 	.word	0x40020058
 80076c4:	40020070 	.word	0x40020070
 80076c8:	40020088 	.word	0x40020088
 80076cc:	400200a0 	.word	0x400200a0
 80076d0:	400200b8 	.word	0x400200b8
 80076d4:	40020410 	.word	0x40020410
 80076d8:	40020428 	.word	0x40020428
 80076dc:	40020440 	.word	0x40020440
 80076e0:	40020458 	.word	0x40020458
 80076e4:	40020470 	.word	0x40020470
 80076e8:	40020488 	.word	0x40020488
 80076ec:	400204a0 	.word	0x400204a0
 80076f0:	400204b8 	.word	0x400204b8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 020a 	bic.w	r2, r2, #10
 8007702:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 8097 	beq.w	800784c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007726:	e091      	b.n	800784c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772c:	f003 031f 	and.w	r3, r3, #31
 8007730:	2208      	movs	r2, #8
 8007732:	409a      	lsls	r2, r3
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4013      	ands	r3, r2
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8088 	beq.w	800784e <HAL_DMA_IRQHandler+0xe0e>
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8082 	beq.w	800784e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a41      	ldr	r2, [pc, #260]	; (8007854 <HAL_DMA_IRQHandler+0xe14>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d04a      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a3f      	ldr	r2, [pc, #252]	; (8007858 <HAL_DMA_IRQHandler+0xe18>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d045      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a3e      	ldr	r2, [pc, #248]	; (800785c <HAL_DMA_IRQHandler+0xe1c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d040      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a3c      	ldr	r2, [pc, #240]	; (8007860 <HAL_DMA_IRQHandler+0xe20>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d03b      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a3b      	ldr	r2, [pc, #236]	; (8007864 <HAL_DMA_IRQHandler+0xe24>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d036      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a39      	ldr	r2, [pc, #228]	; (8007868 <HAL_DMA_IRQHandler+0xe28>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d031      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a38      	ldr	r2, [pc, #224]	; (800786c <HAL_DMA_IRQHandler+0xe2c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d02c      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a36      	ldr	r2, [pc, #216]	; (8007870 <HAL_DMA_IRQHandler+0xe30>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d027      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a35      	ldr	r2, [pc, #212]	; (8007874 <HAL_DMA_IRQHandler+0xe34>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d022      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a33      	ldr	r2, [pc, #204]	; (8007878 <HAL_DMA_IRQHandler+0xe38>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d01d      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a32      	ldr	r2, [pc, #200]	; (800787c <HAL_DMA_IRQHandler+0xe3c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d018      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a30      	ldr	r2, [pc, #192]	; (8007880 <HAL_DMA_IRQHandler+0xe40>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a2f      	ldr	r2, [pc, #188]	; (8007884 <HAL_DMA_IRQHandler+0xe44>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00e      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a2d      	ldr	r2, [pc, #180]	; (8007888 <HAL_DMA_IRQHandler+0xe48>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d009      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a2c      	ldr	r2, [pc, #176]	; (800788c <HAL_DMA_IRQHandler+0xe4c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d004      	beq.n	80077ea <HAL_DMA_IRQHandler+0xdaa>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a2a      	ldr	r2, [pc, #168]	; (8007890 <HAL_DMA_IRQHandler+0xe50>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d108      	bne.n	80077fc <HAL_DMA_IRQHandler+0xdbc>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 021c 	bic.w	r2, r2, #28
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	e007      	b.n	800780c <HAL_DMA_IRQHandler+0xdcc>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 020e 	bic.w	r2, r2, #14
 800780a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2201      	movs	r2, #1
 8007816:	409a      	lsls	r2, r3
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d009      	beq.n	800784e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
 8007842:	e004      	b.n	800784e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007844:	bf00      	nop
 8007846:	e002      	b.n	800784e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007848:	bf00      	nop
 800784a:	e000      	b.n	800784e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800784c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800784e:	3728      	adds	r7, #40	; 0x28
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40020010 	.word	0x40020010
 8007858:	40020028 	.word	0x40020028
 800785c:	40020040 	.word	0x40020040
 8007860:	40020058 	.word	0x40020058
 8007864:	40020070 	.word	0x40020070
 8007868:	40020088 	.word	0x40020088
 800786c:	400200a0 	.word	0x400200a0
 8007870:	400200b8 	.word	0x400200b8
 8007874:	40020410 	.word	0x40020410
 8007878:	40020428 	.word	0x40020428
 800787c:	40020440 	.word	0x40020440
 8007880:	40020458 	.word	0x40020458
 8007884:	40020470 	.word	0x40020470
 8007888:	40020488 	.word	0x40020488
 800788c:	400204a0 	.word	0x400204a0
 8007890:	400204b8 	.word	0x400204b8

08007894 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a7f      	ldr	r2, [pc, #508]	; (8007ab0 <DMA_SetConfig+0x21c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d072      	beq.n	800799e <DMA_SetConfig+0x10a>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a7d      	ldr	r2, [pc, #500]	; (8007ab4 <DMA_SetConfig+0x220>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d06d      	beq.n	800799e <DMA_SetConfig+0x10a>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a7c      	ldr	r2, [pc, #496]	; (8007ab8 <DMA_SetConfig+0x224>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d068      	beq.n	800799e <DMA_SetConfig+0x10a>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a7a      	ldr	r2, [pc, #488]	; (8007abc <DMA_SetConfig+0x228>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d063      	beq.n	800799e <DMA_SetConfig+0x10a>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a79      	ldr	r2, [pc, #484]	; (8007ac0 <DMA_SetConfig+0x22c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d05e      	beq.n	800799e <DMA_SetConfig+0x10a>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a77      	ldr	r2, [pc, #476]	; (8007ac4 <DMA_SetConfig+0x230>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d059      	beq.n	800799e <DMA_SetConfig+0x10a>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a76      	ldr	r2, [pc, #472]	; (8007ac8 <DMA_SetConfig+0x234>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d054      	beq.n	800799e <DMA_SetConfig+0x10a>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a74      	ldr	r2, [pc, #464]	; (8007acc <DMA_SetConfig+0x238>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d04f      	beq.n	800799e <DMA_SetConfig+0x10a>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a73      	ldr	r2, [pc, #460]	; (8007ad0 <DMA_SetConfig+0x23c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d04a      	beq.n	800799e <DMA_SetConfig+0x10a>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a71      	ldr	r2, [pc, #452]	; (8007ad4 <DMA_SetConfig+0x240>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d045      	beq.n	800799e <DMA_SetConfig+0x10a>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a70      	ldr	r2, [pc, #448]	; (8007ad8 <DMA_SetConfig+0x244>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d040      	beq.n	800799e <DMA_SetConfig+0x10a>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a6e      	ldr	r2, [pc, #440]	; (8007adc <DMA_SetConfig+0x248>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d03b      	beq.n	800799e <DMA_SetConfig+0x10a>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a6d      	ldr	r2, [pc, #436]	; (8007ae0 <DMA_SetConfig+0x24c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d036      	beq.n	800799e <DMA_SetConfig+0x10a>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a6b      	ldr	r2, [pc, #428]	; (8007ae4 <DMA_SetConfig+0x250>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d031      	beq.n	800799e <DMA_SetConfig+0x10a>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a6a      	ldr	r2, [pc, #424]	; (8007ae8 <DMA_SetConfig+0x254>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d02c      	beq.n	800799e <DMA_SetConfig+0x10a>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a68      	ldr	r2, [pc, #416]	; (8007aec <DMA_SetConfig+0x258>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d027      	beq.n	800799e <DMA_SetConfig+0x10a>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a67      	ldr	r2, [pc, #412]	; (8007af0 <DMA_SetConfig+0x25c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d022      	beq.n	800799e <DMA_SetConfig+0x10a>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a65      	ldr	r2, [pc, #404]	; (8007af4 <DMA_SetConfig+0x260>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d01d      	beq.n	800799e <DMA_SetConfig+0x10a>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a64      	ldr	r2, [pc, #400]	; (8007af8 <DMA_SetConfig+0x264>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d018      	beq.n	800799e <DMA_SetConfig+0x10a>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a62      	ldr	r2, [pc, #392]	; (8007afc <DMA_SetConfig+0x268>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d013      	beq.n	800799e <DMA_SetConfig+0x10a>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a61      	ldr	r2, [pc, #388]	; (8007b00 <DMA_SetConfig+0x26c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00e      	beq.n	800799e <DMA_SetConfig+0x10a>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a5f      	ldr	r2, [pc, #380]	; (8007b04 <DMA_SetConfig+0x270>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d009      	beq.n	800799e <DMA_SetConfig+0x10a>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a5e      	ldr	r2, [pc, #376]	; (8007b08 <DMA_SetConfig+0x274>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d004      	beq.n	800799e <DMA_SetConfig+0x10a>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a5c      	ldr	r2, [pc, #368]	; (8007b0c <DMA_SetConfig+0x278>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d101      	bne.n	80079a2 <DMA_SetConfig+0x10e>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <DMA_SetConfig+0x110>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00d      	beq.n	80079c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a39      	ldr	r2, [pc, #228]	; (8007ab0 <DMA_SetConfig+0x21c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d04a      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a38      	ldr	r2, [pc, #224]	; (8007ab4 <DMA_SetConfig+0x220>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d045      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a36      	ldr	r2, [pc, #216]	; (8007ab8 <DMA_SetConfig+0x224>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d040      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a35      	ldr	r2, [pc, #212]	; (8007abc <DMA_SetConfig+0x228>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d03b      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a33      	ldr	r2, [pc, #204]	; (8007ac0 <DMA_SetConfig+0x22c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d036      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a32      	ldr	r2, [pc, #200]	; (8007ac4 <DMA_SetConfig+0x230>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d031      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a30      	ldr	r2, [pc, #192]	; (8007ac8 <DMA_SetConfig+0x234>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d02c      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a2f      	ldr	r2, [pc, #188]	; (8007acc <DMA_SetConfig+0x238>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d027      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a2d      	ldr	r2, [pc, #180]	; (8007ad0 <DMA_SetConfig+0x23c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d022      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a2c      	ldr	r2, [pc, #176]	; (8007ad4 <DMA_SetConfig+0x240>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d01d      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a2a      	ldr	r2, [pc, #168]	; (8007ad8 <DMA_SetConfig+0x244>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d018      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a29      	ldr	r2, [pc, #164]	; (8007adc <DMA_SetConfig+0x248>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a27      	ldr	r2, [pc, #156]	; (8007ae0 <DMA_SetConfig+0x24c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00e      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a26      	ldr	r2, [pc, #152]	; (8007ae4 <DMA_SetConfig+0x250>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d009      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a24      	ldr	r2, [pc, #144]	; (8007ae8 <DMA_SetConfig+0x254>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d004      	beq.n	8007a64 <DMA_SetConfig+0x1d0>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a23      	ldr	r2, [pc, #140]	; (8007aec <DMA_SetConfig+0x258>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d101      	bne.n	8007a68 <DMA_SetConfig+0x1d4>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <DMA_SetConfig+0x1d6>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d059      	beq.n	8007b22 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a72:	f003 031f 	and.w	r3, r3, #31
 8007a76:	223f      	movs	r2, #63	; 0x3f
 8007a78:	409a      	lsls	r2, r3
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a8c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	2b40      	cmp	r3, #64	; 0x40
 8007a9c:	d138      	bne.n	8007b10 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007aae:	e086      	b.n	8007bbe <DMA_SetConfig+0x32a>
 8007ab0:	40020010 	.word	0x40020010
 8007ab4:	40020028 	.word	0x40020028
 8007ab8:	40020040 	.word	0x40020040
 8007abc:	40020058 	.word	0x40020058
 8007ac0:	40020070 	.word	0x40020070
 8007ac4:	40020088 	.word	0x40020088
 8007ac8:	400200a0 	.word	0x400200a0
 8007acc:	400200b8 	.word	0x400200b8
 8007ad0:	40020410 	.word	0x40020410
 8007ad4:	40020428 	.word	0x40020428
 8007ad8:	40020440 	.word	0x40020440
 8007adc:	40020458 	.word	0x40020458
 8007ae0:	40020470 	.word	0x40020470
 8007ae4:	40020488 	.word	0x40020488
 8007ae8:	400204a0 	.word	0x400204a0
 8007aec:	400204b8 	.word	0x400204b8
 8007af0:	58025408 	.word	0x58025408
 8007af4:	5802541c 	.word	0x5802541c
 8007af8:	58025430 	.word	0x58025430
 8007afc:	58025444 	.word	0x58025444
 8007b00:	58025458 	.word	0x58025458
 8007b04:	5802546c 	.word	0x5802546c
 8007b08:	58025480 	.word	0x58025480
 8007b0c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	60da      	str	r2, [r3, #12]
}
 8007b20:	e04d      	b.n	8007bbe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a29      	ldr	r2, [pc, #164]	; (8007bcc <DMA_SetConfig+0x338>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d022      	beq.n	8007b72 <DMA_SetConfig+0x2de>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a27      	ldr	r2, [pc, #156]	; (8007bd0 <DMA_SetConfig+0x33c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d01d      	beq.n	8007b72 <DMA_SetConfig+0x2de>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a26      	ldr	r2, [pc, #152]	; (8007bd4 <DMA_SetConfig+0x340>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d018      	beq.n	8007b72 <DMA_SetConfig+0x2de>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a24      	ldr	r2, [pc, #144]	; (8007bd8 <DMA_SetConfig+0x344>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d013      	beq.n	8007b72 <DMA_SetConfig+0x2de>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a23      	ldr	r2, [pc, #140]	; (8007bdc <DMA_SetConfig+0x348>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d00e      	beq.n	8007b72 <DMA_SetConfig+0x2de>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a21      	ldr	r2, [pc, #132]	; (8007be0 <DMA_SetConfig+0x34c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d009      	beq.n	8007b72 <DMA_SetConfig+0x2de>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a20      	ldr	r2, [pc, #128]	; (8007be4 <DMA_SetConfig+0x350>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d004      	beq.n	8007b72 <DMA_SetConfig+0x2de>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a1e      	ldr	r2, [pc, #120]	; (8007be8 <DMA_SetConfig+0x354>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d101      	bne.n	8007b76 <DMA_SetConfig+0x2e2>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <DMA_SetConfig+0x2e4>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d020      	beq.n	8007bbe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b80:	f003 031f 	and.w	r3, r3, #31
 8007b84:	2201      	movs	r2, #1
 8007b86:	409a      	lsls	r2, r3
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	2b40      	cmp	r3, #64	; 0x40
 8007b9a:	d108      	bne.n	8007bae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	60da      	str	r2, [r3, #12]
}
 8007bac:	e007      	b.n	8007bbe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	60da      	str	r2, [r3, #12]
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	58025408 	.word	0x58025408
 8007bd0:	5802541c 	.word	0x5802541c
 8007bd4:	58025430 	.word	0x58025430
 8007bd8:	58025444 	.word	0x58025444
 8007bdc:	58025458 	.word	0x58025458
 8007be0:	5802546c 	.word	0x5802546c
 8007be4:	58025480 	.word	0x58025480
 8007be8:	58025494 	.word	0x58025494

08007bec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a42      	ldr	r2, [pc, #264]	; (8007d04 <DMA_CalcBaseAndBitshift+0x118>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d04a      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a41      	ldr	r2, [pc, #260]	; (8007d08 <DMA_CalcBaseAndBitshift+0x11c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d045      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a3f      	ldr	r2, [pc, #252]	; (8007d0c <DMA_CalcBaseAndBitshift+0x120>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d040      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a3e      	ldr	r2, [pc, #248]	; (8007d10 <DMA_CalcBaseAndBitshift+0x124>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d03b      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a3c      	ldr	r2, [pc, #240]	; (8007d14 <DMA_CalcBaseAndBitshift+0x128>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d036      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a3b      	ldr	r2, [pc, #236]	; (8007d18 <DMA_CalcBaseAndBitshift+0x12c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d031      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a39      	ldr	r2, [pc, #228]	; (8007d1c <DMA_CalcBaseAndBitshift+0x130>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d02c      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a38      	ldr	r2, [pc, #224]	; (8007d20 <DMA_CalcBaseAndBitshift+0x134>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d027      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a36      	ldr	r2, [pc, #216]	; (8007d24 <DMA_CalcBaseAndBitshift+0x138>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d022      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a35      	ldr	r2, [pc, #212]	; (8007d28 <DMA_CalcBaseAndBitshift+0x13c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d01d      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a33      	ldr	r2, [pc, #204]	; (8007d2c <DMA_CalcBaseAndBitshift+0x140>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d018      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a32      	ldr	r2, [pc, #200]	; (8007d30 <DMA_CalcBaseAndBitshift+0x144>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d013      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a30      	ldr	r2, [pc, #192]	; (8007d34 <DMA_CalcBaseAndBitshift+0x148>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00e      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a2f      	ldr	r2, [pc, #188]	; (8007d38 <DMA_CalcBaseAndBitshift+0x14c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d009      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a2d      	ldr	r2, [pc, #180]	; (8007d3c <DMA_CalcBaseAndBitshift+0x150>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d004      	beq.n	8007c94 <DMA_CalcBaseAndBitshift+0xa8>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a2c      	ldr	r2, [pc, #176]	; (8007d40 <DMA_CalcBaseAndBitshift+0x154>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d101      	bne.n	8007c98 <DMA_CalcBaseAndBitshift+0xac>
 8007c94:	2301      	movs	r3, #1
 8007c96:	e000      	b.n	8007c9a <DMA_CalcBaseAndBitshift+0xae>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d024      	beq.n	8007ce8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	3b10      	subs	r3, #16
 8007ca6:	4a27      	ldr	r2, [pc, #156]	; (8007d44 <DMA_CalcBaseAndBitshift+0x158>)
 8007ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cac:	091b      	lsrs	r3, r3, #4
 8007cae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f003 0307 	and.w	r3, r3, #7
 8007cb6:	4a24      	ldr	r2, [pc, #144]	; (8007d48 <DMA_CalcBaseAndBitshift+0x15c>)
 8007cb8:	5cd3      	ldrb	r3, [r2, r3]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d908      	bls.n	8007cd8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	4b1f      	ldr	r3, [pc, #124]	; (8007d4c <DMA_CalcBaseAndBitshift+0x160>)
 8007cce:	4013      	ands	r3, r2
 8007cd0:	1d1a      	adds	r2, r3, #4
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	659a      	str	r2, [r3, #88]	; 0x58
 8007cd6:	e00d      	b.n	8007cf4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <DMA_CalcBaseAndBitshift+0x160>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8007ce6:	e005      	b.n	8007cf4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	40020010 	.word	0x40020010
 8007d08:	40020028 	.word	0x40020028
 8007d0c:	40020040 	.word	0x40020040
 8007d10:	40020058 	.word	0x40020058
 8007d14:	40020070 	.word	0x40020070
 8007d18:	40020088 	.word	0x40020088
 8007d1c:	400200a0 	.word	0x400200a0
 8007d20:	400200b8 	.word	0x400200b8
 8007d24:	40020410 	.word	0x40020410
 8007d28:	40020428 	.word	0x40020428
 8007d2c:	40020440 	.word	0x40020440
 8007d30:	40020458 	.word	0x40020458
 8007d34:	40020470 	.word	0x40020470
 8007d38:	40020488 	.word	0x40020488
 8007d3c:	400204a0 	.word	0x400204a0
 8007d40:	400204b8 	.word	0x400204b8
 8007d44:	aaaaaaab 	.word	0xaaaaaaab
 8007d48:	08015898 	.word	0x08015898
 8007d4c:	fffffc00 	.word	0xfffffc00

08007d50 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d120      	bne.n	8007da6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d858      	bhi.n	8007e1e <DMA_CheckFifoParam+0xce>
 8007d6c:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <DMA_CheckFifoParam+0x24>)
 8007d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d72:	bf00      	nop
 8007d74:	08007d85 	.word	0x08007d85
 8007d78:	08007d97 	.word	0x08007d97
 8007d7c:	08007d85 	.word	0x08007d85
 8007d80:	08007e1f 	.word	0x08007e1f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d048      	beq.n	8007e22 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d94:	e045      	b.n	8007e22 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d9e:	d142      	bne.n	8007e26 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007da4:	e03f      	b.n	8007e26 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dae:	d123      	bne.n	8007df8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d838      	bhi.n	8007e2a <DMA_CheckFifoParam+0xda>
 8007db8:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <DMA_CheckFifoParam+0x70>)
 8007dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbe:	bf00      	nop
 8007dc0:	08007dd1 	.word	0x08007dd1
 8007dc4:	08007dd7 	.word	0x08007dd7
 8007dc8:	08007dd1 	.word	0x08007dd1
 8007dcc:	08007de9 	.word	0x08007de9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
        break;
 8007dd4:	e030      	b.n	8007e38 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d025      	beq.n	8007e2e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007de6:	e022      	b.n	8007e2e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007df0:	d11f      	bne.n	8007e32 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007df6:	e01c      	b.n	8007e32 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d902      	bls.n	8007e06 <DMA_CheckFifoParam+0xb6>
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d003      	beq.n	8007e0c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007e04:	e018      	b.n	8007e38 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	73fb      	strb	r3, [r7, #15]
        break;
 8007e0a:	e015      	b.n	8007e38 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00e      	beq.n	8007e36 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e1c:	e00b      	b.n	8007e36 <DMA_CheckFifoParam+0xe6>
        break;
 8007e1e:	bf00      	nop
 8007e20:	e00a      	b.n	8007e38 <DMA_CheckFifoParam+0xe8>
        break;
 8007e22:	bf00      	nop
 8007e24:	e008      	b.n	8007e38 <DMA_CheckFifoParam+0xe8>
        break;
 8007e26:	bf00      	nop
 8007e28:	e006      	b.n	8007e38 <DMA_CheckFifoParam+0xe8>
        break;
 8007e2a:	bf00      	nop
 8007e2c:	e004      	b.n	8007e38 <DMA_CheckFifoParam+0xe8>
        break;
 8007e2e:	bf00      	nop
 8007e30:	e002      	b.n	8007e38 <DMA_CheckFifoParam+0xe8>
        break;
 8007e32:	bf00      	nop
 8007e34:	e000      	b.n	8007e38 <DMA_CheckFifoParam+0xe8>
    break;
 8007e36:	bf00      	nop
    }
  }

  return status;
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop

08007e48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a38      	ldr	r2, [pc, #224]	; (8007f3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d022      	beq.n	8007ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a36      	ldr	r2, [pc, #216]	; (8007f40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01d      	beq.n	8007ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a35      	ldr	r2, [pc, #212]	; (8007f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d018      	beq.n	8007ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a33      	ldr	r2, [pc, #204]	; (8007f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d013      	beq.n	8007ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a32      	ldr	r2, [pc, #200]	; (8007f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00e      	beq.n	8007ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a30      	ldr	r2, [pc, #192]	; (8007f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a2f      	ldr	r2, [pc, #188]	; (8007f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d004      	beq.n	8007ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a2d      	ldr	r2, [pc, #180]	; (8007f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d101      	bne.n	8007eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01a      	beq.n	8007ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	3b08      	subs	r3, #8
 8007eb8:	4a28      	ldr	r2, [pc, #160]	; (8007f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007eba:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebe:	091b      	lsrs	r3, r3, #4
 8007ec0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4b26      	ldr	r3, [pc, #152]	; (8007f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007ec6:	4413      	add	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	461a      	mov	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a24      	ldr	r2, [pc, #144]	; (8007f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007ed4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f003 031f 	and.w	r3, r3, #31
 8007edc:	2201      	movs	r2, #1
 8007ede:	409a      	lsls	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007ee4:	e024      	b.n	8007f30 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	3b10      	subs	r3, #16
 8007eee:	4a1e      	ldr	r2, [pc, #120]	; (8007f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef4:	091b      	lsrs	r3, r3, #4
 8007ef6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4a1c      	ldr	r2, [pc, #112]	; (8007f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d806      	bhi.n	8007f0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4a1b      	ldr	r2, [pc, #108]	; (8007f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d902      	bls.n	8007f0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4b18      	ldr	r3, [pc, #96]	; (8007f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a16      	ldr	r2, [pc, #88]	; (8007f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007f20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f003 031f 	and.w	r3, r3, #31
 8007f28:	2201      	movs	r2, #1
 8007f2a:	409a      	lsls	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f30:	bf00      	nop
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	58025408 	.word	0x58025408
 8007f40:	5802541c 	.word	0x5802541c
 8007f44:	58025430 	.word	0x58025430
 8007f48:	58025444 	.word	0x58025444
 8007f4c:	58025458 	.word	0x58025458
 8007f50:	5802546c 	.word	0x5802546c
 8007f54:	58025480 	.word	0x58025480
 8007f58:	58025494 	.word	0x58025494
 8007f5c:	cccccccd 	.word	0xcccccccd
 8007f60:	16009600 	.word	0x16009600
 8007f64:	58025880 	.word	0x58025880
 8007f68:	aaaaaaab 	.word	0xaaaaaaab
 8007f6c:	400204b8 	.word	0x400204b8
 8007f70:	4002040f 	.word	0x4002040f
 8007f74:	10008200 	.word	0x10008200
 8007f78:	40020880 	.word	0x40020880

08007f7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d04a      	beq.n	8008028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d847      	bhi.n	8008028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a25      	ldr	r2, [pc, #148]	; (8008034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d022      	beq.n	8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a24      	ldr	r2, [pc, #144]	; (8008038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d01d      	beq.n	8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a22      	ldr	r2, [pc, #136]	; (800803c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d018      	beq.n	8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a21      	ldr	r2, [pc, #132]	; (8008040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d013      	beq.n	8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d00e      	beq.n	8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d009      	beq.n	8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a1c      	ldr	r2, [pc, #112]	; (800804c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d004      	beq.n	8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a1b      	ldr	r2, [pc, #108]	; (8008050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d101      	bne.n	8007fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007fec:	2300      	movs	r3, #0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00a      	beq.n	8008008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	4b17      	ldr	r3, [pc, #92]	; (8008054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007ff6:	4413      	add	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a15      	ldr	r2, [pc, #84]	; (8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008004:	671a      	str	r2, [r3, #112]	; 0x70
 8008006:	e009      	b.n	800801c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	4b14      	ldr	r3, [pc, #80]	; (800805c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	461a      	mov	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a11      	ldr	r2, [pc, #68]	; (8008060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800801a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3b01      	subs	r3, #1
 8008020:	2201      	movs	r2, #1
 8008022:	409a      	lsls	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008028:	bf00      	nop
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	58025408 	.word	0x58025408
 8008038:	5802541c 	.word	0x5802541c
 800803c:	58025430 	.word	0x58025430
 8008040:	58025444 	.word	0x58025444
 8008044:	58025458 	.word	0x58025458
 8008048:	5802546c 	.word	0x5802546c
 800804c:	58025480 	.word	0x58025480
 8008050:	58025494 	.word	0x58025494
 8008054:	1600963f 	.word	0x1600963f
 8008058:	58025940 	.word	0x58025940
 800805c:	1000823f 	.word	0x1000823f
 8008060:	40020940 	.word	0x40020940

08008064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008064:	b480      	push	{r7}
 8008066:	b089      	sub	sp, #36	; 0x24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800806e:	2300      	movs	r3, #0
 8008070:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008072:	4b89      	ldr	r3, [pc, #548]	; (8008298 <HAL_GPIO_Init+0x234>)
 8008074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008076:	e194      	b.n	80083a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	2101      	movs	r1, #1
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	fa01 f303 	lsl.w	r3, r1, r3
 8008084:	4013      	ands	r3, r2
 8008086:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 8186 	beq.w	800839c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f003 0303 	and.w	r3, r3, #3
 8008098:	2b01      	cmp	r3, #1
 800809a:	d005      	beq.n	80080a8 <HAL_GPIO_Init+0x44>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f003 0303 	and.w	r3, r3, #3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d130      	bne.n	800810a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	2203      	movs	r2, #3
 80080b4:	fa02 f303 	lsl.w	r3, r2, r3
 80080b8:	43db      	mvns	r3, r3
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	4013      	ands	r3, r2
 80080be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	fa02 f303 	lsl.w	r3, r2, r3
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080de:	2201      	movs	r2, #1
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	fa02 f303 	lsl.w	r3, r2, r3
 80080e6:	43db      	mvns	r3, r3
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	4013      	ands	r3, r2
 80080ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	091b      	lsrs	r3, r3, #4
 80080f4:	f003 0201 	and.w	r2, r3, #1
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	4313      	orrs	r3, r2
 8008102:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	2b03      	cmp	r3, #3
 8008114:	d017      	beq.n	8008146 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	2203      	movs	r2, #3
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	43db      	mvns	r3, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4013      	ands	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	fa02 f303 	lsl.w	r3, r2, r3
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	4313      	orrs	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d123      	bne.n	800819a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	08da      	lsrs	r2, r3, #3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3208      	adds	r2, #8
 800815a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	220f      	movs	r2, #15
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	43db      	mvns	r3, r3
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	4013      	ands	r3, r2
 8008174:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	691a      	ldr	r2, [r3, #16]
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f003 0307 	and.w	r3, r3, #7
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	4313      	orrs	r3, r2
 800818a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	08da      	lsrs	r2, r3, #3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3208      	adds	r2, #8
 8008194:	69b9      	ldr	r1, [r7, #24]
 8008196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	2203      	movs	r2, #3
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	43db      	mvns	r3, r3
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	4013      	ands	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f003 0203 	and.w	r2, r3, #3
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 80e0 	beq.w	800839c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081dc:	4b2f      	ldr	r3, [pc, #188]	; (800829c <HAL_GPIO_Init+0x238>)
 80081de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081e2:	4a2e      	ldr	r2, [pc, #184]	; (800829c <HAL_GPIO_Init+0x238>)
 80081e4:	f043 0302 	orr.w	r3, r3, #2
 80081e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80081ec:	4b2b      	ldr	r3, [pc, #172]	; (800829c <HAL_GPIO_Init+0x238>)
 80081ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081fa:	4a29      	ldr	r2, [pc, #164]	; (80082a0 <HAL_GPIO_Init+0x23c>)
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	089b      	lsrs	r3, r3, #2
 8008200:	3302      	adds	r3, #2
 8008202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	220f      	movs	r2, #15
 8008212:	fa02 f303 	lsl.w	r3, r2, r3
 8008216:	43db      	mvns	r3, r3
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	4013      	ands	r3, r2
 800821c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a20      	ldr	r2, [pc, #128]	; (80082a4 <HAL_GPIO_Init+0x240>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d052      	beq.n	80082cc <HAL_GPIO_Init+0x268>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a1f      	ldr	r2, [pc, #124]	; (80082a8 <HAL_GPIO_Init+0x244>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d031      	beq.n	8008292 <HAL_GPIO_Init+0x22e>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a1e      	ldr	r2, [pc, #120]	; (80082ac <HAL_GPIO_Init+0x248>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d02b      	beq.n	800828e <HAL_GPIO_Init+0x22a>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a1d      	ldr	r2, [pc, #116]	; (80082b0 <HAL_GPIO_Init+0x24c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d025      	beq.n	800828a <HAL_GPIO_Init+0x226>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a1c      	ldr	r2, [pc, #112]	; (80082b4 <HAL_GPIO_Init+0x250>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01f      	beq.n	8008286 <HAL_GPIO_Init+0x222>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1b      	ldr	r2, [pc, #108]	; (80082b8 <HAL_GPIO_Init+0x254>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d019      	beq.n	8008282 <HAL_GPIO_Init+0x21e>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1a      	ldr	r2, [pc, #104]	; (80082bc <HAL_GPIO_Init+0x258>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d013      	beq.n	800827e <HAL_GPIO_Init+0x21a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a19      	ldr	r2, [pc, #100]	; (80082c0 <HAL_GPIO_Init+0x25c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00d      	beq.n	800827a <HAL_GPIO_Init+0x216>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a18      	ldr	r2, [pc, #96]	; (80082c4 <HAL_GPIO_Init+0x260>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d007      	beq.n	8008276 <HAL_GPIO_Init+0x212>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a17      	ldr	r2, [pc, #92]	; (80082c8 <HAL_GPIO_Init+0x264>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d101      	bne.n	8008272 <HAL_GPIO_Init+0x20e>
 800826e:	2309      	movs	r3, #9
 8008270:	e02d      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008272:	230a      	movs	r3, #10
 8008274:	e02b      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008276:	2308      	movs	r3, #8
 8008278:	e029      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 800827a:	2307      	movs	r3, #7
 800827c:	e027      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 800827e:	2306      	movs	r3, #6
 8008280:	e025      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008282:	2305      	movs	r3, #5
 8008284:	e023      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008286:	2304      	movs	r3, #4
 8008288:	e021      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 800828a:	2303      	movs	r3, #3
 800828c:	e01f      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 800828e:	2302      	movs	r3, #2
 8008290:	e01d      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008292:	2301      	movs	r3, #1
 8008294:	e01b      	b.n	80082ce <HAL_GPIO_Init+0x26a>
 8008296:	bf00      	nop
 8008298:	58000080 	.word	0x58000080
 800829c:	58024400 	.word	0x58024400
 80082a0:	58000400 	.word	0x58000400
 80082a4:	58020000 	.word	0x58020000
 80082a8:	58020400 	.word	0x58020400
 80082ac:	58020800 	.word	0x58020800
 80082b0:	58020c00 	.word	0x58020c00
 80082b4:	58021000 	.word	0x58021000
 80082b8:	58021400 	.word	0x58021400
 80082bc:	58021800 	.word	0x58021800
 80082c0:	58021c00 	.word	0x58021c00
 80082c4:	58022000 	.word	0x58022000
 80082c8:	58022400 	.word	0x58022400
 80082cc:	2300      	movs	r3, #0
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	f002 0203 	and.w	r2, r2, #3
 80082d4:	0092      	lsls	r2, r2, #2
 80082d6:	4093      	lsls	r3, r2
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	4313      	orrs	r3, r2
 80082dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082de:	4938      	ldr	r1, [pc, #224]	; (80083c0 <HAL_GPIO_Init+0x35c>)
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	089b      	lsrs	r3, r3, #2
 80082e4:	3302      	adds	r3, #2
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	43db      	mvns	r3, r3
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	4013      	ands	r3, r2
 80082fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800831a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	43db      	mvns	r3, r3
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	4013      	ands	r3, r2
 800832a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	43db      	mvns	r3, r3
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	4013      	ands	r3, r2
 8008356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	4313      	orrs	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	43db      	mvns	r3, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	4013      	ands	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4313      	orrs	r3, r2
 8008394:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	3301      	adds	r3, #1
 80083a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f47f ae63 	bne.w	8008078 <HAL_GPIO_Init+0x14>
  }
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	3724      	adds	r7, #36	; 0x24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	58000400 	.word	0x58000400

080083c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691a      	ldr	r2, [r3, #16]
 80083d4:	887b      	ldrh	r3, [r7, #2]
 80083d6:	4013      	ands	r3, r2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083dc:	2301      	movs	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
 80083e0:	e001      	b.n	80083e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	807b      	strh	r3, [r7, #2]
 8008400:	4613      	mov	r3, r2
 8008402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008404:	787b      	ldrb	r3, [r7, #1]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800840a:	887a      	ldrh	r2, [r7, #2]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008410:	e003      	b.n	800841a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008412:	887b      	ldrh	r3, [r7, #2]
 8008414:	041a      	lsls	r2, r3, #16
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	619a      	str	r2, [r3, #24]
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
	...

08008428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e08b      	b.n	8008552 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d106      	bne.n	8008454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fa f938 	bl	80026c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2224      	movs	r2, #36	; 0x24
 8008458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0201 	bic.w	r2, r2, #1
 800846a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008478:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008488:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d107      	bne.n	80084a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800849e:	609a      	str	r2, [r3, #8]
 80084a0:	e006      	b.n	80084b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d108      	bne.n	80084ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c6:	605a      	str	r2, [r3, #4]
 80084c8:	e007      	b.n	80084da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6859      	ldr	r1, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	4b1d      	ldr	r3, [pc, #116]	; (800855c <HAL_I2C_Init+0x134>)
 80084e6:	430b      	orrs	r3, r1
 80084e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68da      	ldr	r2, [r3, #12]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691a      	ldr	r2, [r3, #16]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69d9      	ldr	r1, [r3, #28]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a1a      	ldr	r2, [r3, #32]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0201 	orr.w	r2, r2, #1
 8008532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	02008000 	.word	0x02008000

08008560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b20      	cmp	r3, #32
 8008574:	d138      	bne.n	80085e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800857c:	2b01      	cmp	r3, #1
 800857e:	d101      	bne.n	8008584 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008580:	2302      	movs	r3, #2
 8008582:	e032      	b.n	80085ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2224      	movs	r2, #36	; 0x24
 8008590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0201 	bic.w	r2, r2, #1
 80085a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6819      	ldr	r1, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0201 	orr.w	r2, r2, #1
 80085d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	e000      	b.n	80085ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085e8:	2302      	movs	r3, #2
  }
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b085      	sub	sp, #20
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b20      	cmp	r3, #32
 800860a:	d139      	bne.n	8008680 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008612:	2b01      	cmp	r3, #1
 8008614:	d101      	bne.n	800861a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008616:	2302      	movs	r3, #2
 8008618:	e033      	b.n	8008682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2224      	movs	r2, #36	; 0x24
 8008626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 0201 	bic.w	r2, r2, #1
 8008638:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008648:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f042 0201 	orr.w	r2, r2, #1
 800866a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2220      	movs	r2, #32
 8008670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	e000      	b.n	8008682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008680:	2302      	movs	r3, #2
  }
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
	...

08008690 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008698:	4b19      	ldr	r3, [pc, #100]	; (8008700 <HAL_PWREx_ConfigSupply+0x70>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f003 0304 	and.w	r3, r3, #4
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d00a      	beq.n	80086ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086a4:	4b16      	ldr	r3, [pc, #88]	; (8008700 <HAL_PWREx_ConfigSupply+0x70>)
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d001      	beq.n	80086b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e01f      	b.n	80086f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	e01d      	b.n	80086f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80086ba:	4b11      	ldr	r3, [pc, #68]	; (8008700 <HAL_PWREx_ConfigSupply+0x70>)
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f023 0207 	bic.w	r2, r3, #7
 80086c2:	490f      	ldr	r1, [pc, #60]	; (8008700 <HAL_PWREx_ConfigSupply+0x70>)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80086ca:	f7fa fd67 	bl	800319c <HAL_GetTick>
 80086ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086d0:	e009      	b.n	80086e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80086d2:	f7fa fd63 	bl	800319c <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086e0:	d901      	bls.n	80086e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e007      	b.n	80086f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086e6:	4b06      	ldr	r3, [pc, #24]	; (8008700 <HAL_PWREx_ConfigSupply+0x70>)
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086f2:	d1ee      	bne.n	80086d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	58024800 	.word	0x58024800

08008704 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08c      	sub	sp, #48	; 0x30
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d102      	bne.n	8008718 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	f000 bc48 	b.w	8008fa8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 8088 	beq.w	8008836 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008726:	4b99      	ldr	r3, [pc, #612]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800872e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008730:	4b96      	ldr	r3, [pc, #600]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008734:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008738:	2b10      	cmp	r3, #16
 800873a:	d007      	beq.n	800874c <HAL_RCC_OscConfig+0x48>
 800873c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873e:	2b18      	cmp	r3, #24
 8008740:	d111      	bne.n	8008766 <HAL_RCC_OscConfig+0x62>
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	f003 0303 	and.w	r3, r3, #3
 8008748:	2b02      	cmp	r3, #2
 800874a:	d10c      	bne.n	8008766 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800874c:	4b8f      	ldr	r3, [pc, #572]	; (800898c <HAL_RCC_OscConfig+0x288>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d06d      	beq.n	8008834 <HAL_RCC_OscConfig+0x130>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d169      	bne.n	8008834 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f000 bc21 	b.w	8008fa8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800876e:	d106      	bne.n	800877e <HAL_RCC_OscConfig+0x7a>
 8008770:	4b86      	ldr	r3, [pc, #536]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a85      	ldr	r2, [pc, #532]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	e02e      	b.n	80087dc <HAL_RCC_OscConfig+0xd8>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10c      	bne.n	80087a0 <HAL_RCC_OscConfig+0x9c>
 8008786:	4b81      	ldr	r3, [pc, #516]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a80      	ldr	r2, [pc, #512]	; (800898c <HAL_RCC_OscConfig+0x288>)
 800878c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	4b7e      	ldr	r3, [pc, #504]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a7d      	ldr	r2, [pc, #500]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	e01d      	b.n	80087dc <HAL_RCC_OscConfig+0xd8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087a8:	d10c      	bne.n	80087c4 <HAL_RCC_OscConfig+0xc0>
 80087aa:	4b78      	ldr	r3, [pc, #480]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a77      	ldr	r2, [pc, #476]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80087b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	4b75      	ldr	r3, [pc, #468]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a74      	ldr	r2, [pc, #464]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80087bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	e00b      	b.n	80087dc <HAL_RCC_OscConfig+0xd8>
 80087c4:	4b71      	ldr	r3, [pc, #452]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a70      	ldr	r2, [pc, #448]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80087ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	4b6e      	ldr	r3, [pc, #440]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a6d      	ldr	r2, [pc, #436]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80087d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d013      	beq.n	800880c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e4:	f7fa fcda 	bl	800319c <HAL_GetTick>
 80087e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087ea:	e008      	b.n	80087fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087ec:	f7fa fcd6 	bl	800319c <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	2b64      	cmp	r3, #100	; 0x64
 80087f8:	d901      	bls.n	80087fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e3d4      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087fe:	4b63      	ldr	r3, [pc, #396]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0f0      	beq.n	80087ec <HAL_RCC_OscConfig+0xe8>
 800880a:	e014      	b.n	8008836 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880c:	f7fa fcc6 	bl	800319c <HAL_GetTick>
 8008810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008812:	e008      	b.n	8008826 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008814:	f7fa fcc2 	bl	800319c <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b64      	cmp	r3, #100	; 0x64
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e3c0      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008826:	4b59      	ldr	r3, [pc, #356]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1f0      	bne.n	8008814 <HAL_RCC_OscConfig+0x110>
 8008832:	e000      	b.n	8008836 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 80ca 	beq.w	80089d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008844:	4b51      	ldr	r3, [pc, #324]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800884c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800884e:	4b4f      	ldr	r3, [pc, #316]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008852:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <HAL_RCC_OscConfig+0x166>
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	2b18      	cmp	r3, #24
 800885e:	d156      	bne.n	800890e <HAL_RCC_OscConfig+0x20a>
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d151      	bne.n	800890e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800886a:	4b48      	ldr	r3, [pc, #288]	; (800898c <HAL_RCC_OscConfig+0x288>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_RCC_OscConfig+0x17e>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e392      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008882:	4b42      	ldr	r3, [pc, #264]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f023 0219 	bic.w	r2, r3, #25
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	493f      	ldr	r1, [pc, #252]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008890:	4313      	orrs	r3, r2
 8008892:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008894:	f7fa fc82 	bl	800319c <HAL_GetTick>
 8008898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800889a:	e008      	b.n	80088ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800889c:	f7fa fc7e 	bl	800319c <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e37c      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088ae:	4b37      	ldr	r3, [pc, #220]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0304 	and.w	r3, r3, #4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0f0      	beq.n	800889c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ba:	f7fa fc7b 	bl	80031b4 <HAL_GetREVID>
 80088be:	4603      	mov	r3, r0
 80088c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d817      	bhi.n	80088f8 <HAL_RCC_OscConfig+0x1f4>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	2b40      	cmp	r3, #64	; 0x40
 80088ce:	d108      	bne.n	80088e2 <HAL_RCC_OscConfig+0x1de>
 80088d0:	4b2e      	ldr	r3, [pc, #184]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088d8:	4a2c      	ldr	r2, [pc, #176]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80088da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088e0:	e07a      	b.n	80089d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088e2:	4b2a      	ldr	r3, [pc, #168]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	031b      	lsls	r3, r3, #12
 80088f0:	4926      	ldr	r1, [pc, #152]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088f6:	e06f      	b.n	80089d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f8:	4b24      	ldr	r3, [pc, #144]	; (800898c <HAL_RCC_OscConfig+0x288>)
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	061b      	lsls	r3, r3, #24
 8008906:	4921      	ldr	r1, [pc, #132]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008908:	4313      	orrs	r3, r2
 800890a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800890c:	e064      	b.n	80089d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d047      	beq.n	80089a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008916:	4b1d      	ldr	r3, [pc, #116]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f023 0219 	bic.w	r2, r3, #25
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	491a      	ldr	r1, [pc, #104]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008924:	4313      	orrs	r3, r2
 8008926:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008928:	f7fa fc38 	bl	800319c <HAL_GetTick>
 800892c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008930:	f7fa fc34 	bl	800319c <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e332      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008942:	4b12      	ldr	r3, [pc, #72]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0f0      	beq.n	8008930 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800894e:	f7fa fc31 	bl	80031b4 <HAL_GetREVID>
 8008952:	4603      	mov	r3, r0
 8008954:	f241 0203 	movw	r2, #4099	; 0x1003
 8008958:	4293      	cmp	r3, r2
 800895a:	d819      	bhi.n	8008990 <HAL_RCC_OscConfig+0x28c>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	2b40      	cmp	r3, #64	; 0x40
 8008962:	d108      	bne.n	8008976 <HAL_RCC_OscConfig+0x272>
 8008964:	4b09      	ldr	r3, [pc, #36]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800896c:	4a07      	ldr	r2, [pc, #28]	; (800898c <HAL_RCC_OscConfig+0x288>)
 800896e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008972:	6053      	str	r3, [r2, #4]
 8008974:	e030      	b.n	80089d8 <HAL_RCC_OscConfig+0x2d4>
 8008976:	4b05      	ldr	r3, [pc, #20]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	031b      	lsls	r3, r3, #12
 8008984:	4901      	ldr	r1, [pc, #4]	; (800898c <HAL_RCC_OscConfig+0x288>)
 8008986:	4313      	orrs	r3, r2
 8008988:	604b      	str	r3, [r1, #4]
 800898a:	e025      	b.n	80089d8 <HAL_RCC_OscConfig+0x2d4>
 800898c:	58024400 	.word	0x58024400
 8008990:	4b9a      	ldr	r3, [pc, #616]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	061b      	lsls	r3, r3, #24
 800899e:	4997      	ldr	r1, [pc, #604]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	604b      	str	r3, [r1, #4]
 80089a4:	e018      	b.n	80089d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089a6:	4b95      	ldr	r3, [pc, #596]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a94      	ldr	r2, [pc, #592]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 80089ac:	f023 0301 	bic.w	r3, r3, #1
 80089b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b2:	f7fa fbf3 	bl	800319c <HAL_GetTick>
 80089b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089b8:	e008      	b.n	80089cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089ba:	f7fa fbef 	bl	800319c <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d901      	bls.n	80089cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e2ed      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089cc:	4b8b      	ldr	r3, [pc, #556]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0304 	and.w	r3, r3, #4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1f0      	bne.n	80089ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0310 	and.w	r3, r3, #16
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 80a9 	beq.w	8008b38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089e6:	4b85      	ldr	r3, [pc, #532]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089f0:	4b82      	ldr	r3, [pc, #520]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 80089f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d007      	beq.n	8008a0c <HAL_RCC_OscConfig+0x308>
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	2b18      	cmp	r3, #24
 8008a00:	d13a      	bne.n	8008a78 <HAL_RCC_OscConfig+0x374>
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d135      	bne.n	8008a78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a0c:	4b7b      	ldr	r3, [pc, #492]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d005      	beq.n	8008a24 <HAL_RCC_OscConfig+0x320>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	2b80      	cmp	r3, #128	; 0x80
 8008a1e:	d001      	beq.n	8008a24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e2c1      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a24:	f7fa fbc6 	bl	80031b4 <HAL_GetREVID>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d817      	bhi.n	8008a62 <HAL_RCC_OscConfig+0x35e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	2b20      	cmp	r3, #32
 8008a38:	d108      	bne.n	8008a4c <HAL_RCC_OscConfig+0x348>
 8008a3a:	4b70      	ldr	r3, [pc, #448]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a42:	4a6e      	ldr	r2, [pc, #440]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a4a:	e075      	b.n	8008b38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a4c:	4b6b      	ldr	r3, [pc, #428]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	069b      	lsls	r3, r3, #26
 8008a5a:	4968      	ldr	r1, [pc, #416]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a60:	e06a      	b.n	8008b38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a62:	4b66      	ldr	r3, [pc, #408]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	061b      	lsls	r3, r3, #24
 8008a70:	4962      	ldr	r1, [pc, #392]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a76:	e05f      	b.n	8008b38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d042      	beq.n	8008b06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a80:	4b5e      	ldr	r3, [pc, #376]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a5d      	ldr	r2, [pc, #372]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8c:	f7fa fb86 	bl	800319c <HAL_GetTick>
 8008a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a92:	e008      	b.n	8008aa6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a94:	f7fa fb82 	bl	800319c <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e280      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008aa6:	4b55      	ldr	r3, [pc, #340]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0f0      	beq.n	8008a94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ab2:	f7fa fb7f 	bl	80031b4 <HAL_GetREVID>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f241 0203 	movw	r2, #4099	; 0x1003
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d817      	bhi.n	8008af0 <HAL_RCC_OscConfig+0x3ec>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	d108      	bne.n	8008ada <HAL_RCC_OscConfig+0x3d6>
 8008ac8:	4b4c      	ldr	r3, [pc, #304]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008ad0:	4a4a      	ldr	r2, [pc, #296]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008ad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ad6:	6053      	str	r3, [r2, #4]
 8008ad8:	e02e      	b.n	8008b38 <HAL_RCC_OscConfig+0x434>
 8008ada:	4b48      	ldr	r3, [pc, #288]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	069b      	lsls	r3, r3, #26
 8008ae8:	4944      	ldr	r1, [pc, #272]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	604b      	str	r3, [r1, #4]
 8008aee:	e023      	b.n	8008b38 <HAL_RCC_OscConfig+0x434>
 8008af0:	4b42      	ldr	r3, [pc, #264]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	061b      	lsls	r3, r3, #24
 8008afe:	493f      	ldr	r1, [pc, #252]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	60cb      	str	r3, [r1, #12]
 8008b04:	e018      	b.n	8008b38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b06:	4b3d      	ldr	r3, [pc, #244]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a3c      	ldr	r2, [pc, #240]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b12:	f7fa fb43 	bl	800319c <HAL_GetTick>
 8008b16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b18:	e008      	b.n	8008b2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b1a:	f7fa fb3f 	bl	800319c <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d901      	bls.n	8008b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e23d      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b2c:	4b33      	ldr	r3, [pc, #204]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1f0      	bne.n	8008b1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d036      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d019      	beq.n	8008b80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b4c:	4b2b      	ldr	r3, [pc, #172]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b50:	4a2a      	ldr	r2, [pc, #168]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008b52:	f043 0301 	orr.w	r3, r3, #1
 8008b56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b58:	f7fa fb20 	bl	800319c <HAL_GetTick>
 8008b5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b60:	f7fa fb1c 	bl	800319c <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e21a      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b72:	4b22      	ldr	r3, [pc, #136]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0f0      	beq.n	8008b60 <HAL_RCC_OscConfig+0x45c>
 8008b7e:	e018      	b.n	8008bb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b80:	4b1e      	ldr	r3, [pc, #120]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b84:	4a1d      	ldr	r2, [pc, #116]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008b86:	f023 0301 	bic.w	r3, r3, #1
 8008b8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b8c:	f7fa fb06 	bl	800319c <HAL_GetTick>
 8008b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b94:	f7fa fb02 	bl	800319c <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e200      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ba6:	4b15      	ldr	r3, [pc, #84]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f0      	bne.n	8008b94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d039      	beq.n	8008c32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d01c      	beq.n	8008c00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a0c      	ldr	r2, [pc, #48]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bd2:	f7fa fae3 	bl	800319c <HAL_GetTick>
 8008bd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bd8:	e008      	b.n	8008bec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bda:	f7fa fadf 	bl	800319c <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d901      	bls.n	8008bec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e1dd      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bec:	4b03      	ldr	r3, [pc, #12]	; (8008bfc <HAL_RCC_OscConfig+0x4f8>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0f0      	beq.n	8008bda <HAL_RCC_OscConfig+0x4d6>
 8008bf8:	e01b      	b.n	8008c32 <HAL_RCC_OscConfig+0x52e>
 8008bfa:	bf00      	nop
 8008bfc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c00:	4b9b      	ldr	r3, [pc, #620]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a9a      	ldr	r2, [pc, #616]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c0c:	f7fa fac6 	bl	800319c <HAL_GetTick>
 8008c10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c12:	e008      	b.n	8008c26 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c14:	f7fa fac2 	bl	800319c <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e1c0      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c26:	4b92      	ldr	r3, [pc, #584]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1f0      	bne.n	8008c14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0304 	and.w	r3, r3, #4
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 8081 	beq.w	8008d42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c40:	4b8c      	ldr	r3, [pc, #560]	; (8008e74 <HAL_RCC_OscConfig+0x770>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a8b      	ldr	r2, [pc, #556]	; (8008e74 <HAL_RCC_OscConfig+0x770>)
 8008c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c4c:	f7fa faa6 	bl	800319c <HAL_GetTick>
 8008c50:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c52:	e008      	b.n	8008c66 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c54:	f7fa faa2 	bl	800319c <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	2b64      	cmp	r3, #100	; 0x64
 8008c60:	d901      	bls.n	8008c66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e1a0      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c66:	4b83      	ldr	r3, [pc, #524]	; (8008e74 <HAL_RCC_OscConfig+0x770>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0f0      	beq.n	8008c54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d106      	bne.n	8008c88 <HAL_RCC_OscConfig+0x584>
 8008c7a:	4b7d      	ldr	r3, [pc, #500]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7e:	4a7c      	ldr	r2, [pc, #496]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008c80:	f043 0301 	orr.w	r3, r3, #1
 8008c84:	6713      	str	r3, [r2, #112]	; 0x70
 8008c86:	e02d      	b.n	8008ce4 <HAL_RCC_OscConfig+0x5e0>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10c      	bne.n	8008caa <HAL_RCC_OscConfig+0x5a6>
 8008c90:	4b77      	ldr	r3, [pc, #476]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c94:	4a76      	ldr	r2, [pc, #472]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c9c:	4b74      	ldr	r3, [pc, #464]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca0:	4a73      	ldr	r2, [pc, #460]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008ca2:	f023 0304 	bic.w	r3, r3, #4
 8008ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca8:	e01c      	b.n	8008ce4 <HAL_RCC_OscConfig+0x5e0>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	2b05      	cmp	r3, #5
 8008cb0:	d10c      	bne.n	8008ccc <HAL_RCC_OscConfig+0x5c8>
 8008cb2:	4b6f      	ldr	r3, [pc, #444]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb6:	4a6e      	ldr	r2, [pc, #440]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008cb8:	f043 0304 	orr.w	r3, r3, #4
 8008cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cbe:	4b6c      	ldr	r3, [pc, #432]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc2:	4a6b      	ldr	r2, [pc, #428]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008cc4:	f043 0301 	orr.w	r3, r3, #1
 8008cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8008cca:	e00b      	b.n	8008ce4 <HAL_RCC_OscConfig+0x5e0>
 8008ccc:	4b68      	ldr	r3, [pc, #416]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd0:	4a67      	ldr	r2, [pc, #412]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008cd2:	f023 0301 	bic.w	r3, r3, #1
 8008cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cd8:	4b65      	ldr	r3, [pc, #404]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cdc:	4a64      	ldr	r2, [pc, #400]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008cde:	f023 0304 	bic.w	r3, r3, #4
 8008ce2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d015      	beq.n	8008d18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cec:	f7fa fa56 	bl	800319c <HAL_GetTick>
 8008cf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cf2:	e00a      	b.n	8008d0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cf4:	f7fa fa52 	bl	800319c <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e14e      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d0a:	4b59      	ldr	r3, [pc, #356]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0ee      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x5f0>
 8008d16:	e014      	b.n	8008d42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d18:	f7fa fa40 	bl	800319c <HAL_GetTick>
 8008d1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d1e:	e00a      	b.n	8008d36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d20:	f7fa fa3c 	bl	800319c <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e138      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d36:	4b4e      	ldr	r3, [pc, #312]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1ee      	bne.n	8008d20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 812d 	beq.w	8008fa6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d4c:	4b48      	ldr	r3, [pc, #288]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d54:	2b18      	cmp	r3, #24
 8008d56:	f000 80bd 	beq.w	8008ed4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	f040 809e 	bne.w	8008ea0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d64:	4b42      	ldr	r3, [pc, #264]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a41      	ldr	r2, [pc, #260]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d70:	f7fa fa14 	bl	800319c <HAL_GetTick>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d76:	e008      	b.n	8008d8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d78:	f7fa fa10 	bl	800319c <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d901      	bls.n	8008d8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e10e      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d8a:	4b39      	ldr	r3, [pc, #228]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1f0      	bne.n	8008d78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d96:	4b36      	ldr	r3, [pc, #216]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d9a:	4b37      	ldr	r3, [pc, #220]	; (8008e78 <HAL_RCC_OscConfig+0x774>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008da6:	0112      	lsls	r2, r2, #4
 8008da8:	430a      	orrs	r2, r1
 8008daa:	4931      	ldr	r1, [pc, #196]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	628b      	str	r3, [r1, #40]	; 0x28
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	3b01      	subs	r3, #1
 8008db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	025b      	lsls	r3, r3, #9
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	041b      	lsls	r3, r3, #16
 8008dce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	061b      	lsls	r3, r3, #24
 8008ddc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008de0:	4923      	ldr	r1, [pc, #140]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008de6:	4b22      	ldr	r3, [pc, #136]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dea:	4a21      	ldr	r2, [pc, #132]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008dec:	f023 0301 	bic.w	r3, r3, #1
 8008df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008df2:	4b1f      	ldr	r3, [pc, #124]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008df6:	4b21      	ldr	r3, [pc, #132]	; (8008e7c <HAL_RCC_OscConfig+0x778>)
 8008df8:	4013      	ands	r3, r2
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008dfe:	00d2      	lsls	r2, r2, #3
 8008e00:	491b      	ldr	r1, [pc, #108]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e06:	4b1a      	ldr	r3, [pc, #104]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	f023 020c 	bic.w	r2, r3, #12
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	4917      	ldr	r1, [pc, #92]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e18:	4b15      	ldr	r3, [pc, #84]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1c:	f023 0202 	bic.w	r2, r3, #2
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e24:	4912      	ldr	r1, [pc, #72]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	4a10      	ldr	r2, [pc, #64]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e36:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	4a0d      	ldr	r2, [pc, #52]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e42:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	4a0a      	ldr	r2, [pc, #40]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008e4e:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e52:	4a07      	ldr	r2, [pc, #28]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e54:	f043 0301 	orr.w	r3, r3, #1
 8008e58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e5a:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a04      	ldr	r2, [pc, #16]	; (8008e70 <HAL_RCC_OscConfig+0x76c>)
 8008e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e66:	f7fa f999 	bl	800319c <HAL_GetTick>
 8008e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e6c:	e011      	b.n	8008e92 <HAL_RCC_OscConfig+0x78e>
 8008e6e:	bf00      	nop
 8008e70:	58024400 	.word	0x58024400
 8008e74:	58024800 	.word	0x58024800
 8008e78:	fffffc0c 	.word	0xfffffc0c
 8008e7c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e80:	f7fa f98c 	bl	800319c <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d901      	bls.n	8008e92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e08a      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e92:	4b47      	ldr	r3, [pc, #284]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0f0      	beq.n	8008e80 <HAL_RCC_OscConfig+0x77c>
 8008e9e:	e082      	b.n	8008fa6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ea0:	4b43      	ldr	r3, [pc, #268]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a42      	ldr	r2, [pc, #264]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eac:	f7fa f976 	bl	800319c <HAL_GetTick>
 8008eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eb2:	e008      	b.n	8008ec6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eb4:	f7fa f972 	bl	800319c <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e070      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ec6:	4b3a      	ldr	r3, [pc, #232]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f0      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x7b0>
 8008ed2:	e068      	b.n	8008fa6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ed4:	4b36      	ldr	r3, [pc, #216]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008eda:	4b35      	ldr	r3, [pc, #212]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d031      	beq.n	8008f4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f003 0203 	and.w	r2, r3, #3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d12a      	bne.n	8008f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	091b      	lsrs	r3, r3, #4
 8008efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d122      	bne.n	8008f4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d11a      	bne.n	8008f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	0a5b      	lsrs	r3, r3, #9
 8008f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d111      	bne.n	8008f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	0c1b      	lsrs	r3, r3, #16
 8008f2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d108      	bne.n	8008f4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	0e1b      	lsrs	r3, r3, #24
 8008f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d001      	beq.n	8008f50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e02b      	b.n	8008fa8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008f50:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f54:	08db      	lsrs	r3, r3, #3
 8008f56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d01f      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008f66:	4b12      	ldr	r3, [pc, #72]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	4a11      	ldr	r2, [pc, #68]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008f6c:	f023 0301 	bic.w	r3, r3, #1
 8008f70:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f72:	f7fa f913 	bl	800319c <HAL_GetTick>
 8008f76:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008f78:	bf00      	nop
 8008f7a:	f7fa f90f 	bl	800319c <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d0f9      	beq.n	8008f7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f86:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f8a:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <HAL_RCC_OscConfig+0x8b0>)
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f92:	00d2      	lsls	r2, r2, #3
 8008f94:	4906      	ldr	r1, [pc, #24]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008f9a:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	4a04      	ldr	r2, [pc, #16]	; (8008fb0 <HAL_RCC_OscConfig+0x8ac>)
 8008fa0:	f043 0301 	orr.w	r3, r3, #1
 8008fa4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3730      	adds	r7, #48	; 0x30
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	58024400 	.word	0x58024400
 8008fb4:	ffff0007 	.word	0xffff0007

08008fb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e19c      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fcc:	4b8a      	ldr	r3, [pc, #552]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 030f 	and.w	r3, r3, #15
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d910      	bls.n	8008ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fda:	4b87      	ldr	r3, [pc, #540]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f023 020f 	bic.w	r2, r3, #15
 8008fe2:	4985      	ldr	r1, [pc, #532]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fea:	4b83      	ldr	r3, [pc, #524]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d001      	beq.n	8008ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e184      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0304 	and.w	r3, r3, #4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d010      	beq.n	800902a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691a      	ldr	r2, [r3, #16]
 800900c:	4b7b      	ldr	r3, [pc, #492]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009014:	429a      	cmp	r2, r3
 8009016:	d908      	bls.n	800902a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009018:	4b78      	ldr	r3, [pc, #480]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	4975      	ldr	r1, [pc, #468]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009026:	4313      	orrs	r3, r2
 8009028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0308 	and.w	r3, r3, #8
 8009032:	2b00      	cmp	r3, #0
 8009034:	d010      	beq.n	8009058 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	695a      	ldr	r2, [r3, #20]
 800903a:	4b70      	ldr	r3, [pc, #448]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009042:	429a      	cmp	r2, r3
 8009044:	d908      	bls.n	8009058 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009046:	4b6d      	ldr	r3, [pc, #436]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	496a      	ldr	r1, [pc, #424]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009054:	4313      	orrs	r3, r2
 8009056:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0310 	and.w	r3, r3, #16
 8009060:	2b00      	cmp	r3, #0
 8009062:	d010      	beq.n	8009086 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699a      	ldr	r2, [r3, #24]
 8009068:	4b64      	ldr	r3, [pc, #400]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009070:	429a      	cmp	r2, r3
 8009072:	d908      	bls.n	8009086 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009074:	4b61      	ldr	r3, [pc, #388]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	495e      	ldr	r1, [pc, #376]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009082:	4313      	orrs	r3, r2
 8009084:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	d010      	beq.n	80090b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	69da      	ldr	r2, [r3, #28]
 8009096:	4b59      	ldr	r3, [pc, #356]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800909e:	429a      	cmp	r2, r3
 80090a0:	d908      	bls.n	80090b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80090a2:	4b56      	ldr	r3, [pc, #344]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	4953      	ldr	r1, [pc, #332]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d010      	beq.n	80090e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	4b4d      	ldr	r3, [pc, #308]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d908      	bls.n	80090e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090d0:	4b4a      	ldr	r3, [pc, #296]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	f023 020f 	bic.w	r2, r3, #15
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	4947      	ldr	r1, [pc, #284]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d055      	beq.n	800919a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090ee:	4b43      	ldr	r3, [pc, #268]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	4940      	ldr	r1, [pc, #256]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d107      	bne.n	8009118 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009108:	4b3c      	ldr	r3, [pc, #240]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d121      	bne.n	8009158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e0f6      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2b03      	cmp	r3, #3
 800911e:	d107      	bne.n	8009130 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009120:	4b36      	ldr	r3, [pc, #216]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d115      	bne.n	8009158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e0ea      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d107      	bne.n	8009148 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009138:	4b30      	ldr	r3, [pc, #192]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009140:	2b00      	cmp	r3, #0
 8009142:	d109      	bne.n	8009158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e0de      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009148:	4b2c      	ldr	r3, [pc, #176]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e0d6      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009158:	4b28      	ldr	r3, [pc, #160]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f023 0207 	bic.w	r2, r3, #7
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	4925      	ldr	r1, [pc, #148]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 8009166:	4313      	orrs	r3, r2
 8009168:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800916a:	f7fa f817 	bl	800319c <HAL_GetTick>
 800916e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009170:	e00a      	b.n	8009188 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009172:	f7fa f813 	bl	800319c <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009180:	4293      	cmp	r3, r2
 8009182:	d901      	bls.n	8009188 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e0be      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009188:	4b1c      	ldr	r3, [pc, #112]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	429a      	cmp	r2, r3
 8009198:	d1eb      	bne.n	8009172 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d010      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	4b14      	ldr	r3, [pc, #80]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d208      	bcs.n	80091c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091b6:	4b11      	ldr	r3, [pc, #68]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	f023 020f 	bic.w	r2, r3, #15
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	490e      	ldr	r1, [pc, #56]	; (80091fc <HAL_RCC_ClockConfig+0x244>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091c8:	4b0b      	ldr	r3, [pc, #44]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d214      	bcs.n	8009200 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091d6:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f023 020f 	bic.w	r2, r3, #15
 80091de:	4906      	ldr	r1, [pc, #24]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091e6:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <HAL_RCC_ClockConfig+0x240>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 030f 	and.w	r3, r3, #15
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d005      	beq.n	8009200 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e086      	b.n	8009306 <HAL_RCC_ClockConfig+0x34e>
 80091f8:	52002000 	.word	0x52002000
 80091fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b00      	cmp	r3, #0
 800920a:	d010      	beq.n	800922e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691a      	ldr	r2, [r3, #16]
 8009210:	4b3f      	ldr	r3, [pc, #252]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009218:	429a      	cmp	r2, r3
 800921a:	d208      	bcs.n	800922e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800921c:	4b3c      	ldr	r3, [pc, #240]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	4939      	ldr	r1, [pc, #228]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800922a:	4313      	orrs	r3, r2
 800922c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0308 	and.w	r3, r3, #8
 8009236:	2b00      	cmp	r3, #0
 8009238:	d010      	beq.n	800925c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695a      	ldr	r2, [r3, #20]
 800923e:	4b34      	ldr	r3, [pc, #208]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009246:	429a      	cmp	r2, r3
 8009248:	d208      	bcs.n	800925c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800924a:	4b31      	ldr	r3, [pc, #196]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	492e      	ldr	r1, [pc, #184]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 8009258:	4313      	orrs	r3, r2
 800925a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0310 	and.w	r3, r3, #16
 8009264:	2b00      	cmp	r3, #0
 8009266:	d010      	beq.n	800928a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	699a      	ldr	r2, [r3, #24]
 800926c:	4b28      	ldr	r3, [pc, #160]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009274:	429a      	cmp	r2, r3
 8009276:	d208      	bcs.n	800928a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009278:	4b25      	ldr	r3, [pc, #148]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	4922      	ldr	r1, [pc, #136]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 8009286:	4313      	orrs	r3, r2
 8009288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b00      	cmp	r3, #0
 8009294:	d010      	beq.n	80092b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69da      	ldr	r2, [r3, #28]
 800929a:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d208      	bcs.n	80092b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80092a6:	4b1a      	ldr	r3, [pc, #104]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	4917      	ldr	r1, [pc, #92]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092b8:	f000 f834 	bl	8009324 <HAL_RCC_GetSysClockFreq>
 80092bc:	4602      	mov	r2, r0
 80092be:	4b14      	ldr	r3, [pc, #80]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	0a1b      	lsrs	r3, r3, #8
 80092c4:	f003 030f 	and.w	r3, r3, #15
 80092c8:	4912      	ldr	r1, [pc, #72]	; (8009314 <HAL_RCC_ClockConfig+0x35c>)
 80092ca:	5ccb      	ldrb	r3, [r1, r3]
 80092cc:	f003 031f 	and.w	r3, r3, #31
 80092d0:	fa22 f303 	lsr.w	r3, r2, r3
 80092d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092d6:	4b0e      	ldr	r3, [pc, #56]	; (8009310 <HAL_RCC_ClockConfig+0x358>)
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	f003 030f 	and.w	r3, r3, #15
 80092de:	4a0d      	ldr	r2, [pc, #52]	; (8009314 <HAL_RCC_ClockConfig+0x35c>)
 80092e0:	5cd3      	ldrb	r3, [r2, r3]
 80092e2:	f003 031f 	and.w	r3, r3, #31
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	fa22 f303 	lsr.w	r3, r2, r3
 80092ec:	4a0a      	ldr	r2, [pc, #40]	; (8009318 <HAL_RCC_ClockConfig+0x360>)
 80092ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092f0:	4a0a      	ldr	r2, [pc, #40]	; (800931c <HAL_RCC_ClockConfig+0x364>)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80092f6:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <HAL_RCC_ClockConfig+0x368>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7f9 fc86 	bl	8002c0c <HAL_InitTick>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	58024400 	.word	0x58024400
 8009314:	08015888 	.word	0x08015888
 8009318:	2400008c 	.word	0x2400008c
 800931c:	24000088 	.word	0x24000088
 8009320:	24000090 	.word	0x24000090

08009324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009324:	b480      	push	{r7}
 8009326:	b089      	sub	sp, #36	; 0x24
 8009328:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800932a:	4bb3      	ldr	r3, [pc, #716]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009332:	2b18      	cmp	r3, #24
 8009334:	f200 8155 	bhi.w	80095e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009338:	a201      	add	r2, pc, #4	; (adr r2, 8009340 <HAL_RCC_GetSysClockFreq+0x1c>)
 800933a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933e:	bf00      	nop
 8009340:	080093a5 	.word	0x080093a5
 8009344:	080095e3 	.word	0x080095e3
 8009348:	080095e3 	.word	0x080095e3
 800934c:	080095e3 	.word	0x080095e3
 8009350:	080095e3 	.word	0x080095e3
 8009354:	080095e3 	.word	0x080095e3
 8009358:	080095e3 	.word	0x080095e3
 800935c:	080095e3 	.word	0x080095e3
 8009360:	080093cb 	.word	0x080093cb
 8009364:	080095e3 	.word	0x080095e3
 8009368:	080095e3 	.word	0x080095e3
 800936c:	080095e3 	.word	0x080095e3
 8009370:	080095e3 	.word	0x080095e3
 8009374:	080095e3 	.word	0x080095e3
 8009378:	080095e3 	.word	0x080095e3
 800937c:	080095e3 	.word	0x080095e3
 8009380:	080093d1 	.word	0x080093d1
 8009384:	080095e3 	.word	0x080095e3
 8009388:	080095e3 	.word	0x080095e3
 800938c:	080095e3 	.word	0x080095e3
 8009390:	080095e3 	.word	0x080095e3
 8009394:	080095e3 	.word	0x080095e3
 8009398:	080095e3 	.word	0x080095e3
 800939c:	080095e3 	.word	0x080095e3
 80093a0:	080093d7 	.word	0x080093d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093a4:	4b94      	ldr	r3, [pc, #592]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0320 	and.w	r3, r3, #32
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d009      	beq.n	80093c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093b0:	4b91      	ldr	r3, [pc, #580]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	08db      	lsrs	r3, r3, #3
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	4a90      	ldr	r2, [pc, #576]	; (80095fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093bc:	fa22 f303 	lsr.w	r3, r2, r3
 80093c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80093c2:	e111      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80093c4:	4b8d      	ldr	r3, [pc, #564]	; (80095fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093c6:	61bb      	str	r3, [r7, #24]
      break;
 80093c8:	e10e      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80093ca:	4b8d      	ldr	r3, [pc, #564]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093cc:	61bb      	str	r3, [r7, #24]
      break;
 80093ce:	e10b      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80093d0:	4b8c      	ldr	r3, [pc, #560]	; (8009604 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093d2:	61bb      	str	r3, [r7, #24]
      break;
 80093d4:	e108      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093d6:	4b88      	ldr	r3, [pc, #544]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093da:	f003 0303 	and.w	r3, r3, #3
 80093de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80093e0:	4b85      	ldr	r3, [pc, #532]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e4:	091b      	lsrs	r3, r3, #4
 80093e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093ec:	4b82      	ldr	r3, [pc, #520]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80093f6:	4b80      	ldr	r3, [pc, #512]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	08db      	lsrs	r3, r3, #3
 80093fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	fb02 f303 	mul.w	r3, r2, r3
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 80e1 	beq.w	80095dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b02      	cmp	r3, #2
 800941e:	f000 8083 	beq.w	8009528 <HAL_RCC_GetSysClockFreq+0x204>
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b02      	cmp	r3, #2
 8009426:	f200 80a1 	bhi.w	800956c <HAL_RCC_GetSysClockFreq+0x248>
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <HAL_RCC_GetSysClockFreq+0x114>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d056      	beq.n	80094e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009436:	e099      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009438:	4b6f      	ldr	r3, [pc, #444]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0320 	and.w	r3, r3, #32
 8009440:	2b00      	cmp	r3, #0
 8009442:	d02d      	beq.n	80094a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009444:	4b6c      	ldr	r3, [pc, #432]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	08db      	lsrs	r3, r3, #3
 800944a:	f003 0303 	and.w	r3, r3, #3
 800944e:	4a6b      	ldr	r2, [pc, #428]	; (80095fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009450:	fa22 f303 	lsr.w	r3, r2, r3
 8009454:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	ee07 3a90 	vmov	s15, r3
 800945c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800946e:	4b62      	ldr	r3, [pc, #392]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800947e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009482:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800948a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800948e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800949a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800949e:	e087      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800960c <HAL_RCC_GetSysClockFreq+0x2e8>
 80094ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094b2:	4b51      	ldr	r3, [pc, #324]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ba:	ee07 3a90 	vmov	s15, r3
 80094be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80094c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009608 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094e2:	e065      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009610 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f6:	4b40      	ldr	r3, [pc, #256]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009506:	ed97 6a02 	vldr	s12, [r7, #8]
 800950a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009608 <HAL_RCC_GetSysClockFreq+0x2e4>
 800950e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800951a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800951e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009526:	e043      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009532:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009614 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800953a:	4b2f      	ldr	r3, [pc, #188]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009542:	ee07 3a90 	vmov	s15, r3
 8009546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800954a:	ed97 6a02 	vldr	s12, [r7, #8]
 800954e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800955a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800955e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800956a:	e021      	b.n	80095b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009576:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009610 <HAL_RCC_GetSysClockFreq+0x2ec>
 800957a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800957e:	4b1e      	ldr	r3, [pc, #120]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009586:	ee07 3a90 	vmov	s15, r3
 800958a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009592:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800959a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800959e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80095b0:	4b11      	ldr	r3, [pc, #68]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b4:	0a5b      	lsrs	r3, r3, #9
 80095b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ba:	3301      	adds	r3, #1
 80095bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	ee07 3a90 	vmov	s15, r3
 80095c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80095cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095d4:	ee17 3a90 	vmov	r3, s15
 80095d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80095da:	e005      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	61bb      	str	r3, [r7, #24]
      break;
 80095e0:	e002      	b.n	80095e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80095e2:	4b07      	ldr	r3, [pc, #28]	; (8009600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095e4:	61bb      	str	r3, [r7, #24]
      break;
 80095e6:	bf00      	nop
  }

  return sysclockfreq;
 80095e8:	69bb      	ldr	r3, [r7, #24]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3724      	adds	r7, #36	; 0x24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	58024400 	.word	0x58024400
 80095fc:	03d09000 	.word	0x03d09000
 8009600:	003d0900 	.word	0x003d0900
 8009604:	017d7840 	.word	0x017d7840
 8009608:	46000000 	.word	0x46000000
 800960c:	4c742400 	.word	0x4c742400
 8009610:	4a742400 	.word	0x4a742400
 8009614:	4bbebc20 	.word	0x4bbebc20

08009618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800961e:	f7ff fe81 	bl	8009324 <HAL_RCC_GetSysClockFreq>
 8009622:	4602      	mov	r2, r0
 8009624:	4b10      	ldr	r3, [pc, #64]	; (8009668 <HAL_RCC_GetHCLKFreq+0x50>)
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	0a1b      	lsrs	r3, r3, #8
 800962a:	f003 030f 	and.w	r3, r3, #15
 800962e:	490f      	ldr	r1, [pc, #60]	; (800966c <HAL_RCC_GetHCLKFreq+0x54>)
 8009630:	5ccb      	ldrb	r3, [r1, r3]
 8009632:	f003 031f 	and.w	r3, r3, #31
 8009636:	fa22 f303 	lsr.w	r3, r2, r3
 800963a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800963c:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <HAL_RCC_GetHCLKFreq+0x50>)
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	4a09      	ldr	r2, [pc, #36]	; (800966c <HAL_RCC_GetHCLKFreq+0x54>)
 8009646:	5cd3      	ldrb	r3, [r2, r3]
 8009648:	f003 031f 	and.w	r3, r3, #31
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	fa22 f303 	lsr.w	r3, r2, r3
 8009652:	4a07      	ldr	r2, [pc, #28]	; (8009670 <HAL_RCC_GetHCLKFreq+0x58>)
 8009654:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009656:	4a07      	ldr	r2, [pc, #28]	; (8009674 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800965c:	4b04      	ldr	r3, [pc, #16]	; (8009670 <HAL_RCC_GetHCLKFreq+0x58>)
 800965e:	681b      	ldr	r3, [r3, #0]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	58024400 	.word	0x58024400
 800966c:	08015888 	.word	0x08015888
 8009670:	2400008c 	.word	0x2400008c
 8009674:	24000088 	.word	0x24000088

08009678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800967c:	f7ff ffcc 	bl	8009618 <HAL_RCC_GetHCLKFreq>
 8009680:	4602      	mov	r2, r0
 8009682:	4b06      	ldr	r3, [pc, #24]	; (800969c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	091b      	lsrs	r3, r3, #4
 8009688:	f003 0307 	and.w	r3, r3, #7
 800968c:	4904      	ldr	r1, [pc, #16]	; (80096a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800968e:	5ccb      	ldrb	r3, [r1, r3]
 8009690:	f003 031f 	and.w	r3, r3, #31
 8009694:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009698:	4618      	mov	r0, r3
 800969a:	bd80      	pop	{r7, pc}
 800969c:	58024400 	.word	0x58024400
 80096a0:	08015888 	.word	0x08015888

080096a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80096a8:	f7ff ffb6 	bl	8009618 <HAL_RCC_GetHCLKFreq>
 80096ac:	4602      	mov	r2, r0
 80096ae:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	0a1b      	lsrs	r3, r3, #8
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	4904      	ldr	r1, [pc, #16]	; (80096cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80096ba:	5ccb      	ldrb	r3, [r1, r3]
 80096bc:	f003 031f 	and.w	r3, r3, #31
 80096c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	58024400 	.word	0x58024400
 80096cc:	08015888 	.word	0x08015888

080096d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	223f      	movs	r2, #63	; 0x3f
 80096de:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80096e0:	4b1a      	ldr	r3, [pc, #104]	; (800974c <HAL_RCC_GetClockConfig+0x7c>)
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	f003 0207 	and.w	r2, r3, #7
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80096ec:	4b17      	ldr	r3, [pc, #92]	; (800974c <HAL_RCC_GetClockConfig+0x7c>)
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80096f8:	4b14      	ldr	r3, [pc, #80]	; (800974c <HAL_RCC_GetClockConfig+0x7c>)
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	f003 020f 	and.w	r2, r3, #15
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009704:	4b11      	ldr	r3, [pc, #68]	; (800974c <HAL_RCC_GetClockConfig+0x7c>)
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009710:	4b0e      	ldr	r3, [pc, #56]	; (800974c <HAL_RCC_GetClockConfig+0x7c>)
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800971c:	4b0b      	ldr	r3, [pc, #44]	; (800974c <HAL_RCC_GetClockConfig+0x7c>)
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009728:	4b08      	ldr	r3, [pc, #32]	; (800974c <HAL_RCC_GetClockConfig+0x7c>)
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009734:	4b06      	ldr	r3, [pc, #24]	; (8009750 <HAL_RCC_GetClockConfig+0x80>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 020f 	and.w	r2, r3, #15
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	601a      	str	r2, [r3, #0]
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	58024400 	.word	0x58024400
 8009750:	52002000 	.word	0x52002000

08009754 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009758:	b0ca      	sub	sp, #296	; 0x128
 800975a:	af00      	add	r7, sp, #0
 800975c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009760:	2300      	movs	r3, #0
 8009762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009766:	2300      	movs	r3, #0
 8009768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800976c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009778:	2500      	movs	r5, #0
 800977a:	ea54 0305 	orrs.w	r3, r4, r5
 800977e:	d049      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009786:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800978a:	d02f      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800978c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009790:	d828      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009796:	d01a      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800979c:	d822      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80097a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097a6:	d007      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80097a8:	e01c      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097aa:	4bb8      	ldr	r3, [pc, #736]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ae:	4ab7      	ldr	r2, [pc, #732]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097b6:	e01a      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097bc:	3308      	adds	r3, #8
 80097be:	2102      	movs	r1, #2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f002 fb61 	bl	800be88 <RCCEx_PLL2_Config>
 80097c6:	4603      	mov	r3, r0
 80097c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097cc:	e00f      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d2:	3328      	adds	r3, #40	; 0x28
 80097d4:	2102      	movs	r1, #2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f002 fc08 	bl	800bfec <RCCEx_PLL3_Config>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097e2:	e004      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097ea:	e000      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80097ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80097f6:	4ba5      	ldr	r3, [pc, #660]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80097fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009804:	4aa1      	ldr	r2, [pc, #644]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009806:	430b      	orrs	r3, r1
 8009808:	6513      	str	r3, [r2, #80]	; 0x50
 800980a:	e003      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800980c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009810:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009820:	f04f 0900 	mov.w	r9, #0
 8009824:	ea58 0309 	orrs.w	r3, r8, r9
 8009828:	d047      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800982a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800982e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009830:	2b04      	cmp	r3, #4
 8009832:	d82a      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009834:	a201      	add	r2, pc, #4	; (adr r2, 800983c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983a:	bf00      	nop
 800983c:	08009851 	.word	0x08009851
 8009840:	0800985f 	.word	0x0800985f
 8009844:	08009875 	.word	0x08009875
 8009848:	08009893 	.word	0x08009893
 800984c:	08009893 	.word	0x08009893
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009850:	4b8e      	ldr	r3, [pc, #568]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	4a8d      	ldr	r2, [pc, #564]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800985a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800985c:	e01a      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800985e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009862:	3308      	adds	r3, #8
 8009864:	2100      	movs	r1, #0
 8009866:	4618      	mov	r0, r3
 8009868:	f002 fb0e 	bl	800be88 <RCCEx_PLL2_Config>
 800986c:	4603      	mov	r3, r0
 800986e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009872:	e00f      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009878:	3328      	adds	r3, #40	; 0x28
 800987a:	2100      	movs	r1, #0
 800987c:	4618      	mov	r0, r3
 800987e:	f002 fbb5 	bl	800bfec <RCCEx_PLL3_Config>
 8009882:	4603      	mov	r3, r0
 8009884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009888:	e004      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009890:	e000      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10a      	bne.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800989c:	4b7b      	ldr	r3, [pc, #492]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800989e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a0:	f023 0107 	bic.w	r1, r3, #7
 80098a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098aa:	4a78      	ldr	r2, [pc, #480]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098ac:	430b      	orrs	r3, r1
 80098ae:	6513      	str	r3, [r2, #80]	; 0x50
 80098b0:	e003      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80098ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80098c6:	f04f 0b00 	mov.w	fp, #0
 80098ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80098ce:	d04c      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098da:	d030      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80098dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098e0:	d829      	bhi.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80098e2:	2bc0      	cmp	r3, #192	; 0xc0
 80098e4:	d02d      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80098e6:	2bc0      	cmp	r3, #192	; 0xc0
 80098e8:	d825      	bhi.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80098ea:	2b80      	cmp	r3, #128	; 0x80
 80098ec:	d018      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80098ee:	2b80      	cmp	r3, #128	; 0x80
 80098f0:	d821      	bhi.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80098f6:	2b40      	cmp	r3, #64	; 0x40
 80098f8:	d007      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80098fa:	e01c      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098fc:	4b63      	ldr	r3, [pc, #396]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	4a62      	ldr	r2, [pc, #392]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009908:	e01c      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800990a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990e:	3308      	adds	r3, #8
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f002 fab8 	bl	800be88 <RCCEx_PLL2_Config>
 8009918:	4603      	mov	r3, r0
 800991a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800991e:	e011      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009924:	3328      	adds	r3, #40	; 0x28
 8009926:	2100      	movs	r1, #0
 8009928:	4618      	mov	r0, r3
 800992a:	f002 fb5f 	bl	800bfec <RCCEx_PLL3_Config>
 800992e:	4603      	mov	r3, r0
 8009930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009934:	e006      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800993c:	e002      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800993e:	bf00      	nop
 8009940:	e000      	b.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10a      	bne.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800994c:	4b4f      	ldr	r3, [pc, #316]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800994e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009950:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800995a:	4a4c      	ldr	r2, [pc, #304]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800995c:	430b      	orrs	r3, r1
 800995e:	6513      	str	r3, [r2, #80]	; 0x50
 8009960:	e003      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800996a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009976:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800997a:	2300      	movs	r3, #0
 800997c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009980:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009984:	460b      	mov	r3, r1
 8009986:	4313      	orrs	r3, r2
 8009988:	d053      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009996:	d035      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800999c:	d82e      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800999e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099a2:	d031      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80099a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099a8:	d828      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80099aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099ae:	d01a      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80099b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099b4:	d822      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80099ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099be:	d007      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80099c0:	e01c      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099c2:	4b32      	ldr	r3, [pc, #200]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	4a31      	ldr	r2, [pc, #196]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099ce:	e01c      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d4:	3308      	adds	r3, #8
 80099d6:	2100      	movs	r1, #0
 80099d8:	4618      	mov	r0, r3
 80099da:	f002 fa55 	bl	800be88 <RCCEx_PLL2_Config>
 80099de:	4603      	mov	r3, r0
 80099e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80099e4:	e011      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ea:	3328      	adds	r3, #40	; 0x28
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f002 fafc 	bl	800bfec <RCCEx_PLL3_Config>
 80099f4:	4603      	mov	r3, r0
 80099f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099fa:	e006      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a02:	e002      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009a04:	bf00      	nop
 8009a06:	e000      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10b      	bne.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009a12:	4b1e      	ldr	r3, [pc, #120]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a16:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a22:	4a1a      	ldr	r2, [pc, #104]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a24:	430b      	orrs	r3, r1
 8009a26:	6593      	str	r3, [r2, #88]	; 0x58
 8009a28:	e003      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009a3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009a42:	2300      	movs	r3, #0
 8009a44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009a48:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	d056      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a5e:	d038      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a64:	d831      	bhi.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a6a:	d034      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009a6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a70:	d82b      	bhi.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a76:	d01d      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a7c:	d825      	bhi.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d006      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009a82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a86:	d00a      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009a88:	e01f      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a8a:	bf00      	nop
 8009a8c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a90:	4ba2      	ldr	r3, [pc, #648]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a94:	4aa1      	ldr	r2, [pc, #644]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a9c:	e01c      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f002 f9ee 	bl	800be88 <RCCEx_PLL2_Config>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ab2:	e011      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab8:	3328      	adds	r3, #40	; 0x28
 8009aba:	2100      	movs	r1, #0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f002 fa95 	bl	800bfec <RCCEx_PLL3_Config>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ac8:	e006      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ad0:	e002      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009ad2:	bf00      	nop
 8009ad4:	e000      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10b      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009ae0:	4b8e      	ldr	r3, [pc, #568]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009af0:	4a8a      	ldr	r2, [pc, #552]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009af2:	430b      	orrs	r3, r1
 8009af4:	6593      	str	r3, [r2, #88]	; 0x58
 8009af6:	e003      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009afc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b10:	2300      	movs	r3, #0
 8009b12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009b16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	d03a      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b26:	2b30      	cmp	r3, #48	; 0x30
 8009b28:	d01f      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009b2a:	2b30      	cmp	r3, #48	; 0x30
 8009b2c:	d819      	bhi.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	d00c      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009b32:	2b20      	cmp	r3, #32
 8009b34:	d815      	bhi.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d019      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009b3a:	2b10      	cmp	r3, #16
 8009b3c:	d111      	bne.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b3e:	4b77      	ldr	r3, [pc, #476]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b42:	4a76      	ldr	r2, [pc, #472]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009b4a:	e011      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b50:	3308      	adds	r3, #8
 8009b52:	2102      	movs	r1, #2
 8009b54:	4618      	mov	r0, r3
 8009b56:	f002 f997 	bl	800be88 <RCCEx_PLL2_Config>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009b60:	e006      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b68:	e002      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009b6a:	bf00      	nop
 8009b6c:	e000      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009b78:	4b68      	ldr	r3, [pc, #416]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b7c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b86:	4a65      	ldr	r2, [pc, #404]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b8c:	e003      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009ba2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009bac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	d051      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bc0:	d035      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bc6:	d82e      	bhi.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009bc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bcc:	d031      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009bce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bd2:	d828      	bhi.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bd8:	d01a      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bde:	d822      	bhi.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009be8:	d007      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009bea:	e01c      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bec:	4b4b      	ldr	r3, [pc, #300]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	4a4a      	ldr	r2, [pc, #296]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bf8:	e01c      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfe:	3308      	adds	r3, #8
 8009c00:	2100      	movs	r1, #0
 8009c02:	4618      	mov	r0, r3
 8009c04:	f002 f940 	bl	800be88 <RCCEx_PLL2_Config>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c0e:	e011      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c14:	3328      	adds	r3, #40	; 0x28
 8009c16:	2100      	movs	r1, #0
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f002 f9e7 	bl	800bfec <RCCEx_PLL3_Config>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c24:	e006      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c2c:	e002      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009c2e:	bf00      	nop
 8009c30:	e000      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10a      	bne.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c3c:	4b37      	ldr	r3, [pc, #220]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c40:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c4a:	4a34      	ldr	r2, [pc, #208]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c4c:	430b      	orrs	r3, r1
 8009c4e:	6513      	str	r3, [r2, #80]	; 0x50
 8009c50:	e003      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009c66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c70:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009c74:	460b      	mov	r3, r1
 8009c76:	4313      	orrs	r3, r2
 8009c78:	d056      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c84:	d033      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009c86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c8a:	d82c      	bhi.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c90:	d02f      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009c92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c96:	d826      	bhi.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c9c:	d02b      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009c9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ca2:	d820      	bhi.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ca8:	d012      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cae:	d81a      	bhi.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d022      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb8:	d115      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f002 f8e0 	bl	800be88 <RCCEx_PLL2_Config>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009cce:	e015      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd4:	3328      	adds	r3, #40	; 0x28
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f002 f987 	bl	800bfec <RCCEx_PLL3_Config>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ce4:	e00a      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cec:	e006      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009cee:	bf00      	nop
 8009cf0:	e004      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009cf2:	bf00      	nop
 8009cf4:	e002      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009cf6:	bf00      	nop
 8009cf8:	e000      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10d      	bne.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d04:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d08:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d12:	4a02      	ldr	r2, [pc, #8]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d14:	430b      	orrs	r3, r1
 8009d16:	6513      	str	r3, [r2, #80]	; 0x50
 8009d18:	e006      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009d1a:	bf00      	nop
 8009d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4313      	orrs	r3, r2
 8009d46:	d055      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d54:	d033      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d5a:	d82c      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d60:	d02f      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d66:	d826      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d6c:	d02b      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009d6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d72:	d820      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d78:	d012      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d7e:	d81a      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d022      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d88:	d115      	bne.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d8e:	3308      	adds	r3, #8
 8009d90:	2101      	movs	r1, #1
 8009d92:	4618      	mov	r0, r3
 8009d94:	f002 f878 	bl	800be88 <RCCEx_PLL2_Config>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d9e:	e015      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da4:	3328      	adds	r3, #40	; 0x28
 8009da6:	2101      	movs	r1, #1
 8009da8:	4618      	mov	r0, r3
 8009daa:	f002 f91f 	bl	800bfec <RCCEx_PLL3_Config>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009db4:	e00a      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dbc:	e006      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009dbe:	bf00      	nop
 8009dc0:	e004      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009dc2:	bf00      	nop
 8009dc4:	e002      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009dc6:	bf00      	nop
 8009dc8:	e000      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10b      	bne.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009dd4:	4ba3      	ldr	r3, [pc, #652]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009de4:	4a9f      	ldr	r2, [pc, #636]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009de6:	430b      	orrs	r3, r1
 8009de8:	6593      	str	r3, [r2, #88]	; 0x58
 8009dea:	e003      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009df0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e04:	2300      	movs	r3, #0
 8009e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009e0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4313      	orrs	r3, r2
 8009e12:	d037      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e1e:	d00e      	beq.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e24:	d816      	bhi.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d018      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e2e:	d111      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e30:	4b8c      	ldr	r3, [pc, #560]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	4a8b      	ldr	r2, [pc, #556]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e3c:	e00f      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e42:	3308      	adds	r3, #8
 8009e44:	2101      	movs	r1, #1
 8009e46:	4618      	mov	r0, r3
 8009e48:	f002 f81e 	bl	800be88 <RCCEx_PLL2_Config>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e52:	e004      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e5a:	e000      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10a      	bne.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e66:	4b7f      	ldr	r3, [pc, #508]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e6a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e74:	4a7b      	ldr	r2, [pc, #492]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e76:	430b      	orrs	r3, r1
 8009e78:	6513      	str	r3, [r2, #80]	; 0x50
 8009e7a:	e003      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e94:	2300      	movs	r3, #0
 8009e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	d039      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d81c      	bhi.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009eae:	a201      	add	r2, pc, #4	; (adr r2, 8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb4:	08009ef1 	.word	0x08009ef1
 8009eb8:	08009ec5 	.word	0x08009ec5
 8009ebc:	08009ed3 	.word	0x08009ed3
 8009ec0:	08009ef1 	.word	0x08009ef1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec4:	4b67      	ldr	r3, [pc, #412]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	4a66      	ldr	r2, [pc, #408]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ed0:	e00f      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	2102      	movs	r1, #2
 8009eda:	4618      	mov	r0, r3
 8009edc:	f001 ffd4 	bl	800be88 <RCCEx_PLL2_Config>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ee6:	e004      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009eee:	e000      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009efa:	4b5a      	ldr	r3, [pc, #360]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009efe:	f023 0103 	bic.w	r1, r3, #3
 8009f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f08:	4a56      	ldr	r2, [pc, #344]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f0a:	430b      	orrs	r3, r1
 8009f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f0e:	e003      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009f32:	460b      	mov	r3, r1
 8009f34:	4313      	orrs	r3, r2
 8009f36:	f000 809f 	beq.w	800a078 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f3a:	4b4b      	ldr	r3, [pc, #300]	; (800a068 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a4a      	ldr	r2, [pc, #296]	; (800a068 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f46:	f7f9 f929 	bl	800319c <HAL_GetTick>
 8009f4a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f4e:	e00b      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f50:	f7f9 f924 	bl	800319c <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b64      	cmp	r3, #100	; 0x64
 8009f5e:	d903      	bls.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f66:	e005      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f68:	4b3f      	ldr	r3, [pc, #252]	; (800a068 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d0ed      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009f74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d179      	bne.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f7c:	4b39      	ldr	r3, [pc, #228]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f88:	4053      	eors	r3, r2
 8009f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d015      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f92:	4b34      	ldr	r3, [pc, #208]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f9e:	4b31      	ldr	r3, [pc, #196]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa2:	4a30      	ldr	r2, [pc, #192]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fa8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009faa:	4b2e      	ldr	r3, [pc, #184]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fae:	4a2d      	ldr	r2, [pc, #180]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fb4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009fb6:	4a2b      	ldr	r2, [pc, #172]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009fbc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fca:	d118      	bne.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fcc:	f7f9 f8e6 	bl	800319c <HAL_GetTick>
 8009fd0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fd4:	e00d      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fd6:	f7f9 f8e1 	bl	800319c <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009fe0:	1ad2      	subs	r2, r2, r3
 8009fe2:	f241 3388 	movw	r3, #5000	; 0x1388
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d903      	bls.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009fea:	2303      	movs	r3, #3
 8009fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009ff0:	e005      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ff2:	4b1c      	ldr	r3, [pc, #112]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff6:	f003 0302 	and.w	r3, r3, #2
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0eb      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a002:	2b00      	cmp	r3, #0
 800a004:	d129      	bne.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a00a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a00e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a016:	d10e      	bne.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a018:	4b12      	ldr	r3, [pc, #72]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a024:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a028:	091a      	lsrs	r2, r3, #4
 800a02a:	4b10      	ldr	r3, [pc, #64]	; (800a06c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a02c:	4013      	ands	r3, r2
 800a02e:	4a0d      	ldr	r2, [pc, #52]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a030:	430b      	orrs	r3, r1
 800a032:	6113      	str	r3, [r2, #16]
 800a034:	e005      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a036:	4b0b      	ldr	r3, [pc, #44]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	4a0a      	ldr	r2, [pc, #40]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a03c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a040:	6113      	str	r3, [r2, #16]
 800a042:	4b08      	ldr	r3, [pc, #32]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a044:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a04a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a04e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a052:	4a04      	ldr	r2, [pc, #16]	; (800a064 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a054:	430b      	orrs	r3, r1
 800a056:	6713      	str	r3, [r2, #112]	; 0x70
 800a058:	e00e      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a05a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a05e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a062:	e009      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a064:	58024400 	.word	0x58024400
 800a068:	58024800 	.word	0x58024800
 800a06c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a074:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	f002 0301 	and.w	r3, r2, #1
 800a084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a08e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a092:	460b      	mov	r3, r1
 800a094:	4313      	orrs	r3, r2
 800a096:	f000 8089 	beq.w	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0a0:	2b28      	cmp	r3, #40	; 0x28
 800a0a2:	d86b      	bhi.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a0a4:	a201      	add	r2, pc, #4	; (adr r2, 800a0ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0aa:	bf00      	nop
 800a0ac:	0800a185 	.word	0x0800a185
 800a0b0:	0800a17d 	.word	0x0800a17d
 800a0b4:	0800a17d 	.word	0x0800a17d
 800a0b8:	0800a17d 	.word	0x0800a17d
 800a0bc:	0800a17d 	.word	0x0800a17d
 800a0c0:	0800a17d 	.word	0x0800a17d
 800a0c4:	0800a17d 	.word	0x0800a17d
 800a0c8:	0800a17d 	.word	0x0800a17d
 800a0cc:	0800a151 	.word	0x0800a151
 800a0d0:	0800a17d 	.word	0x0800a17d
 800a0d4:	0800a17d 	.word	0x0800a17d
 800a0d8:	0800a17d 	.word	0x0800a17d
 800a0dc:	0800a17d 	.word	0x0800a17d
 800a0e0:	0800a17d 	.word	0x0800a17d
 800a0e4:	0800a17d 	.word	0x0800a17d
 800a0e8:	0800a17d 	.word	0x0800a17d
 800a0ec:	0800a167 	.word	0x0800a167
 800a0f0:	0800a17d 	.word	0x0800a17d
 800a0f4:	0800a17d 	.word	0x0800a17d
 800a0f8:	0800a17d 	.word	0x0800a17d
 800a0fc:	0800a17d 	.word	0x0800a17d
 800a100:	0800a17d 	.word	0x0800a17d
 800a104:	0800a17d 	.word	0x0800a17d
 800a108:	0800a17d 	.word	0x0800a17d
 800a10c:	0800a185 	.word	0x0800a185
 800a110:	0800a17d 	.word	0x0800a17d
 800a114:	0800a17d 	.word	0x0800a17d
 800a118:	0800a17d 	.word	0x0800a17d
 800a11c:	0800a17d 	.word	0x0800a17d
 800a120:	0800a17d 	.word	0x0800a17d
 800a124:	0800a17d 	.word	0x0800a17d
 800a128:	0800a17d 	.word	0x0800a17d
 800a12c:	0800a185 	.word	0x0800a185
 800a130:	0800a17d 	.word	0x0800a17d
 800a134:	0800a17d 	.word	0x0800a17d
 800a138:	0800a17d 	.word	0x0800a17d
 800a13c:	0800a17d 	.word	0x0800a17d
 800a140:	0800a17d 	.word	0x0800a17d
 800a144:	0800a17d 	.word	0x0800a17d
 800a148:	0800a17d 	.word	0x0800a17d
 800a14c:	0800a185 	.word	0x0800a185
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a154:	3308      	adds	r3, #8
 800a156:	2101      	movs	r1, #1
 800a158:	4618      	mov	r0, r3
 800a15a:	f001 fe95 	bl	800be88 <RCCEx_PLL2_Config>
 800a15e:	4603      	mov	r3, r0
 800a160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a164:	e00f      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a16a:	3328      	adds	r3, #40	; 0x28
 800a16c:	2101      	movs	r1, #1
 800a16e:	4618      	mov	r0, r3
 800a170:	f001 ff3c 	bl	800bfec <RCCEx_PLL3_Config>
 800a174:	4603      	mov	r3, r0
 800a176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a17a:	e004      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a182:	e000      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a184:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10a      	bne.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a18e:	4bbf      	ldr	r3, [pc, #764]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a192:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a19a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a19c:	4abb      	ldr	r2, [pc, #748]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	6553      	str	r3, [r2, #84]	; 0x54
 800a1a2:	e003      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f002 0302 	and.w	r3, r2, #2
 800a1b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a1c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	d041      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1d2:	2b05      	cmp	r3, #5
 800a1d4:	d824      	bhi.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a1d6:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1dc:	0800a229 	.word	0x0800a229
 800a1e0:	0800a1f5 	.word	0x0800a1f5
 800a1e4:	0800a20b 	.word	0x0800a20b
 800a1e8:	0800a229 	.word	0x0800a229
 800a1ec:	0800a229 	.word	0x0800a229
 800a1f0:	0800a229 	.word	0x0800a229
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f8:	3308      	adds	r3, #8
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f001 fe43 	bl	800be88 <RCCEx_PLL2_Config>
 800a202:	4603      	mov	r3, r0
 800a204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a208:	e00f      	b.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a20e:	3328      	adds	r3, #40	; 0x28
 800a210:	2101      	movs	r1, #1
 800a212:	4618      	mov	r0, r3
 800a214:	f001 feea 	bl	800bfec <RCCEx_PLL3_Config>
 800a218:	4603      	mov	r3, r0
 800a21a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a21e:	e004      	b.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a226:	e000      	b.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a22a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10a      	bne.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a232:	4b96      	ldr	r3, [pc, #600]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a236:	f023 0107 	bic.w	r1, r3, #7
 800a23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a240:	4a92      	ldr	r2, [pc, #584]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a242:	430b      	orrs	r3, r1
 800a244:	6553      	str	r3, [r2, #84]	; 0x54
 800a246:	e003      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a24c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	f002 0304 	and.w	r3, r2, #4
 800a25c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a260:	2300      	movs	r3, #0
 800a262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a266:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4313      	orrs	r3, r2
 800a26e:	d044      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a278:	2b05      	cmp	r3, #5
 800a27a:	d825      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a27c:	a201      	add	r2, pc, #4	; (adr r2, 800a284 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a282:	bf00      	nop
 800a284:	0800a2d1 	.word	0x0800a2d1
 800a288:	0800a29d 	.word	0x0800a29d
 800a28c:	0800a2b3 	.word	0x0800a2b3
 800a290:	0800a2d1 	.word	0x0800a2d1
 800a294:	0800a2d1 	.word	0x0800a2d1
 800a298:	0800a2d1 	.word	0x0800a2d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a0:	3308      	adds	r3, #8
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 fdef 	bl	800be88 <RCCEx_PLL2_Config>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a2b0:	e00f      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b6:	3328      	adds	r3, #40	; 0x28
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f001 fe96 	bl	800bfec <RCCEx_PLL3_Config>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a2c6:	e004      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2ce:	e000      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a2d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10b      	bne.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2da:	4b6c      	ldr	r3, [pc, #432]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2de:	f023 0107 	bic.w	r1, r3, #7
 800a2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2ea:	4a68      	ldr	r2, [pc, #416]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2ec:	430b      	orrs	r3, r1
 800a2ee:	6593      	str	r3, [r2, #88]	; 0x58
 800a2f0:	e003      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f002 0320 	and.w	r3, r2, #32
 800a306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a30a:	2300      	movs	r3, #0
 800a30c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a314:	460b      	mov	r3, r1
 800a316:	4313      	orrs	r3, r2
 800a318:	d055      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a326:	d033      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a32c:	d82c      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a332:	d02f      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a338:	d826      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a33a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a33e:	d02b      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a340:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a344:	d820      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a34a:	d012      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a34c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a350:	d81a      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d022      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a35a:	d115      	bne.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a360:	3308      	adds	r3, #8
 800a362:	2100      	movs	r1, #0
 800a364:	4618      	mov	r0, r3
 800a366:	f001 fd8f 	bl	800be88 <RCCEx_PLL2_Config>
 800a36a:	4603      	mov	r3, r0
 800a36c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a370:	e015      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a376:	3328      	adds	r3, #40	; 0x28
 800a378:	2102      	movs	r1, #2
 800a37a:	4618      	mov	r0, r3
 800a37c:	f001 fe36 	bl	800bfec <RCCEx_PLL3_Config>
 800a380:	4603      	mov	r3, r0
 800a382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a386:	e00a      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a38e:	e006      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a390:	bf00      	nop
 800a392:	e004      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a394:	bf00      	nop
 800a396:	e002      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a398:	bf00      	nop
 800a39a:	e000      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a39c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a39e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10b      	bne.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a3a6:	4b39      	ldr	r3, [pc, #228]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3b6:	4a35      	ldr	r2, [pc, #212]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3b8:	430b      	orrs	r3, r1
 800a3ba:	6553      	str	r3, [r2, #84]	; 0x54
 800a3bc:	e003      	b.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a3d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a3dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	d058      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a3f2:	d033      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a3f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a3f8:	d82c      	bhi.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a3fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3fe:	d02f      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a404:	d826      	bhi.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a40a:	d02b      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a40c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a410:	d820      	bhi.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a416:	d012      	beq.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a41c:	d81a      	bhi.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d022      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a426:	d115      	bne.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a42c:	3308      	adds	r3, #8
 800a42e:	2100      	movs	r1, #0
 800a430:	4618      	mov	r0, r3
 800a432:	f001 fd29 	bl	800be88 <RCCEx_PLL2_Config>
 800a436:	4603      	mov	r3, r0
 800a438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a43c:	e015      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a442:	3328      	adds	r3, #40	; 0x28
 800a444:	2102      	movs	r1, #2
 800a446:	4618      	mov	r0, r3
 800a448:	f001 fdd0 	bl	800bfec <RCCEx_PLL3_Config>
 800a44c:	4603      	mov	r3, r0
 800a44e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a452:	e00a      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a45a:	e006      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a45c:	bf00      	nop
 800a45e:	e004      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a460:	bf00      	nop
 800a462:	e002      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a464:	bf00      	nop
 800a466:	e000      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a46a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10e      	bne.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a472:	4b06      	ldr	r3, [pc, #24]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a476:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a47e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a482:	4a02      	ldr	r2, [pc, #8]	; (800a48c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a484:	430b      	orrs	r3, r1
 800a486:	6593      	str	r3, [r2, #88]	; 0x58
 800a488:	e006      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a48a:	bf00      	nop
 800a48c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a494:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a4a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a4ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	d055      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a4c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a4c4:	d033      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a4c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a4ca:	d82c      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4d0:	d02f      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a4d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4d6:	d826      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a4dc:	d02b      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a4de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a4e2:	d820      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4e8:	d012      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a4ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4ee:	d81a      	bhi.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d022      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a4f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4f8:	d115      	bne.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4fe:	3308      	adds	r3, #8
 800a500:	2100      	movs	r1, #0
 800a502:	4618      	mov	r0, r3
 800a504:	f001 fcc0 	bl	800be88 <RCCEx_PLL2_Config>
 800a508:	4603      	mov	r3, r0
 800a50a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a50e:	e015      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a514:	3328      	adds	r3, #40	; 0x28
 800a516:	2102      	movs	r1, #2
 800a518:	4618      	mov	r0, r3
 800a51a:	f001 fd67 	bl	800bfec <RCCEx_PLL3_Config>
 800a51e:	4603      	mov	r3, r0
 800a520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a524:	e00a      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a52c:	e006      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a52e:	bf00      	nop
 800a530:	e004      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a532:	bf00      	nop
 800a534:	e002      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a536:	bf00      	nop
 800a538:	e000      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a53a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a53c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10b      	bne.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a544:	4ba1      	ldr	r3, [pc, #644]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a548:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a550:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a554:	4a9d      	ldr	r2, [pc, #628]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a556:	430b      	orrs	r3, r1
 800a558:	6593      	str	r3, [r2, #88]	; 0x58
 800a55a:	e003      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a55c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a560:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f002 0308 	and.w	r3, r2, #8
 800a570:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a574:	2300      	movs	r3, #0
 800a576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a57a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a57e:	460b      	mov	r3, r1
 800a580:	4313      	orrs	r3, r2
 800a582:	d01e      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a58c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a590:	d10c      	bne.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a596:	3328      	adds	r3, #40	; 0x28
 800a598:	2102      	movs	r1, #2
 800a59a:	4618      	mov	r0, r3
 800a59c:	f001 fd26 	bl	800bfec <RCCEx_PLL3_Config>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a5ac:	4b87      	ldr	r3, [pc, #540]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5bc:	4a83      	ldr	r2, [pc, #524]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5be:	430b      	orrs	r3, r1
 800a5c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f002 0310 	and.w	r3, r2, #16
 800a5ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a5d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	d01e      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ee:	d10c      	bne.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f4:	3328      	adds	r3, #40	; 0x28
 800a5f6:	2102      	movs	r1, #2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f001 fcf7 	bl	800bfec <RCCEx_PLL3_Config>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a60a:	4b70      	ldr	r3, [pc, #448]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a61a:	4a6c      	ldr	r2, [pc, #432]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a61c:	430b      	orrs	r3, r1
 800a61e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a62c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a630:	2300      	movs	r3, #0
 800a632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a636:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a63a:	460b      	mov	r3, r1
 800a63c:	4313      	orrs	r3, r2
 800a63e:	d03e      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a64c:	d022      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a64e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a652:	d81b      	bhi.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a65c:	d00b      	beq.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a65e:	e015      	b.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a664:	3308      	adds	r3, #8
 800a666:	2100      	movs	r1, #0
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 fc0d 	bl	800be88 <RCCEx_PLL2_Config>
 800a66e:	4603      	mov	r3, r0
 800a670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a674:	e00f      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a67a:	3328      	adds	r3, #40	; 0x28
 800a67c:	2102      	movs	r1, #2
 800a67e:	4618      	mov	r0, r3
 800a680:	f001 fcb4 	bl	800bfec <RCCEx_PLL3_Config>
 800a684:	4603      	mov	r3, r0
 800a686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a68a:	e004      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a692:	e000      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a694:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10b      	bne.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a69e:	4b4b      	ldr	r3, [pc, #300]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6ae:	4a47      	ldr	r2, [pc, #284]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	6593      	str	r3, [r2, #88]	; 0x58
 800a6b4:	e003      	b.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a6ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	d03b      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6e6:	d01f      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a6e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6ec:	d818      	bhi.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a6ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6f2:	d003      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a6f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6f8:	d007      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a6fa:	e011      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6fc:	4b33      	ldr	r3, [pc, #204]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	4a32      	ldr	r2, [pc, #200]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a708:	e00f      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a70e:	3328      	adds	r3, #40	; 0x28
 800a710:	2101      	movs	r1, #1
 800a712:	4618      	mov	r0, r3
 800a714:	f001 fc6a 	bl	800bfec <RCCEx_PLL3_Config>
 800a718:	4603      	mov	r3, r0
 800a71a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a71e:	e004      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a726:	e000      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a72a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10b      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a732:	4b26      	ldr	r3, [pc, #152]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a736:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a742:	4a22      	ldr	r2, [pc, #136]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a744:	430b      	orrs	r3, r1
 800a746:	6553      	str	r3, [r2, #84]	; 0x54
 800a748:	e003      	b.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a74e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a75e:	673b      	str	r3, [r7, #112]	; 0x70
 800a760:	2300      	movs	r3, #0
 800a762:	677b      	str	r3, [r7, #116]	; 0x74
 800a764:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a768:	460b      	mov	r3, r1
 800a76a:	4313      	orrs	r3, r2
 800a76c:	d034      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a774:	2b00      	cmp	r3, #0
 800a776:	d003      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a77c:	d007      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a77e:	e011      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a780:	4b12      	ldr	r3, [pc, #72]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	4a11      	ldr	r2, [pc, #68]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a78a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a78c:	e00e      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a792:	3308      	adds	r3, #8
 800a794:	2102      	movs	r1, #2
 800a796:	4618      	mov	r0, r3
 800a798:	f001 fb76 	bl	800be88 <RCCEx_PLL2_Config>
 800a79c:	4603      	mov	r3, r0
 800a79e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a7a2:	e003      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10d      	bne.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7b4:	4b05      	ldr	r3, [pc, #20]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c2:	4a02      	ldr	r2, [pc, #8]	; (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7c4:	430b      	orrs	r3, r1
 800a7c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7c8:	e006      	b.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a7ca:	bf00      	nop
 800a7cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a7e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	d00c      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f8:	3328      	adds	r3, #40	; 0x28
 800a7fa:	2102      	movs	r1, #2
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f001 fbf5 	bl	800bfec <RCCEx_PLL3_Config>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a81a:	663b      	str	r3, [r7, #96]	; 0x60
 800a81c:	2300      	movs	r3, #0
 800a81e:	667b      	str	r3, [r7, #100]	; 0x64
 800a820:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a824:	460b      	mov	r3, r1
 800a826:	4313      	orrs	r3, r2
 800a828:	d038      	beq.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a82e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a836:	d018      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a83c:	d811      	bhi.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a83e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a842:	d014      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a848:	d80b      	bhi.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d011      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a84e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a852:	d106      	bne.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a854:	4bc3      	ldr	r3, [pc, #780]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a858:	4ac2      	ldr	r2, [pc, #776]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a85a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a85e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a860:	e008      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a868:	e004      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a86a:	bf00      	nop
 800a86c:	e002      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a86e:	bf00      	nop
 800a870:	e000      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a872:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10b      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a87c:	4bb9      	ldr	r3, [pc, #740]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a880:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a88c:	4ab5      	ldr	r2, [pc, #724]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a88e:	430b      	orrs	r3, r1
 800a890:	6553      	str	r3, [r2, #84]	; 0x54
 800a892:	e003      	b.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a898:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a8a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	d009      	beq.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a8b8:	4baa      	ldr	r3, [pc, #680]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c6:	4aa7      	ldr	r2, [pc, #668]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8c8:	430b      	orrs	r3, r1
 800a8ca:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a8d8:	653b      	str	r3, [r7, #80]	; 0x50
 800a8da:	2300      	movs	r3, #0
 800a8dc:	657b      	str	r3, [r7, #84]	; 0x54
 800a8de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	d00a      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a8e8:	4b9e      	ldr	r3, [pc, #632]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a8f8:	4a9a      	ldr	r2, [pc, #616]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8fa:	430b      	orrs	r3, r1
 800a8fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a90a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a90c:	2300      	movs	r3, #0
 800a90e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a910:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a914:	460b      	mov	r3, r1
 800a916:	4313      	orrs	r3, r2
 800a918:	d009      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a91a:	4b92      	ldr	r3, [pc, #584]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a91e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a928:	4a8e      	ldr	r2, [pc, #568]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a92a:	430b      	orrs	r3, r1
 800a92c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a93a:	643b      	str	r3, [r7, #64]	; 0x40
 800a93c:	2300      	movs	r3, #0
 800a93e:	647b      	str	r3, [r7, #68]	; 0x44
 800a940:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a944:	460b      	mov	r3, r1
 800a946:	4313      	orrs	r3, r2
 800a948:	d00e      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a94a:	4b86      	ldr	r3, [pc, #536]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	4a85      	ldr	r2, [pc, #532]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a950:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a954:	6113      	str	r3, [r2, #16]
 800a956:	4b83      	ldr	r3, [pc, #524]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a958:	6919      	ldr	r1, [r3, #16]
 800a95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a95e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a962:	4a80      	ldr	r2, [pc, #512]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a964:	430b      	orrs	r3, r1
 800a966:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a974:	63bb      	str	r3, [r7, #56]	; 0x38
 800a976:	2300      	movs	r3, #0
 800a978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a97a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a97e:	460b      	mov	r3, r1
 800a980:	4313      	orrs	r3, r2
 800a982:	d009      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a984:	4b77      	ldr	r3, [pc, #476]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a988:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a992:	4a74      	ldr	r2, [pc, #464]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a994:	430b      	orrs	r3, r1
 800a996:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a9a4:	633b      	str	r3, [r7, #48]	; 0x30
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	637b      	str	r3, [r7, #52]	; 0x34
 800a9aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	d00a      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9b4:	4b6b      	ldr	r3, [pc, #428]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9c4:	4a67      	ldr	r2, [pc, #412]	; (800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9c6:	430b      	orrs	r3, r1
 800a9c8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	62b9      	str	r1, [r7, #40]	; 0x28
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	d011      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ea:	3308      	adds	r3, #8
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f001 fa4a 	bl	800be88 <RCCEx_PLL2_Config>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	2100      	movs	r1, #0
 800aa14:	6239      	str	r1, [r7, #32]
 800aa16:	f003 0302 	and.w	r3, r3, #2
 800aa1a:	627b      	str	r3, [r7, #36]	; 0x24
 800aa1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aa20:	460b      	mov	r3, r1
 800aa22:	4313      	orrs	r3, r2
 800aa24:	d011      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	2101      	movs	r1, #1
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f001 fa2a 	bl	800be88 <RCCEx_PLL2_Config>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aa4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	2100      	movs	r1, #0
 800aa54:	61b9      	str	r1, [r7, #24]
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	61fb      	str	r3, [r7, #28]
 800aa5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aa60:	460b      	mov	r3, r1
 800aa62:	4313      	orrs	r3, r2
 800aa64:	d011      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	2102      	movs	r1, #2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f001 fa0a 	bl	800be88 <RCCEx_PLL2_Config>
 800aa74:	4603      	mov	r3, r0
 800aa76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	2100      	movs	r1, #0
 800aa94:	6139      	str	r1, [r7, #16]
 800aa96:	f003 0308 	and.w	r3, r3, #8
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	d011      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaaa:	3328      	adds	r3, #40	; 0x28
 800aaac:	2100      	movs	r1, #0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 fa9c 	bl	800bfec <RCCEx_PLL3_Config>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800aaba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aac6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aaca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	2100      	movs	r1, #0
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	f003 0310 	and.w	r3, r3, #16
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aae0:	460b      	mov	r3, r1
 800aae2:	4313      	orrs	r3, r2
 800aae4:	d011      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaea:	3328      	adds	r3, #40	; 0x28
 800aaec:	2101      	movs	r1, #1
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f001 fa7c 	bl	800bfec <RCCEx_PLL3_Config>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aafa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ab0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	2100      	movs	r1, #0
 800ab14:	6039      	str	r1, [r7, #0]
 800ab16:	f003 0320 	and.w	r3, r3, #32
 800ab1a:	607b      	str	r3, [r7, #4]
 800ab1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ab20:	460b      	mov	r3, r1
 800ab22:	4313      	orrs	r3, r2
 800ab24:	d011      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2a:	3328      	adds	r3, #40	; 0x28
 800ab2c:	2102      	movs	r1, #2
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f001 fa5c 	bl	800bfec <RCCEx_PLL3_Config>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ab4a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	e000      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab64:	58024400 	.word	0x58024400

0800ab68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b090      	sub	sp, #64	; 0x40
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ab72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab76:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ab7a:	430b      	orrs	r3, r1
 800ab7c:	f040 8094 	bne.w	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab80:	4b9e      	ldr	r3, [pc, #632]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab84:	f003 0307 	and.w	r3, r3, #7
 800ab88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	2b04      	cmp	r3, #4
 800ab8e:	f200 8087 	bhi.w	800aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ab92:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800abad 	.word	0x0800abad
 800ab9c:	0800abd5 	.word	0x0800abd5
 800aba0:	0800abfd 	.word	0x0800abfd
 800aba4:	0800ac99 	.word	0x0800ac99
 800aba8:	0800ac25 	.word	0x0800ac25
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abac:	4b93      	ldr	r3, [pc, #588]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abb8:	d108      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abbe:	4618      	mov	r0, r3
 800abc0:	f001 f810 	bl	800bbe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc8:	f000 bd45 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd0:	f000 bd41 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abd4:	4b89      	ldr	r3, [pc, #548]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abe0:	d108      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abe2:	f107 0318 	add.w	r3, r7, #24
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fd54 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf0:	f000 bd31 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abf8:	f000 bd2d 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abfc:	4b7f      	ldr	r3, [pc, #508]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac08:	d108      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac0a:	f107 030c 	add.w	r3, r7, #12
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 fe94 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac18:	f000 bd1d 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac20:	f000 bd19 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac24:	4b75      	ldr	r3, [pc, #468]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac2e:	4b73      	ldr	r3, [pc, #460]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 0304 	and.w	r3, r3, #4
 800ac36:	2b04      	cmp	r3, #4
 800ac38:	d10c      	bne.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ac3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d109      	bne.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac40:	4b6e      	ldr	r3, [pc, #440]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	08db      	lsrs	r3, r3, #3
 800ac46:	f003 0303 	and.w	r3, r3, #3
 800ac4a:	4a6d      	ldr	r2, [pc, #436]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ac4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac52:	e01f      	b.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac54:	4b69      	ldr	r3, [pc, #420]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac60:	d106      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ac62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac68:	d102      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac6a:	4b66      	ldr	r3, [pc, #408]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ac6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac6e:	e011      	b.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac70:	4b62      	ldr	r3, [pc, #392]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac7c:	d106      	bne.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac84:	d102      	bne.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac86:	4b60      	ldr	r3, [pc, #384]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ac88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac8a:	e003      	b.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac90:	f000 bce1 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac94:	f000 bcdf 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac98:	4b5c      	ldr	r3, [pc, #368]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ac9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac9c:	f000 bcdb 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aca4:	f000 bcd7 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800aca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acac:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800acb0:	430b      	orrs	r3, r1
 800acb2:	f040 80ad 	bne.w	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800acb6:	4b51      	ldr	r3, [pc, #324]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800acbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acc6:	d056      	beq.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acce:	f200 8090 	bhi.w	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	2bc0      	cmp	r3, #192	; 0xc0
 800acd6:	f000 8088 	beq.w	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	2bc0      	cmp	r3, #192	; 0xc0
 800acde:	f200 8088 	bhi.w	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	2b80      	cmp	r3, #128	; 0x80
 800ace6:	d032      	beq.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acea:	2b80      	cmp	r3, #128	; 0x80
 800acec:	f200 8081 	bhi.w	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	2b40      	cmp	r3, #64	; 0x40
 800acfa:	d014      	beq.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800acfc:	e079      	b.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acfe:	4b3f      	ldr	r3, [pc, #252]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad0a:	d108      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 ff67 	bl	800bbe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad1a:	f000 bc9c 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad22:	f000 bc98 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad26:	4b35      	ldr	r3, [pc, #212]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad32:	d108      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad34:	f107 0318 	add.w	r3, r7, #24
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 fcab 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad42:	f000 bc88 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad4a:	f000 bc84 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad4e:	4b2b      	ldr	r3, [pc, #172]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad5a:	d108      	bne.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad5c:	f107 030c 	add.w	r3, r7, #12
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 fdeb 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad6a:	f000 bc74 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad72:	f000 bc70 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad76:	4b21      	ldr	r3, [pc, #132]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad80:	4b1e      	ldr	r3, [pc, #120]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 0304 	and.w	r3, r3, #4
 800ad88:	2b04      	cmp	r3, #4
 800ad8a:	d10c      	bne.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d109      	bne.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad92:	4b1a      	ldr	r3, [pc, #104]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	08db      	lsrs	r3, r3, #3
 800ad98:	f003 0303 	and.w	r3, r3, #3
 800ad9c:	4a18      	ldr	r2, [pc, #96]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad9e:	fa22 f303 	lsr.w	r3, r2, r3
 800ada2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ada4:	e01f      	b.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ada6:	4b15      	ldr	r3, [pc, #84]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb2:	d106      	bne.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800adb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adba:	d102      	bne.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800adbc:	4b11      	ldr	r3, [pc, #68]	; (800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800adbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adc0:	e011      	b.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adc2:	4b0e      	ldr	r3, [pc, #56]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adce:	d106      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800add0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800add6:	d102      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800add8:	4b0b      	ldr	r3, [pc, #44]	; (800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800addc:	e003      	b.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ade2:	f000 bc38 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ade6:	f000 bc36 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800adea:	4b08      	ldr	r3, [pc, #32]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adee:	f000 bc32 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adf6:	f000 bc2e 	b.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800adfa:	bf00      	nop
 800adfc:	58024400 	.word	0x58024400
 800ae00:	03d09000 	.word	0x03d09000
 800ae04:	003d0900 	.word	0x003d0900
 800ae08:	017d7840 	.word	0x017d7840
 800ae0c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ae10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae14:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	f040 809c 	bne.w	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ae1e:	4b9e      	ldr	r3, [pc, #632]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae22:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ae26:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae2e:	d054      	beq.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae36:	f200 808b 	bhi.w	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae40:	f000 8083 	beq.w	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae4a:	f200 8081 	bhi.w	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae54:	d02f      	beq.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae5c:	d878      	bhi.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae6a:	d012      	beq.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ae6c:	e070      	b.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae6e:	4b8a      	ldr	r3, [pc, #552]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae7a:	d107      	bne.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 feaf 	bl	800bbe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae8a:	e3e4      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae90:	e3e1      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae92:	4b81      	ldr	r3, [pc, #516]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae9e:	d107      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aea0:	f107 0318 	add.w	r3, r7, #24
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 fbf5 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeae:	e3d2      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb4:	e3cf      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aeb6:	4b78      	ldr	r3, [pc, #480]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aec2:	d107      	bne.n	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aec4:	f107 030c 	add.w	r3, r7, #12
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 fd37 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aed2:	e3c0      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed8:	e3bd      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aeda:	4b6f      	ldr	r3, [pc, #444]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aedc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aee2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aee4:	4b6c      	ldr	r3, [pc, #432]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	d10c      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d109      	bne.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aef6:	4b68      	ldr	r3, [pc, #416]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	08db      	lsrs	r3, r3, #3
 800aefc:	f003 0303 	and.w	r3, r3, #3
 800af00:	4a66      	ldr	r2, [pc, #408]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800af02:	fa22 f303 	lsr.w	r3, r2, r3
 800af06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af08:	e01e      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af0a:	4b63      	ldr	r3, [pc, #396]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af16:	d106      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800af18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af1e:	d102      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af20:	4b5f      	ldr	r3, [pc, #380]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800af22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af24:	e010      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af26:	4b5c      	ldr	r3, [pc, #368]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af32:	d106      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800af34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af3a:	d102      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af3c:	4b59      	ldr	r3, [pc, #356]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800af3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af40:	e002      	b.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800af46:	e386      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af48:	e385      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af4a:	4b57      	ldr	r3, [pc, #348]	; (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af4e:	e382      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af54:	e37f      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800af56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af5a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800af5e:	430b      	orrs	r3, r1
 800af60:	f040 80a7 	bne.w	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800af64:	4b4c      	ldr	r3, [pc, #304]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af68:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800af6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af74:	d055      	beq.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af7c:	f200 8096 	bhi.w	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af86:	f000 8084 	beq.w	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af90:	f200 808c 	bhi.w	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af9a:	d030      	beq.n	800affe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afa2:	f200 8083 	bhi.w	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d004      	beq.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800afb2:	d012      	beq.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800afb4:	e07a      	b.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afb6:	4b38      	ldr	r3, [pc, #224]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afc2:	d107      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 fe0b 	bl	800bbe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afd2:	e340      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd8:	e33d      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afda:	4b2f      	ldr	r3, [pc, #188]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afe6:	d107      	bne.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afe8:	f107 0318 	add.w	r3, r7, #24
 800afec:	4618      	mov	r0, r3
 800afee:	f000 fb51 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aff6:	e32e      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800affc:	e32b      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800affe:	4b26      	ldr	r3, [pc, #152]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b00a:	d107      	bne.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b00c:	f107 030c 	add.w	r3, r7, #12
 800b010:	4618      	mov	r0, r3
 800b012:	f000 fc93 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b01a:	e31c      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b01c:	2300      	movs	r3, #0
 800b01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b020:	e319      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b022:	4b1d      	ldr	r3, [pc, #116]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b026:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b02a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b02c:	4b1a      	ldr	r3, [pc, #104]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b04      	cmp	r3, #4
 800b036:	d10c      	bne.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d109      	bne.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b03e:	4b16      	ldr	r3, [pc, #88]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	08db      	lsrs	r3, r3, #3
 800b044:	f003 0303 	and.w	r3, r3, #3
 800b048:	4a14      	ldr	r2, [pc, #80]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b04a:	fa22 f303 	lsr.w	r3, r2, r3
 800b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b050:	e01e      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b052:	4b11      	ldr	r3, [pc, #68]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b05a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b05e:	d106      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b066:	d102      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b068:	4b0d      	ldr	r3, [pc, #52]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b06a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b06c:	e010      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b06e:	4b0a      	ldr	r3, [pc, #40]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b07a:	d106      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b082:	d102      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b084:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b088:	e002      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b08e:	e2e2      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b090:	e2e1      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b092:	4b05      	ldr	r3, [pc, #20]	; (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b096:	e2de      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b098:	58024400 	.word	0x58024400
 800b09c:	03d09000 	.word	0x03d09000
 800b0a0:	003d0900 	.word	0x003d0900
 800b0a4:	017d7840 	.word	0x017d7840
 800b0a8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b0:	e2d1      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b0b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	f040 809c 	bne.w	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b0c0:	4b93      	ldr	r3, [pc, #588]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b0c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0d0:	d054      	beq.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0d8:	f200 808b 	bhi.w	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0e2:	f000 8083 	beq.w	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0ec:	f200 8081 	bhi.w	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0f6:	d02f      	beq.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0fe:	d878      	bhi.n	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b102:	2b00      	cmp	r3, #0
 800b104:	d004      	beq.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b10c:	d012      	beq.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b10e:	e070      	b.n	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b110:	4b7f      	ldr	r3, [pc, #508]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b11c:	d107      	bne.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b11e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b122:	4618      	mov	r0, r3
 800b124:	f000 fd5e 	bl	800bbe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b12c:	e293      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b132:	e290      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b134:	4b76      	ldr	r3, [pc, #472]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b13c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b140:	d107      	bne.n	800b152 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b142:	f107 0318 	add.w	r3, r7, #24
 800b146:	4618      	mov	r0, r3
 800b148:	f000 faa4 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b150:	e281      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b156:	e27e      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b158:	4b6d      	ldr	r3, [pc, #436]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b164:	d107      	bne.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b166:	f107 030c 	add.w	r3, r7, #12
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 fbe6 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b174:	e26f      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b17a:	e26c      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b17c:	4b64      	ldr	r3, [pc, #400]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b17e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b180:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b184:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b186:	4b62      	ldr	r3, [pc, #392]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 0304 	and.w	r3, r3, #4
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d10c      	bne.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	2b00      	cmp	r3, #0
 800b196:	d109      	bne.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b198:	4b5d      	ldr	r3, [pc, #372]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	08db      	lsrs	r3, r3, #3
 800b19e:	f003 0303 	and.w	r3, r3, #3
 800b1a2:	4a5c      	ldr	r2, [pc, #368]	; (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b1a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1aa:	e01e      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1ac:	4b58      	ldr	r3, [pc, #352]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1b8:	d106      	bne.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1c0:	d102      	bne.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1c2:	4b55      	ldr	r3, [pc, #340]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1c6:	e010      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1c8:	4b51      	ldr	r3, [pc, #324]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1d4:	d106      	bne.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1dc:	d102      	bne.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1de:	4b4f      	ldr	r3, [pc, #316]	; (800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1e2:	e002      	b.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b1e8:	e235      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1ea:	e234      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1ec:	4b4c      	ldr	r3, [pc, #304]	; (800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1f0:	e231      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1f6:	e22e      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1fc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b200:	430b      	orrs	r3, r1
 800b202:	f040 808f 	bne.w	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b206:	4b42      	ldr	r3, [pc, #264]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b20e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b216:	d06b      	beq.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b21e:	d874      	bhi.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b226:	d056      	beq.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b22e:	d86c      	bhi.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b232:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b236:	d03b      	beq.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b23e:	d864      	bhi.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b246:	d021      	beq.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b24e:	d85c      	bhi.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	2b00      	cmp	r3, #0
 800b254:	d004      	beq.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b25c:	d004      	beq.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b25e:	e054      	b.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b260:	f7fe fa0a 	bl	8009678 <HAL_RCC_GetPCLK1Freq>
 800b264:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b266:	e1f6      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b268:	4b29      	ldr	r3, [pc, #164]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b274:	d107      	bne.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b276:	f107 0318 	add.w	r3, r7, #24
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fa0a 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b284:	e1e7      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b28a:	e1e4      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b28c:	4b20      	ldr	r3, [pc, #128]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b298:	d107      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b29a:	f107 030c 	add.w	r3, r7, #12
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fb4c 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a8:	e1d5      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ae:	e1d2      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2b0:	4b17      	ldr	r3, [pc, #92]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0304 	and.w	r3, r3, #4
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	d109      	bne.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2bc:	4b14      	ldr	r3, [pc, #80]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	08db      	lsrs	r3, r3, #3
 800b2c2:	f003 0303 	and.w	r3, r3, #3
 800b2c6:	4a13      	ldr	r2, [pc, #76]	; (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ce:	e1c2      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d4:	e1bf      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b2d6:	4b0e      	ldr	r3, [pc, #56]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2e2:	d102      	bne.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b2e4:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2e8:	e1b5      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ee:	e1b2      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b2f0:	4b07      	ldr	r3, [pc, #28]	; (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2fc:	d102      	bne.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b2fe:	4b07      	ldr	r3, [pc, #28]	; (800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b300:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b302:	e1a8      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b308:	e1a5      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b30e:	e1a2      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b310:	58024400 	.word	0x58024400
 800b314:	03d09000 	.word	0x03d09000
 800b318:	003d0900 	.word	0x003d0900
 800b31c:	017d7840 	.word	0x017d7840
 800b320:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b324:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b328:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b32c:	430b      	orrs	r3, r1
 800b32e:	d173      	bne.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b330:	4b9c      	ldr	r3, [pc, #624]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b338:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b340:	d02f      	beq.n	800b3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b348:	d863      	bhi.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d004      	beq.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b356:	d012      	beq.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b358:	e05b      	b.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b35a:	4b92      	ldr	r3, [pc, #584]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b366:	d107      	bne.n	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b368:	f107 0318 	add.w	r3, r7, #24
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 f991 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b376:	e16e      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b37c:	e16b      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b37e:	4b89      	ldr	r3, [pc, #548]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b38a:	d107      	bne.n	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b38c:	f107 030c 	add.w	r3, r7, #12
 800b390:	4618      	mov	r0, r3
 800b392:	f000 fad3 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b39a:	e15c      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b39c:	2300      	movs	r3, #0
 800b39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3a0:	e159      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3a2:	4b80      	ldr	r3, [pc, #512]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3ac:	4b7d      	ldr	r3, [pc, #500]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	2b04      	cmp	r3, #4
 800b3b6:	d10c      	bne.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d109      	bne.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3be:	4b79      	ldr	r3, [pc, #484]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	08db      	lsrs	r3, r3, #3
 800b3c4:	f003 0303 	and.w	r3, r3, #3
 800b3c8:	4a77      	ldr	r2, [pc, #476]	; (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b3ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3d0:	e01e      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3d2:	4b74      	ldr	r3, [pc, #464]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3de:	d106      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3e6:	d102      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3e8:	4b70      	ldr	r3, [pc, #448]	; (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3ec:	e010      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3ee:	4b6d      	ldr	r3, [pc, #436]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3fa:	d106      	bne.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b402:	d102      	bne.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b404:	4b6a      	ldr	r3, [pc, #424]	; (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b408:	e002      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b40e:	e122      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b410:	e121      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b416:	e11e      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b41c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b420:	430b      	orrs	r3, r1
 800b422:	d133      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b424:	4b5f      	ldr	r3, [pc, #380]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b42c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b430:	2b00      	cmp	r3, #0
 800b432:	d004      	beq.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b43a:	d012      	beq.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b43c:	e023      	b.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b43e:	4b59      	ldr	r3, [pc, #356]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b44a:	d107      	bne.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b44c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b450:	4618      	mov	r0, r3
 800b452:	f000 fbc7 	bl	800bbe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b458:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b45a:	e0fc      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b460:	e0f9      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b462:	4b50      	ldr	r3, [pc, #320]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b46a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b46e:	d107      	bne.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b470:	f107 0318 	add.w	r3, r7, #24
 800b474:	4618      	mov	r0, r3
 800b476:	f000 f90d 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b47e:	e0ea      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b484:	e0e7      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b48a:	e0e4      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b48c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b490:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b494:	430b      	orrs	r3, r1
 800b496:	f040 808d 	bne.w	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b49a:	4b42      	ldr	r3, [pc, #264]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b49e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b4a2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4aa:	d06b      	beq.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4b2:	d874      	bhi.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ba:	d056      	beq.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c2:	d86c      	bhi.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4ca:	d03b      	beq.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4d2:	d864      	bhi.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4da:	d021      	beq.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e2:	d85c      	bhi.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d004      	beq.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4f0:	d004      	beq.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b4f2:	e054      	b.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b4f4:	f000 f8b8 	bl	800b668 <HAL_RCCEx_GetD3PCLK1Freq>
 800b4f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b4fa:	e0ac      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4fc:	4b29      	ldr	r3, [pc, #164]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b508:	d107      	bne.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b50a:	f107 0318 	add.w	r3, r7, #24
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f8c0 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b518:	e09d      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b51e:	e09a      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b520:	4b20      	ldr	r3, [pc, #128]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b52c:	d107      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b52e:	f107 030c 	add.w	r3, r7, #12
 800b532:	4618      	mov	r0, r3
 800b534:	f000 fa02 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b53c:	e08b      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b542:	e088      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b544:	4b17      	ldr	r3, [pc, #92]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0304 	and.w	r3, r3, #4
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d109      	bne.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b550:	4b14      	ldr	r3, [pc, #80]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	08db      	lsrs	r3, r3, #3
 800b556:	f003 0303 	and.w	r3, r3, #3
 800b55a:	4a13      	ldr	r2, [pc, #76]	; (800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b55c:	fa22 f303 	lsr.w	r3, r2, r3
 800b560:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b562:	e078      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b568:	e075      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b56a:	4b0e      	ldr	r3, [pc, #56]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b576:	d102      	bne.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b578:	4b0c      	ldr	r3, [pc, #48]	; (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b57c:	e06b      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b582:	e068      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b584:	4b07      	ldr	r3, [pc, #28]	; (800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b58c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b590:	d102      	bne.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b592:	4b07      	ldr	r3, [pc, #28]	; (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b596:	e05e      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b598:	2300      	movs	r3, #0
 800b59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b59c:	e05b      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a2:	e058      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5a4:	58024400 	.word	0x58024400
 800b5a8:	03d09000 	.word	0x03d09000
 800b5ac:	003d0900 	.word	0x003d0900
 800b5b0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b5b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5b8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b5bc:	430b      	orrs	r3, r1
 800b5be:	d148      	bne.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b5c0:	4b27      	ldr	r3, [pc, #156]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5d0:	d02a      	beq.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5d8:	d838      	bhi.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d004      	beq.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5e6:	d00d      	beq.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b5e8:	e030      	b.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5ea:	4b1d      	ldr	r3, [pc, #116]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5f6:	d102      	bne.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b5f8:	4b1a      	ldr	r3, [pc, #104]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5fc:	e02b      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5fe:	2300      	movs	r3, #0
 800b600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b602:	e028      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b604:	4b16      	ldr	r3, [pc, #88]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b60c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b610:	d107      	bne.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b616:	4618      	mov	r0, r3
 800b618:	f000 fae4 	bl	800bbe4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b620:	e019      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b626:	e016      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b628:	4b0d      	ldr	r3, [pc, #52]	; (800b660 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b634:	d107      	bne.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b636:	f107 0318 	add.w	r3, r7, #24
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 f82a 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b644:	e007      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b64a:	e004      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b650:	e001      	b.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3740      	adds	r7, #64	; 0x40
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	58024400 	.word	0x58024400
 800b664:	017d7840 	.word	0x017d7840

0800b668 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b66c:	f7fd ffd4 	bl	8009618 <HAL_RCC_GetHCLKFreq>
 800b670:	4602      	mov	r2, r0
 800b672:	4b06      	ldr	r3, [pc, #24]	; (800b68c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b674:	6a1b      	ldr	r3, [r3, #32]
 800b676:	091b      	lsrs	r3, r3, #4
 800b678:	f003 0307 	and.w	r3, r3, #7
 800b67c:	4904      	ldr	r1, [pc, #16]	; (800b690 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b67e:	5ccb      	ldrb	r3, [r1, r3]
 800b680:	f003 031f 	and.w	r3, r3, #31
 800b684:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b688:	4618      	mov	r0, r3
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	58024400 	.word	0x58024400
 800b690:	08015888 	.word	0x08015888

0800b694 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b694:	b480      	push	{r7}
 800b696:	b089      	sub	sp, #36	; 0x24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b69c:	4ba1      	ldr	r3, [pc, #644]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a0:	f003 0303 	and.w	r3, r3, #3
 800b6a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b6a6:	4b9f      	ldr	r3, [pc, #636]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6aa:	0b1b      	lsrs	r3, r3, #12
 800b6ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b6b2:	4b9c      	ldr	r3, [pc, #624]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b6:	091b      	lsrs	r3, r3, #4
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b6be:	4b99      	ldr	r3, [pc, #612]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c2:	08db      	lsrs	r3, r3, #3
 800b6c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	fb02 f303 	mul.w	r3, r2, r3
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 8111 	beq.w	800b904 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	f000 8083 	beq.w	800b7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	f200 80a1 	bhi.w	800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d056      	beq.n	800b7ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b6fe:	e099      	b.n	800b834 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b700:	4b88      	ldr	r3, [pc, #544]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0320 	and.w	r3, r3, #32
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d02d      	beq.n	800b768 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b70c:	4b85      	ldr	r3, [pc, #532]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	08db      	lsrs	r3, r3, #3
 800b712:	f003 0303 	and.w	r3, r3, #3
 800b716:	4a84      	ldr	r2, [pc, #528]	; (800b928 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b718:	fa22 f303 	lsr.w	r3, r2, r3
 800b71c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	ee07 3a90 	vmov	s15, r3
 800b724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	ee07 3a90 	vmov	s15, r3
 800b72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b736:	4b7b      	ldr	r3, [pc, #492]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b746:	ed97 6a03 	vldr	s12, [r7, #12]
 800b74a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b762:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b766:	e087      	b.n	800b878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	ee07 3a90 	vmov	s15, r3
 800b76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b772:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b77a:	4b6a      	ldr	r3, [pc, #424]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b78e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7aa:	e065      	b.n	800b878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	ee07 3a90 	vmov	s15, r3
 800b7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7be:	4b59      	ldr	r3, [pc, #356]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c6:	ee07 3a90 	vmov	s15, r3
 800b7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7ee:	e043      	b.n	800b878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	ee07 3a90 	vmov	s15, r3
 800b7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b802:	4b48      	ldr	r3, [pc, #288]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b80a:	ee07 3a90 	vmov	s15, r3
 800b80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b812:	ed97 6a03 	vldr	s12, [r7, #12]
 800b816:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b82e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b832:	e021      	b.n	800b878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	ee07 3a90 	vmov	s15, r3
 800b83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b846:	4b37      	ldr	r3, [pc, #220]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b84e:	ee07 3a90 	vmov	s15, r3
 800b852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b856:	ed97 6a03 	vldr	s12, [r7, #12]
 800b85a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b92c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b876:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b878:	4b2a      	ldr	r3, [pc, #168]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87c:	0a5b      	lsrs	r3, r3, #9
 800b87e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b882:	ee07 3a90 	vmov	s15, r3
 800b886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b88e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b892:	edd7 6a07 	vldr	s13, [r7, #28]
 800b896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b89a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b89e:	ee17 2a90 	vmov	r2, s15
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b8a6:	4b1f      	ldr	r3, [pc, #124]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8aa:	0c1b      	lsrs	r3, r3, #16
 800b8ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8b0:	ee07 3a90 	vmov	s15, r3
 800b8b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8cc:	ee17 2a90 	vmov	r2, s15
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b8d4:	4b13      	ldr	r3, [pc, #76]	; (800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d8:	0e1b      	lsrs	r3, r3, #24
 800b8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8de:	ee07 3a90 	vmov	s15, r3
 800b8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8fa:	ee17 2a90 	vmov	r2, s15
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b902:	e008      	b.n	800b916 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	609a      	str	r2, [r3, #8]
}
 800b916:	bf00      	nop
 800b918:	3724      	adds	r7, #36	; 0x24
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	58024400 	.word	0x58024400
 800b928:	03d09000 	.word	0x03d09000
 800b92c:	46000000 	.word	0x46000000
 800b930:	4c742400 	.word	0x4c742400
 800b934:	4a742400 	.word	0x4a742400
 800b938:	4bbebc20 	.word	0x4bbebc20

0800b93c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b089      	sub	sp, #36	; 0x24
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b944:	4ba1      	ldr	r3, [pc, #644]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b948:	f003 0303 	and.w	r3, r3, #3
 800b94c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b94e:	4b9f      	ldr	r3, [pc, #636]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b952:	0d1b      	lsrs	r3, r3, #20
 800b954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b958:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b95a:	4b9c      	ldr	r3, [pc, #624]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95e:	0a1b      	lsrs	r3, r3, #8
 800b960:	f003 0301 	and.w	r3, r3, #1
 800b964:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b966:	4b99      	ldr	r3, [pc, #612]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b96a:	08db      	lsrs	r3, r3, #3
 800b96c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	fb02 f303 	mul.w	r3, r2, r3
 800b976:	ee07 3a90 	vmov	s15, r3
 800b97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b97e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 8111 	beq.w	800bbac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	f000 8083 	beq.w	800ba98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	2b02      	cmp	r3, #2
 800b996:	f200 80a1 	bhi.w	800badc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d003      	beq.n	800b9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d056      	beq.n	800ba54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b9a6:	e099      	b.n	800badc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9a8:	4b88      	ldr	r3, [pc, #544]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f003 0320 	and.w	r3, r3, #32
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d02d      	beq.n	800ba10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9b4:	4b85      	ldr	r3, [pc, #532]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	08db      	lsrs	r3, r3, #3
 800b9ba:	f003 0303 	and.w	r3, r3, #3
 800b9be:	4a84      	ldr	r2, [pc, #528]	; (800bbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	ee07 3a90 	vmov	s15, r3
 800b9cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	ee07 3a90 	vmov	s15, r3
 800b9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9de:	4b7b      	ldr	r3, [pc, #492]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba0e:	e087      	b.n	800bb20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba22:	4b6a      	ldr	r3, [pc, #424]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba36:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba52:	e065      	b.n	800bb20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba66:	4b59      	ldr	r3, [pc, #356]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba96:	e043      	b.n	800bb20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	ee07 3a90 	vmov	s15, r3
 800ba9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800baa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baaa:	4b48      	ldr	r3, [pc, #288]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bab2:	ee07 3a90 	vmov	s15, r3
 800bab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baba:	ed97 6a03 	vldr	s12, [r7, #12]
 800babe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bada:	e021      	b.n	800bb20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	ee07 3a90 	vmov	s15, r3
 800bae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800baea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baee:	4b37      	ldr	r3, [pc, #220]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baf6:	ee07 3a90 	vmov	s15, r3
 800bafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bafe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb02:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bb20:	4b2a      	ldr	r3, [pc, #168]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb24:	0a5b      	lsrs	r3, r3, #9
 800bb26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb2a:	ee07 3a90 	vmov	s15, r3
 800bb2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb46:	ee17 2a90 	vmov	r2, s15
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bb4e:	4b1f      	ldr	r3, [pc, #124]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb52:	0c1b      	lsrs	r3, r3, #16
 800bb54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb58:	ee07 3a90 	vmov	s15, r3
 800bb5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb68:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb74:	ee17 2a90 	vmov	r2, s15
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bb7c:	4b13      	ldr	r3, [pc, #76]	; (800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb80:	0e1b      	lsrs	r3, r3, #24
 800bb82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb86:	ee07 3a90 	vmov	s15, r3
 800bb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb96:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bba2:	ee17 2a90 	vmov	r2, s15
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bbaa:	e008      	b.n	800bbbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	609a      	str	r2, [r3, #8]
}
 800bbbe:	bf00      	nop
 800bbc0:	3724      	adds	r7, #36	; 0x24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	58024400 	.word	0x58024400
 800bbd0:	03d09000 	.word	0x03d09000
 800bbd4:	46000000 	.word	0x46000000
 800bbd8:	4c742400 	.word	0x4c742400
 800bbdc:	4a742400 	.word	0x4a742400
 800bbe0:	4bbebc20 	.word	0x4bbebc20

0800bbe4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b089      	sub	sp, #36	; 0x24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbec:	4ba0      	ldr	r3, [pc, #640]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf0:	f003 0303 	and.w	r3, r3, #3
 800bbf4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bbf6:	4b9e      	ldr	r3, [pc, #632]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfa:	091b      	lsrs	r3, r3, #4
 800bbfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bc02:	4b9b      	ldr	r3, [pc, #620]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bc0c:	4b98      	ldr	r3, [pc, #608]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc10:	08db      	lsrs	r3, r3, #3
 800bc12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	fb02 f303 	mul.w	r3, r2, r3
 800bc1c:	ee07 3a90 	vmov	s15, r3
 800bc20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f000 8111 	beq.w	800be52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	f000 8083 	beq.w	800bd3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	f200 80a1 	bhi.w	800bd82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d003      	beq.n	800bc4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d056      	beq.n	800bcfa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bc4c:	e099      	b.n	800bd82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc4e:	4b88      	ldr	r3, [pc, #544]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0320 	and.w	r3, r3, #32
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d02d      	beq.n	800bcb6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc5a:	4b85      	ldr	r3, [pc, #532]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	08db      	lsrs	r3, r3, #3
 800bc60:	f003 0303 	and.w	r3, r3, #3
 800bc64:	4a83      	ldr	r2, [pc, #524]	; (800be74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bc66:	fa22 f303 	lsr.w	r3, r2, r3
 800bc6a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	ee07 3a90 	vmov	s15, r3
 800bc72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	ee07 3a90 	vmov	s15, r3
 800bc7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc84:	4b7a      	ldr	r3, [pc, #488]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8c:	ee07 3a90 	vmov	s15, r3
 800bc90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc94:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc98:	eddf 5a77 	vldr	s11, [pc, #476]	; 800be78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bcb4:	e087      	b.n	800bdc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	ee07 3a90 	vmov	s15, r3
 800bcbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bcc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcc8:	4b69      	ldr	r3, [pc, #420]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd0:	ee07 3a90 	vmov	s15, r3
 800bcd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcd8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcdc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800be78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcf8:	e065      	b.n	800bdc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	ee07 3a90 	vmov	s15, r3
 800bd00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bd08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd0c:	4b58      	ldr	r3, [pc, #352]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd14:	ee07 3a90 	vmov	s15, r3
 800bd18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd20:	eddf 5a55 	vldr	s11, [pc, #340]	; 800be78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd3c:	e043      	b.n	800bdc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	ee07 3a90 	vmov	s15, r3
 800bd44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd48:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bd4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd50:	4b47      	ldr	r3, [pc, #284]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd58:	ee07 3a90 	vmov	s15, r3
 800bd5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd60:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd64:	eddf 5a44 	vldr	s11, [pc, #272]	; 800be78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd80:	e021      	b.n	800bdc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	ee07 3a90 	vmov	s15, r3
 800bd88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd8c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd94:	4b36      	ldr	r3, [pc, #216]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd9c:	ee07 3a90 	vmov	s15, r3
 800bda0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bda8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800be78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdc4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bdc6:	4b2a      	ldr	r3, [pc, #168]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdca:	0a5b      	lsrs	r3, r3, #9
 800bdcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd0:	ee07 3a90 	vmov	s15, r3
 800bdd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bddc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bde0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bde4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bde8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdec:	ee17 2a90 	vmov	r2, s15
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bdf4:	4b1e      	ldr	r3, [pc, #120]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf8:	0c1b      	lsrs	r3, r3, #16
 800bdfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdfe:	ee07 3a90 	vmov	s15, r3
 800be02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be1a:	ee17 2a90 	vmov	r2, s15
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800be22:	4b13      	ldr	r3, [pc, #76]	; (800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be26:	0e1b      	lsrs	r3, r3, #24
 800be28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be2c:	ee07 3a90 	vmov	s15, r3
 800be30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800be40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be48:	ee17 2a90 	vmov	r2, s15
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800be50:	e008      	b.n	800be64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	609a      	str	r2, [r3, #8]
}
 800be64:	bf00      	nop
 800be66:	3724      	adds	r7, #36	; 0x24
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	58024400 	.word	0x58024400
 800be74:	03d09000 	.word	0x03d09000
 800be78:	46000000 	.word	0x46000000
 800be7c:	4c742400 	.word	0x4c742400
 800be80:	4a742400 	.word	0x4a742400
 800be84:	4bbebc20 	.word	0x4bbebc20

0800be88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be92:	2300      	movs	r3, #0
 800be94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be96:	4b53      	ldr	r3, [pc, #332]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800be98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9a:	f003 0303 	and.w	r3, r3, #3
 800be9e:	2b03      	cmp	r3, #3
 800bea0:	d101      	bne.n	800bea6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	e099      	b.n	800bfda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bea6:	4b4f      	ldr	r3, [pc, #316]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a4e      	ldr	r2, [pc, #312]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800beac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800beb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beb2:	f7f7 f973 	bl	800319c <HAL_GetTick>
 800beb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800beb8:	e008      	b.n	800becc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800beba:	f7f7 f96f 	bl	800319c <HAL_GetTick>
 800bebe:	4602      	mov	r2, r0
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d901      	bls.n	800becc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e086      	b.n	800bfda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800becc:	4b45      	ldr	r3, [pc, #276]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1f0      	bne.n	800beba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bed8:	4b42      	ldr	r3, [pc, #264]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800beda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bedc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	031b      	lsls	r3, r3, #12
 800bee6:	493f      	ldr	r1, [pc, #252]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bee8:	4313      	orrs	r3, r2
 800beea:	628b      	str	r3, [r1, #40]	; 0x28
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	3b01      	subs	r3, #1
 800bef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	3b01      	subs	r3, #1
 800befc:	025b      	lsls	r3, r3, #9
 800befe:	b29b      	uxth	r3, r3
 800bf00:	431a      	orrs	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	3b01      	subs	r3, #1
 800bf08:	041b      	lsls	r3, r3, #16
 800bf0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	3b01      	subs	r3, #1
 800bf16:	061b      	lsls	r3, r3, #24
 800bf18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf1c:	4931      	ldr	r1, [pc, #196]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bf22:	4b30      	ldr	r3, [pc, #192]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	492d      	ldr	r1, [pc, #180]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf30:	4313      	orrs	r3, r2
 800bf32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf34:	4b2b      	ldr	r3, [pc, #172]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf38:	f023 0220 	bic.w	r2, r3, #32
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	4928      	ldr	r1, [pc, #160]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf42:	4313      	orrs	r3, r2
 800bf44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf46:	4b27      	ldr	r3, [pc, #156]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4a:	4a26      	ldr	r2, [pc, #152]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf4c:	f023 0310 	bic.w	r3, r3, #16
 800bf50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf52:	4b24      	ldr	r3, [pc, #144]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf56:	4b24      	ldr	r3, [pc, #144]	; (800bfe8 <RCCEx_PLL2_Config+0x160>)
 800bf58:	4013      	ands	r3, r2
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	69d2      	ldr	r2, [r2, #28]
 800bf5e:	00d2      	lsls	r2, r2, #3
 800bf60:	4920      	ldr	r1, [pc, #128]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf62:	4313      	orrs	r3, r2
 800bf64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bf66:	4b1f      	ldr	r3, [pc, #124]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6a:	4a1e      	ldr	r2, [pc, #120]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf6c:	f043 0310 	orr.w	r3, r3, #16
 800bf70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d106      	bne.n	800bf86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf78:	4b1a      	ldr	r3, [pc, #104]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7c:	4a19      	ldr	r2, [pc, #100]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf84:	e00f      	b.n	800bfa6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d106      	bne.n	800bf9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf8c:	4b15      	ldr	r3, [pc, #84]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	4a14      	ldr	r2, [pc, #80]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf98:	e005      	b.n	800bfa6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf9a:	4b12      	ldr	r3, [pc, #72]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9e:	4a11      	ldr	r2, [pc, #68]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bfa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bfa6:	4b0f      	ldr	r3, [pc, #60]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a0e      	ldr	r2, [pc, #56]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bfac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bfb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfb2:	f7f7 f8f3 	bl	800319c <HAL_GetTick>
 800bfb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfb8:	e008      	b.n	800bfcc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bfba:	f7f7 f8ef 	bl	800319c <HAL_GetTick>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d901      	bls.n	800bfcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfc8:	2303      	movs	r3, #3
 800bfca:	e006      	b.n	800bfda <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfcc:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <RCCEx_PLL2_Config+0x15c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d0f0      	beq.n	800bfba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	58024400 	.word	0x58024400
 800bfe8:	ffff0007 	.word	0xffff0007

0800bfec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bff6:	2300      	movs	r3, #0
 800bff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bffa:	4b53      	ldr	r3, [pc, #332]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800bffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffe:	f003 0303 	and.w	r3, r3, #3
 800c002:	2b03      	cmp	r3, #3
 800c004:	d101      	bne.n	800c00a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	e099      	b.n	800c13e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c00a:	4b4f      	ldr	r3, [pc, #316]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a4e      	ldr	r2, [pc, #312]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c016:	f7f7 f8c1 	bl	800319c <HAL_GetTick>
 800c01a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c01c:	e008      	b.n	800c030 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c01e:	f7f7 f8bd 	bl	800319c <HAL_GetTick>
 800c022:	4602      	mov	r2, r0
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d901      	bls.n	800c030 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c02c:	2303      	movs	r3, #3
 800c02e:	e086      	b.n	800c13e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c030:	4b45      	ldr	r3, [pc, #276]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1f0      	bne.n	800c01e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c03c:	4b42      	ldr	r3, [pc, #264]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c040:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	051b      	lsls	r3, r3, #20
 800c04a:	493f      	ldr	r1, [pc, #252]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c04c:	4313      	orrs	r3, r2
 800c04e:	628b      	str	r3, [r1, #40]	; 0x28
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	3b01      	subs	r3, #1
 800c056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	3b01      	subs	r3, #1
 800c060:	025b      	lsls	r3, r3, #9
 800c062:	b29b      	uxth	r3, r3
 800c064:	431a      	orrs	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	3b01      	subs	r3, #1
 800c06c:	041b      	lsls	r3, r3, #16
 800c06e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c072:	431a      	orrs	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	3b01      	subs	r3, #1
 800c07a:	061b      	lsls	r3, r3, #24
 800c07c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c080:	4931      	ldr	r1, [pc, #196]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c082:	4313      	orrs	r3, r2
 800c084:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c086:	4b30      	ldr	r3, [pc, #192]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	492d      	ldr	r1, [pc, #180]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c094:	4313      	orrs	r3, r2
 800c096:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c098:	4b2b      	ldr	r3, [pc, #172]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	4928      	ldr	r1, [pc, #160]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c0aa:	4b27      	ldr	r3, [pc, #156]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ae:	4a26      	ldr	r2, [pc, #152]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c0b6:	4b24      	ldr	r3, [pc, #144]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0ba:	4b24      	ldr	r3, [pc, #144]	; (800c14c <RCCEx_PLL3_Config+0x160>)
 800c0bc:	4013      	ands	r3, r2
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	69d2      	ldr	r2, [r2, #28]
 800c0c2:	00d2      	lsls	r2, r2, #3
 800c0c4:	4920      	ldr	r1, [pc, #128]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c0ca:	4b1f      	ldr	r3, [pc, #124]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ce:	4a1e      	ldr	r2, [pc, #120]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d106      	bne.n	800c0ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c0dc:	4b1a      	ldr	r3, [pc, #104]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e0:	4a19      	ldr	r2, [pc, #100]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c0e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0e8:	e00f      	b.n	800c10a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d106      	bne.n	800c0fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c0f0:	4b15      	ldr	r3, [pc, #84]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f4:	4a14      	ldr	r2, [pc, #80]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c0f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c0fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0fc:	e005      	b.n	800c10a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c0fe:	4b12      	ldr	r3, [pc, #72]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c102:	4a11      	ldr	r2, [pc, #68]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c104:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c108:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c10a:	4b0f      	ldr	r3, [pc, #60]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a0e      	ldr	r2, [pc, #56]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c116:	f7f7 f841 	bl	800319c <HAL_GetTick>
 800c11a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c11c:	e008      	b.n	800c130 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c11e:	f7f7 f83d 	bl	800319c <HAL_GetTick>
 800c122:	4602      	mov	r2, r0
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d901      	bls.n	800c130 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e006      	b.n	800c13e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c130:	4b05      	ldr	r3, [pc, #20]	; (800c148 <RCCEx_PLL3_Config+0x15c>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d0f0      	beq.n	800c11e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	58024400 	.word	0x58024400
 800c14c:	ffff0007 	.word	0xffff0007

0800c150 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d071      	beq.n	800c246 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d106      	bne.n	800c17c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7f6 fb0e 	bl	8002798 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2202      	movs	r2, #2
 800c180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	f003 0310 	and.w	r3, r3, #16
 800c18e:	2b10      	cmp	r3, #16
 800c190:	d050      	beq.n	800c234 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	22ca      	movs	r2, #202	; 0xca
 800c198:	625a      	str	r2, [r3, #36]	; 0x24
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2253      	movs	r2, #83	; 0x53
 800c1a0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fa4a 	bl	800c63c <RTC_EnterInitMode>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d124      	bne.n	800c1fc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6899      	ldr	r1, [r3, #8]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	4b24      	ldr	r3, [pc, #144]	; (800c250 <HAL_RTC_Init+0x100>)
 800c1be:	400b      	ands	r3, r1
 800c1c0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6899      	ldr	r1, [r3, #8]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	431a      	orrs	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	431a      	orrs	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	0419      	lsls	r1, r3, #16
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68da      	ldr	r2, [r3, #12]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	430a      	orrs	r2, r1
 800c1f0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fa56 	bl	800c6a4 <RTC_ExitInitMode>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d113      	bne.n	800c22a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f022 0203 	bic.w	r2, r2, #3
 800c210:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	69da      	ldr	r2, [r3, #28]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	431a      	orrs	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	430a      	orrs	r2, r1
 800c228:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	22ff      	movs	r2, #255	; 0xff
 800c230:	625a      	str	r2, [r3, #36]	; 0x24
 800c232:	e001      	b.n	800c238 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d103      	bne.n	800c246 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c246:	7bfb      	ldrb	r3, [r7, #15]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	ff8fffbf 	.word	0xff8fffbf

0800c254 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c254:	b590      	push	{r4, r7, lr}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d101      	bne.n	800c26e <HAL_RTC_SetTime+0x1a>
 800c26a:	2302      	movs	r3, #2
 800c26c:	e089      	b.n	800c382 <HAL_RTC_SetTime+0x12e>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2202      	movs	r2, #2
 800c27a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	22ca      	movs	r2, #202	; 0xca
 800c284:	625a      	str	r2, [r3, #36]	; 0x24
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2253      	movs	r2, #83	; 0x53
 800c28c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f000 f9d4 	bl	800c63c <RTC_EnterInitMode>
 800c294:	4603      	mov	r3, r0
 800c296:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c298:	7cfb      	ldrb	r3, [r7, #19]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d161      	bne.n	800c362 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d126      	bne.n	800c2f2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d102      	bne.n	800c2b8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 fa2f 	bl	800c720 <RTC_ByteToBcd2>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	785b      	ldrb	r3, [r3, #1]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 fa28 	bl	800c720 <RTC_ByteToBcd2>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2d4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	789b      	ldrb	r3, [r3, #2]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 fa20 	bl	800c720 <RTC_ByteToBcd2>
 800c2e0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2e2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	78db      	ldrb	r3, [r3, #3]
 800c2ea:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]
 800c2f0:	e018      	b.n	800c324 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d102      	bne.n	800c306 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2200      	movs	r2, #0
 800c304:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	785b      	ldrb	r3, [r3, #1]
 800c310:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c312:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c318:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	78db      	ldrb	r3, [r3, #3]
 800c31e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c320:	4313      	orrs	r3, r2
 800c322:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	6979      	ldr	r1, [r7, #20]
 800c32a:	4b18      	ldr	r3, [pc, #96]	; (800c38c <HAL_RTC_SetTime+0x138>)
 800c32c:	400b      	ands	r3, r1
 800c32e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	689a      	ldr	r2, [r3, #8]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c33e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6899      	ldr	r1, [r3, #8]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	68da      	ldr	r2, [r3, #12]
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	431a      	orrs	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	430a      	orrs	r2, r1
 800c356:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f000 f9a3 	bl	800c6a4 <RTC_ExitInitMode>
 800c35e:	4603      	mov	r3, r0
 800c360:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	22ff      	movs	r2, #255	; 0xff
 800c368:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c36a:	7cfb      	ldrb	r3, [r7, #19]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d103      	bne.n	800c378 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2201      	movs	r2, #1
 800c374:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c380:	7cfb      	ldrb	r3, [r7, #19]
}
 800c382:	4618      	mov	r0, r3
 800c384:	371c      	adds	r7, #28
 800c386:	46bd      	mov	sp, r7
 800c388:	bd90      	pop	{r4, r7, pc}
 800c38a:	bf00      	nop
 800c38c:	007f7f7f 	.word	0x007f7f7f

0800c390 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	4b22      	ldr	r3, [pc, #136]	; (800c444 <HAL_RTC_GetTime+0xb4>)
 800c3bc:	4013      	ands	r3, r2
 800c3be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	0c1b      	lsrs	r3, r3, #16
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	0a1b      	lsrs	r3, r3, #8
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	0d9b      	lsrs	r3, r3, #22
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	f003 0301 	and.w	r3, r3, #1
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d11a      	bne.n	800c43a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 f9a9 	bl	800c760 <RTC_Bcd2ToByte>
 800c40e:	4603      	mov	r3, r0
 800c410:	461a      	mov	r2, r3
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	785b      	ldrb	r3, [r3, #1]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 f9a0 	bl	800c760 <RTC_Bcd2ToByte>
 800c420:	4603      	mov	r3, r0
 800c422:	461a      	mov	r2, r3
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	789b      	ldrb	r3, [r3, #2]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 f997 	bl	800c760 <RTC_Bcd2ToByte>
 800c432:	4603      	mov	r3, r0
 800c434:	461a      	mov	r2, r3
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	007f7f7f 	.word	0x007f7f7f

0800c448 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d101      	bne.n	800c462 <HAL_RTC_SetDate+0x1a>
 800c45e:	2302      	movs	r3, #2
 800c460:	e073      	b.n	800c54a <HAL_RTC_SetDate+0x102>
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2201      	movs	r2, #1
 800c466:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2202      	movs	r2, #2
 800c46e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10e      	bne.n	800c496 <HAL_RTC_SetDate+0x4e>
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	785b      	ldrb	r3, [r3, #1]
 800c47c:	f003 0310 	and.w	r3, r3, #16
 800c480:	2b00      	cmp	r3, #0
 800c482:	d008      	beq.n	800c496 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	785b      	ldrb	r3, [r3, #1]
 800c488:	f023 0310 	bic.w	r3, r3, #16
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	330a      	adds	r3, #10
 800c490:	b2da      	uxtb	r2, r3
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d11c      	bne.n	800c4d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	78db      	ldrb	r3, [r3, #3]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 f93d 	bl	800c720 <RTC_ByteToBcd2>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	785b      	ldrb	r3, [r3, #1]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f000 f936 	bl	800c720 <RTC_ByteToBcd2>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c4b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	789b      	ldrb	r3, [r3, #2]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 f92e 	bl	800c720 <RTC_ByteToBcd2>
 800c4c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c4c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	617b      	str	r3, [r7, #20]
 800c4d4:	e00e      	b.n	800c4f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	78db      	ldrb	r3, [r3, #3]
 800c4da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	785b      	ldrb	r3, [r3, #1]
 800c4e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c4e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c4e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	22ca      	movs	r2, #202	; 0xca
 800c4fa:	625a      	str	r2, [r3, #36]	; 0x24
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2253      	movs	r2, #83	; 0x53
 800c502:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f000 f899 	bl	800c63c <RTC_EnterInitMode>
 800c50a:	4603      	mov	r3, r0
 800c50c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c50e:	7cfb      	ldrb	r3, [r7, #19]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d10a      	bne.n	800c52a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	6979      	ldr	r1, [r7, #20]
 800c51a:	4b0e      	ldr	r3, [pc, #56]	; (800c554 <HAL_RTC_SetDate+0x10c>)
 800c51c:	400b      	ands	r3, r1
 800c51e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f000 f8bf 	bl	800c6a4 <RTC_ExitInitMode>
 800c526:	4603      	mov	r3, r0
 800c528:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	22ff      	movs	r2, #255	; 0xff
 800c530:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c532:	7cfb      	ldrb	r3, [r7, #19]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d103      	bne.n	800c540 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c548:	7cfb      	ldrb	r3, [r7, #19]


}
 800c54a:	4618      	mov	r0, r3
 800c54c:	371c      	adds	r7, #28
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd90      	pop	{r4, r7, pc}
 800c552:	bf00      	nop
 800c554:	00ffff3f 	.word	0x00ffff3f

0800c558 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	685a      	ldr	r2, [r3, #4]
 800c56a:	4b21      	ldr	r3, [pc, #132]	; (800c5f0 <HAL_RTC_GetDate+0x98>)
 800c56c:	4013      	ands	r3, r2
 800c56e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	0c1b      	lsrs	r3, r3, #16
 800c574:	b2da      	uxtb	r2, r3
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	0a1b      	lsrs	r3, r3, #8
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	f003 031f 	and.w	r3, r3, #31
 800c584:	b2da      	uxtb	r2, r3
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c592:	b2da      	uxtb	r2, r3
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	0b5b      	lsrs	r3, r3, #13
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	f003 0307 	and.w	r3, r3, #7
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d11a      	bne.n	800c5e4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	78db      	ldrb	r3, [r3, #3]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f000 f8d4 	bl	800c760 <RTC_Bcd2ToByte>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	785b      	ldrb	r3, [r3, #1]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f000 f8cb 	bl	800c760 <RTC_Bcd2ToByte>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	789b      	ldrb	r3, [r3, #2]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f000 f8c2 	bl	800c760 <RTC_Bcd2ToByte>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	461a      	mov	r2, r3
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3718      	adds	r7, #24
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	00ffff3f 	.word	0x00ffff3f

0800c5f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a0d      	ldr	r2, [pc, #52]	; (800c638 <HAL_RTC_WaitForSynchro+0x44>)
 800c602:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c604:	f7f6 fdca 	bl	800319c <HAL_GetTick>
 800c608:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c60a:	e009      	b.n	800c620 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c60c:	f7f6 fdc6 	bl	800319c <HAL_GetTick>
 800c610:	4602      	mov	r2, r0
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c61a:	d901      	bls.n	800c620 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c61c:	2303      	movs	r3, #3
 800c61e:	e007      	b.n	800c630 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	f003 0320 	and.w	r3, r3, #32
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d0ee      	beq.n	800c60c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	0003ff5f 	.word	0x0003ff5f

0800c63c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c652:	2b00      	cmp	r3, #0
 800c654:	d120      	bne.n	800c698 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c65e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c660:	f7f6 fd9c 	bl	800319c <HAL_GetTick>
 800c664:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c666:	e00d      	b.n	800c684 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c668:	f7f6 fd98 	bl	800319c <HAL_GetTick>
 800c66c:	4602      	mov	r2, r0
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c676:	d905      	bls.n	800c684 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c678:	2303      	movs	r3, #3
 800c67a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2203      	movs	r2, #3
 800c680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d102      	bne.n	800c698 <RTC_EnterInitMode+0x5c>
 800c692:	7bfb      	ldrb	r3, [r7, #15]
 800c694:	2b03      	cmp	r3, #3
 800c696:	d1e7      	bne.n	800c668 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c698:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
	...

0800c6a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c6b0:	4b1a      	ldr	r3, [pc, #104]	; (800c71c <RTC_ExitInitMode+0x78>)
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	4a19      	ldr	r2, [pc, #100]	; (800c71c <RTC_ExitInitMode+0x78>)
 800c6b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6ba:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c6bc:	4b17      	ldr	r3, [pc, #92]	; (800c71c <RTC_ExitInitMode+0x78>)
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	f003 0320 	and.w	r3, r3, #32
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d10c      	bne.n	800c6e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff ff93 	bl	800c5f4 <HAL_RTC_WaitForSynchro>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d01e      	beq.n	800c712 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2203      	movs	r2, #3
 800c6d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	73fb      	strb	r3, [r7, #15]
 800c6e0:	e017      	b.n	800c712 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c6e2:	4b0e      	ldr	r3, [pc, #56]	; (800c71c <RTC_ExitInitMode+0x78>)
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	4a0d      	ldr	r2, [pc, #52]	; (800c71c <RTC_ExitInitMode+0x78>)
 800c6e8:	f023 0320 	bic.w	r3, r3, #32
 800c6ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7ff ff80 	bl	800c5f4 <HAL_RTC_WaitForSynchro>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d005      	beq.n	800c706 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2203      	movs	r2, #3
 800c6fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c702:	2303      	movs	r3, #3
 800c704:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c706:	4b05      	ldr	r3, [pc, #20]	; (800c71c <RTC_ExitInitMode+0x78>)
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	4a04      	ldr	r2, [pc, #16]	; (800c71c <RTC_ExitInitMode+0x78>)
 800c70c:	f043 0320 	orr.w	r3, r3, #32
 800c710:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c712:	7bfb      	ldrb	r3, [r7, #15]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	58004000 	.word	0x58004000

0800c720 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c72a:	2300      	movs	r3, #0
 800c72c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c732:	e005      	b.n	800c740 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	3301      	adds	r3, #1
 800c738:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c73a:	7afb      	ldrb	r3, [r7, #11]
 800c73c:	3b0a      	subs	r3, #10
 800c73e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c740:	7afb      	ldrb	r3, [r7, #11]
 800c742:	2b09      	cmp	r3, #9
 800c744:	d8f6      	bhi.n	800c734 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	011b      	lsls	r3, r3, #4
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	7afb      	ldrb	r3, [r7, #11]
 800c750:	4313      	orrs	r3, r2
 800c752:	b2db      	uxtb	r3, r3
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c76a:	79fb      	ldrb	r3, [r7, #7]
 800c76c:	091b      	lsrs	r3, r3, #4
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	461a      	mov	r2, r3
 800c772:	0092      	lsls	r2, r2, #2
 800c774:	4413      	add	r3, r2
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c77a:	79fb      	ldrb	r3, [r7, #7]
 800c77c:	f003 030f 	and.w	r3, r3, #15
 800c780:	b2da      	uxtb	r2, r3
 800c782:	7bfb      	ldrb	r3, [r7, #15]
 800c784:	4413      	add	r3, r2
 800c786:	b2db      	uxtb	r3, r3
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e10f      	b.n	800c9c6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a87      	ldr	r2, [pc, #540]	; (800c9d0 <HAL_SPI_Init+0x23c>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d00f      	beq.n	800c7d6 <HAL_SPI_Init+0x42>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a86      	ldr	r2, [pc, #536]	; (800c9d4 <HAL_SPI_Init+0x240>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d00a      	beq.n	800c7d6 <HAL_SPI_Init+0x42>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a84      	ldr	r2, [pc, #528]	; (800c9d8 <HAL_SPI_Init+0x244>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d005      	beq.n	800c7d6 <HAL_SPI_Init+0x42>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	2b0f      	cmp	r3, #15
 800c7d0:	d901      	bls.n	800c7d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e0f7      	b.n	800c9c6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f900 	bl	800c9dc <SPI_GetPacketSize>
 800c7dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a7b      	ldr	r2, [pc, #492]	; (800c9d0 <HAL_SPI_Init+0x23c>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d00c      	beq.n	800c802 <HAL_SPI_Init+0x6e>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a79      	ldr	r2, [pc, #484]	; (800c9d4 <HAL_SPI_Init+0x240>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d007      	beq.n	800c802 <HAL_SPI_Init+0x6e>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a78      	ldr	r2, [pc, #480]	; (800c9d8 <HAL_SPI_Init+0x244>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d002      	beq.n	800c802 <HAL_SPI_Init+0x6e>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2b08      	cmp	r3, #8
 800c800:	d811      	bhi.n	800c826 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c806:	4a72      	ldr	r2, [pc, #456]	; (800c9d0 <HAL_SPI_Init+0x23c>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d009      	beq.n	800c820 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a70      	ldr	r2, [pc, #448]	; (800c9d4 <HAL_SPI_Init+0x240>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d004      	beq.n	800c820 <HAL_SPI_Init+0x8c>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a6f      	ldr	r2, [pc, #444]	; (800c9d8 <HAL_SPI_Init+0x244>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d104      	bne.n	800c82a <HAL_SPI_Init+0x96>
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2b10      	cmp	r3, #16
 800c824:	d901      	bls.n	800c82a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	e0cd      	b.n	800c9c6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c830:	b2db      	uxtb	r3, r3
 800c832:	2b00      	cmp	r3, #0
 800c834:	d106      	bne.n	800c844 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7f5 ffdc 	bl	80027fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2202      	movs	r2, #2
 800c848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f022 0201 	bic.w	r2, r2, #1
 800c85a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c866:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	699b      	ldr	r3, [r3, #24]
 800c86c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c870:	d119      	bne.n	800c8a6 <HAL_SPI_Init+0x112>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c87a:	d103      	bne.n	800c884 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c880:	2b00      	cmp	r3, #0
 800c882:	d008      	beq.n	800c896 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10c      	bne.n	800c8a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c890:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c894:	d107      	bne.n	800c8a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c8a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00f      	beq.n	800c8d2 <HAL_SPI_Init+0x13e>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	2b06      	cmp	r3, #6
 800c8b8:	d90b      	bls.n	800c8d2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	430a      	orrs	r2, r1
 800c8ce:	601a      	str	r2, [r3, #0]
 800c8d0:	e007      	b.n	800c8e2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	69da      	ldr	r2, [r3, #28]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ea:	431a      	orrs	r2, r3
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	431a      	orrs	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f4:	ea42 0103 	orr.w	r1, r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68da      	ldr	r2, [r3, #12]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	430a      	orrs	r2, r1
 800c902:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90c:	431a      	orrs	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c912:	431a      	orrs	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	431a      	orrs	r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	431a      	orrs	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	431a      	orrs	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a1b      	ldr	r3, [r3, #32]
 800c92a:	431a      	orrs	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	431a      	orrs	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c936:	431a      	orrs	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	431a      	orrs	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c942:	ea42 0103 	orr.w	r1, r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	430a      	orrs	r2, r1
 800c950:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d113      	bne.n	800c982 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c96c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c980:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f022 0201 	bic.w	r2, r2, #1
 800c990:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00a      	beq.n	800c9b4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	40013000 	.word	0x40013000
 800c9d4:	40003800 	.word	0x40003800
 800c9d8:	40003c00 	.word	0x40003c00

0800c9dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9e8:	095b      	lsrs	r3, r3, #5
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	3307      	adds	r3, #7
 800c9fa:	08db      	lsrs	r3, r3, #3
 800c9fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	fb02 f303 	mul.w	r3, r2, r3
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b082      	sub	sp, #8
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d101      	bne.n	800ca24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ca20:	2301      	movs	r3, #1
 800ca22:	e049      	b.n	800cab8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d106      	bne.n	800ca3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7f5 ff95 	bl	8002968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2202      	movs	r2, #2
 800ca42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4619      	mov	r1, r3
 800ca50:	4610      	mov	r0, r2
 800ca52:	f000 ff41 	bl	800d8d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2201      	movs	r2, #1
 800ca9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cab6:	2300      	movs	r3, #0
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d001      	beq.n	800cad8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	e04c      	b.n	800cb72 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2202      	movs	r2, #2
 800cadc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a26      	ldr	r2, [pc, #152]	; (800cb80 <HAL_TIM_Base_Start+0xc0>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d022      	beq.n	800cb30 <HAL_TIM_Base_Start+0x70>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caf2:	d01d      	beq.n	800cb30 <HAL_TIM_Base_Start+0x70>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a22      	ldr	r2, [pc, #136]	; (800cb84 <HAL_TIM_Base_Start+0xc4>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d018      	beq.n	800cb30 <HAL_TIM_Base_Start+0x70>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a21      	ldr	r2, [pc, #132]	; (800cb88 <HAL_TIM_Base_Start+0xc8>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d013      	beq.n	800cb30 <HAL_TIM_Base_Start+0x70>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a1f      	ldr	r2, [pc, #124]	; (800cb8c <HAL_TIM_Base_Start+0xcc>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d00e      	beq.n	800cb30 <HAL_TIM_Base_Start+0x70>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a1e      	ldr	r2, [pc, #120]	; (800cb90 <HAL_TIM_Base_Start+0xd0>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d009      	beq.n	800cb30 <HAL_TIM_Base_Start+0x70>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a1c      	ldr	r2, [pc, #112]	; (800cb94 <HAL_TIM_Base_Start+0xd4>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d004      	beq.n	800cb30 <HAL_TIM_Base_Start+0x70>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a1b      	ldr	r2, [pc, #108]	; (800cb98 <HAL_TIM_Base_Start+0xd8>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d115      	bne.n	800cb5c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	689a      	ldr	r2, [r3, #8]
 800cb36:	4b19      	ldr	r3, [pc, #100]	; (800cb9c <HAL_TIM_Base_Start+0xdc>)
 800cb38:	4013      	ands	r3, r2
 800cb3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b06      	cmp	r3, #6
 800cb40:	d015      	beq.n	800cb6e <HAL_TIM_Base_Start+0xae>
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb48:	d011      	beq.n	800cb6e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f042 0201 	orr.w	r2, r2, #1
 800cb58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb5a:	e008      	b.n	800cb6e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f042 0201 	orr.w	r2, r2, #1
 800cb6a:	601a      	str	r2, [r3, #0]
 800cb6c:	e000      	b.n	800cb70 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	40010000 	.word	0x40010000
 800cb84:	40000400 	.word	0x40000400
 800cb88:	40000800 	.word	0x40000800
 800cb8c:	40000c00 	.word	0x40000c00
 800cb90:	40010400 	.word	0x40010400
 800cb94:	40001800 	.word	0x40001800
 800cb98:	40014000 	.word	0x40014000
 800cb9c:	00010007 	.word	0x00010007

0800cba0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	6a1a      	ldr	r2, [r3, #32]
 800cbae:	f241 1311 	movw	r3, #4369	; 0x1111
 800cbb2:	4013      	ands	r3, r2
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d10f      	bne.n	800cbd8 <HAL_TIM_Base_Stop+0x38>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6a1a      	ldr	r2, [r3, #32]
 800cbbe:	f240 4344 	movw	r3, #1092	; 0x444
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d107      	bne.n	800cbd8 <HAL_TIM_Base_Stop+0x38>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f022 0201 	bic.w	r2, r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	370c      	adds	r7, #12
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
	...

0800cbf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d001      	beq.n	800cc08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e054      	b.n	800ccb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68da      	ldr	r2, [r3, #12]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f042 0201 	orr.w	r2, r2, #1
 800cc1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a26      	ldr	r2, [pc, #152]	; (800ccc0 <HAL_TIM_Base_Start_IT+0xd0>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d022      	beq.n	800cc70 <HAL_TIM_Base_Start_IT+0x80>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc32:	d01d      	beq.n	800cc70 <HAL_TIM_Base_Start_IT+0x80>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a22      	ldr	r2, [pc, #136]	; (800ccc4 <HAL_TIM_Base_Start_IT+0xd4>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d018      	beq.n	800cc70 <HAL_TIM_Base_Start_IT+0x80>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a21      	ldr	r2, [pc, #132]	; (800ccc8 <HAL_TIM_Base_Start_IT+0xd8>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d013      	beq.n	800cc70 <HAL_TIM_Base_Start_IT+0x80>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a1f      	ldr	r2, [pc, #124]	; (800cccc <HAL_TIM_Base_Start_IT+0xdc>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d00e      	beq.n	800cc70 <HAL_TIM_Base_Start_IT+0x80>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a1e      	ldr	r2, [pc, #120]	; (800ccd0 <HAL_TIM_Base_Start_IT+0xe0>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d009      	beq.n	800cc70 <HAL_TIM_Base_Start_IT+0x80>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a1c      	ldr	r2, [pc, #112]	; (800ccd4 <HAL_TIM_Base_Start_IT+0xe4>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d004      	beq.n	800cc70 <HAL_TIM_Base_Start_IT+0x80>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a1b      	ldr	r2, [pc, #108]	; (800ccd8 <HAL_TIM_Base_Start_IT+0xe8>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d115      	bne.n	800cc9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	689a      	ldr	r2, [r3, #8]
 800cc76:	4b19      	ldr	r3, [pc, #100]	; (800ccdc <HAL_TIM_Base_Start_IT+0xec>)
 800cc78:	4013      	ands	r3, r2
 800cc7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2b06      	cmp	r3, #6
 800cc80:	d015      	beq.n	800ccae <HAL_TIM_Base_Start_IT+0xbe>
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc88:	d011      	beq.n	800ccae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f042 0201 	orr.w	r2, r2, #1
 800cc98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc9a:	e008      	b.n	800ccae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f042 0201 	orr.w	r2, r2, #1
 800ccaa:	601a      	str	r2, [r3, #0]
 800ccac:	e000      	b.n	800ccb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3714      	adds	r7, #20
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	40010000 	.word	0x40010000
 800ccc4:	40000400 	.word	0x40000400
 800ccc8:	40000800 	.word	0x40000800
 800cccc:	40000c00 	.word	0x40000c00
 800ccd0:	40010400 	.word	0x40010400
 800ccd4:	40001800 	.word	0x40001800
 800ccd8:	40014000 	.word	0x40014000
 800ccdc:	00010007 	.word	0x00010007

0800cce0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d109      	bne.n	800cd08 <HAL_TIM_OC_Start_IT+0x28>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	bf14      	ite	ne
 800cd00:	2301      	movne	r3, #1
 800cd02:	2300      	moveq	r3, #0
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	e03c      	b.n	800cd82 <HAL_TIM_OC_Start_IT+0xa2>
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	2b04      	cmp	r3, #4
 800cd0c:	d109      	bne.n	800cd22 <HAL_TIM_OC_Start_IT+0x42>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	bf14      	ite	ne
 800cd1a:	2301      	movne	r3, #1
 800cd1c:	2300      	moveq	r3, #0
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	e02f      	b.n	800cd82 <HAL_TIM_OC_Start_IT+0xa2>
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	2b08      	cmp	r3, #8
 800cd26:	d109      	bne.n	800cd3c <HAL_TIM_OC_Start_IT+0x5c>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	bf14      	ite	ne
 800cd34:	2301      	movne	r3, #1
 800cd36:	2300      	moveq	r3, #0
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	e022      	b.n	800cd82 <HAL_TIM_OC_Start_IT+0xa2>
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b0c      	cmp	r3, #12
 800cd40:	d109      	bne.n	800cd56 <HAL_TIM_OC_Start_IT+0x76>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	bf14      	ite	ne
 800cd4e:	2301      	movne	r3, #1
 800cd50:	2300      	moveq	r3, #0
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	e015      	b.n	800cd82 <HAL_TIM_OC_Start_IT+0xa2>
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	2b10      	cmp	r3, #16
 800cd5a:	d109      	bne.n	800cd70 <HAL_TIM_OC_Start_IT+0x90>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	bf14      	ite	ne
 800cd68:	2301      	movne	r3, #1
 800cd6a:	2300      	moveq	r3, #0
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	e008      	b.n	800cd82 <HAL_TIM_OC_Start_IT+0xa2>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	bf14      	ite	ne
 800cd7c:	2301      	movne	r3, #1
 800cd7e:	2300      	moveq	r3, #0
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d001      	beq.n	800cd8a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	e0ec      	b.n	800cf64 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d104      	bne.n	800cd9a <HAL_TIM_OC_Start_IT+0xba>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2202      	movs	r2, #2
 800cd94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd98:	e023      	b.n	800cde2 <HAL_TIM_OC_Start_IT+0x102>
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	2b04      	cmp	r3, #4
 800cd9e:	d104      	bne.n	800cdaa <HAL_TIM_OC_Start_IT+0xca>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2202      	movs	r2, #2
 800cda4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cda8:	e01b      	b.n	800cde2 <HAL_TIM_OC_Start_IT+0x102>
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2b08      	cmp	r3, #8
 800cdae:	d104      	bne.n	800cdba <HAL_TIM_OC_Start_IT+0xda>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2202      	movs	r2, #2
 800cdb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cdb8:	e013      	b.n	800cde2 <HAL_TIM_OC_Start_IT+0x102>
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	2b0c      	cmp	r3, #12
 800cdbe:	d104      	bne.n	800cdca <HAL_TIM_OC_Start_IT+0xea>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2202      	movs	r2, #2
 800cdc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdc8:	e00b      	b.n	800cde2 <HAL_TIM_OC_Start_IT+0x102>
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	2b10      	cmp	r3, #16
 800cdce:	d104      	bne.n	800cdda <HAL_TIM_OC_Start_IT+0xfa>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdd8:	e003      	b.n	800cde2 <HAL_TIM_OC_Start_IT+0x102>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2202      	movs	r2, #2
 800cdde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2b0c      	cmp	r3, #12
 800cde6:	d841      	bhi.n	800ce6c <HAL_TIM_OC_Start_IT+0x18c>
 800cde8:	a201      	add	r2, pc, #4	; (adr r2, 800cdf0 <HAL_TIM_OC_Start_IT+0x110>)
 800cdea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdee:	bf00      	nop
 800cdf0:	0800ce25 	.word	0x0800ce25
 800cdf4:	0800ce6d 	.word	0x0800ce6d
 800cdf8:	0800ce6d 	.word	0x0800ce6d
 800cdfc:	0800ce6d 	.word	0x0800ce6d
 800ce00:	0800ce37 	.word	0x0800ce37
 800ce04:	0800ce6d 	.word	0x0800ce6d
 800ce08:	0800ce6d 	.word	0x0800ce6d
 800ce0c:	0800ce6d 	.word	0x0800ce6d
 800ce10:	0800ce49 	.word	0x0800ce49
 800ce14:	0800ce6d 	.word	0x0800ce6d
 800ce18:	0800ce6d 	.word	0x0800ce6d
 800ce1c:	0800ce6d 	.word	0x0800ce6d
 800ce20:	0800ce5b 	.word	0x0800ce5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68da      	ldr	r2, [r3, #12]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f042 0202 	orr.w	r2, r2, #2
 800ce32:	60da      	str	r2, [r3, #12]
      break;
 800ce34:	e01d      	b.n	800ce72 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68da      	ldr	r2, [r3, #12]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f042 0204 	orr.w	r2, r2, #4
 800ce44:	60da      	str	r2, [r3, #12]
      break;
 800ce46:	e014      	b.n	800ce72 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68da      	ldr	r2, [r3, #12]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f042 0208 	orr.w	r2, r2, #8
 800ce56:	60da      	str	r2, [r3, #12]
      break;
 800ce58:	e00b      	b.n	800ce72 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68da      	ldr	r2, [r3, #12]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f042 0210 	orr.w	r2, r2, #16
 800ce68:	60da      	str	r2, [r3, #12]
      break;
 800ce6a:	e002      	b.n	800ce72 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ce70:	bf00      	nop
  }

  if (status == HAL_OK)
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d174      	bne.n	800cf62 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f001 f943 	bl	800e10c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a38      	ldr	r2, [pc, #224]	; (800cf6c <HAL_TIM_OC_Start_IT+0x28c>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d013      	beq.n	800ceb8 <HAL_TIM_OC_Start_IT+0x1d8>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a36      	ldr	r2, [pc, #216]	; (800cf70 <HAL_TIM_OC_Start_IT+0x290>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d00e      	beq.n	800ceb8 <HAL_TIM_OC_Start_IT+0x1d8>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a35      	ldr	r2, [pc, #212]	; (800cf74 <HAL_TIM_OC_Start_IT+0x294>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d009      	beq.n	800ceb8 <HAL_TIM_OC_Start_IT+0x1d8>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a33      	ldr	r2, [pc, #204]	; (800cf78 <HAL_TIM_OC_Start_IT+0x298>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d004      	beq.n	800ceb8 <HAL_TIM_OC_Start_IT+0x1d8>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a32      	ldr	r2, [pc, #200]	; (800cf7c <HAL_TIM_OC_Start_IT+0x29c>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d101      	bne.n	800cebc <HAL_TIM_OC_Start_IT+0x1dc>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e000      	b.n	800cebe <HAL_TIM_OC_Start_IT+0x1de>
 800cebc:	2300      	movs	r3, #0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d007      	beq.n	800ced2 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ced0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a25      	ldr	r2, [pc, #148]	; (800cf6c <HAL_TIM_OC_Start_IT+0x28c>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d022      	beq.n	800cf22 <HAL_TIM_OC_Start_IT+0x242>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cee4:	d01d      	beq.n	800cf22 <HAL_TIM_OC_Start_IT+0x242>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a25      	ldr	r2, [pc, #148]	; (800cf80 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d018      	beq.n	800cf22 <HAL_TIM_OC_Start_IT+0x242>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a23      	ldr	r2, [pc, #140]	; (800cf84 <HAL_TIM_OC_Start_IT+0x2a4>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d013      	beq.n	800cf22 <HAL_TIM_OC_Start_IT+0x242>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a22      	ldr	r2, [pc, #136]	; (800cf88 <HAL_TIM_OC_Start_IT+0x2a8>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d00e      	beq.n	800cf22 <HAL_TIM_OC_Start_IT+0x242>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a19      	ldr	r2, [pc, #100]	; (800cf70 <HAL_TIM_OC_Start_IT+0x290>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d009      	beq.n	800cf22 <HAL_TIM_OC_Start_IT+0x242>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a1e      	ldr	r2, [pc, #120]	; (800cf8c <HAL_TIM_OC_Start_IT+0x2ac>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d004      	beq.n	800cf22 <HAL_TIM_OC_Start_IT+0x242>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a15      	ldr	r2, [pc, #84]	; (800cf74 <HAL_TIM_OC_Start_IT+0x294>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d115      	bne.n	800cf4e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	689a      	ldr	r2, [r3, #8]
 800cf28:	4b19      	ldr	r3, [pc, #100]	; (800cf90 <HAL_TIM_OC_Start_IT+0x2b0>)
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	2b06      	cmp	r3, #6
 800cf32:	d015      	beq.n	800cf60 <HAL_TIM_OC_Start_IT+0x280>
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf3a:	d011      	beq.n	800cf60 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f042 0201 	orr.w	r2, r2, #1
 800cf4a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf4c:	e008      	b.n	800cf60 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f042 0201 	orr.w	r2, r2, #1
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	e000      	b.n	800cf62 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf60:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	40010000 	.word	0x40010000
 800cf70:	40010400 	.word	0x40010400
 800cf74:	40014000 	.word	0x40014000
 800cf78:	40014400 	.word	0x40014400
 800cf7c:	40014800 	.word	0x40014800
 800cf80:	40000400 	.word	0x40000400
 800cf84:	40000800 	.word	0x40000800
 800cf88:	40000c00 	.word	0x40000c00
 800cf8c:	40001800 	.word	0x40001800
 800cf90:	00010007 	.word	0x00010007

0800cf94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e049      	b.n	800d03a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d106      	bne.n	800cfc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 f841 	bl	800d042 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	f000 fc80 	bl	800d8d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d042:	b480      	push	{r7}
 800d044:	b083      	sub	sp, #12
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d04a:	bf00      	nop
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
	...

0800d058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d109      	bne.n	800d07c <HAL_TIM_PWM_Start+0x24>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b01      	cmp	r3, #1
 800d072:	bf14      	ite	ne
 800d074:	2301      	movne	r3, #1
 800d076:	2300      	moveq	r3, #0
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	e03c      	b.n	800d0f6 <HAL_TIM_PWM_Start+0x9e>
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	2b04      	cmp	r3, #4
 800d080:	d109      	bne.n	800d096 <HAL_TIM_PWM_Start+0x3e>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	bf14      	ite	ne
 800d08e:	2301      	movne	r3, #1
 800d090:	2300      	moveq	r3, #0
 800d092:	b2db      	uxtb	r3, r3
 800d094:	e02f      	b.n	800d0f6 <HAL_TIM_PWM_Start+0x9e>
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2b08      	cmp	r3, #8
 800d09a:	d109      	bne.n	800d0b0 <HAL_TIM_PWM_Start+0x58>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	bf14      	ite	ne
 800d0a8:	2301      	movne	r3, #1
 800d0aa:	2300      	moveq	r3, #0
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	e022      	b.n	800d0f6 <HAL_TIM_PWM_Start+0x9e>
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	2b0c      	cmp	r3, #12
 800d0b4:	d109      	bne.n	800d0ca <HAL_TIM_PWM_Start+0x72>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	bf14      	ite	ne
 800d0c2:	2301      	movne	r3, #1
 800d0c4:	2300      	moveq	r3, #0
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	e015      	b.n	800d0f6 <HAL_TIM_PWM_Start+0x9e>
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b10      	cmp	r3, #16
 800d0ce:	d109      	bne.n	800d0e4 <HAL_TIM_PWM_Start+0x8c>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	bf14      	ite	ne
 800d0dc:	2301      	movne	r3, #1
 800d0de:	2300      	moveq	r3, #0
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	e008      	b.n	800d0f6 <HAL_TIM_PWM_Start+0x9e>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	bf14      	ite	ne
 800d0f0:	2301      	movne	r3, #1
 800d0f2:	2300      	moveq	r3, #0
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d001      	beq.n	800d0fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e0a1      	b.n	800d242 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d104      	bne.n	800d10e <HAL_TIM_PWM_Start+0xb6>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2202      	movs	r2, #2
 800d108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d10c:	e023      	b.n	800d156 <HAL_TIM_PWM_Start+0xfe>
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	2b04      	cmp	r3, #4
 800d112:	d104      	bne.n	800d11e <HAL_TIM_PWM_Start+0xc6>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2202      	movs	r2, #2
 800d118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d11c:	e01b      	b.n	800d156 <HAL_TIM_PWM_Start+0xfe>
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b08      	cmp	r3, #8
 800d122:	d104      	bne.n	800d12e <HAL_TIM_PWM_Start+0xd6>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2202      	movs	r2, #2
 800d128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d12c:	e013      	b.n	800d156 <HAL_TIM_PWM_Start+0xfe>
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b0c      	cmp	r3, #12
 800d132:	d104      	bne.n	800d13e <HAL_TIM_PWM_Start+0xe6>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2202      	movs	r2, #2
 800d138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d13c:	e00b      	b.n	800d156 <HAL_TIM_PWM_Start+0xfe>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2b10      	cmp	r3, #16
 800d142:	d104      	bne.n	800d14e <HAL_TIM_PWM_Start+0xf6>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2202      	movs	r2, #2
 800d148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d14c:	e003      	b.n	800d156 <HAL_TIM_PWM_Start+0xfe>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2202      	movs	r2, #2
 800d152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2201      	movs	r2, #1
 800d15c:	6839      	ldr	r1, [r7, #0]
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 ffd4 	bl	800e10c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a38      	ldr	r2, [pc, #224]	; (800d24c <HAL_TIM_PWM_Start+0x1f4>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d013      	beq.n	800d196 <HAL_TIM_PWM_Start+0x13e>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a37      	ldr	r2, [pc, #220]	; (800d250 <HAL_TIM_PWM_Start+0x1f8>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d00e      	beq.n	800d196 <HAL_TIM_PWM_Start+0x13e>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a35      	ldr	r2, [pc, #212]	; (800d254 <HAL_TIM_PWM_Start+0x1fc>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d009      	beq.n	800d196 <HAL_TIM_PWM_Start+0x13e>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a34      	ldr	r2, [pc, #208]	; (800d258 <HAL_TIM_PWM_Start+0x200>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d004      	beq.n	800d196 <HAL_TIM_PWM_Start+0x13e>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a32      	ldr	r2, [pc, #200]	; (800d25c <HAL_TIM_PWM_Start+0x204>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d101      	bne.n	800d19a <HAL_TIM_PWM_Start+0x142>
 800d196:	2301      	movs	r3, #1
 800d198:	e000      	b.n	800d19c <HAL_TIM_PWM_Start+0x144>
 800d19a:	2300      	movs	r3, #0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d007      	beq.n	800d1b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a25      	ldr	r2, [pc, #148]	; (800d24c <HAL_TIM_PWM_Start+0x1f4>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d022      	beq.n	800d200 <HAL_TIM_PWM_Start+0x1a8>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1c2:	d01d      	beq.n	800d200 <HAL_TIM_PWM_Start+0x1a8>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a25      	ldr	r2, [pc, #148]	; (800d260 <HAL_TIM_PWM_Start+0x208>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d018      	beq.n	800d200 <HAL_TIM_PWM_Start+0x1a8>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4a24      	ldr	r2, [pc, #144]	; (800d264 <HAL_TIM_PWM_Start+0x20c>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d013      	beq.n	800d200 <HAL_TIM_PWM_Start+0x1a8>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a22      	ldr	r2, [pc, #136]	; (800d268 <HAL_TIM_PWM_Start+0x210>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d00e      	beq.n	800d200 <HAL_TIM_PWM_Start+0x1a8>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a1a      	ldr	r2, [pc, #104]	; (800d250 <HAL_TIM_PWM_Start+0x1f8>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d009      	beq.n	800d200 <HAL_TIM_PWM_Start+0x1a8>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a1e      	ldr	r2, [pc, #120]	; (800d26c <HAL_TIM_PWM_Start+0x214>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d004      	beq.n	800d200 <HAL_TIM_PWM_Start+0x1a8>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a16      	ldr	r2, [pc, #88]	; (800d254 <HAL_TIM_PWM_Start+0x1fc>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d115      	bne.n	800d22c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	689a      	ldr	r2, [r3, #8]
 800d206:	4b1a      	ldr	r3, [pc, #104]	; (800d270 <HAL_TIM_PWM_Start+0x218>)
 800d208:	4013      	ands	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2b06      	cmp	r3, #6
 800d210:	d015      	beq.n	800d23e <HAL_TIM_PWM_Start+0x1e6>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d218:	d011      	beq.n	800d23e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f042 0201 	orr.w	r2, r2, #1
 800d228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d22a:	e008      	b.n	800d23e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f042 0201 	orr.w	r2, r2, #1
 800d23a:	601a      	str	r2, [r3, #0]
 800d23c:	e000      	b.n	800d240 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d23e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	40010000 	.word	0x40010000
 800d250:	40010400 	.word	0x40010400
 800d254:	40014000 	.word	0x40014000
 800d258:	40014400 	.word	0x40014400
 800d25c:	40014800 	.word	0x40014800
 800d260:	40000400 	.word	0x40000400
 800d264:	40000800 	.word	0x40000800
 800d268:	40000c00 	.word	0x40000c00
 800d26c:	40001800 	.word	0x40001800
 800d270:	00010007 	.word	0x00010007

0800d274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	f003 0302 	and.w	r3, r3, #2
 800d292:	2b00      	cmp	r3, #0
 800d294:	d020      	beq.n	800d2d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f003 0302 	and.w	r3, r3, #2
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d01b      	beq.n	800d2d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f06f 0202 	mvn.w	r2, #2
 800d2a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	699b      	ldr	r3, [r3, #24]
 800d2b6:	f003 0303 	and.w	r3, r3, #3
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d003      	beq.n	800d2c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 faec 	bl	800d89c <HAL_TIM_IC_CaptureCallback>
 800d2c4:	e005      	b.n	800d2d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7f3 f9dc 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 faef 	bl	800d8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	f003 0304 	and.w	r3, r3, #4
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d020      	beq.n	800d324 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f003 0304 	and.w	r3, r3, #4
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01b      	beq.n	800d324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f06f 0204 	mvn.w	r2, #4
 800d2f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	699b      	ldr	r3, [r3, #24]
 800d302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d306:	2b00      	cmp	r3, #0
 800d308:	d003      	beq.n	800d312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 fac6 	bl	800d89c <HAL_TIM_IC_CaptureCallback>
 800d310:	e005      	b.n	800d31e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7f3 f9b6 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 fac9 	bl	800d8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	f003 0308 	and.w	r3, r3, #8
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d020      	beq.n	800d370 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f003 0308 	and.w	r3, r3, #8
 800d334:	2b00      	cmp	r3, #0
 800d336:	d01b      	beq.n	800d370 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f06f 0208 	mvn.w	r2, #8
 800d340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2204      	movs	r2, #4
 800d346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	69db      	ldr	r3, [r3, #28]
 800d34e:	f003 0303 	and.w	r3, r3, #3
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 faa0 	bl	800d89c <HAL_TIM_IC_CaptureCallback>
 800d35c:	e005      	b.n	800d36a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7f3 f990 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 faa3 	bl	800d8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	f003 0310 	and.w	r3, r3, #16
 800d376:	2b00      	cmp	r3, #0
 800d378:	d020      	beq.n	800d3bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f003 0310 	and.w	r3, r3, #16
 800d380:	2b00      	cmp	r3, #0
 800d382:	d01b      	beq.n	800d3bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f06f 0210 	mvn.w	r2, #16
 800d38c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2208      	movs	r2, #8
 800d392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	69db      	ldr	r3, [r3, #28]
 800d39a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 fa7a 	bl	800d89c <HAL_TIM_IC_CaptureCallback>
 800d3a8:	e005      	b.n	800d3b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7f3 f96a 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 fa7d 	bl	800d8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f003 0301 	and.w	r3, r3, #1
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00c      	beq.n	800d3e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d007      	beq.n	800d3e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f06f 0201 	mvn.w	r2, #1
 800d3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7f4 ffa0 	bl	8002320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d104      	bne.n	800d3f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00c      	beq.n	800d40e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d007      	beq.n	800d40e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 ffbb 	bl	800e384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00c      	beq.n	800d432 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d007      	beq.n	800d432 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d42a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f000 ffb3 	bl	800e398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00c      	beq.n	800d456 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d442:	2b00      	cmp	r3, #0
 800d444:	d007      	beq.n	800d456 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d44e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fa37 	bl	800d8c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	f003 0320 	and.w	r3, r3, #32
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d00c      	beq.n	800d47a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f003 0320 	and.w	r3, r3, #32
 800d466:	2b00      	cmp	r3, #0
 800d468:	d007      	beq.n	800d47a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f06f 0220 	mvn.w	r2, #32
 800d472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 ff7b 	bl	800e370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d47a:	bf00      	nop
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
	...

0800d484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d490:	2300      	movs	r3, #0
 800d492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d101      	bne.n	800d4a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d49e:	2302      	movs	r3, #2
 800d4a0:	e0ff      	b.n	800d6a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b14      	cmp	r3, #20
 800d4ae:	f200 80f0 	bhi.w	800d692 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d4b2:	a201      	add	r2, pc, #4	; (adr r2, 800d4b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b8:	0800d50d 	.word	0x0800d50d
 800d4bc:	0800d693 	.word	0x0800d693
 800d4c0:	0800d693 	.word	0x0800d693
 800d4c4:	0800d693 	.word	0x0800d693
 800d4c8:	0800d54d 	.word	0x0800d54d
 800d4cc:	0800d693 	.word	0x0800d693
 800d4d0:	0800d693 	.word	0x0800d693
 800d4d4:	0800d693 	.word	0x0800d693
 800d4d8:	0800d58f 	.word	0x0800d58f
 800d4dc:	0800d693 	.word	0x0800d693
 800d4e0:	0800d693 	.word	0x0800d693
 800d4e4:	0800d693 	.word	0x0800d693
 800d4e8:	0800d5cf 	.word	0x0800d5cf
 800d4ec:	0800d693 	.word	0x0800d693
 800d4f0:	0800d693 	.word	0x0800d693
 800d4f4:	0800d693 	.word	0x0800d693
 800d4f8:	0800d611 	.word	0x0800d611
 800d4fc:	0800d693 	.word	0x0800d693
 800d500:	0800d693 	.word	0x0800d693
 800d504:	0800d693 	.word	0x0800d693
 800d508:	0800d651 	.word	0x0800d651
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68b9      	ldr	r1, [r7, #8]
 800d512:	4618      	mov	r0, r3
 800d514:	f000 fa86 	bl	800da24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	699a      	ldr	r2, [r3, #24]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f042 0208 	orr.w	r2, r2, #8
 800d526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	699a      	ldr	r2, [r3, #24]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f022 0204 	bic.w	r2, r2, #4
 800d536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	6999      	ldr	r1, [r3, #24]
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	691a      	ldr	r2, [r3, #16]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	430a      	orrs	r2, r1
 800d548:	619a      	str	r2, [r3, #24]
      break;
 800d54a:	e0a5      	b.n	800d698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	68b9      	ldr	r1, [r7, #8]
 800d552:	4618      	mov	r0, r3
 800d554:	f000 faf6 	bl	800db44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	699a      	ldr	r2, [r3, #24]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	699a      	ldr	r2, [r3, #24]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6999      	ldr	r1, [r3, #24]
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	691b      	ldr	r3, [r3, #16]
 800d582:	021a      	lsls	r2, r3, #8
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	430a      	orrs	r2, r1
 800d58a:	619a      	str	r2, [r3, #24]
      break;
 800d58c:	e084      	b.n	800d698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	68b9      	ldr	r1, [r7, #8]
 800d594:	4618      	mov	r0, r3
 800d596:	f000 fb5f 	bl	800dc58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	69da      	ldr	r2, [r3, #28]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f042 0208 	orr.w	r2, r2, #8
 800d5a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	69da      	ldr	r2, [r3, #28]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f022 0204 	bic.w	r2, r2, #4
 800d5b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	69d9      	ldr	r1, [r3, #28]
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	691a      	ldr	r2, [r3, #16]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	430a      	orrs	r2, r1
 800d5ca:	61da      	str	r2, [r3, #28]
      break;
 800d5cc:	e064      	b.n	800d698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68b9      	ldr	r1, [r7, #8]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 fbc7 	bl	800dd68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	69da      	ldr	r2, [r3, #28]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	69da      	ldr	r2, [r3, #28]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	69d9      	ldr	r1, [r3, #28]
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	691b      	ldr	r3, [r3, #16]
 800d604:	021a      	lsls	r2, r3, #8
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	430a      	orrs	r2, r1
 800d60c:	61da      	str	r2, [r3, #28]
      break;
 800d60e:	e043      	b.n	800d698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	68b9      	ldr	r1, [r7, #8]
 800d616:	4618      	mov	r0, r3
 800d618:	f000 fc10 	bl	800de3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f042 0208 	orr.w	r2, r2, #8
 800d62a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f022 0204 	bic.w	r2, r2, #4
 800d63a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	691a      	ldr	r2, [r3, #16]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	430a      	orrs	r2, r1
 800d64c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d64e:	e023      	b.n	800d698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68b9      	ldr	r1, [r7, #8]
 800d656:	4618      	mov	r0, r3
 800d658:	f000 fc54 	bl	800df04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d66a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d67a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	021a      	lsls	r2, r3, #8
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	430a      	orrs	r2, r1
 800d68e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d690:	e002      	b.n	800d698 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d692:	2301      	movs	r3, #1
 800d694:	75fb      	strb	r3, [r7, #23]
      break;
 800d696:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d6a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3718      	adds	r7, #24
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop

0800d6ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d101      	bne.n	800d6c8 <HAL_TIM_ConfigClockSource+0x1c>
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	e0dc      	b.n	800d882 <HAL_TIM_ConfigClockSource+0x1d6>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2202      	movs	r2, #2
 800d6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d6e0:	68ba      	ldr	r2, [r7, #8]
 800d6e2:	4b6a      	ldr	r3, [pc, #424]	; (800d88c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d6ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a64      	ldr	r2, [pc, #400]	; (800d890 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	f000 80a9 	beq.w	800d856 <HAL_TIM_ConfigClockSource+0x1aa>
 800d704:	4a62      	ldr	r2, [pc, #392]	; (800d890 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d706:	4293      	cmp	r3, r2
 800d708:	f200 80ae 	bhi.w	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d70c:	4a61      	ldr	r2, [pc, #388]	; (800d894 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	f000 80a1 	beq.w	800d856 <HAL_TIM_ConfigClockSource+0x1aa>
 800d714:	4a5f      	ldr	r2, [pc, #380]	; (800d894 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d716:	4293      	cmp	r3, r2
 800d718:	f200 80a6 	bhi.w	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d71c:	4a5e      	ldr	r2, [pc, #376]	; (800d898 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	f000 8099 	beq.w	800d856 <HAL_TIM_ConfigClockSource+0x1aa>
 800d724:	4a5c      	ldr	r2, [pc, #368]	; (800d898 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d726:	4293      	cmp	r3, r2
 800d728:	f200 809e 	bhi.w	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d72c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d730:	f000 8091 	beq.w	800d856 <HAL_TIM_ConfigClockSource+0x1aa>
 800d734:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d738:	f200 8096 	bhi.w	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d73c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d740:	f000 8089 	beq.w	800d856 <HAL_TIM_ConfigClockSource+0x1aa>
 800d744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d748:	f200 808e 	bhi.w	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d74c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d750:	d03e      	beq.n	800d7d0 <HAL_TIM_ConfigClockSource+0x124>
 800d752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d756:	f200 8087 	bhi.w	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d75a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d75e:	f000 8086 	beq.w	800d86e <HAL_TIM_ConfigClockSource+0x1c2>
 800d762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d766:	d87f      	bhi.n	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d768:	2b70      	cmp	r3, #112	; 0x70
 800d76a:	d01a      	beq.n	800d7a2 <HAL_TIM_ConfigClockSource+0xf6>
 800d76c:	2b70      	cmp	r3, #112	; 0x70
 800d76e:	d87b      	bhi.n	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d770:	2b60      	cmp	r3, #96	; 0x60
 800d772:	d050      	beq.n	800d816 <HAL_TIM_ConfigClockSource+0x16a>
 800d774:	2b60      	cmp	r3, #96	; 0x60
 800d776:	d877      	bhi.n	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d778:	2b50      	cmp	r3, #80	; 0x50
 800d77a:	d03c      	beq.n	800d7f6 <HAL_TIM_ConfigClockSource+0x14a>
 800d77c:	2b50      	cmp	r3, #80	; 0x50
 800d77e:	d873      	bhi.n	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d780:	2b40      	cmp	r3, #64	; 0x40
 800d782:	d058      	beq.n	800d836 <HAL_TIM_ConfigClockSource+0x18a>
 800d784:	2b40      	cmp	r3, #64	; 0x40
 800d786:	d86f      	bhi.n	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d788:	2b30      	cmp	r3, #48	; 0x30
 800d78a:	d064      	beq.n	800d856 <HAL_TIM_ConfigClockSource+0x1aa>
 800d78c:	2b30      	cmp	r3, #48	; 0x30
 800d78e:	d86b      	bhi.n	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d790:	2b20      	cmp	r3, #32
 800d792:	d060      	beq.n	800d856 <HAL_TIM_ConfigClockSource+0x1aa>
 800d794:	2b20      	cmp	r3, #32
 800d796:	d867      	bhi.n	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d05c      	beq.n	800d856 <HAL_TIM_ConfigClockSource+0x1aa>
 800d79c:	2b10      	cmp	r3, #16
 800d79e:	d05a      	beq.n	800d856 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7a0:	e062      	b.n	800d868 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6818      	ldr	r0, [r3, #0]
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	6899      	ldr	r1, [r3, #8]
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	685a      	ldr	r2, [r3, #4]
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	68db      	ldr	r3, [r3, #12]
 800d7b2:	f000 fc8b 	bl	800e0cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d7c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	609a      	str	r2, [r3, #8]
      break;
 800d7ce:	e04f      	b.n	800d870 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6818      	ldr	r0, [r3, #0]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	6899      	ldr	r1, [r3, #8]
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	685a      	ldr	r2, [r3, #4]
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	f000 fc74 	bl	800e0cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	689a      	ldr	r2, [r3, #8]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d7f2:	609a      	str	r2, [r3, #8]
      break;
 800d7f4:	e03c      	b.n	800d870 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6818      	ldr	r0, [r3, #0]
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	6859      	ldr	r1, [r3, #4]
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	461a      	mov	r2, r3
 800d804:	f000 fbe4 	bl	800dfd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2150      	movs	r1, #80	; 0x50
 800d80e:	4618      	mov	r0, r3
 800d810:	f000 fc3e 	bl	800e090 <TIM_ITRx_SetConfig>
      break;
 800d814:	e02c      	b.n	800d870 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6818      	ldr	r0, [r3, #0]
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	6859      	ldr	r1, [r3, #4]
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	461a      	mov	r2, r3
 800d824:	f000 fc03 	bl	800e02e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2160      	movs	r1, #96	; 0x60
 800d82e:	4618      	mov	r0, r3
 800d830:	f000 fc2e 	bl	800e090 <TIM_ITRx_SetConfig>
      break;
 800d834:	e01c      	b.n	800d870 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6818      	ldr	r0, [r3, #0]
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	6859      	ldr	r1, [r3, #4]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	461a      	mov	r2, r3
 800d844:	f000 fbc4 	bl	800dfd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2140      	movs	r1, #64	; 0x40
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 fc1e 	bl	800e090 <TIM_ITRx_SetConfig>
      break;
 800d854:	e00c      	b.n	800d870 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4619      	mov	r1, r3
 800d860:	4610      	mov	r0, r2
 800d862:	f000 fc15 	bl	800e090 <TIM_ITRx_SetConfig>
      break;
 800d866:	e003      	b.n	800d870 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	73fb      	strb	r3, [r7, #15]
      break;
 800d86c:	e000      	b.n	800d870 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d86e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d880:	7bfb      	ldrb	r3, [r7, #15]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	ffceff88 	.word	0xffceff88
 800d890:	00100040 	.word	0x00100040
 800d894:	00100030 	.word	0x00100030
 800d898:	00100020 	.word	0x00100020

0800d89c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d8a4:	bf00      	nop
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d8b8:	bf00      	nop
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d8cc:	bf00      	nop
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a46      	ldr	r2, [pc, #280]	; (800da04 <TIM_Base_SetConfig+0x12c>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d013      	beq.n	800d918 <TIM_Base_SetConfig+0x40>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8f6:	d00f      	beq.n	800d918 <TIM_Base_SetConfig+0x40>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	4a43      	ldr	r2, [pc, #268]	; (800da08 <TIM_Base_SetConfig+0x130>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d00b      	beq.n	800d918 <TIM_Base_SetConfig+0x40>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4a42      	ldr	r2, [pc, #264]	; (800da0c <TIM_Base_SetConfig+0x134>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d007      	beq.n	800d918 <TIM_Base_SetConfig+0x40>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	4a41      	ldr	r2, [pc, #260]	; (800da10 <TIM_Base_SetConfig+0x138>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d003      	beq.n	800d918 <TIM_Base_SetConfig+0x40>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	4a40      	ldr	r2, [pc, #256]	; (800da14 <TIM_Base_SetConfig+0x13c>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d108      	bne.n	800d92a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d91e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	4313      	orrs	r3, r2
 800d928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4a35      	ldr	r2, [pc, #212]	; (800da04 <TIM_Base_SetConfig+0x12c>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d01f      	beq.n	800d972 <TIM_Base_SetConfig+0x9a>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d938:	d01b      	beq.n	800d972 <TIM_Base_SetConfig+0x9a>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4a32      	ldr	r2, [pc, #200]	; (800da08 <TIM_Base_SetConfig+0x130>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d017      	beq.n	800d972 <TIM_Base_SetConfig+0x9a>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4a31      	ldr	r2, [pc, #196]	; (800da0c <TIM_Base_SetConfig+0x134>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d013      	beq.n	800d972 <TIM_Base_SetConfig+0x9a>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4a30      	ldr	r2, [pc, #192]	; (800da10 <TIM_Base_SetConfig+0x138>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d00f      	beq.n	800d972 <TIM_Base_SetConfig+0x9a>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4a2f      	ldr	r2, [pc, #188]	; (800da14 <TIM_Base_SetConfig+0x13c>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d00b      	beq.n	800d972 <TIM_Base_SetConfig+0x9a>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4a2e      	ldr	r2, [pc, #184]	; (800da18 <TIM_Base_SetConfig+0x140>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d007      	beq.n	800d972 <TIM_Base_SetConfig+0x9a>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4a2d      	ldr	r2, [pc, #180]	; (800da1c <TIM_Base_SetConfig+0x144>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d003      	beq.n	800d972 <TIM_Base_SetConfig+0x9a>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4a2c      	ldr	r2, [pc, #176]	; (800da20 <TIM_Base_SetConfig+0x148>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d108      	bne.n	800d984 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	4313      	orrs	r3, r2
 800d982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	695b      	ldr	r3, [r3, #20]
 800d98e:	4313      	orrs	r3, r2
 800d990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	689a      	ldr	r2, [r3, #8]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a16      	ldr	r2, [pc, #88]	; (800da04 <TIM_Base_SetConfig+0x12c>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d00f      	beq.n	800d9d0 <TIM_Base_SetConfig+0xf8>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a18      	ldr	r2, [pc, #96]	; (800da14 <TIM_Base_SetConfig+0x13c>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00b      	beq.n	800d9d0 <TIM_Base_SetConfig+0xf8>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a17      	ldr	r2, [pc, #92]	; (800da18 <TIM_Base_SetConfig+0x140>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d007      	beq.n	800d9d0 <TIM_Base_SetConfig+0xf8>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a16      	ldr	r2, [pc, #88]	; (800da1c <TIM_Base_SetConfig+0x144>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d003      	beq.n	800d9d0 <TIM_Base_SetConfig+0xf8>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a15      	ldr	r2, [pc, #84]	; (800da20 <TIM_Base_SetConfig+0x148>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d103      	bne.n	800d9d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	691a      	ldr	r2, [r3, #16]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	f003 0301 	and.w	r3, r3, #1
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d105      	bne.n	800d9f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	f023 0201 	bic.w	r2, r3, #1
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	611a      	str	r2, [r3, #16]
  }
}
 800d9f6:	bf00      	nop
 800d9f8:	3714      	adds	r7, #20
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	40010000 	.word	0x40010000
 800da08:	40000400 	.word	0x40000400
 800da0c:	40000800 	.word	0x40000800
 800da10:	40000c00 	.word	0x40000c00
 800da14:	40010400 	.word	0x40010400
 800da18:	40014000 	.word	0x40014000
 800da1c:	40014400 	.word	0x40014400
 800da20:	40014800 	.word	0x40014800

0800da24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da24:	b480      	push	{r7}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a1b      	ldr	r3, [r3, #32]
 800da32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6a1b      	ldr	r3, [r3, #32]
 800da38:	f023 0201 	bic.w	r2, r3, #1
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	4b37      	ldr	r3, [pc, #220]	; (800db2c <TIM_OC1_SetConfig+0x108>)
 800da50:	4013      	ands	r3, r2
 800da52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f023 0303 	bic.w	r3, r3, #3
 800da5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	4313      	orrs	r3, r2
 800da64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	f023 0302 	bic.w	r3, r3, #2
 800da6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	697a      	ldr	r2, [r7, #20]
 800da74:	4313      	orrs	r3, r2
 800da76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4a2d      	ldr	r2, [pc, #180]	; (800db30 <TIM_OC1_SetConfig+0x10c>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d00f      	beq.n	800daa0 <TIM_OC1_SetConfig+0x7c>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	4a2c      	ldr	r2, [pc, #176]	; (800db34 <TIM_OC1_SetConfig+0x110>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d00b      	beq.n	800daa0 <TIM_OC1_SetConfig+0x7c>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4a2b      	ldr	r2, [pc, #172]	; (800db38 <TIM_OC1_SetConfig+0x114>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d007      	beq.n	800daa0 <TIM_OC1_SetConfig+0x7c>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	4a2a      	ldr	r2, [pc, #168]	; (800db3c <TIM_OC1_SetConfig+0x118>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d003      	beq.n	800daa0 <TIM_OC1_SetConfig+0x7c>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	4a29      	ldr	r2, [pc, #164]	; (800db40 <TIM_OC1_SetConfig+0x11c>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d10c      	bne.n	800daba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	f023 0308 	bic.w	r3, r3, #8
 800daa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	697a      	ldr	r2, [r7, #20]
 800daae:	4313      	orrs	r3, r2
 800dab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f023 0304 	bic.w	r3, r3, #4
 800dab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a1c      	ldr	r2, [pc, #112]	; (800db30 <TIM_OC1_SetConfig+0x10c>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d00f      	beq.n	800dae2 <TIM_OC1_SetConfig+0xbe>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a1b      	ldr	r2, [pc, #108]	; (800db34 <TIM_OC1_SetConfig+0x110>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d00b      	beq.n	800dae2 <TIM_OC1_SetConfig+0xbe>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a1a      	ldr	r2, [pc, #104]	; (800db38 <TIM_OC1_SetConfig+0x114>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d007      	beq.n	800dae2 <TIM_OC1_SetConfig+0xbe>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a19      	ldr	r2, [pc, #100]	; (800db3c <TIM_OC1_SetConfig+0x118>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d003      	beq.n	800dae2 <TIM_OC1_SetConfig+0xbe>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a18      	ldr	r2, [pc, #96]	; (800db40 <TIM_OC1_SetConfig+0x11c>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d111      	bne.n	800db06 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800daf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	695b      	ldr	r3, [r3, #20]
 800daf6:	693a      	ldr	r2, [r7, #16]
 800daf8:	4313      	orrs	r3, r2
 800dafa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	699b      	ldr	r3, [r3, #24]
 800db00:	693a      	ldr	r2, [r7, #16]
 800db02:	4313      	orrs	r3, r2
 800db04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	693a      	ldr	r2, [r7, #16]
 800db0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	685a      	ldr	r2, [r3, #4]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	697a      	ldr	r2, [r7, #20]
 800db1e:	621a      	str	r2, [r3, #32]
}
 800db20:	bf00      	nop
 800db22:	371c      	adds	r7, #28
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	fffeff8f 	.word	0xfffeff8f
 800db30:	40010000 	.word	0x40010000
 800db34:	40010400 	.word	0x40010400
 800db38:	40014000 	.word	0x40014000
 800db3c:	40014400 	.word	0x40014400
 800db40:	40014800 	.word	0x40014800

0800db44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db44:	b480      	push	{r7}
 800db46:	b087      	sub	sp, #28
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a1b      	ldr	r3, [r3, #32]
 800db52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6a1b      	ldr	r3, [r3, #32]
 800db58:	f023 0210 	bic.w	r2, r3, #16
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	699b      	ldr	r3, [r3, #24]
 800db6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	4b34      	ldr	r3, [pc, #208]	; (800dc40 <TIM_OC2_SetConfig+0xfc>)
 800db70:	4013      	ands	r3, r2
 800db72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	021b      	lsls	r3, r3, #8
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	4313      	orrs	r3, r2
 800db86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	f023 0320 	bic.w	r3, r3, #32
 800db8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	011b      	lsls	r3, r3, #4
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	4313      	orrs	r3, r2
 800db9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a29      	ldr	r2, [pc, #164]	; (800dc44 <TIM_OC2_SetConfig+0x100>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d003      	beq.n	800dbac <TIM_OC2_SetConfig+0x68>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	4a28      	ldr	r2, [pc, #160]	; (800dc48 <TIM_OC2_SetConfig+0x104>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d10d      	bne.n	800dbc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	011b      	lsls	r3, r3, #4
 800dbba:	697a      	ldr	r2, [r7, #20]
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a1e      	ldr	r2, [pc, #120]	; (800dc44 <TIM_OC2_SetConfig+0x100>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d00f      	beq.n	800dbf0 <TIM_OC2_SetConfig+0xac>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a1d      	ldr	r2, [pc, #116]	; (800dc48 <TIM_OC2_SetConfig+0x104>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d00b      	beq.n	800dbf0 <TIM_OC2_SetConfig+0xac>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a1c      	ldr	r2, [pc, #112]	; (800dc4c <TIM_OC2_SetConfig+0x108>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d007      	beq.n	800dbf0 <TIM_OC2_SetConfig+0xac>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a1b      	ldr	r2, [pc, #108]	; (800dc50 <TIM_OC2_SetConfig+0x10c>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d003      	beq.n	800dbf0 <TIM_OC2_SetConfig+0xac>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a1a      	ldr	r2, [pc, #104]	; (800dc54 <TIM_OC2_SetConfig+0x110>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d113      	bne.n	800dc18 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	695b      	ldr	r3, [r3, #20]
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	693a      	ldr	r2, [r7, #16]
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	693a      	ldr	r2, [r7, #16]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	693a      	ldr	r2, [r7, #16]
 800dc1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	685a      	ldr	r2, [r3, #4]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	697a      	ldr	r2, [r7, #20]
 800dc30:	621a      	str	r2, [r3, #32]
}
 800dc32:	bf00      	nop
 800dc34:	371c      	adds	r7, #28
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	feff8fff 	.word	0xfeff8fff
 800dc44:	40010000 	.word	0x40010000
 800dc48:	40010400 	.word	0x40010400
 800dc4c:	40014000 	.word	0x40014000
 800dc50:	40014400 	.word	0x40014400
 800dc54:	40014800 	.word	0x40014800

0800dc58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b087      	sub	sp, #28
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6a1b      	ldr	r3, [r3, #32]
 800dc66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a1b      	ldr	r3, [r3, #32]
 800dc6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	69db      	ldr	r3, [r3, #28]
 800dc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	4b33      	ldr	r3, [pc, #204]	; (800dd50 <TIM_OC3_SetConfig+0xf8>)
 800dc84:	4013      	ands	r3, r2
 800dc86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f023 0303 	bic.w	r3, r3, #3
 800dc8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68fa      	ldr	r2, [r7, #12]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	021b      	lsls	r3, r3, #8
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a28      	ldr	r2, [pc, #160]	; (800dd54 <TIM_OC3_SetConfig+0xfc>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d003      	beq.n	800dcbe <TIM_OC3_SetConfig+0x66>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a27      	ldr	r2, [pc, #156]	; (800dd58 <TIM_OC3_SetConfig+0x100>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d10d      	bne.n	800dcda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dcc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	021b      	lsls	r3, r3, #8
 800dccc:	697a      	ldr	r2, [r7, #20]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dcd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	4a1d      	ldr	r2, [pc, #116]	; (800dd54 <TIM_OC3_SetConfig+0xfc>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d00f      	beq.n	800dd02 <TIM_OC3_SetConfig+0xaa>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4a1c      	ldr	r2, [pc, #112]	; (800dd58 <TIM_OC3_SetConfig+0x100>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d00b      	beq.n	800dd02 <TIM_OC3_SetConfig+0xaa>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4a1b      	ldr	r2, [pc, #108]	; (800dd5c <TIM_OC3_SetConfig+0x104>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d007      	beq.n	800dd02 <TIM_OC3_SetConfig+0xaa>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a1a      	ldr	r2, [pc, #104]	; (800dd60 <TIM_OC3_SetConfig+0x108>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d003      	beq.n	800dd02 <TIM_OC3_SetConfig+0xaa>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4a19      	ldr	r2, [pc, #100]	; (800dd64 <TIM_OC3_SetConfig+0x10c>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d113      	bne.n	800dd2a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dd10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	695b      	ldr	r3, [r3, #20]
 800dd16:	011b      	lsls	r3, r3, #4
 800dd18:	693a      	ldr	r2, [r7, #16]
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	699b      	ldr	r3, [r3, #24]
 800dd22:	011b      	lsls	r3, r3, #4
 800dd24:	693a      	ldr	r2, [r7, #16]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	693a      	ldr	r2, [r7, #16]
 800dd2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	685a      	ldr	r2, [r3, #4]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	697a      	ldr	r2, [r7, #20]
 800dd42:	621a      	str	r2, [r3, #32]
}
 800dd44:	bf00      	nop
 800dd46:	371c      	adds	r7, #28
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr
 800dd50:	fffeff8f 	.word	0xfffeff8f
 800dd54:	40010000 	.word	0x40010000
 800dd58:	40010400 	.word	0x40010400
 800dd5c:	40014000 	.word	0x40014000
 800dd60:	40014400 	.word	0x40014400
 800dd64:	40014800 	.word	0x40014800

0800dd68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b087      	sub	sp, #28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6a1b      	ldr	r3, [r3, #32]
 800dd76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6a1b      	ldr	r3, [r3, #32]
 800dd7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	69db      	ldr	r3, [r3, #28]
 800dd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	4b24      	ldr	r3, [pc, #144]	; (800de24 <TIM_OC4_SetConfig+0xbc>)
 800dd94:	4013      	ands	r3, r2
 800dd96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	021b      	lsls	r3, r3, #8
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ddb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	031b      	lsls	r3, r3, #12
 800ddba:	693a      	ldr	r2, [r7, #16]
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	4a19      	ldr	r2, [pc, #100]	; (800de28 <TIM_OC4_SetConfig+0xc0>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d00f      	beq.n	800dde8 <TIM_OC4_SetConfig+0x80>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4a18      	ldr	r2, [pc, #96]	; (800de2c <TIM_OC4_SetConfig+0xc4>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d00b      	beq.n	800dde8 <TIM_OC4_SetConfig+0x80>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4a17      	ldr	r2, [pc, #92]	; (800de30 <TIM_OC4_SetConfig+0xc8>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d007      	beq.n	800dde8 <TIM_OC4_SetConfig+0x80>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	4a16      	ldr	r2, [pc, #88]	; (800de34 <TIM_OC4_SetConfig+0xcc>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d003      	beq.n	800dde8 <TIM_OC4_SetConfig+0x80>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	4a15      	ldr	r2, [pc, #84]	; (800de38 <TIM_OC4_SetConfig+0xd0>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d109      	bne.n	800ddfc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ddee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	695b      	ldr	r3, [r3, #20]
 800ddf4:	019b      	lsls	r3, r3, #6
 800ddf6:	697a      	ldr	r2, [r7, #20]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	697a      	ldr	r2, [r7, #20]
 800de00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	685a      	ldr	r2, [r3, #4]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	693a      	ldr	r2, [r7, #16]
 800de14:	621a      	str	r2, [r3, #32]
}
 800de16:	bf00      	nop
 800de18:	371c      	adds	r7, #28
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	feff8fff 	.word	0xfeff8fff
 800de28:	40010000 	.word	0x40010000
 800de2c:	40010400 	.word	0x40010400
 800de30:	40014000 	.word	0x40014000
 800de34:	40014400 	.word	0x40014400
 800de38:	40014800 	.word	0x40014800

0800de3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b087      	sub	sp, #28
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a1b      	ldr	r3, [r3, #32]
 800de4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6a1b      	ldr	r3, [r3, #32]
 800de50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	4b21      	ldr	r3, [pc, #132]	; (800deec <TIM_OC5_SetConfig+0xb0>)
 800de68:	4013      	ands	r3, r2
 800de6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	68fa      	ldr	r2, [r7, #12]
 800de72:	4313      	orrs	r3, r2
 800de74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800de7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	041b      	lsls	r3, r3, #16
 800de84:	693a      	ldr	r2, [r7, #16]
 800de86:	4313      	orrs	r3, r2
 800de88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	4a18      	ldr	r2, [pc, #96]	; (800def0 <TIM_OC5_SetConfig+0xb4>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d00f      	beq.n	800deb2 <TIM_OC5_SetConfig+0x76>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	4a17      	ldr	r2, [pc, #92]	; (800def4 <TIM_OC5_SetConfig+0xb8>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d00b      	beq.n	800deb2 <TIM_OC5_SetConfig+0x76>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4a16      	ldr	r2, [pc, #88]	; (800def8 <TIM_OC5_SetConfig+0xbc>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d007      	beq.n	800deb2 <TIM_OC5_SetConfig+0x76>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a15      	ldr	r2, [pc, #84]	; (800defc <TIM_OC5_SetConfig+0xc0>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d003      	beq.n	800deb2 <TIM_OC5_SetConfig+0x76>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a14      	ldr	r2, [pc, #80]	; (800df00 <TIM_OC5_SetConfig+0xc4>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d109      	bne.n	800dec6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800deb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	695b      	ldr	r3, [r3, #20]
 800debe:	021b      	lsls	r3, r3, #8
 800dec0:	697a      	ldr	r2, [r7, #20]
 800dec2:	4313      	orrs	r3, r2
 800dec4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	697a      	ldr	r2, [r7, #20]
 800deca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	693a      	ldr	r2, [r7, #16]
 800dede:	621a      	str	r2, [r3, #32]
}
 800dee0:	bf00      	nop
 800dee2:	371c      	adds	r7, #28
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr
 800deec:	fffeff8f 	.word	0xfffeff8f
 800def0:	40010000 	.word	0x40010000
 800def4:	40010400 	.word	0x40010400
 800def8:	40014000 	.word	0x40014000
 800defc:	40014400 	.word	0x40014400
 800df00:	40014800 	.word	0x40014800

0800df04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df04:	b480      	push	{r7}
 800df06:	b087      	sub	sp, #28
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6a1b      	ldr	r3, [r3, #32]
 800df12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6a1b      	ldr	r3, [r3, #32]
 800df18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	4b22      	ldr	r3, [pc, #136]	; (800dfb8 <TIM_OC6_SetConfig+0xb4>)
 800df30:	4013      	ands	r3, r2
 800df32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	021b      	lsls	r3, r3, #8
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	4313      	orrs	r3, r2
 800df3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	051b      	lsls	r3, r3, #20
 800df4e:	693a      	ldr	r2, [r7, #16]
 800df50:	4313      	orrs	r3, r2
 800df52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4a19      	ldr	r2, [pc, #100]	; (800dfbc <TIM_OC6_SetConfig+0xb8>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d00f      	beq.n	800df7c <TIM_OC6_SetConfig+0x78>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	4a18      	ldr	r2, [pc, #96]	; (800dfc0 <TIM_OC6_SetConfig+0xbc>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d00b      	beq.n	800df7c <TIM_OC6_SetConfig+0x78>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4a17      	ldr	r2, [pc, #92]	; (800dfc4 <TIM_OC6_SetConfig+0xc0>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d007      	beq.n	800df7c <TIM_OC6_SetConfig+0x78>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a16      	ldr	r2, [pc, #88]	; (800dfc8 <TIM_OC6_SetConfig+0xc4>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d003      	beq.n	800df7c <TIM_OC6_SetConfig+0x78>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	4a15      	ldr	r2, [pc, #84]	; (800dfcc <TIM_OC6_SetConfig+0xc8>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d109      	bne.n	800df90 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	695b      	ldr	r3, [r3, #20]
 800df88:	029b      	lsls	r3, r3, #10
 800df8a:	697a      	ldr	r2, [r7, #20]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	697a      	ldr	r2, [r7, #20]
 800df94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	685a      	ldr	r2, [r3, #4]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	693a      	ldr	r2, [r7, #16]
 800dfa8:	621a      	str	r2, [r3, #32]
}
 800dfaa:	bf00      	nop
 800dfac:	371c      	adds	r7, #28
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	feff8fff 	.word	0xfeff8fff
 800dfbc:	40010000 	.word	0x40010000
 800dfc0:	40010400 	.word	0x40010400
 800dfc4:	40014000 	.word	0x40014000
 800dfc8:	40014400 	.word	0x40014400
 800dfcc:	40014800 	.word	0x40014800

0800dfd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b087      	sub	sp, #28
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6a1b      	ldr	r3, [r3, #32]
 800dfe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	f023 0201 	bic.w	r2, r3, #1
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	699b      	ldr	r3, [r3, #24]
 800dff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	011b      	lsls	r3, r3, #4
 800e000:	693a      	ldr	r2, [r7, #16]
 800e002:	4313      	orrs	r3, r2
 800e004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f023 030a 	bic.w	r3, r3, #10
 800e00c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	4313      	orrs	r3, r2
 800e014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	693a      	ldr	r2, [r7, #16]
 800e01a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	697a      	ldr	r2, [r7, #20]
 800e020:	621a      	str	r2, [r3, #32]
}
 800e022:	bf00      	nop
 800e024:	371c      	adds	r7, #28
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr

0800e02e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e02e:	b480      	push	{r7}
 800e030:	b087      	sub	sp, #28
 800e032:	af00      	add	r7, sp, #0
 800e034:	60f8      	str	r0, [r7, #12]
 800e036:	60b9      	str	r1, [r7, #8]
 800e038:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6a1b      	ldr	r3, [r3, #32]
 800e044:	f023 0210 	bic.w	r2, r3, #16
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	699b      	ldr	r3, [r3, #24]
 800e050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e058:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	031b      	lsls	r3, r3, #12
 800e05e:	693a      	ldr	r2, [r7, #16]
 800e060:	4313      	orrs	r3, r2
 800e062:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e06a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	011b      	lsls	r3, r3, #4
 800e070:	697a      	ldr	r2, [r7, #20]
 800e072:	4313      	orrs	r3, r2
 800e074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	697a      	ldr	r2, [r7, #20]
 800e080:	621a      	str	r2, [r3, #32]
}
 800e082:	bf00      	nop
 800e084:	371c      	adds	r7, #28
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
	...

0800e090 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	4b09      	ldr	r3, [pc, #36]	; (800e0c8 <TIM_ITRx_SetConfig+0x38>)
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	f043 0307 	orr.w	r3, r3, #7
 800e0b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	609a      	str	r2, [r3, #8]
}
 800e0ba:	bf00      	nop
 800e0bc:	3714      	adds	r7, #20
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop
 800e0c8:	ffcfff8f 	.word	0xffcfff8f

0800e0cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b087      	sub	sp, #28
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	607a      	str	r2, [r7, #4]
 800e0d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e0e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	021a      	lsls	r2, r3, #8
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	431a      	orrs	r2, r3
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	697a      	ldr	r2, [r7, #20]
 800e0fe:	609a      	str	r2, [r3, #8]
}
 800e100:	bf00      	nop
 800e102:	371c      	adds	r7, #28
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b087      	sub	sp, #28
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	f003 031f 	and.w	r3, r3, #31
 800e11e:	2201      	movs	r2, #1
 800e120:	fa02 f303 	lsl.w	r3, r2, r3
 800e124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6a1a      	ldr	r2, [r3, #32]
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	43db      	mvns	r3, r3
 800e12e:	401a      	ands	r2, r3
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6a1a      	ldr	r2, [r3, #32]
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	f003 031f 	and.w	r3, r3, #31
 800e13e:	6879      	ldr	r1, [r7, #4]
 800e140:	fa01 f303 	lsl.w	r3, r1, r3
 800e144:	431a      	orrs	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	621a      	str	r2, [r3, #32]
}
 800e14a:	bf00      	nop
 800e14c:	371c      	adds	r7, #28
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr
	...

0800e158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d101      	bne.n	800e170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e16c:	2302      	movs	r3, #2
 800e16e:	e06d      	b.n	800e24c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2202      	movs	r2, #2
 800e17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a30      	ldr	r2, [pc, #192]	; (800e258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d004      	beq.n	800e1a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a2f      	ldr	r2, [pc, #188]	; (800e25c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d108      	bne.n	800e1b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e1aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a20      	ldr	r2, [pc, #128]	; (800e258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d022      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1e2:	d01d      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a1d      	ldr	r2, [pc, #116]	; (800e260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d018      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4a1c      	ldr	r2, [pc, #112]	; (800e264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d013      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a1a      	ldr	r2, [pc, #104]	; (800e268 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d00e      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4a15      	ldr	r2, [pc, #84]	; (800e25c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d009      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a16      	ldr	r2, [pc, #88]	; (800e26c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d004      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4a15      	ldr	r2, [pc, #84]	; (800e270 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d10c      	bne.n	800e23a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	4313      	orrs	r3, r2
 800e230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	68ba      	ldr	r2, [r7, #8]
 800e238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2201      	movs	r2, #1
 800e23e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e24a:	2300      	movs	r3, #0
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3714      	adds	r7, #20
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr
 800e258:	40010000 	.word	0x40010000
 800e25c:	40010400 	.word	0x40010400
 800e260:	40000400 	.word	0x40000400
 800e264:	40000800 	.word	0x40000800
 800e268:	40000c00 	.word	0x40000c00
 800e26c:	40001800 	.word	0x40001800
 800e270:	40014000 	.word	0x40014000

0800e274 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e27e:	2300      	movs	r3, #0
 800e280:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d101      	bne.n	800e290 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e28c:	2302      	movs	r3, #2
 800e28e:	e065      	b.n	800e35c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2201      	movs	r2, #1
 800e294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	4313      	orrs	r3, r2
 800e2b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	691b      	ldr	r3, [r3, #16]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	699b      	ldr	r3, [r3, #24]
 800e304:	041b      	lsls	r3, r3, #16
 800e306:	4313      	orrs	r3, r2
 800e308:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	4a16      	ldr	r2, [pc, #88]	; (800e368 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d004      	beq.n	800e31e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a14      	ldr	r2, [pc, #80]	; (800e36c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d115      	bne.n	800e34a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e328:	051b      	lsls	r3, r3, #20
 800e32a:	4313      	orrs	r3, r2
 800e32c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	69db      	ldr	r3, [r3, #28]
 800e338:	4313      	orrs	r3, r2
 800e33a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	4313      	orrs	r3, r2
 800e348:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3714      	adds	r7, #20
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr
 800e368:	40010000 	.word	0x40010000
 800e36c:	40010400 	.word	0x40010400

0800e370 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d101      	bne.n	800e3be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e042      	b.n	800e444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d106      	bne.n	800e3d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f7f4 fba9 	bl	8002b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2224      	movs	r2, #36	; 0x24
 800e3da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f022 0201 	bic.w	r2, r2, #1
 800e3ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f001 fb0c 	bl	800fa14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 fda1 	bl	800ef44 <UART_SetConfig>
 800e402:	4603      	mov	r3, r0
 800e404:	2b01      	cmp	r3, #1
 800e406:	d101      	bne.n	800e40c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e408:	2301      	movs	r3, #1
 800e40a:	e01b      	b.n	800e444 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	685a      	ldr	r2, [r3, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e41a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	689a      	ldr	r2, [r3, #8]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e42a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f042 0201 	orr.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f001 fb8b 	bl	800fb58 <UART_CheckIdleState>
 800e442:	4603      	mov	r3, r0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08a      	sub	sp, #40	; 0x28
 800e450:	af02      	add	r7, sp, #8
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	603b      	str	r3, [r7, #0]
 800e458:	4613      	mov	r3, r2
 800e45a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e462:	2b20      	cmp	r3, #32
 800e464:	d17b      	bne.n	800e55e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d002      	beq.n	800e472 <HAL_UART_Transmit+0x26>
 800e46c:	88fb      	ldrh	r3, [r7, #6]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e472:	2301      	movs	r3, #1
 800e474:	e074      	b.n	800e560 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2200      	movs	r2, #0
 800e47a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2221      	movs	r2, #33	; 0x21
 800e482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e486:	f7f4 fe89 	bl	800319c <HAL_GetTick>
 800e48a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	88fa      	ldrh	r2, [r7, #6]
 800e490:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	88fa      	ldrh	r2, [r7, #6]
 800e498:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4a4:	d108      	bne.n	800e4b8 <HAL_UART_Transmit+0x6c>
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d104      	bne.n	800e4b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	61bb      	str	r3, [r7, #24]
 800e4b6:	e003      	b.n	800e4c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e4c0:	e030      	b.n	800e524 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	9300      	str	r3, [sp, #0]
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	2180      	movs	r1, #128	; 0x80
 800e4cc:	68f8      	ldr	r0, [r7, #12]
 800e4ce:	f001 fbed 	bl	800fcac <UART_WaitOnFlagUntilTimeout>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d005      	beq.n	800e4e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2220      	movs	r2, #32
 800e4dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e4e0:	2303      	movs	r3, #3
 800e4e2:	e03d      	b.n	800e560 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10b      	bne.n	800e502 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	881b      	ldrh	r3, [r3, #0]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	3302      	adds	r3, #2
 800e4fe:	61bb      	str	r3, [r7, #24]
 800e500:	e007      	b.n	800e512 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	781a      	ldrb	r2, [r3, #0]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	3301      	adds	r3, #1
 800e510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e518:	b29b      	uxth	r3, r3
 800e51a:	3b01      	subs	r3, #1
 800e51c:	b29a      	uxth	r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1c8      	bne.n	800e4c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	2200      	movs	r2, #0
 800e538:	2140      	movs	r1, #64	; 0x40
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f001 fbb6 	bl	800fcac <UART_WaitOnFlagUntilTimeout>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d005      	beq.n	800e552 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2220      	movs	r2, #32
 800e54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e54e:	2303      	movs	r3, #3
 800e550:	e006      	b.n	800e560 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2220      	movs	r2, #32
 800e556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e55a:	2300      	movs	r3, #0
 800e55c:	e000      	b.n	800e560 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e55e:	2302      	movs	r3, #2
  }
}
 800e560:	4618      	mov	r0, r3
 800e562:	3720      	adds	r7, #32
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b08a      	sub	sp, #40	; 0x28
 800e56c:	af02      	add	r7, sp, #8
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	603b      	str	r3, [r7, #0]
 800e574:	4613      	mov	r3, r2
 800e576:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e57e:	2b20      	cmp	r3, #32
 800e580:	f040 80b5 	bne.w	800e6ee <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d002      	beq.n	800e590 <HAL_UART_Receive+0x28>
 800e58a:	88fb      	ldrh	r3, [r7, #6]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d101      	bne.n	800e594 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e590:	2301      	movs	r3, #1
 800e592:	e0ad      	b.n	800e6f0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2200      	movs	r2, #0
 800e598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2222      	movs	r2, #34	; 0x22
 800e5a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e5aa:	f7f4 fdf7 	bl	800319c <HAL_GetTick>
 800e5ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	88fa      	ldrh	r2, [r7, #6]
 800e5b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	88fa      	ldrh	r2, [r7, #6]
 800e5bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	689b      	ldr	r3, [r3, #8]
 800e5c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5c8:	d10e      	bne.n	800e5e8 <HAL_UART_Receive+0x80>
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	691b      	ldr	r3, [r3, #16]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d105      	bne.n	800e5de <HAL_UART_Receive+0x76>
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e5d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e5dc:	e02d      	b.n	800e63a <HAL_UART_Receive+0xd2>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	22ff      	movs	r2, #255	; 0xff
 800e5e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e5e6:	e028      	b.n	800e63a <HAL_UART_Receive+0xd2>
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d10d      	bne.n	800e60c <HAL_UART_Receive+0xa4>
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d104      	bne.n	800e602 <HAL_UART_Receive+0x9a>
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	22ff      	movs	r2, #255	; 0xff
 800e5fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e600:	e01b      	b.n	800e63a <HAL_UART_Receive+0xd2>
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	227f      	movs	r2, #127	; 0x7f
 800e606:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e60a:	e016      	b.n	800e63a <HAL_UART_Receive+0xd2>
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e614:	d10d      	bne.n	800e632 <HAL_UART_Receive+0xca>
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	691b      	ldr	r3, [r3, #16]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d104      	bne.n	800e628 <HAL_UART_Receive+0xc0>
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	227f      	movs	r2, #127	; 0x7f
 800e622:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e626:	e008      	b.n	800e63a <HAL_UART_Receive+0xd2>
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	223f      	movs	r2, #63	; 0x3f
 800e62c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e630:	e003      	b.n	800e63a <HAL_UART_Receive+0xd2>
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2200      	movs	r2, #0
 800e636:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e640:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e64a:	d108      	bne.n	800e65e <HAL_UART_Receive+0xf6>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d104      	bne.n	800e65e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e654:	2300      	movs	r3, #0
 800e656:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	61bb      	str	r3, [r7, #24]
 800e65c:	e003      	b.n	800e666 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e662:	2300      	movs	r3, #0
 800e664:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e666:	e036      	b.n	800e6d6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	2200      	movs	r2, #0
 800e670:	2120      	movs	r1, #32
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f001 fb1a 	bl	800fcac <UART_WaitOnFlagUntilTimeout>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d005      	beq.n	800e68a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2220      	movs	r2, #32
 800e682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800e686:	2303      	movs	r3, #3
 800e688:	e032      	b.n	800e6f0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d10c      	bne.n	800e6aa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e696:	b29a      	uxth	r2, r3
 800e698:	8a7b      	ldrh	r3, [r7, #18]
 800e69a:	4013      	ands	r3, r2
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	3302      	adds	r3, #2
 800e6a6:	61bb      	str	r3, [r7, #24]
 800e6a8:	e00c      	b.n	800e6c4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b0:	b2da      	uxtb	r2, r3
 800e6b2:	8a7b      	ldrh	r3, [r7, #18]
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	4013      	ands	r3, r2
 800e6b8:	b2da      	uxtb	r2, r3
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1c2      	bne.n	800e668 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2220      	movs	r2, #32
 800e6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	e000      	b.n	800e6f0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e6ee:	2302      	movs	r3, #2
  }
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3720      	adds	r7, #32
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b08a      	sub	sp, #40	; 0x28
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	4613      	mov	r3, r2
 800e704:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e70c:	2b20      	cmp	r3, #32
 800e70e:	d137      	bne.n	800e780 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d002      	beq.n	800e71c <HAL_UART_Receive_IT+0x24>
 800e716:	88fb      	ldrh	r3, [r7, #6]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d101      	bne.n	800e720 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e71c:	2301      	movs	r3, #1
 800e71e:	e030      	b.n	800e782 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a18      	ldr	r2, [pc, #96]	; (800e78c <HAL_UART_Receive_IT+0x94>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d01f      	beq.n	800e770 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d018      	beq.n	800e770 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	613b      	str	r3, [r7, #16]
   return(result);
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e752:	627b      	str	r3, [r7, #36]	; 0x24
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	461a      	mov	r2, r3
 800e75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75c:	623b      	str	r3, [r7, #32]
 800e75e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e760:	69f9      	ldr	r1, [r7, #28]
 800e762:	6a3a      	ldr	r2, [r7, #32]
 800e764:	e841 2300 	strex	r3, r2, [r1]
 800e768:	61bb      	str	r3, [r7, #24]
   return(result);
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1e6      	bne.n	800e73e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e770:	88fb      	ldrh	r3, [r7, #6]
 800e772:	461a      	mov	r2, r3
 800e774:	68b9      	ldr	r1, [r7, #8]
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f001 fb06 	bl	800fd88 <UART_Start_Receive_IT>
 800e77c:	4603      	mov	r3, r0
 800e77e:	e000      	b.n	800e782 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e780:	2302      	movs	r3, #2
  }
}
 800e782:	4618      	mov	r0, r3
 800e784:	3728      	adds	r7, #40	; 0x28
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	58000c00 	.word	0x58000c00

0800e790 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b0ba      	sub	sp, #232	; 0xe8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	69db      	ldr	r3, [r3, #28]
 800e79e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e7b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e7ba:	f640 030f 	movw	r3, #2063	; 0x80f
 800e7be:	4013      	ands	r3, r2
 800e7c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e7c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d11b      	bne.n	800e804 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7d0:	f003 0320 	and.w	r3, r3, #32
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d015      	beq.n	800e804 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7dc:	f003 0320 	and.w	r3, r3, #32
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d105      	bne.n	800e7f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e7e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d009      	beq.n	800e804 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f000 8377 	beq.w	800eee8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	4798      	blx	r3
      }
      return;
 800e802:	e371      	b.n	800eee8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e808:	2b00      	cmp	r3, #0
 800e80a:	f000 8123 	beq.w	800ea54 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e80e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e812:	4b8d      	ldr	r3, [pc, #564]	; (800ea48 <HAL_UART_IRQHandler+0x2b8>)
 800e814:	4013      	ands	r3, r2
 800e816:	2b00      	cmp	r3, #0
 800e818:	d106      	bne.n	800e828 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e81a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e81e:	4b8b      	ldr	r3, [pc, #556]	; (800ea4c <HAL_UART_IRQHandler+0x2bc>)
 800e820:	4013      	ands	r3, r2
 800e822:	2b00      	cmp	r3, #0
 800e824:	f000 8116 	beq.w	800ea54 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e82c:	f003 0301 	and.w	r3, r3, #1
 800e830:	2b00      	cmp	r3, #0
 800e832:	d011      	beq.n	800e858 <HAL_UART_IRQHandler+0xc8>
 800e834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00b      	beq.n	800e858 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2201      	movs	r2, #1
 800e846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e84e:	f043 0201 	orr.w	r2, r3, #1
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e85c:	f003 0302 	and.w	r3, r3, #2
 800e860:	2b00      	cmp	r3, #0
 800e862:	d011      	beq.n	800e888 <HAL_UART_IRQHandler+0xf8>
 800e864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e868:	f003 0301 	and.w	r3, r3, #1
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00b      	beq.n	800e888 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2202      	movs	r2, #2
 800e876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e87e:	f043 0204 	orr.w	r2, r3, #4
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e88c:	f003 0304 	and.w	r3, r3, #4
 800e890:	2b00      	cmp	r3, #0
 800e892:	d011      	beq.n	800e8b8 <HAL_UART_IRQHandler+0x128>
 800e894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e898:	f003 0301 	and.w	r3, r3, #1
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00b      	beq.n	800e8b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2204      	movs	r2, #4
 800e8a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8ae:	f043 0202 	orr.w	r2, r3, #2
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e8b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8bc:	f003 0308 	and.w	r3, r3, #8
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d017      	beq.n	800e8f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e8c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8c8:	f003 0320 	and.w	r3, r3, #32
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d105      	bne.n	800e8dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e8d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e8d4:	4b5c      	ldr	r3, [pc, #368]	; (800ea48 <HAL_UART_IRQHandler+0x2b8>)
 800e8d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d00b      	beq.n	800e8f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2208      	movs	r2, #8
 800e8e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8ea:	f043 0208 	orr.w	r2, r3, #8
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e8f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d012      	beq.n	800e926 <HAL_UART_IRQHandler+0x196>
 800e900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00c      	beq.n	800e926 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e91c:	f043 0220 	orr.w	r2, r3, #32
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	f000 82dd 	beq.w	800eeec <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e936:	f003 0320 	and.w	r3, r3, #32
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d013      	beq.n	800e966 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e93e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e942:	f003 0320 	and.w	r3, r3, #32
 800e946:	2b00      	cmp	r3, #0
 800e948:	d105      	bne.n	800e956 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e94a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e94e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e952:	2b00      	cmp	r3, #0
 800e954:	d007      	beq.n	800e966 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e96c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e97a:	2b40      	cmp	r3, #64	; 0x40
 800e97c:	d005      	beq.n	800e98a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e97e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e982:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e986:	2b00      	cmp	r3, #0
 800e988:	d054      	beq.n	800ea34 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f001 fb1e 	bl	800ffcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e99a:	2b40      	cmp	r3, #64	; 0x40
 800e99c:	d146      	bne.n	800ea2c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	3308      	adds	r3, #8
 800e9a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e9ac:	e853 3f00 	ldrex	r3, [r3]
 800e9b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e9b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e9b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	3308      	adds	r3, #8
 800e9c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e9ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e9ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e9d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e9da:	e841 2300 	strex	r3, r2, [r1]
 800e9de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e9e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d1d9      	bne.n	800e99e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d017      	beq.n	800ea24 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9fa:	4a15      	ldr	r2, [pc, #84]	; (800ea50 <HAL_UART_IRQHandler+0x2c0>)
 800e9fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7f7 fdd5 	bl	80065b4 <HAL_DMA_Abort_IT>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d019      	beq.n	800ea44 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ea1e:	4610      	mov	r0, r2
 800ea20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea22:	e00f      	b.n	800ea44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 fa77 	bl	800ef18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea2a:	e00b      	b.n	800ea44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 fa73 	bl	800ef18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea32:	e007      	b.n	800ea44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 fa6f 	bl	800ef18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ea42:	e253      	b.n	800eeec <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea44:	bf00      	nop
    return;
 800ea46:	e251      	b.n	800eeec <HAL_UART_IRQHandler+0x75c>
 800ea48:	10000001 	.word	0x10000001
 800ea4c:	04000120 	.word	0x04000120
 800ea50:	08010099 	.word	0x08010099

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	f040 81e7 	bne.w	800ee2c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ea5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea62:	f003 0310 	and.w	r3, r3, #16
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	f000 81e0 	beq.w	800ee2c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ea6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea70:	f003 0310 	and.w	r3, r3, #16
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 81d9 	beq.w	800ee2c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2210      	movs	r2, #16
 800ea80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea8c:	2b40      	cmp	r3, #64	; 0x40
 800ea8e:	f040 8151 	bne.w	800ed34 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a96      	ldr	r2, [pc, #600]	; (800ecf4 <HAL_UART_IRQHandler+0x564>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d068      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a93      	ldr	r2, [pc, #588]	; (800ecf8 <HAL_UART_IRQHandler+0x568>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d061      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4a91      	ldr	r2, [pc, #580]	; (800ecfc <HAL_UART_IRQHandler+0x56c>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d05a      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a8e      	ldr	r2, [pc, #568]	; (800ed00 <HAL_UART_IRQHandler+0x570>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d053      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	4a8c      	ldr	r2, [pc, #560]	; (800ed04 <HAL_UART_IRQHandler+0x574>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d04c      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a89      	ldr	r2, [pc, #548]	; (800ed08 <HAL_UART_IRQHandler+0x578>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d045      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4a87      	ldr	r2, [pc, #540]	; (800ed0c <HAL_UART_IRQHandler+0x57c>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d03e      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a84      	ldr	r2, [pc, #528]	; (800ed10 <HAL_UART_IRQHandler+0x580>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d037      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a82      	ldr	r2, [pc, #520]	; (800ed14 <HAL_UART_IRQHandler+0x584>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d030      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a7f      	ldr	r2, [pc, #508]	; (800ed18 <HAL_UART_IRQHandler+0x588>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d029      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4a7d      	ldr	r2, [pc, #500]	; (800ed1c <HAL_UART_IRQHandler+0x58c>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d022      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4a7a      	ldr	r2, [pc, #488]	; (800ed20 <HAL_UART_IRQHandler+0x590>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d01b      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a78      	ldr	r2, [pc, #480]	; (800ed24 <HAL_UART_IRQHandler+0x594>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d014      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4a75      	ldr	r2, [pc, #468]	; (800ed28 <HAL_UART_IRQHandler+0x598>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d00d      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4a73      	ldr	r2, [pc, #460]	; (800ed2c <HAL_UART_IRQHandler+0x59c>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d006      	beq.n	800eb72 <HAL_UART_IRQHandler+0x3e2>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a70      	ldr	r2, [pc, #448]	; (800ed30 <HAL_UART_IRQHandler+0x5a0>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d106      	bne.n	800eb80 <HAL_UART_IRQHandler+0x3f0>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	b29b      	uxth	r3, r3
 800eb7e:	e005      	b.n	800eb8c <HAL_UART_IRQHandler+0x3fc>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eb90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f000 81ab 	beq.w	800eef0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eba0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800eba4:	429a      	cmp	r2, r3
 800eba6:	f080 81a3 	bcs.w	800eef0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ebb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebba:	69db      	ldr	r3, [r3, #28]
 800ebbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebc0:	f000 8087 	beq.w	800ecd2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ebd0:	e853 3f00 	ldrex	r3, [r3]
 800ebd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ebd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ebdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	461a      	mov	r2, r3
 800ebea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ebee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ebf2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ebfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ebfe:	e841 2300 	strex	r3, r2, [r1]
 800ec02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ec06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1da      	bne.n	800ebc4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3308      	adds	r3, #8
 800ec14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec18:	e853 3f00 	ldrex	r3, [r3]
 800ec1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ec1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec20:	f023 0301 	bic.w	r3, r3, #1
 800ec24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	3308      	adds	r3, #8
 800ec2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ec32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ec36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ec3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ec3e:	e841 2300 	strex	r3, r2, [r1]
 800ec42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ec44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1e1      	bne.n	800ec0e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	3308      	adds	r3, #8
 800ec50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec54:	e853 3f00 	ldrex	r3, [r3]
 800ec58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ec5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	3308      	adds	r3, #8
 800ec6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ec6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ec70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ec74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ec76:	e841 2300 	strex	r3, r2, [r1]
 800ec7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ec7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1e3      	bne.n	800ec4a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2220      	movs	r2, #32
 800ec86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec98:	e853 3f00 	ldrex	r3, [r3]
 800ec9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ec9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eca0:	f023 0310 	bic.w	r3, r3, #16
 800eca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	461a      	mov	r2, r3
 800ecae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ecb2:	65bb      	str	r3, [r7, #88]	; 0x58
 800ecb4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ecb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ecba:	e841 2300 	strex	r3, r2, [r1]
 800ecbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ecc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1e4      	bne.n	800ec90 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7f7 f953 	bl	8005f78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2202      	movs	r2, #2
 800ecd6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	4619      	mov	r1, r3
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 f91d 	bl	800ef2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ecf2:	e0fd      	b.n	800eef0 <HAL_UART_IRQHandler+0x760>
 800ecf4:	40020010 	.word	0x40020010
 800ecf8:	40020028 	.word	0x40020028
 800ecfc:	40020040 	.word	0x40020040
 800ed00:	40020058 	.word	0x40020058
 800ed04:	40020070 	.word	0x40020070
 800ed08:	40020088 	.word	0x40020088
 800ed0c:	400200a0 	.word	0x400200a0
 800ed10:	400200b8 	.word	0x400200b8
 800ed14:	40020410 	.word	0x40020410
 800ed18:	40020428 	.word	0x40020428
 800ed1c:	40020440 	.word	0x40020440
 800ed20:	40020458 	.word	0x40020458
 800ed24:	40020470 	.word	0x40020470
 800ed28:	40020488 	.word	0x40020488
 800ed2c:	400204a0 	.word	0x400204a0
 800ed30:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	1ad3      	subs	r3, r2, r3
 800ed44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	f000 80cf 	beq.w	800eef4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ed56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f000 80ca 	beq.w	800eef4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed68:	e853 3f00 	ldrex	r3, [r3]
 800ed6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ed82:	647b      	str	r3, [r7, #68]	; 0x44
 800ed84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed8a:	e841 2300 	strex	r3, r2, [r1]
 800ed8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1e4      	bne.n	800ed60 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	3308      	adds	r3, #8
 800ed9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda0:	e853 3f00 	ldrex	r3, [r3]
 800eda4:	623b      	str	r3, [r7, #32]
   return(result);
 800eda6:	6a3a      	ldr	r2, [r7, #32]
 800eda8:	4b55      	ldr	r3, [pc, #340]	; (800ef00 <HAL_UART_IRQHandler+0x770>)
 800edaa:	4013      	ands	r3, r2
 800edac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	3308      	adds	r3, #8
 800edb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800edba:	633a      	str	r2, [r7, #48]	; 0x30
 800edbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edc2:	e841 2300 	strex	r3, r2, [r1]
 800edc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800edc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1e3      	bne.n	800ed96 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2220      	movs	r2, #32
 800edd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	e853 3f00 	ldrex	r3, [r3]
 800edee:	60fb      	str	r3, [r7, #12]
   return(result);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f023 0310 	bic.w	r3, r3, #16
 800edf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	461a      	mov	r2, r3
 800ee00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ee04:	61fb      	str	r3, [r7, #28]
 800ee06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee08:	69b9      	ldr	r1, [r7, #24]
 800ee0a:	69fa      	ldr	r2, [r7, #28]
 800ee0c:	e841 2300 	strex	r3, r2, [r1]
 800ee10:	617b      	str	r3, [r7, #20]
   return(result);
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d1e4      	bne.n	800ede2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ee1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ee22:	4619      	mov	r1, r3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 f881 	bl	800ef2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ee2a:	e063      	b.n	800eef4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ee2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00e      	beq.n	800ee56 <HAL_UART_IRQHandler+0x6c6>
 800ee38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d008      	beq.n	800ee56 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ee4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f001 fe80 	bl	8010b54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ee54:	e051      	b.n	800eefa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ee56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d014      	beq.n	800ee8c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ee62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d105      	bne.n	800ee7a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ee6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d008      	beq.n	800ee8c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d03a      	beq.n	800eef8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	4798      	blx	r3
    }
    return;
 800ee8a:	e035      	b.n	800eef8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ee8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d009      	beq.n	800eeac <HAL_UART_IRQHandler+0x71c>
 800ee98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d003      	beq.n	800eeac <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f001 f90d 	bl	80100c4 <UART_EndTransmit_IT>
    return;
 800eeaa:	e026      	b.n	800eefa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eeac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eeb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d009      	beq.n	800eecc <HAL_UART_IRQHandler+0x73c>
 800eeb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eebc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d003      	beq.n	800eecc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f001 fe59 	bl	8010b7c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eeca:	e016      	b.n	800eefa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d010      	beq.n	800eefa <HAL_UART_IRQHandler+0x76a>
 800eed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	da0c      	bge.n	800eefa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f001 fe41 	bl	8010b68 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eee6:	e008      	b.n	800eefa <HAL_UART_IRQHandler+0x76a>
      return;
 800eee8:	bf00      	nop
 800eeea:	e006      	b.n	800eefa <HAL_UART_IRQHandler+0x76a>
    return;
 800eeec:	bf00      	nop
 800eeee:	e004      	b.n	800eefa <HAL_UART_IRQHandler+0x76a>
      return;
 800eef0:	bf00      	nop
 800eef2:	e002      	b.n	800eefa <HAL_UART_IRQHandler+0x76a>
      return;
 800eef4:	bf00      	nop
 800eef6:	e000      	b.n	800eefa <HAL_UART_IRQHandler+0x76a>
    return;
 800eef8:	bf00      	nop
  }
}
 800eefa:	37e8      	adds	r7, #232	; 0xe8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	effffffe 	.word	0xeffffffe

0800ef04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ef0c:	bf00      	nop
 800ef0e:	370c      	adds	r7, #12
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ef20:	bf00      	nop
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	460b      	mov	r3, r1
 800ef36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ef38:	bf00      	nop
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ef44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef48:	b092      	sub	sp, #72	; 0x48
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	689a      	ldr	r2, [r3, #8]
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	691b      	ldr	r3, [r3, #16]
 800ef5c:	431a      	orrs	r2, r3
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	695b      	ldr	r3, [r3, #20]
 800ef62:	431a      	orrs	r2, r3
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	69db      	ldr	r3, [r3, #28]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	4bbe      	ldr	r3, [pc, #760]	; (800f26c <UART_SetConfig+0x328>)
 800ef74:	4013      	ands	r3, r2
 800ef76:	697a      	ldr	r2, [r7, #20]
 800ef78:	6812      	ldr	r2, [r2, #0]
 800ef7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef7c:	430b      	orrs	r3, r1
 800ef7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	68da      	ldr	r2, [r3, #12]
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	430a      	orrs	r2, r1
 800ef94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	699b      	ldr	r3, [r3, #24]
 800ef9a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4ab3      	ldr	r2, [pc, #716]	; (800f270 <UART_SetConfig+0x32c>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d004      	beq.n	800efb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	6a1b      	ldr	r3, [r3, #32]
 800efaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efac:	4313      	orrs	r3, r2
 800efae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	689a      	ldr	r2, [r3, #8]
 800efb6:	4baf      	ldr	r3, [pc, #700]	; (800f274 <UART_SetConfig+0x330>)
 800efb8:	4013      	ands	r3, r2
 800efba:	697a      	ldr	r2, [r7, #20]
 800efbc:	6812      	ldr	r2, [r2, #0]
 800efbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efc0:	430b      	orrs	r3, r1
 800efc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efca:	f023 010f 	bic.w	r1, r3, #15
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	430a      	orrs	r2, r1
 800efd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4aa6      	ldr	r2, [pc, #664]	; (800f278 <UART_SetConfig+0x334>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d177      	bne.n	800f0d4 <UART_SetConfig+0x190>
 800efe4:	4ba5      	ldr	r3, [pc, #660]	; (800f27c <UART_SetConfig+0x338>)
 800efe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800efec:	2b28      	cmp	r3, #40	; 0x28
 800efee:	d86d      	bhi.n	800f0cc <UART_SetConfig+0x188>
 800eff0:	a201      	add	r2, pc, #4	; (adr r2, 800eff8 <UART_SetConfig+0xb4>)
 800eff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff6:	bf00      	nop
 800eff8:	0800f09d 	.word	0x0800f09d
 800effc:	0800f0cd 	.word	0x0800f0cd
 800f000:	0800f0cd 	.word	0x0800f0cd
 800f004:	0800f0cd 	.word	0x0800f0cd
 800f008:	0800f0cd 	.word	0x0800f0cd
 800f00c:	0800f0cd 	.word	0x0800f0cd
 800f010:	0800f0cd 	.word	0x0800f0cd
 800f014:	0800f0cd 	.word	0x0800f0cd
 800f018:	0800f0a5 	.word	0x0800f0a5
 800f01c:	0800f0cd 	.word	0x0800f0cd
 800f020:	0800f0cd 	.word	0x0800f0cd
 800f024:	0800f0cd 	.word	0x0800f0cd
 800f028:	0800f0cd 	.word	0x0800f0cd
 800f02c:	0800f0cd 	.word	0x0800f0cd
 800f030:	0800f0cd 	.word	0x0800f0cd
 800f034:	0800f0cd 	.word	0x0800f0cd
 800f038:	0800f0ad 	.word	0x0800f0ad
 800f03c:	0800f0cd 	.word	0x0800f0cd
 800f040:	0800f0cd 	.word	0x0800f0cd
 800f044:	0800f0cd 	.word	0x0800f0cd
 800f048:	0800f0cd 	.word	0x0800f0cd
 800f04c:	0800f0cd 	.word	0x0800f0cd
 800f050:	0800f0cd 	.word	0x0800f0cd
 800f054:	0800f0cd 	.word	0x0800f0cd
 800f058:	0800f0b5 	.word	0x0800f0b5
 800f05c:	0800f0cd 	.word	0x0800f0cd
 800f060:	0800f0cd 	.word	0x0800f0cd
 800f064:	0800f0cd 	.word	0x0800f0cd
 800f068:	0800f0cd 	.word	0x0800f0cd
 800f06c:	0800f0cd 	.word	0x0800f0cd
 800f070:	0800f0cd 	.word	0x0800f0cd
 800f074:	0800f0cd 	.word	0x0800f0cd
 800f078:	0800f0bd 	.word	0x0800f0bd
 800f07c:	0800f0cd 	.word	0x0800f0cd
 800f080:	0800f0cd 	.word	0x0800f0cd
 800f084:	0800f0cd 	.word	0x0800f0cd
 800f088:	0800f0cd 	.word	0x0800f0cd
 800f08c:	0800f0cd 	.word	0x0800f0cd
 800f090:	0800f0cd 	.word	0x0800f0cd
 800f094:	0800f0cd 	.word	0x0800f0cd
 800f098:	0800f0c5 	.word	0x0800f0c5
 800f09c:	2301      	movs	r3, #1
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a2:	e222      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f0a4:	2304      	movs	r3, #4
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0aa:	e21e      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f0ac:	2308      	movs	r3, #8
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b2:	e21a      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f0b4:	2310      	movs	r3, #16
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ba:	e216      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f0bc:	2320      	movs	r3, #32
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c2:	e212      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f0c4:	2340      	movs	r3, #64	; 0x40
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ca:	e20e      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f0cc:	2380      	movs	r3, #128	; 0x80
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d2:	e20a      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a69      	ldr	r2, [pc, #420]	; (800f280 <UART_SetConfig+0x33c>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d130      	bne.n	800f140 <UART_SetConfig+0x1fc>
 800f0de:	4b67      	ldr	r3, [pc, #412]	; (800f27c <UART_SetConfig+0x338>)
 800f0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0e2:	f003 0307 	and.w	r3, r3, #7
 800f0e6:	2b05      	cmp	r3, #5
 800f0e8:	d826      	bhi.n	800f138 <UART_SetConfig+0x1f4>
 800f0ea:	a201      	add	r2, pc, #4	; (adr r2, 800f0f0 <UART_SetConfig+0x1ac>)
 800f0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f0:	0800f109 	.word	0x0800f109
 800f0f4:	0800f111 	.word	0x0800f111
 800f0f8:	0800f119 	.word	0x0800f119
 800f0fc:	0800f121 	.word	0x0800f121
 800f100:	0800f129 	.word	0x0800f129
 800f104:	0800f131 	.word	0x0800f131
 800f108:	2300      	movs	r3, #0
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10e:	e1ec      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f110:	2304      	movs	r3, #4
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f116:	e1e8      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f118:	2308      	movs	r3, #8
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f11e:	e1e4      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f120:	2310      	movs	r3, #16
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f126:	e1e0      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f128:	2320      	movs	r3, #32
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12e:	e1dc      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f130:	2340      	movs	r3, #64	; 0x40
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f136:	e1d8      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f138:	2380      	movs	r3, #128	; 0x80
 800f13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13e:	e1d4      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4a4f      	ldr	r2, [pc, #316]	; (800f284 <UART_SetConfig+0x340>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d130      	bne.n	800f1ac <UART_SetConfig+0x268>
 800f14a:	4b4c      	ldr	r3, [pc, #304]	; (800f27c <UART_SetConfig+0x338>)
 800f14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f14e:	f003 0307 	and.w	r3, r3, #7
 800f152:	2b05      	cmp	r3, #5
 800f154:	d826      	bhi.n	800f1a4 <UART_SetConfig+0x260>
 800f156:	a201      	add	r2, pc, #4	; (adr r2, 800f15c <UART_SetConfig+0x218>)
 800f158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15c:	0800f175 	.word	0x0800f175
 800f160:	0800f17d 	.word	0x0800f17d
 800f164:	0800f185 	.word	0x0800f185
 800f168:	0800f18d 	.word	0x0800f18d
 800f16c:	0800f195 	.word	0x0800f195
 800f170:	0800f19d 	.word	0x0800f19d
 800f174:	2300      	movs	r3, #0
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f17a:	e1b6      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f17c:	2304      	movs	r3, #4
 800f17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f182:	e1b2      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f184:	2308      	movs	r3, #8
 800f186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f18a:	e1ae      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f18c:	2310      	movs	r3, #16
 800f18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f192:	e1aa      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f194:	2320      	movs	r3, #32
 800f196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f19a:	e1a6      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f19c:	2340      	movs	r3, #64	; 0x40
 800f19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a2:	e1a2      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f1a4:	2380      	movs	r3, #128	; 0x80
 800f1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1aa:	e19e      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a35      	ldr	r2, [pc, #212]	; (800f288 <UART_SetConfig+0x344>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d130      	bne.n	800f218 <UART_SetConfig+0x2d4>
 800f1b6:	4b31      	ldr	r3, [pc, #196]	; (800f27c <UART_SetConfig+0x338>)
 800f1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1ba:	f003 0307 	and.w	r3, r3, #7
 800f1be:	2b05      	cmp	r3, #5
 800f1c0:	d826      	bhi.n	800f210 <UART_SetConfig+0x2cc>
 800f1c2:	a201      	add	r2, pc, #4	; (adr r2, 800f1c8 <UART_SetConfig+0x284>)
 800f1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c8:	0800f1e1 	.word	0x0800f1e1
 800f1cc:	0800f1e9 	.word	0x0800f1e9
 800f1d0:	0800f1f1 	.word	0x0800f1f1
 800f1d4:	0800f1f9 	.word	0x0800f1f9
 800f1d8:	0800f201 	.word	0x0800f201
 800f1dc:	0800f209 	.word	0x0800f209
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1e6:	e180      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f1e8:	2304      	movs	r3, #4
 800f1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ee:	e17c      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f1f0:	2308      	movs	r3, #8
 800f1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1f6:	e178      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f1f8:	2310      	movs	r3, #16
 800f1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1fe:	e174      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f200:	2320      	movs	r3, #32
 800f202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f206:	e170      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f208:	2340      	movs	r3, #64	; 0x40
 800f20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f20e:	e16c      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f210:	2380      	movs	r3, #128	; 0x80
 800f212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f216:	e168      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a1b      	ldr	r2, [pc, #108]	; (800f28c <UART_SetConfig+0x348>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d142      	bne.n	800f2a8 <UART_SetConfig+0x364>
 800f222:	4b16      	ldr	r3, [pc, #88]	; (800f27c <UART_SetConfig+0x338>)
 800f224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f226:	f003 0307 	and.w	r3, r3, #7
 800f22a:	2b05      	cmp	r3, #5
 800f22c:	d838      	bhi.n	800f2a0 <UART_SetConfig+0x35c>
 800f22e:	a201      	add	r2, pc, #4	; (adr r2, 800f234 <UART_SetConfig+0x2f0>)
 800f230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f234:	0800f24d 	.word	0x0800f24d
 800f238:	0800f255 	.word	0x0800f255
 800f23c:	0800f25d 	.word	0x0800f25d
 800f240:	0800f265 	.word	0x0800f265
 800f244:	0800f291 	.word	0x0800f291
 800f248:	0800f299 	.word	0x0800f299
 800f24c:	2300      	movs	r3, #0
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f252:	e14a      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f254:	2304      	movs	r3, #4
 800f256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f25a:	e146      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f25c:	2308      	movs	r3, #8
 800f25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f262:	e142      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f264:	2310      	movs	r3, #16
 800f266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f26a:	e13e      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f26c:	cfff69f3 	.word	0xcfff69f3
 800f270:	58000c00 	.word	0x58000c00
 800f274:	11fff4ff 	.word	0x11fff4ff
 800f278:	40011000 	.word	0x40011000
 800f27c:	58024400 	.word	0x58024400
 800f280:	40004400 	.word	0x40004400
 800f284:	40004800 	.word	0x40004800
 800f288:	40004c00 	.word	0x40004c00
 800f28c:	40005000 	.word	0x40005000
 800f290:	2320      	movs	r3, #32
 800f292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f296:	e128      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f298:	2340      	movs	r3, #64	; 0x40
 800f29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f29e:	e124      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f2a0:	2380      	movs	r3, #128	; 0x80
 800f2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2a6:	e120      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4acb      	ldr	r2, [pc, #812]	; (800f5dc <UART_SetConfig+0x698>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d176      	bne.n	800f3a0 <UART_SetConfig+0x45c>
 800f2b2:	4bcb      	ldr	r3, [pc, #812]	; (800f5e0 <UART_SetConfig+0x69c>)
 800f2b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f2ba:	2b28      	cmp	r3, #40	; 0x28
 800f2bc:	d86c      	bhi.n	800f398 <UART_SetConfig+0x454>
 800f2be:	a201      	add	r2, pc, #4	; (adr r2, 800f2c4 <UART_SetConfig+0x380>)
 800f2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c4:	0800f369 	.word	0x0800f369
 800f2c8:	0800f399 	.word	0x0800f399
 800f2cc:	0800f399 	.word	0x0800f399
 800f2d0:	0800f399 	.word	0x0800f399
 800f2d4:	0800f399 	.word	0x0800f399
 800f2d8:	0800f399 	.word	0x0800f399
 800f2dc:	0800f399 	.word	0x0800f399
 800f2e0:	0800f399 	.word	0x0800f399
 800f2e4:	0800f371 	.word	0x0800f371
 800f2e8:	0800f399 	.word	0x0800f399
 800f2ec:	0800f399 	.word	0x0800f399
 800f2f0:	0800f399 	.word	0x0800f399
 800f2f4:	0800f399 	.word	0x0800f399
 800f2f8:	0800f399 	.word	0x0800f399
 800f2fc:	0800f399 	.word	0x0800f399
 800f300:	0800f399 	.word	0x0800f399
 800f304:	0800f379 	.word	0x0800f379
 800f308:	0800f399 	.word	0x0800f399
 800f30c:	0800f399 	.word	0x0800f399
 800f310:	0800f399 	.word	0x0800f399
 800f314:	0800f399 	.word	0x0800f399
 800f318:	0800f399 	.word	0x0800f399
 800f31c:	0800f399 	.word	0x0800f399
 800f320:	0800f399 	.word	0x0800f399
 800f324:	0800f381 	.word	0x0800f381
 800f328:	0800f399 	.word	0x0800f399
 800f32c:	0800f399 	.word	0x0800f399
 800f330:	0800f399 	.word	0x0800f399
 800f334:	0800f399 	.word	0x0800f399
 800f338:	0800f399 	.word	0x0800f399
 800f33c:	0800f399 	.word	0x0800f399
 800f340:	0800f399 	.word	0x0800f399
 800f344:	0800f389 	.word	0x0800f389
 800f348:	0800f399 	.word	0x0800f399
 800f34c:	0800f399 	.word	0x0800f399
 800f350:	0800f399 	.word	0x0800f399
 800f354:	0800f399 	.word	0x0800f399
 800f358:	0800f399 	.word	0x0800f399
 800f35c:	0800f399 	.word	0x0800f399
 800f360:	0800f399 	.word	0x0800f399
 800f364:	0800f391 	.word	0x0800f391
 800f368:	2301      	movs	r3, #1
 800f36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f36e:	e0bc      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f370:	2304      	movs	r3, #4
 800f372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f376:	e0b8      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f378:	2308      	movs	r3, #8
 800f37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f37e:	e0b4      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f380:	2310      	movs	r3, #16
 800f382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f386:	e0b0      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f388:	2320      	movs	r3, #32
 800f38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f38e:	e0ac      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f390:	2340      	movs	r3, #64	; 0x40
 800f392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f396:	e0a8      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f398:	2380      	movs	r3, #128	; 0x80
 800f39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f39e:	e0a4      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4a8f      	ldr	r2, [pc, #572]	; (800f5e4 <UART_SetConfig+0x6a0>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d130      	bne.n	800f40c <UART_SetConfig+0x4c8>
 800f3aa:	4b8d      	ldr	r3, [pc, #564]	; (800f5e0 <UART_SetConfig+0x69c>)
 800f3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3ae:	f003 0307 	and.w	r3, r3, #7
 800f3b2:	2b05      	cmp	r3, #5
 800f3b4:	d826      	bhi.n	800f404 <UART_SetConfig+0x4c0>
 800f3b6:	a201      	add	r2, pc, #4	; (adr r2, 800f3bc <UART_SetConfig+0x478>)
 800f3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3bc:	0800f3d5 	.word	0x0800f3d5
 800f3c0:	0800f3dd 	.word	0x0800f3dd
 800f3c4:	0800f3e5 	.word	0x0800f3e5
 800f3c8:	0800f3ed 	.word	0x0800f3ed
 800f3cc:	0800f3f5 	.word	0x0800f3f5
 800f3d0:	0800f3fd 	.word	0x0800f3fd
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3da:	e086      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f3dc:	2304      	movs	r3, #4
 800f3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3e2:	e082      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f3e4:	2308      	movs	r3, #8
 800f3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ea:	e07e      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f3ec:	2310      	movs	r3, #16
 800f3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3f2:	e07a      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f3f4:	2320      	movs	r3, #32
 800f3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3fa:	e076      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f3fc:	2340      	movs	r3, #64	; 0x40
 800f3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f402:	e072      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f404:	2380      	movs	r3, #128	; 0x80
 800f406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f40a:	e06e      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a75      	ldr	r2, [pc, #468]	; (800f5e8 <UART_SetConfig+0x6a4>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d130      	bne.n	800f478 <UART_SetConfig+0x534>
 800f416:	4b72      	ldr	r3, [pc, #456]	; (800f5e0 <UART_SetConfig+0x69c>)
 800f418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f41a:	f003 0307 	and.w	r3, r3, #7
 800f41e:	2b05      	cmp	r3, #5
 800f420:	d826      	bhi.n	800f470 <UART_SetConfig+0x52c>
 800f422:	a201      	add	r2, pc, #4	; (adr r2, 800f428 <UART_SetConfig+0x4e4>)
 800f424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f428:	0800f441 	.word	0x0800f441
 800f42c:	0800f449 	.word	0x0800f449
 800f430:	0800f451 	.word	0x0800f451
 800f434:	0800f459 	.word	0x0800f459
 800f438:	0800f461 	.word	0x0800f461
 800f43c:	0800f469 	.word	0x0800f469
 800f440:	2300      	movs	r3, #0
 800f442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f446:	e050      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f448:	2304      	movs	r3, #4
 800f44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f44e:	e04c      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f450:	2308      	movs	r3, #8
 800f452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f456:	e048      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f458:	2310      	movs	r3, #16
 800f45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f45e:	e044      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f460:	2320      	movs	r3, #32
 800f462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f466:	e040      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f468:	2340      	movs	r3, #64	; 0x40
 800f46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f46e:	e03c      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f470:	2380      	movs	r3, #128	; 0x80
 800f472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f476:	e038      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a5b      	ldr	r2, [pc, #364]	; (800f5ec <UART_SetConfig+0x6a8>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d130      	bne.n	800f4e4 <UART_SetConfig+0x5a0>
 800f482:	4b57      	ldr	r3, [pc, #348]	; (800f5e0 <UART_SetConfig+0x69c>)
 800f484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f486:	f003 0307 	and.w	r3, r3, #7
 800f48a:	2b05      	cmp	r3, #5
 800f48c:	d826      	bhi.n	800f4dc <UART_SetConfig+0x598>
 800f48e:	a201      	add	r2, pc, #4	; (adr r2, 800f494 <UART_SetConfig+0x550>)
 800f490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f494:	0800f4ad 	.word	0x0800f4ad
 800f498:	0800f4b5 	.word	0x0800f4b5
 800f49c:	0800f4bd 	.word	0x0800f4bd
 800f4a0:	0800f4c5 	.word	0x0800f4c5
 800f4a4:	0800f4cd 	.word	0x0800f4cd
 800f4a8:	0800f4d5 	.word	0x0800f4d5
 800f4ac:	2302      	movs	r3, #2
 800f4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4b2:	e01a      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f4b4:	2304      	movs	r3, #4
 800f4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ba:	e016      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f4bc:	2308      	movs	r3, #8
 800f4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4c2:	e012      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f4c4:	2310      	movs	r3, #16
 800f4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ca:	e00e      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f4cc:	2320      	movs	r3, #32
 800f4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4d2:	e00a      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f4d4:	2340      	movs	r3, #64	; 0x40
 800f4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4da:	e006      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f4dc:	2380      	movs	r3, #128	; 0x80
 800f4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4e2:	e002      	b.n	800f4ea <UART_SetConfig+0x5a6>
 800f4e4:	2380      	movs	r3, #128	; 0x80
 800f4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	4a3f      	ldr	r2, [pc, #252]	; (800f5ec <UART_SetConfig+0x6a8>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	f040 80f8 	bne.w	800f6e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f4f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f4fa:	2b20      	cmp	r3, #32
 800f4fc:	dc46      	bgt.n	800f58c <UART_SetConfig+0x648>
 800f4fe:	2b02      	cmp	r3, #2
 800f500:	f2c0 8082 	blt.w	800f608 <UART_SetConfig+0x6c4>
 800f504:	3b02      	subs	r3, #2
 800f506:	2b1e      	cmp	r3, #30
 800f508:	d87e      	bhi.n	800f608 <UART_SetConfig+0x6c4>
 800f50a:	a201      	add	r2, pc, #4	; (adr r2, 800f510 <UART_SetConfig+0x5cc>)
 800f50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f510:	0800f593 	.word	0x0800f593
 800f514:	0800f609 	.word	0x0800f609
 800f518:	0800f59b 	.word	0x0800f59b
 800f51c:	0800f609 	.word	0x0800f609
 800f520:	0800f609 	.word	0x0800f609
 800f524:	0800f609 	.word	0x0800f609
 800f528:	0800f5ab 	.word	0x0800f5ab
 800f52c:	0800f609 	.word	0x0800f609
 800f530:	0800f609 	.word	0x0800f609
 800f534:	0800f609 	.word	0x0800f609
 800f538:	0800f609 	.word	0x0800f609
 800f53c:	0800f609 	.word	0x0800f609
 800f540:	0800f609 	.word	0x0800f609
 800f544:	0800f609 	.word	0x0800f609
 800f548:	0800f5bb 	.word	0x0800f5bb
 800f54c:	0800f609 	.word	0x0800f609
 800f550:	0800f609 	.word	0x0800f609
 800f554:	0800f609 	.word	0x0800f609
 800f558:	0800f609 	.word	0x0800f609
 800f55c:	0800f609 	.word	0x0800f609
 800f560:	0800f609 	.word	0x0800f609
 800f564:	0800f609 	.word	0x0800f609
 800f568:	0800f609 	.word	0x0800f609
 800f56c:	0800f609 	.word	0x0800f609
 800f570:	0800f609 	.word	0x0800f609
 800f574:	0800f609 	.word	0x0800f609
 800f578:	0800f609 	.word	0x0800f609
 800f57c:	0800f609 	.word	0x0800f609
 800f580:	0800f609 	.word	0x0800f609
 800f584:	0800f609 	.word	0x0800f609
 800f588:	0800f5fb 	.word	0x0800f5fb
 800f58c:	2b40      	cmp	r3, #64	; 0x40
 800f58e:	d037      	beq.n	800f600 <UART_SetConfig+0x6bc>
 800f590:	e03a      	b.n	800f608 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f592:	f7fc f869 	bl	800b668 <HAL_RCCEx_GetD3PCLK1Freq>
 800f596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f598:	e03c      	b.n	800f614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f59a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fc f878 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5a8:	e034      	b.n	800f614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5aa:	f107 0318 	add.w	r3, r7, #24
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fc f9c4 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5b8:	e02c      	b.n	800f614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5ba:	4b09      	ldr	r3, [pc, #36]	; (800f5e0 <UART_SetConfig+0x69c>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f003 0320 	and.w	r3, r3, #32
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d016      	beq.n	800f5f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5c6:	4b06      	ldr	r3, [pc, #24]	; (800f5e0 <UART_SetConfig+0x69c>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	08db      	lsrs	r3, r3, #3
 800f5cc:	f003 0303 	and.w	r3, r3, #3
 800f5d0:	4a07      	ldr	r2, [pc, #28]	; (800f5f0 <UART_SetConfig+0x6ac>)
 800f5d2:	fa22 f303 	lsr.w	r3, r2, r3
 800f5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5d8:	e01c      	b.n	800f614 <UART_SetConfig+0x6d0>
 800f5da:	bf00      	nop
 800f5dc:	40011400 	.word	0x40011400
 800f5e0:	58024400 	.word	0x58024400
 800f5e4:	40007800 	.word	0x40007800
 800f5e8:	40007c00 	.word	0x40007c00
 800f5ec:	58000c00 	.word	0x58000c00
 800f5f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f5f4:	4b9d      	ldr	r3, [pc, #628]	; (800f86c <UART_SetConfig+0x928>)
 800f5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5f8:	e00c      	b.n	800f614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5fa:	4b9d      	ldr	r3, [pc, #628]	; (800f870 <UART_SetConfig+0x92c>)
 800f5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5fe:	e009      	b.n	800f614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f606:	e005      	b.n	800f614 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f608:	2300      	movs	r3, #0
 800f60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f60c:	2301      	movs	r3, #1
 800f60e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f612:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f616:	2b00      	cmp	r3, #0
 800f618:	f000 81de 	beq.w	800f9d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f620:	4a94      	ldr	r2, [pc, #592]	; (800f874 <UART_SetConfig+0x930>)
 800f622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f626:	461a      	mov	r2, r3
 800f628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f62a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f62e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	685a      	ldr	r2, [r3, #4]
 800f634:	4613      	mov	r3, r2
 800f636:	005b      	lsls	r3, r3, #1
 800f638:	4413      	add	r3, r2
 800f63a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d305      	bcc.n	800f64c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f648:	429a      	cmp	r2, r3
 800f64a:	d903      	bls.n	800f654 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f64c:	2301      	movs	r3, #1
 800f64e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f652:	e1c1      	b.n	800f9d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f656:	2200      	movs	r2, #0
 800f658:	60bb      	str	r3, [r7, #8]
 800f65a:	60fa      	str	r2, [r7, #12]
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f660:	4a84      	ldr	r2, [pc, #528]	; (800f874 <UART_SetConfig+0x930>)
 800f662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f666:	b29b      	uxth	r3, r3
 800f668:	2200      	movs	r2, #0
 800f66a:	603b      	str	r3, [r7, #0]
 800f66c:	607a      	str	r2, [r7, #4]
 800f66e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f676:	f7f0 fe83 	bl	8000380 <__aeabi_uldivmod>
 800f67a:	4602      	mov	r2, r0
 800f67c:	460b      	mov	r3, r1
 800f67e:	4610      	mov	r0, r2
 800f680:	4619      	mov	r1, r3
 800f682:	f04f 0200 	mov.w	r2, #0
 800f686:	f04f 0300 	mov.w	r3, #0
 800f68a:	020b      	lsls	r3, r1, #8
 800f68c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f690:	0202      	lsls	r2, r0, #8
 800f692:	6979      	ldr	r1, [r7, #20]
 800f694:	6849      	ldr	r1, [r1, #4]
 800f696:	0849      	lsrs	r1, r1, #1
 800f698:	2000      	movs	r0, #0
 800f69a:	460c      	mov	r4, r1
 800f69c:	4605      	mov	r5, r0
 800f69e:	eb12 0804 	adds.w	r8, r2, r4
 800f6a2:	eb43 0905 	adc.w	r9, r3, r5
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	469a      	mov	sl, r3
 800f6ae:	4693      	mov	fp, r2
 800f6b0:	4652      	mov	r2, sl
 800f6b2:	465b      	mov	r3, fp
 800f6b4:	4640      	mov	r0, r8
 800f6b6:	4649      	mov	r1, r9
 800f6b8:	f7f0 fe62 	bl	8000380 <__aeabi_uldivmod>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f6ca:	d308      	bcc.n	800f6de <UART_SetConfig+0x79a>
 800f6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6d2:	d204      	bcs.n	800f6de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6da:	60da      	str	r2, [r3, #12]
 800f6dc:	e17c      	b.n	800f9d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f6e4:	e178      	b.n	800f9d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	69db      	ldr	r3, [r3, #28]
 800f6ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6ee:	f040 80c5 	bne.w	800f87c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f6f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f6f6:	2b20      	cmp	r3, #32
 800f6f8:	dc48      	bgt.n	800f78c <UART_SetConfig+0x848>
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	db7b      	blt.n	800f7f6 <UART_SetConfig+0x8b2>
 800f6fe:	2b20      	cmp	r3, #32
 800f700:	d879      	bhi.n	800f7f6 <UART_SetConfig+0x8b2>
 800f702:	a201      	add	r2, pc, #4	; (adr r2, 800f708 <UART_SetConfig+0x7c4>)
 800f704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f708:	0800f793 	.word	0x0800f793
 800f70c:	0800f79b 	.word	0x0800f79b
 800f710:	0800f7f7 	.word	0x0800f7f7
 800f714:	0800f7f7 	.word	0x0800f7f7
 800f718:	0800f7a3 	.word	0x0800f7a3
 800f71c:	0800f7f7 	.word	0x0800f7f7
 800f720:	0800f7f7 	.word	0x0800f7f7
 800f724:	0800f7f7 	.word	0x0800f7f7
 800f728:	0800f7b3 	.word	0x0800f7b3
 800f72c:	0800f7f7 	.word	0x0800f7f7
 800f730:	0800f7f7 	.word	0x0800f7f7
 800f734:	0800f7f7 	.word	0x0800f7f7
 800f738:	0800f7f7 	.word	0x0800f7f7
 800f73c:	0800f7f7 	.word	0x0800f7f7
 800f740:	0800f7f7 	.word	0x0800f7f7
 800f744:	0800f7f7 	.word	0x0800f7f7
 800f748:	0800f7c3 	.word	0x0800f7c3
 800f74c:	0800f7f7 	.word	0x0800f7f7
 800f750:	0800f7f7 	.word	0x0800f7f7
 800f754:	0800f7f7 	.word	0x0800f7f7
 800f758:	0800f7f7 	.word	0x0800f7f7
 800f75c:	0800f7f7 	.word	0x0800f7f7
 800f760:	0800f7f7 	.word	0x0800f7f7
 800f764:	0800f7f7 	.word	0x0800f7f7
 800f768:	0800f7f7 	.word	0x0800f7f7
 800f76c:	0800f7f7 	.word	0x0800f7f7
 800f770:	0800f7f7 	.word	0x0800f7f7
 800f774:	0800f7f7 	.word	0x0800f7f7
 800f778:	0800f7f7 	.word	0x0800f7f7
 800f77c:	0800f7f7 	.word	0x0800f7f7
 800f780:	0800f7f7 	.word	0x0800f7f7
 800f784:	0800f7f7 	.word	0x0800f7f7
 800f788:	0800f7e9 	.word	0x0800f7e9
 800f78c:	2b40      	cmp	r3, #64	; 0x40
 800f78e:	d02e      	beq.n	800f7ee <UART_SetConfig+0x8aa>
 800f790:	e031      	b.n	800f7f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f792:	f7f9 ff71 	bl	8009678 <HAL_RCC_GetPCLK1Freq>
 800f796:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f798:	e033      	b.n	800f802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f79a:	f7f9 ff83 	bl	80096a4 <HAL_RCC_GetPCLK2Freq>
 800f79e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f7a0:	e02f      	b.n	800f802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f7a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fb ff74 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7b0:	e027      	b.n	800f802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7b2:	f107 0318 	add.w	r3, r7, #24
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fc f8c0 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7c0:	e01f      	b.n	800f802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7c2:	4b2d      	ldr	r3, [pc, #180]	; (800f878 <UART_SetConfig+0x934>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f003 0320 	and.w	r3, r3, #32
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d009      	beq.n	800f7e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f7ce:	4b2a      	ldr	r3, [pc, #168]	; (800f878 <UART_SetConfig+0x934>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	08db      	lsrs	r3, r3, #3
 800f7d4:	f003 0303 	and.w	r3, r3, #3
 800f7d8:	4a24      	ldr	r2, [pc, #144]	; (800f86c <UART_SetConfig+0x928>)
 800f7da:	fa22 f303 	lsr.w	r3, r2, r3
 800f7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f7e0:	e00f      	b.n	800f802 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f7e2:	4b22      	ldr	r3, [pc, #136]	; (800f86c <UART_SetConfig+0x928>)
 800f7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7e6:	e00c      	b.n	800f802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f7e8:	4b21      	ldr	r3, [pc, #132]	; (800f870 <UART_SetConfig+0x92c>)
 800f7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7ec:	e009      	b.n	800f802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7f4:	e005      	b.n	800f802 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f800:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f804:	2b00      	cmp	r3, #0
 800f806:	f000 80e7 	beq.w	800f9d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f80e:	4a19      	ldr	r2, [pc, #100]	; (800f874 <UART_SetConfig+0x930>)
 800f810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f814:	461a      	mov	r2, r3
 800f816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f818:	fbb3 f3f2 	udiv	r3, r3, r2
 800f81c:	005a      	lsls	r2, r3, #1
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	085b      	lsrs	r3, r3, #1
 800f824:	441a      	add	r2, r3
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f82e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	2b0f      	cmp	r3, #15
 800f834:	d916      	bls.n	800f864 <UART_SetConfig+0x920>
 800f836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f83c:	d212      	bcs.n	800f864 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f840:	b29b      	uxth	r3, r3
 800f842:	f023 030f 	bic.w	r3, r3, #15
 800f846:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84a:	085b      	lsrs	r3, r3, #1
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	f003 0307 	and.w	r3, r3, #7
 800f852:	b29a      	uxth	r2, r3
 800f854:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f856:	4313      	orrs	r3, r2
 800f858:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f860:	60da      	str	r2, [r3, #12]
 800f862:	e0b9      	b.n	800f9d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f864:	2301      	movs	r3, #1
 800f866:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f86a:	e0b5      	b.n	800f9d8 <UART_SetConfig+0xa94>
 800f86c:	03d09000 	.word	0x03d09000
 800f870:	003d0900 	.word	0x003d0900
 800f874:	080158a0 	.word	0x080158a0
 800f878:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f87c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f880:	2b20      	cmp	r3, #32
 800f882:	dc49      	bgt.n	800f918 <UART_SetConfig+0x9d4>
 800f884:	2b00      	cmp	r3, #0
 800f886:	db7c      	blt.n	800f982 <UART_SetConfig+0xa3e>
 800f888:	2b20      	cmp	r3, #32
 800f88a:	d87a      	bhi.n	800f982 <UART_SetConfig+0xa3e>
 800f88c:	a201      	add	r2, pc, #4	; (adr r2, 800f894 <UART_SetConfig+0x950>)
 800f88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f892:	bf00      	nop
 800f894:	0800f91f 	.word	0x0800f91f
 800f898:	0800f927 	.word	0x0800f927
 800f89c:	0800f983 	.word	0x0800f983
 800f8a0:	0800f983 	.word	0x0800f983
 800f8a4:	0800f92f 	.word	0x0800f92f
 800f8a8:	0800f983 	.word	0x0800f983
 800f8ac:	0800f983 	.word	0x0800f983
 800f8b0:	0800f983 	.word	0x0800f983
 800f8b4:	0800f93f 	.word	0x0800f93f
 800f8b8:	0800f983 	.word	0x0800f983
 800f8bc:	0800f983 	.word	0x0800f983
 800f8c0:	0800f983 	.word	0x0800f983
 800f8c4:	0800f983 	.word	0x0800f983
 800f8c8:	0800f983 	.word	0x0800f983
 800f8cc:	0800f983 	.word	0x0800f983
 800f8d0:	0800f983 	.word	0x0800f983
 800f8d4:	0800f94f 	.word	0x0800f94f
 800f8d8:	0800f983 	.word	0x0800f983
 800f8dc:	0800f983 	.word	0x0800f983
 800f8e0:	0800f983 	.word	0x0800f983
 800f8e4:	0800f983 	.word	0x0800f983
 800f8e8:	0800f983 	.word	0x0800f983
 800f8ec:	0800f983 	.word	0x0800f983
 800f8f0:	0800f983 	.word	0x0800f983
 800f8f4:	0800f983 	.word	0x0800f983
 800f8f8:	0800f983 	.word	0x0800f983
 800f8fc:	0800f983 	.word	0x0800f983
 800f900:	0800f983 	.word	0x0800f983
 800f904:	0800f983 	.word	0x0800f983
 800f908:	0800f983 	.word	0x0800f983
 800f90c:	0800f983 	.word	0x0800f983
 800f910:	0800f983 	.word	0x0800f983
 800f914:	0800f975 	.word	0x0800f975
 800f918:	2b40      	cmp	r3, #64	; 0x40
 800f91a:	d02e      	beq.n	800f97a <UART_SetConfig+0xa36>
 800f91c:	e031      	b.n	800f982 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f91e:	f7f9 feab 	bl	8009678 <HAL_RCC_GetPCLK1Freq>
 800f922:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f924:	e033      	b.n	800f98e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f926:	f7f9 febd 	bl	80096a4 <HAL_RCC_GetPCLK2Freq>
 800f92a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f92c:	e02f      	b.n	800f98e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f92e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f932:	4618      	mov	r0, r3
 800f934:	f7fb feae 	bl	800b694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f93c:	e027      	b.n	800f98e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f93e:	f107 0318 	add.w	r3, r7, #24
 800f942:	4618      	mov	r0, r3
 800f944:	f7fb fffa 	bl	800b93c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f94c:	e01f      	b.n	800f98e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f94e:	4b2d      	ldr	r3, [pc, #180]	; (800fa04 <UART_SetConfig+0xac0>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f003 0320 	and.w	r3, r3, #32
 800f956:	2b00      	cmp	r3, #0
 800f958:	d009      	beq.n	800f96e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f95a:	4b2a      	ldr	r3, [pc, #168]	; (800fa04 <UART_SetConfig+0xac0>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	08db      	lsrs	r3, r3, #3
 800f960:	f003 0303 	and.w	r3, r3, #3
 800f964:	4a28      	ldr	r2, [pc, #160]	; (800fa08 <UART_SetConfig+0xac4>)
 800f966:	fa22 f303 	lsr.w	r3, r2, r3
 800f96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f96c:	e00f      	b.n	800f98e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f96e:	4b26      	ldr	r3, [pc, #152]	; (800fa08 <UART_SetConfig+0xac4>)
 800f970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f972:	e00c      	b.n	800f98e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f974:	4b25      	ldr	r3, [pc, #148]	; (800fa0c <UART_SetConfig+0xac8>)
 800f976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f978:	e009      	b.n	800f98e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f97a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f980:	e005      	b.n	800f98e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f982:	2300      	movs	r3, #0
 800f984:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f986:	2301      	movs	r3, #1
 800f988:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f98c:	bf00      	nop
    }

    if (pclk != 0U)
 800f98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f990:	2b00      	cmp	r3, #0
 800f992:	d021      	beq.n	800f9d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f998:	4a1d      	ldr	r2, [pc, #116]	; (800fa10 <UART_SetConfig+0xacc>)
 800f99a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	085b      	lsrs	r3, r3, #1
 800f9ac:	441a      	add	r2, r3
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ba:	2b0f      	cmp	r3, #15
 800f9bc:	d909      	bls.n	800f9d2 <UART_SetConfig+0xa8e>
 800f9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9c4:	d205      	bcs.n	800f9d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	60da      	str	r2, [r3, #12]
 800f9d0:	e002      	b.n	800f9d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f9f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3748      	adds	r7, #72	; 0x48
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fa02:	bf00      	nop
 800fa04:	58024400 	.word	0x58024400
 800fa08:	03d09000 	.word	0x03d09000
 800fa0c:	003d0900 	.word	0x003d0900
 800fa10:	080158a0 	.word	0x080158a0

0800fa14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa20:	f003 0308 	and.w	r3, r3, #8
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d00a      	beq.n	800fa3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	430a      	orrs	r2, r1
 800fa3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa42:	f003 0301 	and.w	r3, r3, #1
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00a      	beq.n	800fa60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	430a      	orrs	r2, r1
 800fa5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa64:	f003 0302 	and.w	r3, r3, #2
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d00a      	beq.n	800fa82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	430a      	orrs	r2, r1
 800fa80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa86:	f003 0304 	and.w	r3, r3, #4
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d00a      	beq.n	800faa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	430a      	orrs	r2, r1
 800faa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faa8:	f003 0310 	and.w	r3, r3, #16
 800faac:	2b00      	cmp	r3, #0
 800faae:	d00a      	beq.n	800fac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	430a      	orrs	r2, r1
 800fac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faca:	f003 0320 	and.w	r3, r3, #32
 800face:	2b00      	cmp	r3, #0
 800fad0:	d00a      	beq.n	800fae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	689b      	ldr	r3, [r3, #8]
 800fad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	430a      	orrs	r2, r1
 800fae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d01a      	beq.n	800fb2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	430a      	orrs	r2, r1
 800fb08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb12:	d10a      	bne.n	800fb2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	430a      	orrs	r2, r1
 800fb28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00a      	beq.n	800fb4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	430a      	orrs	r2, r1
 800fb4a:	605a      	str	r2, [r3, #4]
  }
}
 800fb4c:	bf00      	nop
 800fb4e:	370c      	adds	r7, #12
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr

0800fb58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b098      	sub	sp, #96	; 0x60
 800fb5c:	af02      	add	r7, sp, #8
 800fb5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2200      	movs	r2, #0
 800fb64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fb68:	f7f3 fb18 	bl	800319c <HAL_GetTick>
 800fb6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f003 0308 	and.w	r3, r3, #8
 800fb78:	2b08      	cmp	r3, #8
 800fb7a:	d12f      	bne.n	800fbdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb80:	9300      	str	r3, [sp, #0]
 800fb82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb84:	2200      	movs	r2, #0
 800fb86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 f88e 	bl	800fcac <UART_WaitOnFlagUntilTimeout>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d022      	beq.n	800fbdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	e853 3f00 	ldrex	r3, [r3]
 800fba2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbaa:	653b      	str	r3, [r7, #80]	; 0x50
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbb4:	647b      	str	r3, [r7, #68]	; 0x44
 800fbb6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fbba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbbc:	e841 2300 	strex	r3, r2, [r1]
 800fbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1e6      	bne.n	800fb96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2220      	movs	r2, #32
 800fbcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fbd8:	2303      	movs	r3, #3
 800fbda:	e063      	b.n	800fca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f003 0304 	and.w	r3, r3, #4
 800fbe6:	2b04      	cmp	r3, #4
 800fbe8:	d149      	bne.n	800fc7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fbea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fbee:	9300      	str	r3, [sp, #0]
 800fbf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f000 f857 	bl	800fcac <UART_WaitOnFlagUntilTimeout>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d03c      	beq.n	800fc7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0c:	e853 3f00 	ldrex	r3, [r3]
 800fc10:	623b      	str	r3, [r7, #32]
   return(result);
 800fc12:	6a3b      	ldr	r3, [r7, #32]
 800fc14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	461a      	mov	r2, r3
 800fc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc22:	633b      	str	r3, [r7, #48]	; 0x30
 800fc24:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc2a:	e841 2300 	strex	r3, r2, [r1]
 800fc2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d1e6      	bne.n	800fc04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	3308      	adds	r3, #8
 800fc3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	e853 3f00 	ldrex	r3, [r3]
 800fc44:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f023 0301 	bic.w	r3, r3, #1
 800fc4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	3308      	adds	r3, #8
 800fc54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc56:	61fa      	str	r2, [r7, #28]
 800fc58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc5a:	69b9      	ldr	r1, [r7, #24]
 800fc5c:	69fa      	ldr	r2, [r7, #28]
 800fc5e:	e841 2300 	strex	r3, r2, [r1]
 800fc62:	617b      	str	r3, [r7, #20]
   return(result);
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d1e5      	bne.n	800fc36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2220      	movs	r2, #32
 800fc6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2200      	movs	r2, #0
 800fc76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc7a:	2303      	movs	r3, #3
 800fc7c:	e012      	b.n	800fca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2220      	movs	r2, #32
 800fc82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2220      	movs	r2, #32
 800fc8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fca2:	2300      	movs	r3, #0
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3758      	adds	r7, #88	; 0x58
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	603b      	str	r3, [r7, #0]
 800fcb8:	4613      	mov	r3, r2
 800fcba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fcbc:	e04f      	b.n	800fd5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcc4:	d04b      	beq.n	800fd5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fcc6:	f7f3 fa69 	bl	800319c <HAL_GetTick>
 800fcca:	4602      	mov	r2, r0
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	69ba      	ldr	r2, [r7, #24]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d302      	bcc.n	800fcdc <UART_WaitOnFlagUntilTimeout+0x30>
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d101      	bne.n	800fce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fcdc:	2303      	movs	r3, #3
 800fcde:	e04e      	b.n	800fd7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f003 0304 	and.w	r3, r3, #4
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d037      	beq.n	800fd5e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	2b80      	cmp	r3, #128	; 0x80
 800fcf2:	d034      	beq.n	800fd5e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	2b40      	cmp	r3, #64	; 0x40
 800fcf8:	d031      	beq.n	800fd5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	69db      	ldr	r3, [r3, #28]
 800fd00:	f003 0308 	and.w	r3, r3, #8
 800fd04:	2b08      	cmp	r3, #8
 800fd06:	d110      	bne.n	800fd2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2208      	movs	r2, #8
 800fd0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f000 f95b 	bl	800ffcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2208      	movs	r2, #8
 800fd1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2200      	movs	r2, #0
 800fd22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fd26:	2301      	movs	r3, #1
 800fd28:	e029      	b.n	800fd7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	69db      	ldr	r3, [r3, #28]
 800fd30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd38:	d111      	bne.n	800fd5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd44:	68f8      	ldr	r0, [r7, #12]
 800fd46:	f000 f941 	bl	800ffcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2220      	movs	r2, #32
 800fd4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2200      	movs	r2, #0
 800fd56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fd5a:	2303      	movs	r3, #3
 800fd5c:	e00f      	b.n	800fd7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	69da      	ldr	r2, [r3, #28]
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	4013      	ands	r3, r2
 800fd68:	68ba      	ldr	r2, [r7, #8]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	bf0c      	ite	eq
 800fd6e:	2301      	moveq	r3, #1
 800fd70:	2300      	movne	r3, #0
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	461a      	mov	r2, r3
 800fd76:	79fb      	ldrb	r3, [r7, #7]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d0a0      	beq.n	800fcbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd7c:	2300      	movs	r3, #0
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
	...

0800fd88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b0a3      	sub	sp, #140	; 0x8c
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	4613      	mov	r3, r2
 800fd94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	68ba      	ldr	r2, [r7, #8]
 800fd9a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	88fa      	ldrh	r2, [r7, #6]
 800fda0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	88fa      	ldrh	r2, [r7, #6]
 800fda8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdba:	d10e      	bne.n	800fdda <UART_Start_Receive_IT+0x52>
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	691b      	ldr	r3, [r3, #16]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d105      	bne.n	800fdd0 <UART_Start_Receive_IT+0x48>
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fdca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fdce:	e02d      	b.n	800fe2c <UART_Start_Receive_IT+0xa4>
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	22ff      	movs	r2, #255	; 0xff
 800fdd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fdd8:	e028      	b.n	800fe2c <UART_Start_Receive_IT+0xa4>
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	689b      	ldr	r3, [r3, #8]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d10d      	bne.n	800fdfe <UART_Start_Receive_IT+0x76>
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	691b      	ldr	r3, [r3, #16]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d104      	bne.n	800fdf4 <UART_Start_Receive_IT+0x6c>
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	22ff      	movs	r2, #255	; 0xff
 800fdee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fdf2:	e01b      	b.n	800fe2c <UART_Start_Receive_IT+0xa4>
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	227f      	movs	r2, #127	; 0x7f
 800fdf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fdfc:	e016      	b.n	800fe2c <UART_Start_Receive_IT+0xa4>
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe06:	d10d      	bne.n	800fe24 <UART_Start_Receive_IT+0x9c>
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	691b      	ldr	r3, [r3, #16]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d104      	bne.n	800fe1a <UART_Start_Receive_IT+0x92>
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	227f      	movs	r2, #127	; 0x7f
 800fe14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe18:	e008      	b.n	800fe2c <UART_Start_Receive_IT+0xa4>
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	223f      	movs	r2, #63	; 0x3f
 800fe1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe22:	e003      	b.n	800fe2c <UART_Start_Receive_IT+0xa4>
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2200      	movs	r2, #0
 800fe28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2222      	movs	r2, #34	; 0x22
 800fe38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	3308      	adds	r3, #8
 800fe42:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe46:	e853 3f00 	ldrex	r3, [r3]
 800fe4a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fe4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe4e:	f043 0301 	orr.w	r3, r3, #1
 800fe52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	3308      	adds	r3, #8
 800fe5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fe60:	673a      	str	r2, [r7, #112]	; 0x70
 800fe62:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe64:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fe66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fe68:	e841 2300 	strex	r3, r2, [r1]
 800fe6c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fe6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d1e3      	bne.n	800fe3c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe7c:	d14f      	bne.n	800ff1e <UART_Start_Receive_IT+0x196>
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fe84:	88fa      	ldrh	r2, [r7, #6]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d349      	bcc.n	800ff1e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	689b      	ldr	r3, [r3, #8]
 800fe8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe92:	d107      	bne.n	800fea4 <UART_Start_Receive_IT+0x11c>
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	691b      	ldr	r3, [r3, #16]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d103      	bne.n	800fea4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	4a47      	ldr	r2, [pc, #284]	; (800ffbc <UART_Start_Receive_IT+0x234>)
 800fea0:	675a      	str	r2, [r3, #116]	; 0x74
 800fea2:	e002      	b.n	800feaa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	4a46      	ldr	r2, [pc, #280]	; (800ffc0 <UART_Start_Receive_IT+0x238>)
 800fea8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	691b      	ldr	r3, [r3, #16]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d01a      	beq.n	800fee8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feba:	e853 3f00 	ldrex	r3, [r3]
 800febe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	461a      	mov	r2, r3
 800fed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fed4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fed6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800feda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fedc:	e841 2300 	strex	r3, r2, [r1]
 800fee0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1e4      	bne.n	800feb2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	3308      	adds	r3, #8
 800feee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fef2:	e853 3f00 	ldrex	r3, [r3]
 800fef6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fefe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	3308      	adds	r3, #8
 800ff06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ff08:	64ba      	str	r2, [r7, #72]	; 0x48
 800ff0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff10:	e841 2300 	strex	r3, r2, [r1]
 800ff14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ff16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d1e5      	bne.n	800fee8 <UART_Start_Receive_IT+0x160>
 800ff1c:	e046      	b.n	800ffac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	689b      	ldr	r3, [r3, #8]
 800ff22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff26:	d107      	bne.n	800ff38 <UART_Start_Receive_IT+0x1b0>
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	691b      	ldr	r3, [r3, #16]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d103      	bne.n	800ff38 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	4a24      	ldr	r2, [pc, #144]	; (800ffc4 <UART_Start_Receive_IT+0x23c>)
 800ff34:	675a      	str	r2, [r3, #116]	; 0x74
 800ff36:	e002      	b.n	800ff3e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	4a23      	ldr	r2, [pc, #140]	; (800ffc8 <UART_Start_Receive_IT+0x240>)
 800ff3c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	691b      	ldr	r3, [r3, #16]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d019      	beq.n	800ff7a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4e:	e853 3f00 	ldrex	r3, [r3]
 800ff52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ff54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff56:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ff5a:	677b      	str	r3, [r7, #116]	; 0x74
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	461a      	mov	r2, r3
 800ff62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff64:	637b      	str	r3, [r7, #52]	; 0x34
 800ff66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff6c:	e841 2300 	strex	r3, r2, [r1]
 800ff70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ff72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1e6      	bne.n	800ff46 <UART_Start_Receive_IT+0x1be>
 800ff78:	e018      	b.n	800ffac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	e853 3f00 	ldrex	r3, [r3]
 800ff86:	613b      	str	r3, [r7, #16]
   return(result);
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	f043 0320 	orr.w	r3, r3, #32
 800ff8e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	461a      	mov	r2, r3
 800ff96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff98:	623b      	str	r3, [r7, #32]
 800ff9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff9c:	69f9      	ldr	r1, [r7, #28]
 800ff9e:	6a3a      	ldr	r2, [r7, #32]
 800ffa0:	e841 2300 	strex	r3, r2, [r1]
 800ffa4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ffa6:	69bb      	ldr	r3, [r7, #24]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d1e6      	bne.n	800ff7a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ffac:	2300      	movs	r3, #0
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	378c      	adds	r7, #140	; 0x8c
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop
 800ffbc:	080107ed 	.word	0x080107ed
 800ffc0:	0801048d 	.word	0x0801048d
 800ffc4:	080102d5 	.word	0x080102d5
 800ffc8:	0801011d 	.word	0x0801011d

0800ffcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b095      	sub	sp, #84	; 0x54
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffdc:	e853 3f00 	ldrex	r3, [r3]
 800ffe0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ffe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ffe8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	461a      	mov	r2, r3
 800fff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fff2:	643b      	str	r3, [r7, #64]	; 0x40
 800fff4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fff8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fffa:	e841 2300 	strex	r3, r2, [r1]
 800fffe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010002:	2b00      	cmp	r3, #0
 8010004:	d1e6      	bne.n	800ffd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	3308      	adds	r3, #8
 801000c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801000e:	6a3b      	ldr	r3, [r7, #32]
 8010010:	e853 3f00 	ldrex	r3, [r3]
 8010014:	61fb      	str	r3, [r7, #28]
   return(result);
 8010016:	69fa      	ldr	r2, [r7, #28]
 8010018:	4b1e      	ldr	r3, [pc, #120]	; (8010094 <UART_EndRxTransfer+0xc8>)
 801001a:	4013      	ands	r3, r2
 801001c:	64bb      	str	r3, [r7, #72]	; 0x48
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	3308      	adds	r3, #8
 8010024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010028:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801002a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801002c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801002e:	e841 2300 	strex	r3, r2, [r1]
 8010032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010036:	2b00      	cmp	r3, #0
 8010038:	d1e5      	bne.n	8010006 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801003e:	2b01      	cmp	r3, #1
 8010040:	d118      	bne.n	8010074 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	e853 3f00 	ldrex	r3, [r3]
 801004e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	f023 0310 	bic.w	r3, r3, #16
 8010056:	647b      	str	r3, [r7, #68]	; 0x44
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	461a      	mov	r2, r3
 801005e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010060:	61bb      	str	r3, [r7, #24]
 8010062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010064:	6979      	ldr	r1, [r7, #20]
 8010066:	69ba      	ldr	r2, [r7, #24]
 8010068:	e841 2300 	strex	r3, r2, [r1]
 801006c:	613b      	str	r3, [r7, #16]
   return(result);
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d1e6      	bne.n	8010042 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2220      	movs	r2, #32
 8010078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2200      	movs	r2, #0
 8010086:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010088:	bf00      	nop
 801008a:	3754      	adds	r7, #84	; 0x54
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr
 8010094:	effffffe 	.word	0xeffffffe

08010098 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2200      	movs	r2, #0
 80100aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2200      	movs	r2, #0
 80100b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f7fe ff2e 	bl	800ef18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100bc:	bf00      	nop
 80100be:	3710      	adds	r7, #16
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b088      	sub	sp, #32
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	e853 3f00 	ldrex	r3, [r3]
 80100d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100e0:	61fb      	str	r3, [r7, #28]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	461a      	mov	r2, r3
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	61bb      	str	r3, [r7, #24]
 80100ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ee:	6979      	ldr	r1, [r7, #20]
 80100f0:	69ba      	ldr	r2, [r7, #24]
 80100f2:	e841 2300 	strex	r3, r2, [r1]
 80100f6:	613b      	str	r3, [r7, #16]
   return(result);
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d1e6      	bne.n	80100cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2220      	movs	r2, #32
 8010102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f7fe fef9 	bl	800ef04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010112:	bf00      	nop
 8010114:	3720      	adds	r7, #32
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
	...

0801011c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b09c      	sub	sp, #112	; 0x70
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801012a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010134:	2b22      	cmp	r3, #34	; 0x22
 8010136:	f040 80be 	bne.w	80102b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010140:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010144:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010148:	b2d9      	uxtb	r1, r3
 801014a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801014e:	b2da      	uxtb	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010154:	400a      	ands	r2, r1
 8010156:	b2d2      	uxtb	r2, r2
 8010158:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801015e:	1c5a      	adds	r2, r3, #1
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801016a:	b29b      	uxth	r3, r3
 801016c:	3b01      	subs	r3, #1
 801016e:	b29a      	uxth	r2, r3
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801017c:	b29b      	uxth	r3, r3
 801017e:	2b00      	cmp	r3, #0
 8010180:	f040 80a1 	bne.w	80102c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801018a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801018c:	e853 3f00 	ldrex	r3, [r3]
 8010190:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010198:	66bb      	str	r3, [r7, #104]	; 0x68
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	461a      	mov	r2, r3
 80101a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80101a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80101a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101aa:	e841 2300 	strex	r3, r2, [r1]
 80101ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80101b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1e6      	bne.n	8010184 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3308      	adds	r3, #8
 80101bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c0:	e853 3f00 	ldrex	r3, [r3]
 80101c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80101c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c8:	f023 0301 	bic.w	r3, r3, #1
 80101cc:	667b      	str	r3, [r7, #100]	; 0x64
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	3308      	adds	r3, #8
 80101d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80101d6:	647a      	str	r2, [r7, #68]	; 0x44
 80101d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80101dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101de:	e841 2300 	strex	r3, r2, [r1]
 80101e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80101e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d1e5      	bne.n	80101b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2220      	movs	r2, #32
 80101ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2200      	movs	r2, #0
 80101f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4a33      	ldr	r2, [pc, #204]	; (80102d0 <UART_RxISR_8BIT+0x1b4>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d01f      	beq.n	8010248 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010212:	2b00      	cmp	r3, #0
 8010214:	d018      	beq.n	8010248 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021e:	e853 3f00 	ldrex	r3, [r3]
 8010222:	623b      	str	r3, [r7, #32]
   return(result);
 8010224:	6a3b      	ldr	r3, [r7, #32]
 8010226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801022a:	663b      	str	r3, [r7, #96]	; 0x60
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	461a      	mov	r2, r3
 8010232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010234:	633b      	str	r3, [r7, #48]	; 0x30
 8010236:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801023a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801023c:	e841 2300 	strex	r3, r2, [r1]
 8010240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010244:	2b00      	cmp	r3, #0
 8010246:	d1e6      	bne.n	8010216 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801024c:	2b01      	cmp	r3, #1
 801024e:	d12e      	bne.n	80102ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	e853 3f00 	ldrex	r3, [r3]
 8010262:	60fb      	str	r3, [r7, #12]
   return(result);
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f023 0310 	bic.w	r3, r3, #16
 801026a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	461a      	mov	r2, r3
 8010272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010274:	61fb      	str	r3, [r7, #28]
 8010276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010278:	69b9      	ldr	r1, [r7, #24]
 801027a:	69fa      	ldr	r2, [r7, #28]
 801027c:	e841 2300 	strex	r3, r2, [r1]
 8010280:	617b      	str	r3, [r7, #20]
   return(result);
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d1e6      	bne.n	8010256 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	69db      	ldr	r3, [r3, #28]
 801028e:	f003 0310 	and.w	r3, r3, #16
 8010292:	2b10      	cmp	r3, #16
 8010294:	d103      	bne.n	801029e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2210      	movs	r2, #16
 801029c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80102a4:	4619      	mov	r1, r3
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f7fe fe40 	bl	800ef2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80102ac:	e00b      	b.n	80102c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f7f0 fa1e 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 80102b4:	e007      	b.n	80102c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	699a      	ldr	r2, [r3, #24]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f042 0208 	orr.w	r2, r2, #8
 80102c4:	619a      	str	r2, [r3, #24]
}
 80102c6:	bf00      	nop
 80102c8:	3770      	adds	r7, #112	; 0x70
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	58000c00 	.word	0x58000c00

080102d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b09c      	sub	sp, #112	; 0x70
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80102e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102ec:	2b22      	cmp	r3, #34	; 0x22
 80102ee:	f040 80be 	bne.w	801046e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010300:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010302:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8010306:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801030a:	4013      	ands	r3, r2
 801030c:	b29a      	uxth	r2, r3
 801030e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010310:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010316:	1c9a      	adds	r2, r3, #2
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010322:	b29b      	uxth	r3, r3
 8010324:	3b01      	subs	r3, #1
 8010326:	b29a      	uxth	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010334:	b29b      	uxth	r3, r3
 8010336:	2b00      	cmp	r3, #0
 8010338:	f040 80a1 	bne.w	801047e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010344:	e853 3f00 	ldrex	r3, [r3]
 8010348:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801034a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801034c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010350:	667b      	str	r3, [r7, #100]	; 0x64
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	461a      	mov	r2, r3
 8010358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801035a:	657b      	str	r3, [r7, #84]	; 0x54
 801035c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010360:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010362:	e841 2300 	strex	r3, r2, [r1]
 8010366:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801036a:	2b00      	cmp	r3, #0
 801036c:	d1e6      	bne.n	801033c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	3308      	adds	r3, #8
 8010374:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010378:	e853 3f00 	ldrex	r3, [r3]
 801037c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801037e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010380:	f023 0301 	bic.w	r3, r3, #1
 8010384:	663b      	str	r3, [r7, #96]	; 0x60
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	3308      	adds	r3, #8
 801038c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801038e:	643a      	str	r2, [r7, #64]	; 0x40
 8010390:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010392:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010396:	e841 2300 	strex	r3, r2, [r1]
 801039a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801039c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d1e5      	bne.n	801036e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2220      	movs	r2, #32
 80103a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2200      	movs	r2, #0
 80103ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2200      	movs	r2, #0
 80103b4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4a33      	ldr	r2, [pc, #204]	; (8010488 <UART_RxISR_16BIT+0x1b4>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d01f      	beq.n	8010400 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d018      	beq.n	8010400 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d4:	6a3b      	ldr	r3, [r7, #32]
 80103d6:	e853 3f00 	ldrex	r3, [r3]
 80103da:	61fb      	str	r3, [r7, #28]
   return(result);
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80103e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	461a      	mov	r2, r3
 80103ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103ee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103f4:	e841 2300 	strex	r3, r2, [r1]
 80103f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d1e6      	bne.n	80103ce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010404:	2b01      	cmp	r3, #1
 8010406:	d12e      	bne.n	8010466 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	e853 3f00 	ldrex	r3, [r3]
 801041a:	60bb      	str	r3, [r7, #8]
   return(result);
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	f023 0310 	bic.w	r3, r3, #16
 8010422:	65bb      	str	r3, [r7, #88]	; 0x58
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	461a      	mov	r2, r3
 801042a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801042c:	61bb      	str	r3, [r7, #24]
 801042e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010430:	6979      	ldr	r1, [r7, #20]
 8010432:	69ba      	ldr	r2, [r7, #24]
 8010434:	e841 2300 	strex	r3, r2, [r1]
 8010438:	613b      	str	r3, [r7, #16]
   return(result);
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d1e6      	bne.n	801040e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	69db      	ldr	r3, [r3, #28]
 8010446:	f003 0310 	and.w	r3, r3, #16
 801044a:	2b10      	cmp	r3, #16
 801044c:	d103      	bne.n	8010456 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2210      	movs	r2, #16
 8010454:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801045c:	4619      	mov	r1, r3
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f7fe fd64 	bl	800ef2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010464:	e00b      	b.n	801047e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f7f0 f942 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 801046c:	e007      	b.n	801047e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	699a      	ldr	r2, [r3, #24]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f042 0208 	orr.w	r2, r2, #8
 801047c:	619a      	str	r2, [r3, #24]
}
 801047e:	bf00      	nop
 8010480:	3770      	adds	r7, #112	; 0x70
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	58000c00 	.word	0x58000c00

0801048c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b0ac      	sub	sp, #176	; 0xb0
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801049a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	69db      	ldr	r3, [r3, #28]
 80104a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	689b      	ldr	r3, [r3, #8]
 80104b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104c2:	2b22      	cmp	r3, #34	; 0x22
 80104c4:	f040 8180 	bne.w	80107c8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80104ce:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80104d2:	e123      	b.n	801071c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104da:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80104de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80104e2:	b2d9      	uxtb	r1, r3
 80104e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104ee:	400a      	ands	r2, r1
 80104f0:	b2d2      	uxtb	r2, r2
 80104f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104f8:	1c5a      	adds	r2, r3, #1
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010504:	b29b      	uxth	r3, r3
 8010506:	3b01      	subs	r3, #1
 8010508:	b29a      	uxth	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	69db      	ldr	r3, [r3, #28]
 8010516:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801051a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801051e:	f003 0307 	and.w	r3, r3, #7
 8010522:	2b00      	cmp	r3, #0
 8010524:	d053      	beq.n	80105ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801052a:	f003 0301 	and.w	r3, r3, #1
 801052e:	2b00      	cmp	r3, #0
 8010530:	d011      	beq.n	8010556 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801053a:	2b00      	cmp	r3, #0
 801053c:	d00b      	beq.n	8010556 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	2201      	movs	r2, #1
 8010544:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801054c:	f043 0201 	orr.w	r2, r3, #1
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801055a:	f003 0302 	and.w	r3, r3, #2
 801055e:	2b00      	cmp	r3, #0
 8010560:	d011      	beq.n	8010586 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010566:	f003 0301 	and.w	r3, r3, #1
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00b      	beq.n	8010586 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2202      	movs	r2, #2
 8010574:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801057c:	f043 0204 	orr.w	r2, r3, #4
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801058a:	f003 0304 	and.w	r3, r3, #4
 801058e:	2b00      	cmp	r3, #0
 8010590:	d011      	beq.n	80105b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010596:	f003 0301 	and.w	r3, r3, #1
 801059a:	2b00      	cmp	r3, #0
 801059c:	d00b      	beq.n	80105b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	2204      	movs	r2, #4
 80105a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105ac:	f043 0202 	orr.w	r2, r3, #2
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d006      	beq.n	80105ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7fe fca9 	bl	800ef18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f040 80a0 	bne.w	801071c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105e4:	e853 3f00 	ldrex	r3, [r3]
 80105e8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80105ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	461a      	mov	r2, r3
 80105fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80105fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010600:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010602:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010604:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010606:	e841 2300 	strex	r3, r2, [r1]
 801060a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801060c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1e4      	bne.n	80105dc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	3308      	adds	r3, #8
 8010618:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801061a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801061c:	e853 3f00 	ldrex	r3, [r3]
 8010620:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010622:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010624:	4b6e      	ldr	r3, [pc, #440]	; (80107e0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010626:	4013      	ands	r3, r2
 8010628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	3308      	adds	r3, #8
 8010632:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010636:	66ba      	str	r2, [r7, #104]	; 0x68
 8010638:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801063a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801063c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801063e:	e841 2300 	strex	r3, r2, [r1]
 8010642:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010646:	2b00      	cmp	r3, #0
 8010648:	d1e3      	bne.n	8010612 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2220      	movs	r2, #32
 801064e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2200      	movs	r2, #0
 8010656:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2200      	movs	r2, #0
 801065c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	4a60      	ldr	r2, [pc, #384]	; (80107e4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d021      	beq.n	80106ac <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010672:	2b00      	cmp	r3, #0
 8010674:	d01a      	beq.n	80106ac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801067c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801067e:	e853 3f00 	ldrex	r3, [r3]
 8010682:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801068a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	461a      	mov	r2, r3
 8010694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010698:	657b      	str	r3, [r7, #84]	; 0x54
 801069a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801069c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801069e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106a0:	e841 2300 	strex	r3, r2, [r1]
 80106a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80106a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1e4      	bne.n	8010676 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d130      	bne.n	8010716 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2200      	movs	r2, #0
 80106b8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c2:	e853 3f00 	ldrex	r3, [r3]
 80106c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80106c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ca:	f023 0310 	bic.w	r3, r3, #16
 80106ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80106dc:	643b      	str	r3, [r7, #64]	; 0x40
 80106de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106e4:	e841 2300 	strex	r3, r2, [r1]
 80106e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1e4      	bne.n	80106ba <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	69db      	ldr	r3, [r3, #28]
 80106f6:	f003 0310 	and.w	r3, r3, #16
 80106fa:	2b10      	cmp	r3, #16
 80106fc:	d103      	bne.n	8010706 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2210      	movs	r2, #16
 8010704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801070c:	4619      	mov	r1, r3
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f7fe fc0c 	bl	800ef2c <HAL_UARTEx_RxEventCallback>
 8010714:	e002      	b.n	801071c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f7ef ffea 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801071c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010720:	2b00      	cmp	r3, #0
 8010722:	d006      	beq.n	8010732 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010728:	f003 0320 	and.w	r3, r3, #32
 801072c:	2b00      	cmp	r3, #0
 801072e:	f47f aed1 	bne.w	80104d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010738:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801073c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010740:	2b00      	cmp	r3, #0
 8010742:	d049      	beq.n	80107d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801074a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801074e:	429a      	cmp	r2, r3
 8010750:	d242      	bcs.n	80107d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	3308      	adds	r3, #8
 8010758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801075a:	6a3b      	ldr	r3, [r7, #32]
 801075c:	e853 3f00 	ldrex	r3, [r3]
 8010760:	61fb      	str	r3, [r7, #28]
   return(result);
 8010762:	69fb      	ldr	r3, [r7, #28]
 8010764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	3308      	adds	r3, #8
 8010772:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801077a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801077c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801077e:	e841 2300 	strex	r3, r2, [r1]
 8010782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010786:	2b00      	cmp	r3, #0
 8010788:	d1e3      	bne.n	8010752 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4a16      	ldr	r2, [pc, #88]	; (80107e8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801078e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	e853 3f00 	ldrex	r3, [r3]
 801079c:	60bb      	str	r3, [r7, #8]
   return(result);
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	f043 0320 	orr.w	r3, r3, #32
 80107a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	461a      	mov	r2, r3
 80107ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107b2:	61bb      	str	r3, [r7, #24]
 80107b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b6:	6979      	ldr	r1, [r7, #20]
 80107b8:	69ba      	ldr	r2, [r7, #24]
 80107ba:	e841 2300 	strex	r3, r2, [r1]
 80107be:	613b      	str	r3, [r7, #16]
   return(result);
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d1e4      	bne.n	8010790 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80107c6:	e007      	b.n	80107d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	699a      	ldr	r2, [r3, #24]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f042 0208 	orr.w	r2, r2, #8
 80107d6:	619a      	str	r2, [r3, #24]
}
 80107d8:	bf00      	nop
 80107da:	37b0      	adds	r7, #176	; 0xb0
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}
 80107e0:	effffffe 	.word	0xeffffffe
 80107e4:	58000c00 	.word	0x58000c00
 80107e8:	0801011d 	.word	0x0801011d

080107ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b0ae      	sub	sp, #184	; 0xb8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	69db      	ldr	r3, [r3, #28]
 8010804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	689b      	ldr	r3, [r3, #8]
 8010818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010822:	2b22      	cmp	r3, #34	; 0x22
 8010824:	f040 8184 	bne.w	8010b30 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801082e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010832:	e127      	b.n	8010a84 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801083a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010846:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801084a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801084e:	4013      	ands	r3, r2
 8010850:	b29a      	uxth	r2, r3
 8010852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010856:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801085c:	1c9a      	adds	r2, r3, #2
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010868:	b29b      	uxth	r3, r3
 801086a:	3b01      	subs	r3, #1
 801086c:	b29a      	uxth	r2, r3
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	69db      	ldr	r3, [r3, #28]
 801087a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801087e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010882:	f003 0307 	and.w	r3, r3, #7
 8010886:	2b00      	cmp	r3, #0
 8010888:	d053      	beq.n	8010932 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801088a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801088e:	f003 0301 	and.w	r3, r3, #1
 8010892:	2b00      	cmp	r3, #0
 8010894:	d011      	beq.n	80108ba <UART_RxISR_16BIT_FIFOEN+0xce>
 8010896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801089a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00b      	beq.n	80108ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	2201      	movs	r2, #1
 80108a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108b0:	f043 0201 	orr.w	r2, r3, #1
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80108be:	f003 0302 	and.w	r3, r3, #2
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d011      	beq.n	80108ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 80108c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108ca:	f003 0301 	and.w	r3, r3, #1
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d00b      	beq.n	80108ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2202      	movs	r2, #2
 80108d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108e0:	f043 0204 	orr.w	r2, r3, #4
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80108ee:	f003 0304 	and.w	r3, r3, #4
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d011      	beq.n	801091a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80108f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108fa:	f003 0301 	and.w	r3, r3, #1
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00b      	beq.n	801091a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	2204      	movs	r2, #4
 8010908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010910:	f043 0202 	orr.w	r2, r3, #2
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010920:	2b00      	cmp	r3, #0
 8010922:	d006      	beq.n	8010932 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f7fe faf7 	bl	800ef18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2200      	movs	r2, #0
 801092e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010938:	b29b      	uxth	r3, r3
 801093a:	2b00      	cmp	r3, #0
 801093c:	f040 80a2 	bne.w	8010a84 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010948:	e853 3f00 	ldrex	r3, [r3]
 801094c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801094e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	461a      	mov	r2, r3
 801095e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010962:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010966:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010968:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801096a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801096e:	e841 2300 	strex	r3, r2, [r1]
 8010972:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1e2      	bne.n	8010940 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	3308      	adds	r3, #8
 8010980:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010984:	e853 3f00 	ldrex	r3, [r3]
 8010988:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801098a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801098c:	4b6e      	ldr	r3, [pc, #440]	; (8010b48 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801098e:	4013      	ands	r3, r2
 8010990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	3308      	adds	r3, #8
 801099a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801099e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80109a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80109a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80109a6:	e841 2300 	strex	r3, r2, [r1]
 80109aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80109ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1e3      	bne.n	801097a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2220      	movs	r2, #32
 80109b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	4a60      	ldr	r2, [pc, #384]	; (8010b4c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d021      	beq.n	8010a14 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d01a      	beq.n	8010a14 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109e6:	e853 3f00 	ldrex	r3, [r3]
 80109ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80109ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80109f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	461a      	mov	r2, r3
 80109fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a00:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010a06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a08:	e841 2300 	strex	r3, r2, [r1]
 8010a0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d1e4      	bne.n	80109de <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d130      	bne.n	8010a7e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2a:	e853 3f00 	ldrex	r3, [r3]
 8010a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a32:	f023 0310 	bic.w	r3, r3, #16
 8010a36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	461a      	mov	r2, r3
 8010a40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a44:	647b      	str	r3, [r7, #68]	; 0x44
 8010a46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a4c:	e841 2300 	strex	r3, r2, [r1]
 8010a50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d1e4      	bne.n	8010a22 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	69db      	ldr	r3, [r3, #28]
 8010a5e:	f003 0310 	and.w	r3, r3, #16
 8010a62:	2b10      	cmp	r3, #16
 8010a64:	d103      	bne.n	8010a6e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	2210      	movs	r2, #16
 8010a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a74:	4619      	mov	r1, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f7fe fa58 	bl	800ef2c <HAL_UARTEx_RxEventCallback>
 8010a7c:	e002      	b.n	8010a84 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f7ef fe36 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010a84:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d006      	beq.n	8010a9a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010a8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010a90:	f003 0320 	and.w	r3, r3, #32
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f47f aecd 	bne.w	8010834 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010aa0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010aa4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d049      	beq.n	8010b40 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010ab2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d242      	bcs.n	8010b40 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	3308      	adds	r3, #8
 8010ac0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac4:	e853 3f00 	ldrex	r3, [r3]
 8010ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8010aca:	6a3b      	ldr	r3, [r7, #32]
 8010acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	3308      	adds	r3, #8
 8010ada:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010ade:	633a      	str	r2, [r7, #48]	; 0x30
 8010ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ae6:	e841 2300 	strex	r3, r2, [r1]
 8010aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d1e3      	bne.n	8010aba <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4a16      	ldr	r2, [pc, #88]	; (8010b50 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010af6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	e853 3f00 	ldrex	r3, [r3]
 8010b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f043 0320 	orr.w	r3, r3, #32
 8010b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	461a      	mov	r2, r3
 8010b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b1a:	61fb      	str	r3, [r7, #28]
 8010b1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b1e:	69b9      	ldr	r1, [r7, #24]
 8010b20:	69fa      	ldr	r2, [r7, #28]
 8010b22:	e841 2300 	strex	r3, r2, [r1]
 8010b26:	617b      	str	r3, [r7, #20]
   return(result);
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d1e4      	bne.n	8010af8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b2e:	e007      	b.n	8010b40 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	699a      	ldr	r2, [r3, #24]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f042 0208 	orr.w	r2, r2, #8
 8010b3e:	619a      	str	r2, [r3, #24]
}
 8010b40:	bf00      	nop
 8010b42:	37b8      	adds	r7, #184	; 0xb8
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	effffffe 	.word	0xeffffffe
 8010b4c:	58000c00 	.word	0x58000c00
 8010b50:	080102d5 	.word	0x080102d5

08010b54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010b54:	b480      	push	{r7}
 8010b56:	b083      	sub	sp, #12
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010b5c:	bf00      	nop
 8010b5e:	370c      	adds	r7, #12
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr

08010b68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010b70:	bf00      	nop
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr

08010b7c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010b84:	bf00      	nop
 8010b86:	370c      	adds	r7, #12
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr

08010b90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d101      	bne.n	8010ba6 <HAL_UARTEx_DisableFifoMode+0x16>
 8010ba2:	2302      	movs	r3, #2
 8010ba4:	e027      	b.n	8010bf6 <HAL_UARTEx_DisableFifoMode+0x66>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2201      	movs	r2, #1
 8010baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2224      	movs	r2, #36	; 0x24
 8010bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	f022 0201 	bic.w	r2, r2, #1
 8010bcc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010bd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2220      	movs	r2, #32
 8010be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010bf4:	2300      	movs	r3, #0
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3714      	adds	r7, #20
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr

08010c02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b084      	sub	sp, #16
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
 8010c0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	d101      	bne.n	8010c1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010c16:	2302      	movs	r3, #2
 8010c18:	e02d      	b.n	8010c76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2224      	movs	r2, #36	; 0x24
 8010c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	f022 0201 	bic.w	r2, r2, #1
 8010c40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	689b      	ldr	r3, [r3, #8]
 8010c48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	683a      	ldr	r2, [r7, #0]
 8010c52:	430a      	orrs	r2, r1
 8010c54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 f850 	bl	8010cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	68fa      	ldr	r2, [r7, #12]
 8010c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2220      	movs	r2, #32
 8010c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010c74:	2300      	movs	r3, #0
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3710      	adds	r7, #16
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}

08010c7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c7e:	b580      	push	{r7, lr}
 8010c80:	b084      	sub	sp, #16
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
 8010c86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d101      	bne.n	8010c96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010c92:	2302      	movs	r3, #2
 8010c94:	e02d      	b.n	8010cf2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2201      	movs	r2, #1
 8010c9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2224      	movs	r2, #36	; 0x24
 8010ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f022 0201 	bic.w	r2, r2, #1
 8010cbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	689b      	ldr	r3, [r3, #8]
 8010cc4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	683a      	ldr	r2, [r7, #0]
 8010cce:	430a      	orrs	r2, r1
 8010cd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 f812 	bl	8010cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	68fa      	ldr	r2, [r7, #12]
 8010cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2220      	movs	r2, #32
 8010ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2200      	movs	r2, #0
 8010cec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010cf0:	2300      	movs	r3, #0
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3710      	adds	r7, #16
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
	...

08010cfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b085      	sub	sp, #20
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d108      	bne.n	8010d1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2201      	movs	r2, #1
 8010d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2201      	movs	r2, #1
 8010d18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d1c:	e031      	b.n	8010d82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d1e:	2310      	movs	r3, #16
 8010d20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d22:	2310      	movs	r3, #16
 8010d24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	689b      	ldr	r3, [r3, #8]
 8010d2c:	0e5b      	lsrs	r3, r3, #25
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	f003 0307 	and.w	r3, r3, #7
 8010d34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	689b      	ldr	r3, [r3, #8]
 8010d3c:	0f5b      	lsrs	r3, r3, #29
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	f003 0307 	and.w	r3, r3, #7
 8010d44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d46:	7bbb      	ldrb	r3, [r7, #14]
 8010d48:	7b3a      	ldrb	r2, [r7, #12]
 8010d4a:	4911      	ldr	r1, [pc, #68]	; (8010d90 <UARTEx_SetNbDataToProcess+0x94>)
 8010d4c:	5c8a      	ldrb	r2, [r1, r2]
 8010d4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010d52:	7b3a      	ldrb	r2, [r7, #12]
 8010d54:	490f      	ldr	r1, [pc, #60]	; (8010d94 <UARTEx_SetNbDataToProcess+0x98>)
 8010d56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d58:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d64:	7bfb      	ldrb	r3, [r7, #15]
 8010d66:	7b7a      	ldrb	r2, [r7, #13]
 8010d68:	4909      	ldr	r1, [pc, #36]	; (8010d90 <UARTEx_SetNbDataToProcess+0x94>)
 8010d6a:	5c8a      	ldrb	r2, [r1, r2]
 8010d6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010d70:	7b7a      	ldrb	r2, [r7, #13]
 8010d72:	4908      	ldr	r1, [pc, #32]	; (8010d94 <UARTEx_SetNbDataToProcess+0x98>)
 8010d74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d76:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010d82:	bf00      	nop
 8010d84:	3714      	adds	r7, #20
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	080158b8 	.word	0x080158b8
 8010d94:	080158c0 	.word	0x080158c0

08010d98 <__NVIC_SetPriority>:
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	4603      	mov	r3, r0
 8010da0:	6039      	str	r1, [r7, #0]
 8010da2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	db0a      	blt.n	8010dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	b2da      	uxtb	r2, r3
 8010db0:	490c      	ldr	r1, [pc, #48]	; (8010de4 <__NVIC_SetPriority+0x4c>)
 8010db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010db6:	0112      	lsls	r2, r2, #4
 8010db8:	b2d2      	uxtb	r2, r2
 8010dba:	440b      	add	r3, r1
 8010dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010dc0:	e00a      	b.n	8010dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	b2da      	uxtb	r2, r3
 8010dc6:	4908      	ldr	r1, [pc, #32]	; (8010de8 <__NVIC_SetPriority+0x50>)
 8010dc8:	88fb      	ldrh	r3, [r7, #6]
 8010dca:	f003 030f 	and.w	r3, r3, #15
 8010dce:	3b04      	subs	r3, #4
 8010dd0:	0112      	lsls	r2, r2, #4
 8010dd2:	b2d2      	uxtb	r2, r2
 8010dd4:	440b      	add	r3, r1
 8010dd6:	761a      	strb	r2, [r3, #24]
}
 8010dd8:	bf00      	nop
 8010dda:	370c      	adds	r7, #12
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr
 8010de4:	e000e100 	.word	0xe000e100
 8010de8:	e000ed00 	.word	0xe000ed00

08010dec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010dec:	b580      	push	{r7, lr}
 8010dee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010df0:	4b05      	ldr	r3, [pc, #20]	; (8010e08 <SysTick_Handler+0x1c>)
 8010df2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010df4:	f002 fada 	bl	80133ac <xTaskGetSchedulerState>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	d001      	beq.n	8010e02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010dfe:	f003 f8fb 	bl	8013ff8 <xPortSysTickHandler>
  }
}
 8010e02:	bf00      	nop
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	e000e010 	.word	0xe000e010

08010e0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010e10:	2100      	movs	r1, #0
 8010e12:	f06f 0004 	mvn.w	r0, #4
 8010e16:	f7ff ffbf 	bl	8010d98 <__NVIC_SetPriority>
#endif
}
 8010e1a:	bf00      	nop
 8010e1c:	bd80      	pop	{r7, pc}
	...

08010e20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e26:	f3ef 8305 	mrs	r3, IPSR
 8010e2a:	603b      	str	r3, [r7, #0]
  return(result);
 8010e2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d003      	beq.n	8010e3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010e32:	f06f 0305 	mvn.w	r3, #5
 8010e36:	607b      	str	r3, [r7, #4]
 8010e38:	e00c      	b.n	8010e54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010e3a:	4b0a      	ldr	r3, [pc, #40]	; (8010e64 <osKernelInitialize+0x44>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d105      	bne.n	8010e4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010e42:	4b08      	ldr	r3, [pc, #32]	; (8010e64 <osKernelInitialize+0x44>)
 8010e44:	2201      	movs	r2, #1
 8010e46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	607b      	str	r3, [r7, #4]
 8010e4c:	e002      	b.n	8010e54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010e54:	687b      	ldr	r3, [r7, #4]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	370c      	adds	r7, #12
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr
 8010e62:	bf00      	nop
 8010e64:	2400077c 	.word	0x2400077c

08010e68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e6e:	f3ef 8305 	mrs	r3, IPSR
 8010e72:	603b      	str	r3, [r7, #0]
  return(result);
 8010e74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d003      	beq.n	8010e82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8010e7a:	f06f 0305 	mvn.w	r3, #5
 8010e7e:	607b      	str	r3, [r7, #4]
 8010e80:	e010      	b.n	8010ea4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010e82:	4b0b      	ldr	r3, [pc, #44]	; (8010eb0 <osKernelStart+0x48>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d109      	bne.n	8010e9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010e8a:	f7ff ffbf 	bl	8010e0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010e8e:	4b08      	ldr	r3, [pc, #32]	; (8010eb0 <osKernelStart+0x48>)
 8010e90:	2202      	movs	r2, #2
 8010e92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010e94:	f001 fda4 	bl	80129e0 <vTaskStartScheduler>
      stat = osOK;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	607b      	str	r3, [r7, #4]
 8010e9c:	e002      	b.n	8010ea4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ea2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010ea4:	687b      	ldr	r3, [r7, #4]
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3708      	adds	r7, #8
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	2400077c 	.word	0x2400077c

08010eb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b08e      	sub	sp, #56	; 0x38
 8010eb8:	af04      	add	r7, sp, #16
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ec4:	f3ef 8305 	mrs	r3, IPSR
 8010ec8:	617b      	str	r3, [r7, #20]
  return(result);
 8010eca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d17e      	bne.n	8010fce <osThreadNew+0x11a>
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d07b      	beq.n	8010fce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010ed6:	2380      	movs	r3, #128	; 0x80
 8010ed8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010eda:	2318      	movs	r3, #24
 8010edc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ee6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d045      	beq.n	8010f7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d002      	beq.n	8010efc <osThreadNew+0x48>
        name = attr->name;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	699b      	ldr	r3, [r3, #24]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	699b      	ldr	r3, [r3, #24]
 8010f08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010f0a:	69fb      	ldr	r3, [r7, #28]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d008      	beq.n	8010f22 <osThreadNew+0x6e>
 8010f10:	69fb      	ldr	r3, [r7, #28]
 8010f12:	2b38      	cmp	r3, #56	; 0x38
 8010f14:	d805      	bhi.n	8010f22 <osThreadNew+0x6e>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	f003 0301 	and.w	r3, r3, #1
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d001      	beq.n	8010f26 <osThreadNew+0x72>
        return (NULL);
 8010f22:	2300      	movs	r3, #0
 8010f24:	e054      	b.n	8010fd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	695b      	ldr	r3, [r3, #20]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d003      	beq.n	8010f36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	695b      	ldr	r3, [r3, #20]
 8010f32:	089b      	lsrs	r3, r3, #2
 8010f34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d00e      	beq.n	8010f5c <osThreadNew+0xa8>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	2b5b      	cmp	r3, #91	; 0x5b
 8010f44:	d90a      	bls.n	8010f5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d006      	beq.n	8010f5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	695b      	ldr	r3, [r3, #20]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d002      	beq.n	8010f5c <osThreadNew+0xa8>
        mem = 1;
 8010f56:	2301      	movs	r3, #1
 8010f58:	61bb      	str	r3, [r7, #24]
 8010f5a:	e010      	b.n	8010f7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	689b      	ldr	r3, [r3, #8]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d10c      	bne.n	8010f7e <osThreadNew+0xca>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d108      	bne.n	8010f7e <osThreadNew+0xca>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	691b      	ldr	r3, [r3, #16]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d104      	bne.n	8010f7e <osThreadNew+0xca>
          mem = 0;
 8010f74:	2300      	movs	r3, #0
 8010f76:	61bb      	str	r3, [r7, #24]
 8010f78:	e001      	b.n	8010f7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010f7e:	69bb      	ldr	r3, [r7, #24]
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d110      	bne.n	8010fa6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010f8c:	9202      	str	r2, [sp, #8]
 8010f8e:	9301      	str	r3, [sp, #4]
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	6a3a      	ldr	r2, [r7, #32]
 8010f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f9a:	68f8      	ldr	r0, [r7, #12]
 8010f9c:	f001 fb4a 	bl	8012634 <xTaskCreateStatic>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	613b      	str	r3, [r7, #16]
 8010fa4:	e013      	b.n	8010fce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d110      	bne.n	8010fce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010fac:	6a3b      	ldr	r3, [r7, #32]
 8010fae:	b29a      	uxth	r2, r3
 8010fb0:	f107 0310 	add.w	r3, r7, #16
 8010fb4:	9301      	str	r3, [sp, #4]
 8010fb6:	69fb      	ldr	r3, [r7, #28]
 8010fb8:	9300      	str	r3, [sp, #0]
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f001 fb95 	bl	80126ee <xTaskCreate>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d001      	beq.n	8010fce <osThreadNew+0x11a>
            hTask = NULL;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010fce:	693b      	ldr	r3, [r7, #16]
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3728      	adds	r7, #40	; 0x28
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8010fd8:	b480      	push	{r7}
 8010fda:	b083      	sub	sp, #12
 8010fdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010fde:	f3ef 8305 	mrs	r3, IPSR
 8010fe2:	603b      	str	r3, [r7, #0]
  return(result);
 8010fe4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d003      	beq.n	8010ff2 <osThreadYield+0x1a>
    stat = osErrorISR;
 8010fea:	f06f 0305 	mvn.w	r3, #5
 8010fee:	607b      	str	r3, [r7, #4]
 8010ff0:	e009      	b.n	8011006 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8010ff6:	4b07      	ldr	r3, [pc, #28]	; (8011014 <osThreadYield+0x3c>)
 8010ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ffc:	601a      	str	r2, [r3, #0]
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8011006:	687b      	ldr	r3, [r7, #4]
}
 8011008:	4618      	mov	r0, r3
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr
 8011014:	e000ed04 	.word	0xe000ed04

08011018 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011020:	f3ef 8305 	mrs	r3, IPSR
 8011024:	60bb      	str	r3, [r7, #8]
  return(result);
 8011026:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011028:	2b00      	cmp	r3, #0
 801102a:	d003      	beq.n	8011034 <osDelay+0x1c>
    stat = osErrorISR;
 801102c:	f06f 0305 	mvn.w	r3, #5
 8011030:	60fb      	str	r3, [r7, #12]
 8011032:	e007      	b.n	8011044 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011034:	2300      	movs	r3, #0
 8011036:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d002      	beq.n	8011044 <osDelay+0x2c>
      vTaskDelay(ticks);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f001 fc9a 	bl	8012978 <vTaskDelay>
    }
  }

  return (stat);
 8011044:	68fb      	ldr	r3, [r7, #12]
}
 8011046:	4618      	mov	r0, r3
 8011048:	3710      	adds	r7, #16
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}

0801104e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801104e:	b580      	push	{r7, lr}
 8011050:	b086      	sub	sp, #24
 8011052:	af00      	add	r7, sp, #0
 8011054:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8011056:	2300      	movs	r3, #0
 8011058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801105a:	f3ef 8305 	mrs	r3, IPSR
 801105e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011060:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8011062:	2b00      	cmp	r3, #0
 8011064:	d12d      	bne.n	80110c2 <osEventFlagsNew+0x74>
    mem = -1;
 8011066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801106a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d015      	beq.n	801109e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	689b      	ldr	r3, [r3, #8]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d006      	beq.n	8011088 <osEventFlagsNew+0x3a>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	2b1f      	cmp	r3, #31
 8011080:	d902      	bls.n	8011088 <osEventFlagsNew+0x3a>
        mem = 1;
 8011082:	2301      	movs	r3, #1
 8011084:	613b      	str	r3, [r7, #16]
 8011086:	e00c      	b.n	80110a2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	689b      	ldr	r3, [r3, #8]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d108      	bne.n	80110a2 <osEventFlagsNew+0x54>
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d104      	bne.n	80110a2 <osEventFlagsNew+0x54>
          mem = 0;
 8011098:	2300      	movs	r3, #0
 801109a:	613b      	str	r3, [r7, #16]
 801109c:	e001      	b.n	80110a2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801109e:	2300      	movs	r3, #0
 80110a0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	d106      	bne.n	80110b6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f000 fa3d 	bl	801152c <xEventGroupCreateStatic>
 80110b2:	6178      	str	r0, [r7, #20]
 80110b4:	e005      	b.n	80110c2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d102      	bne.n	80110c2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80110bc:	f000 fa6d 	bl	801159a <xEventGroupCreate>
 80110c0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80110c2:	697b      	ldr	r3, [r7, #20]
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3718      	adds	r7, #24
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b086      	sub	sp, #24
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d004      	beq.n	80110ea <osEventFlagsSet+0x1e>
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d003      	beq.n	80110f2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80110ea:	f06f 0303 	mvn.w	r3, #3
 80110ee:	617b      	str	r3, [r7, #20]
 80110f0:	e028      	b.n	8011144 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110f2:	f3ef 8305 	mrs	r3, IPSR
 80110f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80110f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d01d      	beq.n	801113a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80110fe:	2300      	movs	r3, #0
 8011100:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8011102:	f107 0308 	add.w	r3, r7, #8
 8011106:	461a      	mov	r2, r3
 8011108:	6839      	ldr	r1, [r7, #0]
 801110a:	6938      	ldr	r0, [r7, #16]
 801110c:	f000 fbe8 	bl	80118e0 <xEventGroupSetBitsFromISR>
 8011110:	4603      	mov	r3, r0
 8011112:	2b00      	cmp	r3, #0
 8011114:	d103      	bne.n	801111e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8011116:	f06f 0302 	mvn.w	r3, #2
 801111a:	617b      	str	r3, [r7, #20]
 801111c:	e012      	b.n	8011144 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d00d      	beq.n	8011144 <osEventFlagsSet+0x78>
 8011128:	4b09      	ldr	r3, [pc, #36]	; (8011150 <osEventFlagsSet+0x84>)
 801112a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801112e:	601a      	str	r2, [r3, #0]
 8011130:	f3bf 8f4f 	dsb	sy
 8011134:	f3bf 8f6f 	isb	sy
 8011138:	e004      	b.n	8011144 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801113a:	6839      	ldr	r1, [r7, #0]
 801113c:	6938      	ldr	r0, [r7, #16]
 801113e:	f000 fb15 	bl	801176c <xEventGroupSetBits>
 8011142:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8011144:	697b      	ldr	r3, [r7, #20]
}
 8011146:	4618      	mov	r0, r3
 8011148:	3718      	adds	r7, #24
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	e000ed04 	.word	0xe000ed04

08011154 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8011154:	b580      	push	{r7, lr}
 8011156:	b08c      	sub	sp, #48	; 0x30
 8011158:	af02      	add	r7, sp, #8
 801115a:	60f8      	str	r0, [r7, #12]
 801115c:	60b9      	str	r1, [r7, #8]
 801115e:	607a      	str	r2, [r7, #4]
 8011160:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011166:	69bb      	ldr	r3, [r7, #24]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d004      	beq.n	8011176 <osEventFlagsWait+0x22>
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011172:	2b00      	cmp	r3, #0
 8011174:	d003      	beq.n	801117e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8011176:	f06f 0303 	mvn.w	r3, #3
 801117a:	61fb      	str	r3, [r7, #28]
 801117c:	e04b      	b.n	8011216 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801117e:	f3ef 8305 	mrs	r3, IPSR
 8011182:	617b      	str	r3, [r7, #20]
  return(result);
 8011184:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011186:	2b00      	cmp	r3, #0
 8011188:	d003      	beq.n	8011192 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801118a:	f06f 0305 	mvn.w	r3, #5
 801118e:	61fb      	str	r3, [r7, #28]
 8011190:	e041      	b.n	8011216 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f003 0301 	and.w	r3, r3, #1
 8011198:	2b00      	cmp	r3, #0
 801119a:	d002      	beq.n	80111a2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801119c:	2301      	movs	r3, #1
 801119e:	627b      	str	r3, [r7, #36]	; 0x24
 80111a0:	e001      	b.n	80111a6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80111a2:	2300      	movs	r3, #0
 80111a4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f003 0302 	and.w	r3, r3, #2
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d002      	beq.n	80111b6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80111b0:	2300      	movs	r3, #0
 80111b2:	623b      	str	r3, [r7, #32]
 80111b4:	e001      	b.n	80111ba <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80111b6:	2301      	movs	r3, #1
 80111b8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	9300      	str	r3, [sp, #0]
 80111be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c0:	6a3a      	ldr	r2, [r7, #32]
 80111c2:	68b9      	ldr	r1, [r7, #8]
 80111c4:	69b8      	ldr	r0, [r7, #24]
 80111c6:	f000 fa03 	bl	80115d0 <xEventGroupWaitBits>
 80111ca:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f003 0301 	and.w	r3, r3, #1
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d010      	beq.n	80111f8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80111d6:	68ba      	ldr	r2, [r7, #8]
 80111d8:	69fb      	ldr	r3, [r7, #28]
 80111da:	4013      	ands	r3, r2
 80111dc:	68ba      	ldr	r2, [r7, #8]
 80111de:	429a      	cmp	r2, r3
 80111e0:	d019      	beq.n	8011216 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d003      	beq.n	80111f0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80111e8:	f06f 0301 	mvn.w	r3, #1
 80111ec:	61fb      	str	r3, [r7, #28]
 80111ee:	e012      	b.n	8011216 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80111f0:	f06f 0302 	mvn.w	r3, #2
 80111f4:	61fb      	str	r3, [r7, #28]
 80111f6:	e00e      	b.n	8011216 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80111f8:	68ba      	ldr	r2, [r7, #8]
 80111fa:	69fb      	ldr	r3, [r7, #28]
 80111fc:	4013      	ands	r3, r2
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d109      	bne.n	8011216 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d003      	beq.n	8011210 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8011208:	f06f 0301 	mvn.w	r3, #1
 801120c:	61fb      	str	r3, [r7, #28]
 801120e:	e002      	b.n	8011216 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011210:	f06f 0302 	mvn.w	r3, #2
 8011214:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8011216:	69fb      	ldr	r3, [r7, #28]
}
 8011218:	4618      	mov	r0, r3
 801121a:	3728      	adds	r7, #40	; 0x28
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011220:	b580      	push	{r7, lr}
 8011222:	b08a      	sub	sp, #40	; 0x28
 8011224:	af02      	add	r7, sp, #8
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801122c:	2300      	movs	r3, #0
 801122e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011230:	f3ef 8305 	mrs	r3, IPSR
 8011234:	613b      	str	r3, [r7, #16]
  return(result);
 8011236:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011238:	2b00      	cmp	r3, #0
 801123a:	d15f      	bne.n	80112fc <osMessageQueueNew+0xdc>
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d05c      	beq.n	80112fc <osMessageQueueNew+0xdc>
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d059      	beq.n	80112fc <osMessageQueueNew+0xdc>
    mem = -1;
 8011248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801124c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d029      	beq.n	80112a8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	689b      	ldr	r3, [r3, #8]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d012      	beq.n	8011282 <osMessageQueueNew+0x62>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	68db      	ldr	r3, [r3, #12]
 8011260:	2b4f      	cmp	r3, #79	; 0x4f
 8011262:	d90e      	bls.n	8011282 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011268:	2b00      	cmp	r3, #0
 801126a:	d00a      	beq.n	8011282 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	695a      	ldr	r2, [r3, #20]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	68b9      	ldr	r1, [r7, #8]
 8011274:	fb01 f303 	mul.w	r3, r1, r3
 8011278:	429a      	cmp	r2, r3
 801127a:	d302      	bcc.n	8011282 <osMessageQueueNew+0x62>
        mem = 1;
 801127c:	2301      	movs	r3, #1
 801127e:	61bb      	str	r3, [r7, #24]
 8011280:	e014      	b.n	80112ac <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	689b      	ldr	r3, [r3, #8]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d110      	bne.n	80112ac <osMessageQueueNew+0x8c>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d10c      	bne.n	80112ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011296:	2b00      	cmp	r3, #0
 8011298:	d108      	bne.n	80112ac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	695b      	ldr	r3, [r3, #20]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d104      	bne.n	80112ac <osMessageQueueNew+0x8c>
          mem = 0;
 80112a2:	2300      	movs	r3, #0
 80112a4:	61bb      	str	r3, [r7, #24]
 80112a6:	e001      	b.n	80112ac <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80112a8:	2300      	movs	r3, #0
 80112aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80112ac:	69bb      	ldr	r3, [r7, #24]
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d10b      	bne.n	80112ca <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	691a      	ldr	r2, [r3, #16]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	689b      	ldr	r3, [r3, #8]
 80112ba:	2100      	movs	r1, #0
 80112bc:	9100      	str	r1, [sp, #0]
 80112be:	68b9      	ldr	r1, [r7, #8]
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	f000 fc3d 	bl	8011b40 <xQueueGenericCreateStatic>
 80112c6:	61f8      	str	r0, [r7, #28]
 80112c8:	e008      	b.n	80112dc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80112ca:	69bb      	ldr	r3, [r7, #24]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d105      	bne.n	80112dc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80112d0:	2200      	movs	r2, #0
 80112d2:	68b9      	ldr	r1, [r7, #8]
 80112d4:	68f8      	ldr	r0, [r7, #12]
 80112d6:	f000 fcab 	bl	8011c30 <xQueueGenericCreate>
 80112da:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00c      	beq.n	80112fc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d003      	beq.n	80112f0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	617b      	str	r3, [r7, #20]
 80112ee:	e001      	b.n	80112f4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80112f0:	2300      	movs	r3, #0
 80112f2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80112f4:	6979      	ldr	r1, [r7, #20]
 80112f6:	69f8      	ldr	r0, [r7, #28]
 80112f8:	f001 f93e 	bl	8012578 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80112fc:	69fb      	ldr	r3, [r7, #28]
}
 80112fe:	4618      	mov	r0, r3
 8011300:	3720      	adds	r7, #32
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
	...

08011308 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011308:	b580      	push	{r7, lr}
 801130a:	b088      	sub	sp, #32
 801130c:	af00      	add	r7, sp, #0
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	603b      	str	r3, [r7, #0]
 8011314:	4613      	mov	r3, r2
 8011316:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801131c:	2300      	movs	r3, #0
 801131e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011320:	f3ef 8305 	mrs	r3, IPSR
 8011324:	617b      	str	r3, [r7, #20]
  return(result);
 8011326:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011328:	2b00      	cmp	r3, #0
 801132a:	d028      	beq.n	801137e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801132c:	69bb      	ldr	r3, [r7, #24]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d005      	beq.n	801133e <osMessageQueuePut+0x36>
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d002      	beq.n	801133e <osMessageQueuePut+0x36>
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d003      	beq.n	8011346 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801133e:	f06f 0303 	mvn.w	r3, #3
 8011342:	61fb      	str	r3, [r7, #28]
 8011344:	e038      	b.n	80113b8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011346:	2300      	movs	r3, #0
 8011348:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801134a:	f107 0210 	add.w	r2, r7, #16
 801134e:	2300      	movs	r3, #0
 8011350:	68b9      	ldr	r1, [r7, #8]
 8011352:	69b8      	ldr	r0, [r7, #24]
 8011354:	f000 fdc8 	bl	8011ee8 <xQueueGenericSendFromISR>
 8011358:	4603      	mov	r3, r0
 801135a:	2b01      	cmp	r3, #1
 801135c:	d003      	beq.n	8011366 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801135e:	f06f 0302 	mvn.w	r3, #2
 8011362:	61fb      	str	r3, [r7, #28]
 8011364:	e028      	b.n	80113b8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d025      	beq.n	80113b8 <osMessageQueuePut+0xb0>
 801136c:	4b15      	ldr	r3, [pc, #84]	; (80113c4 <osMessageQueuePut+0xbc>)
 801136e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011372:	601a      	str	r2, [r3, #0]
 8011374:	f3bf 8f4f 	dsb	sy
 8011378:	f3bf 8f6f 	isb	sy
 801137c:	e01c      	b.n	80113b8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d002      	beq.n	801138a <osMessageQueuePut+0x82>
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d103      	bne.n	8011392 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801138a:	f06f 0303 	mvn.w	r3, #3
 801138e:	61fb      	str	r3, [r7, #28]
 8011390:	e012      	b.n	80113b8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011392:	2300      	movs	r3, #0
 8011394:	683a      	ldr	r2, [r7, #0]
 8011396:	68b9      	ldr	r1, [r7, #8]
 8011398:	69b8      	ldr	r0, [r7, #24]
 801139a:	f000 fca7 	bl	8011cec <xQueueGenericSend>
 801139e:	4603      	mov	r3, r0
 80113a0:	2b01      	cmp	r3, #1
 80113a2:	d009      	beq.n	80113b8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d003      	beq.n	80113b2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80113aa:	f06f 0301 	mvn.w	r3, #1
 80113ae:	61fb      	str	r3, [r7, #28]
 80113b0:	e002      	b.n	80113b8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80113b2:	f06f 0302 	mvn.w	r3, #2
 80113b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80113b8:	69fb      	ldr	r3, [r7, #28]
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3720      	adds	r7, #32
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	e000ed04 	.word	0xe000ed04

080113c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b088      	sub	sp, #32
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	607a      	str	r2, [r7, #4]
 80113d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80113da:	2300      	movs	r3, #0
 80113dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113de:	f3ef 8305 	mrs	r3, IPSR
 80113e2:	617b      	str	r3, [r7, #20]
  return(result);
 80113e4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d028      	beq.n	801143c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80113ea:	69bb      	ldr	r3, [r7, #24]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d005      	beq.n	80113fc <osMessageQueueGet+0x34>
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d002      	beq.n	80113fc <osMessageQueueGet+0x34>
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d003      	beq.n	8011404 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80113fc:	f06f 0303 	mvn.w	r3, #3
 8011400:	61fb      	str	r3, [r7, #28]
 8011402:	e037      	b.n	8011474 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011404:	2300      	movs	r3, #0
 8011406:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011408:	f107 0310 	add.w	r3, r7, #16
 801140c:	461a      	mov	r2, r3
 801140e:	68b9      	ldr	r1, [r7, #8]
 8011410:	69b8      	ldr	r0, [r7, #24]
 8011412:	f000 fee5 	bl	80121e0 <xQueueReceiveFromISR>
 8011416:	4603      	mov	r3, r0
 8011418:	2b01      	cmp	r3, #1
 801141a:	d003      	beq.n	8011424 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801141c:	f06f 0302 	mvn.w	r3, #2
 8011420:	61fb      	str	r3, [r7, #28]
 8011422:	e027      	b.n	8011474 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d024      	beq.n	8011474 <osMessageQueueGet+0xac>
 801142a:	4b15      	ldr	r3, [pc, #84]	; (8011480 <osMessageQueueGet+0xb8>)
 801142c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011430:	601a      	str	r2, [r3, #0]
 8011432:	f3bf 8f4f 	dsb	sy
 8011436:	f3bf 8f6f 	isb	sy
 801143a:	e01b      	b.n	8011474 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801143c:	69bb      	ldr	r3, [r7, #24]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d002      	beq.n	8011448 <osMessageQueueGet+0x80>
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d103      	bne.n	8011450 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011448:	f06f 0303 	mvn.w	r3, #3
 801144c:	61fb      	str	r3, [r7, #28]
 801144e:	e011      	b.n	8011474 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011450:	683a      	ldr	r2, [r7, #0]
 8011452:	68b9      	ldr	r1, [r7, #8]
 8011454:	69b8      	ldr	r0, [r7, #24]
 8011456:	f000 fde3 	bl	8012020 <xQueueReceive>
 801145a:	4603      	mov	r3, r0
 801145c:	2b01      	cmp	r3, #1
 801145e:	d009      	beq.n	8011474 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d003      	beq.n	801146e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011466:	f06f 0301 	mvn.w	r3, #1
 801146a:	61fb      	str	r3, [r7, #28]
 801146c:	e002      	b.n	8011474 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801146e:	f06f 0302 	mvn.w	r3, #2
 8011472:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011474:	69fb      	ldr	r3, [r7, #28]
}
 8011476:	4618      	mov	r0, r3
 8011478:	3720      	adds	r7, #32
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	e000ed04 	.word	0xe000ed04

08011484 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8011484:	b580      	push	{r7, lr}
 8011486:	b086      	sub	sp, #24
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d102      	bne.n	801149c <osMessageQueueGetCount+0x18>
    count = 0U;
 8011496:	2300      	movs	r3, #0
 8011498:	617b      	str	r3, [r7, #20]
 801149a:	e00e      	b.n	80114ba <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801149c:	f3ef 8305 	mrs	r3, IPSR
 80114a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80114a2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d004      	beq.n	80114b2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80114a8:	6938      	ldr	r0, [r7, #16]
 80114aa:	f000 ff37 	bl	801231c <uxQueueMessagesWaitingFromISR>
 80114ae:	6178      	str	r0, [r7, #20]
 80114b0:	e003      	b.n	80114ba <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80114b2:	6938      	ldr	r0, [r7, #16]
 80114b4:	f000 ff14 	bl	80122e0 <uxQueueMessagesWaiting>
 80114b8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80114ba:	697b      	ldr	r3, [r7, #20]
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3718      	adds	r7, #24
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80114c4:	b480      	push	{r7}
 80114c6:	b085      	sub	sp, #20
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	60b9      	str	r1, [r7, #8]
 80114ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	4a07      	ldr	r2, [pc, #28]	; (80114f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80114d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	4a06      	ldr	r2, [pc, #24]	; (80114f4 <vApplicationGetIdleTaskMemory+0x30>)
 80114da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2280      	movs	r2, #128	; 0x80
 80114e0:	601a      	str	r2, [r3, #0]
}
 80114e2:	bf00      	nop
 80114e4:	3714      	adds	r7, #20
 80114e6:	46bd      	mov	sp, r7
 80114e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ec:	4770      	bx	lr
 80114ee:	bf00      	nop
 80114f0:	24000780 	.word	0x24000780
 80114f4:	240007dc 	.word	0x240007dc

080114f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80114f8:	b480      	push	{r7}
 80114fa:	b085      	sub	sp, #20
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	60f8      	str	r0, [r7, #12]
 8011500:	60b9      	str	r1, [r7, #8]
 8011502:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	4a07      	ldr	r2, [pc, #28]	; (8011524 <vApplicationGetTimerTaskMemory+0x2c>)
 8011508:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	4a06      	ldr	r2, [pc, #24]	; (8011528 <vApplicationGetTimerTaskMemory+0x30>)
 801150e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011516:	601a      	str	r2, [r3, #0]
}
 8011518:	bf00      	nop
 801151a:	3714      	adds	r7, #20
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr
 8011524:	240009dc 	.word	0x240009dc
 8011528:	24000a38 	.word	0x24000a38

0801152c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801152c:	b580      	push	{r7, lr}
 801152e:	b086      	sub	sp, #24
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d10a      	bne.n	8011550 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153e:	f383 8811 	msr	BASEPRI, r3
 8011542:	f3bf 8f6f 	isb	sy
 8011546:	f3bf 8f4f 	dsb	sy
 801154a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801154c:	bf00      	nop
 801154e:	e7fe      	b.n	801154e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8011550:	2320      	movs	r3, #32
 8011552:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	2b20      	cmp	r3, #32
 8011558:	d00a      	beq.n	8011570 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801155a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801155e:	f383 8811 	msr	BASEPRI, r3
 8011562:	f3bf 8f6f 	isb	sy
 8011566:	f3bf 8f4f 	dsb	sy
 801156a:	60fb      	str	r3, [r7, #12]
}
 801156c:	bf00      	nop
 801156e:	e7fe      	b.n	801156e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d00a      	beq.n	8011590 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	2200      	movs	r2, #0
 801157e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	3304      	adds	r3, #4
 8011584:	4618      	mov	r0, r3
 8011586:	f000 f9bf 	bl	8011908 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	2201      	movs	r2, #1
 801158e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011590:	697b      	ldr	r3, [r7, #20]
	}
 8011592:	4618      	mov	r0, r3
 8011594:	3718      	adds	r7, #24
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}

0801159a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801159a:	b580      	push	{r7, lr}
 801159c:	b082      	sub	sp, #8
 801159e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80115a0:	2020      	movs	r0, #32
 80115a2:	f002 fdb9 	bl	8014118 <pvPortMalloc>
 80115a6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d00a      	beq.n	80115c4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2200      	movs	r2, #0
 80115b2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	3304      	adds	r3, #4
 80115b8:	4618      	mov	r0, r3
 80115ba:	f000 f9a5 	bl	8011908 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2200      	movs	r2, #0
 80115c2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80115c4:	687b      	ldr	r3, [r7, #4]
	}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
	...

080115d0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b090      	sub	sp, #64	; 0x40
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	607a      	str	r2, [r7, #4]
 80115dc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80115e2:	2300      	movs	r3, #0
 80115e4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80115e6:	2300      	movs	r3, #0
 80115e8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d10a      	bne.n	8011606 <xEventGroupWaitBits+0x36>
	__asm volatile
 80115f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f4:	f383 8811 	msr	BASEPRI, r3
 80115f8:	f3bf 8f6f 	isb	sy
 80115fc:	f3bf 8f4f 	dsb	sy
 8011600:	623b      	str	r3, [r7, #32]
}
 8011602:	bf00      	nop
 8011604:	e7fe      	b.n	8011604 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801160c:	2b00      	cmp	r3, #0
 801160e:	d00a      	beq.n	8011626 <xEventGroupWaitBits+0x56>
	__asm volatile
 8011610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011614:	f383 8811 	msr	BASEPRI, r3
 8011618:	f3bf 8f6f 	isb	sy
 801161c:	f3bf 8f4f 	dsb	sy
 8011620:	61fb      	str	r3, [r7, #28]
}
 8011622:	bf00      	nop
 8011624:	e7fe      	b.n	8011624 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d10a      	bne.n	8011642 <xEventGroupWaitBits+0x72>
	__asm volatile
 801162c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011630:	f383 8811 	msr	BASEPRI, r3
 8011634:	f3bf 8f6f 	isb	sy
 8011638:	f3bf 8f4f 	dsb	sy
 801163c:	61bb      	str	r3, [r7, #24]
}
 801163e:	bf00      	nop
 8011640:	e7fe      	b.n	8011640 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011642:	f001 feb3 	bl	80133ac <xTaskGetSchedulerState>
 8011646:	4603      	mov	r3, r0
 8011648:	2b00      	cmp	r3, #0
 801164a:	d102      	bne.n	8011652 <xEventGroupWaitBits+0x82>
 801164c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801164e:	2b00      	cmp	r3, #0
 8011650:	d101      	bne.n	8011656 <xEventGroupWaitBits+0x86>
 8011652:	2301      	movs	r3, #1
 8011654:	e000      	b.n	8011658 <xEventGroupWaitBits+0x88>
 8011656:	2300      	movs	r3, #0
 8011658:	2b00      	cmp	r3, #0
 801165a:	d10a      	bne.n	8011672 <xEventGroupWaitBits+0xa2>
	__asm volatile
 801165c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011660:	f383 8811 	msr	BASEPRI, r3
 8011664:	f3bf 8f6f 	isb	sy
 8011668:	f3bf 8f4f 	dsb	sy
 801166c:	617b      	str	r3, [r7, #20]
}
 801166e:	bf00      	nop
 8011670:	e7fe      	b.n	8011670 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011672:	f001 fa1b 	bl	8012aac <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801167c:	683a      	ldr	r2, [r7, #0]
 801167e:	68b9      	ldr	r1, [r7, #8]
 8011680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011682:	f000 f90b 	bl	801189c <prvTestWaitCondition>
 8011686:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801168a:	2b00      	cmp	r3, #0
 801168c:	d00e      	beq.n	80116ac <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011690:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011692:	2300      	movs	r3, #0
 8011694:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d028      	beq.n	80116ee <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801169c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801169e:	681a      	ldr	r2, [r3, #0]
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	43db      	mvns	r3, r3
 80116a4:	401a      	ands	r2, r3
 80116a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a8:	601a      	str	r2, [r3, #0]
 80116aa:	e020      	b.n	80116ee <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80116ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d104      	bne.n	80116bc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80116b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80116b6:	2301      	movs	r3, #1
 80116b8:	633b      	str	r3, [r7, #48]	; 0x30
 80116ba:	e018      	b.n	80116ee <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d003      	beq.n	80116ca <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80116c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80116c8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d003      	beq.n	80116d8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80116d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80116d6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80116d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116da:	1d18      	adds	r0, r3, #4
 80116dc:	68ba      	ldr	r2, [r7, #8]
 80116de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e0:	4313      	orrs	r3, r2
 80116e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116e4:	4619      	mov	r1, r3
 80116e6:	f001 fbd9 	bl	8012e9c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80116ea:	2300      	movs	r3, #0
 80116ec:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80116ee:	f001 f9eb 	bl	8012ac8 <xTaskResumeAll>
 80116f2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80116f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d031      	beq.n	801175e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80116fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d107      	bne.n	8011710 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011700:	4b19      	ldr	r3, [pc, #100]	; (8011768 <xEventGroupWaitBits+0x198>)
 8011702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011706:	601a      	str	r2, [r3, #0]
 8011708:	f3bf 8f4f 	dsb	sy
 801170c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011710:	f001 fed8 	bl	80134c4 <uxTaskResetEventItemValue>
 8011714:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801171c:	2b00      	cmp	r3, #0
 801171e:	d11a      	bne.n	8011756 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011720:	f002 fbd8 	bl	8013ed4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801172a:	683a      	ldr	r2, [r7, #0]
 801172c:	68b9      	ldr	r1, [r7, #8]
 801172e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011730:	f000 f8b4 	bl	801189c <prvTestWaitCondition>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d009      	beq.n	801174e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d006      	beq.n	801174e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	43db      	mvns	r3, r3
 8011748:	401a      	ands	r2, r3
 801174a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801174c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801174e:	2301      	movs	r3, #1
 8011750:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011752:	f002 fbef 	bl	8013f34 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011758:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801175c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801175e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011760:	4618      	mov	r0, r3
 8011762:	3740      	adds	r7, #64	; 0x40
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	e000ed04 	.word	0xe000ed04

0801176c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b08e      	sub	sp, #56	; 0x38
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011776:	2300      	movs	r3, #0
 8011778:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801177e:	2300      	movs	r3, #0
 8011780:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d10a      	bne.n	801179e <xEventGroupSetBits+0x32>
	__asm volatile
 8011788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801178c:	f383 8811 	msr	BASEPRI, r3
 8011790:	f3bf 8f6f 	isb	sy
 8011794:	f3bf 8f4f 	dsb	sy
 8011798:	613b      	str	r3, [r7, #16]
}
 801179a:	bf00      	nop
 801179c:	e7fe      	b.n	801179c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d00a      	beq.n	80117be <xEventGroupSetBits+0x52>
	__asm volatile
 80117a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ac:	f383 8811 	msr	BASEPRI, r3
 80117b0:	f3bf 8f6f 	isb	sy
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	60fb      	str	r3, [r7, #12]
}
 80117ba:	bf00      	nop
 80117bc:	e7fe      	b.n	80117bc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80117be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c0:	3304      	adds	r3, #4
 80117c2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c6:	3308      	adds	r3, #8
 80117c8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80117ca:	f001 f96f 	bl	8012aac <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80117ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80117d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	431a      	orrs	r2, r3
 80117dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117de:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80117e0:	e03c      	b.n	801185c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80117e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80117e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80117ee:	2300      	movs	r3, #0
 80117f0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80117f8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011800:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011808:	2b00      	cmp	r3, #0
 801180a:	d108      	bne.n	801181e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801180c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801180e:	681a      	ldr	r2, [r3, #0]
 8011810:	69bb      	ldr	r3, [r7, #24]
 8011812:	4013      	ands	r3, r2
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00b      	beq.n	8011830 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011818:	2301      	movs	r3, #1
 801181a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801181c:	e008      	b.n	8011830 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	69bb      	ldr	r3, [r7, #24]
 8011824:	4013      	ands	r3, r2
 8011826:	69ba      	ldr	r2, [r7, #24]
 8011828:	429a      	cmp	r2, r3
 801182a:	d101      	bne.n	8011830 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801182c:	2301      	movs	r3, #1
 801182e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011832:	2b00      	cmp	r3, #0
 8011834:	d010      	beq.n	8011858 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801183c:	2b00      	cmp	r3, #0
 801183e:	d003      	beq.n	8011848 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011842:	69bb      	ldr	r3, [r7, #24]
 8011844:	4313      	orrs	r3, r2
 8011846:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011850:	4619      	mov	r1, r3
 8011852:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011854:	f001 fbee 	bl	8013034 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801185c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801185e:	6a3b      	ldr	r3, [r7, #32]
 8011860:	429a      	cmp	r2, r3
 8011862:	d1be      	bne.n	80117e2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011866:	681a      	ldr	r2, [r3, #0]
 8011868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801186a:	43db      	mvns	r3, r3
 801186c:	401a      	ands	r2, r3
 801186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011870:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011872:	f001 f929 	bl	8012ac8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011878:	681b      	ldr	r3, [r3, #0]
}
 801187a:	4618      	mov	r0, r3
 801187c:	3738      	adds	r7, #56	; 0x38
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b082      	sub	sp, #8
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801188c:	6839      	ldr	r1, [r7, #0]
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f7ff ff6c 	bl	801176c <xEventGroupSetBits>
}
 8011894:	bf00      	nop
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801189c:	b480      	push	{r7}
 801189e:	b087      	sub	sp, #28
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80118a8:	2300      	movs	r3, #0
 80118aa:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d107      	bne.n	80118c2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	4013      	ands	r3, r2
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d00a      	beq.n	80118d2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80118bc:	2301      	movs	r3, #1
 80118be:	617b      	str	r3, [r7, #20]
 80118c0:	e007      	b.n	80118d2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	4013      	ands	r3, r2
 80118c8:	68ba      	ldr	r2, [r7, #8]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d101      	bne.n	80118d2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80118ce:	2301      	movs	r3, #1
 80118d0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80118d2:	697b      	ldr	r3, [r7, #20]
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	371c      	adds	r7, #28
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b086      	sub	sp, #24
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	60b9      	str	r1, [r7, #8]
 80118ea:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	68ba      	ldr	r2, [r7, #8]
 80118f0:	68f9      	ldr	r1, [r7, #12]
 80118f2:	4804      	ldr	r0, [pc, #16]	; (8011904 <xEventGroupSetBitsFromISR+0x24>)
 80118f4:	f002 f9a0 	bl	8013c38 <xTimerPendFunctionCallFromISR>
 80118f8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80118fa:	697b      	ldr	r3, [r7, #20]
	}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3718      	adds	r7, #24
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	08011883 	.word	0x08011883

08011908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011908:	b480      	push	{r7}
 801190a:	b083      	sub	sp, #12
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f103 0208 	add.w	r2, r3, #8
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f103 0208 	add.w	r2, r3, #8
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f103 0208 	add.w	r2, r3, #8
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2200      	movs	r2, #0
 801193a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801193c:	bf00      	nop
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2200      	movs	r2, #0
 8011954:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011956:	bf00      	nop
 8011958:	370c      	adds	r7, #12
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr

08011962 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011962:	b480      	push	{r7}
 8011964:	b085      	sub	sp, #20
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
 801196a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	68fa      	ldr	r2, [r7, #12]
 8011976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	689a      	ldr	r2, [r3, #8]
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	689b      	ldr	r3, [r3, #8]
 8011984:	683a      	ldr	r2, [r7, #0]
 8011986:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	683a      	ldr	r2, [r7, #0]
 801198c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	1c5a      	adds	r2, r3, #1
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	601a      	str	r2, [r3, #0]
}
 801199e:	bf00      	nop
 80119a0:	3714      	adds	r7, #20
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr

080119aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80119aa:	b480      	push	{r7}
 80119ac:	b085      	sub	sp, #20
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]
 80119b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119c0:	d103      	bne.n	80119ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	691b      	ldr	r3, [r3, #16]
 80119c6:	60fb      	str	r3, [r7, #12]
 80119c8:	e00c      	b.n	80119e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	3308      	adds	r3, #8
 80119ce:	60fb      	str	r3, [r7, #12]
 80119d0:	e002      	b.n	80119d8 <vListInsert+0x2e>
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	60fb      	str	r3, [r7, #12]
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	68ba      	ldr	r2, [r7, #8]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d2f6      	bcs.n	80119d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	685a      	ldr	r2, [r3, #4]
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	683a      	ldr	r2, [r7, #0]
 80119f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	68fa      	ldr	r2, [r7, #12]
 80119f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	683a      	ldr	r2, [r7, #0]
 80119fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	1c5a      	adds	r2, r3, #1
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	601a      	str	r2, [r3, #0]
}
 8011a10:	bf00      	nop
 8011a12:	3714      	adds	r7, #20
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr

08011a1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b085      	sub	sp, #20
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	691b      	ldr	r3, [r3, #16]
 8011a28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	6892      	ldr	r2, [r2, #8]
 8011a32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	689b      	ldr	r3, [r3, #8]
 8011a38:	687a      	ldr	r2, [r7, #4]
 8011a3a:	6852      	ldr	r2, [r2, #4]
 8011a3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d103      	bne.n	8011a50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	689a      	ldr	r2, [r3, #8]
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2200      	movs	r2, #0
 8011a54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	1e5a      	subs	r2, r3, #1
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	681b      	ldr	r3, [r3, #0]
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3714      	adds	r7, #20
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr

08011a70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b084      	sub	sp, #16
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d10a      	bne.n	8011a9a <xQueueGenericReset+0x2a>
	__asm volatile
 8011a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a88:	f383 8811 	msr	BASEPRI, r3
 8011a8c:	f3bf 8f6f 	isb	sy
 8011a90:	f3bf 8f4f 	dsb	sy
 8011a94:	60bb      	str	r3, [r7, #8]
}
 8011a96:	bf00      	nop
 8011a98:	e7fe      	b.n	8011a98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011a9a:	f002 fa1b 	bl	8013ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011aa6:	68f9      	ldr	r1, [r7, #12]
 8011aa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011aaa:	fb01 f303 	mul.w	r3, r1, r3
 8011aae:	441a      	add	r2, r3
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011aca:	3b01      	subs	r3, #1
 8011acc:	68f9      	ldr	r1, [r7, #12]
 8011ace:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011ad0:	fb01 f303 	mul.w	r3, r1, r3
 8011ad4:	441a      	add	r2, r3
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	22ff      	movs	r2, #255	; 0xff
 8011ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	22ff      	movs	r2, #255	; 0xff
 8011ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d114      	bne.n	8011b1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	691b      	ldr	r3, [r3, #16]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d01a      	beq.n	8011b2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	3310      	adds	r3, #16
 8011afc:	4618      	mov	r0, r3
 8011afe:	f001 fa35 	bl	8012f6c <xTaskRemoveFromEventList>
 8011b02:	4603      	mov	r3, r0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d012      	beq.n	8011b2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011b08:	4b0c      	ldr	r3, [pc, #48]	; (8011b3c <xQueueGenericReset+0xcc>)
 8011b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b0e:	601a      	str	r2, [r3, #0]
 8011b10:	f3bf 8f4f 	dsb	sy
 8011b14:	f3bf 8f6f 	isb	sy
 8011b18:	e009      	b.n	8011b2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	3310      	adds	r3, #16
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7ff fef2 	bl	8011908 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	3324      	adds	r3, #36	; 0x24
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7ff feed 	bl	8011908 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011b2e:	f002 fa01 	bl	8013f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011b32:	2301      	movs	r3, #1
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3710      	adds	r7, #16
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	e000ed04 	.word	0xe000ed04

08011b40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b08e      	sub	sp, #56	; 0x38
 8011b44:	af02      	add	r7, sp, #8
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	60b9      	str	r1, [r7, #8]
 8011b4a:	607a      	str	r2, [r7, #4]
 8011b4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d10a      	bne.n	8011b6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b58:	f383 8811 	msr	BASEPRI, r3
 8011b5c:	f3bf 8f6f 	isb	sy
 8011b60:	f3bf 8f4f 	dsb	sy
 8011b64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011b66:	bf00      	nop
 8011b68:	e7fe      	b.n	8011b68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d10a      	bne.n	8011b86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b74:	f383 8811 	msr	BASEPRI, r3
 8011b78:	f3bf 8f6f 	isb	sy
 8011b7c:	f3bf 8f4f 	dsb	sy
 8011b80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011b82:	bf00      	nop
 8011b84:	e7fe      	b.n	8011b84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d002      	beq.n	8011b92 <xQueueGenericCreateStatic+0x52>
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d001      	beq.n	8011b96 <xQueueGenericCreateStatic+0x56>
 8011b92:	2301      	movs	r3, #1
 8011b94:	e000      	b.n	8011b98 <xQueueGenericCreateStatic+0x58>
 8011b96:	2300      	movs	r3, #0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d10a      	bne.n	8011bb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ba0:	f383 8811 	msr	BASEPRI, r3
 8011ba4:	f3bf 8f6f 	isb	sy
 8011ba8:	f3bf 8f4f 	dsb	sy
 8011bac:	623b      	str	r3, [r7, #32]
}
 8011bae:	bf00      	nop
 8011bb0:	e7fe      	b.n	8011bb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d102      	bne.n	8011bbe <xQueueGenericCreateStatic+0x7e>
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d101      	bne.n	8011bc2 <xQueueGenericCreateStatic+0x82>
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	e000      	b.n	8011bc4 <xQueueGenericCreateStatic+0x84>
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d10a      	bne.n	8011bde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bcc:	f383 8811 	msr	BASEPRI, r3
 8011bd0:	f3bf 8f6f 	isb	sy
 8011bd4:	f3bf 8f4f 	dsb	sy
 8011bd8:	61fb      	str	r3, [r7, #28]
}
 8011bda:	bf00      	nop
 8011bdc:	e7fe      	b.n	8011bdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011bde:	2350      	movs	r3, #80	; 0x50
 8011be0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	2b50      	cmp	r3, #80	; 0x50
 8011be6:	d00a      	beq.n	8011bfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bec:	f383 8811 	msr	BASEPRI, r3
 8011bf0:	f3bf 8f6f 	isb	sy
 8011bf4:	f3bf 8f4f 	dsb	sy
 8011bf8:	61bb      	str	r3, [r7, #24]
}
 8011bfa:	bf00      	nop
 8011bfc:	e7fe      	b.n	8011bfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011bfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d00d      	beq.n	8011c26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011c12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c18:	9300      	str	r3, [sp, #0]
 8011c1a:	4613      	mov	r3, r2
 8011c1c:	687a      	ldr	r2, [r7, #4]
 8011c1e:	68b9      	ldr	r1, [r7, #8]
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f000 f83f 	bl	8011ca4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3730      	adds	r7, #48	; 0x30
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b08a      	sub	sp, #40	; 0x28
 8011c34:	af02      	add	r7, sp, #8
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	60b9      	str	r1, [r7, #8]
 8011c3a:	4613      	mov	r3, r2
 8011c3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d10a      	bne.n	8011c5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8011c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c48:	f383 8811 	msr	BASEPRI, r3
 8011c4c:	f3bf 8f6f 	isb	sy
 8011c50:	f3bf 8f4f 	dsb	sy
 8011c54:	613b      	str	r3, [r7, #16]
}
 8011c56:	bf00      	nop
 8011c58:	e7fe      	b.n	8011c58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	68ba      	ldr	r2, [r7, #8]
 8011c5e:	fb02 f303 	mul.w	r3, r2, r3
 8011c62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011c64:	69fb      	ldr	r3, [r7, #28]
 8011c66:	3350      	adds	r3, #80	; 0x50
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f002 fa55 	bl	8014118 <pvPortMalloc>
 8011c6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011c70:	69bb      	ldr	r3, [r7, #24]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d011      	beq.n	8011c9a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011c76:	69bb      	ldr	r3, [r7, #24]
 8011c78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	3350      	adds	r3, #80	; 0x50
 8011c7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011c80:	69bb      	ldr	r3, [r7, #24]
 8011c82:	2200      	movs	r2, #0
 8011c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011c88:	79fa      	ldrb	r2, [r7, #7]
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	9300      	str	r3, [sp, #0]
 8011c8e:	4613      	mov	r3, r2
 8011c90:	697a      	ldr	r2, [r7, #20]
 8011c92:	68b9      	ldr	r1, [r7, #8]
 8011c94:	68f8      	ldr	r0, [r7, #12]
 8011c96:	f000 f805 	bl	8011ca4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011c9a:	69bb      	ldr	r3, [r7, #24]
	}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3720      	adds	r7, #32
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b084      	sub	sp, #16
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	60f8      	str	r0, [r7, #12]
 8011cac:	60b9      	str	r1, [r7, #8]
 8011cae:	607a      	str	r2, [r7, #4]
 8011cb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d103      	bne.n	8011cc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	69ba      	ldr	r2, [r7, #24]
 8011cbc:	601a      	str	r2, [r3, #0]
 8011cbe:	e002      	b.n	8011cc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	68ba      	ldr	r2, [r7, #8]
 8011cd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011cd2:	2101      	movs	r1, #1
 8011cd4:	69b8      	ldr	r0, [r7, #24]
 8011cd6:	f7ff fecb 	bl	8011a70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	78fa      	ldrb	r2, [r7, #3]
 8011cde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011ce2:	bf00      	nop
 8011ce4:	3710      	adds	r7, #16
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
	...

08011cec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b08e      	sub	sp, #56	; 0x38
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	607a      	str	r2, [r7, #4]
 8011cf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d10a      	bne.n	8011d1e <xQueueGenericSend+0x32>
	__asm volatile
 8011d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011d1a:	bf00      	nop
 8011d1c:	e7fe      	b.n	8011d1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d103      	bne.n	8011d2c <xQueueGenericSend+0x40>
 8011d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d101      	bne.n	8011d30 <xQueueGenericSend+0x44>
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	e000      	b.n	8011d32 <xQueueGenericSend+0x46>
 8011d30:	2300      	movs	r3, #0
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d10a      	bne.n	8011d4c <xQueueGenericSend+0x60>
	__asm volatile
 8011d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d3a:	f383 8811 	msr	BASEPRI, r3
 8011d3e:	f3bf 8f6f 	isb	sy
 8011d42:	f3bf 8f4f 	dsb	sy
 8011d46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011d48:	bf00      	nop
 8011d4a:	e7fe      	b.n	8011d4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	2b02      	cmp	r3, #2
 8011d50:	d103      	bne.n	8011d5a <xQueueGenericSend+0x6e>
 8011d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d101      	bne.n	8011d5e <xQueueGenericSend+0x72>
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e000      	b.n	8011d60 <xQueueGenericSend+0x74>
 8011d5e:	2300      	movs	r3, #0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10a      	bne.n	8011d7a <xQueueGenericSend+0x8e>
	__asm volatile
 8011d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d68:	f383 8811 	msr	BASEPRI, r3
 8011d6c:	f3bf 8f6f 	isb	sy
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	623b      	str	r3, [r7, #32]
}
 8011d76:	bf00      	nop
 8011d78:	e7fe      	b.n	8011d78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d7a:	f001 fb17 	bl	80133ac <xTaskGetSchedulerState>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d102      	bne.n	8011d8a <xQueueGenericSend+0x9e>
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d101      	bne.n	8011d8e <xQueueGenericSend+0xa2>
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	e000      	b.n	8011d90 <xQueueGenericSend+0xa4>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d10a      	bne.n	8011daa <xQueueGenericSend+0xbe>
	__asm volatile
 8011d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d98:	f383 8811 	msr	BASEPRI, r3
 8011d9c:	f3bf 8f6f 	isb	sy
 8011da0:	f3bf 8f4f 	dsb	sy
 8011da4:	61fb      	str	r3, [r7, #28]
}
 8011da6:	bf00      	nop
 8011da8:	e7fe      	b.n	8011da8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011daa:	f002 f893 	bl	8013ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d302      	bcc.n	8011dc0 <xQueueGenericSend+0xd4>
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	2b02      	cmp	r3, #2
 8011dbe:	d129      	bne.n	8011e14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011dc0:	683a      	ldr	r2, [r7, #0]
 8011dc2:	68b9      	ldr	r1, [r7, #8]
 8011dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dc6:	f000 fac7 	bl	8012358 <prvCopyDataToQueue>
 8011dca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d010      	beq.n	8011df6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd6:	3324      	adds	r3, #36	; 0x24
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f001 f8c7 	bl	8012f6c <xTaskRemoveFromEventList>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d013      	beq.n	8011e0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011de4:	4b3f      	ldr	r3, [pc, #252]	; (8011ee4 <xQueueGenericSend+0x1f8>)
 8011de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dea:	601a      	str	r2, [r3, #0]
 8011dec:	f3bf 8f4f 	dsb	sy
 8011df0:	f3bf 8f6f 	isb	sy
 8011df4:	e00a      	b.n	8011e0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d007      	beq.n	8011e0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011dfc:	4b39      	ldr	r3, [pc, #228]	; (8011ee4 <xQueueGenericSend+0x1f8>)
 8011dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	f3bf 8f4f 	dsb	sy
 8011e08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011e0c:	f002 f892 	bl	8013f34 <vPortExitCritical>
				return pdPASS;
 8011e10:	2301      	movs	r3, #1
 8011e12:	e063      	b.n	8011edc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d103      	bne.n	8011e22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e1a:	f002 f88b 	bl	8013f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	e05c      	b.n	8011edc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d106      	bne.n	8011e36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e28:	f107 0314 	add.w	r3, r7, #20
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f001 f963 	bl	80130f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e32:	2301      	movs	r3, #1
 8011e34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e36:	f002 f87d 	bl	8013f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e3a:	f000 fe37 	bl	8012aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e3e:	f002 f849 	bl	8013ed4 <vPortEnterCritical>
 8011e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e48:	b25b      	sxtb	r3, r3
 8011e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e4e:	d103      	bne.n	8011e58 <xQueueGenericSend+0x16c>
 8011e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e52:	2200      	movs	r2, #0
 8011e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e5e:	b25b      	sxtb	r3, r3
 8011e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e64:	d103      	bne.n	8011e6e <xQueueGenericSend+0x182>
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	2200      	movs	r2, #0
 8011e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e6e:	f002 f861 	bl	8013f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e72:	1d3a      	adds	r2, r7, #4
 8011e74:	f107 0314 	add.w	r3, r7, #20
 8011e78:	4611      	mov	r1, r2
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f001 f952 	bl	8013124 <xTaskCheckForTimeOut>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d124      	bne.n	8011ed0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e88:	f000 fb5e 	bl	8012548 <prvIsQueueFull>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d018      	beq.n	8011ec4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e94:	3310      	adds	r3, #16
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	4611      	mov	r1, r2
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f000 ffda 	bl	8012e54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ea2:	f000 fae9 	bl	8012478 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011ea6:	f000 fe0f 	bl	8012ac8 <xTaskResumeAll>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	f47f af7c 	bne.w	8011daa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011eb2:	4b0c      	ldr	r3, [pc, #48]	; (8011ee4 <xQueueGenericSend+0x1f8>)
 8011eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eb8:	601a      	str	r2, [r3, #0]
 8011eba:	f3bf 8f4f 	dsb	sy
 8011ebe:	f3bf 8f6f 	isb	sy
 8011ec2:	e772      	b.n	8011daa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ec6:	f000 fad7 	bl	8012478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011eca:	f000 fdfd 	bl	8012ac8 <xTaskResumeAll>
 8011ece:	e76c      	b.n	8011daa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ed2:	f000 fad1 	bl	8012478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ed6:	f000 fdf7 	bl	8012ac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011eda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3738      	adds	r7, #56	; 0x38
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	e000ed04 	.word	0xe000ed04

08011ee8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b090      	sub	sp, #64	; 0x40
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	60f8      	str	r0, [r7, #12]
 8011ef0:	60b9      	str	r1, [r7, #8]
 8011ef2:	607a      	str	r2, [r7, #4]
 8011ef4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d10a      	bne.n	8011f16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f04:	f383 8811 	msr	BASEPRI, r3
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011f12:	bf00      	nop
 8011f14:	e7fe      	b.n	8011f14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d103      	bne.n	8011f24 <xQueueGenericSendFromISR+0x3c>
 8011f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d101      	bne.n	8011f28 <xQueueGenericSendFromISR+0x40>
 8011f24:	2301      	movs	r3, #1
 8011f26:	e000      	b.n	8011f2a <xQueueGenericSendFromISR+0x42>
 8011f28:	2300      	movs	r3, #0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d10a      	bne.n	8011f44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f32:	f383 8811 	msr	BASEPRI, r3
 8011f36:	f3bf 8f6f 	isb	sy
 8011f3a:	f3bf 8f4f 	dsb	sy
 8011f3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011f40:	bf00      	nop
 8011f42:	e7fe      	b.n	8011f42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	2b02      	cmp	r3, #2
 8011f48:	d103      	bne.n	8011f52 <xQueueGenericSendFromISR+0x6a>
 8011f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d101      	bne.n	8011f56 <xQueueGenericSendFromISR+0x6e>
 8011f52:	2301      	movs	r3, #1
 8011f54:	e000      	b.n	8011f58 <xQueueGenericSendFromISR+0x70>
 8011f56:	2300      	movs	r3, #0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d10a      	bne.n	8011f72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f60:	f383 8811 	msr	BASEPRI, r3
 8011f64:	f3bf 8f6f 	isb	sy
 8011f68:	f3bf 8f4f 	dsb	sy
 8011f6c:	623b      	str	r3, [r7, #32]
}
 8011f6e:	bf00      	nop
 8011f70:	e7fe      	b.n	8011f70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f72:	f002 f891 	bl	8014098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011f76:	f3ef 8211 	mrs	r2, BASEPRI
 8011f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7e:	f383 8811 	msr	BASEPRI, r3
 8011f82:	f3bf 8f6f 	isb	sy
 8011f86:	f3bf 8f4f 	dsb	sy
 8011f8a:	61fa      	str	r2, [r7, #28]
 8011f8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011f8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d302      	bcc.n	8011fa4 <xQueueGenericSendFromISR+0xbc>
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	2b02      	cmp	r3, #2
 8011fa2:	d12f      	bne.n	8012004 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011fb4:	683a      	ldr	r2, [r7, #0]
 8011fb6:	68b9      	ldr	r1, [r7, #8]
 8011fb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011fba:	f000 f9cd 	bl	8012358 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011fbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fc6:	d112      	bne.n	8011fee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d016      	beq.n	8011ffe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd2:	3324      	adds	r3, #36	; 0x24
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f000 ffc9 	bl	8012f6c <xTaskRemoveFromEventList>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d00e      	beq.n	8011ffe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d00b      	beq.n	8011ffe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2201      	movs	r2, #1
 8011fea:	601a      	str	r2, [r3, #0]
 8011fec:	e007      	b.n	8011ffe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011fee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	b25a      	sxtb	r2, r3
 8011ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011ffe:	2301      	movs	r3, #1
 8012000:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012002:	e001      	b.n	8012008 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012004:	2300      	movs	r3, #0
 8012006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801200a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012012:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012016:	4618      	mov	r0, r3
 8012018:	3740      	adds	r7, #64	; 0x40
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
	...

08012020 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b08c      	sub	sp, #48	; 0x30
 8012024:	af00      	add	r7, sp, #0
 8012026:	60f8      	str	r0, [r7, #12]
 8012028:	60b9      	str	r1, [r7, #8]
 801202a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801202c:	2300      	movs	r3, #0
 801202e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012036:	2b00      	cmp	r3, #0
 8012038:	d10a      	bne.n	8012050 <xQueueReceive+0x30>
	__asm volatile
 801203a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203e:	f383 8811 	msr	BASEPRI, r3
 8012042:	f3bf 8f6f 	isb	sy
 8012046:	f3bf 8f4f 	dsb	sy
 801204a:	623b      	str	r3, [r7, #32]
}
 801204c:	bf00      	nop
 801204e:	e7fe      	b.n	801204e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d103      	bne.n	801205e <xQueueReceive+0x3e>
 8012056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801205a:	2b00      	cmp	r3, #0
 801205c:	d101      	bne.n	8012062 <xQueueReceive+0x42>
 801205e:	2301      	movs	r3, #1
 8012060:	e000      	b.n	8012064 <xQueueReceive+0x44>
 8012062:	2300      	movs	r3, #0
 8012064:	2b00      	cmp	r3, #0
 8012066:	d10a      	bne.n	801207e <xQueueReceive+0x5e>
	__asm volatile
 8012068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801206c:	f383 8811 	msr	BASEPRI, r3
 8012070:	f3bf 8f6f 	isb	sy
 8012074:	f3bf 8f4f 	dsb	sy
 8012078:	61fb      	str	r3, [r7, #28]
}
 801207a:	bf00      	nop
 801207c:	e7fe      	b.n	801207c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801207e:	f001 f995 	bl	80133ac <xTaskGetSchedulerState>
 8012082:	4603      	mov	r3, r0
 8012084:	2b00      	cmp	r3, #0
 8012086:	d102      	bne.n	801208e <xQueueReceive+0x6e>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d101      	bne.n	8012092 <xQueueReceive+0x72>
 801208e:	2301      	movs	r3, #1
 8012090:	e000      	b.n	8012094 <xQueueReceive+0x74>
 8012092:	2300      	movs	r3, #0
 8012094:	2b00      	cmp	r3, #0
 8012096:	d10a      	bne.n	80120ae <xQueueReceive+0x8e>
	__asm volatile
 8012098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209c:	f383 8811 	msr	BASEPRI, r3
 80120a0:	f3bf 8f6f 	isb	sy
 80120a4:	f3bf 8f4f 	dsb	sy
 80120a8:	61bb      	str	r3, [r7, #24]
}
 80120aa:	bf00      	nop
 80120ac:	e7fe      	b.n	80120ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80120ae:	f001 ff11 	bl	8013ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80120b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d01f      	beq.n	80120fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80120be:	68b9      	ldr	r1, [r7, #8]
 80120c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120c2:	f000 f9b3 	bl	801242c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80120c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c8:	1e5a      	subs	r2, r3, #1
 80120ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80120ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d0:	691b      	ldr	r3, [r3, #16]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d00f      	beq.n	80120f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80120d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d8:	3310      	adds	r3, #16
 80120da:	4618      	mov	r0, r3
 80120dc:	f000 ff46 	bl	8012f6c <xTaskRemoveFromEventList>
 80120e0:	4603      	mov	r3, r0
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d007      	beq.n	80120f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80120e6:	4b3d      	ldr	r3, [pc, #244]	; (80121dc <xQueueReceive+0x1bc>)
 80120e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120ec:	601a      	str	r2, [r3, #0]
 80120ee:	f3bf 8f4f 	dsb	sy
 80120f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80120f6:	f001 ff1d 	bl	8013f34 <vPortExitCritical>
				return pdPASS;
 80120fa:	2301      	movs	r3, #1
 80120fc:	e069      	b.n	80121d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d103      	bne.n	801210c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012104:	f001 ff16 	bl	8013f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012108:	2300      	movs	r3, #0
 801210a:	e062      	b.n	80121d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801210e:	2b00      	cmp	r3, #0
 8012110:	d106      	bne.n	8012120 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012112:	f107 0310 	add.w	r3, r7, #16
 8012116:	4618      	mov	r0, r3
 8012118:	f000 ffee 	bl	80130f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801211c:	2301      	movs	r3, #1
 801211e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012120:	f001 ff08 	bl	8013f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012124:	f000 fcc2 	bl	8012aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012128:	f001 fed4 	bl	8013ed4 <vPortEnterCritical>
 801212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801212e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012132:	b25b      	sxtb	r3, r3
 8012134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012138:	d103      	bne.n	8012142 <xQueueReceive+0x122>
 801213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801213c:	2200      	movs	r2, #0
 801213e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012148:	b25b      	sxtb	r3, r3
 801214a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801214e:	d103      	bne.n	8012158 <xQueueReceive+0x138>
 8012150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012152:	2200      	movs	r2, #0
 8012154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012158:	f001 feec 	bl	8013f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801215c:	1d3a      	adds	r2, r7, #4
 801215e:	f107 0310 	add.w	r3, r7, #16
 8012162:	4611      	mov	r1, r2
 8012164:	4618      	mov	r0, r3
 8012166:	f000 ffdd 	bl	8013124 <xTaskCheckForTimeOut>
 801216a:	4603      	mov	r3, r0
 801216c:	2b00      	cmp	r3, #0
 801216e:	d123      	bne.n	80121b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012172:	f000 f9d3 	bl	801251c <prvIsQueueEmpty>
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	d017      	beq.n	80121ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217e:	3324      	adds	r3, #36	; 0x24
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	4611      	mov	r1, r2
 8012184:	4618      	mov	r0, r3
 8012186:	f000 fe65 	bl	8012e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801218a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801218c:	f000 f974 	bl	8012478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012190:	f000 fc9a 	bl	8012ac8 <xTaskResumeAll>
 8012194:	4603      	mov	r3, r0
 8012196:	2b00      	cmp	r3, #0
 8012198:	d189      	bne.n	80120ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801219a:	4b10      	ldr	r3, [pc, #64]	; (80121dc <xQueueReceive+0x1bc>)
 801219c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121a0:	601a      	str	r2, [r3, #0]
 80121a2:	f3bf 8f4f 	dsb	sy
 80121a6:	f3bf 8f6f 	isb	sy
 80121aa:	e780      	b.n	80120ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80121ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121ae:	f000 f963 	bl	8012478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80121b2:	f000 fc89 	bl	8012ac8 <xTaskResumeAll>
 80121b6:	e77a      	b.n	80120ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80121b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121ba:	f000 f95d 	bl	8012478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80121be:	f000 fc83 	bl	8012ac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80121c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121c4:	f000 f9aa 	bl	801251c <prvIsQueueEmpty>
 80121c8:	4603      	mov	r3, r0
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	f43f af6f 	beq.w	80120ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80121d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3730      	adds	r7, #48	; 0x30
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	e000ed04 	.word	0xe000ed04

080121e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b08e      	sub	sp, #56	; 0x38
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80121f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d10a      	bne.n	801220c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80121f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121fa:	f383 8811 	msr	BASEPRI, r3
 80121fe:	f3bf 8f6f 	isb	sy
 8012202:	f3bf 8f4f 	dsb	sy
 8012206:	623b      	str	r3, [r7, #32]
}
 8012208:	bf00      	nop
 801220a:	e7fe      	b.n	801220a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d103      	bne.n	801221a <xQueueReceiveFromISR+0x3a>
 8012212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012216:	2b00      	cmp	r3, #0
 8012218:	d101      	bne.n	801221e <xQueueReceiveFromISR+0x3e>
 801221a:	2301      	movs	r3, #1
 801221c:	e000      	b.n	8012220 <xQueueReceiveFromISR+0x40>
 801221e:	2300      	movs	r3, #0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d10a      	bne.n	801223a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012228:	f383 8811 	msr	BASEPRI, r3
 801222c:	f3bf 8f6f 	isb	sy
 8012230:	f3bf 8f4f 	dsb	sy
 8012234:	61fb      	str	r3, [r7, #28]
}
 8012236:	bf00      	nop
 8012238:	e7fe      	b.n	8012238 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801223a:	f001 ff2d 	bl	8014098 <vPortValidateInterruptPriority>
	__asm volatile
 801223e:	f3ef 8211 	mrs	r2, BASEPRI
 8012242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012246:	f383 8811 	msr	BASEPRI, r3
 801224a:	f3bf 8f6f 	isb	sy
 801224e:	f3bf 8f4f 	dsb	sy
 8012252:	61ba      	str	r2, [r7, #24]
 8012254:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012256:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012258:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801225c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801225e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012262:	2b00      	cmp	r3, #0
 8012264:	d02f      	beq.n	80122c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801226c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012270:	68b9      	ldr	r1, [r7, #8]
 8012272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012274:	f000 f8da 	bl	801242c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801227a:	1e5a      	subs	r2, r3, #1
 801227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012288:	d112      	bne.n	80122b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228c:	691b      	ldr	r3, [r3, #16]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d016      	beq.n	80122c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012294:	3310      	adds	r3, #16
 8012296:	4618      	mov	r0, r3
 8012298:	f000 fe68 	bl	8012f6c <xTaskRemoveFromEventList>
 801229c:	4603      	mov	r3, r0
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d00e      	beq.n	80122c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d00b      	beq.n	80122c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2201      	movs	r2, #1
 80122ac:	601a      	str	r2, [r3, #0]
 80122ae:	e007      	b.n	80122c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80122b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122b4:	3301      	adds	r3, #1
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	b25a      	sxtb	r2, r3
 80122ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80122c0:	2301      	movs	r3, #1
 80122c2:	637b      	str	r3, [r7, #52]	; 0x34
 80122c4:	e001      	b.n	80122ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80122c6:	2300      	movs	r3, #0
 80122c8:	637b      	str	r3, [r7, #52]	; 0x34
 80122ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	f383 8811 	msr	BASEPRI, r3
}
 80122d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80122d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3738      	adds	r7, #56	; 0x38
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}

080122e0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d10a      	bne.n	8012304 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80122ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f2:	f383 8811 	msr	BASEPRI, r3
 80122f6:	f3bf 8f6f 	isb	sy
 80122fa:	f3bf 8f4f 	dsb	sy
 80122fe:	60bb      	str	r3, [r7, #8]
}
 8012300:	bf00      	nop
 8012302:	e7fe      	b.n	8012302 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8012304:	f001 fde6 	bl	8013ed4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801230c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801230e:	f001 fe11 	bl	8013f34 <vPortExitCritical>

	return uxReturn;
 8012312:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012314:	4618      	mov	r0, r3
 8012316:	3710      	adds	r7, #16
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801231c:	b480      	push	{r7}
 801231e:	b087      	sub	sp, #28
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d10a      	bne.n	8012344 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012332:	f383 8811 	msr	BASEPRI, r3
 8012336:	f3bf 8f6f 	isb	sy
 801233a:	f3bf 8f4f 	dsb	sy
 801233e:	60fb      	str	r3, [r7, #12]
}
 8012340:	bf00      	nop
 8012342:	e7fe      	b.n	8012342 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012348:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801234a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801234c:	4618      	mov	r0, r3
 801234e:	371c      	adds	r7, #28
 8012350:	46bd      	mov	sp, r7
 8012352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012356:	4770      	bx	lr

08012358 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b086      	sub	sp, #24
 801235c:	af00      	add	r7, sp, #0
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012364:	2300      	movs	r3, #0
 8012366:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801236c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012372:	2b00      	cmp	r3, #0
 8012374:	d10d      	bne.n	8012392 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d14d      	bne.n	801241a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	689b      	ldr	r3, [r3, #8]
 8012382:	4618      	mov	r0, r3
 8012384:	f001 f830 	bl	80133e8 <xTaskPriorityDisinherit>
 8012388:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2200      	movs	r2, #0
 801238e:	609a      	str	r2, [r3, #8]
 8012390:	e043      	b.n	801241a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d119      	bne.n	80123cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	6858      	ldr	r0, [r3, #4]
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123a0:	461a      	mov	r2, r3
 80123a2:	68b9      	ldr	r1, [r7, #8]
 80123a4:	f002 f8dc 	bl	8014560 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	685a      	ldr	r2, [r3, #4]
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123b0:	441a      	add	r2, r3
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	685a      	ldr	r2, [r3, #4]
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	689b      	ldr	r3, [r3, #8]
 80123be:	429a      	cmp	r2, r3
 80123c0:	d32b      	bcc.n	801241a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	681a      	ldr	r2, [r3, #0]
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	605a      	str	r2, [r3, #4]
 80123ca:	e026      	b.n	801241a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	68d8      	ldr	r0, [r3, #12]
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123d4:	461a      	mov	r2, r3
 80123d6:	68b9      	ldr	r1, [r7, #8]
 80123d8:	f002 f8c2 	bl	8014560 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	68da      	ldr	r2, [r3, #12]
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123e4:	425b      	negs	r3, r3
 80123e6:	441a      	add	r2, r3
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	68da      	ldr	r2, [r3, #12]
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d207      	bcs.n	8012408 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	689a      	ldr	r2, [r3, #8]
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012400:	425b      	negs	r3, r3
 8012402:	441a      	add	r2, r3
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2b02      	cmp	r3, #2
 801240c:	d105      	bne.n	801241a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d002      	beq.n	801241a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	3b01      	subs	r3, #1
 8012418:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801241a:	693b      	ldr	r3, [r7, #16]
 801241c:	1c5a      	adds	r2, r3, #1
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012422:	697b      	ldr	r3, [r7, #20]
}
 8012424:	4618      	mov	r0, r3
 8012426:	3718      	adds	r7, #24
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801243a:	2b00      	cmp	r3, #0
 801243c:	d018      	beq.n	8012470 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	68da      	ldr	r2, [r3, #12]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012446:	441a      	add	r2, r3
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	68da      	ldr	r2, [r3, #12]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	689b      	ldr	r3, [r3, #8]
 8012454:	429a      	cmp	r2, r3
 8012456:	d303      	bcc.n	8012460 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681a      	ldr	r2, [r3, #0]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	68d9      	ldr	r1, [r3, #12]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012468:	461a      	mov	r2, r3
 801246a:	6838      	ldr	r0, [r7, #0]
 801246c:	f002 f878 	bl	8014560 <memcpy>
	}
}
 8012470:	bf00      	nop
 8012472:	3708      	adds	r7, #8
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}

08012478 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012480:	f001 fd28 	bl	8013ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801248a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801248c:	e011      	b.n	80124b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012492:	2b00      	cmp	r3, #0
 8012494:	d012      	beq.n	80124bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	3324      	adds	r3, #36	; 0x24
 801249a:	4618      	mov	r0, r3
 801249c:	f000 fd66 	bl	8012f6c <xTaskRemoveFromEventList>
 80124a0:	4603      	mov	r3, r0
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d001      	beq.n	80124aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80124a6:	f000 fe9f 	bl	80131e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80124aa:	7bfb      	ldrb	r3, [r7, #15]
 80124ac:	3b01      	subs	r3, #1
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80124b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	dce9      	bgt.n	801248e <prvUnlockQueue+0x16>
 80124ba:	e000      	b.n	80124be <prvUnlockQueue+0x46>
					break;
 80124bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	22ff      	movs	r2, #255	; 0xff
 80124c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80124c6:	f001 fd35 	bl	8013f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80124ca:	f001 fd03 	bl	8013ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80124d6:	e011      	b.n	80124fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	691b      	ldr	r3, [r3, #16]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d012      	beq.n	8012506 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	3310      	adds	r3, #16
 80124e4:	4618      	mov	r0, r3
 80124e6:	f000 fd41 	bl	8012f6c <xTaskRemoveFromEventList>
 80124ea:	4603      	mov	r3, r0
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d001      	beq.n	80124f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80124f0:	f000 fe7a 	bl	80131e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80124f4:	7bbb      	ldrb	r3, [r7, #14]
 80124f6:	3b01      	subs	r3, #1
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80124fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012500:	2b00      	cmp	r3, #0
 8012502:	dce9      	bgt.n	80124d8 <prvUnlockQueue+0x60>
 8012504:	e000      	b.n	8012508 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012506:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	22ff      	movs	r2, #255	; 0xff
 801250c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012510:	f001 fd10 	bl	8013f34 <vPortExitCritical>
}
 8012514:	bf00      	nop
 8012516:	3710      	adds	r7, #16
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}

0801251c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b084      	sub	sp, #16
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012524:	f001 fcd6 	bl	8013ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801252c:	2b00      	cmp	r3, #0
 801252e:	d102      	bne.n	8012536 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012530:	2301      	movs	r3, #1
 8012532:	60fb      	str	r3, [r7, #12]
 8012534:	e001      	b.n	801253a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012536:	2300      	movs	r3, #0
 8012538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801253a:	f001 fcfb 	bl	8013f34 <vPortExitCritical>

	return xReturn;
 801253e:	68fb      	ldr	r3, [r7, #12]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3710      	adds	r7, #16
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012550:	f001 fcc0 	bl	8013ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801255c:	429a      	cmp	r2, r3
 801255e:	d102      	bne.n	8012566 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012560:	2301      	movs	r3, #1
 8012562:	60fb      	str	r3, [r7, #12]
 8012564:	e001      	b.n	801256a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012566:	2300      	movs	r3, #0
 8012568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801256a:	f001 fce3 	bl	8013f34 <vPortExitCritical>

	return xReturn;
 801256e:	68fb      	ldr	r3, [r7, #12]
}
 8012570:	4618      	mov	r0, r3
 8012572:	3710      	adds	r7, #16
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012578:	b480      	push	{r7}
 801257a:	b085      	sub	sp, #20
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012582:	2300      	movs	r3, #0
 8012584:	60fb      	str	r3, [r7, #12]
 8012586:	e014      	b.n	80125b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012588:	4a0f      	ldr	r2, [pc, #60]	; (80125c8 <vQueueAddToRegistry+0x50>)
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d10b      	bne.n	80125ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012594:	490c      	ldr	r1, [pc, #48]	; (80125c8 <vQueueAddToRegistry+0x50>)
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	683a      	ldr	r2, [r7, #0]
 801259a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801259e:	4a0a      	ldr	r2, [pc, #40]	; (80125c8 <vQueueAddToRegistry+0x50>)
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	00db      	lsls	r3, r3, #3
 80125a4:	4413      	add	r3, r2
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80125aa:	e006      	b.n	80125ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	3301      	adds	r3, #1
 80125b0:	60fb      	str	r3, [r7, #12]
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2b07      	cmp	r3, #7
 80125b6:	d9e7      	bls.n	8012588 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80125b8:	bf00      	nop
 80125ba:	bf00      	nop
 80125bc:	3714      	adds	r7, #20
 80125be:	46bd      	mov	sp, r7
 80125c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	24000e38 	.word	0x24000e38

080125cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b086      	sub	sp, #24
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	60b9      	str	r1, [r7, #8]
 80125d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80125dc:	f001 fc7a 	bl	8013ed4 <vPortEnterCritical>
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80125e6:	b25b      	sxtb	r3, r3
 80125e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80125ec:	d103      	bne.n	80125f6 <vQueueWaitForMessageRestricted+0x2a>
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	2200      	movs	r2, #0
 80125f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125fc:	b25b      	sxtb	r3, r3
 80125fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012602:	d103      	bne.n	801260c <vQueueWaitForMessageRestricted+0x40>
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	2200      	movs	r2, #0
 8012608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801260c:	f001 fc92 	bl	8013f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012614:	2b00      	cmp	r3, #0
 8012616:	d106      	bne.n	8012626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	3324      	adds	r3, #36	; 0x24
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	68b9      	ldr	r1, [r7, #8]
 8012620:	4618      	mov	r0, r3
 8012622:	f000 fc77 	bl	8012f14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012626:	6978      	ldr	r0, [r7, #20]
 8012628:	f7ff ff26 	bl	8012478 <prvUnlockQueue>
	}
 801262c:	bf00      	nop
 801262e:	3718      	adds	r7, #24
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012634:	b580      	push	{r7, lr}
 8012636:	b08e      	sub	sp, #56	; 0x38
 8012638:	af04      	add	r7, sp, #16
 801263a:	60f8      	str	r0, [r7, #12]
 801263c:	60b9      	str	r1, [r7, #8]
 801263e:	607a      	str	r2, [r7, #4]
 8012640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012644:	2b00      	cmp	r3, #0
 8012646:	d10a      	bne.n	801265e <xTaskCreateStatic+0x2a>
	__asm volatile
 8012648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801264c:	f383 8811 	msr	BASEPRI, r3
 8012650:	f3bf 8f6f 	isb	sy
 8012654:	f3bf 8f4f 	dsb	sy
 8012658:	623b      	str	r3, [r7, #32]
}
 801265a:	bf00      	nop
 801265c:	e7fe      	b.n	801265c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012660:	2b00      	cmp	r3, #0
 8012662:	d10a      	bne.n	801267a <xTaskCreateStatic+0x46>
	__asm volatile
 8012664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012668:	f383 8811 	msr	BASEPRI, r3
 801266c:	f3bf 8f6f 	isb	sy
 8012670:	f3bf 8f4f 	dsb	sy
 8012674:	61fb      	str	r3, [r7, #28]
}
 8012676:	bf00      	nop
 8012678:	e7fe      	b.n	8012678 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801267a:	235c      	movs	r3, #92	; 0x5c
 801267c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	2b5c      	cmp	r3, #92	; 0x5c
 8012682:	d00a      	beq.n	801269a <xTaskCreateStatic+0x66>
	__asm volatile
 8012684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012688:	f383 8811 	msr	BASEPRI, r3
 801268c:	f3bf 8f6f 	isb	sy
 8012690:	f3bf 8f4f 	dsb	sy
 8012694:	61bb      	str	r3, [r7, #24]
}
 8012696:	bf00      	nop
 8012698:	e7fe      	b.n	8012698 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801269a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d01e      	beq.n	80126e0 <xTaskCreateStatic+0xac>
 80126a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d01b      	beq.n	80126e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80126a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80126ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80126b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80126b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b4:	2202      	movs	r2, #2
 80126b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80126ba:	2300      	movs	r3, #0
 80126bc:	9303      	str	r3, [sp, #12]
 80126be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c0:	9302      	str	r3, [sp, #8]
 80126c2:	f107 0314 	add.w	r3, r7, #20
 80126c6:	9301      	str	r3, [sp, #4]
 80126c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ca:	9300      	str	r3, [sp, #0]
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	687a      	ldr	r2, [r7, #4]
 80126d0:	68b9      	ldr	r1, [r7, #8]
 80126d2:	68f8      	ldr	r0, [r7, #12]
 80126d4:	f000 f850 	bl	8012778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80126d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126da:	f000 f8dd 	bl	8012898 <prvAddNewTaskToReadyList>
 80126de:	e001      	b.n	80126e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80126e0:	2300      	movs	r3, #0
 80126e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80126e4:	697b      	ldr	r3, [r7, #20]
	}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3728      	adds	r7, #40	; 0x28
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}

080126ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80126ee:	b580      	push	{r7, lr}
 80126f0:	b08c      	sub	sp, #48	; 0x30
 80126f2:	af04      	add	r7, sp, #16
 80126f4:	60f8      	str	r0, [r7, #12]
 80126f6:	60b9      	str	r1, [r7, #8]
 80126f8:	603b      	str	r3, [r7, #0]
 80126fa:	4613      	mov	r3, r2
 80126fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80126fe:	88fb      	ldrh	r3, [r7, #6]
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	4618      	mov	r0, r3
 8012704:	f001 fd08 	bl	8014118 <pvPortMalloc>
 8012708:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00e      	beq.n	801272e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012710:	205c      	movs	r0, #92	; 0x5c
 8012712:	f001 fd01 	bl	8014118 <pvPortMalloc>
 8012716:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d003      	beq.n	8012726 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	697a      	ldr	r2, [r7, #20]
 8012722:	631a      	str	r2, [r3, #48]	; 0x30
 8012724:	e005      	b.n	8012732 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012726:	6978      	ldr	r0, [r7, #20]
 8012728:	f001 fdc2 	bl	80142b0 <vPortFree>
 801272c:	e001      	b.n	8012732 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801272e:	2300      	movs	r3, #0
 8012730:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d017      	beq.n	8012768 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012738:	69fb      	ldr	r3, [r7, #28]
 801273a:	2200      	movs	r2, #0
 801273c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012740:	88fa      	ldrh	r2, [r7, #6]
 8012742:	2300      	movs	r3, #0
 8012744:	9303      	str	r3, [sp, #12]
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	9302      	str	r3, [sp, #8]
 801274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274c:	9301      	str	r3, [sp, #4]
 801274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012750:	9300      	str	r3, [sp, #0]
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	68b9      	ldr	r1, [r7, #8]
 8012756:	68f8      	ldr	r0, [r7, #12]
 8012758:	f000 f80e 	bl	8012778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801275c:	69f8      	ldr	r0, [r7, #28]
 801275e:	f000 f89b 	bl	8012898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012762:	2301      	movs	r3, #1
 8012764:	61bb      	str	r3, [r7, #24]
 8012766:	e002      	b.n	801276e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801276c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801276e:	69bb      	ldr	r3, [r7, #24]
	}
 8012770:	4618      	mov	r0, r3
 8012772:	3720      	adds	r7, #32
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b088      	sub	sp, #32
 801277c:	af00      	add	r7, sp, #0
 801277e:	60f8      	str	r0, [r7, #12]
 8012780:	60b9      	str	r1, [r7, #8]
 8012782:	607a      	str	r2, [r7, #4]
 8012784:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	461a      	mov	r2, r3
 8012790:	21a5      	movs	r1, #165	; 0xa5
 8012792:	f001 fef3 	bl	801457c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801279a:	6879      	ldr	r1, [r7, #4]
 801279c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80127a0:	440b      	add	r3, r1
 80127a2:	009b      	lsls	r3, r3, #2
 80127a4:	4413      	add	r3, r2
 80127a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80127a8:	69bb      	ldr	r3, [r7, #24]
 80127aa:	f023 0307 	bic.w	r3, r3, #7
 80127ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80127b0:	69bb      	ldr	r3, [r7, #24]
 80127b2:	f003 0307 	and.w	r3, r3, #7
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d00a      	beq.n	80127d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80127ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127be:	f383 8811 	msr	BASEPRI, r3
 80127c2:	f3bf 8f6f 	isb	sy
 80127c6:	f3bf 8f4f 	dsb	sy
 80127ca:	617b      	str	r3, [r7, #20]
}
 80127cc:	bf00      	nop
 80127ce:	e7fe      	b.n	80127ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d01f      	beq.n	8012816 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80127d6:	2300      	movs	r3, #0
 80127d8:	61fb      	str	r3, [r7, #28]
 80127da:	e012      	b.n	8012802 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80127dc:	68ba      	ldr	r2, [r7, #8]
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	4413      	add	r3, r2
 80127e2:	7819      	ldrb	r1, [r3, #0]
 80127e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127e6:	69fb      	ldr	r3, [r7, #28]
 80127e8:	4413      	add	r3, r2
 80127ea:	3334      	adds	r3, #52	; 0x34
 80127ec:	460a      	mov	r2, r1
 80127ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80127f0:	68ba      	ldr	r2, [r7, #8]
 80127f2:	69fb      	ldr	r3, [r7, #28]
 80127f4:	4413      	add	r3, r2
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d006      	beq.n	801280a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80127fc:	69fb      	ldr	r3, [r7, #28]
 80127fe:	3301      	adds	r3, #1
 8012800:	61fb      	str	r3, [r7, #28]
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	2b0f      	cmp	r3, #15
 8012806:	d9e9      	bls.n	80127dc <prvInitialiseNewTask+0x64>
 8012808:	e000      	b.n	801280c <prvInitialiseNewTask+0x94>
			{
				break;
 801280a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280e:	2200      	movs	r2, #0
 8012810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012814:	e003      	b.n	801281e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012818:	2200      	movs	r2, #0
 801281a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012820:	2b37      	cmp	r3, #55	; 0x37
 8012822:	d901      	bls.n	8012828 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012824:	2337      	movs	r3, #55	; 0x37
 8012826:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801282a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801282c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012832:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012836:	2200      	movs	r2, #0
 8012838:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283c:	3304      	adds	r3, #4
 801283e:	4618      	mov	r0, r3
 8012840:	f7ff f882 	bl	8011948 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012846:	3318      	adds	r3, #24
 8012848:	4618      	mov	r0, r3
 801284a:	f7ff f87d 	bl	8011948 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012856:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012862:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012866:	2200      	movs	r2, #0
 8012868:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286c:	2200      	movs	r2, #0
 801286e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012872:	683a      	ldr	r2, [r7, #0]
 8012874:	68f9      	ldr	r1, [r7, #12]
 8012876:	69b8      	ldr	r0, [r7, #24]
 8012878:	f001 f9fe 	bl	8013c78 <pxPortInitialiseStack>
 801287c:	4602      	mov	r2, r0
 801287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012880:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012884:	2b00      	cmp	r3, #0
 8012886:	d002      	beq.n	801288e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801288c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801288e:	bf00      	nop
 8012890:	3720      	adds	r7, #32
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
	...

08012898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80128a0:	f001 fb18 	bl	8013ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80128a4:	4b2d      	ldr	r3, [pc, #180]	; (801295c <prvAddNewTaskToReadyList+0xc4>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	3301      	adds	r3, #1
 80128aa:	4a2c      	ldr	r2, [pc, #176]	; (801295c <prvAddNewTaskToReadyList+0xc4>)
 80128ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80128ae:	4b2c      	ldr	r3, [pc, #176]	; (8012960 <prvAddNewTaskToReadyList+0xc8>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d109      	bne.n	80128ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80128b6:	4a2a      	ldr	r2, [pc, #168]	; (8012960 <prvAddNewTaskToReadyList+0xc8>)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80128bc:	4b27      	ldr	r3, [pc, #156]	; (801295c <prvAddNewTaskToReadyList+0xc4>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	2b01      	cmp	r3, #1
 80128c2:	d110      	bne.n	80128e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80128c4:	f000 fcb4 	bl	8013230 <prvInitialiseTaskLists>
 80128c8:	e00d      	b.n	80128e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80128ca:	4b26      	ldr	r3, [pc, #152]	; (8012964 <prvAddNewTaskToReadyList+0xcc>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d109      	bne.n	80128e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80128d2:	4b23      	ldr	r3, [pc, #140]	; (8012960 <prvAddNewTaskToReadyList+0xc8>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128dc:	429a      	cmp	r2, r3
 80128de:	d802      	bhi.n	80128e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80128e0:	4a1f      	ldr	r2, [pc, #124]	; (8012960 <prvAddNewTaskToReadyList+0xc8>)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80128e6:	4b20      	ldr	r3, [pc, #128]	; (8012968 <prvAddNewTaskToReadyList+0xd0>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	3301      	adds	r3, #1
 80128ec:	4a1e      	ldr	r2, [pc, #120]	; (8012968 <prvAddNewTaskToReadyList+0xd0>)
 80128ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80128f0:	4b1d      	ldr	r3, [pc, #116]	; (8012968 <prvAddNewTaskToReadyList+0xd0>)
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128fc:	4b1b      	ldr	r3, [pc, #108]	; (801296c <prvAddNewTaskToReadyList+0xd4>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	429a      	cmp	r2, r3
 8012902:	d903      	bls.n	801290c <prvAddNewTaskToReadyList+0x74>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012908:	4a18      	ldr	r2, [pc, #96]	; (801296c <prvAddNewTaskToReadyList+0xd4>)
 801290a:	6013      	str	r3, [r2, #0]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012910:	4613      	mov	r3, r2
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	4413      	add	r3, r2
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	4a15      	ldr	r2, [pc, #84]	; (8012970 <prvAddNewTaskToReadyList+0xd8>)
 801291a:	441a      	add	r2, r3
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	3304      	adds	r3, #4
 8012920:	4619      	mov	r1, r3
 8012922:	4610      	mov	r0, r2
 8012924:	f7ff f81d 	bl	8011962 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012928:	f001 fb04 	bl	8013f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801292c:	4b0d      	ldr	r3, [pc, #52]	; (8012964 <prvAddNewTaskToReadyList+0xcc>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d00e      	beq.n	8012952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012934:	4b0a      	ldr	r3, [pc, #40]	; (8012960 <prvAddNewTaskToReadyList+0xc8>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293e:	429a      	cmp	r2, r3
 8012940:	d207      	bcs.n	8012952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012942:	4b0c      	ldr	r3, [pc, #48]	; (8012974 <prvAddNewTaskToReadyList+0xdc>)
 8012944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012948:	601a      	str	r2, [r3, #0]
 801294a:	f3bf 8f4f 	dsb	sy
 801294e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012952:	bf00      	nop
 8012954:	3708      	adds	r7, #8
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	2400134c 	.word	0x2400134c
 8012960:	24000e78 	.word	0x24000e78
 8012964:	24001358 	.word	0x24001358
 8012968:	24001368 	.word	0x24001368
 801296c:	24001354 	.word	0x24001354
 8012970:	24000e7c 	.word	0x24000e7c
 8012974:	e000ed04 	.word	0xe000ed04

08012978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012978:	b580      	push	{r7, lr}
 801297a:	b084      	sub	sp, #16
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012980:	2300      	movs	r3, #0
 8012982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d017      	beq.n	80129ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801298a:	4b13      	ldr	r3, [pc, #76]	; (80129d8 <vTaskDelay+0x60>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d00a      	beq.n	80129a8 <vTaskDelay+0x30>
	__asm volatile
 8012992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012996:	f383 8811 	msr	BASEPRI, r3
 801299a:	f3bf 8f6f 	isb	sy
 801299e:	f3bf 8f4f 	dsb	sy
 80129a2:	60bb      	str	r3, [r7, #8]
}
 80129a4:	bf00      	nop
 80129a6:	e7fe      	b.n	80129a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80129a8:	f000 f880 	bl	8012aac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80129ac:	2100      	movs	r1, #0
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f000 fda0 	bl	80134f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80129b4:	f000 f888 	bl	8012ac8 <xTaskResumeAll>
 80129b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d107      	bne.n	80129d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80129c0:	4b06      	ldr	r3, [pc, #24]	; (80129dc <vTaskDelay+0x64>)
 80129c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129c6:	601a      	str	r2, [r3, #0]
 80129c8:	f3bf 8f4f 	dsb	sy
 80129cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80129d0:	bf00      	nop
 80129d2:	3710      	adds	r7, #16
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	24001374 	.word	0x24001374
 80129dc:	e000ed04 	.word	0xe000ed04

080129e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b08a      	sub	sp, #40	; 0x28
 80129e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80129e6:	2300      	movs	r3, #0
 80129e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80129ea:	2300      	movs	r3, #0
 80129ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80129ee:	463a      	mov	r2, r7
 80129f0:	1d39      	adds	r1, r7, #4
 80129f2:	f107 0308 	add.w	r3, r7, #8
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fe fd64 	bl	80114c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80129fc:	6839      	ldr	r1, [r7, #0]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	68ba      	ldr	r2, [r7, #8]
 8012a02:	9202      	str	r2, [sp, #8]
 8012a04:	9301      	str	r3, [sp, #4]
 8012a06:	2300      	movs	r3, #0
 8012a08:	9300      	str	r3, [sp, #0]
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	460a      	mov	r2, r1
 8012a0e:	4921      	ldr	r1, [pc, #132]	; (8012a94 <vTaskStartScheduler+0xb4>)
 8012a10:	4821      	ldr	r0, [pc, #132]	; (8012a98 <vTaskStartScheduler+0xb8>)
 8012a12:	f7ff fe0f 	bl	8012634 <xTaskCreateStatic>
 8012a16:	4603      	mov	r3, r0
 8012a18:	4a20      	ldr	r2, [pc, #128]	; (8012a9c <vTaskStartScheduler+0xbc>)
 8012a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012a1c:	4b1f      	ldr	r3, [pc, #124]	; (8012a9c <vTaskStartScheduler+0xbc>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d002      	beq.n	8012a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012a24:	2301      	movs	r3, #1
 8012a26:	617b      	str	r3, [r7, #20]
 8012a28:	e001      	b.n	8012a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d102      	bne.n	8012a3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012a34:	f000 fdb2 	bl	801359c <xTimerCreateTimerTask>
 8012a38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	2b01      	cmp	r3, #1
 8012a3e:	d116      	bne.n	8012a6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8012a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a44:	f383 8811 	msr	BASEPRI, r3
 8012a48:	f3bf 8f6f 	isb	sy
 8012a4c:	f3bf 8f4f 	dsb	sy
 8012a50:	613b      	str	r3, [r7, #16]
}
 8012a52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012a54:	4b12      	ldr	r3, [pc, #72]	; (8012aa0 <vTaskStartScheduler+0xc0>)
 8012a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012a5c:	4b11      	ldr	r3, [pc, #68]	; (8012aa4 <vTaskStartScheduler+0xc4>)
 8012a5e:	2201      	movs	r2, #1
 8012a60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012a62:	4b11      	ldr	r3, [pc, #68]	; (8012aa8 <vTaskStartScheduler+0xc8>)
 8012a64:	2200      	movs	r2, #0
 8012a66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012a68:	f001 f992 	bl	8013d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012a6c:	e00e      	b.n	8012a8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a74:	d10a      	bne.n	8012a8c <vTaskStartScheduler+0xac>
	__asm volatile
 8012a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a7a:	f383 8811 	msr	BASEPRI, r3
 8012a7e:	f3bf 8f6f 	isb	sy
 8012a82:	f3bf 8f4f 	dsb	sy
 8012a86:	60fb      	str	r3, [r7, #12]
}
 8012a88:	bf00      	nop
 8012a8a:	e7fe      	b.n	8012a8a <vTaskStartScheduler+0xaa>
}
 8012a8c:	bf00      	nop
 8012a8e:	3718      	adds	r7, #24
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	080157bc 	.word	0x080157bc
 8012a98:	08013201 	.word	0x08013201
 8012a9c:	24001370 	.word	0x24001370
 8012aa0:	2400136c 	.word	0x2400136c
 8012aa4:	24001358 	.word	0x24001358
 8012aa8:	24001350 	.word	0x24001350

08012aac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012aac:	b480      	push	{r7}
 8012aae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012ab0:	4b04      	ldr	r3, [pc, #16]	; (8012ac4 <vTaskSuspendAll+0x18>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	3301      	adds	r3, #1
 8012ab6:	4a03      	ldr	r2, [pc, #12]	; (8012ac4 <vTaskSuspendAll+0x18>)
 8012ab8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012aba:	bf00      	nop
 8012abc:	46bd      	mov	sp, r7
 8012abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac2:	4770      	bx	lr
 8012ac4:	24001374 	.word	0x24001374

08012ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012ad6:	4b42      	ldr	r3, [pc, #264]	; (8012be0 <xTaskResumeAll+0x118>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d10a      	bne.n	8012af4 <xTaskResumeAll+0x2c>
	__asm volatile
 8012ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae2:	f383 8811 	msr	BASEPRI, r3
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	603b      	str	r3, [r7, #0]
}
 8012af0:	bf00      	nop
 8012af2:	e7fe      	b.n	8012af2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012af4:	f001 f9ee 	bl	8013ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012af8:	4b39      	ldr	r3, [pc, #228]	; (8012be0 <xTaskResumeAll+0x118>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	3b01      	subs	r3, #1
 8012afe:	4a38      	ldr	r2, [pc, #224]	; (8012be0 <xTaskResumeAll+0x118>)
 8012b00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b02:	4b37      	ldr	r3, [pc, #220]	; (8012be0 <xTaskResumeAll+0x118>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d162      	bne.n	8012bd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012b0a:	4b36      	ldr	r3, [pc, #216]	; (8012be4 <xTaskResumeAll+0x11c>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d05e      	beq.n	8012bd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012b12:	e02f      	b.n	8012b74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b14:	4b34      	ldr	r3, [pc, #208]	; (8012be8 <xTaskResumeAll+0x120>)
 8012b16:	68db      	ldr	r3, [r3, #12]
 8012b18:	68db      	ldr	r3, [r3, #12]
 8012b1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	3318      	adds	r3, #24
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7fe ff7b 	bl	8011a1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	3304      	adds	r3, #4
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7fe ff76 	bl	8011a1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b34:	4b2d      	ldr	r3, [pc, #180]	; (8012bec <xTaskResumeAll+0x124>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d903      	bls.n	8012b44 <xTaskResumeAll+0x7c>
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b40:	4a2a      	ldr	r2, [pc, #168]	; (8012bec <xTaskResumeAll+0x124>)
 8012b42:	6013      	str	r3, [r2, #0]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b48:	4613      	mov	r3, r2
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	4413      	add	r3, r2
 8012b4e:	009b      	lsls	r3, r3, #2
 8012b50:	4a27      	ldr	r2, [pc, #156]	; (8012bf0 <xTaskResumeAll+0x128>)
 8012b52:	441a      	add	r2, r3
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	3304      	adds	r3, #4
 8012b58:	4619      	mov	r1, r3
 8012b5a:	4610      	mov	r0, r2
 8012b5c:	f7fe ff01 	bl	8011962 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b64:	4b23      	ldr	r3, [pc, #140]	; (8012bf4 <xTaskResumeAll+0x12c>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d302      	bcc.n	8012b74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012b6e:	4b22      	ldr	r3, [pc, #136]	; (8012bf8 <xTaskResumeAll+0x130>)
 8012b70:	2201      	movs	r2, #1
 8012b72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012b74:	4b1c      	ldr	r3, [pc, #112]	; (8012be8 <xTaskResumeAll+0x120>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d1cb      	bne.n	8012b14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d001      	beq.n	8012b86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012b82:	f000 fbf3 	bl	801336c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012b86:	4b1d      	ldr	r3, [pc, #116]	; (8012bfc <xTaskResumeAll+0x134>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d010      	beq.n	8012bb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012b92:	f000 f847 	bl	8012c24 <xTaskIncrementTick>
 8012b96:	4603      	mov	r3, r0
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d002      	beq.n	8012ba2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012b9c:	4b16      	ldr	r3, [pc, #88]	; (8012bf8 <xTaskResumeAll+0x130>)
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	3b01      	subs	r3, #1
 8012ba6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d1f1      	bne.n	8012b92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012bae:	4b13      	ldr	r3, [pc, #76]	; (8012bfc <xTaskResumeAll+0x134>)
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012bb4:	4b10      	ldr	r3, [pc, #64]	; (8012bf8 <xTaskResumeAll+0x130>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d009      	beq.n	8012bd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012bbc:	2301      	movs	r3, #1
 8012bbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012bc0:	4b0f      	ldr	r3, [pc, #60]	; (8012c00 <xTaskResumeAll+0x138>)
 8012bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bc6:	601a      	str	r2, [r3, #0]
 8012bc8:	f3bf 8f4f 	dsb	sy
 8012bcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012bd0:	f001 f9b0 	bl	8013f34 <vPortExitCritical>

	return xAlreadyYielded;
 8012bd4:	68bb      	ldr	r3, [r7, #8]
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop
 8012be0:	24001374 	.word	0x24001374
 8012be4:	2400134c 	.word	0x2400134c
 8012be8:	2400130c 	.word	0x2400130c
 8012bec:	24001354 	.word	0x24001354
 8012bf0:	24000e7c 	.word	0x24000e7c
 8012bf4:	24000e78 	.word	0x24000e78
 8012bf8:	24001360 	.word	0x24001360
 8012bfc:	2400135c 	.word	0x2400135c
 8012c00:	e000ed04 	.word	0xe000ed04

08012c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012c04:	b480      	push	{r7}
 8012c06:	b083      	sub	sp, #12
 8012c08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012c0a:	4b05      	ldr	r3, [pc, #20]	; (8012c20 <xTaskGetTickCount+0x1c>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012c10:	687b      	ldr	r3, [r7, #4]
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	370c      	adds	r7, #12
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr
 8012c1e:	bf00      	nop
 8012c20:	24001350 	.word	0x24001350

08012c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b086      	sub	sp, #24
 8012c28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012c2e:	4b4f      	ldr	r3, [pc, #316]	; (8012d6c <xTaskIncrementTick+0x148>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	f040 808f 	bne.w	8012d56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012c38:	4b4d      	ldr	r3, [pc, #308]	; (8012d70 <xTaskIncrementTick+0x14c>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012c40:	4a4b      	ldr	r2, [pc, #300]	; (8012d70 <xTaskIncrementTick+0x14c>)
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d120      	bne.n	8012c8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012c4c:	4b49      	ldr	r3, [pc, #292]	; (8012d74 <xTaskIncrementTick+0x150>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d00a      	beq.n	8012c6c <xTaskIncrementTick+0x48>
	__asm volatile
 8012c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c5a:	f383 8811 	msr	BASEPRI, r3
 8012c5e:	f3bf 8f6f 	isb	sy
 8012c62:	f3bf 8f4f 	dsb	sy
 8012c66:	603b      	str	r3, [r7, #0]
}
 8012c68:	bf00      	nop
 8012c6a:	e7fe      	b.n	8012c6a <xTaskIncrementTick+0x46>
 8012c6c:	4b41      	ldr	r3, [pc, #260]	; (8012d74 <xTaskIncrementTick+0x150>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	60fb      	str	r3, [r7, #12]
 8012c72:	4b41      	ldr	r3, [pc, #260]	; (8012d78 <xTaskIncrementTick+0x154>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	4a3f      	ldr	r2, [pc, #252]	; (8012d74 <xTaskIncrementTick+0x150>)
 8012c78:	6013      	str	r3, [r2, #0]
 8012c7a:	4a3f      	ldr	r2, [pc, #252]	; (8012d78 <xTaskIncrementTick+0x154>)
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	6013      	str	r3, [r2, #0]
 8012c80:	4b3e      	ldr	r3, [pc, #248]	; (8012d7c <xTaskIncrementTick+0x158>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	3301      	adds	r3, #1
 8012c86:	4a3d      	ldr	r2, [pc, #244]	; (8012d7c <xTaskIncrementTick+0x158>)
 8012c88:	6013      	str	r3, [r2, #0]
 8012c8a:	f000 fb6f 	bl	801336c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012c8e:	4b3c      	ldr	r3, [pc, #240]	; (8012d80 <xTaskIncrementTick+0x15c>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	693a      	ldr	r2, [r7, #16]
 8012c94:	429a      	cmp	r2, r3
 8012c96:	d349      	bcc.n	8012d2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c98:	4b36      	ldr	r3, [pc, #216]	; (8012d74 <xTaskIncrementTick+0x150>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d104      	bne.n	8012cac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ca2:	4b37      	ldr	r3, [pc, #220]	; (8012d80 <xTaskIncrementTick+0x15c>)
 8012ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ca8:	601a      	str	r2, [r3, #0]
					break;
 8012caa:	e03f      	b.n	8012d2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cac:	4b31      	ldr	r3, [pc, #196]	; (8012d74 <xTaskIncrementTick+0x150>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012cb6:	68bb      	ldr	r3, [r7, #8]
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012cbc:	693a      	ldr	r2, [r7, #16]
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d203      	bcs.n	8012ccc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012cc4:	4a2e      	ldr	r2, [pc, #184]	; (8012d80 <xTaskIncrementTick+0x15c>)
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012cca:	e02f      	b.n	8012d2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	3304      	adds	r3, #4
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7fe fea3 	bl	8011a1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d004      	beq.n	8012ce8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	3318      	adds	r3, #24
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7fe fe9a 	bl	8011a1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cec:	4b25      	ldr	r3, [pc, #148]	; (8012d84 <xTaskIncrementTick+0x160>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d903      	bls.n	8012cfc <xTaskIncrementTick+0xd8>
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cf8:	4a22      	ldr	r2, [pc, #136]	; (8012d84 <xTaskIncrementTick+0x160>)
 8012cfa:	6013      	str	r3, [r2, #0]
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d00:	4613      	mov	r3, r2
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	4413      	add	r3, r2
 8012d06:	009b      	lsls	r3, r3, #2
 8012d08:	4a1f      	ldr	r2, [pc, #124]	; (8012d88 <xTaskIncrementTick+0x164>)
 8012d0a:	441a      	add	r2, r3
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	3304      	adds	r3, #4
 8012d10:	4619      	mov	r1, r3
 8012d12:	4610      	mov	r0, r2
 8012d14:	f7fe fe25 	bl	8011962 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d1c:	4b1b      	ldr	r3, [pc, #108]	; (8012d8c <xTaskIncrementTick+0x168>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d3b8      	bcc.n	8012c98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012d26:	2301      	movs	r3, #1
 8012d28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d2a:	e7b5      	b.n	8012c98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012d2c:	4b17      	ldr	r3, [pc, #92]	; (8012d8c <xTaskIncrementTick+0x168>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d32:	4915      	ldr	r1, [pc, #84]	; (8012d88 <xTaskIncrementTick+0x164>)
 8012d34:	4613      	mov	r3, r2
 8012d36:	009b      	lsls	r3, r3, #2
 8012d38:	4413      	add	r3, r2
 8012d3a:	009b      	lsls	r3, r3, #2
 8012d3c:	440b      	add	r3, r1
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d901      	bls.n	8012d48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012d44:	2301      	movs	r3, #1
 8012d46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012d48:	4b11      	ldr	r3, [pc, #68]	; (8012d90 <xTaskIncrementTick+0x16c>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d007      	beq.n	8012d60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012d50:	2301      	movs	r3, #1
 8012d52:	617b      	str	r3, [r7, #20]
 8012d54:	e004      	b.n	8012d60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012d56:	4b0f      	ldr	r3, [pc, #60]	; (8012d94 <xTaskIncrementTick+0x170>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	4a0d      	ldr	r2, [pc, #52]	; (8012d94 <xTaskIncrementTick+0x170>)
 8012d5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012d60:	697b      	ldr	r3, [r7, #20]
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3718      	adds	r7, #24
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
 8012d6a:	bf00      	nop
 8012d6c:	24001374 	.word	0x24001374
 8012d70:	24001350 	.word	0x24001350
 8012d74:	24001304 	.word	0x24001304
 8012d78:	24001308 	.word	0x24001308
 8012d7c:	24001364 	.word	0x24001364
 8012d80:	2400136c 	.word	0x2400136c
 8012d84:	24001354 	.word	0x24001354
 8012d88:	24000e7c 	.word	0x24000e7c
 8012d8c:	24000e78 	.word	0x24000e78
 8012d90:	24001360 	.word	0x24001360
 8012d94:	2400135c 	.word	0x2400135c

08012d98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b085      	sub	sp, #20
 8012d9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012d9e:	4b28      	ldr	r3, [pc, #160]	; (8012e40 <vTaskSwitchContext+0xa8>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d003      	beq.n	8012dae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012da6:	4b27      	ldr	r3, [pc, #156]	; (8012e44 <vTaskSwitchContext+0xac>)
 8012da8:	2201      	movs	r2, #1
 8012daa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012dac:	e041      	b.n	8012e32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012dae:	4b25      	ldr	r3, [pc, #148]	; (8012e44 <vTaskSwitchContext+0xac>)
 8012db0:	2200      	movs	r2, #0
 8012db2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012db4:	4b24      	ldr	r3, [pc, #144]	; (8012e48 <vTaskSwitchContext+0xb0>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	60fb      	str	r3, [r7, #12]
 8012dba:	e010      	b.n	8012dde <vTaskSwitchContext+0x46>
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d10a      	bne.n	8012dd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8012dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc6:	f383 8811 	msr	BASEPRI, r3
 8012dca:	f3bf 8f6f 	isb	sy
 8012dce:	f3bf 8f4f 	dsb	sy
 8012dd2:	607b      	str	r3, [r7, #4]
}
 8012dd4:	bf00      	nop
 8012dd6:	e7fe      	b.n	8012dd6 <vTaskSwitchContext+0x3e>
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	3b01      	subs	r3, #1
 8012ddc:	60fb      	str	r3, [r7, #12]
 8012dde:	491b      	ldr	r1, [pc, #108]	; (8012e4c <vTaskSwitchContext+0xb4>)
 8012de0:	68fa      	ldr	r2, [r7, #12]
 8012de2:	4613      	mov	r3, r2
 8012de4:	009b      	lsls	r3, r3, #2
 8012de6:	4413      	add	r3, r2
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	440b      	add	r3, r1
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d0e4      	beq.n	8012dbc <vTaskSwitchContext+0x24>
 8012df2:	68fa      	ldr	r2, [r7, #12]
 8012df4:	4613      	mov	r3, r2
 8012df6:	009b      	lsls	r3, r3, #2
 8012df8:	4413      	add	r3, r2
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	4a13      	ldr	r2, [pc, #76]	; (8012e4c <vTaskSwitchContext+0xb4>)
 8012dfe:	4413      	add	r3, r2
 8012e00:	60bb      	str	r3, [r7, #8]
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	685b      	ldr	r3, [r3, #4]
 8012e06:	685a      	ldr	r2, [r3, #4]
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	605a      	str	r2, [r3, #4]
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	685a      	ldr	r2, [r3, #4]
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	3308      	adds	r3, #8
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d104      	bne.n	8012e22 <vTaskSwitchContext+0x8a>
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	685a      	ldr	r2, [r3, #4]
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	605a      	str	r2, [r3, #4]
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	68db      	ldr	r3, [r3, #12]
 8012e28:	4a09      	ldr	r2, [pc, #36]	; (8012e50 <vTaskSwitchContext+0xb8>)
 8012e2a:	6013      	str	r3, [r2, #0]
 8012e2c:	4a06      	ldr	r2, [pc, #24]	; (8012e48 <vTaskSwitchContext+0xb0>)
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	6013      	str	r3, [r2, #0]
}
 8012e32:	bf00      	nop
 8012e34:	3714      	adds	r7, #20
 8012e36:	46bd      	mov	sp, r7
 8012e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3c:	4770      	bx	lr
 8012e3e:	bf00      	nop
 8012e40:	24001374 	.word	0x24001374
 8012e44:	24001360 	.word	0x24001360
 8012e48:	24001354 	.word	0x24001354
 8012e4c:	24000e7c 	.word	0x24000e7c
 8012e50:	24000e78 	.word	0x24000e78

08012e54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b084      	sub	sp, #16
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d10a      	bne.n	8012e7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e68:	f383 8811 	msr	BASEPRI, r3
 8012e6c:	f3bf 8f6f 	isb	sy
 8012e70:	f3bf 8f4f 	dsb	sy
 8012e74:	60fb      	str	r3, [r7, #12]
}
 8012e76:	bf00      	nop
 8012e78:	e7fe      	b.n	8012e78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012e7a:	4b07      	ldr	r3, [pc, #28]	; (8012e98 <vTaskPlaceOnEventList+0x44>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	3318      	adds	r3, #24
 8012e80:	4619      	mov	r1, r3
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f7fe fd91 	bl	80119aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012e88:	2101      	movs	r1, #1
 8012e8a:	6838      	ldr	r0, [r7, #0]
 8012e8c:	f000 fb32 	bl	80134f4 <prvAddCurrentTaskToDelayedList>
}
 8012e90:	bf00      	nop
 8012e92:	3710      	adds	r7, #16
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}
 8012e98:	24000e78 	.word	0x24000e78

08012e9c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b086      	sub	sp, #24
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d10a      	bne.n	8012ec4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8012eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb2:	f383 8811 	msr	BASEPRI, r3
 8012eb6:	f3bf 8f6f 	isb	sy
 8012eba:	f3bf 8f4f 	dsb	sy
 8012ebe:	617b      	str	r3, [r7, #20]
}
 8012ec0:	bf00      	nop
 8012ec2:	e7fe      	b.n	8012ec2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8012ec4:	4b11      	ldr	r3, [pc, #68]	; (8012f0c <vTaskPlaceOnUnorderedEventList+0x70>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d10a      	bne.n	8012ee2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8012ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed0:	f383 8811 	msr	BASEPRI, r3
 8012ed4:	f3bf 8f6f 	isb	sy
 8012ed8:	f3bf 8f4f 	dsb	sy
 8012edc:	613b      	str	r3, [r7, #16]
}
 8012ede:	bf00      	nop
 8012ee0:	e7fe      	b.n	8012ee0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012ee2:	4b0b      	ldr	r3, [pc, #44]	; (8012f10 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	68ba      	ldr	r2, [r7, #8]
 8012ee8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8012eec:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012eee:	4b08      	ldr	r3, [pc, #32]	; (8012f10 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	3318      	adds	r3, #24
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	68f8      	ldr	r0, [r7, #12]
 8012ef8:	f7fe fd33 	bl	8011962 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012efc:	2101      	movs	r1, #1
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f000 faf8 	bl	80134f4 <prvAddCurrentTaskToDelayedList>
}
 8012f04:	bf00      	nop
 8012f06:	3718      	adds	r7, #24
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	24001374 	.word	0x24001374
 8012f10:	24000e78 	.word	0x24000e78

08012f14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b086      	sub	sp, #24
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d10a      	bne.n	8012f3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f2a:	f383 8811 	msr	BASEPRI, r3
 8012f2e:	f3bf 8f6f 	isb	sy
 8012f32:	f3bf 8f4f 	dsb	sy
 8012f36:	617b      	str	r3, [r7, #20]
}
 8012f38:	bf00      	nop
 8012f3a:	e7fe      	b.n	8012f3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012f3c:	4b0a      	ldr	r3, [pc, #40]	; (8012f68 <vTaskPlaceOnEventListRestricted+0x54>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	3318      	adds	r3, #24
 8012f42:	4619      	mov	r1, r3
 8012f44:	68f8      	ldr	r0, [r7, #12]
 8012f46:	f7fe fd0c 	bl	8011962 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d002      	beq.n	8012f56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012f56:	6879      	ldr	r1, [r7, #4]
 8012f58:	68b8      	ldr	r0, [r7, #8]
 8012f5a:	f000 facb 	bl	80134f4 <prvAddCurrentTaskToDelayedList>
	}
 8012f5e:	bf00      	nop
 8012f60:	3718      	adds	r7, #24
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	bf00      	nop
 8012f68:	24000e78 	.word	0x24000e78

08012f6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b086      	sub	sp, #24
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	68db      	ldr	r3, [r3, #12]
 8012f78:	68db      	ldr	r3, [r3, #12]
 8012f7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d10a      	bne.n	8012f98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f86:	f383 8811 	msr	BASEPRI, r3
 8012f8a:	f3bf 8f6f 	isb	sy
 8012f8e:	f3bf 8f4f 	dsb	sy
 8012f92:	60fb      	str	r3, [r7, #12]
}
 8012f94:	bf00      	nop
 8012f96:	e7fe      	b.n	8012f96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	3318      	adds	r3, #24
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7fe fd3d 	bl	8011a1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012fa2:	4b1e      	ldr	r3, [pc, #120]	; (801301c <xTaskRemoveFromEventList+0xb0>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d11d      	bne.n	8012fe6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012faa:	693b      	ldr	r3, [r7, #16]
 8012fac:	3304      	adds	r3, #4
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fe fd34 	bl	8011a1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fb8:	4b19      	ldr	r3, [pc, #100]	; (8013020 <xTaskRemoveFromEventList+0xb4>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d903      	bls.n	8012fc8 <xTaskRemoveFromEventList+0x5c>
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc4:	4a16      	ldr	r2, [pc, #88]	; (8013020 <xTaskRemoveFromEventList+0xb4>)
 8012fc6:	6013      	str	r3, [r2, #0]
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fcc:	4613      	mov	r3, r2
 8012fce:	009b      	lsls	r3, r3, #2
 8012fd0:	4413      	add	r3, r2
 8012fd2:	009b      	lsls	r3, r3, #2
 8012fd4:	4a13      	ldr	r2, [pc, #76]	; (8013024 <xTaskRemoveFromEventList+0xb8>)
 8012fd6:	441a      	add	r2, r3
 8012fd8:	693b      	ldr	r3, [r7, #16]
 8012fda:	3304      	adds	r3, #4
 8012fdc:	4619      	mov	r1, r3
 8012fde:	4610      	mov	r0, r2
 8012fe0:	f7fe fcbf 	bl	8011962 <vListInsertEnd>
 8012fe4:	e005      	b.n	8012ff2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	3318      	adds	r3, #24
 8012fea:	4619      	mov	r1, r3
 8012fec:	480e      	ldr	r0, [pc, #56]	; (8013028 <xTaskRemoveFromEventList+0xbc>)
 8012fee:	f7fe fcb8 	bl	8011962 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ff6:	4b0d      	ldr	r3, [pc, #52]	; (801302c <xTaskRemoveFromEventList+0xc0>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d905      	bls.n	801300c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013000:	2301      	movs	r3, #1
 8013002:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013004:	4b0a      	ldr	r3, [pc, #40]	; (8013030 <xTaskRemoveFromEventList+0xc4>)
 8013006:	2201      	movs	r2, #1
 8013008:	601a      	str	r2, [r3, #0]
 801300a:	e001      	b.n	8013010 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801300c:	2300      	movs	r3, #0
 801300e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013010:	697b      	ldr	r3, [r7, #20]
}
 8013012:	4618      	mov	r0, r3
 8013014:	3718      	adds	r7, #24
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	24001374 	.word	0x24001374
 8013020:	24001354 	.word	0x24001354
 8013024:	24000e7c 	.word	0x24000e7c
 8013028:	2400130c 	.word	0x2400130c
 801302c:	24000e78 	.word	0x24000e78
 8013030:	24001360 	.word	0x24001360

08013034 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b086      	sub	sp, #24
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801303e:	4b29      	ldr	r3, [pc, #164]	; (80130e4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d10a      	bne.n	801305c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8013046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304a:	f383 8811 	msr	BASEPRI, r3
 801304e:	f3bf 8f6f 	isb	sy
 8013052:	f3bf 8f4f 	dsb	sy
 8013056:	613b      	str	r3, [r7, #16]
}
 8013058:	bf00      	nop
 801305a:	e7fe      	b.n	801305a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	68db      	ldr	r3, [r3, #12]
 801306a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d10a      	bne.n	8013088 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8013072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013076:	f383 8811 	msr	BASEPRI, r3
 801307a:	f3bf 8f6f 	isb	sy
 801307e:	f3bf 8f4f 	dsb	sy
 8013082:	60fb      	str	r3, [r7, #12]
}
 8013084:	bf00      	nop
 8013086:	e7fe      	b.n	8013086 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f7fe fcc7 	bl	8011a1c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	3304      	adds	r3, #4
 8013092:	4618      	mov	r0, r3
 8013094:	f7fe fcc2 	bl	8011a1c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801309c:	4b12      	ldr	r3, [pc, #72]	; (80130e8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d903      	bls.n	80130ac <vTaskRemoveFromUnorderedEventList+0x78>
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130a8:	4a0f      	ldr	r2, [pc, #60]	; (80130e8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80130aa:	6013      	str	r3, [r2, #0]
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130b0:	4613      	mov	r3, r2
 80130b2:	009b      	lsls	r3, r3, #2
 80130b4:	4413      	add	r3, r2
 80130b6:	009b      	lsls	r3, r3, #2
 80130b8:	4a0c      	ldr	r2, [pc, #48]	; (80130ec <vTaskRemoveFromUnorderedEventList+0xb8>)
 80130ba:	441a      	add	r2, r3
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	3304      	adds	r3, #4
 80130c0:	4619      	mov	r1, r3
 80130c2:	4610      	mov	r0, r2
 80130c4:	f7fe fc4d 	bl	8011962 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130cc:	4b08      	ldr	r3, [pc, #32]	; (80130f0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d902      	bls.n	80130dc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80130d6:	4b07      	ldr	r3, [pc, #28]	; (80130f4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80130d8:	2201      	movs	r2, #1
 80130da:	601a      	str	r2, [r3, #0]
	}
}
 80130dc:	bf00      	nop
 80130de:	3718      	adds	r7, #24
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	24001374 	.word	0x24001374
 80130e8:	24001354 	.word	0x24001354
 80130ec:	24000e7c 	.word	0x24000e7c
 80130f0:	24000e78 	.word	0x24000e78
 80130f4:	24001360 	.word	0x24001360

080130f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80130f8:	b480      	push	{r7}
 80130fa:	b083      	sub	sp, #12
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013100:	4b06      	ldr	r3, [pc, #24]	; (801311c <vTaskInternalSetTimeOutState+0x24>)
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013108:	4b05      	ldr	r3, [pc, #20]	; (8013120 <vTaskInternalSetTimeOutState+0x28>)
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	605a      	str	r2, [r3, #4]
}
 8013110:	bf00      	nop
 8013112:	370c      	adds	r7, #12
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr
 801311c:	24001364 	.word	0x24001364
 8013120:	24001350 	.word	0x24001350

08013124 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b088      	sub	sp, #32
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d10a      	bne.n	801314a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013138:	f383 8811 	msr	BASEPRI, r3
 801313c:	f3bf 8f6f 	isb	sy
 8013140:	f3bf 8f4f 	dsb	sy
 8013144:	613b      	str	r3, [r7, #16]
}
 8013146:	bf00      	nop
 8013148:	e7fe      	b.n	8013148 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d10a      	bne.n	8013166 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013154:	f383 8811 	msr	BASEPRI, r3
 8013158:	f3bf 8f6f 	isb	sy
 801315c:	f3bf 8f4f 	dsb	sy
 8013160:	60fb      	str	r3, [r7, #12]
}
 8013162:	bf00      	nop
 8013164:	e7fe      	b.n	8013164 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013166:	f000 feb5 	bl	8013ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801316a:	4b1d      	ldr	r3, [pc, #116]	; (80131e0 <xTaskCheckForTimeOut+0xbc>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	685b      	ldr	r3, [r3, #4]
 8013174:	69ba      	ldr	r2, [r7, #24]
 8013176:	1ad3      	subs	r3, r2, r3
 8013178:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013182:	d102      	bne.n	801318a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013184:	2300      	movs	r3, #0
 8013186:	61fb      	str	r3, [r7, #28]
 8013188:	e023      	b.n	80131d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	4b15      	ldr	r3, [pc, #84]	; (80131e4 <xTaskCheckForTimeOut+0xc0>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	429a      	cmp	r2, r3
 8013194:	d007      	beq.n	80131a6 <xTaskCheckForTimeOut+0x82>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	69ba      	ldr	r2, [r7, #24]
 801319c:	429a      	cmp	r2, r3
 801319e:	d302      	bcc.n	80131a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80131a0:	2301      	movs	r3, #1
 80131a2:	61fb      	str	r3, [r7, #28]
 80131a4:	e015      	b.n	80131d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	697a      	ldr	r2, [r7, #20]
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d20b      	bcs.n	80131c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	681a      	ldr	r2, [r3, #0]
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	1ad2      	subs	r2, r2, r3
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f7ff ff9b 	bl	80130f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80131c2:	2300      	movs	r3, #0
 80131c4:	61fb      	str	r3, [r7, #28]
 80131c6:	e004      	b.n	80131d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	2200      	movs	r2, #0
 80131cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80131ce:	2301      	movs	r3, #1
 80131d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80131d2:	f000 feaf 	bl	8013f34 <vPortExitCritical>

	return xReturn;
 80131d6:	69fb      	ldr	r3, [r7, #28]
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3720      	adds	r7, #32
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	24001350 	.word	0x24001350
 80131e4:	24001364 	.word	0x24001364

080131e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80131e8:	b480      	push	{r7}
 80131ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80131ec:	4b03      	ldr	r3, [pc, #12]	; (80131fc <vTaskMissedYield+0x14>)
 80131ee:	2201      	movs	r2, #1
 80131f0:	601a      	str	r2, [r3, #0]
}
 80131f2:	bf00      	nop
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr
 80131fc:	24001360 	.word	0x24001360

08013200 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013208:	f000 f852 	bl	80132b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801320c:	4b06      	ldr	r3, [pc, #24]	; (8013228 <prvIdleTask+0x28>)
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	2b01      	cmp	r3, #1
 8013212:	d9f9      	bls.n	8013208 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013214:	4b05      	ldr	r3, [pc, #20]	; (801322c <prvIdleTask+0x2c>)
 8013216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801321a:	601a      	str	r2, [r3, #0]
 801321c:	f3bf 8f4f 	dsb	sy
 8013220:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013224:	e7f0      	b.n	8013208 <prvIdleTask+0x8>
 8013226:	bf00      	nop
 8013228:	24000e7c 	.word	0x24000e7c
 801322c:	e000ed04 	.word	0xe000ed04

08013230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013236:	2300      	movs	r3, #0
 8013238:	607b      	str	r3, [r7, #4]
 801323a:	e00c      	b.n	8013256 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	4613      	mov	r3, r2
 8013240:	009b      	lsls	r3, r3, #2
 8013242:	4413      	add	r3, r2
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	4a12      	ldr	r2, [pc, #72]	; (8013290 <prvInitialiseTaskLists+0x60>)
 8013248:	4413      	add	r3, r2
 801324a:	4618      	mov	r0, r3
 801324c:	f7fe fb5c 	bl	8011908 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	3301      	adds	r3, #1
 8013254:	607b      	str	r3, [r7, #4]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2b37      	cmp	r3, #55	; 0x37
 801325a:	d9ef      	bls.n	801323c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801325c:	480d      	ldr	r0, [pc, #52]	; (8013294 <prvInitialiseTaskLists+0x64>)
 801325e:	f7fe fb53 	bl	8011908 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013262:	480d      	ldr	r0, [pc, #52]	; (8013298 <prvInitialiseTaskLists+0x68>)
 8013264:	f7fe fb50 	bl	8011908 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013268:	480c      	ldr	r0, [pc, #48]	; (801329c <prvInitialiseTaskLists+0x6c>)
 801326a:	f7fe fb4d 	bl	8011908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801326e:	480c      	ldr	r0, [pc, #48]	; (80132a0 <prvInitialiseTaskLists+0x70>)
 8013270:	f7fe fb4a 	bl	8011908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013274:	480b      	ldr	r0, [pc, #44]	; (80132a4 <prvInitialiseTaskLists+0x74>)
 8013276:	f7fe fb47 	bl	8011908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801327a:	4b0b      	ldr	r3, [pc, #44]	; (80132a8 <prvInitialiseTaskLists+0x78>)
 801327c:	4a05      	ldr	r2, [pc, #20]	; (8013294 <prvInitialiseTaskLists+0x64>)
 801327e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013280:	4b0a      	ldr	r3, [pc, #40]	; (80132ac <prvInitialiseTaskLists+0x7c>)
 8013282:	4a05      	ldr	r2, [pc, #20]	; (8013298 <prvInitialiseTaskLists+0x68>)
 8013284:	601a      	str	r2, [r3, #0]
}
 8013286:	bf00      	nop
 8013288:	3708      	adds	r7, #8
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	24000e7c 	.word	0x24000e7c
 8013294:	240012dc 	.word	0x240012dc
 8013298:	240012f0 	.word	0x240012f0
 801329c:	2400130c 	.word	0x2400130c
 80132a0:	24001320 	.word	0x24001320
 80132a4:	24001338 	.word	0x24001338
 80132a8:	24001304 	.word	0x24001304
 80132ac:	24001308 	.word	0x24001308

080132b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80132b6:	e019      	b.n	80132ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80132b8:	f000 fe0c 	bl	8013ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132bc:	4b10      	ldr	r3, [pc, #64]	; (8013300 <prvCheckTasksWaitingTermination+0x50>)
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	68db      	ldr	r3, [r3, #12]
 80132c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	3304      	adds	r3, #4
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7fe fba7 	bl	8011a1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80132ce:	4b0d      	ldr	r3, [pc, #52]	; (8013304 <prvCheckTasksWaitingTermination+0x54>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	3b01      	subs	r3, #1
 80132d4:	4a0b      	ldr	r2, [pc, #44]	; (8013304 <prvCheckTasksWaitingTermination+0x54>)
 80132d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80132d8:	4b0b      	ldr	r3, [pc, #44]	; (8013308 <prvCheckTasksWaitingTermination+0x58>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	3b01      	subs	r3, #1
 80132de:	4a0a      	ldr	r2, [pc, #40]	; (8013308 <prvCheckTasksWaitingTermination+0x58>)
 80132e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80132e2:	f000 fe27 	bl	8013f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f000 f810 	bl	801330c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80132ec:	4b06      	ldr	r3, [pc, #24]	; (8013308 <prvCheckTasksWaitingTermination+0x58>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d1e1      	bne.n	80132b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80132f4:	bf00      	nop
 80132f6:	bf00      	nop
 80132f8:	3708      	adds	r7, #8
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}
 80132fe:	bf00      	nop
 8013300:	24001320 	.word	0x24001320
 8013304:	2400134c 	.word	0x2400134c
 8013308:	24001334 	.word	0x24001334

0801330c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801330c:	b580      	push	{r7, lr}
 801330e:	b084      	sub	sp, #16
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801331a:	2b00      	cmp	r3, #0
 801331c:	d108      	bne.n	8013330 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013322:	4618      	mov	r0, r3
 8013324:	f000 ffc4 	bl	80142b0 <vPortFree>
				vPortFree( pxTCB );
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f000 ffc1 	bl	80142b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801332e:	e018      	b.n	8013362 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013336:	2b01      	cmp	r3, #1
 8013338:	d103      	bne.n	8013342 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f000 ffb8 	bl	80142b0 <vPortFree>
	}
 8013340:	e00f      	b.n	8013362 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013348:	2b02      	cmp	r3, #2
 801334a:	d00a      	beq.n	8013362 <prvDeleteTCB+0x56>
	__asm volatile
 801334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013350:	f383 8811 	msr	BASEPRI, r3
 8013354:	f3bf 8f6f 	isb	sy
 8013358:	f3bf 8f4f 	dsb	sy
 801335c:	60fb      	str	r3, [r7, #12]
}
 801335e:	bf00      	nop
 8013360:	e7fe      	b.n	8013360 <prvDeleteTCB+0x54>
	}
 8013362:	bf00      	nop
 8013364:	3710      	adds	r7, #16
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
	...

0801336c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801336c:	b480      	push	{r7}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013372:	4b0c      	ldr	r3, [pc, #48]	; (80133a4 <prvResetNextTaskUnblockTime+0x38>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d104      	bne.n	8013386 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801337c:	4b0a      	ldr	r3, [pc, #40]	; (80133a8 <prvResetNextTaskUnblockTime+0x3c>)
 801337e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013382:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013384:	e008      	b.n	8013398 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013386:	4b07      	ldr	r3, [pc, #28]	; (80133a4 <prvResetNextTaskUnblockTime+0x38>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	68db      	ldr	r3, [r3, #12]
 801338c:	68db      	ldr	r3, [r3, #12]
 801338e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	4a04      	ldr	r2, [pc, #16]	; (80133a8 <prvResetNextTaskUnblockTime+0x3c>)
 8013396:	6013      	str	r3, [r2, #0]
}
 8013398:	bf00      	nop
 801339a:	370c      	adds	r7, #12
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr
 80133a4:	24001304 	.word	0x24001304
 80133a8:	2400136c 	.word	0x2400136c

080133ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80133ac:	b480      	push	{r7}
 80133ae:	b083      	sub	sp, #12
 80133b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80133b2:	4b0b      	ldr	r3, [pc, #44]	; (80133e0 <xTaskGetSchedulerState+0x34>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d102      	bne.n	80133c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80133ba:	2301      	movs	r3, #1
 80133bc:	607b      	str	r3, [r7, #4]
 80133be:	e008      	b.n	80133d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133c0:	4b08      	ldr	r3, [pc, #32]	; (80133e4 <xTaskGetSchedulerState+0x38>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d102      	bne.n	80133ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80133c8:	2302      	movs	r3, #2
 80133ca:	607b      	str	r3, [r7, #4]
 80133cc:	e001      	b.n	80133d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80133ce:	2300      	movs	r3, #0
 80133d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80133d2:	687b      	ldr	r3, [r7, #4]
	}
 80133d4:	4618      	mov	r0, r3
 80133d6:	370c      	adds	r7, #12
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr
 80133e0:	24001358 	.word	0x24001358
 80133e4:	24001374 	.word	0x24001374

080133e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b086      	sub	sp, #24
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80133f4:	2300      	movs	r3, #0
 80133f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d056      	beq.n	80134ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80133fe:	4b2e      	ldr	r3, [pc, #184]	; (80134b8 <xTaskPriorityDisinherit+0xd0>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	693a      	ldr	r2, [r7, #16]
 8013404:	429a      	cmp	r2, r3
 8013406:	d00a      	beq.n	801341e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801340c:	f383 8811 	msr	BASEPRI, r3
 8013410:	f3bf 8f6f 	isb	sy
 8013414:	f3bf 8f4f 	dsb	sy
 8013418:	60fb      	str	r3, [r7, #12]
}
 801341a:	bf00      	nop
 801341c:	e7fe      	b.n	801341c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013422:	2b00      	cmp	r3, #0
 8013424:	d10a      	bne.n	801343c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801342a:	f383 8811 	msr	BASEPRI, r3
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	60bb      	str	r3, [r7, #8]
}
 8013438:	bf00      	nop
 801343a:	e7fe      	b.n	801343a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013440:	1e5a      	subs	r2, r3, #1
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013446:	693b      	ldr	r3, [r7, #16]
 8013448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801344e:	429a      	cmp	r2, r3
 8013450:	d02c      	beq.n	80134ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013456:	2b00      	cmp	r3, #0
 8013458:	d128      	bne.n	80134ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801345a:	693b      	ldr	r3, [r7, #16]
 801345c:	3304      	adds	r3, #4
 801345e:	4618      	mov	r0, r3
 8013460:	f7fe fadc 	bl	8011a1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013470:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801347c:	4b0f      	ldr	r3, [pc, #60]	; (80134bc <xTaskPriorityDisinherit+0xd4>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	429a      	cmp	r2, r3
 8013482:	d903      	bls.n	801348c <xTaskPriorityDisinherit+0xa4>
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013488:	4a0c      	ldr	r2, [pc, #48]	; (80134bc <xTaskPriorityDisinherit+0xd4>)
 801348a:	6013      	str	r3, [r2, #0]
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013490:	4613      	mov	r3, r2
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	4413      	add	r3, r2
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	4a09      	ldr	r2, [pc, #36]	; (80134c0 <xTaskPriorityDisinherit+0xd8>)
 801349a:	441a      	add	r2, r3
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	3304      	adds	r3, #4
 80134a0:	4619      	mov	r1, r3
 80134a2:	4610      	mov	r0, r2
 80134a4:	f7fe fa5d 	bl	8011962 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80134a8:	2301      	movs	r3, #1
 80134aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80134ac:	697b      	ldr	r3, [r7, #20]
	}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3718      	adds	r7, #24
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	24000e78 	.word	0x24000e78
 80134bc:	24001354 	.word	0x24001354
 80134c0:	24000e7c 	.word	0x24000e7c

080134c4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80134c4:	b480      	push	{r7}
 80134c6:	b083      	sub	sp, #12
 80134c8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80134ca:	4b09      	ldr	r3, [pc, #36]	; (80134f0 <uxTaskResetEventItemValue+0x2c>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	699b      	ldr	r3, [r3, #24]
 80134d0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134d2:	4b07      	ldr	r3, [pc, #28]	; (80134f0 <uxTaskResetEventItemValue+0x2c>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134d8:	4b05      	ldr	r3, [pc, #20]	; (80134f0 <uxTaskResetEventItemValue+0x2c>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80134e0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80134e2:	687b      	ldr	r3, [r7, #4]
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	370c      	adds	r7, #12
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr
 80134f0:	24000e78 	.word	0x24000e78

080134f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b084      	sub	sp, #16
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80134fe:	4b21      	ldr	r3, [pc, #132]	; (8013584 <prvAddCurrentTaskToDelayedList+0x90>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013504:	4b20      	ldr	r3, [pc, #128]	; (8013588 <prvAddCurrentTaskToDelayedList+0x94>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	3304      	adds	r3, #4
 801350a:	4618      	mov	r0, r3
 801350c:	f7fe fa86 	bl	8011a1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013516:	d10a      	bne.n	801352e <prvAddCurrentTaskToDelayedList+0x3a>
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d007      	beq.n	801352e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801351e:	4b1a      	ldr	r3, [pc, #104]	; (8013588 <prvAddCurrentTaskToDelayedList+0x94>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	3304      	adds	r3, #4
 8013524:	4619      	mov	r1, r3
 8013526:	4819      	ldr	r0, [pc, #100]	; (801358c <prvAddCurrentTaskToDelayedList+0x98>)
 8013528:	f7fe fa1b 	bl	8011962 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801352c:	e026      	b.n	801357c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801352e:	68fa      	ldr	r2, [r7, #12]
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	4413      	add	r3, r2
 8013534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013536:	4b14      	ldr	r3, [pc, #80]	; (8013588 <prvAddCurrentTaskToDelayedList+0x94>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	68ba      	ldr	r2, [r7, #8]
 801353c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801353e:	68ba      	ldr	r2, [r7, #8]
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	429a      	cmp	r2, r3
 8013544:	d209      	bcs.n	801355a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013546:	4b12      	ldr	r3, [pc, #72]	; (8013590 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013548:	681a      	ldr	r2, [r3, #0]
 801354a:	4b0f      	ldr	r3, [pc, #60]	; (8013588 <prvAddCurrentTaskToDelayedList+0x94>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	3304      	adds	r3, #4
 8013550:	4619      	mov	r1, r3
 8013552:	4610      	mov	r0, r2
 8013554:	f7fe fa29 	bl	80119aa <vListInsert>
}
 8013558:	e010      	b.n	801357c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801355a:	4b0e      	ldr	r3, [pc, #56]	; (8013594 <prvAddCurrentTaskToDelayedList+0xa0>)
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	4b0a      	ldr	r3, [pc, #40]	; (8013588 <prvAddCurrentTaskToDelayedList+0x94>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	3304      	adds	r3, #4
 8013564:	4619      	mov	r1, r3
 8013566:	4610      	mov	r0, r2
 8013568:	f7fe fa1f 	bl	80119aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801356c:	4b0a      	ldr	r3, [pc, #40]	; (8013598 <prvAddCurrentTaskToDelayedList+0xa4>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	68ba      	ldr	r2, [r7, #8]
 8013572:	429a      	cmp	r2, r3
 8013574:	d202      	bcs.n	801357c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013576:	4a08      	ldr	r2, [pc, #32]	; (8013598 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	6013      	str	r3, [r2, #0]
}
 801357c:	bf00      	nop
 801357e:	3710      	adds	r7, #16
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	24001350 	.word	0x24001350
 8013588:	24000e78 	.word	0x24000e78
 801358c:	24001338 	.word	0x24001338
 8013590:	24001308 	.word	0x24001308
 8013594:	24001304 	.word	0x24001304
 8013598:	2400136c 	.word	0x2400136c

0801359c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b08a      	sub	sp, #40	; 0x28
 80135a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80135a2:	2300      	movs	r3, #0
 80135a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80135a6:	f000 fb07 	bl	8013bb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80135aa:	4b1c      	ldr	r3, [pc, #112]	; (801361c <xTimerCreateTimerTask+0x80>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d021      	beq.n	80135f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80135b2:	2300      	movs	r3, #0
 80135b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80135b6:	2300      	movs	r3, #0
 80135b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80135ba:	1d3a      	adds	r2, r7, #4
 80135bc:	f107 0108 	add.w	r1, r7, #8
 80135c0:	f107 030c 	add.w	r3, r7, #12
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7fd ff97 	bl	80114f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80135ca:	6879      	ldr	r1, [r7, #4]
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	68fa      	ldr	r2, [r7, #12]
 80135d0:	9202      	str	r2, [sp, #8]
 80135d2:	9301      	str	r3, [sp, #4]
 80135d4:	2302      	movs	r3, #2
 80135d6:	9300      	str	r3, [sp, #0]
 80135d8:	2300      	movs	r3, #0
 80135da:	460a      	mov	r2, r1
 80135dc:	4910      	ldr	r1, [pc, #64]	; (8013620 <xTimerCreateTimerTask+0x84>)
 80135de:	4811      	ldr	r0, [pc, #68]	; (8013624 <xTimerCreateTimerTask+0x88>)
 80135e0:	f7ff f828 	bl	8012634 <xTaskCreateStatic>
 80135e4:	4603      	mov	r3, r0
 80135e6:	4a10      	ldr	r2, [pc, #64]	; (8013628 <xTimerCreateTimerTask+0x8c>)
 80135e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80135ea:	4b0f      	ldr	r3, [pc, #60]	; (8013628 <xTimerCreateTimerTask+0x8c>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d001      	beq.n	80135f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80135f2:	2301      	movs	r3, #1
 80135f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80135f6:	697b      	ldr	r3, [r7, #20]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d10a      	bne.n	8013612 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80135fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013600:	f383 8811 	msr	BASEPRI, r3
 8013604:	f3bf 8f6f 	isb	sy
 8013608:	f3bf 8f4f 	dsb	sy
 801360c:	613b      	str	r3, [r7, #16]
}
 801360e:	bf00      	nop
 8013610:	e7fe      	b.n	8013610 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013612:	697b      	ldr	r3, [r7, #20]
}
 8013614:	4618      	mov	r0, r3
 8013616:	3718      	adds	r7, #24
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}
 801361c:	240013a8 	.word	0x240013a8
 8013620:	080157c4 	.word	0x080157c4
 8013624:	08013761 	.word	0x08013761
 8013628:	240013ac 	.word	0x240013ac

0801362c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b08a      	sub	sp, #40	; 0x28
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	607a      	str	r2, [r7, #4]
 8013638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801363a:	2300      	movs	r3, #0
 801363c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d10a      	bne.n	801365a <xTimerGenericCommand+0x2e>
	__asm volatile
 8013644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013648:	f383 8811 	msr	BASEPRI, r3
 801364c:	f3bf 8f6f 	isb	sy
 8013650:	f3bf 8f4f 	dsb	sy
 8013654:	623b      	str	r3, [r7, #32]
}
 8013656:	bf00      	nop
 8013658:	e7fe      	b.n	8013658 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801365a:	4b1a      	ldr	r3, [pc, #104]	; (80136c4 <xTimerGenericCommand+0x98>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d02a      	beq.n	80136b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	2b05      	cmp	r3, #5
 8013672:	dc18      	bgt.n	80136a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013674:	f7ff fe9a 	bl	80133ac <xTaskGetSchedulerState>
 8013678:	4603      	mov	r3, r0
 801367a:	2b02      	cmp	r3, #2
 801367c:	d109      	bne.n	8013692 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801367e:	4b11      	ldr	r3, [pc, #68]	; (80136c4 <xTimerGenericCommand+0x98>)
 8013680:	6818      	ldr	r0, [r3, #0]
 8013682:	f107 0110 	add.w	r1, r7, #16
 8013686:	2300      	movs	r3, #0
 8013688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801368a:	f7fe fb2f 	bl	8011cec <xQueueGenericSend>
 801368e:	6278      	str	r0, [r7, #36]	; 0x24
 8013690:	e012      	b.n	80136b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013692:	4b0c      	ldr	r3, [pc, #48]	; (80136c4 <xTimerGenericCommand+0x98>)
 8013694:	6818      	ldr	r0, [r3, #0]
 8013696:	f107 0110 	add.w	r1, r7, #16
 801369a:	2300      	movs	r3, #0
 801369c:	2200      	movs	r2, #0
 801369e:	f7fe fb25 	bl	8011cec <xQueueGenericSend>
 80136a2:	6278      	str	r0, [r7, #36]	; 0x24
 80136a4:	e008      	b.n	80136b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80136a6:	4b07      	ldr	r3, [pc, #28]	; (80136c4 <xTimerGenericCommand+0x98>)
 80136a8:	6818      	ldr	r0, [r3, #0]
 80136aa:	f107 0110 	add.w	r1, r7, #16
 80136ae:	2300      	movs	r3, #0
 80136b0:	683a      	ldr	r2, [r7, #0]
 80136b2:	f7fe fc19 	bl	8011ee8 <xQueueGenericSendFromISR>
 80136b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80136b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3728      	adds	r7, #40	; 0x28
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}
 80136c2:	bf00      	nop
 80136c4:	240013a8 	.word	0x240013a8

080136c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b088      	sub	sp, #32
 80136cc:	af02      	add	r7, sp, #8
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136d2:	4b22      	ldr	r3, [pc, #136]	; (801375c <prvProcessExpiredTimer+0x94>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	68db      	ldr	r3, [r3, #12]
 80136d8:	68db      	ldr	r3, [r3, #12]
 80136da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	3304      	adds	r3, #4
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7fe f99b 	bl	8011a1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136ec:	f003 0304 	and.w	r3, r3, #4
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d022      	beq.n	801373a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	699a      	ldr	r2, [r3, #24]
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	18d1      	adds	r1, r2, r3
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	683a      	ldr	r2, [r7, #0]
 8013700:	6978      	ldr	r0, [r7, #20]
 8013702:	f000 f8d1 	bl	80138a8 <prvInsertTimerInActiveList>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d01f      	beq.n	801374c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801370c:	2300      	movs	r3, #0
 801370e:	9300      	str	r3, [sp, #0]
 8013710:	2300      	movs	r3, #0
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	2100      	movs	r1, #0
 8013716:	6978      	ldr	r0, [r7, #20]
 8013718:	f7ff ff88 	bl	801362c <xTimerGenericCommand>
 801371c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d113      	bne.n	801374c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013728:	f383 8811 	msr	BASEPRI, r3
 801372c:	f3bf 8f6f 	isb	sy
 8013730:	f3bf 8f4f 	dsb	sy
 8013734:	60fb      	str	r3, [r7, #12]
}
 8013736:	bf00      	nop
 8013738:	e7fe      	b.n	8013738 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013740:	f023 0301 	bic.w	r3, r3, #1
 8013744:	b2da      	uxtb	r2, r3
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	6a1b      	ldr	r3, [r3, #32]
 8013750:	6978      	ldr	r0, [r7, #20]
 8013752:	4798      	blx	r3
}
 8013754:	bf00      	nop
 8013756:	3718      	adds	r7, #24
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}
 801375c:	240013a0 	.word	0x240013a0

08013760 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b084      	sub	sp, #16
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013768:	f107 0308 	add.w	r3, r7, #8
 801376c:	4618      	mov	r0, r3
 801376e:	f000 f857 	bl	8013820 <prvGetNextExpireTime>
 8013772:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	4619      	mov	r1, r3
 8013778:	68f8      	ldr	r0, [r7, #12]
 801377a:	f000 f803 	bl	8013784 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801377e:	f000 f8d5 	bl	801392c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013782:	e7f1      	b.n	8013768 <prvTimerTask+0x8>

08013784 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801378e:	f7ff f98d 	bl	8012aac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013792:	f107 0308 	add.w	r3, r7, #8
 8013796:	4618      	mov	r0, r3
 8013798:	f000 f866 	bl	8013868 <prvSampleTimeNow>
 801379c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d130      	bne.n	8013806 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d10a      	bne.n	80137c0 <prvProcessTimerOrBlockTask+0x3c>
 80137aa:	687a      	ldr	r2, [r7, #4]
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	429a      	cmp	r2, r3
 80137b0:	d806      	bhi.n	80137c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80137b2:	f7ff f989 	bl	8012ac8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80137b6:	68f9      	ldr	r1, [r7, #12]
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7ff ff85 	bl	80136c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80137be:	e024      	b.n	801380a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d008      	beq.n	80137d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80137c6:	4b13      	ldr	r3, [pc, #76]	; (8013814 <prvProcessTimerOrBlockTask+0x90>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d101      	bne.n	80137d4 <prvProcessTimerOrBlockTask+0x50>
 80137d0:	2301      	movs	r3, #1
 80137d2:	e000      	b.n	80137d6 <prvProcessTimerOrBlockTask+0x52>
 80137d4:	2300      	movs	r3, #0
 80137d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80137d8:	4b0f      	ldr	r3, [pc, #60]	; (8013818 <prvProcessTimerOrBlockTask+0x94>)
 80137da:	6818      	ldr	r0, [r3, #0]
 80137dc:	687a      	ldr	r2, [r7, #4]
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	1ad3      	subs	r3, r2, r3
 80137e2:	683a      	ldr	r2, [r7, #0]
 80137e4:	4619      	mov	r1, r3
 80137e6:	f7fe fef1 	bl	80125cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80137ea:	f7ff f96d 	bl	8012ac8 <xTaskResumeAll>
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d10a      	bne.n	801380a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80137f4:	4b09      	ldr	r3, [pc, #36]	; (801381c <prvProcessTimerOrBlockTask+0x98>)
 80137f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137fa:	601a      	str	r2, [r3, #0]
 80137fc:	f3bf 8f4f 	dsb	sy
 8013800:	f3bf 8f6f 	isb	sy
}
 8013804:	e001      	b.n	801380a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013806:	f7ff f95f 	bl	8012ac8 <xTaskResumeAll>
}
 801380a:	bf00      	nop
 801380c:	3710      	adds	r7, #16
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	240013a4 	.word	0x240013a4
 8013818:	240013a8 	.word	0x240013a8
 801381c:	e000ed04 	.word	0xe000ed04

08013820 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013820:	b480      	push	{r7}
 8013822:	b085      	sub	sp, #20
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013828:	4b0e      	ldr	r3, [pc, #56]	; (8013864 <prvGetNextExpireTime+0x44>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d101      	bne.n	8013836 <prvGetNextExpireTime+0x16>
 8013832:	2201      	movs	r2, #1
 8013834:	e000      	b.n	8013838 <prvGetNextExpireTime+0x18>
 8013836:	2200      	movs	r2, #0
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d105      	bne.n	8013850 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013844:	4b07      	ldr	r3, [pc, #28]	; (8013864 <prvGetNextExpireTime+0x44>)
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	68db      	ldr	r3, [r3, #12]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	60fb      	str	r3, [r7, #12]
 801384e:	e001      	b.n	8013854 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013850:	2300      	movs	r3, #0
 8013852:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013854:	68fb      	ldr	r3, [r7, #12]
}
 8013856:	4618      	mov	r0, r3
 8013858:	3714      	adds	r7, #20
 801385a:	46bd      	mov	sp, r7
 801385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop
 8013864:	240013a0 	.word	0x240013a0

08013868 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b084      	sub	sp, #16
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013870:	f7ff f9c8 	bl	8012c04 <xTaskGetTickCount>
 8013874:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013876:	4b0b      	ldr	r3, [pc, #44]	; (80138a4 <prvSampleTimeNow+0x3c>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	68fa      	ldr	r2, [r7, #12]
 801387c:	429a      	cmp	r2, r3
 801387e:	d205      	bcs.n	801388c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013880:	f000 f936 	bl	8013af0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2201      	movs	r2, #1
 8013888:	601a      	str	r2, [r3, #0]
 801388a:	e002      	b.n	8013892 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2200      	movs	r2, #0
 8013890:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013892:	4a04      	ldr	r2, [pc, #16]	; (80138a4 <prvSampleTimeNow+0x3c>)
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013898:	68fb      	ldr	r3, [r7, #12]
}
 801389a:	4618      	mov	r0, r3
 801389c:	3710      	adds	r7, #16
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	bf00      	nop
 80138a4:	240013b0 	.word	0x240013b0

080138a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b086      	sub	sp, #24
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	60b9      	str	r1, [r7, #8]
 80138b2:	607a      	str	r2, [r7, #4]
 80138b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80138b6:	2300      	movs	r3, #0
 80138b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	68ba      	ldr	r2, [r7, #8]
 80138be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	68fa      	ldr	r2, [r7, #12]
 80138c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d812      	bhi.n	80138f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	1ad2      	subs	r2, r2, r3
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	699b      	ldr	r3, [r3, #24]
 80138d8:	429a      	cmp	r2, r3
 80138da:	d302      	bcc.n	80138e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80138dc:	2301      	movs	r3, #1
 80138de:	617b      	str	r3, [r7, #20]
 80138e0:	e01b      	b.n	801391a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80138e2:	4b10      	ldr	r3, [pc, #64]	; (8013924 <prvInsertTimerInActiveList+0x7c>)
 80138e4:	681a      	ldr	r2, [r3, #0]
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	3304      	adds	r3, #4
 80138ea:	4619      	mov	r1, r3
 80138ec:	4610      	mov	r0, r2
 80138ee:	f7fe f85c 	bl	80119aa <vListInsert>
 80138f2:	e012      	b.n	801391a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80138f4:	687a      	ldr	r2, [r7, #4]
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d206      	bcs.n	801390a <prvInsertTimerInActiveList+0x62>
 80138fc:	68ba      	ldr	r2, [r7, #8]
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	429a      	cmp	r2, r3
 8013902:	d302      	bcc.n	801390a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013904:	2301      	movs	r3, #1
 8013906:	617b      	str	r3, [r7, #20]
 8013908:	e007      	b.n	801391a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801390a:	4b07      	ldr	r3, [pc, #28]	; (8013928 <prvInsertTimerInActiveList+0x80>)
 801390c:	681a      	ldr	r2, [r3, #0]
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	3304      	adds	r3, #4
 8013912:	4619      	mov	r1, r3
 8013914:	4610      	mov	r0, r2
 8013916:	f7fe f848 	bl	80119aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 801391a:	697b      	ldr	r3, [r7, #20]
}
 801391c:	4618      	mov	r0, r3
 801391e:	3718      	adds	r7, #24
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}
 8013924:	240013a4 	.word	0x240013a4
 8013928:	240013a0 	.word	0x240013a0

0801392c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b08e      	sub	sp, #56	; 0x38
 8013930:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013932:	e0ca      	b.n	8013aca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2b00      	cmp	r3, #0
 8013938:	da18      	bge.n	801396c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801393a:	1d3b      	adds	r3, r7, #4
 801393c:	3304      	adds	r3, #4
 801393e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013942:	2b00      	cmp	r3, #0
 8013944:	d10a      	bne.n	801395c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801394a:	f383 8811 	msr	BASEPRI, r3
 801394e:	f3bf 8f6f 	isb	sy
 8013952:	f3bf 8f4f 	dsb	sy
 8013956:	61fb      	str	r3, [r7, #28]
}
 8013958:	bf00      	nop
 801395a:	e7fe      	b.n	801395a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013962:	6850      	ldr	r0, [r2, #4]
 8013964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013966:	6892      	ldr	r2, [r2, #8]
 8013968:	4611      	mov	r1, r2
 801396a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2b00      	cmp	r3, #0
 8013970:	f2c0 80aa 	blt.w	8013ac8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801397a:	695b      	ldr	r3, [r3, #20]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d004      	beq.n	801398a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013982:	3304      	adds	r3, #4
 8013984:	4618      	mov	r0, r3
 8013986:	f7fe f849 	bl	8011a1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801398a:	463b      	mov	r3, r7
 801398c:	4618      	mov	r0, r3
 801398e:	f7ff ff6b 	bl	8013868 <prvSampleTimeNow>
 8013992:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2b09      	cmp	r3, #9
 8013998:	f200 8097 	bhi.w	8013aca <prvProcessReceivedCommands+0x19e>
 801399c:	a201      	add	r2, pc, #4	; (adr r2, 80139a4 <prvProcessReceivedCommands+0x78>)
 801399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139a2:	bf00      	nop
 80139a4:	080139cd 	.word	0x080139cd
 80139a8:	080139cd 	.word	0x080139cd
 80139ac:	080139cd 	.word	0x080139cd
 80139b0:	08013a41 	.word	0x08013a41
 80139b4:	08013a55 	.word	0x08013a55
 80139b8:	08013a9f 	.word	0x08013a9f
 80139bc:	080139cd 	.word	0x080139cd
 80139c0:	080139cd 	.word	0x080139cd
 80139c4:	08013a41 	.word	0x08013a41
 80139c8:	08013a55 	.word	0x08013a55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80139cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139d2:	f043 0301 	orr.w	r3, r3, #1
 80139d6:	b2da      	uxtb	r2, r3
 80139d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80139de:	68ba      	ldr	r2, [r7, #8]
 80139e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e2:	699b      	ldr	r3, [r3, #24]
 80139e4:	18d1      	adds	r1, r2, r3
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139ec:	f7ff ff5c 	bl	80138a8 <prvInsertTimerInActiveList>
 80139f0:	4603      	mov	r3, r0
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d069      	beq.n	8013aca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80139f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f8:	6a1b      	ldr	r3, [r3, #32]
 80139fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80139fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a04:	f003 0304 	and.w	r3, r3, #4
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d05e      	beq.n	8013aca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013a0c:	68ba      	ldr	r2, [r7, #8]
 8013a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a10:	699b      	ldr	r3, [r3, #24]
 8013a12:	441a      	add	r2, r3
 8013a14:	2300      	movs	r3, #0
 8013a16:	9300      	str	r3, [sp, #0]
 8013a18:	2300      	movs	r3, #0
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a1e:	f7ff fe05 	bl	801362c <xTimerGenericCommand>
 8013a22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013a24:	6a3b      	ldr	r3, [r7, #32]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d14f      	bne.n	8013aca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a2e:	f383 8811 	msr	BASEPRI, r3
 8013a32:	f3bf 8f6f 	isb	sy
 8013a36:	f3bf 8f4f 	dsb	sy
 8013a3a:	61bb      	str	r3, [r7, #24]
}
 8013a3c:	bf00      	nop
 8013a3e:	e7fe      	b.n	8013a3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a46:	f023 0301 	bic.w	r3, r3, #1
 8013a4a:	b2da      	uxtb	r2, r3
 8013a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013a52:	e03a      	b.n	8013aca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a5a:	f043 0301 	orr.w	r3, r3, #1
 8013a5e:	b2da      	uxtb	r2, r3
 8013a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013a66:	68ba      	ldr	r2, [r7, #8]
 8013a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6e:	699b      	ldr	r3, [r3, #24]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d10a      	bne.n	8013a8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a78:	f383 8811 	msr	BASEPRI, r3
 8013a7c:	f3bf 8f6f 	isb	sy
 8013a80:	f3bf 8f4f 	dsb	sy
 8013a84:	617b      	str	r3, [r7, #20]
}
 8013a86:	bf00      	nop
 8013a88:	e7fe      	b.n	8013a88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a8c:	699a      	ldr	r2, [r3, #24]
 8013a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a90:	18d1      	adds	r1, r2, r3
 8013a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a98:	f7ff ff06 	bl	80138a8 <prvInsertTimerInActiveList>
					break;
 8013a9c:	e015      	b.n	8013aca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013aa4:	f003 0302 	and.w	r3, r3, #2
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d103      	bne.n	8013ab4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013aae:	f000 fbff 	bl	80142b0 <vPortFree>
 8013ab2:	e00a      	b.n	8013aca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013aba:	f023 0301 	bic.w	r3, r3, #1
 8013abe:	b2da      	uxtb	r2, r3
 8013ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013ac6:	e000      	b.n	8013aca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013ac8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013aca:	4b08      	ldr	r3, [pc, #32]	; (8013aec <prvProcessReceivedCommands+0x1c0>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	1d39      	adds	r1, r7, #4
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7fe faa4 	bl	8012020 <xQueueReceive>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	f47f af2a 	bne.w	8013934 <prvProcessReceivedCommands+0x8>
	}
}
 8013ae0:	bf00      	nop
 8013ae2:	bf00      	nop
 8013ae4:	3730      	adds	r7, #48	; 0x30
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	240013a8 	.word	0x240013a8

08013af0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b088      	sub	sp, #32
 8013af4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013af6:	e048      	b.n	8013b8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013af8:	4b2d      	ldr	r3, [pc, #180]	; (8013bb0 <prvSwitchTimerLists+0xc0>)
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	68db      	ldr	r3, [r3, #12]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b02:	4b2b      	ldr	r3, [pc, #172]	; (8013bb0 <prvSwitchTimerLists+0xc0>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	3304      	adds	r3, #4
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7fd ff83 	bl	8011a1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	6a1b      	ldr	r3, [r3, #32]
 8013b1a:	68f8      	ldr	r0, [r7, #12]
 8013b1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b24:	f003 0304 	and.w	r3, r3, #4
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d02e      	beq.n	8013b8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	699b      	ldr	r3, [r3, #24]
 8013b30:	693a      	ldr	r2, [r7, #16]
 8013b32:	4413      	add	r3, r2
 8013b34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013b36:	68ba      	ldr	r2, [r7, #8]
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d90e      	bls.n	8013b5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	68ba      	ldr	r2, [r7, #8]
 8013b42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	68fa      	ldr	r2, [r7, #12]
 8013b48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b4a:	4b19      	ldr	r3, [pc, #100]	; (8013bb0 <prvSwitchTimerLists+0xc0>)
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	3304      	adds	r3, #4
 8013b52:	4619      	mov	r1, r3
 8013b54:	4610      	mov	r0, r2
 8013b56:	f7fd ff28 	bl	80119aa <vListInsert>
 8013b5a:	e016      	b.n	8013b8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	9300      	str	r3, [sp, #0]
 8013b60:	2300      	movs	r3, #0
 8013b62:	693a      	ldr	r2, [r7, #16]
 8013b64:	2100      	movs	r1, #0
 8013b66:	68f8      	ldr	r0, [r7, #12]
 8013b68:	f7ff fd60 	bl	801362c <xTimerGenericCommand>
 8013b6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d10a      	bne.n	8013b8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b78:	f383 8811 	msr	BASEPRI, r3
 8013b7c:	f3bf 8f6f 	isb	sy
 8013b80:	f3bf 8f4f 	dsb	sy
 8013b84:	603b      	str	r3, [r7, #0]
}
 8013b86:	bf00      	nop
 8013b88:	e7fe      	b.n	8013b88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013b8a:	4b09      	ldr	r3, [pc, #36]	; (8013bb0 <prvSwitchTimerLists+0xc0>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d1b1      	bne.n	8013af8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013b94:	4b06      	ldr	r3, [pc, #24]	; (8013bb0 <prvSwitchTimerLists+0xc0>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013b9a:	4b06      	ldr	r3, [pc, #24]	; (8013bb4 <prvSwitchTimerLists+0xc4>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	4a04      	ldr	r2, [pc, #16]	; (8013bb0 <prvSwitchTimerLists+0xc0>)
 8013ba0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013ba2:	4a04      	ldr	r2, [pc, #16]	; (8013bb4 <prvSwitchTimerLists+0xc4>)
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	6013      	str	r3, [r2, #0]
}
 8013ba8:	bf00      	nop
 8013baa:	3718      	adds	r7, #24
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}
 8013bb0:	240013a0 	.word	0x240013a0
 8013bb4:	240013a4 	.word	0x240013a4

08013bb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013bbe:	f000 f989 	bl	8013ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013bc2:	4b15      	ldr	r3, [pc, #84]	; (8013c18 <prvCheckForValidListAndQueue+0x60>)
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d120      	bne.n	8013c0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013bca:	4814      	ldr	r0, [pc, #80]	; (8013c1c <prvCheckForValidListAndQueue+0x64>)
 8013bcc:	f7fd fe9c 	bl	8011908 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013bd0:	4813      	ldr	r0, [pc, #76]	; (8013c20 <prvCheckForValidListAndQueue+0x68>)
 8013bd2:	f7fd fe99 	bl	8011908 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013bd6:	4b13      	ldr	r3, [pc, #76]	; (8013c24 <prvCheckForValidListAndQueue+0x6c>)
 8013bd8:	4a10      	ldr	r2, [pc, #64]	; (8013c1c <prvCheckForValidListAndQueue+0x64>)
 8013bda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013bdc:	4b12      	ldr	r3, [pc, #72]	; (8013c28 <prvCheckForValidListAndQueue+0x70>)
 8013bde:	4a10      	ldr	r2, [pc, #64]	; (8013c20 <prvCheckForValidListAndQueue+0x68>)
 8013be0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013be2:	2300      	movs	r3, #0
 8013be4:	9300      	str	r3, [sp, #0]
 8013be6:	4b11      	ldr	r3, [pc, #68]	; (8013c2c <prvCheckForValidListAndQueue+0x74>)
 8013be8:	4a11      	ldr	r2, [pc, #68]	; (8013c30 <prvCheckForValidListAndQueue+0x78>)
 8013bea:	2110      	movs	r1, #16
 8013bec:	200a      	movs	r0, #10
 8013bee:	f7fd ffa7 	bl	8011b40 <xQueueGenericCreateStatic>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	4a08      	ldr	r2, [pc, #32]	; (8013c18 <prvCheckForValidListAndQueue+0x60>)
 8013bf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013bf8:	4b07      	ldr	r3, [pc, #28]	; (8013c18 <prvCheckForValidListAndQueue+0x60>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d005      	beq.n	8013c0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013c00:	4b05      	ldr	r3, [pc, #20]	; (8013c18 <prvCheckForValidListAndQueue+0x60>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	490b      	ldr	r1, [pc, #44]	; (8013c34 <prvCheckForValidListAndQueue+0x7c>)
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7fe fcb6 	bl	8012578 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c0c:	f000 f992 	bl	8013f34 <vPortExitCritical>
}
 8013c10:	bf00      	nop
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	240013a8 	.word	0x240013a8
 8013c1c:	24001378 	.word	0x24001378
 8013c20:	2400138c 	.word	0x2400138c
 8013c24:	240013a0 	.word	0x240013a0
 8013c28:	240013a4 	.word	0x240013a4
 8013c2c:	24001454 	.word	0x24001454
 8013c30:	240013b4 	.word	0x240013b4
 8013c34:	080157cc 	.word	0x080157cc

08013c38 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b08a      	sub	sp, #40	; 0x28
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	60b9      	str	r1, [r7, #8]
 8013c42:	607a      	str	r2, [r7, #4]
 8013c44:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8013c46:	f06f 0301 	mvn.w	r3, #1
 8013c4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013c58:	4b06      	ldr	r3, [pc, #24]	; (8013c74 <xTimerPendFunctionCallFromISR+0x3c>)
 8013c5a:	6818      	ldr	r0, [r3, #0]
 8013c5c:	f107 0114 	add.w	r1, r7, #20
 8013c60:	2300      	movs	r3, #0
 8013c62:	683a      	ldr	r2, [r7, #0]
 8013c64:	f7fe f940 	bl	8011ee8 <xQueueGenericSendFromISR>
 8013c68:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8013c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3728      	adds	r7, #40	; 0x28
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	240013a8 	.word	0x240013a8

08013c78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b085      	sub	sp, #20
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	60f8      	str	r0, [r7, #12]
 8013c80:	60b9      	str	r1, [r7, #8]
 8013c82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	3b04      	subs	r3, #4
 8013c88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	3b04      	subs	r3, #4
 8013c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	f023 0201 	bic.w	r2, r3, #1
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	3b04      	subs	r3, #4
 8013ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013ca8:	4a0c      	ldr	r2, [pc, #48]	; (8013cdc <pxPortInitialiseStack+0x64>)
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	3b14      	subs	r3, #20
 8013cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013cb4:	687a      	ldr	r2, [r7, #4]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	3b04      	subs	r3, #4
 8013cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	f06f 0202 	mvn.w	r2, #2
 8013cc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	3b20      	subs	r3, #32
 8013ccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013cce:	68fb      	ldr	r3, [r7, #12]
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3714      	adds	r7, #20
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr
 8013cdc:	08013ce1 	.word	0x08013ce1

08013ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013ce0:	b480      	push	{r7}
 8013ce2:	b085      	sub	sp, #20
 8013ce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013cea:	4b12      	ldr	r3, [pc, #72]	; (8013d34 <prvTaskExitError+0x54>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cf2:	d00a      	beq.n	8013d0a <prvTaskExitError+0x2a>
	__asm volatile
 8013cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf8:	f383 8811 	msr	BASEPRI, r3
 8013cfc:	f3bf 8f6f 	isb	sy
 8013d00:	f3bf 8f4f 	dsb	sy
 8013d04:	60fb      	str	r3, [r7, #12]
}
 8013d06:	bf00      	nop
 8013d08:	e7fe      	b.n	8013d08 <prvTaskExitError+0x28>
	__asm volatile
 8013d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d0e:	f383 8811 	msr	BASEPRI, r3
 8013d12:	f3bf 8f6f 	isb	sy
 8013d16:	f3bf 8f4f 	dsb	sy
 8013d1a:	60bb      	str	r3, [r7, #8]
}
 8013d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013d1e:	bf00      	nop
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d0fc      	beq.n	8013d20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013d26:	bf00      	nop
 8013d28:	bf00      	nop
 8013d2a:	3714      	adds	r7, #20
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d32:	4770      	bx	lr
 8013d34:	24000098 	.word	0x24000098
	...

08013d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013d40:	4b07      	ldr	r3, [pc, #28]	; (8013d60 <pxCurrentTCBConst2>)
 8013d42:	6819      	ldr	r1, [r3, #0]
 8013d44:	6808      	ldr	r0, [r1, #0]
 8013d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d4a:	f380 8809 	msr	PSP, r0
 8013d4e:	f3bf 8f6f 	isb	sy
 8013d52:	f04f 0000 	mov.w	r0, #0
 8013d56:	f380 8811 	msr	BASEPRI, r0
 8013d5a:	4770      	bx	lr
 8013d5c:	f3af 8000 	nop.w

08013d60 <pxCurrentTCBConst2>:
 8013d60:	24000e78 	.word	0x24000e78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013d64:	bf00      	nop
 8013d66:	bf00      	nop

08013d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013d68:	4808      	ldr	r0, [pc, #32]	; (8013d8c <prvPortStartFirstTask+0x24>)
 8013d6a:	6800      	ldr	r0, [r0, #0]
 8013d6c:	6800      	ldr	r0, [r0, #0]
 8013d6e:	f380 8808 	msr	MSP, r0
 8013d72:	f04f 0000 	mov.w	r0, #0
 8013d76:	f380 8814 	msr	CONTROL, r0
 8013d7a:	b662      	cpsie	i
 8013d7c:	b661      	cpsie	f
 8013d7e:	f3bf 8f4f 	dsb	sy
 8013d82:	f3bf 8f6f 	isb	sy
 8013d86:	df00      	svc	0
 8013d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013d8a:	bf00      	nop
 8013d8c:	e000ed08 	.word	0xe000ed08

08013d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b086      	sub	sp, #24
 8013d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013d96:	4b46      	ldr	r3, [pc, #280]	; (8013eb0 <xPortStartScheduler+0x120>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	4a46      	ldr	r2, [pc, #280]	; (8013eb4 <xPortStartScheduler+0x124>)
 8013d9c:	4293      	cmp	r3, r2
 8013d9e:	d10a      	bne.n	8013db6 <xPortStartScheduler+0x26>
	__asm volatile
 8013da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da4:	f383 8811 	msr	BASEPRI, r3
 8013da8:	f3bf 8f6f 	isb	sy
 8013dac:	f3bf 8f4f 	dsb	sy
 8013db0:	613b      	str	r3, [r7, #16]
}
 8013db2:	bf00      	nop
 8013db4:	e7fe      	b.n	8013db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013db6:	4b3e      	ldr	r3, [pc, #248]	; (8013eb0 <xPortStartScheduler+0x120>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	4a3f      	ldr	r2, [pc, #252]	; (8013eb8 <xPortStartScheduler+0x128>)
 8013dbc:	4293      	cmp	r3, r2
 8013dbe:	d10a      	bne.n	8013dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8013dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc4:	f383 8811 	msr	BASEPRI, r3
 8013dc8:	f3bf 8f6f 	isb	sy
 8013dcc:	f3bf 8f4f 	dsb	sy
 8013dd0:	60fb      	str	r3, [r7, #12]
}
 8013dd2:	bf00      	nop
 8013dd4:	e7fe      	b.n	8013dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013dd6:	4b39      	ldr	r3, [pc, #228]	; (8013ebc <xPortStartScheduler+0x12c>)
 8013dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	b2db      	uxtb	r3, r3
 8013de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	22ff      	movs	r2, #255	; 0xff
 8013de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013de8:	697b      	ldr	r3, [r7, #20]
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	b2db      	uxtb	r3, r3
 8013dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013df0:	78fb      	ldrb	r3, [r7, #3]
 8013df2:	b2db      	uxtb	r3, r3
 8013df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013df8:	b2da      	uxtb	r2, r3
 8013dfa:	4b31      	ldr	r3, [pc, #196]	; (8013ec0 <xPortStartScheduler+0x130>)
 8013dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013dfe:	4b31      	ldr	r3, [pc, #196]	; (8013ec4 <xPortStartScheduler+0x134>)
 8013e00:	2207      	movs	r2, #7
 8013e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013e04:	e009      	b.n	8013e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013e06:	4b2f      	ldr	r3, [pc, #188]	; (8013ec4 <xPortStartScheduler+0x134>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	3b01      	subs	r3, #1
 8013e0c:	4a2d      	ldr	r2, [pc, #180]	; (8013ec4 <xPortStartScheduler+0x134>)
 8013e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013e10:	78fb      	ldrb	r3, [r7, #3]
 8013e12:	b2db      	uxtb	r3, r3
 8013e14:	005b      	lsls	r3, r3, #1
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013e1a:	78fb      	ldrb	r3, [r7, #3]
 8013e1c:	b2db      	uxtb	r3, r3
 8013e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e22:	2b80      	cmp	r3, #128	; 0x80
 8013e24:	d0ef      	beq.n	8013e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013e26:	4b27      	ldr	r3, [pc, #156]	; (8013ec4 <xPortStartScheduler+0x134>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	f1c3 0307 	rsb	r3, r3, #7
 8013e2e:	2b04      	cmp	r3, #4
 8013e30:	d00a      	beq.n	8013e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8013e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e36:	f383 8811 	msr	BASEPRI, r3
 8013e3a:	f3bf 8f6f 	isb	sy
 8013e3e:	f3bf 8f4f 	dsb	sy
 8013e42:	60bb      	str	r3, [r7, #8]
}
 8013e44:	bf00      	nop
 8013e46:	e7fe      	b.n	8013e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013e48:	4b1e      	ldr	r3, [pc, #120]	; (8013ec4 <xPortStartScheduler+0x134>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	021b      	lsls	r3, r3, #8
 8013e4e:	4a1d      	ldr	r2, [pc, #116]	; (8013ec4 <xPortStartScheduler+0x134>)
 8013e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013e52:	4b1c      	ldr	r3, [pc, #112]	; (8013ec4 <xPortStartScheduler+0x134>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013e5a:	4a1a      	ldr	r2, [pc, #104]	; (8013ec4 <xPortStartScheduler+0x134>)
 8013e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	b2da      	uxtb	r2, r3
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013e66:	4b18      	ldr	r3, [pc, #96]	; (8013ec8 <xPortStartScheduler+0x138>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	4a17      	ldr	r2, [pc, #92]	; (8013ec8 <xPortStartScheduler+0x138>)
 8013e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013e72:	4b15      	ldr	r3, [pc, #84]	; (8013ec8 <xPortStartScheduler+0x138>)
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	4a14      	ldr	r2, [pc, #80]	; (8013ec8 <xPortStartScheduler+0x138>)
 8013e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013e7e:	f000 f8dd 	bl	801403c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013e82:	4b12      	ldr	r3, [pc, #72]	; (8013ecc <xPortStartScheduler+0x13c>)
 8013e84:	2200      	movs	r2, #0
 8013e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013e88:	f000 f8fc 	bl	8014084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013e8c:	4b10      	ldr	r3, [pc, #64]	; (8013ed0 <xPortStartScheduler+0x140>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	4a0f      	ldr	r2, [pc, #60]	; (8013ed0 <xPortStartScheduler+0x140>)
 8013e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013e98:	f7ff ff66 	bl	8013d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013e9c:	f7fe ff7c 	bl	8012d98 <vTaskSwitchContext>
	prvTaskExitError();
 8013ea0:	f7ff ff1e 	bl	8013ce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013ea4:	2300      	movs	r3, #0
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3718      	adds	r7, #24
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	e000ed00 	.word	0xe000ed00
 8013eb4:	410fc271 	.word	0x410fc271
 8013eb8:	410fc270 	.word	0x410fc270
 8013ebc:	e000e400 	.word	0xe000e400
 8013ec0:	240014a4 	.word	0x240014a4
 8013ec4:	240014a8 	.word	0x240014a8
 8013ec8:	e000ed20 	.word	0xe000ed20
 8013ecc:	24000098 	.word	0x24000098
 8013ed0:	e000ef34 	.word	0xe000ef34

08013ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b083      	sub	sp, #12
 8013ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8013eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ede:	f383 8811 	msr	BASEPRI, r3
 8013ee2:	f3bf 8f6f 	isb	sy
 8013ee6:	f3bf 8f4f 	dsb	sy
 8013eea:	607b      	str	r3, [r7, #4]
}
 8013eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013eee:	4b0f      	ldr	r3, [pc, #60]	; (8013f2c <vPortEnterCritical+0x58>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	4a0d      	ldr	r2, [pc, #52]	; (8013f2c <vPortEnterCritical+0x58>)
 8013ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013ef8:	4b0c      	ldr	r3, [pc, #48]	; (8013f2c <vPortEnterCritical+0x58>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	2b01      	cmp	r3, #1
 8013efe:	d10f      	bne.n	8013f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013f00:	4b0b      	ldr	r3, [pc, #44]	; (8013f30 <vPortEnterCritical+0x5c>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d00a      	beq.n	8013f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8013f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f0e:	f383 8811 	msr	BASEPRI, r3
 8013f12:	f3bf 8f6f 	isb	sy
 8013f16:	f3bf 8f4f 	dsb	sy
 8013f1a:	603b      	str	r3, [r7, #0]
}
 8013f1c:	bf00      	nop
 8013f1e:	e7fe      	b.n	8013f1e <vPortEnterCritical+0x4a>
	}
}
 8013f20:	bf00      	nop
 8013f22:	370c      	adds	r7, #12
 8013f24:	46bd      	mov	sp, r7
 8013f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2a:	4770      	bx	lr
 8013f2c:	24000098 	.word	0x24000098
 8013f30:	e000ed04 	.word	0xe000ed04

08013f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013f34:	b480      	push	{r7}
 8013f36:	b083      	sub	sp, #12
 8013f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013f3a:	4b12      	ldr	r3, [pc, #72]	; (8013f84 <vPortExitCritical+0x50>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d10a      	bne.n	8013f58 <vPortExitCritical+0x24>
	__asm volatile
 8013f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f46:	f383 8811 	msr	BASEPRI, r3
 8013f4a:	f3bf 8f6f 	isb	sy
 8013f4e:	f3bf 8f4f 	dsb	sy
 8013f52:	607b      	str	r3, [r7, #4]
}
 8013f54:	bf00      	nop
 8013f56:	e7fe      	b.n	8013f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013f58:	4b0a      	ldr	r3, [pc, #40]	; (8013f84 <vPortExitCritical+0x50>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	3b01      	subs	r3, #1
 8013f5e:	4a09      	ldr	r2, [pc, #36]	; (8013f84 <vPortExitCritical+0x50>)
 8013f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013f62:	4b08      	ldr	r3, [pc, #32]	; (8013f84 <vPortExitCritical+0x50>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d105      	bne.n	8013f76 <vPortExitCritical+0x42>
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	f383 8811 	msr	BASEPRI, r3
}
 8013f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013f76:	bf00      	nop
 8013f78:	370c      	adds	r7, #12
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f80:	4770      	bx	lr
 8013f82:	bf00      	nop
 8013f84:	24000098 	.word	0x24000098
	...

08013f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013f90:	f3ef 8009 	mrs	r0, PSP
 8013f94:	f3bf 8f6f 	isb	sy
 8013f98:	4b15      	ldr	r3, [pc, #84]	; (8013ff0 <pxCurrentTCBConst>)
 8013f9a:	681a      	ldr	r2, [r3, #0]
 8013f9c:	f01e 0f10 	tst.w	lr, #16
 8013fa0:	bf08      	it	eq
 8013fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013faa:	6010      	str	r0, [r2, #0]
 8013fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013fb4:	f380 8811 	msr	BASEPRI, r0
 8013fb8:	f3bf 8f4f 	dsb	sy
 8013fbc:	f3bf 8f6f 	isb	sy
 8013fc0:	f7fe feea 	bl	8012d98 <vTaskSwitchContext>
 8013fc4:	f04f 0000 	mov.w	r0, #0
 8013fc8:	f380 8811 	msr	BASEPRI, r0
 8013fcc:	bc09      	pop	{r0, r3}
 8013fce:	6819      	ldr	r1, [r3, #0]
 8013fd0:	6808      	ldr	r0, [r1, #0]
 8013fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd6:	f01e 0f10 	tst.w	lr, #16
 8013fda:	bf08      	it	eq
 8013fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013fe0:	f380 8809 	msr	PSP, r0
 8013fe4:	f3bf 8f6f 	isb	sy
 8013fe8:	4770      	bx	lr
 8013fea:	bf00      	nop
 8013fec:	f3af 8000 	nop.w

08013ff0 <pxCurrentTCBConst>:
 8013ff0:	24000e78 	.word	0x24000e78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013ff4:	bf00      	nop
 8013ff6:	bf00      	nop

08013ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8013ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014002:	f383 8811 	msr	BASEPRI, r3
 8014006:	f3bf 8f6f 	isb	sy
 801400a:	f3bf 8f4f 	dsb	sy
 801400e:	607b      	str	r3, [r7, #4]
}
 8014010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014012:	f7fe fe07 	bl	8012c24 <xTaskIncrementTick>
 8014016:	4603      	mov	r3, r0
 8014018:	2b00      	cmp	r3, #0
 801401a:	d003      	beq.n	8014024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801401c:	4b06      	ldr	r3, [pc, #24]	; (8014038 <xPortSysTickHandler+0x40>)
 801401e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014022:	601a      	str	r2, [r3, #0]
 8014024:	2300      	movs	r3, #0
 8014026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	f383 8811 	msr	BASEPRI, r3
}
 801402e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014030:	bf00      	nop
 8014032:	3708      	adds	r7, #8
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}
 8014038:	e000ed04 	.word	0xe000ed04

0801403c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801403c:	b480      	push	{r7}
 801403e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014040:	4b0b      	ldr	r3, [pc, #44]	; (8014070 <vPortSetupTimerInterrupt+0x34>)
 8014042:	2200      	movs	r2, #0
 8014044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014046:	4b0b      	ldr	r3, [pc, #44]	; (8014074 <vPortSetupTimerInterrupt+0x38>)
 8014048:	2200      	movs	r2, #0
 801404a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801404c:	4b0a      	ldr	r3, [pc, #40]	; (8014078 <vPortSetupTimerInterrupt+0x3c>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	4a0a      	ldr	r2, [pc, #40]	; (801407c <vPortSetupTimerInterrupt+0x40>)
 8014052:	fba2 2303 	umull	r2, r3, r2, r3
 8014056:	099b      	lsrs	r3, r3, #6
 8014058:	4a09      	ldr	r2, [pc, #36]	; (8014080 <vPortSetupTimerInterrupt+0x44>)
 801405a:	3b01      	subs	r3, #1
 801405c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801405e:	4b04      	ldr	r3, [pc, #16]	; (8014070 <vPortSetupTimerInterrupt+0x34>)
 8014060:	2207      	movs	r2, #7
 8014062:	601a      	str	r2, [r3, #0]
}
 8014064:	bf00      	nop
 8014066:	46bd      	mov	sp, r7
 8014068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406c:	4770      	bx	lr
 801406e:	bf00      	nop
 8014070:	e000e010 	.word	0xe000e010
 8014074:	e000e018 	.word	0xe000e018
 8014078:	24000088 	.word	0x24000088
 801407c:	10624dd3 	.word	0x10624dd3
 8014080:	e000e014 	.word	0xe000e014

08014084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014094 <vPortEnableVFP+0x10>
 8014088:	6801      	ldr	r1, [r0, #0]
 801408a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801408e:	6001      	str	r1, [r0, #0]
 8014090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014092:	bf00      	nop
 8014094:	e000ed88 	.word	0xe000ed88

08014098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014098:	b480      	push	{r7}
 801409a:	b085      	sub	sp, #20
 801409c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801409e:	f3ef 8305 	mrs	r3, IPSR
 80140a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	2b0f      	cmp	r3, #15
 80140a8:	d914      	bls.n	80140d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80140aa:	4a17      	ldr	r2, [pc, #92]	; (8014108 <vPortValidateInterruptPriority+0x70>)
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	4413      	add	r3, r2
 80140b0:	781b      	ldrb	r3, [r3, #0]
 80140b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80140b4:	4b15      	ldr	r3, [pc, #84]	; (801410c <vPortValidateInterruptPriority+0x74>)
 80140b6:	781b      	ldrb	r3, [r3, #0]
 80140b8:	7afa      	ldrb	r2, [r7, #11]
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d20a      	bcs.n	80140d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80140be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c2:	f383 8811 	msr	BASEPRI, r3
 80140c6:	f3bf 8f6f 	isb	sy
 80140ca:	f3bf 8f4f 	dsb	sy
 80140ce:	607b      	str	r3, [r7, #4]
}
 80140d0:	bf00      	nop
 80140d2:	e7fe      	b.n	80140d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80140d4:	4b0e      	ldr	r3, [pc, #56]	; (8014110 <vPortValidateInterruptPriority+0x78>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80140dc:	4b0d      	ldr	r3, [pc, #52]	; (8014114 <vPortValidateInterruptPriority+0x7c>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d90a      	bls.n	80140fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80140e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e8:	f383 8811 	msr	BASEPRI, r3
 80140ec:	f3bf 8f6f 	isb	sy
 80140f0:	f3bf 8f4f 	dsb	sy
 80140f4:	603b      	str	r3, [r7, #0]
}
 80140f6:	bf00      	nop
 80140f8:	e7fe      	b.n	80140f8 <vPortValidateInterruptPriority+0x60>
	}
 80140fa:	bf00      	nop
 80140fc:	3714      	adds	r7, #20
 80140fe:	46bd      	mov	sp, r7
 8014100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014104:	4770      	bx	lr
 8014106:	bf00      	nop
 8014108:	e000e3f0 	.word	0xe000e3f0
 801410c:	240014a4 	.word	0x240014a4
 8014110:	e000ed0c 	.word	0xe000ed0c
 8014114:	240014a8 	.word	0x240014a8

08014118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b08a      	sub	sp, #40	; 0x28
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014120:	2300      	movs	r3, #0
 8014122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014124:	f7fe fcc2 	bl	8012aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014128:	4b5b      	ldr	r3, [pc, #364]	; (8014298 <pvPortMalloc+0x180>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d101      	bne.n	8014134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014130:	f000 f920 	bl	8014374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014134:	4b59      	ldr	r3, [pc, #356]	; (801429c <pvPortMalloc+0x184>)
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	4013      	ands	r3, r2
 801413c:	2b00      	cmp	r3, #0
 801413e:	f040 8093 	bne.w	8014268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d01d      	beq.n	8014184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014148:	2208      	movs	r2, #8
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	4413      	add	r3, r2
 801414e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f003 0307 	and.w	r3, r3, #7
 8014156:	2b00      	cmp	r3, #0
 8014158:	d014      	beq.n	8014184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f023 0307 	bic.w	r3, r3, #7
 8014160:	3308      	adds	r3, #8
 8014162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f003 0307 	and.w	r3, r3, #7
 801416a:	2b00      	cmp	r3, #0
 801416c:	d00a      	beq.n	8014184 <pvPortMalloc+0x6c>
	__asm volatile
 801416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014172:	f383 8811 	msr	BASEPRI, r3
 8014176:	f3bf 8f6f 	isb	sy
 801417a:	f3bf 8f4f 	dsb	sy
 801417e:	617b      	str	r3, [r7, #20]
}
 8014180:	bf00      	nop
 8014182:	e7fe      	b.n	8014182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d06e      	beq.n	8014268 <pvPortMalloc+0x150>
 801418a:	4b45      	ldr	r3, [pc, #276]	; (80142a0 <pvPortMalloc+0x188>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	429a      	cmp	r2, r3
 8014192:	d869      	bhi.n	8014268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014194:	4b43      	ldr	r3, [pc, #268]	; (80142a4 <pvPortMalloc+0x18c>)
 8014196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014198:	4b42      	ldr	r3, [pc, #264]	; (80142a4 <pvPortMalloc+0x18c>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801419e:	e004      	b.n	80141aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80141a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80141a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ac:	685b      	ldr	r3, [r3, #4]
 80141ae:	687a      	ldr	r2, [r7, #4]
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d903      	bls.n	80141bc <pvPortMalloc+0xa4>
 80141b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d1f1      	bne.n	80141a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80141bc:	4b36      	ldr	r3, [pc, #216]	; (8014298 <pvPortMalloc+0x180>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d050      	beq.n	8014268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80141c6:	6a3b      	ldr	r3, [r7, #32]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	2208      	movs	r2, #8
 80141cc:	4413      	add	r3, r2
 80141ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80141d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d2:	681a      	ldr	r2, [r3, #0]
 80141d4:	6a3b      	ldr	r3, [r7, #32]
 80141d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80141d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141da:	685a      	ldr	r2, [r3, #4]
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	1ad2      	subs	r2, r2, r3
 80141e0:	2308      	movs	r3, #8
 80141e2:	005b      	lsls	r3, r3, #1
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d91f      	bls.n	8014228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80141e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	4413      	add	r3, r2
 80141ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	f003 0307 	and.w	r3, r3, #7
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d00a      	beq.n	8014210 <pvPortMalloc+0xf8>
	__asm volatile
 80141fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fe:	f383 8811 	msr	BASEPRI, r3
 8014202:	f3bf 8f6f 	isb	sy
 8014206:	f3bf 8f4f 	dsb	sy
 801420a:	613b      	str	r3, [r7, #16]
}
 801420c:	bf00      	nop
 801420e:	e7fe      	b.n	801420e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014212:	685a      	ldr	r2, [r3, #4]
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	1ad2      	subs	r2, r2, r3
 8014218:	69bb      	ldr	r3, [r7, #24]
 801421a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421e:	687a      	ldr	r2, [r7, #4]
 8014220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014222:	69b8      	ldr	r0, [r7, #24]
 8014224:	f000 f908 	bl	8014438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014228:	4b1d      	ldr	r3, [pc, #116]	; (80142a0 <pvPortMalloc+0x188>)
 801422a:	681a      	ldr	r2, [r3, #0]
 801422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	1ad3      	subs	r3, r2, r3
 8014232:	4a1b      	ldr	r2, [pc, #108]	; (80142a0 <pvPortMalloc+0x188>)
 8014234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014236:	4b1a      	ldr	r3, [pc, #104]	; (80142a0 <pvPortMalloc+0x188>)
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	4b1b      	ldr	r3, [pc, #108]	; (80142a8 <pvPortMalloc+0x190>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	429a      	cmp	r2, r3
 8014240:	d203      	bcs.n	801424a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014242:	4b17      	ldr	r3, [pc, #92]	; (80142a0 <pvPortMalloc+0x188>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4a18      	ldr	r2, [pc, #96]	; (80142a8 <pvPortMalloc+0x190>)
 8014248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424c:	685a      	ldr	r2, [r3, #4]
 801424e:	4b13      	ldr	r3, [pc, #76]	; (801429c <pvPortMalloc+0x184>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	431a      	orrs	r2, r3
 8014254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425a:	2200      	movs	r2, #0
 801425c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801425e:	4b13      	ldr	r3, [pc, #76]	; (80142ac <pvPortMalloc+0x194>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	3301      	adds	r3, #1
 8014264:	4a11      	ldr	r2, [pc, #68]	; (80142ac <pvPortMalloc+0x194>)
 8014266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014268:	f7fe fc2e 	bl	8012ac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801426c:	69fb      	ldr	r3, [r7, #28]
 801426e:	f003 0307 	and.w	r3, r3, #7
 8014272:	2b00      	cmp	r3, #0
 8014274:	d00a      	beq.n	801428c <pvPortMalloc+0x174>
	__asm volatile
 8014276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801427a:	f383 8811 	msr	BASEPRI, r3
 801427e:	f3bf 8f6f 	isb	sy
 8014282:	f3bf 8f4f 	dsb	sy
 8014286:	60fb      	str	r3, [r7, #12]
}
 8014288:	bf00      	nop
 801428a:	e7fe      	b.n	801428a <pvPortMalloc+0x172>
	return pvReturn;
 801428c:	69fb      	ldr	r3, [r7, #28]
}
 801428e:	4618      	mov	r0, r3
 8014290:	3728      	adds	r7, #40	; 0x28
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}
 8014296:	bf00      	nop
 8014298:	240050b4 	.word	0x240050b4
 801429c:	240050c8 	.word	0x240050c8
 80142a0:	240050b8 	.word	0x240050b8
 80142a4:	240050ac 	.word	0x240050ac
 80142a8:	240050bc 	.word	0x240050bc
 80142ac:	240050c0 	.word	0x240050c0

080142b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b086      	sub	sp, #24
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d04d      	beq.n	801435e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80142c2:	2308      	movs	r3, #8
 80142c4:	425b      	negs	r3, r3
 80142c6:	697a      	ldr	r2, [r7, #20]
 80142c8:	4413      	add	r3, r2
 80142ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80142cc:	697b      	ldr	r3, [r7, #20]
 80142ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	685a      	ldr	r2, [r3, #4]
 80142d4:	4b24      	ldr	r3, [pc, #144]	; (8014368 <vPortFree+0xb8>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	4013      	ands	r3, r2
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d10a      	bne.n	80142f4 <vPortFree+0x44>
	__asm volatile
 80142de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142e2:	f383 8811 	msr	BASEPRI, r3
 80142e6:	f3bf 8f6f 	isb	sy
 80142ea:	f3bf 8f4f 	dsb	sy
 80142ee:	60fb      	str	r3, [r7, #12]
}
 80142f0:	bf00      	nop
 80142f2:	e7fe      	b.n	80142f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80142f4:	693b      	ldr	r3, [r7, #16]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d00a      	beq.n	8014312 <vPortFree+0x62>
	__asm volatile
 80142fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014300:	f383 8811 	msr	BASEPRI, r3
 8014304:	f3bf 8f6f 	isb	sy
 8014308:	f3bf 8f4f 	dsb	sy
 801430c:	60bb      	str	r3, [r7, #8]
}
 801430e:	bf00      	nop
 8014310:	e7fe      	b.n	8014310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	685a      	ldr	r2, [r3, #4]
 8014316:	4b14      	ldr	r3, [pc, #80]	; (8014368 <vPortFree+0xb8>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	4013      	ands	r3, r2
 801431c:	2b00      	cmp	r3, #0
 801431e:	d01e      	beq.n	801435e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d11a      	bne.n	801435e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	685a      	ldr	r2, [r3, #4]
 801432c:	4b0e      	ldr	r3, [pc, #56]	; (8014368 <vPortFree+0xb8>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	43db      	mvns	r3, r3
 8014332:	401a      	ands	r2, r3
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014338:	f7fe fbb8 	bl	8012aac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	685a      	ldr	r2, [r3, #4]
 8014340:	4b0a      	ldr	r3, [pc, #40]	; (801436c <vPortFree+0xbc>)
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	4413      	add	r3, r2
 8014346:	4a09      	ldr	r2, [pc, #36]	; (801436c <vPortFree+0xbc>)
 8014348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801434a:	6938      	ldr	r0, [r7, #16]
 801434c:	f000 f874 	bl	8014438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014350:	4b07      	ldr	r3, [pc, #28]	; (8014370 <vPortFree+0xc0>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	3301      	adds	r3, #1
 8014356:	4a06      	ldr	r2, [pc, #24]	; (8014370 <vPortFree+0xc0>)
 8014358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801435a:	f7fe fbb5 	bl	8012ac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801435e:	bf00      	nop
 8014360:	3718      	adds	r7, #24
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	240050c8 	.word	0x240050c8
 801436c:	240050b8 	.word	0x240050b8
 8014370:	240050c4 	.word	0x240050c4

08014374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014374:	b480      	push	{r7}
 8014376:	b085      	sub	sp, #20
 8014378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801437a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801437e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014380:	4b27      	ldr	r3, [pc, #156]	; (8014420 <prvHeapInit+0xac>)
 8014382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	f003 0307 	and.w	r3, r3, #7
 801438a:	2b00      	cmp	r3, #0
 801438c:	d00c      	beq.n	80143a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	3307      	adds	r3, #7
 8014392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	f023 0307 	bic.w	r3, r3, #7
 801439a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801439c:	68ba      	ldr	r2, [r7, #8]
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	1ad3      	subs	r3, r2, r3
 80143a2:	4a1f      	ldr	r2, [pc, #124]	; (8014420 <prvHeapInit+0xac>)
 80143a4:	4413      	add	r3, r2
 80143a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80143ac:	4a1d      	ldr	r2, [pc, #116]	; (8014424 <prvHeapInit+0xb0>)
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80143b2:	4b1c      	ldr	r3, [pc, #112]	; (8014424 <prvHeapInit+0xb0>)
 80143b4:	2200      	movs	r2, #0
 80143b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	68ba      	ldr	r2, [r7, #8]
 80143bc:	4413      	add	r3, r2
 80143be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80143c0:	2208      	movs	r2, #8
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	1a9b      	subs	r3, r3, r2
 80143c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	f023 0307 	bic.w	r3, r3, #7
 80143ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	4a15      	ldr	r2, [pc, #84]	; (8014428 <prvHeapInit+0xb4>)
 80143d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80143d6:	4b14      	ldr	r3, [pc, #80]	; (8014428 <prvHeapInit+0xb4>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	2200      	movs	r2, #0
 80143dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80143de:	4b12      	ldr	r3, [pc, #72]	; (8014428 <prvHeapInit+0xb4>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	2200      	movs	r2, #0
 80143e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	68fa      	ldr	r2, [r7, #12]
 80143ee:	1ad2      	subs	r2, r2, r3
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80143f4:	4b0c      	ldr	r3, [pc, #48]	; (8014428 <prvHeapInit+0xb4>)
 80143f6:	681a      	ldr	r2, [r3, #0]
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	4a0a      	ldr	r2, [pc, #40]	; (801442c <prvHeapInit+0xb8>)
 8014402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	685b      	ldr	r3, [r3, #4]
 8014408:	4a09      	ldr	r2, [pc, #36]	; (8014430 <prvHeapInit+0xbc>)
 801440a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801440c:	4b09      	ldr	r3, [pc, #36]	; (8014434 <prvHeapInit+0xc0>)
 801440e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014412:	601a      	str	r2, [r3, #0]
}
 8014414:	bf00      	nop
 8014416:	3714      	adds	r7, #20
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr
 8014420:	240014ac 	.word	0x240014ac
 8014424:	240050ac 	.word	0x240050ac
 8014428:	240050b4 	.word	0x240050b4
 801442c:	240050bc 	.word	0x240050bc
 8014430:	240050b8 	.word	0x240050b8
 8014434:	240050c8 	.word	0x240050c8

08014438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014438:	b480      	push	{r7}
 801443a:	b085      	sub	sp, #20
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014440:	4b28      	ldr	r3, [pc, #160]	; (80144e4 <prvInsertBlockIntoFreeList+0xac>)
 8014442:	60fb      	str	r3, [r7, #12]
 8014444:	e002      	b.n	801444c <prvInsertBlockIntoFreeList+0x14>
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	60fb      	str	r3, [r7, #12]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	687a      	ldr	r2, [r7, #4]
 8014452:	429a      	cmp	r2, r3
 8014454:	d8f7      	bhi.n	8014446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	685b      	ldr	r3, [r3, #4]
 801445e:	68ba      	ldr	r2, [r7, #8]
 8014460:	4413      	add	r3, r2
 8014462:	687a      	ldr	r2, [r7, #4]
 8014464:	429a      	cmp	r2, r3
 8014466:	d108      	bne.n	801447a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	685a      	ldr	r2, [r3, #4]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	685b      	ldr	r3, [r3, #4]
 8014470:	441a      	add	r2, r3
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	685b      	ldr	r3, [r3, #4]
 8014482:	68ba      	ldr	r2, [r7, #8]
 8014484:	441a      	add	r2, r3
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	429a      	cmp	r2, r3
 801448c:	d118      	bne.n	80144c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	681a      	ldr	r2, [r3, #0]
 8014492:	4b15      	ldr	r3, [pc, #84]	; (80144e8 <prvInsertBlockIntoFreeList+0xb0>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	429a      	cmp	r2, r3
 8014498:	d00d      	beq.n	80144b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	685a      	ldr	r2, [r3, #4]
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	441a      	add	r2, r3
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	681a      	ldr	r2, [r3, #0]
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	601a      	str	r2, [r3, #0]
 80144b4:	e008      	b.n	80144c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80144b6:	4b0c      	ldr	r3, [pc, #48]	; (80144e8 <prvInsertBlockIntoFreeList+0xb0>)
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	601a      	str	r2, [r3, #0]
 80144be:	e003      	b.n	80144c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	681a      	ldr	r2, [r3, #0]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80144c8:	68fa      	ldr	r2, [r7, #12]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d002      	beq.n	80144d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	687a      	ldr	r2, [r7, #4]
 80144d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80144d6:	bf00      	nop
 80144d8:	3714      	adds	r7, #20
 80144da:	46bd      	mov	sp, r7
 80144dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e0:	4770      	bx	lr
 80144e2:	bf00      	nop
 80144e4:	240050ac 	.word	0x240050ac
 80144e8:	240050b4 	.word	0x240050b4

080144ec <__errno>:
 80144ec:	4b01      	ldr	r3, [pc, #4]	; (80144f4 <__errno+0x8>)
 80144ee:	6818      	ldr	r0, [r3, #0]
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop
 80144f4:	2400009c 	.word	0x2400009c

080144f8 <__libc_init_array>:
 80144f8:	b570      	push	{r4, r5, r6, lr}
 80144fa:	4d0d      	ldr	r5, [pc, #52]	; (8014530 <__libc_init_array+0x38>)
 80144fc:	4c0d      	ldr	r4, [pc, #52]	; (8014534 <__libc_init_array+0x3c>)
 80144fe:	1b64      	subs	r4, r4, r5
 8014500:	10a4      	asrs	r4, r4, #2
 8014502:	2600      	movs	r6, #0
 8014504:	42a6      	cmp	r6, r4
 8014506:	d109      	bne.n	801451c <__libc_init_array+0x24>
 8014508:	4d0b      	ldr	r5, [pc, #44]	; (8014538 <__libc_init_array+0x40>)
 801450a:	4c0c      	ldr	r4, [pc, #48]	; (801453c <__libc_init_array+0x44>)
 801450c:	f001 f842 	bl	8015594 <_init>
 8014510:	1b64      	subs	r4, r4, r5
 8014512:	10a4      	asrs	r4, r4, #2
 8014514:	2600      	movs	r6, #0
 8014516:	42a6      	cmp	r6, r4
 8014518:	d105      	bne.n	8014526 <__libc_init_array+0x2e>
 801451a:	bd70      	pop	{r4, r5, r6, pc}
 801451c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014520:	4798      	blx	r3
 8014522:	3601      	adds	r6, #1
 8014524:	e7ee      	b.n	8014504 <__libc_init_array+0xc>
 8014526:	f855 3b04 	ldr.w	r3, [r5], #4
 801452a:	4798      	blx	r3
 801452c:	3601      	adds	r6, #1
 801452e:	e7f2      	b.n	8014516 <__libc_init_array+0x1e>
 8014530:	08015968 	.word	0x08015968
 8014534:	08015968 	.word	0x08015968
 8014538:	08015968 	.word	0x08015968
 801453c:	0801596c 	.word	0x0801596c

08014540 <malloc>:
 8014540:	4b02      	ldr	r3, [pc, #8]	; (801454c <malloc+0xc>)
 8014542:	4601      	mov	r1, r0
 8014544:	6818      	ldr	r0, [r3, #0]
 8014546:	f000 b88d 	b.w	8014664 <_malloc_r>
 801454a:	bf00      	nop
 801454c:	2400009c 	.word	0x2400009c

08014550 <free>:
 8014550:	4b02      	ldr	r3, [pc, #8]	; (801455c <free+0xc>)
 8014552:	4601      	mov	r1, r0
 8014554:	6818      	ldr	r0, [r3, #0]
 8014556:	f000 b819 	b.w	801458c <_free_r>
 801455a:	bf00      	nop
 801455c:	2400009c 	.word	0x2400009c

08014560 <memcpy>:
 8014560:	440a      	add	r2, r1
 8014562:	4291      	cmp	r1, r2
 8014564:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014568:	d100      	bne.n	801456c <memcpy+0xc>
 801456a:	4770      	bx	lr
 801456c:	b510      	push	{r4, lr}
 801456e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014576:	4291      	cmp	r1, r2
 8014578:	d1f9      	bne.n	801456e <memcpy+0xe>
 801457a:	bd10      	pop	{r4, pc}

0801457c <memset>:
 801457c:	4402      	add	r2, r0
 801457e:	4603      	mov	r3, r0
 8014580:	4293      	cmp	r3, r2
 8014582:	d100      	bne.n	8014586 <memset+0xa>
 8014584:	4770      	bx	lr
 8014586:	f803 1b01 	strb.w	r1, [r3], #1
 801458a:	e7f9      	b.n	8014580 <memset+0x4>

0801458c <_free_r>:
 801458c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801458e:	2900      	cmp	r1, #0
 8014590:	d044      	beq.n	801461c <_free_r+0x90>
 8014592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014596:	9001      	str	r0, [sp, #4]
 8014598:	2b00      	cmp	r3, #0
 801459a:	f1a1 0404 	sub.w	r4, r1, #4
 801459e:	bfb8      	it	lt
 80145a0:	18e4      	addlt	r4, r4, r3
 80145a2:	f000 fc51 	bl	8014e48 <__malloc_lock>
 80145a6:	4a1e      	ldr	r2, [pc, #120]	; (8014620 <_free_r+0x94>)
 80145a8:	9801      	ldr	r0, [sp, #4]
 80145aa:	6813      	ldr	r3, [r2, #0]
 80145ac:	b933      	cbnz	r3, 80145bc <_free_r+0x30>
 80145ae:	6063      	str	r3, [r4, #4]
 80145b0:	6014      	str	r4, [r2, #0]
 80145b2:	b003      	add	sp, #12
 80145b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80145b8:	f000 bc4c 	b.w	8014e54 <__malloc_unlock>
 80145bc:	42a3      	cmp	r3, r4
 80145be:	d908      	bls.n	80145d2 <_free_r+0x46>
 80145c0:	6825      	ldr	r5, [r4, #0]
 80145c2:	1961      	adds	r1, r4, r5
 80145c4:	428b      	cmp	r3, r1
 80145c6:	bf01      	itttt	eq
 80145c8:	6819      	ldreq	r1, [r3, #0]
 80145ca:	685b      	ldreq	r3, [r3, #4]
 80145cc:	1949      	addeq	r1, r1, r5
 80145ce:	6021      	streq	r1, [r4, #0]
 80145d0:	e7ed      	b.n	80145ae <_free_r+0x22>
 80145d2:	461a      	mov	r2, r3
 80145d4:	685b      	ldr	r3, [r3, #4]
 80145d6:	b10b      	cbz	r3, 80145dc <_free_r+0x50>
 80145d8:	42a3      	cmp	r3, r4
 80145da:	d9fa      	bls.n	80145d2 <_free_r+0x46>
 80145dc:	6811      	ldr	r1, [r2, #0]
 80145de:	1855      	adds	r5, r2, r1
 80145e0:	42a5      	cmp	r5, r4
 80145e2:	d10b      	bne.n	80145fc <_free_r+0x70>
 80145e4:	6824      	ldr	r4, [r4, #0]
 80145e6:	4421      	add	r1, r4
 80145e8:	1854      	adds	r4, r2, r1
 80145ea:	42a3      	cmp	r3, r4
 80145ec:	6011      	str	r1, [r2, #0]
 80145ee:	d1e0      	bne.n	80145b2 <_free_r+0x26>
 80145f0:	681c      	ldr	r4, [r3, #0]
 80145f2:	685b      	ldr	r3, [r3, #4]
 80145f4:	6053      	str	r3, [r2, #4]
 80145f6:	4421      	add	r1, r4
 80145f8:	6011      	str	r1, [r2, #0]
 80145fa:	e7da      	b.n	80145b2 <_free_r+0x26>
 80145fc:	d902      	bls.n	8014604 <_free_r+0x78>
 80145fe:	230c      	movs	r3, #12
 8014600:	6003      	str	r3, [r0, #0]
 8014602:	e7d6      	b.n	80145b2 <_free_r+0x26>
 8014604:	6825      	ldr	r5, [r4, #0]
 8014606:	1961      	adds	r1, r4, r5
 8014608:	428b      	cmp	r3, r1
 801460a:	bf04      	itt	eq
 801460c:	6819      	ldreq	r1, [r3, #0]
 801460e:	685b      	ldreq	r3, [r3, #4]
 8014610:	6063      	str	r3, [r4, #4]
 8014612:	bf04      	itt	eq
 8014614:	1949      	addeq	r1, r1, r5
 8014616:	6021      	streq	r1, [r4, #0]
 8014618:	6054      	str	r4, [r2, #4]
 801461a:	e7ca      	b.n	80145b2 <_free_r+0x26>
 801461c:	b003      	add	sp, #12
 801461e:	bd30      	pop	{r4, r5, pc}
 8014620:	240050cc 	.word	0x240050cc

08014624 <sbrk_aligned>:
 8014624:	b570      	push	{r4, r5, r6, lr}
 8014626:	4e0e      	ldr	r6, [pc, #56]	; (8014660 <sbrk_aligned+0x3c>)
 8014628:	460c      	mov	r4, r1
 801462a:	6831      	ldr	r1, [r6, #0]
 801462c:	4605      	mov	r5, r0
 801462e:	b911      	cbnz	r1, 8014636 <sbrk_aligned+0x12>
 8014630:	f000 f91a 	bl	8014868 <_sbrk_r>
 8014634:	6030      	str	r0, [r6, #0]
 8014636:	4621      	mov	r1, r4
 8014638:	4628      	mov	r0, r5
 801463a:	f000 f915 	bl	8014868 <_sbrk_r>
 801463e:	1c43      	adds	r3, r0, #1
 8014640:	d00a      	beq.n	8014658 <sbrk_aligned+0x34>
 8014642:	1cc4      	adds	r4, r0, #3
 8014644:	f024 0403 	bic.w	r4, r4, #3
 8014648:	42a0      	cmp	r0, r4
 801464a:	d007      	beq.n	801465c <sbrk_aligned+0x38>
 801464c:	1a21      	subs	r1, r4, r0
 801464e:	4628      	mov	r0, r5
 8014650:	f000 f90a 	bl	8014868 <_sbrk_r>
 8014654:	3001      	adds	r0, #1
 8014656:	d101      	bne.n	801465c <sbrk_aligned+0x38>
 8014658:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801465c:	4620      	mov	r0, r4
 801465e:	bd70      	pop	{r4, r5, r6, pc}
 8014660:	240050d0 	.word	0x240050d0

08014664 <_malloc_r>:
 8014664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014668:	1ccd      	adds	r5, r1, #3
 801466a:	f025 0503 	bic.w	r5, r5, #3
 801466e:	3508      	adds	r5, #8
 8014670:	2d0c      	cmp	r5, #12
 8014672:	bf38      	it	cc
 8014674:	250c      	movcc	r5, #12
 8014676:	2d00      	cmp	r5, #0
 8014678:	4607      	mov	r7, r0
 801467a:	db01      	blt.n	8014680 <_malloc_r+0x1c>
 801467c:	42a9      	cmp	r1, r5
 801467e:	d905      	bls.n	801468c <_malloc_r+0x28>
 8014680:	230c      	movs	r3, #12
 8014682:	603b      	str	r3, [r7, #0]
 8014684:	2600      	movs	r6, #0
 8014686:	4630      	mov	r0, r6
 8014688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801468c:	4e2e      	ldr	r6, [pc, #184]	; (8014748 <_malloc_r+0xe4>)
 801468e:	f000 fbdb 	bl	8014e48 <__malloc_lock>
 8014692:	6833      	ldr	r3, [r6, #0]
 8014694:	461c      	mov	r4, r3
 8014696:	bb34      	cbnz	r4, 80146e6 <_malloc_r+0x82>
 8014698:	4629      	mov	r1, r5
 801469a:	4638      	mov	r0, r7
 801469c:	f7ff ffc2 	bl	8014624 <sbrk_aligned>
 80146a0:	1c43      	adds	r3, r0, #1
 80146a2:	4604      	mov	r4, r0
 80146a4:	d14d      	bne.n	8014742 <_malloc_r+0xde>
 80146a6:	6834      	ldr	r4, [r6, #0]
 80146a8:	4626      	mov	r6, r4
 80146aa:	2e00      	cmp	r6, #0
 80146ac:	d140      	bne.n	8014730 <_malloc_r+0xcc>
 80146ae:	6823      	ldr	r3, [r4, #0]
 80146b0:	4631      	mov	r1, r6
 80146b2:	4638      	mov	r0, r7
 80146b4:	eb04 0803 	add.w	r8, r4, r3
 80146b8:	f000 f8d6 	bl	8014868 <_sbrk_r>
 80146bc:	4580      	cmp	r8, r0
 80146be:	d13a      	bne.n	8014736 <_malloc_r+0xd2>
 80146c0:	6821      	ldr	r1, [r4, #0]
 80146c2:	3503      	adds	r5, #3
 80146c4:	1a6d      	subs	r5, r5, r1
 80146c6:	f025 0503 	bic.w	r5, r5, #3
 80146ca:	3508      	adds	r5, #8
 80146cc:	2d0c      	cmp	r5, #12
 80146ce:	bf38      	it	cc
 80146d0:	250c      	movcc	r5, #12
 80146d2:	4629      	mov	r1, r5
 80146d4:	4638      	mov	r0, r7
 80146d6:	f7ff ffa5 	bl	8014624 <sbrk_aligned>
 80146da:	3001      	adds	r0, #1
 80146dc:	d02b      	beq.n	8014736 <_malloc_r+0xd2>
 80146de:	6823      	ldr	r3, [r4, #0]
 80146e0:	442b      	add	r3, r5
 80146e2:	6023      	str	r3, [r4, #0]
 80146e4:	e00e      	b.n	8014704 <_malloc_r+0xa0>
 80146e6:	6822      	ldr	r2, [r4, #0]
 80146e8:	1b52      	subs	r2, r2, r5
 80146ea:	d41e      	bmi.n	801472a <_malloc_r+0xc6>
 80146ec:	2a0b      	cmp	r2, #11
 80146ee:	d916      	bls.n	801471e <_malloc_r+0xba>
 80146f0:	1961      	adds	r1, r4, r5
 80146f2:	42a3      	cmp	r3, r4
 80146f4:	6025      	str	r5, [r4, #0]
 80146f6:	bf18      	it	ne
 80146f8:	6059      	strne	r1, [r3, #4]
 80146fa:	6863      	ldr	r3, [r4, #4]
 80146fc:	bf08      	it	eq
 80146fe:	6031      	streq	r1, [r6, #0]
 8014700:	5162      	str	r2, [r4, r5]
 8014702:	604b      	str	r3, [r1, #4]
 8014704:	4638      	mov	r0, r7
 8014706:	f104 060b 	add.w	r6, r4, #11
 801470a:	f000 fba3 	bl	8014e54 <__malloc_unlock>
 801470e:	f026 0607 	bic.w	r6, r6, #7
 8014712:	1d23      	adds	r3, r4, #4
 8014714:	1af2      	subs	r2, r6, r3
 8014716:	d0b6      	beq.n	8014686 <_malloc_r+0x22>
 8014718:	1b9b      	subs	r3, r3, r6
 801471a:	50a3      	str	r3, [r4, r2]
 801471c:	e7b3      	b.n	8014686 <_malloc_r+0x22>
 801471e:	6862      	ldr	r2, [r4, #4]
 8014720:	42a3      	cmp	r3, r4
 8014722:	bf0c      	ite	eq
 8014724:	6032      	streq	r2, [r6, #0]
 8014726:	605a      	strne	r2, [r3, #4]
 8014728:	e7ec      	b.n	8014704 <_malloc_r+0xa0>
 801472a:	4623      	mov	r3, r4
 801472c:	6864      	ldr	r4, [r4, #4]
 801472e:	e7b2      	b.n	8014696 <_malloc_r+0x32>
 8014730:	4634      	mov	r4, r6
 8014732:	6876      	ldr	r6, [r6, #4]
 8014734:	e7b9      	b.n	80146aa <_malloc_r+0x46>
 8014736:	230c      	movs	r3, #12
 8014738:	603b      	str	r3, [r7, #0]
 801473a:	4638      	mov	r0, r7
 801473c:	f000 fb8a 	bl	8014e54 <__malloc_unlock>
 8014740:	e7a1      	b.n	8014686 <_malloc_r+0x22>
 8014742:	6025      	str	r5, [r4, #0]
 8014744:	e7de      	b.n	8014704 <_malloc_r+0xa0>
 8014746:	bf00      	nop
 8014748:	240050cc 	.word	0x240050cc

0801474c <iprintf>:
 801474c:	b40f      	push	{r0, r1, r2, r3}
 801474e:	4b0a      	ldr	r3, [pc, #40]	; (8014778 <iprintf+0x2c>)
 8014750:	b513      	push	{r0, r1, r4, lr}
 8014752:	681c      	ldr	r4, [r3, #0]
 8014754:	b124      	cbz	r4, 8014760 <iprintf+0x14>
 8014756:	69a3      	ldr	r3, [r4, #24]
 8014758:	b913      	cbnz	r3, 8014760 <iprintf+0x14>
 801475a:	4620      	mov	r0, r4
 801475c:	f000 fa6e 	bl	8014c3c <__sinit>
 8014760:	ab05      	add	r3, sp, #20
 8014762:	9a04      	ldr	r2, [sp, #16]
 8014764:	68a1      	ldr	r1, [r4, #8]
 8014766:	9301      	str	r3, [sp, #4]
 8014768:	4620      	mov	r0, r4
 801476a:	f000 fba3 	bl	8014eb4 <_vfiprintf_r>
 801476e:	b002      	add	sp, #8
 8014770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014774:	b004      	add	sp, #16
 8014776:	4770      	bx	lr
 8014778:	2400009c 	.word	0x2400009c

0801477c <_puts_r>:
 801477c:	b570      	push	{r4, r5, r6, lr}
 801477e:	460e      	mov	r6, r1
 8014780:	4605      	mov	r5, r0
 8014782:	b118      	cbz	r0, 801478c <_puts_r+0x10>
 8014784:	6983      	ldr	r3, [r0, #24]
 8014786:	b90b      	cbnz	r3, 801478c <_puts_r+0x10>
 8014788:	f000 fa58 	bl	8014c3c <__sinit>
 801478c:	69ab      	ldr	r3, [r5, #24]
 801478e:	68ac      	ldr	r4, [r5, #8]
 8014790:	b913      	cbnz	r3, 8014798 <_puts_r+0x1c>
 8014792:	4628      	mov	r0, r5
 8014794:	f000 fa52 	bl	8014c3c <__sinit>
 8014798:	4b2c      	ldr	r3, [pc, #176]	; (801484c <_puts_r+0xd0>)
 801479a:	429c      	cmp	r4, r3
 801479c:	d120      	bne.n	80147e0 <_puts_r+0x64>
 801479e:	686c      	ldr	r4, [r5, #4]
 80147a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147a2:	07db      	lsls	r3, r3, #31
 80147a4:	d405      	bmi.n	80147b2 <_puts_r+0x36>
 80147a6:	89a3      	ldrh	r3, [r4, #12]
 80147a8:	0598      	lsls	r0, r3, #22
 80147aa:	d402      	bmi.n	80147b2 <_puts_r+0x36>
 80147ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147ae:	f000 fae3 	bl	8014d78 <__retarget_lock_acquire_recursive>
 80147b2:	89a3      	ldrh	r3, [r4, #12]
 80147b4:	0719      	lsls	r1, r3, #28
 80147b6:	d51d      	bpl.n	80147f4 <_puts_r+0x78>
 80147b8:	6923      	ldr	r3, [r4, #16]
 80147ba:	b1db      	cbz	r3, 80147f4 <_puts_r+0x78>
 80147bc:	3e01      	subs	r6, #1
 80147be:	68a3      	ldr	r3, [r4, #8]
 80147c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80147c4:	3b01      	subs	r3, #1
 80147c6:	60a3      	str	r3, [r4, #8]
 80147c8:	bb39      	cbnz	r1, 801481a <_puts_r+0x9e>
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	da38      	bge.n	8014840 <_puts_r+0xc4>
 80147ce:	4622      	mov	r2, r4
 80147d0:	210a      	movs	r1, #10
 80147d2:	4628      	mov	r0, r5
 80147d4:	f000 f858 	bl	8014888 <__swbuf_r>
 80147d8:	3001      	adds	r0, #1
 80147da:	d011      	beq.n	8014800 <_puts_r+0x84>
 80147dc:	250a      	movs	r5, #10
 80147de:	e011      	b.n	8014804 <_puts_r+0x88>
 80147e0:	4b1b      	ldr	r3, [pc, #108]	; (8014850 <_puts_r+0xd4>)
 80147e2:	429c      	cmp	r4, r3
 80147e4:	d101      	bne.n	80147ea <_puts_r+0x6e>
 80147e6:	68ac      	ldr	r4, [r5, #8]
 80147e8:	e7da      	b.n	80147a0 <_puts_r+0x24>
 80147ea:	4b1a      	ldr	r3, [pc, #104]	; (8014854 <_puts_r+0xd8>)
 80147ec:	429c      	cmp	r4, r3
 80147ee:	bf08      	it	eq
 80147f0:	68ec      	ldreq	r4, [r5, #12]
 80147f2:	e7d5      	b.n	80147a0 <_puts_r+0x24>
 80147f4:	4621      	mov	r1, r4
 80147f6:	4628      	mov	r0, r5
 80147f8:	f000 f898 	bl	801492c <__swsetup_r>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	d0dd      	beq.n	80147bc <_puts_r+0x40>
 8014800:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014806:	07da      	lsls	r2, r3, #31
 8014808:	d405      	bmi.n	8014816 <_puts_r+0x9a>
 801480a:	89a3      	ldrh	r3, [r4, #12]
 801480c:	059b      	lsls	r3, r3, #22
 801480e:	d402      	bmi.n	8014816 <_puts_r+0x9a>
 8014810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014812:	f000 fab2 	bl	8014d7a <__retarget_lock_release_recursive>
 8014816:	4628      	mov	r0, r5
 8014818:	bd70      	pop	{r4, r5, r6, pc}
 801481a:	2b00      	cmp	r3, #0
 801481c:	da04      	bge.n	8014828 <_puts_r+0xac>
 801481e:	69a2      	ldr	r2, [r4, #24]
 8014820:	429a      	cmp	r2, r3
 8014822:	dc06      	bgt.n	8014832 <_puts_r+0xb6>
 8014824:	290a      	cmp	r1, #10
 8014826:	d004      	beq.n	8014832 <_puts_r+0xb6>
 8014828:	6823      	ldr	r3, [r4, #0]
 801482a:	1c5a      	adds	r2, r3, #1
 801482c:	6022      	str	r2, [r4, #0]
 801482e:	7019      	strb	r1, [r3, #0]
 8014830:	e7c5      	b.n	80147be <_puts_r+0x42>
 8014832:	4622      	mov	r2, r4
 8014834:	4628      	mov	r0, r5
 8014836:	f000 f827 	bl	8014888 <__swbuf_r>
 801483a:	3001      	adds	r0, #1
 801483c:	d1bf      	bne.n	80147be <_puts_r+0x42>
 801483e:	e7df      	b.n	8014800 <_puts_r+0x84>
 8014840:	6823      	ldr	r3, [r4, #0]
 8014842:	250a      	movs	r5, #10
 8014844:	1c5a      	adds	r2, r3, #1
 8014846:	6022      	str	r2, [r4, #0]
 8014848:	701d      	strb	r5, [r3, #0]
 801484a:	e7db      	b.n	8014804 <_puts_r+0x88>
 801484c:	080158ec 	.word	0x080158ec
 8014850:	0801590c 	.word	0x0801590c
 8014854:	080158cc 	.word	0x080158cc

08014858 <puts>:
 8014858:	4b02      	ldr	r3, [pc, #8]	; (8014864 <puts+0xc>)
 801485a:	4601      	mov	r1, r0
 801485c:	6818      	ldr	r0, [r3, #0]
 801485e:	f7ff bf8d 	b.w	801477c <_puts_r>
 8014862:	bf00      	nop
 8014864:	2400009c 	.word	0x2400009c

08014868 <_sbrk_r>:
 8014868:	b538      	push	{r3, r4, r5, lr}
 801486a:	4d06      	ldr	r5, [pc, #24]	; (8014884 <_sbrk_r+0x1c>)
 801486c:	2300      	movs	r3, #0
 801486e:	4604      	mov	r4, r0
 8014870:	4608      	mov	r0, r1
 8014872:	602b      	str	r3, [r5, #0]
 8014874:	f7ee fb5a 	bl	8002f2c <_sbrk>
 8014878:	1c43      	adds	r3, r0, #1
 801487a:	d102      	bne.n	8014882 <_sbrk_r+0x1a>
 801487c:	682b      	ldr	r3, [r5, #0]
 801487e:	b103      	cbz	r3, 8014882 <_sbrk_r+0x1a>
 8014880:	6023      	str	r3, [r4, #0]
 8014882:	bd38      	pop	{r3, r4, r5, pc}
 8014884:	240050d8 	.word	0x240050d8

08014888 <__swbuf_r>:
 8014888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801488a:	460e      	mov	r6, r1
 801488c:	4614      	mov	r4, r2
 801488e:	4605      	mov	r5, r0
 8014890:	b118      	cbz	r0, 801489a <__swbuf_r+0x12>
 8014892:	6983      	ldr	r3, [r0, #24]
 8014894:	b90b      	cbnz	r3, 801489a <__swbuf_r+0x12>
 8014896:	f000 f9d1 	bl	8014c3c <__sinit>
 801489a:	4b21      	ldr	r3, [pc, #132]	; (8014920 <__swbuf_r+0x98>)
 801489c:	429c      	cmp	r4, r3
 801489e:	d12b      	bne.n	80148f8 <__swbuf_r+0x70>
 80148a0:	686c      	ldr	r4, [r5, #4]
 80148a2:	69a3      	ldr	r3, [r4, #24]
 80148a4:	60a3      	str	r3, [r4, #8]
 80148a6:	89a3      	ldrh	r3, [r4, #12]
 80148a8:	071a      	lsls	r2, r3, #28
 80148aa:	d52f      	bpl.n	801490c <__swbuf_r+0x84>
 80148ac:	6923      	ldr	r3, [r4, #16]
 80148ae:	b36b      	cbz	r3, 801490c <__swbuf_r+0x84>
 80148b0:	6923      	ldr	r3, [r4, #16]
 80148b2:	6820      	ldr	r0, [r4, #0]
 80148b4:	1ac0      	subs	r0, r0, r3
 80148b6:	6963      	ldr	r3, [r4, #20]
 80148b8:	b2f6      	uxtb	r6, r6
 80148ba:	4283      	cmp	r3, r0
 80148bc:	4637      	mov	r7, r6
 80148be:	dc04      	bgt.n	80148ca <__swbuf_r+0x42>
 80148c0:	4621      	mov	r1, r4
 80148c2:	4628      	mov	r0, r5
 80148c4:	f000 f926 	bl	8014b14 <_fflush_r>
 80148c8:	bb30      	cbnz	r0, 8014918 <__swbuf_r+0x90>
 80148ca:	68a3      	ldr	r3, [r4, #8]
 80148cc:	3b01      	subs	r3, #1
 80148ce:	60a3      	str	r3, [r4, #8]
 80148d0:	6823      	ldr	r3, [r4, #0]
 80148d2:	1c5a      	adds	r2, r3, #1
 80148d4:	6022      	str	r2, [r4, #0]
 80148d6:	701e      	strb	r6, [r3, #0]
 80148d8:	6963      	ldr	r3, [r4, #20]
 80148da:	3001      	adds	r0, #1
 80148dc:	4283      	cmp	r3, r0
 80148de:	d004      	beq.n	80148ea <__swbuf_r+0x62>
 80148e0:	89a3      	ldrh	r3, [r4, #12]
 80148e2:	07db      	lsls	r3, r3, #31
 80148e4:	d506      	bpl.n	80148f4 <__swbuf_r+0x6c>
 80148e6:	2e0a      	cmp	r6, #10
 80148e8:	d104      	bne.n	80148f4 <__swbuf_r+0x6c>
 80148ea:	4621      	mov	r1, r4
 80148ec:	4628      	mov	r0, r5
 80148ee:	f000 f911 	bl	8014b14 <_fflush_r>
 80148f2:	b988      	cbnz	r0, 8014918 <__swbuf_r+0x90>
 80148f4:	4638      	mov	r0, r7
 80148f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148f8:	4b0a      	ldr	r3, [pc, #40]	; (8014924 <__swbuf_r+0x9c>)
 80148fa:	429c      	cmp	r4, r3
 80148fc:	d101      	bne.n	8014902 <__swbuf_r+0x7a>
 80148fe:	68ac      	ldr	r4, [r5, #8]
 8014900:	e7cf      	b.n	80148a2 <__swbuf_r+0x1a>
 8014902:	4b09      	ldr	r3, [pc, #36]	; (8014928 <__swbuf_r+0xa0>)
 8014904:	429c      	cmp	r4, r3
 8014906:	bf08      	it	eq
 8014908:	68ec      	ldreq	r4, [r5, #12]
 801490a:	e7ca      	b.n	80148a2 <__swbuf_r+0x1a>
 801490c:	4621      	mov	r1, r4
 801490e:	4628      	mov	r0, r5
 8014910:	f000 f80c 	bl	801492c <__swsetup_r>
 8014914:	2800      	cmp	r0, #0
 8014916:	d0cb      	beq.n	80148b0 <__swbuf_r+0x28>
 8014918:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801491c:	e7ea      	b.n	80148f4 <__swbuf_r+0x6c>
 801491e:	bf00      	nop
 8014920:	080158ec 	.word	0x080158ec
 8014924:	0801590c 	.word	0x0801590c
 8014928:	080158cc 	.word	0x080158cc

0801492c <__swsetup_r>:
 801492c:	4b32      	ldr	r3, [pc, #200]	; (80149f8 <__swsetup_r+0xcc>)
 801492e:	b570      	push	{r4, r5, r6, lr}
 8014930:	681d      	ldr	r5, [r3, #0]
 8014932:	4606      	mov	r6, r0
 8014934:	460c      	mov	r4, r1
 8014936:	b125      	cbz	r5, 8014942 <__swsetup_r+0x16>
 8014938:	69ab      	ldr	r3, [r5, #24]
 801493a:	b913      	cbnz	r3, 8014942 <__swsetup_r+0x16>
 801493c:	4628      	mov	r0, r5
 801493e:	f000 f97d 	bl	8014c3c <__sinit>
 8014942:	4b2e      	ldr	r3, [pc, #184]	; (80149fc <__swsetup_r+0xd0>)
 8014944:	429c      	cmp	r4, r3
 8014946:	d10f      	bne.n	8014968 <__swsetup_r+0x3c>
 8014948:	686c      	ldr	r4, [r5, #4]
 801494a:	89a3      	ldrh	r3, [r4, #12]
 801494c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014950:	0719      	lsls	r1, r3, #28
 8014952:	d42c      	bmi.n	80149ae <__swsetup_r+0x82>
 8014954:	06dd      	lsls	r5, r3, #27
 8014956:	d411      	bmi.n	801497c <__swsetup_r+0x50>
 8014958:	2309      	movs	r3, #9
 801495a:	6033      	str	r3, [r6, #0]
 801495c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014960:	81a3      	strh	r3, [r4, #12]
 8014962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014966:	e03e      	b.n	80149e6 <__swsetup_r+0xba>
 8014968:	4b25      	ldr	r3, [pc, #148]	; (8014a00 <__swsetup_r+0xd4>)
 801496a:	429c      	cmp	r4, r3
 801496c:	d101      	bne.n	8014972 <__swsetup_r+0x46>
 801496e:	68ac      	ldr	r4, [r5, #8]
 8014970:	e7eb      	b.n	801494a <__swsetup_r+0x1e>
 8014972:	4b24      	ldr	r3, [pc, #144]	; (8014a04 <__swsetup_r+0xd8>)
 8014974:	429c      	cmp	r4, r3
 8014976:	bf08      	it	eq
 8014978:	68ec      	ldreq	r4, [r5, #12]
 801497a:	e7e6      	b.n	801494a <__swsetup_r+0x1e>
 801497c:	0758      	lsls	r0, r3, #29
 801497e:	d512      	bpl.n	80149a6 <__swsetup_r+0x7a>
 8014980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014982:	b141      	cbz	r1, 8014996 <__swsetup_r+0x6a>
 8014984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014988:	4299      	cmp	r1, r3
 801498a:	d002      	beq.n	8014992 <__swsetup_r+0x66>
 801498c:	4630      	mov	r0, r6
 801498e:	f7ff fdfd 	bl	801458c <_free_r>
 8014992:	2300      	movs	r3, #0
 8014994:	6363      	str	r3, [r4, #52]	; 0x34
 8014996:	89a3      	ldrh	r3, [r4, #12]
 8014998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801499c:	81a3      	strh	r3, [r4, #12]
 801499e:	2300      	movs	r3, #0
 80149a0:	6063      	str	r3, [r4, #4]
 80149a2:	6923      	ldr	r3, [r4, #16]
 80149a4:	6023      	str	r3, [r4, #0]
 80149a6:	89a3      	ldrh	r3, [r4, #12]
 80149a8:	f043 0308 	orr.w	r3, r3, #8
 80149ac:	81a3      	strh	r3, [r4, #12]
 80149ae:	6923      	ldr	r3, [r4, #16]
 80149b0:	b94b      	cbnz	r3, 80149c6 <__swsetup_r+0x9a>
 80149b2:	89a3      	ldrh	r3, [r4, #12]
 80149b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80149b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80149bc:	d003      	beq.n	80149c6 <__swsetup_r+0x9a>
 80149be:	4621      	mov	r1, r4
 80149c0:	4630      	mov	r0, r6
 80149c2:	f000 fa01 	bl	8014dc8 <__smakebuf_r>
 80149c6:	89a0      	ldrh	r0, [r4, #12]
 80149c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80149cc:	f010 0301 	ands.w	r3, r0, #1
 80149d0:	d00a      	beq.n	80149e8 <__swsetup_r+0xbc>
 80149d2:	2300      	movs	r3, #0
 80149d4:	60a3      	str	r3, [r4, #8]
 80149d6:	6963      	ldr	r3, [r4, #20]
 80149d8:	425b      	negs	r3, r3
 80149da:	61a3      	str	r3, [r4, #24]
 80149dc:	6923      	ldr	r3, [r4, #16]
 80149de:	b943      	cbnz	r3, 80149f2 <__swsetup_r+0xc6>
 80149e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80149e4:	d1ba      	bne.n	801495c <__swsetup_r+0x30>
 80149e6:	bd70      	pop	{r4, r5, r6, pc}
 80149e8:	0781      	lsls	r1, r0, #30
 80149ea:	bf58      	it	pl
 80149ec:	6963      	ldrpl	r3, [r4, #20]
 80149ee:	60a3      	str	r3, [r4, #8]
 80149f0:	e7f4      	b.n	80149dc <__swsetup_r+0xb0>
 80149f2:	2000      	movs	r0, #0
 80149f4:	e7f7      	b.n	80149e6 <__swsetup_r+0xba>
 80149f6:	bf00      	nop
 80149f8:	2400009c 	.word	0x2400009c
 80149fc:	080158ec 	.word	0x080158ec
 8014a00:	0801590c 	.word	0x0801590c
 8014a04:	080158cc 	.word	0x080158cc

08014a08 <__sflush_r>:
 8014a08:	898a      	ldrh	r2, [r1, #12]
 8014a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a0e:	4605      	mov	r5, r0
 8014a10:	0710      	lsls	r0, r2, #28
 8014a12:	460c      	mov	r4, r1
 8014a14:	d458      	bmi.n	8014ac8 <__sflush_r+0xc0>
 8014a16:	684b      	ldr	r3, [r1, #4]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	dc05      	bgt.n	8014a28 <__sflush_r+0x20>
 8014a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	dc02      	bgt.n	8014a28 <__sflush_r+0x20>
 8014a22:	2000      	movs	r0, #0
 8014a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a2a:	2e00      	cmp	r6, #0
 8014a2c:	d0f9      	beq.n	8014a22 <__sflush_r+0x1a>
 8014a2e:	2300      	movs	r3, #0
 8014a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014a34:	682f      	ldr	r7, [r5, #0]
 8014a36:	602b      	str	r3, [r5, #0]
 8014a38:	d032      	beq.n	8014aa0 <__sflush_r+0x98>
 8014a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014a3c:	89a3      	ldrh	r3, [r4, #12]
 8014a3e:	075a      	lsls	r2, r3, #29
 8014a40:	d505      	bpl.n	8014a4e <__sflush_r+0x46>
 8014a42:	6863      	ldr	r3, [r4, #4]
 8014a44:	1ac0      	subs	r0, r0, r3
 8014a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a48:	b10b      	cbz	r3, 8014a4e <__sflush_r+0x46>
 8014a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014a4c:	1ac0      	subs	r0, r0, r3
 8014a4e:	2300      	movs	r3, #0
 8014a50:	4602      	mov	r2, r0
 8014a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a54:	6a21      	ldr	r1, [r4, #32]
 8014a56:	4628      	mov	r0, r5
 8014a58:	47b0      	blx	r6
 8014a5a:	1c43      	adds	r3, r0, #1
 8014a5c:	89a3      	ldrh	r3, [r4, #12]
 8014a5e:	d106      	bne.n	8014a6e <__sflush_r+0x66>
 8014a60:	6829      	ldr	r1, [r5, #0]
 8014a62:	291d      	cmp	r1, #29
 8014a64:	d82c      	bhi.n	8014ac0 <__sflush_r+0xb8>
 8014a66:	4a2a      	ldr	r2, [pc, #168]	; (8014b10 <__sflush_r+0x108>)
 8014a68:	40ca      	lsrs	r2, r1
 8014a6a:	07d6      	lsls	r6, r2, #31
 8014a6c:	d528      	bpl.n	8014ac0 <__sflush_r+0xb8>
 8014a6e:	2200      	movs	r2, #0
 8014a70:	6062      	str	r2, [r4, #4]
 8014a72:	04d9      	lsls	r1, r3, #19
 8014a74:	6922      	ldr	r2, [r4, #16]
 8014a76:	6022      	str	r2, [r4, #0]
 8014a78:	d504      	bpl.n	8014a84 <__sflush_r+0x7c>
 8014a7a:	1c42      	adds	r2, r0, #1
 8014a7c:	d101      	bne.n	8014a82 <__sflush_r+0x7a>
 8014a7e:	682b      	ldr	r3, [r5, #0]
 8014a80:	b903      	cbnz	r3, 8014a84 <__sflush_r+0x7c>
 8014a82:	6560      	str	r0, [r4, #84]	; 0x54
 8014a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a86:	602f      	str	r7, [r5, #0]
 8014a88:	2900      	cmp	r1, #0
 8014a8a:	d0ca      	beq.n	8014a22 <__sflush_r+0x1a>
 8014a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a90:	4299      	cmp	r1, r3
 8014a92:	d002      	beq.n	8014a9a <__sflush_r+0x92>
 8014a94:	4628      	mov	r0, r5
 8014a96:	f7ff fd79 	bl	801458c <_free_r>
 8014a9a:	2000      	movs	r0, #0
 8014a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8014a9e:	e7c1      	b.n	8014a24 <__sflush_r+0x1c>
 8014aa0:	6a21      	ldr	r1, [r4, #32]
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	4628      	mov	r0, r5
 8014aa6:	47b0      	blx	r6
 8014aa8:	1c41      	adds	r1, r0, #1
 8014aaa:	d1c7      	bne.n	8014a3c <__sflush_r+0x34>
 8014aac:	682b      	ldr	r3, [r5, #0]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d0c4      	beq.n	8014a3c <__sflush_r+0x34>
 8014ab2:	2b1d      	cmp	r3, #29
 8014ab4:	d001      	beq.n	8014aba <__sflush_r+0xb2>
 8014ab6:	2b16      	cmp	r3, #22
 8014ab8:	d101      	bne.n	8014abe <__sflush_r+0xb6>
 8014aba:	602f      	str	r7, [r5, #0]
 8014abc:	e7b1      	b.n	8014a22 <__sflush_r+0x1a>
 8014abe:	89a3      	ldrh	r3, [r4, #12]
 8014ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ac4:	81a3      	strh	r3, [r4, #12]
 8014ac6:	e7ad      	b.n	8014a24 <__sflush_r+0x1c>
 8014ac8:	690f      	ldr	r7, [r1, #16]
 8014aca:	2f00      	cmp	r7, #0
 8014acc:	d0a9      	beq.n	8014a22 <__sflush_r+0x1a>
 8014ace:	0793      	lsls	r3, r2, #30
 8014ad0:	680e      	ldr	r6, [r1, #0]
 8014ad2:	bf08      	it	eq
 8014ad4:	694b      	ldreq	r3, [r1, #20]
 8014ad6:	600f      	str	r7, [r1, #0]
 8014ad8:	bf18      	it	ne
 8014ada:	2300      	movne	r3, #0
 8014adc:	eba6 0807 	sub.w	r8, r6, r7
 8014ae0:	608b      	str	r3, [r1, #8]
 8014ae2:	f1b8 0f00 	cmp.w	r8, #0
 8014ae6:	dd9c      	ble.n	8014a22 <__sflush_r+0x1a>
 8014ae8:	6a21      	ldr	r1, [r4, #32]
 8014aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014aec:	4643      	mov	r3, r8
 8014aee:	463a      	mov	r2, r7
 8014af0:	4628      	mov	r0, r5
 8014af2:	47b0      	blx	r6
 8014af4:	2800      	cmp	r0, #0
 8014af6:	dc06      	bgt.n	8014b06 <__sflush_r+0xfe>
 8014af8:	89a3      	ldrh	r3, [r4, #12]
 8014afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014afe:	81a3      	strh	r3, [r4, #12]
 8014b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b04:	e78e      	b.n	8014a24 <__sflush_r+0x1c>
 8014b06:	4407      	add	r7, r0
 8014b08:	eba8 0800 	sub.w	r8, r8, r0
 8014b0c:	e7e9      	b.n	8014ae2 <__sflush_r+0xda>
 8014b0e:	bf00      	nop
 8014b10:	20400001 	.word	0x20400001

08014b14 <_fflush_r>:
 8014b14:	b538      	push	{r3, r4, r5, lr}
 8014b16:	690b      	ldr	r3, [r1, #16]
 8014b18:	4605      	mov	r5, r0
 8014b1a:	460c      	mov	r4, r1
 8014b1c:	b913      	cbnz	r3, 8014b24 <_fflush_r+0x10>
 8014b1e:	2500      	movs	r5, #0
 8014b20:	4628      	mov	r0, r5
 8014b22:	bd38      	pop	{r3, r4, r5, pc}
 8014b24:	b118      	cbz	r0, 8014b2e <_fflush_r+0x1a>
 8014b26:	6983      	ldr	r3, [r0, #24]
 8014b28:	b90b      	cbnz	r3, 8014b2e <_fflush_r+0x1a>
 8014b2a:	f000 f887 	bl	8014c3c <__sinit>
 8014b2e:	4b14      	ldr	r3, [pc, #80]	; (8014b80 <_fflush_r+0x6c>)
 8014b30:	429c      	cmp	r4, r3
 8014b32:	d11b      	bne.n	8014b6c <_fflush_r+0x58>
 8014b34:	686c      	ldr	r4, [r5, #4]
 8014b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d0ef      	beq.n	8014b1e <_fflush_r+0xa>
 8014b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014b40:	07d0      	lsls	r0, r2, #31
 8014b42:	d404      	bmi.n	8014b4e <_fflush_r+0x3a>
 8014b44:	0599      	lsls	r1, r3, #22
 8014b46:	d402      	bmi.n	8014b4e <_fflush_r+0x3a>
 8014b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b4a:	f000 f915 	bl	8014d78 <__retarget_lock_acquire_recursive>
 8014b4e:	4628      	mov	r0, r5
 8014b50:	4621      	mov	r1, r4
 8014b52:	f7ff ff59 	bl	8014a08 <__sflush_r>
 8014b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b58:	07da      	lsls	r2, r3, #31
 8014b5a:	4605      	mov	r5, r0
 8014b5c:	d4e0      	bmi.n	8014b20 <_fflush_r+0xc>
 8014b5e:	89a3      	ldrh	r3, [r4, #12]
 8014b60:	059b      	lsls	r3, r3, #22
 8014b62:	d4dd      	bmi.n	8014b20 <_fflush_r+0xc>
 8014b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b66:	f000 f908 	bl	8014d7a <__retarget_lock_release_recursive>
 8014b6a:	e7d9      	b.n	8014b20 <_fflush_r+0xc>
 8014b6c:	4b05      	ldr	r3, [pc, #20]	; (8014b84 <_fflush_r+0x70>)
 8014b6e:	429c      	cmp	r4, r3
 8014b70:	d101      	bne.n	8014b76 <_fflush_r+0x62>
 8014b72:	68ac      	ldr	r4, [r5, #8]
 8014b74:	e7df      	b.n	8014b36 <_fflush_r+0x22>
 8014b76:	4b04      	ldr	r3, [pc, #16]	; (8014b88 <_fflush_r+0x74>)
 8014b78:	429c      	cmp	r4, r3
 8014b7a:	bf08      	it	eq
 8014b7c:	68ec      	ldreq	r4, [r5, #12]
 8014b7e:	e7da      	b.n	8014b36 <_fflush_r+0x22>
 8014b80:	080158ec 	.word	0x080158ec
 8014b84:	0801590c 	.word	0x0801590c
 8014b88:	080158cc 	.word	0x080158cc

08014b8c <std>:
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	b510      	push	{r4, lr}
 8014b90:	4604      	mov	r4, r0
 8014b92:	e9c0 3300 	strd	r3, r3, [r0]
 8014b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b9a:	6083      	str	r3, [r0, #8]
 8014b9c:	8181      	strh	r1, [r0, #12]
 8014b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8014ba0:	81c2      	strh	r2, [r0, #14]
 8014ba2:	6183      	str	r3, [r0, #24]
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	2208      	movs	r2, #8
 8014ba8:	305c      	adds	r0, #92	; 0x5c
 8014baa:	f7ff fce7 	bl	801457c <memset>
 8014bae:	4b05      	ldr	r3, [pc, #20]	; (8014bc4 <std+0x38>)
 8014bb0:	6263      	str	r3, [r4, #36]	; 0x24
 8014bb2:	4b05      	ldr	r3, [pc, #20]	; (8014bc8 <std+0x3c>)
 8014bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8014bb6:	4b05      	ldr	r3, [pc, #20]	; (8014bcc <std+0x40>)
 8014bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014bba:	4b05      	ldr	r3, [pc, #20]	; (8014bd0 <std+0x44>)
 8014bbc:	6224      	str	r4, [r4, #32]
 8014bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8014bc0:	bd10      	pop	{r4, pc}
 8014bc2:	bf00      	nop
 8014bc4:	0801543d 	.word	0x0801543d
 8014bc8:	0801545f 	.word	0x0801545f
 8014bcc:	08015497 	.word	0x08015497
 8014bd0:	080154bb 	.word	0x080154bb

08014bd4 <_cleanup_r>:
 8014bd4:	4901      	ldr	r1, [pc, #4]	; (8014bdc <_cleanup_r+0x8>)
 8014bd6:	f000 b8af 	b.w	8014d38 <_fwalk_reent>
 8014bda:	bf00      	nop
 8014bdc:	08014b15 	.word	0x08014b15

08014be0 <__sfmoreglue>:
 8014be0:	b570      	push	{r4, r5, r6, lr}
 8014be2:	2268      	movs	r2, #104	; 0x68
 8014be4:	1e4d      	subs	r5, r1, #1
 8014be6:	4355      	muls	r5, r2
 8014be8:	460e      	mov	r6, r1
 8014bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014bee:	f7ff fd39 	bl	8014664 <_malloc_r>
 8014bf2:	4604      	mov	r4, r0
 8014bf4:	b140      	cbz	r0, 8014c08 <__sfmoreglue+0x28>
 8014bf6:	2100      	movs	r1, #0
 8014bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8014bfc:	300c      	adds	r0, #12
 8014bfe:	60a0      	str	r0, [r4, #8]
 8014c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014c04:	f7ff fcba 	bl	801457c <memset>
 8014c08:	4620      	mov	r0, r4
 8014c0a:	bd70      	pop	{r4, r5, r6, pc}

08014c0c <__sfp_lock_acquire>:
 8014c0c:	4801      	ldr	r0, [pc, #4]	; (8014c14 <__sfp_lock_acquire+0x8>)
 8014c0e:	f000 b8b3 	b.w	8014d78 <__retarget_lock_acquire_recursive>
 8014c12:	bf00      	nop
 8014c14:	240050d5 	.word	0x240050d5

08014c18 <__sfp_lock_release>:
 8014c18:	4801      	ldr	r0, [pc, #4]	; (8014c20 <__sfp_lock_release+0x8>)
 8014c1a:	f000 b8ae 	b.w	8014d7a <__retarget_lock_release_recursive>
 8014c1e:	bf00      	nop
 8014c20:	240050d5 	.word	0x240050d5

08014c24 <__sinit_lock_acquire>:
 8014c24:	4801      	ldr	r0, [pc, #4]	; (8014c2c <__sinit_lock_acquire+0x8>)
 8014c26:	f000 b8a7 	b.w	8014d78 <__retarget_lock_acquire_recursive>
 8014c2a:	bf00      	nop
 8014c2c:	240050d6 	.word	0x240050d6

08014c30 <__sinit_lock_release>:
 8014c30:	4801      	ldr	r0, [pc, #4]	; (8014c38 <__sinit_lock_release+0x8>)
 8014c32:	f000 b8a2 	b.w	8014d7a <__retarget_lock_release_recursive>
 8014c36:	bf00      	nop
 8014c38:	240050d6 	.word	0x240050d6

08014c3c <__sinit>:
 8014c3c:	b510      	push	{r4, lr}
 8014c3e:	4604      	mov	r4, r0
 8014c40:	f7ff fff0 	bl	8014c24 <__sinit_lock_acquire>
 8014c44:	69a3      	ldr	r3, [r4, #24]
 8014c46:	b11b      	cbz	r3, 8014c50 <__sinit+0x14>
 8014c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c4c:	f7ff bff0 	b.w	8014c30 <__sinit_lock_release>
 8014c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014c54:	6523      	str	r3, [r4, #80]	; 0x50
 8014c56:	4b13      	ldr	r3, [pc, #76]	; (8014ca4 <__sinit+0x68>)
 8014c58:	4a13      	ldr	r2, [pc, #76]	; (8014ca8 <__sinit+0x6c>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8014c5e:	42a3      	cmp	r3, r4
 8014c60:	bf04      	itt	eq
 8014c62:	2301      	moveq	r3, #1
 8014c64:	61a3      	streq	r3, [r4, #24]
 8014c66:	4620      	mov	r0, r4
 8014c68:	f000 f820 	bl	8014cac <__sfp>
 8014c6c:	6060      	str	r0, [r4, #4]
 8014c6e:	4620      	mov	r0, r4
 8014c70:	f000 f81c 	bl	8014cac <__sfp>
 8014c74:	60a0      	str	r0, [r4, #8]
 8014c76:	4620      	mov	r0, r4
 8014c78:	f000 f818 	bl	8014cac <__sfp>
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	60e0      	str	r0, [r4, #12]
 8014c80:	2104      	movs	r1, #4
 8014c82:	6860      	ldr	r0, [r4, #4]
 8014c84:	f7ff ff82 	bl	8014b8c <std>
 8014c88:	68a0      	ldr	r0, [r4, #8]
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	2109      	movs	r1, #9
 8014c8e:	f7ff ff7d 	bl	8014b8c <std>
 8014c92:	68e0      	ldr	r0, [r4, #12]
 8014c94:	2202      	movs	r2, #2
 8014c96:	2112      	movs	r1, #18
 8014c98:	f7ff ff78 	bl	8014b8c <std>
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	61a3      	str	r3, [r4, #24]
 8014ca0:	e7d2      	b.n	8014c48 <__sinit+0xc>
 8014ca2:	bf00      	nop
 8014ca4:	080158c8 	.word	0x080158c8
 8014ca8:	08014bd5 	.word	0x08014bd5

08014cac <__sfp>:
 8014cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cae:	4607      	mov	r7, r0
 8014cb0:	f7ff ffac 	bl	8014c0c <__sfp_lock_acquire>
 8014cb4:	4b1e      	ldr	r3, [pc, #120]	; (8014d30 <__sfp+0x84>)
 8014cb6:	681e      	ldr	r6, [r3, #0]
 8014cb8:	69b3      	ldr	r3, [r6, #24]
 8014cba:	b913      	cbnz	r3, 8014cc2 <__sfp+0x16>
 8014cbc:	4630      	mov	r0, r6
 8014cbe:	f7ff ffbd 	bl	8014c3c <__sinit>
 8014cc2:	3648      	adds	r6, #72	; 0x48
 8014cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014cc8:	3b01      	subs	r3, #1
 8014cca:	d503      	bpl.n	8014cd4 <__sfp+0x28>
 8014ccc:	6833      	ldr	r3, [r6, #0]
 8014cce:	b30b      	cbz	r3, 8014d14 <__sfp+0x68>
 8014cd0:	6836      	ldr	r6, [r6, #0]
 8014cd2:	e7f7      	b.n	8014cc4 <__sfp+0x18>
 8014cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014cd8:	b9d5      	cbnz	r5, 8014d10 <__sfp+0x64>
 8014cda:	4b16      	ldr	r3, [pc, #88]	; (8014d34 <__sfp+0x88>)
 8014cdc:	60e3      	str	r3, [r4, #12]
 8014cde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014ce2:	6665      	str	r5, [r4, #100]	; 0x64
 8014ce4:	f000 f847 	bl	8014d76 <__retarget_lock_init_recursive>
 8014ce8:	f7ff ff96 	bl	8014c18 <__sfp_lock_release>
 8014cec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014cf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014cf4:	6025      	str	r5, [r4, #0]
 8014cf6:	61a5      	str	r5, [r4, #24]
 8014cf8:	2208      	movs	r2, #8
 8014cfa:	4629      	mov	r1, r5
 8014cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014d00:	f7ff fc3c 	bl	801457c <memset>
 8014d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d10:	3468      	adds	r4, #104	; 0x68
 8014d12:	e7d9      	b.n	8014cc8 <__sfp+0x1c>
 8014d14:	2104      	movs	r1, #4
 8014d16:	4638      	mov	r0, r7
 8014d18:	f7ff ff62 	bl	8014be0 <__sfmoreglue>
 8014d1c:	4604      	mov	r4, r0
 8014d1e:	6030      	str	r0, [r6, #0]
 8014d20:	2800      	cmp	r0, #0
 8014d22:	d1d5      	bne.n	8014cd0 <__sfp+0x24>
 8014d24:	f7ff ff78 	bl	8014c18 <__sfp_lock_release>
 8014d28:	230c      	movs	r3, #12
 8014d2a:	603b      	str	r3, [r7, #0]
 8014d2c:	e7ee      	b.n	8014d0c <__sfp+0x60>
 8014d2e:	bf00      	nop
 8014d30:	080158c8 	.word	0x080158c8
 8014d34:	ffff0001 	.word	0xffff0001

08014d38 <_fwalk_reent>:
 8014d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d3c:	4606      	mov	r6, r0
 8014d3e:	4688      	mov	r8, r1
 8014d40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014d44:	2700      	movs	r7, #0
 8014d46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014d4a:	f1b9 0901 	subs.w	r9, r9, #1
 8014d4e:	d505      	bpl.n	8014d5c <_fwalk_reent+0x24>
 8014d50:	6824      	ldr	r4, [r4, #0]
 8014d52:	2c00      	cmp	r4, #0
 8014d54:	d1f7      	bne.n	8014d46 <_fwalk_reent+0xe>
 8014d56:	4638      	mov	r0, r7
 8014d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d5c:	89ab      	ldrh	r3, [r5, #12]
 8014d5e:	2b01      	cmp	r3, #1
 8014d60:	d907      	bls.n	8014d72 <_fwalk_reent+0x3a>
 8014d62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014d66:	3301      	adds	r3, #1
 8014d68:	d003      	beq.n	8014d72 <_fwalk_reent+0x3a>
 8014d6a:	4629      	mov	r1, r5
 8014d6c:	4630      	mov	r0, r6
 8014d6e:	47c0      	blx	r8
 8014d70:	4307      	orrs	r7, r0
 8014d72:	3568      	adds	r5, #104	; 0x68
 8014d74:	e7e9      	b.n	8014d4a <_fwalk_reent+0x12>

08014d76 <__retarget_lock_init_recursive>:
 8014d76:	4770      	bx	lr

08014d78 <__retarget_lock_acquire_recursive>:
 8014d78:	4770      	bx	lr

08014d7a <__retarget_lock_release_recursive>:
 8014d7a:	4770      	bx	lr

08014d7c <__swhatbuf_r>:
 8014d7c:	b570      	push	{r4, r5, r6, lr}
 8014d7e:	460e      	mov	r6, r1
 8014d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d84:	2900      	cmp	r1, #0
 8014d86:	b096      	sub	sp, #88	; 0x58
 8014d88:	4614      	mov	r4, r2
 8014d8a:	461d      	mov	r5, r3
 8014d8c:	da08      	bge.n	8014da0 <__swhatbuf_r+0x24>
 8014d8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014d92:	2200      	movs	r2, #0
 8014d94:	602a      	str	r2, [r5, #0]
 8014d96:	061a      	lsls	r2, r3, #24
 8014d98:	d410      	bmi.n	8014dbc <__swhatbuf_r+0x40>
 8014d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d9e:	e00e      	b.n	8014dbe <__swhatbuf_r+0x42>
 8014da0:	466a      	mov	r2, sp
 8014da2:	f000 fbb1 	bl	8015508 <_fstat_r>
 8014da6:	2800      	cmp	r0, #0
 8014da8:	dbf1      	blt.n	8014d8e <__swhatbuf_r+0x12>
 8014daa:	9a01      	ldr	r2, [sp, #4]
 8014dac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014db0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014db4:	425a      	negs	r2, r3
 8014db6:	415a      	adcs	r2, r3
 8014db8:	602a      	str	r2, [r5, #0]
 8014dba:	e7ee      	b.n	8014d9a <__swhatbuf_r+0x1e>
 8014dbc:	2340      	movs	r3, #64	; 0x40
 8014dbe:	2000      	movs	r0, #0
 8014dc0:	6023      	str	r3, [r4, #0]
 8014dc2:	b016      	add	sp, #88	; 0x58
 8014dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08014dc8 <__smakebuf_r>:
 8014dc8:	898b      	ldrh	r3, [r1, #12]
 8014dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014dcc:	079d      	lsls	r5, r3, #30
 8014dce:	4606      	mov	r6, r0
 8014dd0:	460c      	mov	r4, r1
 8014dd2:	d507      	bpl.n	8014de4 <__smakebuf_r+0x1c>
 8014dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014dd8:	6023      	str	r3, [r4, #0]
 8014dda:	6123      	str	r3, [r4, #16]
 8014ddc:	2301      	movs	r3, #1
 8014dde:	6163      	str	r3, [r4, #20]
 8014de0:	b002      	add	sp, #8
 8014de2:	bd70      	pop	{r4, r5, r6, pc}
 8014de4:	ab01      	add	r3, sp, #4
 8014de6:	466a      	mov	r2, sp
 8014de8:	f7ff ffc8 	bl	8014d7c <__swhatbuf_r>
 8014dec:	9900      	ldr	r1, [sp, #0]
 8014dee:	4605      	mov	r5, r0
 8014df0:	4630      	mov	r0, r6
 8014df2:	f7ff fc37 	bl	8014664 <_malloc_r>
 8014df6:	b948      	cbnz	r0, 8014e0c <__smakebuf_r+0x44>
 8014df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dfc:	059a      	lsls	r2, r3, #22
 8014dfe:	d4ef      	bmi.n	8014de0 <__smakebuf_r+0x18>
 8014e00:	f023 0303 	bic.w	r3, r3, #3
 8014e04:	f043 0302 	orr.w	r3, r3, #2
 8014e08:	81a3      	strh	r3, [r4, #12]
 8014e0a:	e7e3      	b.n	8014dd4 <__smakebuf_r+0xc>
 8014e0c:	4b0d      	ldr	r3, [pc, #52]	; (8014e44 <__smakebuf_r+0x7c>)
 8014e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014e10:	89a3      	ldrh	r3, [r4, #12]
 8014e12:	6020      	str	r0, [r4, #0]
 8014e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e18:	81a3      	strh	r3, [r4, #12]
 8014e1a:	9b00      	ldr	r3, [sp, #0]
 8014e1c:	6163      	str	r3, [r4, #20]
 8014e1e:	9b01      	ldr	r3, [sp, #4]
 8014e20:	6120      	str	r0, [r4, #16]
 8014e22:	b15b      	cbz	r3, 8014e3c <__smakebuf_r+0x74>
 8014e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e28:	4630      	mov	r0, r6
 8014e2a:	f000 fb7f 	bl	801552c <_isatty_r>
 8014e2e:	b128      	cbz	r0, 8014e3c <__smakebuf_r+0x74>
 8014e30:	89a3      	ldrh	r3, [r4, #12]
 8014e32:	f023 0303 	bic.w	r3, r3, #3
 8014e36:	f043 0301 	orr.w	r3, r3, #1
 8014e3a:	81a3      	strh	r3, [r4, #12]
 8014e3c:	89a0      	ldrh	r0, [r4, #12]
 8014e3e:	4305      	orrs	r5, r0
 8014e40:	81a5      	strh	r5, [r4, #12]
 8014e42:	e7cd      	b.n	8014de0 <__smakebuf_r+0x18>
 8014e44:	08014bd5 	.word	0x08014bd5

08014e48 <__malloc_lock>:
 8014e48:	4801      	ldr	r0, [pc, #4]	; (8014e50 <__malloc_lock+0x8>)
 8014e4a:	f7ff bf95 	b.w	8014d78 <__retarget_lock_acquire_recursive>
 8014e4e:	bf00      	nop
 8014e50:	240050d4 	.word	0x240050d4

08014e54 <__malloc_unlock>:
 8014e54:	4801      	ldr	r0, [pc, #4]	; (8014e5c <__malloc_unlock+0x8>)
 8014e56:	f7ff bf90 	b.w	8014d7a <__retarget_lock_release_recursive>
 8014e5a:	bf00      	nop
 8014e5c:	240050d4 	.word	0x240050d4

08014e60 <__sfputc_r>:
 8014e60:	6893      	ldr	r3, [r2, #8]
 8014e62:	3b01      	subs	r3, #1
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	b410      	push	{r4}
 8014e68:	6093      	str	r3, [r2, #8]
 8014e6a:	da08      	bge.n	8014e7e <__sfputc_r+0x1e>
 8014e6c:	6994      	ldr	r4, [r2, #24]
 8014e6e:	42a3      	cmp	r3, r4
 8014e70:	db01      	blt.n	8014e76 <__sfputc_r+0x16>
 8014e72:	290a      	cmp	r1, #10
 8014e74:	d103      	bne.n	8014e7e <__sfputc_r+0x1e>
 8014e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e7a:	f7ff bd05 	b.w	8014888 <__swbuf_r>
 8014e7e:	6813      	ldr	r3, [r2, #0]
 8014e80:	1c58      	adds	r0, r3, #1
 8014e82:	6010      	str	r0, [r2, #0]
 8014e84:	7019      	strb	r1, [r3, #0]
 8014e86:	4608      	mov	r0, r1
 8014e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e8c:	4770      	bx	lr

08014e8e <__sfputs_r>:
 8014e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e90:	4606      	mov	r6, r0
 8014e92:	460f      	mov	r7, r1
 8014e94:	4614      	mov	r4, r2
 8014e96:	18d5      	adds	r5, r2, r3
 8014e98:	42ac      	cmp	r4, r5
 8014e9a:	d101      	bne.n	8014ea0 <__sfputs_r+0x12>
 8014e9c:	2000      	movs	r0, #0
 8014e9e:	e007      	b.n	8014eb0 <__sfputs_r+0x22>
 8014ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ea4:	463a      	mov	r2, r7
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	f7ff ffda 	bl	8014e60 <__sfputc_r>
 8014eac:	1c43      	adds	r3, r0, #1
 8014eae:	d1f3      	bne.n	8014e98 <__sfputs_r+0xa>
 8014eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014eb4 <_vfiprintf_r>:
 8014eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eb8:	460d      	mov	r5, r1
 8014eba:	b09d      	sub	sp, #116	; 0x74
 8014ebc:	4614      	mov	r4, r2
 8014ebe:	4698      	mov	r8, r3
 8014ec0:	4606      	mov	r6, r0
 8014ec2:	b118      	cbz	r0, 8014ecc <_vfiprintf_r+0x18>
 8014ec4:	6983      	ldr	r3, [r0, #24]
 8014ec6:	b90b      	cbnz	r3, 8014ecc <_vfiprintf_r+0x18>
 8014ec8:	f7ff feb8 	bl	8014c3c <__sinit>
 8014ecc:	4b89      	ldr	r3, [pc, #548]	; (80150f4 <_vfiprintf_r+0x240>)
 8014ece:	429d      	cmp	r5, r3
 8014ed0:	d11b      	bne.n	8014f0a <_vfiprintf_r+0x56>
 8014ed2:	6875      	ldr	r5, [r6, #4]
 8014ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ed6:	07d9      	lsls	r1, r3, #31
 8014ed8:	d405      	bmi.n	8014ee6 <_vfiprintf_r+0x32>
 8014eda:	89ab      	ldrh	r3, [r5, #12]
 8014edc:	059a      	lsls	r2, r3, #22
 8014ede:	d402      	bmi.n	8014ee6 <_vfiprintf_r+0x32>
 8014ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ee2:	f7ff ff49 	bl	8014d78 <__retarget_lock_acquire_recursive>
 8014ee6:	89ab      	ldrh	r3, [r5, #12]
 8014ee8:	071b      	lsls	r3, r3, #28
 8014eea:	d501      	bpl.n	8014ef0 <_vfiprintf_r+0x3c>
 8014eec:	692b      	ldr	r3, [r5, #16]
 8014eee:	b9eb      	cbnz	r3, 8014f2c <_vfiprintf_r+0x78>
 8014ef0:	4629      	mov	r1, r5
 8014ef2:	4630      	mov	r0, r6
 8014ef4:	f7ff fd1a 	bl	801492c <__swsetup_r>
 8014ef8:	b1c0      	cbz	r0, 8014f2c <_vfiprintf_r+0x78>
 8014efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014efc:	07dc      	lsls	r4, r3, #31
 8014efe:	d50e      	bpl.n	8014f1e <_vfiprintf_r+0x6a>
 8014f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f04:	b01d      	add	sp, #116	; 0x74
 8014f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f0a:	4b7b      	ldr	r3, [pc, #492]	; (80150f8 <_vfiprintf_r+0x244>)
 8014f0c:	429d      	cmp	r5, r3
 8014f0e:	d101      	bne.n	8014f14 <_vfiprintf_r+0x60>
 8014f10:	68b5      	ldr	r5, [r6, #8]
 8014f12:	e7df      	b.n	8014ed4 <_vfiprintf_r+0x20>
 8014f14:	4b79      	ldr	r3, [pc, #484]	; (80150fc <_vfiprintf_r+0x248>)
 8014f16:	429d      	cmp	r5, r3
 8014f18:	bf08      	it	eq
 8014f1a:	68f5      	ldreq	r5, [r6, #12]
 8014f1c:	e7da      	b.n	8014ed4 <_vfiprintf_r+0x20>
 8014f1e:	89ab      	ldrh	r3, [r5, #12]
 8014f20:	0598      	lsls	r0, r3, #22
 8014f22:	d4ed      	bmi.n	8014f00 <_vfiprintf_r+0x4c>
 8014f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f26:	f7ff ff28 	bl	8014d7a <__retarget_lock_release_recursive>
 8014f2a:	e7e9      	b.n	8014f00 <_vfiprintf_r+0x4c>
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8014f30:	2320      	movs	r3, #32
 8014f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f3a:	2330      	movs	r3, #48	; 0x30
 8014f3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015100 <_vfiprintf_r+0x24c>
 8014f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f44:	f04f 0901 	mov.w	r9, #1
 8014f48:	4623      	mov	r3, r4
 8014f4a:	469a      	mov	sl, r3
 8014f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f50:	b10a      	cbz	r2, 8014f56 <_vfiprintf_r+0xa2>
 8014f52:	2a25      	cmp	r2, #37	; 0x25
 8014f54:	d1f9      	bne.n	8014f4a <_vfiprintf_r+0x96>
 8014f56:	ebba 0b04 	subs.w	fp, sl, r4
 8014f5a:	d00b      	beq.n	8014f74 <_vfiprintf_r+0xc0>
 8014f5c:	465b      	mov	r3, fp
 8014f5e:	4622      	mov	r2, r4
 8014f60:	4629      	mov	r1, r5
 8014f62:	4630      	mov	r0, r6
 8014f64:	f7ff ff93 	bl	8014e8e <__sfputs_r>
 8014f68:	3001      	adds	r0, #1
 8014f6a:	f000 80aa 	beq.w	80150c2 <_vfiprintf_r+0x20e>
 8014f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f70:	445a      	add	r2, fp
 8014f72:	9209      	str	r2, [sp, #36]	; 0x24
 8014f74:	f89a 3000 	ldrb.w	r3, [sl]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	f000 80a2 	beq.w	80150c2 <_vfiprintf_r+0x20e>
 8014f7e:	2300      	movs	r3, #0
 8014f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f88:	f10a 0a01 	add.w	sl, sl, #1
 8014f8c:	9304      	str	r3, [sp, #16]
 8014f8e:	9307      	str	r3, [sp, #28]
 8014f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f94:	931a      	str	r3, [sp, #104]	; 0x68
 8014f96:	4654      	mov	r4, sl
 8014f98:	2205      	movs	r2, #5
 8014f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f9e:	4858      	ldr	r0, [pc, #352]	; (8015100 <_vfiprintf_r+0x24c>)
 8014fa0:	f7eb f99e 	bl	80002e0 <memchr>
 8014fa4:	9a04      	ldr	r2, [sp, #16]
 8014fa6:	b9d8      	cbnz	r0, 8014fe0 <_vfiprintf_r+0x12c>
 8014fa8:	06d1      	lsls	r1, r2, #27
 8014faa:	bf44      	itt	mi
 8014fac:	2320      	movmi	r3, #32
 8014fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fb2:	0713      	lsls	r3, r2, #28
 8014fb4:	bf44      	itt	mi
 8014fb6:	232b      	movmi	r3, #43	; 0x2b
 8014fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8014fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8014fc2:	d015      	beq.n	8014ff0 <_vfiprintf_r+0x13c>
 8014fc4:	9a07      	ldr	r2, [sp, #28]
 8014fc6:	4654      	mov	r4, sl
 8014fc8:	2000      	movs	r0, #0
 8014fca:	f04f 0c0a 	mov.w	ip, #10
 8014fce:	4621      	mov	r1, r4
 8014fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fd4:	3b30      	subs	r3, #48	; 0x30
 8014fd6:	2b09      	cmp	r3, #9
 8014fd8:	d94e      	bls.n	8015078 <_vfiprintf_r+0x1c4>
 8014fda:	b1b0      	cbz	r0, 801500a <_vfiprintf_r+0x156>
 8014fdc:	9207      	str	r2, [sp, #28]
 8014fde:	e014      	b.n	801500a <_vfiprintf_r+0x156>
 8014fe0:	eba0 0308 	sub.w	r3, r0, r8
 8014fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8014fe8:	4313      	orrs	r3, r2
 8014fea:	9304      	str	r3, [sp, #16]
 8014fec:	46a2      	mov	sl, r4
 8014fee:	e7d2      	b.n	8014f96 <_vfiprintf_r+0xe2>
 8014ff0:	9b03      	ldr	r3, [sp, #12]
 8014ff2:	1d19      	adds	r1, r3, #4
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	9103      	str	r1, [sp, #12]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	bfbb      	ittet	lt
 8014ffc:	425b      	neglt	r3, r3
 8014ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8015002:	9307      	strge	r3, [sp, #28]
 8015004:	9307      	strlt	r3, [sp, #28]
 8015006:	bfb8      	it	lt
 8015008:	9204      	strlt	r2, [sp, #16]
 801500a:	7823      	ldrb	r3, [r4, #0]
 801500c:	2b2e      	cmp	r3, #46	; 0x2e
 801500e:	d10c      	bne.n	801502a <_vfiprintf_r+0x176>
 8015010:	7863      	ldrb	r3, [r4, #1]
 8015012:	2b2a      	cmp	r3, #42	; 0x2a
 8015014:	d135      	bne.n	8015082 <_vfiprintf_r+0x1ce>
 8015016:	9b03      	ldr	r3, [sp, #12]
 8015018:	1d1a      	adds	r2, r3, #4
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	9203      	str	r2, [sp, #12]
 801501e:	2b00      	cmp	r3, #0
 8015020:	bfb8      	it	lt
 8015022:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015026:	3402      	adds	r4, #2
 8015028:	9305      	str	r3, [sp, #20]
 801502a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015110 <_vfiprintf_r+0x25c>
 801502e:	7821      	ldrb	r1, [r4, #0]
 8015030:	2203      	movs	r2, #3
 8015032:	4650      	mov	r0, sl
 8015034:	f7eb f954 	bl	80002e0 <memchr>
 8015038:	b140      	cbz	r0, 801504c <_vfiprintf_r+0x198>
 801503a:	2340      	movs	r3, #64	; 0x40
 801503c:	eba0 000a 	sub.w	r0, r0, sl
 8015040:	fa03 f000 	lsl.w	r0, r3, r0
 8015044:	9b04      	ldr	r3, [sp, #16]
 8015046:	4303      	orrs	r3, r0
 8015048:	3401      	adds	r4, #1
 801504a:	9304      	str	r3, [sp, #16]
 801504c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015050:	482c      	ldr	r0, [pc, #176]	; (8015104 <_vfiprintf_r+0x250>)
 8015052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015056:	2206      	movs	r2, #6
 8015058:	f7eb f942 	bl	80002e0 <memchr>
 801505c:	2800      	cmp	r0, #0
 801505e:	d03f      	beq.n	80150e0 <_vfiprintf_r+0x22c>
 8015060:	4b29      	ldr	r3, [pc, #164]	; (8015108 <_vfiprintf_r+0x254>)
 8015062:	bb1b      	cbnz	r3, 80150ac <_vfiprintf_r+0x1f8>
 8015064:	9b03      	ldr	r3, [sp, #12]
 8015066:	3307      	adds	r3, #7
 8015068:	f023 0307 	bic.w	r3, r3, #7
 801506c:	3308      	adds	r3, #8
 801506e:	9303      	str	r3, [sp, #12]
 8015070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015072:	443b      	add	r3, r7
 8015074:	9309      	str	r3, [sp, #36]	; 0x24
 8015076:	e767      	b.n	8014f48 <_vfiprintf_r+0x94>
 8015078:	fb0c 3202 	mla	r2, ip, r2, r3
 801507c:	460c      	mov	r4, r1
 801507e:	2001      	movs	r0, #1
 8015080:	e7a5      	b.n	8014fce <_vfiprintf_r+0x11a>
 8015082:	2300      	movs	r3, #0
 8015084:	3401      	adds	r4, #1
 8015086:	9305      	str	r3, [sp, #20]
 8015088:	4619      	mov	r1, r3
 801508a:	f04f 0c0a 	mov.w	ip, #10
 801508e:	4620      	mov	r0, r4
 8015090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015094:	3a30      	subs	r2, #48	; 0x30
 8015096:	2a09      	cmp	r2, #9
 8015098:	d903      	bls.n	80150a2 <_vfiprintf_r+0x1ee>
 801509a:	2b00      	cmp	r3, #0
 801509c:	d0c5      	beq.n	801502a <_vfiprintf_r+0x176>
 801509e:	9105      	str	r1, [sp, #20]
 80150a0:	e7c3      	b.n	801502a <_vfiprintf_r+0x176>
 80150a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80150a6:	4604      	mov	r4, r0
 80150a8:	2301      	movs	r3, #1
 80150aa:	e7f0      	b.n	801508e <_vfiprintf_r+0x1da>
 80150ac:	ab03      	add	r3, sp, #12
 80150ae:	9300      	str	r3, [sp, #0]
 80150b0:	462a      	mov	r2, r5
 80150b2:	4b16      	ldr	r3, [pc, #88]	; (801510c <_vfiprintf_r+0x258>)
 80150b4:	a904      	add	r1, sp, #16
 80150b6:	4630      	mov	r0, r6
 80150b8:	f3af 8000 	nop.w
 80150bc:	4607      	mov	r7, r0
 80150be:	1c78      	adds	r0, r7, #1
 80150c0:	d1d6      	bne.n	8015070 <_vfiprintf_r+0x1bc>
 80150c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150c4:	07d9      	lsls	r1, r3, #31
 80150c6:	d405      	bmi.n	80150d4 <_vfiprintf_r+0x220>
 80150c8:	89ab      	ldrh	r3, [r5, #12]
 80150ca:	059a      	lsls	r2, r3, #22
 80150cc:	d402      	bmi.n	80150d4 <_vfiprintf_r+0x220>
 80150ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150d0:	f7ff fe53 	bl	8014d7a <__retarget_lock_release_recursive>
 80150d4:	89ab      	ldrh	r3, [r5, #12]
 80150d6:	065b      	lsls	r3, r3, #25
 80150d8:	f53f af12 	bmi.w	8014f00 <_vfiprintf_r+0x4c>
 80150dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150de:	e711      	b.n	8014f04 <_vfiprintf_r+0x50>
 80150e0:	ab03      	add	r3, sp, #12
 80150e2:	9300      	str	r3, [sp, #0]
 80150e4:	462a      	mov	r2, r5
 80150e6:	4b09      	ldr	r3, [pc, #36]	; (801510c <_vfiprintf_r+0x258>)
 80150e8:	a904      	add	r1, sp, #16
 80150ea:	4630      	mov	r0, r6
 80150ec:	f000 f880 	bl	80151f0 <_printf_i>
 80150f0:	e7e4      	b.n	80150bc <_vfiprintf_r+0x208>
 80150f2:	bf00      	nop
 80150f4:	080158ec 	.word	0x080158ec
 80150f8:	0801590c 	.word	0x0801590c
 80150fc:	080158cc 	.word	0x080158cc
 8015100:	0801592c 	.word	0x0801592c
 8015104:	08015936 	.word	0x08015936
 8015108:	00000000 	.word	0x00000000
 801510c:	08014e8f 	.word	0x08014e8f
 8015110:	08015932 	.word	0x08015932

08015114 <_printf_common>:
 8015114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015118:	4616      	mov	r6, r2
 801511a:	4699      	mov	r9, r3
 801511c:	688a      	ldr	r2, [r1, #8]
 801511e:	690b      	ldr	r3, [r1, #16]
 8015120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015124:	4293      	cmp	r3, r2
 8015126:	bfb8      	it	lt
 8015128:	4613      	movlt	r3, r2
 801512a:	6033      	str	r3, [r6, #0]
 801512c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015130:	4607      	mov	r7, r0
 8015132:	460c      	mov	r4, r1
 8015134:	b10a      	cbz	r2, 801513a <_printf_common+0x26>
 8015136:	3301      	adds	r3, #1
 8015138:	6033      	str	r3, [r6, #0]
 801513a:	6823      	ldr	r3, [r4, #0]
 801513c:	0699      	lsls	r1, r3, #26
 801513e:	bf42      	ittt	mi
 8015140:	6833      	ldrmi	r3, [r6, #0]
 8015142:	3302      	addmi	r3, #2
 8015144:	6033      	strmi	r3, [r6, #0]
 8015146:	6825      	ldr	r5, [r4, #0]
 8015148:	f015 0506 	ands.w	r5, r5, #6
 801514c:	d106      	bne.n	801515c <_printf_common+0x48>
 801514e:	f104 0a19 	add.w	sl, r4, #25
 8015152:	68e3      	ldr	r3, [r4, #12]
 8015154:	6832      	ldr	r2, [r6, #0]
 8015156:	1a9b      	subs	r3, r3, r2
 8015158:	42ab      	cmp	r3, r5
 801515a:	dc26      	bgt.n	80151aa <_printf_common+0x96>
 801515c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015160:	1e13      	subs	r3, r2, #0
 8015162:	6822      	ldr	r2, [r4, #0]
 8015164:	bf18      	it	ne
 8015166:	2301      	movne	r3, #1
 8015168:	0692      	lsls	r2, r2, #26
 801516a:	d42b      	bmi.n	80151c4 <_printf_common+0xb0>
 801516c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015170:	4649      	mov	r1, r9
 8015172:	4638      	mov	r0, r7
 8015174:	47c0      	blx	r8
 8015176:	3001      	adds	r0, #1
 8015178:	d01e      	beq.n	80151b8 <_printf_common+0xa4>
 801517a:	6823      	ldr	r3, [r4, #0]
 801517c:	68e5      	ldr	r5, [r4, #12]
 801517e:	6832      	ldr	r2, [r6, #0]
 8015180:	f003 0306 	and.w	r3, r3, #6
 8015184:	2b04      	cmp	r3, #4
 8015186:	bf08      	it	eq
 8015188:	1aad      	subeq	r5, r5, r2
 801518a:	68a3      	ldr	r3, [r4, #8]
 801518c:	6922      	ldr	r2, [r4, #16]
 801518e:	bf0c      	ite	eq
 8015190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015194:	2500      	movne	r5, #0
 8015196:	4293      	cmp	r3, r2
 8015198:	bfc4      	itt	gt
 801519a:	1a9b      	subgt	r3, r3, r2
 801519c:	18ed      	addgt	r5, r5, r3
 801519e:	2600      	movs	r6, #0
 80151a0:	341a      	adds	r4, #26
 80151a2:	42b5      	cmp	r5, r6
 80151a4:	d11a      	bne.n	80151dc <_printf_common+0xc8>
 80151a6:	2000      	movs	r0, #0
 80151a8:	e008      	b.n	80151bc <_printf_common+0xa8>
 80151aa:	2301      	movs	r3, #1
 80151ac:	4652      	mov	r2, sl
 80151ae:	4649      	mov	r1, r9
 80151b0:	4638      	mov	r0, r7
 80151b2:	47c0      	blx	r8
 80151b4:	3001      	adds	r0, #1
 80151b6:	d103      	bne.n	80151c0 <_printf_common+0xac>
 80151b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151c0:	3501      	adds	r5, #1
 80151c2:	e7c6      	b.n	8015152 <_printf_common+0x3e>
 80151c4:	18e1      	adds	r1, r4, r3
 80151c6:	1c5a      	adds	r2, r3, #1
 80151c8:	2030      	movs	r0, #48	; 0x30
 80151ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80151ce:	4422      	add	r2, r4
 80151d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80151d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80151d8:	3302      	adds	r3, #2
 80151da:	e7c7      	b.n	801516c <_printf_common+0x58>
 80151dc:	2301      	movs	r3, #1
 80151de:	4622      	mov	r2, r4
 80151e0:	4649      	mov	r1, r9
 80151e2:	4638      	mov	r0, r7
 80151e4:	47c0      	blx	r8
 80151e6:	3001      	adds	r0, #1
 80151e8:	d0e6      	beq.n	80151b8 <_printf_common+0xa4>
 80151ea:	3601      	adds	r6, #1
 80151ec:	e7d9      	b.n	80151a2 <_printf_common+0x8e>
	...

080151f0 <_printf_i>:
 80151f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80151f4:	7e0f      	ldrb	r7, [r1, #24]
 80151f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80151f8:	2f78      	cmp	r7, #120	; 0x78
 80151fa:	4691      	mov	r9, r2
 80151fc:	4680      	mov	r8, r0
 80151fe:	460c      	mov	r4, r1
 8015200:	469a      	mov	sl, r3
 8015202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015206:	d807      	bhi.n	8015218 <_printf_i+0x28>
 8015208:	2f62      	cmp	r7, #98	; 0x62
 801520a:	d80a      	bhi.n	8015222 <_printf_i+0x32>
 801520c:	2f00      	cmp	r7, #0
 801520e:	f000 80d8 	beq.w	80153c2 <_printf_i+0x1d2>
 8015212:	2f58      	cmp	r7, #88	; 0x58
 8015214:	f000 80a3 	beq.w	801535e <_printf_i+0x16e>
 8015218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801521c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015220:	e03a      	b.n	8015298 <_printf_i+0xa8>
 8015222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015226:	2b15      	cmp	r3, #21
 8015228:	d8f6      	bhi.n	8015218 <_printf_i+0x28>
 801522a:	a101      	add	r1, pc, #4	; (adr r1, 8015230 <_printf_i+0x40>)
 801522c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015230:	08015289 	.word	0x08015289
 8015234:	0801529d 	.word	0x0801529d
 8015238:	08015219 	.word	0x08015219
 801523c:	08015219 	.word	0x08015219
 8015240:	08015219 	.word	0x08015219
 8015244:	08015219 	.word	0x08015219
 8015248:	0801529d 	.word	0x0801529d
 801524c:	08015219 	.word	0x08015219
 8015250:	08015219 	.word	0x08015219
 8015254:	08015219 	.word	0x08015219
 8015258:	08015219 	.word	0x08015219
 801525c:	080153a9 	.word	0x080153a9
 8015260:	080152cd 	.word	0x080152cd
 8015264:	0801538b 	.word	0x0801538b
 8015268:	08015219 	.word	0x08015219
 801526c:	08015219 	.word	0x08015219
 8015270:	080153cb 	.word	0x080153cb
 8015274:	08015219 	.word	0x08015219
 8015278:	080152cd 	.word	0x080152cd
 801527c:	08015219 	.word	0x08015219
 8015280:	08015219 	.word	0x08015219
 8015284:	08015393 	.word	0x08015393
 8015288:	682b      	ldr	r3, [r5, #0]
 801528a:	1d1a      	adds	r2, r3, #4
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	602a      	str	r2, [r5, #0]
 8015290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015298:	2301      	movs	r3, #1
 801529a:	e0a3      	b.n	80153e4 <_printf_i+0x1f4>
 801529c:	6820      	ldr	r0, [r4, #0]
 801529e:	6829      	ldr	r1, [r5, #0]
 80152a0:	0606      	lsls	r6, r0, #24
 80152a2:	f101 0304 	add.w	r3, r1, #4
 80152a6:	d50a      	bpl.n	80152be <_printf_i+0xce>
 80152a8:	680e      	ldr	r6, [r1, #0]
 80152aa:	602b      	str	r3, [r5, #0]
 80152ac:	2e00      	cmp	r6, #0
 80152ae:	da03      	bge.n	80152b8 <_printf_i+0xc8>
 80152b0:	232d      	movs	r3, #45	; 0x2d
 80152b2:	4276      	negs	r6, r6
 80152b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80152b8:	485e      	ldr	r0, [pc, #376]	; (8015434 <_printf_i+0x244>)
 80152ba:	230a      	movs	r3, #10
 80152bc:	e019      	b.n	80152f2 <_printf_i+0x102>
 80152be:	680e      	ldr	r6, [r1, #0]
 80152c0:	602b      	str	r3, [r5, #0]
 80152c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80152c6:	bf18      	it	ne
 80152c8:	b236      	sxthne	r6, r6
 80152ca:	e7ef      	b.n	80152ac <_printf_i+0xbc>
 80152cc:	682b      	ldr	r3, [r5, #0]
 80152ce:	6820      	ldr	r0, [r4, #0]
 80152d0:	1d19      	adds	r1, r3, #4
 80152d2:	6029      	str	r1, [r5, #0]
 80152d4:	0601      	lsls	r1, r0, #24
 80152d6:	d501      	bpl.n	80152dc <_printf_i+0xec>
 80152d8:	681e      	ldr	r6, [r3, #0]
 80152da:	e002      	b.n	80152e2 <_printf_i+0xf2>
 80152dc:	0646      	lsls	r6, r0, #25
 80152de:	d5fb      	bpl.n	80152d8 <_printf_i+0xe8>
 80152e0:	881e      	ldrh	r6, [r3, #0]
 80152e2:	4854      	ldr	r0, [pc, #336]	; (8015434 <_printf_i+0x244>)
 80152e4:	2f6f      	cmp	r7, #111	; 0x6f
 80152e6:	bf0c      	ite	eq
 80152e8:	2308      	moveq	r3, #8
 80152ea:	230a      	movne	r3, #10
 80152ec:	2100      	movs	r1, #0
 80152ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80152f2:	6865      	ldr	r5, [r4, #4]
 80152f4:	60a5      	str	r5, [r4, #8]
 80152f6:	2d00      	cmp	r5, #0
 80152f8:	bfa2      	ittt	ge
 80152fa:	6821      	ldrge	r1, [r4, #0]
 80152fc:	f021 0104 	bicge.w	r1, r1, #4
 8015300:	6021      	strge	r1, [r4, #0]
 8015302:	b90e      	cbnz	r6, 8015308 <_printf_i+0x118>
 8015304:	2d00      	cmp	r5, #0
 8015306:	d04d      	beq.n	80153a4 <_printf_i+0x1b4>
 8015308:	4615      	mov	r5, r2
 801530a:	fbb6 f1f3 	udiv	r1, r6, r3
 801530e:	fb03 6711 	mls	r7, r3, r1, r6
 8015312:	5dc7      	ldrb	r7, [r0, r7]
 8015314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015318:	4637      	mov	r7, r6
 801531a:	42bb      	cmp	r3, r7
 801531c:	460e      	mov	r6, r1
 801531e:	d9f4      	bls.n	801530a <_printf_i+0x11a>
 8015320:	2b08      	cmp	r3, #8
 8015322:	d10b      	bne.n	801533c <_printf_i+0x14c>
 8015324:	6823      	ldr	r3, [r4, #0]
 8015326:	07de      	lsls	r6, r3, #31
 8015328:	d508      	bpl.n	801533c <_printf_i+0x14c>
 801532a:	6923      	ldr	r3, [r4, #16]
 801532c:	6861      	ldr	r1, [r4, #4]
 801532e:	4299      	cmp	r1, r3
 8015330:	bfde      	ittt	le
 8015332:	2330      	movle	r3, #48	; 0x30
 8015334:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015338:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801533c:	1b52      	subs	r2, r2, r5
 801533e:	6122      	str	r2, [r4, #16]
 8015340:	f8cd a000 	str.w	sl, [sp]
 8015344:	464b      	mov	r3, r9
 8015346:	aa03      	add	r2, sp, #12
 8015348:	4621      	mov	r1, r4
 801534a:	4640      	mov	r0, r8
 801534c:	f7ff fee2 	bl	8015114 <_printf_common>
 8015350:	3001      	adds	r0, #1
 8015352:	d14c      	bne.n	80153ee <_printf_i+0x1fe>
 8015354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015358:	b004      	add	sp, #16
 801535a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801535e:	4835      	ldr	r0, [pc, #212]	; (8015434 <_printf_i+0x244>)
 8015360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015364:	6829      	ldr	r1, [r5, #0]
 8015366:	6823      	ldr	r3, [r4, #0]
 8015368:	f851 6b04 	ldr.w	r6, [r1], #4
 801536c:	6029      	str	r1, [r5, #0]
 801536e:	061d      	lsls	r5, r3, #24
 8015370:	d514      	bpl.n	801539c <_printf_i+0x1ac>
 8015372:	07df      	lsls	r7, r3, #31
 8015374:	bf44      	itt	mi
 8015376:	f043 0320 	orrmi.w	r3, r3, #32
 801537a:	6023      	strmi	r3, [r4, #0]
 801537c:	b91e      	cbnz	r6, 8015386 <_printf_i+0x196>
 801537e:	6823      	ldr	r3, [r4, #0]
 8015380:	f023 0320 	bic.w	r3, r3, #32
 8015384:	6023      	str	r3, [r4, #0]
 8015386:	2310      	movs	r3, #16
 8015388:	e7b0      	b.n	80152ec <_printf_i+0xfc>
 801538a:	6823      	ldr	r3, [r4, #0]
 801538c:	f043 0320 	orr.w	r3, r3, #32
 8015390:	6023      	str	r3, [r4, #0]
 8015392:	2378      	movs	r3, #120	; 0x78
 8015394:	4828      	ldr	r0, [pc, #160]	; (8015438 <_printf_i+0x248>)
 8015396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801539a:	e7e3      	b.n	8015364 <_printf_i+0x174>
 801539c:	0659      	lsls	r1, r3, #25
 801539e:	bf48      	it	mi
 80153a0:	b2b6      	uxthmi	r6, r6
 80153a2:	e7e6      	b.n	8015372 <_printf_i+0x182>
 80153a4:	4615      	mov	r5, r2
 80153a6:	e7bb      	b.n	8015320 <_printf_i+0x130>
 80153a8:	682b      	ldr	r3, [r5, #0]
 80153aa:	6826      	ldr	r6, [r4, #0]
 80153ac:	6961      	ldr	r1, [r4, #20]
 80153ae:	1d18      	adds	r0, r3, #4
 80153b0:	6028      	str	r0, [r5, #0]
 80153b2:	0635      	lsls	r5, r6, #24
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	d501      	bpl.n	80153bc <_printf_i+0x1cc>
 80153b8:	6019      	str	r1, [r3, #0]
 80153ba:	e002      	b.n	80153c2 <_printf_i+0x1d2>
 80153bc:	0670      	lsls	r0, r6, #25
 80153be:	d5fb      	bpl.n	80153b8 <_printf_i+0x1c8>
 80153c0:	8019      	strh	r1, [r3, #0]
 80153c2:	2300      	movs	r3, #0
 80153c4:	6123      	str	r3, [r4, #16]
 80153c6:	4615      	mov	r5, r2
 80153c8:	e7ba      	b.n	8015340 <_printf_i+0x150>
 80153ca:	682b      	ldr	r3, [r5, #0]
 80153cc:	1d1a      	adds	r2, r3, #4
 80153ce:	602a      	str	r2, [r5, #0]
 80153d0:	681d      	ldr	r5, [r3, #0]
 80153d2:	6862      	ldr	r2, [r4, #4]
 80153d4:	2100      	movs	r1, #0
 80153d6:	4628      	mov	r0, r5
 80153d8:	f7ea ff82 	bl	80002e0 <memchr>
 80153dc:	b108      	cbz	r0, 80153e2 <_printf_i+0x1f2>
 80153de:	1b40      	subs	r0, r0, r5
 80153e0:	6060      	str	r0, [r4, #4]
 80153e2:	6863      	ldr	r3, [r4, #4]
 80153e4:	6123      	str	r3, [r4, #16]
 80153e6:	2300      	movs	r3, #0
 80153e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153ec:	e7a8      	b.n	8015340 <_printf_i+0x150>
 80153ee:	6923      	ldr	r3, [r4, #16]
 80153f0:	462a      	mov	r2, r5
 80153f2:	4649      	mov	r1, r9
 80153f4:	4640      	mov	r0, r8
 80153f6:	47d0      	blx	sl
 80153f8:	3001      	adds	r0, #1
 80153fa:	d0ab      	beq.n	8015354 <_printf_i+0x164>
 80153fc:	6823      	ldr	r3, [r4, #0]
 80153fe:	079b      	lsls	r3, r3, #30
 8015400:	d413      	bmi.n	801542a <_printf_i+0x23a>
 8015402:	68e0      	ldr	r0, [r4, #12]
 8015404:	9b03      	ldr	r3, [sp, #12]
 8015406:	4298      	cmp	r0, r3
 8015408:	bfb8      	it	lt
 801540a:	4618      	movlt	r0, r3
 801540c:	e7a4      	b.n	8015358 <_printf_i+0x168>
 801540e:	2301      	movs	r3, #1
 8015410:	4632      	mov	r2, r6
 8015412:	4649      	mov	r1, r9
 8015414:	4640      	mov	r0, r8
 8015416:	47d0      	blx	sl
 8015418:	3001      	adds	r0, #1
 801541a:	d09b      	beq.n	8015354 <_printf_i+0x164>
 801541c:	3501      	adds	r5, #1
 801541e:	68e3      	ldr	r3, [r4, #12]
 8015420:	9903      	ldr	r1, [sp, #12]
 8015422:	1a5b      	subs	r3, r3, r1
 8015424:	42ab      	cmp	r3, r5
 8015426:	dcf2      	bgt.n	801540e <_printf_i+0x21e>
 8015428:	e7eb      	b.n	8015402 <_printf_i+0x212>
 801542a:	2500      	movs	r5, #0
 801542c:	f104 0619 	add.w	r6, r4, #25
 8015430:	e7f5      	b.n	801541e <_printf_i+0x22e>
 8015432:	bf00      	nop
 8015434:	0801593d 	.word	0x0801593d
 8015438:	0801594e 	.word	0x0801594e

0801543c <__sread>:
 801543c:	b510      	push	{r4, lr}
 801543e:	460c      	mov	r4, r1
 8015440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015444:	f000 f894 	bl	8015570 <_read_r>
 8015448:	2800      	cmp	r0, #0
 801544a:	bfab      	itete	ge
 801544c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801544e:	89a3      	ldrhlt	r3, [r4, #12]
 8015450:	181b      	addge	r3, r3, r0
 8015452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015456:	bfac      	ite	ge
 8015458:	6563      	strge	r3, [r4, #84]	; 0x54
 801545a:	81a3      	strhlt	r3, [r4, #12]
 801545c:	bd10      	pop	{r4, pc}

0801545e <__swrite>:
 801545e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015462:	461f      	mov	r7, r3
 8015464:	898b      	ldrh	r3, [r1, #12]
 8015466:	05db      	lsls	r3, r3, #23
 8015468:	4605      	mov	r5, r0
 801546a:	460c      	mov	r4, r1
 801546c:	4616      	mov	r6, r2
 801546e:	d505      	bpl.n	801547c <__swrite+0x1e>
 8015470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015474:	2302      	movs	r3, #2
 8015476:	2200      	movs	r2, #0
 8015478:	f000 f868 	bl	801554c <_lseek_r>
 801547c:	89a3      	ldrh	r3, [r4, #12]
 801547e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015486:	81a3      	strh	r3, [r4, #12]
 8015488:	4632      	mov	r2, r6
 801548a:	463b      	mov	r3, r7
 801548c:	4628      	mov	r0, r5
 801548e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015492:	f000 b817 	b.w	80154c4 <_write_r>

08015496 <__sseek>:
 8015496:	b510      	push	{r4, lr}
 8015498:	460c      	mov	r4, r1
 801549a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801549e:	f000 f855 	bl	801554c <_lseek_r>
 80154a2:	1c43      	adds	r3, r0, #1
 80154a4:	89a3      	ldrh	r3, [r4, #12]
 80154a6:	bf15      	itete	ne
 80154a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80154aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80154ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80154b2:	81a3      	strheq	r3, [r4, #12]
 80154b4:	bf18      	it	ne
 80154b6:	81a3      	strhne	r3, [r4, #12]
 80154b8:	bd10      	pop	{r4, pc}

080154ba <__sclose>:
 80154ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154be:	f000 b813 	b.w	80154e8 <_close_r>
	...

080154c4 <_write_r>:
 80154c4:	b538      	push	{r3, r4, r5, lr}
 80154c6:	4d07      	ldr	r5, [pc, #28]	; (80154e4 <_write_r+0x20>)
 80154c8:	4604      	mov	r4, r0
 80154ca:	4608      	mov	r0, r1
 80154cc:	4611      	mov	r1, r2
 80154ce:	2200      	movs	r2, #0
 80154d0:	602a      	str	r2, [r5, #0]
 80154d2:	461a      	mov	r2, r3
 80154d4:	f7ed fcd9 	bl	8002e8a <_write>
 80154d8:	1c43      	adds	r3, r0, #1
 80154da:	d102      	bne.n	80154e2 <_write_r+0x1e>
 80154dc:	682b      	ldr	r3, [r5, #0]
 80154de:	b103      	cbz	r3, 80154e2 <_write_r+0x1e>
 80154e0:	6023      	str	r3, [r4, #0]
 80154e2:	bd38      	pop	{r3, r4, r5, pc}
 80154e4:	240050d8 	.word	0x240050d8

080154e8 <_close_r>:
 80154e8:	b538      	push	{r3, r4, r5, lr}
 80154ea:	4d06      	ldr	r5, [pc, #24]	; (8015504 <_close_r+0x1c>)
 80154ec:	2300      	movs	r3, #0
 80154ee:	4604      	mov	r4, r0
 80154f0:	4608      	mov	r0, r1
 80154f2:	602b      	str	r3, [r5, #0]
 80154f4:	f7ed fce5 	bl	8002ec2 <_close>
 80154f8:	1c43      	adds	r3, r0, #1
 80154fa:	d102      	bne.n	8015502 <_close_r+0x1a>
 80154fc:	682b      	ldr	r3, [r5, #0]
 80154fe:	b103      	cbz	r3, 8015502 <_close_r+0x1a>
 8015500:	6023      	str	r3, [r4, #0]
 8015502:	bd38      	pop	{r3, r4, r5, pc}
 8015504:	240050d8 	.word	0x240050d8

08015508 <_fstat_r>:
 8015508:	b538      	push	{r3, r4, r5, lr}
 801550a:	4d07      	ldr	r5, [pc, #28]	; (8015528 <_fstat_r+0x20>)
 801550c:	2300      	movs	r3, #0
 801550e:	4604      	mov	r4, r0
 8015510:	4608      	mov	r0, r1
 8015512:	4611      	mov	r1, r2
 8015514:	602b      	str	r3, [r5, #0]
 8015516:	f7ed fce0 	bl	8002eda <_fstat>
 801551a:	1c43      	adds	r3, r0, #1
 801551c:	d102      	bne.n	8015524 <_fstat_r+0x1c>
 801551e:	682b      	ldr	r3, [r5, #0]
 8015520:	b103      	cbz	r3, 8015524 <_fstat_r+0x1c>
 8015522:	6023      	str	r3, [r4, #0]
 8015524:	bd38      	pop	{r3, r4, r5, pc}
 8015526:	bf00      	nop
 8015528:	240050d8 	.word	0x240050d8

0801552c <_isatty_r>:
 801552c:	b538      	push	{r3, r4, r5, lr}
 801552e:	4d06      	ldr	r5, [pc, #24]	; (8015548 <_isatty_r+0x1c>)
 8015530:	2300      	movs	r3, #0
 8015532:	4604      	mov	r4, r0
 8015534:	4608      	mov	r0, r1
 8015536:	602b      	str	r3, [r5, #0]
 8015538:	f7ed fcdf 	bl	8002efa <_isatty>
 801553c:	1c43      	adds	r3, r0, #1
 801553e:	d102      	bne.n	8015546 <_isatty_r+0x1a>
 8015540:	682b      	ldr	r3, [r5, #0]
 8015542:	b103      	cbz	r3, 8015546 <_isatty_r+0x1a>
 8015544:	6023      	str	r3, [r4, #0]
 8015546:	bd38      	pop	{r3, r4, r5, pc}
 8015548:	240050d8 	.word	0x240050d8

0801554c <_lseek_r>:
 801554c:	b538      	push	{r3, r4, r5, lr}
 801554e:	4d07      	ldr	r5, [pc, #28]	; (801556c <_lseek_r+0x20>)
 8015550:	4604      	mov	r4, r0
 8015552:	4608      	mov	r0, r1
 8015554:	4611      	mov	r1, r2
 8015556:	2200      	movs	r2, #0
 8015558:	602a      	str	r2, [r5, #0]
 801555a:	461a      	mov	r2, r3
 801555c:	f7ed fcd8 	bl	8002f10 <_lseek>
 8015560:	1c43      	adds	r3, r0, #1
 8015562:	d102      	bne.n	801556a <_lseek_r+0x1e>
 8015564:	682b      	ldr	r3, [r5, #0]
 8015566:	b103      	cbz	r3, 801556a <_lseek_r+0x1e>
 8015568:	6023      	str	r3, [r4, #0]
 801556a:	bd38      	pop	{r3, r4, r5, pc}
 801556c:	240050d8 	.word	0x240050d8

08015570 <_read_r>:
 8015570:	b538      	push	{r3, r4, r5, lr}
 8015572:	4d07      	ldr	r5, [pc, #28]	; (8015590 <_read_r+0x20>)
 8015574:	4604      	mov	r4, r0
 8015576:	4608      	mov	r0, r1
 8015578:	4611      	mov	r1, r2
 801557a:	2200      	movs	r2, #0
 801557c:	602a      	str	r2, [r5, #0]
 801557e:	461a      	mov	r2, r3
 8015580:	f7ed fc66 	bl	8002e50 <_read>
 8015584:	1c43      	adds	r3, r0, #1
 8015586:	d102      	bne.n	801558e <_read_r+0x1e>
 8015588:	682b      	ldr	r3, [r5, #0]
 801558a:	b103      	cbz	r3, 801558e <_read_r+0x1e>
 801558c:	6023      	str	r3, [r4, #0]
 801558e:	bd38      	pop	{r3, r4, r5, pc}
 8015590:	240050d8 	.word	0x240050d8

08015594 <_init>:
 8015594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015596:	bf00      	nop
 8015598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801559a:	bc08      	pop	{r3}
 801559c:	469e      	mov	lr, r3
 801559e:	4770      	bx	lr

080155a0 <_fini>:
 80155a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155a2:	bf00      	nop
 80155a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155a6:	bc08      	pop	{r3}
 80155a8:	469e      	mov	lr, r3
 80155aa:	4770      	bx	lr
