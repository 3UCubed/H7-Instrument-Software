
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015abc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08015d5c  08015d5c  00025d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080161bc  080161bc  000261bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080161c4  080161c4  000261c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080161c8  080161c8  000261c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  080161cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000549c  24000100  080162cc  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400559c  080162cc  0003559c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033387  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000561a  00000000  00000000  000634b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026d8  00000000  00000000  00068ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000024d0  00000000  00000000  0006b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007dd1  00000000  00000000  0006d678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003158a  00000000  00000000  00075449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194841  00000000  00000000  000a69d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023b214  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aff8  00000000  00000000  0023b264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015d44 	.word	0x08015d44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08015d44 	.word	0x08015d44

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f010 ffd8 	bl	8011650 <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f010 ffcd 	bl	8011650 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 ffc2 	bl	8011650 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f014 fc9a 	bl	8015008 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004e8 	.word	0x240004e8
 80006e0:	24000b44 	.word	0x24000b44
 80006e4:	24000534 	.word	0x24000534
 80006e8:	24000580 	.word	0x24000580
 80006ec:	08015dbc 	.word	0x08015dbc

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49f2      	ldr	r1, [pc, #968]	; (8000ac4 <HAL_UART_RxCpltCallback+0x3d4>)
 80006fc:	48f2      	ldr	r0, [pc, #968]	; (8000ac8 <HAL_UART_RxCpltCallback+0x3d8>)
 80006fe:	f00e fa9b 	bl	800ec38 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bf0      	ldr	r3, [pc, #960]	; (8000ac4 <HAL_UART_RxCpltCallback+0x3d4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2be0      	cmp	r3, #224	; 0xe0
 800070c:	f200 83c6 	bhi.w	8000e9c <HAL_UART_RxCpltCallback+0x7ac>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000ab1 	.word	0x08000ab1
 800071c:	08000aed 	.word	0x08000aed
 8000720:	08000b73 	.word	0x08000b73
 8000724:	08000b9d 	.word	0x08000b9d
 8000728:	08000bc5 	.word	0x08000bc5
 800072c:	08000bef 	.word	0x08000bef
 8000730:	08000c1b 	.word	0x08000c1b
 8000734:	08000c47 	.word	0x08000c47
 8000738:	08000c71 	.word	0x08000c71
 800073c:	08000ca3 	.word	0x08000ca3
 8000740:	08000cc5 	.word	0x08000cc5
 8000744:	08000ce1 	.word	0x08000ce1
 8000748:	08000cfd 	.word	0x08000cfd
 800074c:	08000d47 	.word	0x08000d47
 8000750:	08000e41 	.word	0x08000e41
 8000754:	08000e71 	.word	0x08000e71
 8000758:	08000a9d 	.word	0x08000a9d
 800075c:	08000ad9 	.word	0x08000ad9
 8000760:	08000b5d 	.word	0x08000b5d
 8000764:	08000b89 	.word	0x08000b89
 8000768:	08000bb1 	.word	0x08000bb1
 800076c:	08000bd9 	.word	0x08000bd9
 8000770:	08000c05 	.word	0x08000c05
 8000774:	08000c31 	.word	0x08000c31
 8000778:	08000c5d 	.word	0x08000c5d
 800077c:	08000c85 	.word	0x08000c85
 8000780:	08000cb7 	.word	0x08000cb7
 8000784:	08000cd3 	.word	0x08000cd3
 8000788:	08000cef 	.word	0x08000cef
 800078c:	08000d0b 	.word	0x08000d0b
 8000790:	08000d83 	.word	0x08000d83
 8000794:	08000e69 	.word	0x08000e69
 8000798:	08000e9d 	.word	0x08000e9d
 800079c:	08000e9d 	.word	0x08000e9d
 80007a0:	08000e9d 	.word	0x08000e9d
 80007a4:	08000e9d 	.word	0x08000e9d
 80007a8:	08000e9d 	.word	0x08000e9d
 80007ac:	08000e9d 	.word	0x08000e9d
 80007b0:	08000e9d 	.word	0x08000e9d
 80007b4:	08000e9d 	.word	0x08000e9d
 80007b8:	08000e9d 	.word	0x08000e9d
 80007bc:	08000e9d 	.word	0x08000e9d
 80007c0:	08000e9d 	.word	0x08000e9d
 80007c4:	08000e9d 	.word	0x08000e9d
 80007c8:	08000e9d 	.word	0x08000e9d
 80007cc:	08000e9d 	.word	0x08000e9d
 80007d0:	08000e9d 	.word	0x08000e9d
 80007d4:	08000e9d 	.word	0x08000e9d
 80007d8:	08000e9d 	.word	0x08000e9d
 80007dc:	08000e9d 	.word	0x08000e9d
 80007e0:	08000e9d 	.word	0x08000e9d
 80007e4:	08000e9d 	.word	0x08000e9d
 80007e8:	08000e9d 	.word	0x08000e9d
 80007ec:	08000e9d 	.word	0x08000e9d
 80007f0:	08000e9d 	.word	0x08000e9d
 80007f4:	08000e9d 	.word	0x08000e9d
 80007f8:	08000e9d 	.word	0x08000e9d
 80007fc:	08000e9d 	.word	0x08000e9d
 8000800:	08000e9d 	.word	0x08000e9d
 8000804:	08000e9d 	.word	0x08000e9d
 8000808:	08000e9d 	.word	0x08000e9d
 800080c:	08000e9d 	.word	0x08000e9d
 8000810:	08000e9d 	.word	0x08000e9d
 8000814:	08000e9d 	.word	0x08000e9d
 8000818:	08000e9d 	.word	0x08000e9d
 800081c:	08000e9d 	.word	0x08000e9d
 8000820:	08000e9d 	.word	0x08000e9d
 8000824:	08000e9d 	.word	0x08000e9d
 8000828:	08000e9d 	.word	0x08000e9d
 800082c:	08000e9d 	.word	0x08000e9d
 8000830:	08000e9d 	.word	0x08000e9d
 8000834:	08000e9d 	.word	0x08000e9d
 8000838:	08000e9d 	.word	0x08000e9d
 800083c:	08000e9d 	.word	0x08000e9d
 8000840:	08000e9d 	.word	0x08000e9d
 8000844:	08000e9d 	.word	0x08000e9d
 8000848:	08000e9d 	.word	0x08000e9d
 800084c:	08000e9d 	.word	0x08000e9d
 8000850:	08000e9d 	.word	0x08000e9d
 8000854:	08000e9d 	.word	0x08000e9d
 8000858:	08000e9d 	.word	0x08000e9d
 800085c:	08000e9d 	.word	0x08000e9d
 8000860:	08000e9d 	.word	0x08000e9d
 8000864:	08000e9d 	.word	0x08000e9d
 8000868:	08000e9d 	.word	0x08000e9d
 800086c:	08000e9d 	.word	0x08000e9d
 8000870:	08000e9d 	.word	0x08000e9d
 8000874:	08000e9d 	.word	0x08000e9d
 8000878:	08000e9d 	.word	0x08000e9d
 800087c:	08000e9d 	.word	0x08000e9d
 8000880:	08000e9d 	.word	0x08000e9d
 8000884:	08000e9d 	.word	0x08000e9d
 8000888:	08000e9d 	.word	0x08000e9d
 800088c:	08000e9d 	.word	0x08000e9d
 8000890:	08000e9d 	.word	0x08000e9d
 8000894:	08000e9d 	.word	0x08000e9d
 8000898:	08000e9d 	.word	0x08000e9d
 800089c:	08000e9d 	.word	0x08000e9d
 80008a0:	08000e9d 	.word	0x08000e9d
 80008a4:	08000e9d 	.word	0x08000e9d
 80008a8:	08000e9d 	.word	0x08000e9d
 80008ac:	08000e9d 	.word	0x08000e9d
 80008b0:	08000e9d 	.word	0x08000e9d
 80008b4:	08000e9d 	.word	0x08000e9d
 80008b8:	08000e9d 	.word	0x08000e9d
 80008bc:	08000e9d 	.word	0x08000e9d
 80008c0:	08000e9d 	.word	0x08000e9d
 80008c4:	08000e9d 	.word	0x08000e9d
 80008c8:	08000e9d 	.word	0x08000e9d
 80008cc:	08000e9d 	.word	0x08000e9d
 80008d0:	08000e9d 	.word	0x08000e9d
 80008d4:	08000e9d 	.word	0x08000e9d
 80008d8:	08000e9d 	.word	0x08000e9d
 80008dc:	08000e9d 	.word	0x08000e9d
 80008e0:	08000e9d 	.word	0x08000e9d
 80008e4:	08000e9d 	.word	0x08000e9d
 80008e8:	08000e9d 	.word	0x08000e9d
 80008ec:	08000e9d 	.word	0x08000e9d
 80008f0:	08000e9d 	.word	0x08000e9d
 80008f4:	08000e9d 	.word	0x08000e9d
 80008f8:	08000e9d 	.word	0x08000e9d
 80008fc:	08000e9d 	.word	0x08000e9d
 8000900:	08000e9d 	.word	0x08000e9d
 8000904:	08000e9d 	.word	0x08000e9d
 8000908:	08000e9d 	.word	0x08000e9d
 800090c:	08000e9d 	.word	0x08000e9d
 8000910:	08000e9d 	.word	0x08000e9d
 8000914:	08000e9d 	.word	0x08000e9d
 8000918:	08000e9d 	.word	0x08000e9d
 800091c:	08000e9d 	.word	0x08000e9d
 8000920:	08000e9d 	.word	0x08000e9d
 8000924:	08000e9d 	.word	0x08000e9d
 8000928:	08000e9d 	.word	0x08000e9d
 800092c:	08000e9d 	.word	0x08000e9d
 8000930:	08000e9d 	.word	0x08000e9d
 8000934:	08000e9d 	.word	0x08000e9d
 8000938:	08000e9d 	.word	0x08000e9d
 800093c:	08000e9d 	.word	0x08000e9d
 8000940:	08000e9d 	.word	0x08000e9d
 8000944:	08000e9d 	.word	0x08000e9d
 8000948:	08000e9d 	.word	0x08000e9d
 800094c:	08000e9d 	.word	0x08000e9d
 8000950:	08000e9d 	.word	0x08000e9d
 8000954:	08000e9d 	.word	0x08000e9d
 8000958:	08000e9d 	.word	0x08000e9d
 800095c:	08000e9d 	.word	0x08000e9d
 8000960:	08000e9d 	.word	0x08000e9d
 8000964:	08000e9d 	.word	0x08000e9d
 8000968:	08000e9d 	.word	0x08000e9d
 800096c:	08000e9d 	.word	0x08000e9d
 8000970:	08000e9d 	.word	0x08000e9d
 8000974:	08000e9d 	.word	0x08000e9d
 8000978:	08000e9d 	.word	0x08000e9d
 800097c:	08000e9d 	.word	0x08000e9d
 8000980:	08000e9d 	.word	0x08000e9d
 8000984:	08000e9d 	.word	0x08000e9d
 8000988:	08000e9d 	.word	0x08000e9d
 800098c:	08000e9d 	.word	0x08000e9d
 8000990:	08000e9d 	.word	0x08000e9d
 8000994:	08000e9d 	.word	0x08000e9d
 8000998:	08000e9d 	.word	0x08000e9d
 800099c:	08000e9d 	.word	0x08000e9d
 80009a0:	08000e9d 	.word	0x08000e9d
 80009a4:	08000e9d 	.word	0x08000e9d
 80009a8:	08000e9d 	.word	0x08000e9d
 80009ac:	08000e9d 	.word	0x08000e9d
 80009b0:	08000e9d 	.word	0x08000e9d
 80009b4:	08000e9d 	.word	0x08000e9d
 80009b8:	08000e9d 	.word	0x08000e9d
 80009bc:	08000e9d 	.word	0x08000e9d
 80009c0:	08000e9d 	.word	0x08000e9d
 80009c4:	08000e9d 	.word	0x08000e9d
 80009c8:	08000e9d 	.word	0x08000e9d
 80009cc:	08000e9d 	.word	0x08000e9d
 80009d0:	08000e9d 	.word	0x08000e9d
 80009d4:	08000e9d 	.word	0x08000e9d
 80009d8:	08000e9d 	.word	0x08000e9d
 80009dc:	08000e9d 	.word	0x08000e9d
 80009e0:	08000e9d 	.word	0x08000e9d
 80009e4:	08000e9d 	.word	0x08000e9d
 80009e8:	08000e9d 	.word	0x08000e9d
 80009ec:	08000e9d 	.word	0x08000e9d
 80009f0:	08000e9d 	.word	0x08000e9d
 80009f4:	08000e9d 	.word	0x08000e9d
 80009f8:	08000e9d 	.word	0x08000e9d
 80009fc:	08000e9d 	.word	0x08000e9d
 8000a00:	08000e9d 	.word	0x08000e9d
 8000a04:	08000e9d 	.word	0x08000e9d
 8000a08:	08000e9d 	.word	0x08000e9d
 8000a0c:	08000e9d 	.word	0x08000e9d
 8000a10:	08000e9d 	.word	0x08000e9d
 8000a14:	08000e9d 	.word	0x08000e9d
 8000a18:	08000e9d 	.word	0x08000e9d
 8000a1c:	08000e9d 	.word	0x08000e9d
 8000a20:	08000e9d 	.word	0x08000e9d
 8000a24:	08000e9d 	.word	0x08000e9d
 8000a28:	08000e9d 	.word	0x08000e9d
 8000a2c:	08000e9d 	.word	0x08000e9d
 8000a30:	08000e9d 	.word	0x08000e9d
 8000a34:	08000e9d 	.word	0x08000e9d
 8000a38:	08000e9d 	.word	0x08000e9d
 8000a3c:	08000e9d 	.word	0x08000e9d
 8000a40:	08000e9d 	.word	0x08000e9d
 8000a44:	08000e9d 	.word	0x08000e9d
 8000a48:	08000e9d 	.word	0x08000e9d
 8000a4c:	08000e9d 	.word	0x08000e9d
 8000a50:	08000e9d 	.word	0x08000e9d
 8000a54:	08000e9d 	.word	0x08000e9d
 8000a58:	08000e8b 	.word	0x08000e8b
 8000a5c:	08000e9d 	.word	0x08000e9d
 8000a60:	08000e9d 	.word	0x08000e9d
 8000a64:	08000e9d 	.word	0x08000e9d
 8000a68:	08000e9d 	.word	0x08000e9d
 8000a6c:	08000e9d 	.word	0x08000e9d
 8000a70:	08000e9d 	.word	0x08000e9d
 8000a74:	08000e9d 	.word	0x08000e9d
 8000a78:	08000e9d 	.word	0x08000e9d
 8000a7c:	08000e9d 	.word	0x08000e9d
 8000a80:	08000e9d 	.word	0x08000e9d
 8000a84:	08000e9d 	.word	0x08000e9d
 8000a88:	08000e9d 	.word	0x08000e9d
 8000a8c:	08000e9d 	.word	0x08000e9d
 8000a90:	08000e9d 	.word	0x08000e9d
 8000a94:	08000e9d 	.word	0x08000e9d
 8000a98:	08000e79 	.word	0x08000e79
	case 0x10: {
		printf("SDN1 ON\n");
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <HAL_UART_RxCpltCallback+0x3dc>)
 8000a9e:	f014 fab3 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_UART_RxCpltCallback+0x3e0>)
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f007 ff33 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000aae:	e200      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <HAL_UART_RxCpltCallback+0x3e4>)
 8000ab2:	f014 faa9 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_UART_RxCpltCallback+0x3e0>)
 8000ab8:	2104      	movs	r1, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 ff29 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000ac2:	e1f6      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
 8000ac4:	24000b48 	.word	0x24000b48
 8000ac8:	240005cc 	.word	0x240005cc
 8000acc:	08015dd4 	.word	0x08015dd4
 8000ad0:	58020400 	.word	0x58020400
 8000ad4:	08015ddc 	.word	0x08015ddc
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000ad8:	48b4      	ldr	r0, [pc, #720]	; (8000dac <HAL_UART_RxCpltCallback+0x6bc>)
 8000ada:	f014 fa95 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000ade:	4bb4      	ldr	r3, [pc, #720]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f007 ff15 	bl	8008914 <HAL_GPIO_WritePin>

		break;
 8000aea:	e1e2      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000aec:	48b1      	ldr	r0, [pc, #708]	; (8000db4 <HAL_UART_RxCpltCallback+0x6c4>)
 8000aee:	f014 fa8b 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000af2:	4baf      	ldr	r3, [pc, #700]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000af4:	2120      	movs	r1, #32
 8000af6:	2200      	movs	r2, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f007 ff0b 	bl	8008914 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000afe:	4bac      	ldr	r3, [pc, #688]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	2200      	movs	r2, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 ff05 	bl	8008914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000b0a:	4bab      	ldr	r3, [pc, #684]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b10:	2200      	movs	r2, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 fefe 	bl	8008914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b18:	4ba7      	ldr	r3, [pc, #668]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 fef7 	bl	8008914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b26:	4ba4      	ldr	r3, [pc, #656]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 fef0 	bl	8008914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b34:	4ba0      	ldr	r3, [pc, #640]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 feea 	bl	8008914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b40:	4b9d      	ldr	r3, [pc, #628]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	2200      	movs	r2, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 fee4 	bl	8008914 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b4c:	4b9a      	ldr	r3, [pc, #616]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b52:	2200      	movs	r2, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f007 fedd 	bl	8008914 <HAL_GPIO_WritePin>

		break;
 8000b5a:	e1aa      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b5c:	4897      	ldr	r0, [pc, #604]	; (8000dbc <HAL_UART_RxCpltCallback+0x6cc>)
 8000b5e:	f014 fa53 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b62:	4b95      	ldr	r3, [pc, #596]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 fed2 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000b70:	e19f      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b72:	4893      	ldr	r0, [pc, #588]	; (8000dc0 <HAL_UART_RxCpltCallback+0x6d0>)
 8000b74:	f014 fa48 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b78:	4b8f      	ldr	r3, [pc, #572]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f007 fec7 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000b86:	e194      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b88:	488e      	ldr	r0, [pc, #568]	; (8000dc4 <HAL_UART_RxCpltCallback+0x6d4>)
 8000b8a:	f014 fa3d 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b8e:	4b8a      	ldr	r3, [pc, #552]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	2201      	movs	r2, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f007 febd 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000b9a:	e18a      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b9c:	488a      	ldr	r0, [pc, #552]	; (8000dc8 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b9e:	f014 fa33 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ba2:	4b85      	ldr	r3, [pc, #532]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f007 feb3 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000bae:	e180      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000bb0:	4886      	ldr	r0, [pc, #536]	; (8000dcc <HAL_UART_RxCpltCallback+0x6dc>)
 8000bb2:	f014 fa29 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000bb6:	4b80      	ldr	r3, [pc, #512]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f007 fea9 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000bc2:	e176      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bc4:	4882      	ldr	r0, [pc, #520]	; (8000dd0 <HAL_UART_RxCpltCallback+0x6e0>)
 8000bc6:	f014 fa1f 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bca:	4b7b      	ldr	r3, [pc, #492]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f007 fe9f 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000bd6:	e16c      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd8:	487e      	ldr	r0, [pc, #504]	; (8000dd4 <HAL_UART_RxCpltCallback+0x6e4>)
 8000bda:	f014 fa15 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bde:	4b76      	ldr	r3, [pc, #472]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	2201      	movs	r2, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f007 fe94 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000bec:	e161      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bee:	487a      	ldr	r0, [pc, #488]	; (8000dd8 <HAL_UART_RxCpltCallback+0x6e8>)
 8000bf0:	f014 fa0a 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf4:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f007 fe89 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000c02:	e156      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c04:	4875      	ldr	r0, [pc, #468]	; (8000ddc <HAL_UART_RxCpltCallback+0x6ec>)
 8000c06:	f014 f9ff 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0a:	4b6b      	ldr	r3, [pc, #428]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c10:	2201      	movs	r2, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f007 fe7e 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000c18:	e14b      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c1a:	4871      	ldr	r0, [pc, #452]	; (8000de0 <HAL_UART_RxCpltCallback+0x6f0>)
 8000c1c:	f014 f9f4 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c20:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c26:	2200      	movs	r2, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f007 fe73 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000c2e:	e140      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c30:	486c      	ldr	r0, [pc, #432]	; (8000de4 <HAL_UART_RxCpltCallback+0x6f4>)
 8000c32:	f014 f9e9 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c36:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 fe68 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000c44:	e135      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c46:	4868      	ldr	r0, [pc, #416]	; (8000de8 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c48:	f014 f9de 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c4c:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c52:	2200      	movs	r2, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f007 fe5d 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000c5a:	e12a      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c5c:	4863      	ldr	r0, [pc, #396]	; (8000dec <HAL_UART_RxCpltCallback+0x6fc>)
 8000c5e:	f014 f9d3 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c62:	4b53      	ldr	r3, [pc, #332]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000c64:	2140      	movs	r1, #64	; 0x40
 8000c66:	2201      	movs	r2, #1
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f007 fe53 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000c6e:	e120      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c70:	485f      	ldr	r0, [pc, #380]	; (8000df0 <HAL_UART_RxCpltCallback+0x700>)
 8000c72:	f014 f9c9 	bl	8015008 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c76:	4b4e      	ldr	r3, [pc, #312]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000c78:	2140      	movs	r1, #64	; 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f007 fe49 	bl	8008914 <HAL_GPIO_WritePin>
		break;
 8000c82:	e116      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c84:	485b      	ldr	r0, [pc, #364]	; (8000df4 <HAL_UART_RxCpltCallback+0x704>)
 8000c86:	f014 f9bf 	bl	8015008 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000c8a:	485b      	ldr	r0, [pc, #364]	; (8000df8 <HAL_UART_RxCpltCallback+0x708>)
 8000c8c:	f00c f9b8 	bl	800d000 <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c90:	2300      	movs	r3, #0
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2320      	movs	r3, #32
 8000c96:	4a59      	ldr	r2, [pc, #356]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4859      	ldr	r0, [pc, #356]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000c9c:	f004 faaa 	bl	80051f4 <HAL_DAC_Start_DMA>
		break;
 8000ca0:	e107      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000ca2:	4858      	ldr	r0, [pc, #352]	; (8000e04 <HAL_UART_RxCpltCallback+0x714>)
 8000ca4:	f014 f9b0 	bl	8015008 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000ca8:	4853      	ldr	r0, [pc, #332]	; (8000df8 <HAL_UART_RxCpltCallback+0x708>)
 8000caa:	f00c fa19 	bl	800d0e0 <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4853      	ldr	r0, [pc, #332]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000cb2:	f004 fb5f 	bl	8005374 <HAL_DAC_Stop_DMA>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cb6:	4854      	ldr	r0, [pc, #336]	; (8000e08 <HAL_UART_RxCpltCallback+0x718>)
 8000cb8:	f014 f9a6 	bl	8015008 <puts>
		ERPA_ON = 1;
 8000cbc:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <HAL_UART_RxCpltCallback+0x71c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
		break;
 8000cc2:	e0f6      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cc4:	4852      	ldr	r0, [pc, #328]	; (8000e10 <HAL_UART_RxCpltCallback+0x720>)
 8000cc6:	f014 f99f 	bl	8015008 <puts>
		ERPA_ON = 0;
 8000cca:	4b50      	ldr	r3, [pc, #320]	; (8000e0c <HAL_UART_RxCpltCallback+0x71c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
		break;
 8000cd0:	e0ef      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000cd2:	4850      	ldr	r0, [pc, #320]	; (8000e14 <HAL_UART_RxCpltCallback+0x724>)
 8000cd4:	f014 f998 	bl	8015008 <puts>
		PMT_ON = 1;
 8000cd8:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <HAL_UART_RxCpltCallback+0x728>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
		break;
 8000cde:	e0e8      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000ce0:	484e      	ldr	r0, [pc, #312]	; (8000e1c <HAL_UART_RxCpltCallback+0x72c>)
 8000ce2:	f014 f991 	bl	8015008 <puts>
		PMT_ON = 0;
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_UART_RxCpltCallback+0x728>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
		break;
 8000cec:	e0e1      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000cee:	484c      	ldr	r0, [pc, #304]	; (8000e20 <HAL_UART_RxCpltCallback+0x730>)
 8000cf0:	f014 f98a 	bl	8015008 <puts>
		HK_ON = 1;
 8000cf4:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <HAL_UART_RxCpltCallback+0x734>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
		break;
 8000cfa:	e0da      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000cfc:	484a      	ldr	r0, [pc, #296]	; (8000e28 <HAL_UART_RxCpltCallback+0x738>)
 8000cfe:	f014 f983 	bl	8015008 <puts>
		HK_ON = 0;
 8000d02:	4b48      	ldr	r3, [pc, #288]	; (8000e24 <HAL_UART_RxCpltCallback+0x734>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
		break;
 8000d08:	e0d3      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000d0a:	4848      	ldr	r0, [pc, #288]	; (8000e2c <HAL_UART_RxCpltCallback+0x73c>)
 8000d0c:	f014 f97c 	bl	8015008 <puts>
		if (step < 17) {
 8000d10:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b10      	cmp	r3, #16
 8000d16:	f200 80c5 	bhi.w	8000ea4 <HAL_UART_RxCpltCallback+0x7b4>
			step+=2;
 8000d1a:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	3302      	adds	r3, #2
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d24:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d26:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	4832      	ldr	r0, [pc, #200]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d38:	f004 fbbf 	bl	80054ba <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4830      	ldr	r0, [pc, #192]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d40:	f004 fa00 	bl	8005144 <HAL_DAC_Start>
		}
		break;
 8000d44:	e0ae      	b.n	8000ea4 <HAL_UART_RxCpltCallback+0x7b4>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000d46:	483b      	ldr	r0, [pc, #236]	; (8000e34 <HAL_UART_RxCpltCallback+0x744>)
 8000d48:	f014 f95e 	bl	8015008 <puts>
		if (step > 3) {
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	f240 80a9 	bls.w	8000ea8 <HAL_UART_RxCpltCallback+0x7b8>
			step-=2;
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d60:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d62:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	4823      	ldr	r0, [pc, #140]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d74:	f004 fba1 	bl	80054ba <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d7c:	f004 f9e2 	bl	8005144 <HAL_DAC_Start>
		}
		break;
 8000d80:	e092      	b.n	8000ea8 <HAL_UART_RxCpltCallback+0x7b8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000d82:	482d      	ldr	r0, [pc, #180]	; (8000e38 <HAL_UART_RxCpltCallback+0x748>)
 8000d84:	f014 f940 	bl	8015008 <puts>
		if (cadence <= 50000){
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d90:	4293      	cmp	r3, r2
 8000d92:	f200 808b 	bhi.w	8000eac <HAL_UART_RxCpltCallback+0x7bc>
			cadence *= 2;
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d9e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000daa:	e07f      	b.n	8000eac <HAL_UART_RxCpltCallback+0x7bc>
 8000dac:	08015de8 	.word	0x08015de8
 8000db0:	58020400 	.word	0x58020400
 8000db4:	08015df4 	.word	0x08015df4
 8000db8:	58020800 	.word	0x58020800
 8000dbc:	08015e00 	.word	0x08015e00
 8000dc0:	08015e0c 	.word	0x08015e0c
 8000dc4:	08015e1c 	.word	0x08015e1c
 8000dc8:	08015e28 	.word	0x08015e28
 8000dcc:	08015e34 	.word	0x08015e34
 8000dd0:	08015e40 	.word	0x08015e40
 8000dd4:	08015e50 	.word	0x08015e50
 8000dd8:	08015e5c 	.word	0x08015e5c
 8000ddc:	08015e68 	.word	0x08015e68
 8000de0:	08015e74 	.word	0x08015e74
 8000de4:	08015e80 	.word	0x08015e80
 8000de8:	08015e90 	.word	0x08015e90
 8000dec:	08015ea0 	.word	0x08015ea0
 8000df0:	08015eac 	.word	0x08015eac
 8000df4:	08015ebc 	.word	0x08015ebc
 8000df8:	24000534 	.word	0x24000534
 8000dfc:	24000008 	.word	0x24000008
 8000e00:	240002d4 	.word	0x240002d4
 8000e04:	08015ecc 	.word	0x08015ecc
 8000e08:	08015edc 	.word	0x08015edc
 8000e0c:	24000b3f 	.word	0x24000b3f
 8000e10:	08015ee4 	.word	0x08015ee4
 8000e14:	08015ef0 	.word	0x08015ef0
 8000e18:	24000b3e 	.word	0x24000b3e
 8000e1c:	08015ef8 	.word	0x08015ef8
 8000e20:	08015f00 	.word	0x08015f00
 8000e24:	24000b40 	.word	0x24000b40
 8000e28:	08015f08 	.word	0x08015f08
 8000e2c:	08015f10 	.word	0x08015f10
 8000e30:	24000004 	.word	0x24000004
 8000e34:	08015f18 	.word	0x08015f18
 8000e38:	08015f24 	.word	0x08015f24
 8000e3c:	24000000 	.word	0x24000000
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e40:	481e      	ldr	r0, [pc, #120]	; (8000ebc <HAL_UART_RxCpltCallback+0x7cc>)
 8000e42:	f014 f8e1 	bl	8015008 <puts>
		if (cadence >= 6250){
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d92e      	bls.n	8000eb0 <HAL_UART_RxCpltCallback+0x7c0>
			cadence /= 2;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	085b      	lsrs	r3, r3, #1
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e5a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e66:	e023      	b.n	8000eb0 <HAL_UART_RxCpltCallback+0x7c0>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e68:	4816      	ldr	r0, [pc, #88]	; (8000ec4 <HAL_UART_RxCpltCallback+0x7d4>)
 8000e6a:	f014 f8cd 	bl	8015008 <puts>
		// TODO: Exit stop mode
		break;
 8000e6e:	e020      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e70:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <HAL_UART_RxCpltCallback+0x7d8>)
 8000e72:	f014 f8c9 	bl	8015008 <puts>
		// TODO: Enter stop mode
		break;
 8000e76:	e01c      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e78:	4814      	ldr	r0, [pc, #80]	; (8000ecc <HAL_UART_RxCpltCallback+0x7dc>)
 8000e7a:	f014 f8c5 	bl	8015008 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_UART_RxCpltCallback+0x7e0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f012 f916 	bl	80130b4 <xTaskResumeFromISR>
		break;
 8000e88:	e013      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e8a:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <HAL_UART_RxCpltCallback+0x7e4>)
 8000e8c:	f014 f8bc 	bl	8015008 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_UART_RxCpltCallback+0x7e8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f012 f90d 	bl	80130b4 <xTaskResumeFromISR>
		break;
 8000e9a:	e00a      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	default:{
		printf("Unknown Command\n");
 8000e9c:	480f      	ldr	r0, [pc, #60]	; (8000edc <HAL_UART_RxCpltCallback+0x7ec>)
 8000e9e:	f014 f8b3 	bl	8015008 <puts>
		break;
 8000ea2:	e006      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000ea4:	bf00      	nop
 8000ea6:	e004      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000ea8:	bf00      	nop
 8000eaa:	e002      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000eac:	bf00      	nop
 8000eae:	e000      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000eb0:	bf00      	nop
	}
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	08015f30 	.word	0x08015f30
 8000ec0:	24000000 	.word	0x24000000
 8000ec4:	08015f3c 	.word	0x08015f3c
 8000ec8:	08015f4c 	.word	0x08015f4c
 8000ecc:	08015f5c 	.word	0x08015f5c
 8000ed0:	24000674 	.word	0x24000674
 8000ed4:	08015f68 	.word	0x08015f68
 8000ed8:	240008d4 	.word	0x240008d4
 8000edc:	08015f74 	.word	0x08015f74

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f002 fb9a 	bl	800361c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f8b6 	bl	8001058 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eec:	f000 f940 	bl	8001170 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 fe8e 	bl	8001c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef4:	f000 fe5c 	bl	8001bb0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ef8:	f000 fdc0 	bl	8001a7c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000efc:	f000 fe0c 	bl	8001b18 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000f00:	f000 fb4c 	bl	800159c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f04:	f000 fc3e 	bl	8001784 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000f08:	f000 fd42 	bl	8001990 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f0c:	f000 fc92 	bl	8001834 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000f10:	f000 fa80 	bl	8001414 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000f14:	f000 f95c 	bl	80011d0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f18:	f000 fb0e 	bl	8001538 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000f1c:	f000 fbda 	bl	80016d4 <MX_SPI1_Init>
  MX_RTC_Init();
 8000f20:	f000 fb7c 	bl	800161c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000f24:	f000 feee 	bl	8001d04 <handshake>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <main+0x52>
	{
		Error_Handler();
 8000f2e:	f001 fc99 	bl	8002864 <Error_Handler>
	}


	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f32:	2100      	movs	r1, #0
 8000f34:	482d      	ldr	r0, [pc, #180]	; (8000fec <main+0x10c>)
 8000f36:	f00c f973 	bl	800d220 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	482c      	ldr	r0, [pc, #176]	; (8000ff0 <main+0x110>)
 8000f3e:	f00c f96f 	bl	800d220 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f42:	2100      	movs	r1, #0
 8000f44:	482b      	ldr	r0, [pc, #172]	; (8000ff4 <main+0x114>)
 8000f46:	f00c f96b 	bl	800d220 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f4a:	f010 fa09 	bl	8011360 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2108      	movs	r1, #8
 8000f52:	2010      	movs	r0, #16
 8000f54:	f010 fc26 	bl	80117a4 <osMessageQueueNew>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <main+0x118>)
 8000f5c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f5e:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <main+0x11c>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	4827      	ldr	r0, [pc, #156]	; (8001000 <main+0x120>)
 8000f64:	f010 fa46 	bl	80113f4 <osThreadNew>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <main+0x124>)
 8000f6c:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f6e:	4a26      	ldr	r2, [pc, #152]	; (8001008 <main+0x128>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4826      	ldr	r0, [pc, #152]	; (800100c <main+0x12c>)
 8000f74:	f010 fa3e 	bl	80113f4 <osThreadNew>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a25      	ldr	r2, [pc, #148]	; (8001010 <main+0x130>)
 8000f7c:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f7e:	4a25      	ldr	r2, [pc, #148]	; (8001014 <main+0x134>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4825      	ldr	r0, [pc, #148]	; (8001018 <main+0x138>)
 8000f84:	f010 fa36 	bl	80113f4 <osThreadNew>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a24      	ldr	r2, [pc, #144]	; (800101c <main+0x13c>)
 8000f8c:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <main+0x140>)
 8000f90:	2100      	movs	r1, #0
 8000f92:	4824      	ldr	r0, [pc, #144]	; (8001024 <main+0x144>)
 8000f94:	f010 fa2e 	bl	80113f4 <osThreadNew>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <main+0x148>)
 8000f9c:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <main+0x14c>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4823      	ldr	r0, [pc, #140]	; (8001030 <main+0x150>)
 8000fa4:	f010 fa26 	bl	80113f4 <osThreadNew>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a22      	ldr	r2, [pc, #136]	; (8001034 <main+0x154>)
 8000fac:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000fae:	4a22      	ldr	r2, [pc, #136]	; (8001038 <main+0x158>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4822      	ldr	r0, [pc, #136]	; (800103c <main+0x15c>)
 8000fb4:	f010 fa1e 	bl	80113f4 <osThreadNew>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a21      	ldr	r2, [pc, #132]	; (8001040 <main+0x160>)
 8000fbc:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000fbe:	4a21      	ldr	r2, [pc, #132]	; (8001044 <main+0x164>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4821      	ldr	r0, [pc, #132]	; (8001048 <main+0x168>)
 8000fc4:	f010 fa16 	bl	80113f4 <osThreadNew>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a20      	ldr	r2, [pc, #128]	; (800104c <main+0x16c>)
 8000fcc:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f010 fafe 	bl	80115d0 <osEventFlagsNew>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <main+0x170>)
 8000fd8:	6013      	str	r3, [r2, #0]
	system_setup();
 8000fda:	f000 ff21 	bl	8001e20 <system_setup>
	printf("Starting kernal...\n");
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <main+0x174>)
 8000fe0:	f014 f812 	bl	8015008 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fe4:	f010 f9e0 	bl	80113a8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x108>
 8000fea:	bf00      	nop
 8000fec:	240004e8 	.word	0x240004e8
 8000ff0:	24000534 	.word	0x24000534
 8000ff4:	24000580 	.word	0x24000580
 8000ff8:	24000b34 	.word	0x24000b34
 8000ffc:	08015fe8 	.word	0x08015fe8
 8001000:	080025a5 	.word	0x080025a5
 8001004:	24000660 	.word	0x24000660
 8001008:	0801600c 	.word	0x0801600c
 800100c:	080025e9 	.word	0x080025e9
 8001010:	24000664 	.word	0x24000664
 8001014:	08016030 	.word	0x08016030
 8001018:	0800262d 	.word	0x0800262d
 800101c:	24000668 	.word	0x24000668
 8001020:	08016054 	.word	0x08016054
 8001024:	08002671 	.word	0x08002671
 8001028:	2400066c 	.word	0x2400066c
 800102c:	08016078 	.word	0x08016078
 8001030:	08002695 	.word	0x08002695
 8001034:	24000670 	.word	0x24000670
 8001038:	0801609c 	.word	0x0801609c
 800103c:	080026f1 	.word	0x080026f1
 8001040:	24000674 	.word	0x24000674
 8001044:	080160c0 	.word	0x080160c0
 8001048:	08002799 	.word	0x08002799
 800104c:	240008d4 	.word	0x240008d4
 8001050:	24000b44 	.word	0x24000b44
 8001054:	08015f84 	.word	0x08015f84

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09c      	sub	sp, #112	; 0x70
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	224c      	movs	r2, #76	; 0x4c
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f013 fe60 	bl	8014d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2220      	movs	r2, #32
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f013 fe5a 	bl	8014d2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001078:	2002      	movs	r0, #2
 800107a:	f007 fda9 	bl	8008bd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <SystemClock_Config+0x10c>)
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	4a37      	ldr	r2, [pc, #220]	; (8001164 <SystemClock_Config+0x10c>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <SystemClock_Config+0x10c>)
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	4b33      	ldr	r3, [pc, #204]	; (8001168 <SystemClock_Config+0x110>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a0:	4a31      	ldr	r2, [pc, #196]	; (8001168 <SystemClock_Config+0x110>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <SystemClock_Config+0x110>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010b4:	bf00      	nop
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <SystemClock_Config+0x110>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010c2:	d1f8      	bne.n	80010b6 <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010c4:	f007 fd74 	bl	8008bb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010c8:	f002 fb04 	bl	80036d4 <HAL_GetREVID>
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <SystemClock_Config+0x114>)
 80010ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d0:	4a26      	ldr	r2, [pc, #152]	; (800116c <SystemClock_Config+0x114>)
 80010d2:	f023 0318 	bic.w	r3, r3, #24
 80010d6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80010d8:	2306      	movs	r3, #6
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e4:	2340      	movs	r3, #64	; 0x40
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ec:	2300      	movs	r3, #0
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f0:	2304      	movs	r3, #4
 80010f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80010f4:	230c      	movs	r3, #12
 80010f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001100:	2302      	movs	r3, #2
 8001102:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001104:	230c      	movs	r3, #12
 8001106:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001108:	2300      	movs	r3, #0
 800110a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4618      	mov	r0, r3
 8001116:	f007 fd95 	bl	8008c44 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001120:	f001 fba0 	bl	8002864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	233f      	movs	r3, #63	; 0x3f
 8001126:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2303      	movs	r3, #3
 800112a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001138:	2340      	movs	r3, #64	; 0x40
 800113a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001140:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f008 f9d4 	bl	80094f8 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x102>
  {
    Error_Handler();
 8001156:	f001 fb85 	bl	8002864 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3770      	adds	r7, #112	; 0x70
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	58000400 	.word	0x58000400
 8001168:	58024800 	.word	0x58024800
 800116c:	58024400 	.word	0x58024400

08001170 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0b0      	sub	sp, #192	; 0xc0
 8001174:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	22c0      	movs	r2, #192	; 0xc0
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f013 fdd5 	bl	8014d2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001182:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800118e:	2304      	movs	r3, #4
 8001190:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001192:	2309      	movs	r3, #9
 8001194:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001196:	2304      	movs	r3, #4
 8001198:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800119a:	2302      	movs	r3, #2
 800119c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011a2:	23c0      	movs	r3, #192	; 0xc0
 80011a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011a6:	2320      	movs	r3, #32
 80011a8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80011aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	4618      	mov	r0, r3
 80011ba:	f008 fd6b 	bl	8009c94 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80011c4:	f001 fb4e 	bl	8002864 <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	37c0      	adds	r7, #192	; 0xc0
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011e2:	463b      	mov	r3, r7
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011f4:	4b7a      	ldr	r3, [pc, #488]	; (80013e0 <MX_ADC1_Init+0x210>)
 80011f6:	4a7b      	ldr	r2, [pc, #492]	; (80013e4 <MX_ADC1_Init+0x214>)
 80011f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80011fa:	4b79      	ldr	r3, [pc, #484]	; (80013e0 <MX_ADC1_Init+0x210>)
 80011fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001200:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001202:	4b77      	ldr	r3, [pc, #476]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001204:	2208      	movs	r2, #8
 8001206:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001208:	4b75      	ldr	r3, [pc, #468]	; (80013e0 <MX_ADC1_Init+0x210>)
 800120a:	2201      	movs	r2, #1
 800120c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120e:	4b74      	ldr	r3, [pc, #464]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001210:	2204      	movs	r2, #4
 8001212:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001214:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800121a:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <MX_ADC1_Init+0x210>)
 800121c:	2201      	movs	r2, #1
 800121e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001220:	4b6f      	ldr	r3, [pc, #444]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001222:	220b      	movs	r2, #11
 8001224:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001226:	4b6e      	ldr	r3, [pc, #440]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001228:	2200      	movs	r2, #0
 800122a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122c:	4b6c      	ldr	r3, [pc, #432]	; (80013e0 <MX_ADC1_Init+0x210>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001232:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001238:	4b69      	ldr	r3, [pc, #420]	; (80013e0 <MX_ADC1_Init+0x210>)
 800123a:	2203      	movs	r2, #3
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800123e:	4b68      	ldr	r3, [pc, #416]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001244:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001246:	4b66      	ldr	r3, [pc, #408]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001248:	2200      	movs	r2, #0
 800124a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800124c:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <MX_ADC1_Init+0x210>)
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001254:	4862      	ldr	r0, [pc, #392]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001256:	f002 fc6d 	bl	8003b34 <HAL_ADC_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001260:	f001 fb00 	bl	8002864 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	485c      	ldr	r0, [pc, #368]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001270:	f003 fd88 	bl	8004d84 <HAL_ADCEx_MultiModeConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800127a:	f001 faf3 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800127e:	4b5a      	ldr	r3, [pc, #360]	; (80013e8 <MX_ADC1_Init+0x218>)
 8001280:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001282:	2306      	movs	r3, #6
 8001284:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001286:	2307      	movs	r3, #7
 8001288:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800128a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800128e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001290:	2304      	movs	r3, #4
 8001292:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	484f      	ldr	r0, [pc, #316]	; (80013e0 <MX_ADC1_Init+0x210>)
 80012a2:	f002 fecb 	bl	800403c <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80012ac:	f001 fada 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012b0:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <MX_ADC1_Init+0x21c>)
 80012b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012b4:	230c      	movs	r3, #12
 80012b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	4848      	ldr	r0, [pc, #288]	; (80013e0 <MX_ADC1_Init+0x210>)
 80012be:	f002 febd 	bl	800403c <HAL_ADC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80012c8:	f001 facc 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012cc:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <MX_ADC1_Init+0x220>)
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012d0:	2312      	movs	r3, #18
 80012d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	4619      	mov	r1, r3
 80012d8:	4841      	ldr	r0, [pc, #260]	; (80013e0 <MX_ADC1_Init+0x210>)
 80012da:	f002 feaf 	bl	800403c <HAL_ADC_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012e4:	f001 fabe 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012e8:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <MX_ADC1_Init+0x224>)
 80012ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012ec:	2318      	movs	r3, #24
 80012ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	483a      	ldr	r0, [pc, #232]	; (80013e0 <MX_ADC1_Init+0x210>)
 80012f6:	f002 fea1 	bl	800403c <HAL_ADC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001300:	f001 fab0 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001304:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <MX_ADC1_Init+0x228>)
 8001306:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130e:	463b      	mov	r3, r7
 8001310:	4619      	mov	r1, r3
 8001312:	4833      	ldr	r0, [pc, #204]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001314:	f002 fe92 	bl	800403c <HAL_ADC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800131e:	f001 faa1 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <MX_ADC1_Init+0x22c>)
 8001324:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001326:	f44f 7383 	mov.w	r3, #262	; 0x106
 800132a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	482b      	ldr	r0, [pc, #172]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001332:	f002 fe83 	bl	800403c <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800133c:	f001 fa92 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <MX_ADC1_Init+0x230>)
 8001342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001344:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001348:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	4619      	mov	r1, r3
 800134e:	4824      	ldr	r0, [pc, #144]	; (80013e0 <MX_ADC1_Init+0x210>)
 8001350:	f002 fe74 	bl	800403c <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800135a:	f001 fa83 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800135e:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_ADC1_Init+0x234>)
 8001360:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001362:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001366:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	481c      	ldr	r0, [pc, #112]	; (80013e0 <MX_ADC1_Init+0x210>)
 800136e:	f002 fe65 	bl	800403c <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001378:	f001 fa74 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <MX_ADC1_Init+0x238>)
 800137e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001380:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001384:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	4619      	mov	r1, r3
 800138a:	4815      	ldr	r0, [pc, #84]	; (80013e0 <MX_ADC1_Init+0x210>)
 800138c:	f002 fe56 	bl	800403c <HAL_ADC_ConfigChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001396:	f001 fa65 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_ADC1_Init+0x23c>)
 800139c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800139e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_ADC1_Init+0x210>)
 80013aa:	f002 fe47 	bl	800403c <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80013b4:	f001 fa56 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_ADC1_Init+0x240>)
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80013bc:	f240 2306 	movw	r3, #518	; 0x206
 80013c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_ADC1_Init+0x210>)
 80013c8:	f002 fe38 	bl	800403c <HAL_ADC_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80013d2:	f001 fa47 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	; 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2400011c 	.word	0x2400011c
 80013e4:	40022000 	.word	0x40022000
 80013e8:	0c900008 	.word	0x0c900008
 80013ec:	10c00010 	.word	0x10c00010
 80013f0:	14f00020 	.word	0x14f00020
 80013f4:	1d500080 	.word	0x1d500080
 80013f8:	21800100 	.word	0x21800100
 80013fc:	25b00200 	.word	0x25b00200
 8001400:	2a000400 	.word	0x2a000400
 8001404:	2e300800 	.word	0x2e300800
 8001408:	3ac04000 	.word	0x3ac04000
 800140c:	3ef08000 	.word	0x3ef08000
 8001410:	47520000 	.word	0x47520000

08001414 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	615a      	str	r2, [r3, #20]
 800142a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800142c:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <MX_ADC3_Init+0x110>)
 800142e:	4a3e      	ldr	r2, [pc, #248]	; (8001528 <MX_ADC3_Init+0x114>)
 8001430:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001432:	4b3c      	ldr	r3, [pc, #240]	; (8001524 <MX_ADC3_Init+0x110>)
 8001434:	2208      	movs	r2, #8
 8001436:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001438:	4b3a      	ldr	r3, [pc, #232]	; (8001524 <MX_ADC3_Init+0x110>)
 800143a:	2201      	movs	r2, #1
 800143c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800143e:	4b39      	ldr	r3, [pc, #228]	; (8001524 <MX_ADC3_Init+0x110>)
 8001440:	2204      	movs	r2, #4
 8001442:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001444:	4b37      	ldr	r3, [pc, #220]	; (8001524 <MX_ADC3_Init+0x110>)
 8001446:	2200      	movs	r2, #0
 8001448:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800144a:	4b36      	ldr	r3, [pc, #216]	; (8001524 <MX_ADC3_Init+0x110>)
 800144c:	2201      	movs	r2, #1
 800144e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001450:	4b34      	ldr	r3, [pc, #208]	; (8001524 <MX_ADC3_Init+0x110>)
 8001452:	2204      	movs	r2, #4
 8001454:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001456:	4b33      	ldr	r3, [pc, #204]	; (8001524 <MX_ADC3_Init+0x110>)
 8001458:	2200      	movs	r2, #0
 800145a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800145c:	4b31      	ldr	r3, [pc, #196]	; (8001524 <MX_ADC3_Init+0x110>)
 800145e:	2200      	movs	r2, #0
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <MX_ADC3_Init+0x110>)
 8001464:	2200      	movs	r2, #0
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001468:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <MX_ADC3_Init+0x110>)
 800146a:	2203      	movs	r2, #3
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_ADC3_Init+0x110>)
 8001470:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001476:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_ADC3_Init+0x110>)
 8001478:	2200      	movs	r2, #0
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_ADC3_Init+0x110>)
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001484:	4827      	ldr	r0, [pc, #156]	; (8001524 <MX_ADC3_Init+0x110>)
 8001486:	f002 fb55 	bl	8003b34 <HAL_ADC_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001490:	f001 f9e8 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <MX_ADC3_Init+0x118>)
 8001496:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001498:	2306      	movs	r3, #6
 800149a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800149c:	2307      	movs	r3, #7
 800149e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014a6:	2304      	movs	r3, #4
 80014a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	481b      	ldr	r0, [pc, #108]	; (8001524 <MX_ADC3_Init+0x110>)
 80014b8:	f002 fdc0 	bl	800403c <HAL_ADC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80014c2:	f001 f9cf 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_ADC3_Init+0x11c>)
 80014c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014ca:	230c      	movs	r3, #12
 80014cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4814      	ldr	r0, [pc, #80]	; (8001524 <MX_ADC3_Init+0x110>)
 80014d4:	f002 fdb2 	bl	800403c <HAL_ADC_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80014de:	f001 f9c1 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014e2:	2301      	movs	r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014e6:	2312      	movs	r3, #18
 80014e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_ADC3_Init+0x110>)
 80014f0:	f002 fda4 	bl	800403c <HAL_ADC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80014fa:	f001 f9b3 	bl	8002864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_ADC3_Init+0x120>)
 8001500:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001502:	2318      	movs	r3, #24
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_ADC3_Init+0x110>)
 800150c:	f002 fd96 	bl	800403c <HAL_ADC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001516:	f001 f9a5 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	24000180 	.word	0x24000180
 8001528:	58026000 	.word	0x58026000
 800152c:	cb840000 	.word	0xcb840000
 8001530:	cfb80000 	.word	0xcfb80000
 8001534:	04300002 	.word	0x04300002

08001538 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2224      	movs	r2, #36	; 0x24
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f013 fbf1 	bl	8014d2c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_DAC1_Init+0x5c>)
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_DAC1_Init+0x60>)
 800154e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001550:	4810      	ldr	r0, [pc, #64]	; (8001594 <MX_DAC1_Init+0x5c>)
 8001552:	f003 fdd5 	bl	8005100 <HAL_DAC_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800155c:	f001 f982 	bl	8002864 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001564:	230a      	movs	r3, #10
 8001566:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800156c:	2301      	movs	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_DAC1_Init+0x5c>)
 800157c:	f003 fff0 	bl	8005560 <HAL_DAC_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001586:	f001 f96d 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	240002d4 	.word	0x240002d4
 8001598:	40007400 	.word	0x40007400

0800159c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <MX_I2C1_Init+0x74>)
 80015a2:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <MX_I2C1_Init+0x78>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_I2C1_Init+0x74>)
 80015a8:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <MX_I2C1_Init+0x7c>)
 80015aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_I2C1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_I2C1_Init+0x74>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_I2C1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_I2C1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_I2C1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_I2C1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_I2C1_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <MX_I2C1_Init+0x74>)
 80015d8:	f007 f9b6 	bl	8008948 <HAL_I2C_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015e2:	f001 f93f 	bl	8002864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015e6:	2100      	movs	r1, #0
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <MX_I2C1_Init+0x74>)
 80015ea:	f007 fa49 	bl	8008a80 <HAL_I2CEx_ConfigAnalogFilter>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015f4:	f001 f936 	bl	8002864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015f8:	2100      	movs	r1, #0
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_I2C1_Init+0x74>)
 80015fc:	f007 fa8b 	bl	8008b16 <HAL_I2CEx_ConfigDigitalFilter>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001606:	f001 f92d 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	24000360 	.word	0x24000360
 8001614:	40005400 	.word	0x40005400
 8001618:	00506682 	.word	0x00506682

0800161c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001630:	2300      	movs	r3, #0
 8001632:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <MX_RTC_Init+0xb0>)
 8001636:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <MX_RTC_Init+0xb4>)
 8001638:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <MX_RTC_Init+0xb0>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <MX_RTC_Init+0xb0>)
 8001642:	227f      	movs	r2, #127	; 0x7f
 8001644:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <MX_RTC_Init+0xb0>)
 8001648:	22ff      	movs	r2, #255	; 0xff
 800164a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <MX_RTC_Init+0xb0>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <MX_RTC_Init+0xb0>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_RTC_Init+0xb0>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <MX_RTC_Init+0xb0>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001664:	4819      	ldr	r0, [pc, #100]	; (80016cc <MX_RTC_Init+0xb0>)
 8001666:	f00b f813 	bl	800c690 <HAL_RTC_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001670:	f001 f8f8 	bl	8002864 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001674:	2300      	movs	r3, #0
 8001676:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001678:	2300      	movs	r3, #0
 800167a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800167c:	2300      	movs	r3, #0
 800167e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2201      	movs	r2, #1
 800168c:	4619      	mov	r1, r3
 800168e:	480f      	ldr	r0, [pc, #60]	; (80016cc <MX_RTC_Init+0xb0>)
 8001690:	f00b f880 	bl	800c794 <HAL_RTC_SetTime>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800169a:	f001 f8e3 	bl	8002864 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800169e:	2305      	movs	r3, #5
 80016a0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80016a2:	2305      	movs	r3, #5
 80016a4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 80016a6:	2331      	movs	r3, #49	; 0x31
 80016a8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80016aa:	2324      	movs	r3, #36	; 0x24
 80016ac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016ae:	463b      	mov	r3, r7
 80016b0:	2201      	movs	r2, #1
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_RTC_Init+0xb0>)
 80016b6:	f00b f967 	bl	800c988 <HAL_RTC_SetDate>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80016c0:	f001 f8d0 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	240003b4 	.word	0x240003b4
 80016d0:	58004000 	.word	0x58004000

080016d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <MX_SPI1_Init+0xa8>)
 80016da:	4a29      	ldr	r2, [pc, #164]	; (8001780 <MX_SPI1_Init+0xac>)
 80016dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <MX_SPI1_Init+0xa8>)
 80016e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016e6:	4b25      	ldr	r3, [pc, #148]	; (800177c <MX_SPI1_Init+0xa8>)
 80016e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <MX_SPI1_Init+0xa8>)
 80016f0:	220f      	movs	r2, #15
 80016f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <MX_SPI1_Init+0xa8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <MX_SPI1_Init+0xa8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_SPI1_Init+0xa8>)
 8001702:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001706:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <MX_SPI1_Init+0xa8>)
 800170a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800170e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_SPI1_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <MX_SPI1_Init+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_SPI1_Init+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_SPI1_Init+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_SPI1_Init+0xa8>)
 800172a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_SPI1_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_SPI1_Init+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_SPI1_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_SPI1_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_SPI1_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_SPI1_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_SPI1_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_SPI1_Init+0xa8>)
 800175c:	2200      	movs	r2, #0
 800175e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_SPI1_Init+0xa8>)
 8001762:	2200      	movs	r2, #0
 8001764:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_SPI1_Init+0xa8>)
 8001768:	f00b fab4 	bl	800ccd4 <HAL_SPI_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001772:	f001 f877 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	240003d8 	.word	0x240003d8
 8001780:	40013000 	.word	0x40013000

08001784 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <MX_SPI2_Init+0xa8>)
 800178a:	4a29      	ldr	r2, [pc, #164]	; (8001830 <MX_SPI2_Init+0xac>)
 800178c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <MX_SPI2_Init+0xa8>)
 8001790:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001794:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001796:	4b25      	ldr	r3, [pc, #148]	; (800182c <MX_SPI2_Init+0xa8>)
 8001798:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800179c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <MX_SPI2_Init+0xa8>)
 80017a0:	220f      	movs	r2, #15
 80017a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <MX_SPI2_Init+0xa8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <MX_SPI2_Init+0xa8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_SPI2_Init+0xa8>)
 80017b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <MX_SPI2_Init+0xa8>)
 80017ba:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_SPI2_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <MX_SPI2_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_SPI2_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_SPI2_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_SPI2_Init+0xa8>)
 80017da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017de:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_SPI2_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_SPI2_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_SPI2_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_SPI2_Init+0xa8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_SPI2_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_SPI2_Init+0xa8>)
 8001800:	2200      	movs	r2, #0
 8001802:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_SPI2_Init+0xa8>)
 8001806:	2200      	movs	r2, #0
 8001808:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_SPI2_Init+0xa8>)
 800180c:	2200      	movs	r2, #0
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_SPI2_Init+0xa8>)
 8001812:	2200      	movs	r2, #0
 8001814:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_SPI2_Init+0xa8>)
 8001818:	f00b fa5c 	bl	800ccd4 <HAL_SPI_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001822:	f001 f81f 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000460 	.word	0x24000460
 8001830:	40003800 	.word	0x40003800

08001834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b09a      	sub	sp, #104	; 0x68
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
 8001864:	615a      	str	r2, [r3, #20]
 8001866:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	222c      	movs	r2, #44	; 0x2c
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f013 fa5c 	bl	8014d2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001874:	4b44      	ldr	r3, [pc, #272]	; (8001988 <MX_TIM1_Init+0x154>)
 8001876:	4a45      	ldr	r2, [pc, #276]	; (800198c <MX_TIM1_Init+0x158>)
 8001878:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <MX_TIM1_Init+0x154>)
 800187c:	225f      	movs	r2, #95	; 0x5f
 800187e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001880:	4b41      	ldr	r3, [pc, #260]	; (8001988 <MX_TIM1_Init+0x154>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <MX_TIM1_Init+0x154>)
 8001888:	f24f 4223 	movw	r2, #62499	; 0xf423
 800188c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <MX_TIM1_Init+0x154>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001894:	4b3c      	ldr	r3, [pc, #240]	; (8001988 <MX_TIM1_Init+0x154>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <MX_TIM1_Init+0x154>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018a0:	4839      	ldr	r0, [pc, #228]	; (8001988 <MX_TIM1_Init+0x154>)
 80018a2:	f00b fb56 	bl	800cf52 <HAL_TIM_Base_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018ac:	f000 ffda 	bl	8002864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ba:	4619      	mov	r1, r3
 80018bc:	4832      	ldr	r0, [pc, #200]	; (8001988 <MX_TIM1_Init+0x154>)
 80018be:	f00c f995 	bl	800dbec <HAL_TIM_ConfigClockSource>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018c8:	f000 ffcc 	bl	8002864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018cc:	482e      	ldr	r0, [pc, #184]	; (8001988 <MX_TIM1_Init+0x154>)
 80018ce:	f00b fe01 	bl	800d4d4 <HAL_TIM_PWM_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018d8:	f000 ffc4 	bl	8002864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ec:	4619      	mov	r1, r3
 80018ee:	4826      	ldr	r0, [pc, #152]	; (8001988 <MX_TIM1_Init+0x154>)
 80018f0:	f00c fed2 	bl	800e698 <HAL_TIMEx_MasterConfigSynchronization>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018fa:	f000 ffb3 	bl	8002864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fe:	2360      	movs	r3, #96	; 0x60
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001902:	f240 13df 	movw	r3, #479	; 0x1df
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001920:	2200      	movs	r2, #0
 8001922:	4619      	mov	r1, r3
 8001924:	4818      	ldr	r0, [pc, #96]	; (8001988 <MX_TIM1_Init+0x154>)
 8001926:	f00c f84d 	bl	800d9c4 <HAL_TIM_PWM_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001930:	f000 ff98 	bl	8002864 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	4619      	mov	r1, r3
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <MX_TIM1_Init+0x154>)
 800196a:	f00c ff23 	bl	800e7b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001974:	f000 ff76 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001978:	4803      	ldr	r0, [pc, #12]	; (8001988 <MX_TIM1_Init+0x154>)
 800197a:	f001 fb01 	bl	8002f80 <HAL_TIM_MspPostInit>

}
 800197e:	bf00      	nop
 8001980:	3768      	adds	r7, #104	; 0x68
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	240004e8 	.word	0x240004e8
 800198c:	40010000 	.word	0x40010000

08001990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08e      	sub	sp, #56	; 0x38
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b0:	463b      	mov	r3, r7
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]
 80019be:	615a      	str	r2, [r3, #20]
 80019c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <MX_TIM2_Init+0xe8>)
 80019c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <MX_TIM2_Init+0xe8>)
 80019cc:	222f      	movs	r2, #47	; 0x2f
 80019ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <MX_TIM2_Init+0xe8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80019d6:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <MX_TIM2_Init+0xe8>)
 80019d8:	f640 4234 	movw	r2, #3124	; 0xc34
 80019dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <MX_TIM2_Init+0xe8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <MX_TIM2_Init+0xe8>)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ea:	4823      	ldr	r0, [pc, #140]	; (8001a78 <MX_TIM2_Init+0xe8>)
 80019ec:	f00b fab1 	bl	800cf52 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019f6:	f000 ff35 	bl	8002864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a04:	4619      	mov	r1, r3
 8001a06:	481c      	ldr	r0, [pc, #112]	; (8001a78 <MX_TIM2_Init+0xe8>)
 8001a08:	f00c f8f0 	bl	800dbec <HAL_TIM_ConfigClockSource>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a12:	f000 ff27 	bl	8002864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a16:	4818      	ldr	r0, [pc, #96]	; (8001a78 <MX_TIM2_Init+0xe8>)
 8001a18:	f00b fd5c 	bl	800d4d4 <HAL_TIM_PWM_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a22:	f000 ff1f 	bl	8002864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a26:	2320      	movs	r3, #32
 8001a28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4810      	ldr	r0, [pc, #64]	; (8001a78 <MX_TIM2_Init+0xe8>)
 8001a36:	f00c fe2f 	bl	800e698 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a40:	f000 ff10 	bl	8002864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a44:	2360      	movs	r3, #96	; 0x60
 8001a46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a54:	463b      	mov	r3, r7
 8001a56:	220c      	movs	r2, #12
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <MX_TIM2_Init+0xe8>)
 8001a5c:	f00b ffb2 	bl	800d9c4 <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a66:	f000 fefd 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <MX_TIM2_Init+0xe8>)
 8001a6c:	f001 fa88 	bl	8002f80 <HAL_TIM_MspPostInit>

}
 8001a70:	bf00      	nop
 8001a72:	3738      	adds	r7, #56	; 0x38
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	24000534 	.word	0x24000534

08001a7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <MX_TIM3_Init+0x94>)
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <MX_TIM3_Init+0x98>)
 8001a9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <MX_TIM3_Init+0x94>)
 8001aa2:	222f      	movs	r2, #47	; 0x2f
 8001aa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <MX_TIM3_Init+0x94>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <MX_TIM3_Init+0x94>)
 8001aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <MX_TIM3_Init+0x94>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <MX_TIM3_Init+0x94>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ac0:	4813      	ldr	r0, [pc, #76]	; (8001b10 <MX_TIM3_Init+0x94>)
 8001ac2:	f00b fa46 	bl	800cf52 <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001acc:	f000 feca 	bl	8002864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	4619      	mov	r1, r3
 8001adc:	480c      	ldr	r0, [pc, #48]	; (8001b10 <MX_TIM3_Init+0x94>)
 8001ade:	f00c f885 	bl	800dbec <HAL_TIM_ConfigClockSource>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ae8:	f000 febc 	bl	8002864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_TIM3_Init+0x94>)
 8001afa:	f00c fdcd 	bl	800e698 <HAL_TIMEx_MasterConfigSynchronization>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b04:	f000 feae 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	24000580 	.word	0x24000580
 8001b14:	40000400 	.word	0x40000400

08001b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b1e:	4a23      	ldr	r2, [pc, #140]	; (8001bac <MX_USART1_UART_Init+0x94>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b22:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b24:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b60:	4811      	ldr	r0, [pc, #68]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b62:	f00c fec3 	bl	800e8ec <HAL_UART_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b6c:	f000 fe7a 	bl	8002864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b70:	2100      	movs	r1, #0
 8001b72:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b74:	f00f fae5 	bl	8011142 <HAL_UARTEx_SetTxFifoThreshold>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b7e:	f000 fe71 	bl	8002864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b82:	2100      	movs	r1, #0
 8001b84:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b86:	f00f fb1a 	bl	80111be <HAL_UARTEx_SetRxFifoThreshold>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b90:	f000 fe68 	bl	8002864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b94:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <MX_USART1_UART_Init+0x90>)
 8001b96:	f00f fa9b 	bl	80110d0 <HAL_UARTEx_DisableFifoMode>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ba0:	f000 fe60 	bl	8002864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	240005cc 	.word	0x240005cc
 8001bac:	40011000 	.word	0x40011000

08001bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <MX_DMA_Init+0x5c>)
 8001bb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <MX_DMA_Init+0x5c>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_DMA_Init+0x5c>)
 8001bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2105      	movs	r1, #5
 8001bd8:	200b      	movs	r0, #11
 8001bda:	f003 fa69 	bl	80050b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bde:	200b      	movs	r0, #11
 8001be0:	f003 fa80 	bl	80050e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2105      	movs	r1, #5
 8001be8:	200c      	movs	r0, #12
 8001bea:	f003 fa61 	bl	80050b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bee:	200c      	movs	r0, #12
 8001bf0:	f003 fa78 	bl	80050e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	2010      	movs	r0, #16
 8001bfa:	f003 fa59 	bl	80050b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bfe:	2010      	movs	r0, #16
 8001c00:	f003 fa70 	bl	80050e4 <HAL_NVIC_EnableIRQ>

}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	58024400 	.word	0x58024400

08001c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	4a32      	ldr	r2, [pc, #200]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c36:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c44:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4a:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c68:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001ca4:	4815      	ldr	r0, [pc, #84]	; (8001cfc <MX_GPIO_Init+0xec>)
 8001ca6:	f006 fe35 	bl	8008914 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2164      	movs	r1, #100	; 0x64
 8001cae:	4814      	ldr	r0, [pc, #80]	; (8001d00 <MX_GPIO_Init+0xf0>)
 8001cb0:	f006 fe30 	bl	8008914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001cb4:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001cb8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480b      	ldr	r0, [pc, #44]	; (8001cfc <MX_GPIO_Init+0xec>)
 8001cce:	f006 fc59 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001cd2:	2364      	movs	r3, #100	; 0x64
 8001cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_GPIO_Init+0xf0>)
 8001cea:	f006 fc4b 	bl	8008584 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	58024400 	.word	0x58024400
 8001cfc:	58020800 	.word	0x58020800
 8001d00:	58020400 	.word	0x58020400

08001d04 <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b090      	sub	sp, #64	; 0x40
 8001d08:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001d0e:	f107 011c 	add.w	r1, r7, #28
 8001d12:	2364      	movs	r3, #100	; 0x64
 8001d14:	2209      	movs	r2, #9
 8001d16:	4840      	ldr	r0, [pc, #256]	; (8001e18 <handshake+0x114>)
 8001d18:	f00c fec6 	bl	800eaa8 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001d1c:	7f3b      	ldrb	r3, [r7, #28]
 8001d1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001d22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d26:	2bff      	cmp	r3, #255	; 0xff
 8001d28:	d1f1      	bne.n	8001d0e <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001d2a:	7f7b      	ldrb	r3, [r7, #29]
 8001d2c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001d30:	7fbb      	ldrb	r3, [r7, #30]
 8001d32:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
 8001d38:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001d3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001d44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001d4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d50:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001d54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001d68:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d6c:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001d6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d72:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001d74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d78:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001d7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d7e:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001d80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001d84:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001d86:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001d8a:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8001d8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d8e:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	2200      	movs	r2, #0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4820      	ldr	r0, [pc, #128]	; (8001e1c <handshake+0x118>)
 8001d9a:	f00a fdf5 	bl	800c988 <HAL_RTC_SetDate>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001da4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <handshake+0xac>
	{
		Error_Handler();
 8001dac:	f000 fd5a 	bl	8002864 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	4619      	mov	r1, r3
 8001db6:	4819      	ldr	r0, [pc, #100]	; (8001e1c <handshake+0x118>)
 8001db8:	f00a fcec 	bl	800c794 <HAL_RTC_SetTime>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001dc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <handshake+0xca>
	{
		Error_Handler();
 8001dca:	f000 fd4b 	bl	8002864 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8001dce:	23fa      	movs	r3, #250	; 0xfa
 8001dd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8001de6:	2302      	movs	r3, #2
 8001de8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df0:	e009      	b.n	8001e06 <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8001df2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001df6:	2364      	movs	r3, #100	; 0x64
 8001df8:	2205      	movs	r2, #5
 8001dfa:	4807      	ldr	r0, [pc, #28]	; (8001e18 <handshake+0x114>)
 8001dfc:	f00c fdc6 	bl	800e98c <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8001e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e02:	3301      	adds	r3, #1
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbf1      	blt.n	8001df2 <handshake+0xee>
	}

	return 1;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3740      	adds	r7, #64	; 0x40
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	240005cc 	.word	0x240005cc
 8001e1c:	240003b4 	.word	0x240003b4

08001e20 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 8001e24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e28:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e2e:	210c      	movs	r1, #12
 8001e30:	4818      	ldr	r0, [pc, #96]	; (8001e94 <system_setup+0x74>)
 8001e32:	f00b fbb1 	bl	800d598 <HAL_TIM_PWM_Start>

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001e36:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e3e:	4816      	ldr	r0, [pc, #88]	; (8001e98 <system_setup+0x78>)
 8001e40:	f002 ff3c 	bl	8004cbc <HAL_ADCEx_Calibration_Start>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <system_setup+0x2e>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001e4a:	f000 fd0b 	bl	8002864 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001e4e:	220b      	movs	r2, #11
 8001e50:	4912      	ldr	r1, [pc, #72]	; (8001e9c <system_setup+0x7c>)
 8001e52:	4811      	ldr	r0, [pc, #68]	; (8001e98 <system_setup+0x78>)
 8001e54:	f002 f810 	bl	8003e78 <HAL_ADC_Start_DMA>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <system_setup+0x42>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001e5e:	f000 fd01 	bl	8002864 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001e62:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <system_setup+0x80>)
 8001e6c:	f002 ff26 	bl	8004cbc <HAL_ADCEx_Calibration_Start>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <system_setup+0x5a>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8001e76:	f000 fcf5 	bl	8002864 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <system_setup+0x84>)
 8001e7e:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <system_setup+0x80>)
 8001e80:	f001 fffa 	bl	8003e78 <HAL_ADC_Start_DMA>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <system_setup+0x6e>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001e8a:	f000 fceb 	bl	8002864 <Error_Handler>
	}
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	24000534 	.word	0x24000534
 8001e98:	2400011c 	.word	0x2400011c
 8001e9c:	24000bc0 	.word	0x24000bc0
 8001ea0:	24000180 	.word	0x24000180
 8001ea4:	24000be0 	.word	0x24000be0

08001ea8 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481d      	ldr	r0, [pc, #116]	; (8001f30 <getTimestamp+0x88>)
 8001eba:	f00a fd09 	bl	800c8d0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	481a      	ldr	r0, [pc, #104]	; (8001f30 <getTimestamp+0x88>)
 8001ec8:	f00a fde6 	bl	800ca98 <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed2:	fb03 f202 	mul.w	r2, r3, r2
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <getTimestamp+0x88>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3301      	adds	r3, #1
 8001eee:	7b7a      	ldrb	r2, [r7, #13]
 8001ef0:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	7bba      	ldrb	r2, [r7, #14]
 8001ef8:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3303      	adds	r3, #3
 8001efe:	7c3a      	ldrb	r2, [r7, #16]
 8001f00:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3304      	adds	r3, #4
 8001f06:	7c7a      	ldrb	r2, [r7, #17]
 8001f08:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3305      	adds	r3, #5
 8001f0e:	7cba      	ldrb	r2, [r7, #18]
 8001f10:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	0a1a      	lsrs	r2, r3, #8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3306      	adds	r3, #6
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3307      	adds	r3, #7
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]

}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	240003b4 	.word	0x240003b4

08001f34 <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f012 fed3 	bl	8014cf0 <malloc>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Memory allocation failed
		// Handle the error accordingly (e.g., return an error code or terminate the program)
	}
	memcpy(packet.array, data, size); // Copy the data into the packet array
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	88fa      	ldrh	r2, [r7, #6]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f012 fedb 	bl	8014d10 <memcpy>
	packet.size = size;
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	82bb      	strh	r3, [r7, #20]
	return packet;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f6a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001f7e:	bf00      	nop
 8001f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f84:	483f      	ldr	r0, [pc, #252]	; (8002084 <sample_pmt+0x10c>)
 8001f86:	f006 fcad 	bl	80088e4 <HAL_GPIO_ReadPin>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f7      	bne.n	8001f80 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001f90:	200e      	movs	r0, #14
 8001f92:	f012 fead 	bl	8014cf0 <malloc>
 8001f96:	4603      	mov	r3, r0
 8001f98:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001f9a:	2002      	movs	r0, #2
 8001f9c:	f012 fea8 	bl	8014cf0 <malloc>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001fa4:	2008      	movs	r0, #8
 8001fa6:	f012 fea3 	bl	8014cf0 <malloc>
 8001faa:	4603      	mov	r3, r0
 8001fac:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff ff7a 	bl	8001ea8 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	220e      	movs	r2, #14
 8001fb8:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	220d      	movs	r2, #13
 8001fc0:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	22bb      	movs	r2, #187	; 0xbb
 8001fc6:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	22bb      	movs	r2, #187	; 0xbb
 8001fce:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <sample_pmt+0x110>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3302      	adds	r3, #2
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <sample_pmt+0x110>)
 8001fe2:	881a      	ldrh	r2, [r3, #0]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3303      	adds	r3, #3
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3305      	adds	r3, #5
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	7852      	ldrb	r2, [r2, #1]
 8001ffe:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3306      	adds	r3, #6
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3307      	adds	r3, #7
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	7852      	ldrb	r2, [r2, #1]
 8002012:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3308      	adds	r3, #8
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	7892      	ldrb	r2, [r2, #2]
 800201c:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3309      	adds	r3, #9
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	78d2      	ldrb	r2, [r2, #3]
 8002026:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	330a      	adds	r3, #10
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	7912      	ldrb	r2, [r2, #4]
 8002030:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	330b      	adds	r3, #11
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	7952      	ldrb	r2, [r2, #5]
 800203a:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	330c      	adds	r3, #12
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	7992      	ldrb	r2, [r2, #6]
 8002044:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	330d      	adds	r3, #13
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	79d2      	ldrb	r2, [r2, #7]
 800204e:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	220e      	movs	r2, #14
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff6c 	bl	8001f34 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <sample_pmt+0x114>)
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	1d39      	adds	r1, r7, #4
 8002062:	2300      	movs	r3, #0
 8002064:	2200      	movs	r2, #0
 8002066:	f00f fc11 	bl	801188c <osMessageQueuePut>
	free(buffer);
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f012 fe48 	bl	8014d00 <free>
	free(pmt_spi);
 8002070:	6938      	ldr	r0, [r7, #16]
 8002072:	f012 fe45 	bl	8014d00 <free>
	free(timestamp);
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f012 fe42 	bl	8014d00 <free>
}
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	58020000 	.word	0x58020000
 8002088:	24000b38 	.word	0x24000b38
 800208c:	24000b34 	.word	0x24000b34

08002090 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002096:	bf00      	nop
 8002098:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800209c:	4856      	ldr	r0, [pc, #344]	; (80021f8 <sample_erpa+0x168>)
 800209e:	f006 fc21 	bl	80088e4 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f7      	bne.n	8002098 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80020a8:	2012      	movs	r0, #18
 80020aa:	f012 fe21 	bl	8014cf0 <malloc>
 80020ae:	4603      	mov	r3, r0
 80020b0:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80020b2:	2002      	movs	r0, #2
 80020b4:	f012 fe1c 	bl	8014cf0 <malloc>
 80020b8:	4603      	mov	r3, r0
 80020ba:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 80020bc:	2004      	movs	r0, #4
 80020be:	f012 fe17 	bl	8014cf0 <malloc>
 80020c2:	4603      	mov	r3, r0
 80020c4:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 80020c6:	2008      	movs	r0, #8
 80020c8:	f012 fe12 	bl	8014cf0 <malloc>
 80020cc:	4603      	mov	r3, r0
 80020ce:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 80020d0:	68b8      	ldr	r0, [r7, #8]
 80020d2:	f7ff fee9 	bl	8001ea8 <getTimestamp>

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	220e      	movs	r2, #14
 80020da:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	3301      	adds	r3, #1
 80020e0:	220d      	movs	r2, #13
 80020e2:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	22ee      	movs	r2, #238	; 0xee
 80020e8:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3302      	adds	r3, #2
 80020ee:	22dd      	movs	r2, #221	; 0xdd
 80020f0:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	22aa      	movs	r2, #170	; 0xaa
 80020f6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	22aa      	movs	r2, #170	; 0xaa
 80020fe:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002100:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <sample_erpa+0x16c>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	b29a      	uxth	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3302      	adds	r3, #2
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002110:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <sample_erpa+0x16c>)
 8002112:	881a      	ldrh	r2, [r3, #0]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3303      	adds	r3, #3
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	3304      	adds	r3, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3305      	adds	r3, #5
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3302      	adds	r3, #2
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b29a      	uxth	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3306      	adds	r3, #6
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3302      	adds	r3, #2
 800214e:	881a      	ldrh	r2, [r3, #0]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3307      	adds	r3, #7
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3308      	adds	r3, #8
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3309      	adds	r3, #9
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	7852      	ldrb	r2, [r2, #1]
 800216a:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	330a      	adds	r3, #10
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	330b      	adds	r3, #11
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	7852      	ldrb	r2, [r2, #1]
 800217e:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	330c      	adds	r3, #12
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	7892      	ldrb	r2, [r2, #2]
 8002188:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	330d      	adds	r3, #13
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	78d2      	ldrb	r2, [r2, #3]
 8002192:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	330e      	adds	r3, #14
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	7912      	ldrb	r2, [r2, #4]
 800219c:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	330f      	adds	r3, #15
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	7952      	ldrb	r2, [r2, #5]
 80021a6:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3310      	adds	r3, #16
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	7992      	ldrb	r2, [r2, #6]
 80021b0:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3311      	adds	r3, #17
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	79d2      	ldrb	r2, [r2, #7]
 80021ba:	701a      	strb	r2, [r3, #0]



	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80021bc:	463b      	mov	r3, r7
 80021be:	2212      	movs	r2, #18
 80021c0:	6979      	ldr	r1, [r7, #20]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff feb6 	bl	8001f34 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <sample_erpa+0x170>)
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	4639      	mov	r1, r7
 80021ce:	2300      	movs	r3, #0
 80021d0:	2200      	movs	r2, #0
 80021d2:	f00f fb5b 	bl	801188c <osMessageQueuePut>
	free(buffer);
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f012 fd92 	bl	8014d00 <free>
	free(erpa_spi);
 80021dc:	6938      	ldr	r0, [r7, #16]
 80021de:	f012 fd8f 	bl	8014d00 <free>
	free(erpa_adc);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f012 fd8c 	bl	8014d00 <free>
	free(timestamp);
 80021e8:	68b8      	ldr	r0, [r7, #8]
 80021ea:	f012 fd89 	bl	8014d00 <free>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	58020400 	.word	0x58020400
 80021fc:	24000b3a 	.word	0x24000b3a
 8002200:	24000b34 	.word	0x24000b34

08002204 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800220a:	202e      	movs	r0, #46	; 0x2e
 800220c:	f012 fd70 	bl	8014cf0 <malloc>
 8002210:	4603      	mov	r3, r0
 8002212:	61fb      	str	r3, [r7, #28]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002214:	2008      	movs	r0, #8
 8002216:	f012 fd6b 	bl	8014cf0 <malloc>
 800221a:	4603      	mov	r3, r0
 800221c:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 800221e:	2012      	movs	r0, #18
 8002220:	f012 fd66 	bl	8014cf0 <malloc>
 8002224:	4603      	mov	r3, r0
 8002226:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8002228:	2008      	movs	r0, #8
 800222a:	f012 fd61 	bl	8014cf0 <malloc>
 800222e:	4603      	mov	r3, r0
 8002230:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002232:	2008      	movs	r0, #8
 8002234:	f012 fd5c 	bl	8014cf0 <malloc>
 8002238:	4603      	mov	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7ff fe33 	bl	8001ea8 <getTimestamp>

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2211      	movs	r2, #17
 8002246:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	3302      	adds	r3, #2
 800224c:	2212      	movs	r2, #18
 800224e:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	3304      	adds	r3, #4
 8002254:	2213      	movs	r2, #19
 8002256:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	3306      	adds	r3, #6
 800225c:	2214      	movs	r2, #20
 800225e:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	22a0      	movs	r2, #160	; 0xa0
 8002264:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3302      	adds	r3, #2
 800226a:	22a1      	movs	r2, #161	; 0xa1
 800226c:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3304      	adds	r3, #4
 8002272:	22a2      	movs	r2, #162	; 0xa2
 8002274:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3306      	adds	r3, #6
 800227a:	22a3      	movs	r2, #163	; 0xa3
 800227c:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3308      	adds	r3, #8
 8002282:	22a4      	movs	r2, #164	; 0xa4
 8002284:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	330a      	adds	r3, #10
 800228a:	22a5      	movs	r2, #165	; 0xa5
 800228c:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	330c      	adds	r3, #12
 8002292:	22a6      	movs	r2, #166	; 0xa6
 8002294:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	330e      	adds	r3, #14
 800229a:	22a7      	movs	r2, #167	; 0xa7
 800229c:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3310      	adds	r3, #16
 80022a2:	22a8      	movs	r2, #168	; 0xa8
 80022a4:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	22b0      	movs	r2, #176	; 0xb0
 80022aa:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	3302      	adds	r3, #2
 80022b0:	22b1      	movs	r2, #177	; 0xb1
 80022b2:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	3304      	adds	r3, #4
 80022b8:	22b2      	movs	r2, #178	; 0xb2
 80022ba:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	3306      	adds	r3, #6
 80022c0:	22b3      	movs	r2, #179	; 0xb3
 80022c2:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	22cc      	movs	r2, #204	; 0xcc
 80022c8:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	22cc      	movs	r2, #204	; 0xcc
 80022d0:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80022d2:	4ba5      	ldr	r3, [pc, #660]	; (8002568 <sample_hk+0x364>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	b29a      	uxth	r2, r3
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3302      	adds	r3, #2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80022e2:	4ba1      	ldr	r3, [pc, #644]	; (8002568 <sample_hk+0x364>)
 80022e4:	881a      	ldrh	r2, [r3, #0]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3303      	adds	r3, #3
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	3302      	adds	r3, #2
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3304      	adds	r3, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	3302      	adds	r3, #2
 8002304:	881a      	ldrh	r2, [r3, #0]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3305      	adds	r3, #5
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	b29a      	uxth	r2, r3
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3306      	adds	r3, #6
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3307      	adds	r3, #7
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002330:	121a      	asrs	r2, r3, #8
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3308      	adds	r3, #8
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3309      	adds	r3, #9
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	3302      	adds	r3, #2
 800234c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002350:	121a      	asrs	r2, r3, #8
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	330a      	adds	r3, #10
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	3302      	adds	r3, #2
 800235e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	330b      	adds	r3, #11
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	3304      	adds	r3, #4
 800236e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002372:	121a      	asrs	r2, r3, #8
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	330c      	adds	r3, #12
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	3304      	adds	r3, #4
 8002380:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	330d      	adds	r3, #13
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	3306      	adds	r3, #6
 8002390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002394:	121a      	asrs	r2, r3, #8
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	330e      	adds	r3, #14
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	3306      	adds	r3, #6
 80023a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	330f      	adds	r3, #15
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3310      	adds	r3, #16
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	881a      	ldrh	r2, [r3, #0]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3311      	adds	r3, #17
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3302      	adds	r3, #2
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	3312      	adds	r3, #18
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3302      	adds	r3, #2
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3313      	adds	r3, #19
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3304      	adds	r3, #4
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	3314      	adds	r3, #20
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3304      	adds	r3, #4
 8002400:	881a      	ldrh	r2, [r3, #0]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3315      	adds	r3, #21
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	3306      	adds	r3, #6
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	b29a      	uxth	r2, r3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3316      	adds	r3, #22
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	3306      	adds	r3, #6
 8002420:	881a      	ldrh	r2, [r3, #0]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3317      	adds	r3, #23
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	330c      	adds	r3, #12
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b29a      	uxth	r2, r3
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	3318      	adds	r3, #24
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	330c      	adds	r3, #12
 8002440:	881a      	ldrh	r2, [r3, #0]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3319      	adds	r3, #25
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3306      	adds	r3, #6
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	b29a      	uxth	r2, r3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	331a      	adds	r3, #26
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3306      	adds	r3, #6
 8002460:	881a      	ldrh	r2, [r3, #0]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	331b      	adds	r3, #27
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	3304      	adds	r3, #4
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	b29a      	uxth	r2, r3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	331c      	adds	r3, #28
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	3304      	adds	r3, #4
 8002480:	881a      	ldrh	r2, [r3, #0]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	331d      	adds	r3, #29
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	330e      	adds	r3, #14
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b29a      	uxth	r2, r3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	331e      	adds	r3, #30
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	330e      	adds	r3, #14
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	331f      	adds	r3, #31
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3310      	adds	r3, #16
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3320      	adds	r3, #32
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3310      	adds	r3, #16
 80024c0:	881a      	ldrh	r2, [r3, #0]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3321      	adds	r3, #33	; 0x21
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3308      	adds	r3, #8
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3322      	adds	r3, #34	; 0x22
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3308      	adds	r3, #8
 80024e0:	881a      	ldrh	r2, [r3, #0]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3323      	adds	r3, #35	; 0x23
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	330a      	adds	r3, #10
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	3324      	adds	r3, #36	; 0x24
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	330a      	adds	r3, #10
 8002500:	881a      	ldrh	r2, [r3, #0]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3325      	adds	r3, #37	; 0x25
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3326      	adds	r3, #38	; 0x26
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	3327      	adds	r3, #39	; 0x27
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	7852      	ldrb	r2, [r2, #1]
 800251c:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3328      	adds	r3, #40	; 0x28
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	7892      	ldrb	r2, [r2, #2]
 8002526:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	3329      	adds	r3, #41	; 0x29
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	78d2      	ldrb	r2, [r2, #3]
 8002530:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	332a      	adds	r3, #42	; 0x2a
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	7912      	ldrb	r2, [r2, #4]
 800253a:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	332b      	adds	r3, #43	; 0x2b
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	7952      	ldrb	r2, [r2, #5]
 8002544:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	332c      	adds	r3, #44	; 0x2c
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	7992      	ldrb	r2, [r2, #6]
 800254e:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	332d      	adds	r3, #45	; 0x2d
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	79d2      	ldrb	r2, [r2, #7]
 8002558:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	222e      	movs	r2, #46	; 0x2e
 800255e:	69f9      	ldr	r1, [r7, #28]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fce7 	bl	8001f34 <create_packet>
 8002566:	e001      	b.n	800256c <sample_hk+0x368>
 8002568:	24000b3c 	.word	0x24000b3c
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <sample_hk+0x39c>)
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	1d39      	adds	r1, r7, #4
 8002572:	2300      	movs	r3, #0
 8002574:	2200      	movs	r2, #0
 8002576:	f00f f989 	bl	801188c <osMessageQueuePut>
	free(buffer);
 800257a:	69f8      	ldr	r0, [r7, #28]
 800257c:	f012 fbc0 	bl	8014d00 <free>
	free(hk_i2c);
 8002580:	69b8      	ldr	r0, [r7, #24]
 8002582:	f012 fbbd 	bl	8014d00 <free>
	free(hk_adc1);
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f012 fbba 	bl	8014d00 <free>
	free(hk_adc3);
 800258c:	6938      	ldr	r0, [r7, #16]
 800258e:	f012 fbb7 	bl	8014d00 <free>
	free(timestamp);
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f012 fbb4 	bl	8014d00 <free>
}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	24000b34 	.word	0x24000b34

080025a4 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <PMT_init+0x38>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b4:	2200      	movs	r2, #0
 80025b6:	2101      	movs	r1, #1
 80025b8:	f00f f88e 	bl	80116d8 <osEventFlagsWait>
		if(PMT_ON){
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <PMT_init+0x3c>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <PMT_init+0x30>
			sample_pmt();
 80025c4:	f7ff fcd8 	bl	8001f78 <sample_pmt>
			pmt_seq++;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <PMT_init+0x40>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <PMT_init+0x40>)
 80025d2:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 80025d4:	f00e ffa0 	bl	8011518 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025d8:	e7e8      	b.n	80025ac <PMT_init+0x8>
 80025da:	bf00      	nop
 80025dc:	24000b44 	.word	0x24000b44
 80025e0:	24000b3e 	.word	0x24000b3e
 80025e4:	24000b38 	.word	0x24000b38

080025e8 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <ERPA_init+0x38>)
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f8:	2200      	movs	r2, #0
 80025fa:	2102      	movs	r1, #2
 80025fc:	f00f f86c 	bl	80116d8 <osEventFlagsWait>
		if (ERPA_ON)
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <ERPA_init+0x3c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <ERPA_init+0x30>
		{
			sample_erpa();
 8002608:	f7ff fd42 	bl	8002090 <sample_erpa>
			erpa_seq++;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <ERPA_init+0x40>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <ERPA_init+0x40>)
 8002616:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8002618:	f00e ff7e 	bl	8011518 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800261c:	e7e8      	b.n	80025f0 <ERPA_init+0x8>
 800261e:	bf00      	nop
 8002620:	24000b44 	.word	0x24000b44
 8002624:	24000b3f 	.word	0x24000b3f
 8002628:	24000b3a 	.word	0x24000b3a

0800262c <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HK_init+0x38>)
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263c:	2200      	movs	r2, #0
 800263e:	2104      	movs	r1, #4
 8002640:	f00f f84a 	bl	80116d8 <osEventFlagsWait>
		if(HK_ON)
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HK_init+0x3c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HK_init+0x30>
		{
			sample_hk();
 800264c:	f7ff fdda 	bl	8002204 <sample_hk>
			hk_seq++;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <HK_init+0x40>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <HK_init+0x40>)
 800265a:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 800265c:	f00e ff5c 	bl	8011518 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002660:	e7e8      	b.n	8002634 <HK_init+0x8>
 8002662:	bf00      	nop
 8002664:	24000b44 	.word	0x24000b44
 8002668:	24000b40 	.word	0x24000b40
 800266c:	24000b3c 	.word	0x24000b3c

08002670 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002678:	2201      	movs	r2, #1
 800267a:	4904      	ldr	r1, [pc, #16]	; (800268c <UART_RX_init+0x1c>)
 800267c:	4804      	ldr	r0, [pc, #16]	; (8002690 <UART_RX_init+0x20>)
 800267e:	f00c fadb 	bl	800ec38 <HAL_UART_Receive_IT>
		osDelay(5);
 8002682:	2005      	movs	r0, #5
 8002684:	f00e ff89 	bl	801159a <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002688:	e7f6      	b.n	8002678 <UART_RX_init+0x8>
 800268a:	bf00      	nop
 800268c:	24000b48 	.word	0x24000b48
 8002690:	240005cc 	.word	0x240005cc

08002694 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
		; // Insert thread code here...

		status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <UART_TX_init+0x50>)
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	f107 010c 	add.w	r1, r7, #12
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026a8:	2200      	movs	r2, #0
 80026aa:	f00f f94f 	bl	801194c <osMessageQueueGet>
 80026ae:	6178      	str	r0, [r7, #20]

		if (status == osOK) {
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d113      	bne.n	80026de <UART_TX_init+0x4a>
			printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <UART_TX_init+0x50>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f00f f9a4 	bl	8011a08 <osMessageQueueGetCount>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4619      	mov	r1, r3
 80026c4:	4808      	ldr	r0, [pc, #32]	; (80026e8 <UART_TX_init+0x54>)
 80026c6:	f012 fc19 	bl	8014efc <iprintf>
			HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 80026ca:	68f9      	ldr	r1, [r7, #12]
 80026cc:	8a3a      	ldrh	r2, [r7, #16]
 80026ce:	2364      	movs	r3, #100	; 0x64
 80026d0:	4806      	ldr	r0, [pc, #24]	; (80026ec <UART_TX_init+0x58>)
 80026d2:	f00c f95b 	bl	800e98c <HAL_UART_Transmit>
			free(msg.array);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4618      	mov	r0, r3
 80026da:	f012 fb11 	bl	8014d00 <free>
		}
		osThreadYield();
 80026de:	f00e ff1b 	bl	8011518 <osThreadYield>
		status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 80026e2:	e7db      	b.n	800269c <UART_TX_init+0x8>
 80026e4:	24000b34 	.word	0x24000b34
 80026e8:	08015fb8 	.word	0x08015fb8
 80026ec:	240005cc 	.word	0x240005cc

080026f0 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <GPIO_on_init+0x9c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f00e ff2b 	bl	8011558 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002702:	4b23      	ldr	r3, [pc, #140]	; (8002790 <GPIO_on_init+0xa0>)
 8002704:	2104      	movs	r1, #4
 8002706:	2201      	movs	r2, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f006 f903 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 800270e:	2064      	movs	r0, #100	; 0x64
 8002710:	f00e ff43 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002714:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <GPIO_on_init+0xa0>)
 8002716:	2120      	movs	r1, #32
 8002718:	2201      	movs	r2, #1
 800271a:	4618      	mov	r0, r3
 800271c:	f006 f8fa 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 8002720:	2064      	movs	r0, #100	; 0x64
 8002722:	f00e ff3a 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <GPIO_on_init+0xa4>)
 8002728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800272c:	2201      	movs	r2, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f006 f8f0 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 8002734:	2064      	movs	r0, #100	; 0x64
 8002736:	f00e ff30 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <GPIO_on_init+0xa4>)
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	2201      	movs	r2, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f006 f8e7 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 8002746:	2064      	movs	r0, #100	; 0x64
 8002748:	f00e ff27 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <GPIO_on_init+0xa4>)
 800274e:	2140      	movs	r1, #64	; 0x40
 8002750:	2201      	movs	r2, #1
 8002752:	4618      	mov	r0, r3
 8002754:	f006 f8de 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 8002758:	2064      	movs	r0, #100	; 0x64
 800275a:	f00e ff1e 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <GPIO_on_init+0xa4>)
 8002760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002764:	2201      	movs	r2, #1
 8002766:	4618      	mov	r0, r3
 8002768:	f006 f8d4 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 800276c:	2064      	movs	r0, #100	; 0x64
 800276e:	f00e ff14 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <GPIO_on_init+0xa4>)
 8002774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002778:	2201      	movs	r2, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f006 f8ca 	bl	8008914 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002780:	4b02      	ldr	r3, [pc, #8]	; (800278c <GPIO_on_init+0x9c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f00e fee7 	bl	8011558 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800278a:	e7ba      	b.n	8002702 <GPIO_on_init+0x12>
 800278c:	24000674 	.word	0x24000674
 8002790:	58020400 	.word	0x58020400
 8002794:	58020800 	.word	0x58020800

08002798 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <GPIO_off_init+0x9c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f00e fed7 	bl	8011558 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 80027aa:	4b23      	ldr	r3, [pc, #140]	; (8002838 <GPIO_off_init+0xa0>)
 80027ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027b0:	2200      	movs	r2, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f006 f8ae 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 80027b8:	2064      	movs	r0, #100	; 0x64
 80027ba:	f00e feee 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <GPIO_off_init+0xa0>)
 80027c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027c4:	2200      	movs	r2, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f006 f8a4 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 80027cc:	2064      	movs	r0, #100	; 0x64
 80027ce:	f00e fee4 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <GPIO_off_init+0xa0>)
 80027d4:	2140      	movs	r1, #64	; 0x40
 80027d6:	2200      	movs	r2, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f006 f89b 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 80027de:	2064      	movs	r0, #100	; 0x64
 80027e0:	f00e fedb 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <GPIO_off_init+0xa0>)
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	2200      	movs	r2, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f006 f892 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 80027f0:	2064      	movs	r0, #100	; 0x64
 80027f2:	f00e fed2 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <GPIO_off_init+0xa0>)
 80027f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027fc:	2200      	movs	r2, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f006 f888 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 8002804:	2064      	movs	r0, #100	; 0x64
 8002806:	f00e fec8 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <GPIO_off_init+0xa4>)
 800280c:	2120      	movs	r1, #32
 800280e:	2200      	movs	r2, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f006 f87f 	bl	8008914 <HAL_GPIO_WritePin>
		osDelay(100);
 8002816:	2064      	movs	r0, #100	; 0x64
 8002818:	f00e febf 	bl	801159a <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <GPIO_off_init+0xa4>)
 800281e:	2104      	movs	r1, #4
 8002820:	2200      	movs	r2, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f006 f876 	bl	8008914 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002828:	4b02      	ldr	r3, [pc, #8]	; (8002834 <GPIO_off_init+0x9c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f00e fe93 	bl	8011558 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002832:	e7ba      	b.n	80027aa <GPIO_off_init+0x12>
 8002834:	240008d4 	.word	0x240008d4
 8002838:	58020800 	.word	0x58020800
 800283c:	58020400 	.word	0x58020400

08002840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a04      	ldr	r2, [pc, #16]	; (8002860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002852:	f000 ff1f 	bl	8003694 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40001000 	.word	0x40001000

08002864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
}
 800286a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800286c:	e7fe      	b.n	800286c <Error_Handler+0x8>
	...

08002870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_MspInit+0x38>)
 8002878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <HAL_MspInit+0x38>)
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_MspInit+0x38>)
 8002888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	210f      	movs	r1, #15
 8002898:	f06f 0001 	mvn.w	r0, #1
 800289c:	f002 fc08 	bl	80050b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	58024400 	.word	0x58024400

080028ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	; 0x38
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a7b      	ldr	r2, [pc, #492]	; (8002ab8 <HAL_ADC_MspInit+0x20c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f040 8091 	bne.w	80029f2 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80028d0:	4b7a      	ldr	r3, [pc, #488]	; (8002abc <HAL_ADC_MspInit+0x210>)
 80028d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028d6:	4a79      	ldr	r2, [pc, #484]	; (8002abc <HAL_ADC_MspInit+0x210>)
 80028d8:	f043 0320 	orr.w	r3, r3, #32
 80028dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028e0:	4b76      	ldr	r3, [pc, #472]	; (8002abc <HAL_ADC_MspInit+0x210>)
 80028e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ee:	4b73      	ldr	r3, [pc, #460]	; (8002abc <HAL_ADC_MspInit+0x210>)
 80028f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f4:	4a71      	ldr	r2, [pc, #452]	; (8002abc <HAL_ADC_MspInit+0x210>)
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028fe:	4b6f      	ldr	r3, [pc, #444]	; (8002abc <HAL_ADC_MspInit+0x210>)
 8002900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	4b6b      	ldr	r3, [pc, #428]	; (8002abc <HAL_ADC_MspInit+0x210>)
 800290e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002912:	4a6a      	ldr	r2, [pc, #424]	; (8002abc <HAL_ADC_MspInit+0x210>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800291c:	4b67      	ldr	r3, [pc, #412]	; (8002abc <HAL_ADC_MspInit+0x210>)
 800291e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	61bb      	str	r3, [r7, #24]
 8002928:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292a:	4b64      	ldr	r3, [pc, #400]	; (8002abc <HAL_ADC_MspInit+0x210>)
 800292c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002930:	4a62      	ldr	r2, [pc, #392]	; (8002abc <HAL_ADC_MspInit+0x210>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800293a:	4b60      	ldr	r3, [pc, #384]	; (8002abc <HAL_ADC_MspInit+0x210>)
 800293c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002948:	2333      	movs	r3, #51	; 0x33
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800294c:	2303      	movs	r3, #3
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002958:	4619      	mov	r1, r3
 800295a:	4859      	ldr	r0, [pc, #356]	; (8002ac0 <HAL_ADC_MspInit+0x214>)
 800295c:	f005 fe12 	bl	8008584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002960:	23ce      	movs	r3, #206	; 0xce
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002964:	2303      	movs	r3, #3
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002970:	4619      	mov	r1, r3
 8002972:	4854      	ldr	r0, [pc, #336]	; (8002ac4 <HAL_ADC_MspInit+0x218>)
 8002974:	f005 fe06 	bl	8008584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002978:	2303      	movs	r3, #3
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800297c:	2303      	movs	r3, #3
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002988:	4619      	mov	r1, r3
 800298a:	484f      	ldr	r0, [pc, #316]	; (8002ac8 <HAL_ADC_MspInit+0x21c>)
 800298c:	f005 fdfa 	bl	8008584 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002990:	4b4e      	ldr	r3, [pc, #312]	; (8002acc <HAL_ADC_MspInit+0x220>)
 8002992:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <HAL_ADC_MspInit+0x224>)
 8002994:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002996:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <HAL_ADC_MspInit+0x220>)
 8002998:	2209      	movs	r2, #9
 800299a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800299c:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <HAL_ADC_MspInit+0x220>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <HAL_ADC_MspInit+0x220>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029a8:	4b48      	ldr	r3, [pc, #288]	; (8002acc <HAL_ADC_MspInit+0x220>)
 80029aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029b0:	4b46      	ldr	r3, [pc, #280]	; (8002acc <HAL_ADC_MspInit+0x220>)
 80029b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029b8:	4b44      	ldr	r3, [pc, #272]	; (8002acc <HAL_ADC_MspInit+0x220>)
 80029ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80029c0:	4b42      	ldr	r3, [pc, #264]	; (8002acc <HAL_ADC_MspInit+0x220>)
 80029c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029c8:	4b40      	ldr	r3, [pc, #256]	; (8002acc <HAL_ADC_MspInit+0x220>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ce:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <HAL_ADC_MspInit+0x220>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029d4:	483d      	ldr	r0, [pc, #244]	; (8002acc <HAL_ADC_MspInit+0x220>)
 80029d6:	f002 ff99 	bl	800590c <HAL_DMA_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80029e0:	f7ff ff40 	bl	8002864 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a39      	ldr	r2, [pc, #228]	; (8002acc <HAL_ADC_MspInit+0x220>)
 80029e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80029ea:	4a38      	ldr	r2, [pc, #224]	; (8002acc <HAL_ADC_MspInit+0x220>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029f0:	e05e      	b.n	8002ab0 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a37      	ldr	r2, [pc, #220]	; (8002ad4 <HAL_ADC_MspInit+0x228>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d159      	bne.n	8002ab0 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029fc:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <HAL_ADC_MspInit+0x210>)
 80029fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a02:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_ADC_MspInit+0x210>)
 8002a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <HAL_ADC_MspInit+0x210>)
 8002a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1a:	4b28      	ldr	r3, [pc, #160]	; (8002abc <HAL_ADC_MspInit+0x210>)
 8002a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <HAL_ADC_MspInit+0x210>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_ADC_MspInit+0x210>)
 8002a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002a38:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002a3c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002a40:	f000 fe54 	bl	80036ec <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002a44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002a48:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a4c:	f000 fe4e 	bl	80036ec <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a52:	4a22      	ldr	r2, [pc, #136]	; (8002adc <HAL_ADC_MspInit+0x230>)
 8002a54:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a58:	2273      	movs	r2, #115	; 0x73
 8002a5a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a6e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a76:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a7e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a86:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002a94:	4810      	ldr	r0, [pc, #64]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002a96:	f002 ff39 	bl	800590c <HAL_DMA_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002aa0:	f7ff fee0 	bl	8002864 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002aa8:	64da      	str	r2, [r3, #76]	; 0x4c
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <HAL_ADC_MspInit+0x22c>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ab0:	bf00      	nop
 8002ab2:	3738      	adds	r7, #56	; 0x38
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40022000 	.word	0x40022000
 8002abc:	58024400 	.word	0x58024400
 8002ac0:	58020800 	.word	0x58020800
 8002ac4:	58020000 	.word	0x58020000
 8002ac8:	58020400 	.word	0x58020400
 8002acc:	240001e4 	.word	0x240001e4
 8002ad0:	40020010 	.word	0x40020010
 8002ad4:	58026000 	.word	0x58026000
 8002ad8:	2400025c 	.word	0x2400025c
 8002adc:	40020028 	.word	0x40020028

08002ae0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a34      	ldr	r2, [pc, #208]	; (8002bd0 <HAL_DAC_MspInit+0xf0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d161      	bne.n	8002bc6 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_DAC_MspInit+0xf4>)
 8002b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b08:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <HAL_DAC_MspInit+0xf4>)
 8002b0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b12:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <HAL_DAC_MspInit+0xf4>)
 8002b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_DAC_MspInit+0xf4>)
 8002b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b26:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <HAL_DAC_MspInit+0xf4>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b30:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <HAL_DAC_MspInit+0xf4>)
 8002b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b3e:	2310      	movs	r3, #16
 8002b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b42:	2303      	movs	r3, #3
 8002b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4821      	ldr	r0, [pc, #132]	; (8002bd8 <HAL_DAC_MspInit+0xf8>)
 8002b52:	f005 fd17 	bl	8008584 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b58:	4a21      	ldr	r2, [pc, #132]	; (8002be0 <HAL_DAC_MspInit+0x100>)
 8002b5a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b5e:	2243      	movs	r2, #67	; 0x43
 8002b60:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b64:	2240      	movs	r2, #64	; 0x40
 8002b66:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b74:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b7c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b84:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b8c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002b9a:	4810      	ldr	r0, [pc, #64]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002b9c:	f002 feb6 	bl	800590c <HAL_DMA_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002ba6:	f7ff fe5d 	bl	8002864 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a0b      	ldr	r2, [pc, #44]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <HAL_DAC_MspInit+0xfc>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2105      	movs	r1, #5
 8002bba:	2036      	movs	r0, #54	; 0x36
 8002bbc:	f002 fa78 	bl	80050b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bc0:	2036      	movs	r0, #54	; 0x36
 8002bc2:	f002 fa8f 	bl	80050e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002bc6:	bf00      	nop
 8002bc8:	3728      	adds	r7, #40	; 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40007400 	.word	0x40007400
 8002bd4:	58024400 	.word	0x58024400
 8002bd8:	58020000 	.word	0x58020000
 8002bdc:	240002e8 	.word	0x240002e8
 8002be0:	40020088 	.word	0x40020088

08002be4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0ba      	sub	sp, #232	; 0xe8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	22c0      	movs	r2, #192	; 0xc0
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f012 f891 	bl	8014d2c <memset>
  if(hi2c->Instance==I2C1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a27      	ldr	r2, [pc, #156]	; (8002cac <HAL_I2C_MspInit+0xc8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d146      	bne.n	8002ca2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c14:	f04f 0208 	mov.w	r2, #8
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f007 f832 	bl	8009c94 <HAL_RCCEx_PeriphCLKConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c36:	f7ff fe15 	bl	8002864 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_I2C_MspInit+0xcc>)
 8002c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c40:	4a1b      	ldr	r2, [pc, #108]	; (8002cb0 <HAL_I2C_MspInit+0xcc>)
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c4a:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_I2C_MspInit+0xcc>)
 8002c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c60:	2312      	movs	r3, #18
 8002c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c72:	2304      	movs	r3, #4
 8002c74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <HAL_I2C_MspInit+0xd0>)
 8002c80:	f005 fc80 	bl	8008584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_I2C_MspInit+0xcc>)
 8002c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_I2C_MspInit+0xcc>)
 8002c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_I2C_MspInit+0xcc>)
 8002c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ca2:	bf00      	nop
 8002ca4:	37e8      	adds	r7, #232	; 0xe8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40005400 	.word	0x40005400
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	58020400 	.word	0x58020400

08002cb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b0b2      	sub	sp, #200	; 0xc8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cc0:	f107 0308 	add.w	r3, r7, #8
 8002cc4:	22c0      	movs	r2, #192	; 0xc0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f012 f82f 	bl	8014d2c <memset>
  if(hrtc->Instance==RTC)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_RTC_MspInit+0x5c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d119      	bne.n	8002d0c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cec:	f107 0308 	add.w	r3, r7, #8
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f006 ffcf 	bl	8009c94 <HAL_RCCEx_PeriphCLKConfig>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002cfc:	f7ff fdb2 	bl	8002864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RTC_MspInit+0x60>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <HAL_RTC_MspInit+0x60>)
 8002d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d0c:	bf00      	nop
 8002d0e:	37c8      	adds	r7, #200	; 0xc8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	58004000 	.word	0x58004000
 8002d18:	58024400 	.word	0x58024400

08002d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b0bc      	sub	sp, #240	; 0xf0
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d34:	f107 0318 	add.w	r3, r7, #24
 8002d38:	22c0      	movs	r2, #192	; 0xc0
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f011 fff5 	bl	8014d2c <memset>
  if(hspi->Instance==SPI1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a4c      	ldr	r2, [pc, #304]	; (8002e78 <HAL_SPI_MspInit+0x15c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d145      	bne.n	8002dd8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d5c:	f107 0318 	add.w	r3, r7, #24
 8002d60:	4618      	mov	r0, r3
 8002d62:	f006 ff97 	bl	8009c94 <HAL_RCCEx_PeriphCLKConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002d6c:	f7ff fd7a 	bl	8002864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d70:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d76:	4a41      	ldr	r2, [pc, #260]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002d78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d80:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d94:	4a39      	ldr	r2, [pc, #228]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002dac:	2318      	movs	r3, #24
 8002dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dc4:	2305      	movs	r3, #5
 8002dc6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002dce:	4619      	mov	r1, r3
 8002dd0:	482b      	ldr	r0, [pc, #172]	; (8002e80 <HAL_SPI_MspInit+0x164>)
 8002dd2:	f005 fbd7 	bl	8008584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002dd6:	e04a      	b.n	8002e6e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a29      	ldr	r2, [pc, #164]	; (8002e84 <HAL_SPI_MspInit+0x168>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d145      	bne.n	8002e6e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002df2:	f107 0318 	add.w	r3, r7, #24
 8002df6:	4618      	mov	r0, r3
 8002df8:	f006 ff4c 	bl	8009c94 <HAL_RCCEx_PeriphCLKConfig>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002e02:	f7ff fd2f 	bl	8002864 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e0c:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_SPI_MspInit+0x160>)
 8002e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002e42:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e5c:	2305      	movs	r3, #5
 8002e5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e62:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e66:	4619      	mov	r1, r3
 8002e68:	4805      	ldr	r0, [pc, #20]	; (8002e80 <HAL_SPI_MspInit+0x164>)
 8002e6a:	f005 fb8b 	bl	8008584 <HAL_GPIO_Init>
}
 8002e6e:	bf00      	nop
 8002e70:	37f0      	adds	r7, #240	; 0xf0
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40013000 	.word	0x40013000
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	58020400 	.word	0x58020400
 8002e84:	40003800 	.word	0x40003800

08002e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a37      	ldr	r2, [pc, #220]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d12f      	bne.n	8002efa <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <HAL_TIM_Base_MspInit+0xf0>)
 8002e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ea0:	4a35      	ldr	r2, [pc, #212]	; (8002f78 <HAL_TIM_Base_MspInit+0xf0>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002eaa:	4b33      	ldr	r3, [pc, #204]	; (8002f78 <HAL_TIM_Base_MspInit+0xf0>)
 8002eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2105      	movs	r1, #5
 8002ebc:	2018      	movs	r0, #24
 8002ebe:	f002 f8f7 	bl	80050b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002ec2:	2018      	movs	r0, #24
 8002ec4:	f002 f90e 	bl	80050e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2105      	movs	r1, #5
 8002ecc:	2019      	movs	r0, #25
 8002ece:	f002 f8ef 	bl	80050b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002ed2:	2019      	movs	r0, #25
 8002ed4:	f002 f906 	bl	80050e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2105      	movs	r1, #5
 8002edc:	201a      	movs	r0, #26
 8002ede:	f002 f8e7 	bl	80050b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002ee2:	201a      	movs	r0, #26
 8002ee4:	f002 f8fe 	bl	80050e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2105      	movs	r1, #5
 8002eec:	201b      	movs	r0, #27
 8002eee:	f002 f8df 	bl	80050b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002ef2:	201b      	movs	r0, #27
 8002ef4:	f002 f8f6 	bl	80050e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ef8:	e038      	b.n	8002f6c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f02:	d117      	bne.n	8002f34 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f04:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <HAL_TIM_Base_MspInit+0xf0>)
 8002f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f0a:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_TIM_Base_MspInit+0xf0>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <HAL_TIM_Base_MspInit+0xf0>)
 8002f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2105      	movs	r1, #5
 8002f26:	201c      	movs	r0, #28
 8002f28:	f002 f8c2 	bl	80050b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f2c:	201c      	movs	r0, #28
 8002f2e:	f002 f8d9 	bl	80050e4 <HAL_NVIC_EnableIRQ>
}
 8002f32:	e01b      	b.n	8002f6c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <HAL_TIM_Base_MspInit+0xf4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d116      	bne.n	8002f6c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_TIM_Base_MspInit+0xf0>)
 8002f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f44:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <HAL_TIM_Base_MspInit+0xf0>)
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_TIM_Base_MspInit+0xf0>)
 8002f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2105      	movs	r1, #5
 8002f60:	201d      	movs	r0, #29
 8002f62:	f002 f8a5 	bl	80050b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f66:	201d      	movs	r0, #29
 8002f68:	f002 f8bc 	bl	80050e4 <HAL_NVIC_EnableIRQ>
}
 8002f6c:	bf00      	nop
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40010000 	.word	0x40010000
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	40000400 	.word	0x40000400

08002f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a26      	ldr	r2, [pc, #152]	; (8003038 <HAL_TIM_MspPostInit+0xb8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d120      	bne.n	8002fe4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_TIM_MspPostInit+0xbc>)
 8002fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa8:	4a24      	ldr	r2, [pc, #144]	; (800303c <HAL_TIM_MspPostInit+0xbc>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <HAL_TIM_MspPostInit+0xbc>)
 8002fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4818      	ldr	r0, [pc, #96]	; (8003040 <HAL_TIM_MspPostInit+0xc0>)
 8002fde:	f005 fad1 	bl	8008584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fe2:	e024      	b.n	800302e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d11f      	bne.n	800302e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_TIM_MspPostInit+0xbc>)
 8002ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff4:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_TIM_MspPostInit+0xbc>)
 8002ff6:	f043 0302 	orr.w	r3, r3, #2
 8002ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_TIM_MspPostInit+0xbc>)
 8003000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800300c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800301e:	2301      	movs	r3, #1
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	4619      	mov	r1, r3
 8003028:	4806      	ldr	r0, [pc, #24]	; (8003044 <HAL_TIM_MspPostInit+0xc4>)
 800302a:	f005 faab 	bl	8008584 <HAL_GPIO_Init>
}
 800302e:	bf00      	nop
 8003030:	3728      	adds	r7, #40	; 0x28
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40010000 	.word	0x40010000
 800303c:	58024400 	.word	0x58024400
 8003040:	58020000 	.word	0x58020000
 8003044:	58020400 	.word	0x58020400

08003048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b0ba      	sub	sp, #232	; 0xe8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	22c0      	movs	r2, #192	; 0xc0
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f011 fe5f 	bl	8014d2c <memset>
  if(huart->Instance==USART1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a2b      	ldr	r2, [pc, #172]	; (8003120 <HAL_UART_MspInit+0xd8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d14e      	bne.n	8003116 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003078:	f04f 0201 	mov.w	r2, #1
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800308a:	f107 0310 	add.w	r3, r7, #16
 800308e:	4618      	mov	r0, r3
 8003090:	f006 fe00 	bl	8009c94 <HAL_RCCEx_PeriphCLKConfig>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800309a:	f7ff fbe3 	bl	8002864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800309e:	4b21      	ldr	r3, [pc, #132]	; (8003124 <HAL_UART_MspInit+0xdc>)
 80030a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030a4:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <HAL_UART_MspInit+0xdc>)
 80030a6:	f043 0310 	orr.w	r3, r3, #16
 80030aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_UART_MspInit+0xdc>)
 80030b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_UART_MspInit+0xdc>)
 80030be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_UART_MspInit+0xdc>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030cc:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_UART_MspInit+0xdc>)
 80030ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030f4:	2307      	movs	r3, #7
 80030f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030fe:	4619      	mov	r1, r3
 8003100:	4809      	ldr	r0, [pc, #36]	; (8003128 <HAL_UART_MspInit+0xe0>)
 8003102:	f005 fa3f 	bl	8008584 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2105      	movs	r1, #5
 800310a:	2025      	movs	r0, #37	; 0x25
 800310c:	f001 ffd0 	bl	80050b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003110:	2025      	movs	r0, #37	; 0x25
 8003112:	f001 ffe7 	bl	80050e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003116:	bf00      	nop
 8003118:	37e8      	adds	r7, #232	; 0xe8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40011000 	.word	0x40011000
 8003124:	58024400 	.word	0x58024400
 8003128:	58020000 	.word	0x58020000

0800312c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b090      	sub	sp, #64	; 0x40
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	d827      	bhi.n	800318a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800313a:	2200      	movs	r2, #0
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	2036      	movs	r0, #54	; 0x36
 8003140:	f001 ffb6 	bl	80050b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003144:	2036      	movs	r0, #54	; 0x36
 8003146:	f001 ffcd 	bl	80050e4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800314a:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <HAL_InitTick+0xc4>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_InitTick+0xc8>)
 8003152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003156:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <HAL_InitTick+0xc8>)
 8003158:	f043 0310 	orr.w	r3, r3, #16
 800315c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_InitTick+0xc8>)
 8003162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800316e:	f107 0210 	add.w	r2, r7, #16
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f006 fd49 	bl	8009c10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <HAL_InitTick+0x6a>
 8003188:	e001      	b.n	800318e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e02b      	b.n	80031e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800318e:	f006 fd13 	bl	8009bb8 <HAL_RCC_GetPCLK1Freq>
 8003192:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003194:	e004      	b.n	80031a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003196:	f006 fd0f 	bl	8009bb8 <HAL_RCC_GetPCLK1Freq>
 800319a:	4603      	mov	r3, r0
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a2:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <HAL_InitTick+0xcc>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	0c9b      	lsrs	r3, r3, #18
 80031aa:	3b01      	subs	r3, #1
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_InitTick+0xd0>)
 80031b0:	4a13      	ldr	r2, [pc, #76]	; (8003200 <HAL_InitTick+0xd4>)
 80031b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_InitTick+0xd0>)
 80031b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80031bc:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <HAL_InitTick+0xd0>)
 80031be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_InitTick+0xd0>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <HAL_InitTick+0xd0>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80031ce:	480b      	ldr	r0, [pc, #44]	; (80031fc <HAL_InitTick+0xd0>)
 80031d0:	f009 febf 	bl	800cf52 <HAL_TIM_Base_Init>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80031da:	4808      	ldr	r0, [pc, #32]	; (80031fc <HAL_InitTick+0xd0>)
 80031dc:	f009 ffa8 	bl	800d130 <HAL_TIM_Base_Start_IT>
 80031e0:	4603      	mov	r3, r0
 80031e2:	e000      	b.n	80031e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3740      	adds	r7, #64	; 0x40
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	24000090 	.word	0x24000090
 80031f4:	58024400 	.word	0x58024400
 80031f8:	431bde83 	.word	0x431bde83
 80031fc:	24000be8 	.word	0x24000be8
 8003200:	40001000 	.word	0x40001000

08003204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003208:	e7fe      	b.n	8003208 <NMI_Handler+0x4>

0800320a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800320e:	e7fe      	b.n	800320e <HardFault_Handler+0x4>

08003210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003214:	e7fe      	b.n	8003214 <MemManage_Handler+0x4>

08003216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800321a:	e7fe      	b.n	800321a <BusFault_Handler+0x4>

0800321c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <UsageFault_Handler+0x4>

08003222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <DMA1_Stream0_IRQHandler+0x10>)
 8003236:	f003 fe93 	bl	8006f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	240001e4 	.word	0x240001e4

08003244 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <DMA1_Stream1_IRQHandler+0x10>)
 800324a:	f003 fe89 	bl	8006f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	2400025c 	.word	0x2400025c

08003258 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <DMA1_Stream5_IRQHandler+0x10>)
 800325e:	f003 fe7f 	bl	8006f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	240002e8 	.word	0x240002e8

0800326c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003270:	4802      	ldr	r0, [pc, #8]	; (800327c <TIM1_BRK_IRQHandler+0x10>)
 8003272:	f00a fa9f 	bl	800d7b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	240004e8 	.word	0x240004e8

08003280 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003284:	4802      	ldr	r0, [pc, #8]	; (8003290 <TIM1_UP_IRQHandler+0x10>)
 8003286:	f00a fa95 	bl	800d7b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	240004e8 	.word	0x240004e8

08003294 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003298:	4802      	ldr	r0, [pc, #8]	; (80032a4 <TIM1_TRG_COM_IRQHandler+0x10>)
 800329a:	f00a fa8b 	bl	800d7b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	240004e8 	.word	0x240004e8

080032a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <TIM1_CC_IRQHandler+0x10>)
 80032ae:	f00a fa81 	bl	800d7b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	240004e8 	.word	0x240004e8

080032bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <TIM2_IRQHandler+0x10>)
 80032c2:	f00a fa77 	bl	800d7b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	24000534 	.word	0x24000534

080032d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <TIM3_IRQHandler+0x10>)
 80032d6:	f00a fa6d 	bl	800d7b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	24000580 	.word	0x24000580

080032e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032e8:	4802      	ldr	r0, [pc, #8]	; (80032f4 <USART1_IRQHandler+0x10>)
 80032ea:	f00b fcf1 	bl	800ecd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	240005cc 	.word	0x240005cc

080032f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <TIM6_DAC_IRQHandler+0x20>)
 80032fe:	791b      	ldrb	r3, [r3, #4]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003306:	4804      	ldr	r0, [pc, #16]	; (8003318 <TIM6_DAC_IRQHandler+0x20>)
 8003308:	f002 f881 	bl	800540e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800330c:	4803      	ldr	r0, [pc, #12]	; (800331c <TIM6_DAC_IRQHandler+0x24>)
 800330e:	f00a fa51 	bl	800d7b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	240002d4 	.word	0x240002d4
 800331c:	24000be8 	.word	0x24000be8

08003320 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <ITM_SendChar+0x48>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a0e      	ldr	r2, [pc, #56]	; (8003368 <ITM_SendChar+0x48>)
 8003330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003334:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <ITM_SendChar+0x4c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a0c      	ldr	r2, [pc, #48]	; (800336c <ITM_SendChar+0x4c>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003342:	bf00      	nop
 8003344:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f8      	beq.n	8003344 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003352:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	6013      	str	r3, [r2, #0]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000edfc 	.word	0xe000edfc
 800336c:	e0000e00 	.word	0xe0000e00

08003370 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	e00a      	b.n	8003398 <_read+0x28>
		*ptr++ = __io_getchar();
 8003382:	f3af 8000 	nop.w
 8003386:	4601      	mov	r1, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	60ba      	str	r2, [r7, #8]
 800338e:	b2ca      	uxtb	r2, r1
 8003390:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	3301      	adds	r3, #1
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	429a      	cmp	r2, r3
 800339e:	dbf0      	blt.n	8003382 <_read+0x12>
	}

	return len;
 80033a0:	687b      	ldr	r3, [r7, #4]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e009      	b.n	80033d0 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	60ba      	str	r2, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ffab 	bl	8003320 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	3301      	adds	r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	dbf1      	blt.n	80033bc <_write+0x12>
	}
	return len;
 80033d8:	687b      	ldr	r3, [r7, #4]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <_close>:

int _close(int file) {
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <_fstat>:

int _fstat(int file, struct stat *st) {
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800340a:	605a      	str	r2, [r3, #4]
	return 0;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <_isatty>:

int _isatty(int file) {
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003422:	2301      	movs	r3, #1
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003460:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <_sbrk+0x64>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <_sbrk+0x64>)
 800346a:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <_sbrk+0x68>)
 800346c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <_sbrk+0x64>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	429a      	cmp	r2, r3
 800347a:	d207      	bcs.n	800348c <_sbrk+0x40>
		errno = ENOMEM;
 800347c:	f011 fc0e 	bl	8014c9c <__errno>
 8003480:	4603      	mov	r3, r0
 8003482:	220c      	movs	r2, #12
 8003484:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800348a:	e009      	b.n	80034a0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800348c:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <_sbrk+0x64>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <_sbrk+0x64>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	4a05      	ldr	r2, [pc, #20]	; (80034b0 <_sbrk+0x64>)
 800349c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800349e:	68fb      	ldr	r3, [r7, #12]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	24080000 	.word	0x24080000
 80034ac:	00000400 	.word	0x00000400
 80034b0:	24000c34 	.word	0x24000c34
 80034b4:	240055a0 	.word	0x240055a0

080034b8 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80034bc:	4b37      	ldr	r3, [pc, #220]	; (800359c <SystemInit+0xe4>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	4a36      	ldr	r2, [pc, #216]	; (800359c <SystemInit+0xe4>)
 80034c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80034cc:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <SystemInit+0xe8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d807      	bhi.n	80034e8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <SystemInit+0xe8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 030f 	bic.w	r3, r3, #15
 80034e0:	4a2f      	ldr	r2, [pc, #188]	; (80035a0 <SystemInit+0xe8>)
 80034e2:	f043 0307 	orr.w	r3, r3, #7
 80034e6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80034e8:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <SystemInit+0xec>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2d      	ldr	r2, [pc, #180]	; (80035a4 <SystemInit+0xec>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80034f4:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <SystemInit+0xec>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80034fa:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <SystemInit+0xec>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4929      	ldr	r1, [pc, #164]	; (80035a4 <SystemInit+0xec>)
 8003500:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <SystemInit+0xf0>)
 8003502:	4013      	ands	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003506:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <SystemInit+0xe8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003512:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <SystemInit+0xe8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 030f 	bic.w	r3, r3, #15
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <SystemInit+0xe8>)
 800351c:	f043 0307 	orr.w	r3, r3, #7
 8003520:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <SystemInit+0xec>)
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003528:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <SystemInit+0xec>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <SystemInit+0xec>)
 8003530:	2200      	movs	r2, #0
 8003532:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <SystemInit+0xec>)
 8003536:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <SystemInit+0xf4>)
 8003538:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <SystemInit+0xec>)
 800353c:	4a1c      	ldr	r2, [pc, #112]	; (80035b0 <SystemInit+0xf8>)
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003540:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <SystemInit+0xec>)
 8003542:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <SystemInit+0xfc>)
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003546:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <SystemInit+0xec>)
 8003548:	2200      	movs	r2, #0
 800354a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <SystemInit+0xec>)
 800354e:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <SystemInit+0xfc>)
 8003550:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <SystemInit+0xec>)
 8003554:	2200      	movs	r2, #0
 8003556:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <SystemInit+0xec>)
 800355a:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <SystemInit+0xfc>)
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <SystemInit+0xec>)
 8003560:	2200      	movs	r2, #0
 8003562:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <SystemInit+0xec>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a0e      	ldr	r2, [pc, #56]	; (80035a4 <SystemInit+0xec>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <SystemInit+0xec>)
 8003572:	2200      	movs	r2, #0
 8003574:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <SystemInit+0x100>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <SystemInit+0x104>)
 800357c:	4013      	ands	r3, r2
 800357e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003582:	d202      	bcs.n	800358a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003584:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <SystemInit+0x108>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <SystemInit+0x10c>)
 800358c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003590:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00
 80035a0:	52002000 	.word	0x52002000
 80035a4:	58024400 	.word	0x58024400
 80035a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80035ac:	02020200 	.word	0x02020200
 80035b0:	01ff0000 	.word	0x01ff0000
 80035b4:	01010280 	.word	0x01010280
 80035b8:	5c001000 	.word	0x5c001000
 80035bc:	ffff0000 	.word	0xffff0000
 80035c0:	51008108 	.word	0x51008108
 80035c4:	52004000 	.word	0x52004000

080035c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80035c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003600 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035cc:	f7ff ff74 	bl	80034b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035d0:	480c      	ldr	r0, [pc, #48]	; (8003604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035d2:	490d      	ldr	r1, [pc, #52]	; (8003608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035d4:	4a0d      	ldr	r2, [pc, #52]	; (800360c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d8:	e002      	b.n	80035e0 <LoopCopyDataInit>

080035da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035de:	3304      	adds	r3, #4

080035e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035e4:	d3f9      	bcc.n	80035da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035e8:	4c0a      	ldr	r4, [pc, #40]	; (8003614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035ec:	e001      	b.n	80035f2 <LoopFillZerobss>

080035ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f0:	3204      	adds	r2, #4

080035f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035f4:	d3fb      	bcc.n	80035ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035f6:	f011 fb57 	bl	8014ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035fa:	f7fd fc71 	bl	8000ee0 <main>
  bx  lr
 80035fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003600:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003604:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003608:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 800360c:	080161cc 	.word	0x080161cc
  ldr r2, =_sbss
 8003610:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8003614:	2400559c 	.word	0x2400559c

08003618 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003618:	e7fe      	b.n	8003618 <ADC3_IRQHandler>
	...

0800361c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003622:	2003      	movs	r0, #3
 8003624:	f001 fd39 	bl	800509a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003628:	f006 f91c 	bl	8009864 <HAL_RCC_GetSysClockFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <HAL_Init+0x68>)
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	4913      	ldr	r1, [pc, #76]	; (8003688 <HAL_Init+0x6c>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003646:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <HAL_Init+0x68>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <HAL_Init+0x6c>)
 8003650:	5cd3      	ldrb	r3, [r2, r3]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	4a0b      	ldr	r2, [pc, #44]	; (800368c <HAL_Init+0x70>)
 800365e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003660:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <HAL_Init+0x74>)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003666:	2005      	movs	r0, #5
 8003668:	f7ff fd60 	bl	800312c <HAL_InitTick>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e002      	b.n	800367c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003676:	f7ff f8fb 	bl	8002870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	58024400 	.word	0x58024400
 8003688:	080160e4 	.word	0x080160e4
 800368c:	2400008c 	.word	0x2400008c
 8003690:	24000088 	.word	0x24000088

08003694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_IncTick+0x20>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_IncTick+0x24>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4413      	add	r3, r2
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <HAL_IncTick+0x24>)
 80036a6:	6013      	str	r3, [r2, #0]
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	24000094 	.word	0x24000094
 80036b8:	24000c38 	.word	0x24000c38

080036bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return uwTick;
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <HAL_GetTick+0x14>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	24000c38 	.word	0x24000c38

080036d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_GetREVID+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0c1b      	lsrs	r3, r3, #16
}
 80036de:	4618      	mov	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	5c001000 	.word	0x5c001000

080036ec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	401a      	ands	r2, r3
 8003700:	4904      	ldr	r1, [pc, #16]	; (8003714 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	58000400 	.word	0x58000400

08003718 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3360      	adds	r3, #96	; 0x60
 8003792:	461a      	mov	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	431a      	orrs	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80037b4:	bf00      	nop
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	431a      	orrs	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	611a      	str	r2, [r3, #16]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3360      	adds	r3, #96	; 0x60
 8003802:	461a      	mov	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	431a      	orrs	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	601a      	str	r2, [r3, #0]
  }
}
 800381c:	bf00      	nop
 800381e:	371c      	adds	r7, #28
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800384e:	b480      	push	{r7}
 8003850:	b087      	sub	sp, #28
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3330      	adds	r3, #48	; 0x30
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	4413      	add	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	211f      	movs	r1, #31
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	401a      	ands	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	f003 011f 	and.w	r1, r3, #31
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	431a      	orrs	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f023 0203 	bic.w	r2, r3, #3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3314      	adds	r3, #20
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	0e5b      	lsrs	r3, r3, #25
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	4413      	add	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	0d1b      	lsrs	r3, r3, #20
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2107      	movs	r1, #7
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	401a      	ands	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	0d1b      	lsrs	r3, r3, #20
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	431a      	orrs	r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800393c:	43db      	mvns	r3, r3
 800393e:	401a      	ands	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0318 	and.w	r3, r3, #24
 8003946:	4908      	ldr	r1, [pc, #32]	; (8003968 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003948:	40d9      	lsrs	r1, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	400b      	ands	r3, r1
 800394e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003952:	431a      	orrs	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	000fffff 	.word	0x000fffff

0800396c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 031f 	and.w	r3, r3, #31
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003996:	4013      	ands	r3, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6093      	str	r3, [r2, #8]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	5fffffc0 	.word	0x5fffffc0

080039ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c0:	d101      	bne.n	80039c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	6fffffc0 	.word	0x6fffffc0

080039fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a10:	d101      	bne.n	8003a16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <LL_ADC_Enable+0x24>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	f043 0201 	orr.w	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	7fffffc0 	.word	0x7fffffc0

08003a4c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <LL_ADC_Disable+0x24>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	f043 0202 	orr.w	r2, r3, #2
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	7fffffc0 	.word	0x7fffffc0

08003a74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <LL_ADC_IsEnabled+0x18>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <LL_ADC_IsEnabled+0x1a>
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d101      	bne.n	8003ab2 <LL_ADC_IsDisableOngoing+0x18>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <LL_ADC_IsDisableOngoing+0x1a>
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <LL_ADC_REG_StartConversion+0x24>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	f043 0204 	orr.w	r2, r3, #4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	7fffffc0 	.word	0x7fffffc0

08003ae8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d101      	bne.n	8003b00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d101      	bne.n	8003b26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e18f      	b.n	8003e6e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7fe fea5 	bl	80028ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff19 	bl	80039ac <LL_ADC_IsDeepPowerDownEnabled>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d004      	beq.n	8003b8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff feff 	bl	8003988 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff ff34 	bl	80039fc <LL_ADC_IsInternalRegulatorEnabled>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d114      	bne.n	8003bc4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ff18 	bl	80039d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ba4:	4b87      	ldr	r3, [pc, #540]	; (8003dc4 <HAL_ADC_Init+0x290>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	099b      	lsrs	r3, r3, #6
 8003baa:	4a87      	ldr	r2, [pc, #540]	; (8003dc8 <HAL_ADC_Init+0x294>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bb6:	e002      	b.n	8003bbe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f9      	bne.n	8003bb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff17 	bl	80039fc <LL_ADC_IsInternalRegulatorEnabled>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10d      	bne.n	8003bf0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	f043 0210 	orr.w	r2, r3, #16
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	f043 0201 	orr.w	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff77 	bl	8003ae8 <LL_ADC_REG_IsConversionOngoing>
 8003bfa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 8129 	bne.w	8003e5c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f040 8125 	bne.w	8003e5c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c1a:	f043 0202 	orr.w	r2, r3, #2
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff ff24 	bl	8003a74 <LL_ADC_IsEnabled>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d136      	bne.n	8003ca0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a65      	ldr	r2, [pc, #404]	; (8003dcc <HAL_ADC_Init+0x298>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_ADC_Init+0x112>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a63      	ldr	r2, [pc, #396]	; (8003dd0 <HAL_ADC_Init+0x29c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d10e      	bne.n	8003c64 <HAL_ADC_Init+0x130>
 8003c46:	4861      	ldr	r0, [pc, #388]	; (8003dcc <HAL_ADC_Init+0x298>)
 8003c48:	f7ff ff14 	bl	8003a74 <LL_ADC_IsEnabled>
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	4860      	ldr	r0, [pc, #384]	; (8003dd0 <HAL_ADC_Init+0x29c>)
 8003c50:	f7ff ff10 	bl	8003a74 <LL_ADC_IsEnabled>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4323      	orrs	r3, r4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e008      	b.n	8003c76 <HAL_ADC_Init+0x142>
 8003c64:	485b      	ldr	r0, [pc, #364]	; (8003dd4 <HAL_ADC_Init+0x2a0>)
 8003c66:	f7ff ff05 	bl	8003a74 <LL_ADC_IsEnabled>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d012      	beq.n	8003ca0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a53      	ldr	r2, [pc, #332]	; (8003dcc <HAL_ADC_Init+0x298>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_ADC_Init+0x15a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a51      	ldr	r2, [pc, #324]	; (8003dd0 <HAL_ADC_Init+0x29c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_Init+0x15e>
 8003c8e:	4a52      	ldr	r2, [pc, #328]	; (8003dd8 <HAL_ADC_Init+0x2a4>)
 8003c90:	e000      	b.n	8003c94 <HAL_ADC_Init+0x160>
 8003c92:	4a52      	ldr	r2, [pc, #328]	; (8003ddc <HAL_ADC_Init+0x2a8>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f7ff fd3c 	bl	8003718 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003ca0:	f7ff fd18 	bl	80036d4 <HAL_GetREVID>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d914      	bls.n	8003cd8 <HAL_ADC_Init+0x1a4>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d110      	bne.n	8003cd8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	7d5b      	ldrb	r3, [r3, #21]
 8003cba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cc0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003cc6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7f1b      	ldrb	r3, [r3, #28]
 8003ccc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003cce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cd0:	f043 030c 	orr.w	r3, r3, #12
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	e00d      	b.n	8003cf4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7d5b      	ldrb	r3, [r3, #21]
 8003cdc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ce2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ce8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7f1b      	ldrb	r3, [r3, #28]
 8003cee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7f1b      	ldrb	r3, [r3, #28]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d106      	bne.n	8003d0a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	045b      	lsls	r3, r3, #17
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <HAL_ADC_Init+0x2ac>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	69b9      	ldr	r1, [r7, #24]
 8003d36:	430b      	orrs	r3, r1
 8003d38:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff fed2 	bl	8003ae8 <LL_ADC_REG_IsConversionOngoing>
 8003d44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff fedf 	bl	8003b0e <LL_ADC_INJ_IsConversionOngoing>
 8003d50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d15f      	bne.n	8003e18 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d15c      	bne.n	8003e18 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7d1b      	ldrb	r3, [r3, #20]
 8003d62:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <HAL_ADC_Init+0x2b0>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	69b9      	ldr	r1, [r7, #24]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d130      	bne.n	8003dec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_ADC_Init+0x2b4>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d9e:	3a01      	subs	r2, #1
 8003da0:	0411      	lsls	r1, r2, #16
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003da6:	4311      	orrs	r1, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003dac:	4311      	orrs	r1, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003db2:	430a      	orrs	r2, r1
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	611a      	str	r2, [r3, #16]
 8003dc0:	e01c      	b.n	8003dfc <HAL_ADC_Init+0x2c8>
 8003dc2:	bf00      	nop
 8003dc4:	24000088 	.word	0x24000088
 8003dc8:	053e2d63 	.word	0x053e2d63
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40022100 	.word	0x40022100
 8003dd4:	58026000 	.word	0x58026000
 8003dd8:	40022300 	.word	0x40022300
 8003ddc:	58026300 	.word	0x58026300
 8003de0:	fff0c003 	.word	0xfff0c003
 8003de4:	ffffbffc 	.word	0xffffbffc
 8003de8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fdec 	bl	80049f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10c      	bne.n	8003e3a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f023 010f 	bic.w	r1, r3, #15
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	1e5a      	subs	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
 8003e38:	e007      	b.n	8003e4a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 020f 	bic.w	r2, r2, #15
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	655a      	str	r2, [r3, #84]	; 0x54
 8003e5a:	e007      	b.n	8003e6c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e60:	f043 0210 	orr.w	r2, r3, #16
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3724      	adds	r7, #36	; 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd90      	pop	{r4, r7, pc}
 8003e76:	bf00      	nop

08003e78 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a55      	ldr	r2, [pc, #340]	; (8003fe0 <HAL_ADC_Start_DMA+0x168>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_ADC_Start_DMA+0x20>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a54      	ldr	r2, [pc, #336]	; (8003fe4 <HAL_ADC_Start_DMA+0x16c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <HAL_ADC_Start_DMA+0x24>
 8003e98:	4b53      	ldr	r3, [pc, #332]	; (8003fe8 <HAL_ADC_Start_DMA+0x170>)
 8003e9a:	e000      	b.n	8003e9e <HAL_ADC_Start_DMA+0x26>
 8003e9c:	4b53      	ldr	r3, [pc, #332]	; (8003fec <HAL_ADC_Start_DMA+0x174>)
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fd64 	bl	800396c <LL_ADC_GetMultimode>
 8003ea4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fe1c 	bl	8003ae8 <LL_ADC_REG_IsConversionOngoing>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f040 808c 	bne.w	8003fd0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_Start_DMA+0x4e>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e087      	b.n	8003fd6 <HAL_ADC_Start_DMA+0x15e>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d002      	beq.n	8003ee0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	2b09      	cmp	r3, #9
 8003ede:	d170      	bne.n	8003fc2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fc07 	bl	80046f4 <ADC_Enable>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d163      	bne.n	8003fb8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ef4:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <HAL_ADC_Start_DMA+0x178>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a37      	ldr	r2, [pc, #220]	; (8003fe4 <HAL_ADC_Start_DMA+0x16c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d002      	beq.n	8003f10 <HAL_ADC_Start_DMA+0x98>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	e000      	b.n	8003f12 <HAL_ADC_Start_DMA+0x9a>
 8003f10:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <HAL_ADC_Start_DMA+0x168>)
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d002      	beq.n	8003f20 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d105      	bne.n	8003f2c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d006      	beq.n	8003f46 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	f023 0206 	bic.w	r2, r3, #6
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	659a      	str	r2, [r3, #88]	; 0x58
 8003f44:	e002      	b.n	8003f4c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f50:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <HAL_ADC_Start_DMA+0x17c>)
 8003f52:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f58:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <HAL_ADC_Start_DMA+0x180>)
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	4a26      	ldr	r2, [pc, #152]	; (8003ffc <HAL_ADC_Start_DMA+0x184>)
 8003f62:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	221c      	movs	r2, #28
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0210 	orr.w	r2, r2, #16
 8003f82:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f7ff fc89 	bl	80038a6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3340      	adds	r3, #64	; 0x40
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f002 f80e 	bl	8005fc4 <HAL_DMA_Start_IT>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fd85 	bl	8003ac0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003fb6:	e00d      	b.n	8003fd4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003fc0:	e008      	b.n	8003fd4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003fce:	e001      	b.n	8003fd4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40022100 	.word	0x40022100
 8003fe8:	40022300 	.word	0x40022300
 8003fec:	58026300 	.word	0x58026300
 8003ff0:	fffff0fe 	.word	0xfffff0fe
 8003ff4:	080048c7 	.word	0x080048c7
 8003ff8:	0800499f 	.word	0x0800499f
 8003ffc:	080049bb 	.word	0x080049bb

08004000 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800403c:	b590      	push	{r4, r7, lr}
 800403e:	b0a1      	sub	sp, #132	; 0x84
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a65      	ldr	r2, [pc, #404]	; (80041ec <HAL_ADC_ConfigChannel+0x1b0>)
 8004056:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x2a>
 8004062:	2302      	movs	r3, #2
 8004064:	e32e      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x688>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fd38 	bl	8003ae8 <LL_ADC_REG_IsConversionOngoing>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	f040 8313 	bne.w	80046a6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	db2c      	blt.n	80040e2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004090:	2b00      	cmp	r3, #0
 8004092:	d108      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x6a>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	0e9b      	lsrs	r3, r3, #26
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	2201      	movs	r2, #1
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	e016      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x98>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ae:	fa93 f3a3 	rbit	r3, r3
 80040b2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80040be:	2320      	movs	r3, #32
 80040c0:	e003      	b.n	80040ca <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80040c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2201      	movs	r2, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	69d1      	ldr	r1, [r2, #28]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	430b      	orrs	r3, r1
 80040e0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7ff fbad 	bl	800384e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fcf5 	bl	8003ae8 <LL_ADC_REG_IsConversionOngoing>
 80040fe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fd02 	bl	8003b0e <LL_ADC_INJ_IsConversionOngoing>
 800410a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800410c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 80b8 	bne.w	8004284 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004116:	2b00      	cmp	r3, #0
 8004118:	f040 80b4 	bne.w	8004284 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	6819      	ldr	r1, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	461a      	mov	r2, r3
 800412a:	f7ff fbcf 	bl	80038cc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800412e:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <HAL_ADC_ConfigChannel+0x1b4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800413a:	d10b      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x118>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	089b      	lsrs	r3, r3, #2
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	e01d      	b.n	8004190 <HAL_ADC_ConfigChannel+0x154>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10b      	bne.n	800417a <HAL_ADC_ConfigChannel+0x13e>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	e00a      	b.n	8004190 <HAL_ADC_ConfigChannel+0x154>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	089b      	lsrs	r3, r3, #2
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b04      	cmp	r3, #4
 8004198:	d02c      	beq.n	80041f4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6919      	ldr	r1, [r3, #16]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a8:	f7ff faea 	bl	8003780 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6919      	ldr	r1, [r3, #16]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	7e5b      	ldrb	r3, [r3, #25]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d102      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x186>
 80041bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041c0:	e000      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x188>
 80041c2:	2300      	movs	r3, #0
 80041c4:	461a      	mov	r2, r3
 80041c6:	f7ff fb14 	bl	80037f2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6919      	ldr	r1, [r3, #16]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	7e1b      	ldrb	r3, [r3, #24]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x1a4>
 80041da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041de:	e000      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x1a6>
 80041e0:	2300      	movs	r3, #0
 80041e2:	461a      	mov	r2, r3
 80041e4:	f7ff faec 	bl	80037c0 <LL_ADC_SetDataRightShift>
 80041e8:	e04c      	b.n	8004284 <HAL_ADC_ConfigChannel+0x248>
 80041ea:	bf00      	nop
 80041ec:	47ff0000 	.word	0x47ff0000
 80041f0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	069b      	lsls	r3, r3, #26
 8004204:	429a      	cmp	r2, r3
 8004206:	d107      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800421e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	069b      	lsls	r3, r3, #26
 8004228:	429a      	cmp	r2, r3
 800422a:	d107      	bne.n	800423c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800423a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004242:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	069b      	lsls	r3, r3, #26
 800424c:	429a      	cmp	r2, r3
 800424e:	d107      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800425e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004266:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	069b      	lsls	r3, r3, #26
 8004270:	429a      	cmp	r2, r3
 8004272:	d107      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004282:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fbf3 	bl	8003a74 <LL_ADC_IsEnabled>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 8211 	bne.w	80046b8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6819      	ldr	r1, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f7ff fb3e 	bl	8003924 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4aa1      	ldr	r2, [pc, #644]	; (8004534 <HAL_ADC_ConfigChannel+0x4f8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	f040 812e 	bne.w	8004510 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10b      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x2a0>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0e9b      	lsrs	r3, r3, #26
 80042ca:	3301      	adds	r3, #1
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2b09      	cmp	r3, #9
 80042d2:	bf94      	ite	ls
 80042d4:	2301      	movls	r3, #1
 80042d6:	2300      	movhi	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e019      	b.n	8004310 <HAL_ADC_ConfigChannel+0x2d4>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80042ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80042ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80042f4:	2320      	movs	r3, #32
 80042f6:	e003      	b.n	8004300 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80042f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3301      	adds	r3, #1
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	2b09      	cmp	r3, #9
 8004308:	bf94      	ite	ls
 800430a:	2301      	movls	r3, #1
 800430c:	2300      	movhi	r3, #0
 800430e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004310:	2b00      	cmp	r3, #0
 8004312:	d079      	beq.n	8004408 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x2f4>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0e9b      	lsrs	r3, r3, #26
 8004326:	3301      	adds	r3, #1
 8004328:	069b      	lsls	r3, r3, #26
 800432a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800432e:	e015      	b.n	800435c <HAL_ADC_ConfigChannel+0x320>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004338:	fa93 f3a3 	rbit	r3, r3
 800433c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800433e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004340:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004348:	2320      	movs	r3, #32
 800434a:	e003      	b.n	8004354 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800434c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	3301      	adds	r3, #1
 8004356:	069b      	lsls	r3, r3, #26
 8004358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004364:	2b00      	cmp	r3, #0
 8004366:	d109      	bne.n	800437c <HAL_ADC_ConfigChannel+0x340>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	3301      	adds	r3, #1
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	e017      	b.n	80043ac <HAL_ADC_ConfigChannel+0x370>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004384:	fa93 f3a3 	rbit	r3, r3
 8004388:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800438a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800438e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004394:	2320      	movs	r3, #32
 8004396:	e003      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	2101      	movs	r1, #1
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	ea42 0103 	orr.w	r1, r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x396>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0e9b      	lsrs	r3, r3, #26
 80043c2:	3301      	adds	r3, #1
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	4613      	mov	r3, r2
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	4413      	add	r3, r2
 80043ce:	051b      	lsls	r3, r3, #20
 80043d0:	e018      	b.n	8004404 <HAL_ADC_ConfigChannel+0x3c8>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80043ea:	2320      	movs	r3, #32
 80043ec:	e003      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	fab3 f383 	clz	r3, r3
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	3301      	adds	r3, #1
 80043f8:	f003 021f 	and.w	r2, r3, #31
 80043fc:	4613      	mov	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4413      	add	r3, r2
 8004402:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004404:	430b      	orrs	r3, r1
 8004406:	e07e      	b.n	8004506 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x3e8>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	3301      	adds	r3, #1
 800441c:	069b      	lsls	r3, r3, #26
 800441e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004422:	e015      	b.n	8004450 <HAL_ADC_ConfigChannel+0x414>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800443c:	2320      	movs	r3, #32
 800443e:	e003      	b.n	8004448 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	3301      	adds	r3, #1
 800444a:	069b      	lsls	r3, r3, #26
 800444c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x434>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	0e9b      	lsrs	r3, r3, #26
 8004462:	3301      	adds	r3, #1
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2101      	movs	r1, #1
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	e017      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x464>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	fa93 f3a3 	rbit	r3, r3
 800447c:	61bb      	str	r3, [r7, #24]
  return result;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004488:	2320      	movs	r3, #32
 800448a:	e003      	b.n	8004494 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	fab3 f383 	clz	r3, r3
 8004492:	b2db      	uxtb	r3, r3
 8004494:	3301      	adds	r3, #1
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	2101      	movs	r1, #1
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	ea42 0103 	orr.w	r1, r2, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10d      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x490>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	0e9b      	lsrs	r3, r3, #26
 80044b6:	3301      	adds	r3, #1
 80044b8:	f003 021f 	and.w	r2, r3, #31
 80044bc:	4613      	mov	r3, r2
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	4413      	add	r3, r2
 80044c2:	3b1e      	subs	r3, #30
 80044c4:	051b      	lsls	r3, r3, #20
 80044c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044ca:	e01b      	b.n	8004504 <HAL_ADC_ConfigChannel+0x4c8>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	fa93 f3a3 	rbit	r3, r3
 80044d8:	60fb      	str	r3, [r7, #12]
  return result;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80044e4:	2320      	movs	r3, #32
 80044e6:	e003      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	fab3 f383 	clz	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	3301      	adds	r3, #1
 80044f2:	f003 021f 	and.w	r2, r3, #31
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	3b1e      	subs	r3, #30
 80044fe:	051b      	lsls	r3, r3, #20
 8004500:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004504:	430b      	orrs	r3, r1
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	6892      	ldr	r2, [r2, #8]
 800450a:	4619      	mov	r1, r3
 800450c:	f7ff f9de 	bl	80038cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f280 80cf 	bge.w	80046b8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a06      	ldr	r2, [pc, #24]	; (8004538 <HAL_ADC_ConfigChannel+0x4fc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_ADC_ConfigChannel+0x4f2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a04      	ldr	r2, [pc, #16]	; (800453c <HAL_ADC_ConfigChannel+0x500>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10a      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x508>
 800452e:	4b04      	ldr	r3, [pc, #16]	; (8004540 <HAL_ADC_ConfigChannel+0x504>)
 8004530:	e009      	b.n	8004546 <HAL_ADC_ConfigChannel+0x50a>
 8004532:	bf00      	nop
 8004534:	47ff0000 	.word	0x47ff0000
 8004538:	40022000 	.word	0x40022000
 800453c:	40022100 	.word	0x40022100
 8004540:	40022300 	.word	0x40022300
 8004544:	4b61      	ldr	r3, [pc, #388]	; (80046cc <HAL_ADC_ConfigChannel+0x690>)
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff f90c 	bl	8003764 <LL_ADC_GetCommonPathInternalCh>
 800454c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a5f      	ldr	r2, [pc, #380]	; (80046d0 <HAL_ADC_ConfigChannel+0x694>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d004      	beq.n	8004562 <HAL_ADC_ConfigChannel+0x526>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a5d      	ldr	r2, [pc, #372]	; (80046d4 <HAL_ADC_ConfigChannel+0x698>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d10e      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x544>
 8004562:	485b      	ldr	r0, [pc, #364]	; (80046d0 <HAL_ADC_ConfigChannel+0x694>)
 8004564:	f7ff fa86 	bl	8003a74 <LL_ADC_IsEnabled>
 8004568:	4604      	mov	r4, r0
 800456a:	485a      	ldr	r0, [pc, #360]	; (80046d4 <HAL_ADC_ConfigChannel+0x698>)
 800456c:	f7ff fa82 	bl	8003a74 <LL_ADC_IsEnabled>
 8004570:	4603      	mov	r3, r0
 8004572:	4323      	orrs	r3, r4
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e008      	b.n	8004592 <HAL_ADC_ConfigChannel+0x556>
 8004580:	4855      	ldr	r0, [pc, #340]	; (80046d8 <HAL_ADC_ConfigChannel+0x69c>)
 8004582:	f7ff fa77 	bl	8003a74 <LL_ADC_IsEnabled>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d07d      	beq.n	8004692 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a50      	ldr	r2, [pc, #320]	; (80046dc <HAL_ADC_ConfigChannel+0x6a0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d130      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x5c6>
 80045a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d12b      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a4a      	ldr	r2, [pc, #296]	; (80046d8 <HAL_ADC_ConfigChannel+0x69c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	f040 8081 	bne.w	80046b8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a45      	ldr	r2, [pc, #276]	; (80046d0 <HAL_ADC_ConfigChannel+0x694>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_ADC_ConfigChannel+0x58e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a43      	ldr	r2, [pc, #268]	; (80046d4 <HAL_ADC_ConfigChannel+0x698>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d101      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x592>
 80045ca:	4a45      	ldr	r2, [pc, #276]	; (80046e0 <HAL_ADC_ConfigChannel+0x6a4>)
 80045cc:	e000      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x594>
 80045ce:	4a3f      	ldr	r2, [pc, #252]	; (80046cc <HAL_ADC_ConfigChannel+0x690>)
 80045d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7ff f8b0 	bl	800373e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045de:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <HAL_ADC_ConfigChannel+0x6a8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	099b      	lsrs	r3, r3, #6
 80045e4:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <HAL_ADC_ConfigChannel+0x6ac>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	099b      	lsrs	r3, r3, #6
 80045ec:	3301      	adds	r3, #1
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045f2:	e002      	b.n	80045fa <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f9      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004600:	e05a      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a39      	ldr	r2, [pc, #228]	; (80046ec <HAL_ADC_ConfigChannel+0x6b0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d11e      	bne.n	800464a <HAL_ADC_ConfigChannel+0x60e>
 800460c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d119      	bne.n	800464a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2f      	ldr	r2, [pc, #188]	; (80046d8 <HAL_ADC_ConfigChannel+0x69c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d14b      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <HAL_ADC_ConfigChannel+0x694>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_ADC_ConfigChannel+0x5f8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a29      	ldr	r2, [pc, #164]	; (80046d4 <HAL_ADC_ConfigChannel+0x698>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d101      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x5fc>
 8004634:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004636:	e000      	b.n	800463a <HAL_ADC_ConfigChannel+0x5fe>
 8004638:	4a24      	ldr	r2, [pc, #144]	; (80046cc <HAL_ADC_ConfigChannel+0x690>)
 800463a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f7ff f87b 	bl	800373e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004648:	e036      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a28      	ldr	r2, [pc, #160]	; (80046f0 <HAL_ADC_ConfigChannel+0x6b4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d131      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x67c>
 8004654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d12c      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <HAL_ADC_ConfigChannel+0x69c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d127      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a18      	ldr	r2, [pc, #96]	; (80046d0 <HAL_ADC_ConfigChannel+0x694>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_ADC_ConfigChannel+0x640>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a17      	ldr	r2, [pc, #92]	; (80046d4 <HAL_ADC_ConfigChannel+0x698>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x644>
 800467c:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <HAL_ADC_ConfigChannel+0x6a4>)
 800467e:	e000      	b.n	8004682 <HAL_ADC_ConfigChannel+0x646>
 8004680:	4a12      	ldr	r2, [pc, #72]	; (80046cc <HAL_ADC_ConfigChannel+0x690>)
 8004682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004684:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f7ff f857 	bl	800373e <LL_ADC_SetCommonPathInternalCh>
 8004690:	e012      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80046a4:	e008      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	f043 0220 	orr.w	r2, r3, #32
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80046c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3784      	adds	r7, #132	; 0x84
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd90      	pop	{r4, r7, pc}
 80046cc:	58026300 	.word	0x58026300
 80046d0:	40022000 	.word	0x40022000
 80046d4:	40022100 	.word	0x40022100
 80046d8:	58026000 	.word	0x58026000
 80046dc:	cb840000 	.word	0xcb840000
 80046e0:	40022300 	.word	0x40022300
 80046e4:	24000088 	.word	0x24000088
 80046e8:	053e2d63 	.word	0x053e2d63
 80046ec:	c7520000 	.word	0xc7520000
 80046f0:	cfb80000 	.word	0xcfb80000

080046f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff f9b7 	bl	8003a74 <LL_ADC_IsEnabled>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d16e      	bne.n	80047ea <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	4b38      	ldr	r3, [pc, #224]	; (80047f4 <ADC_Enable+0x100>)
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00d      	beq.n	8004736 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	f043 0210 	orr.w	r2, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e05a      	b.n	80047ec <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff f972 	bl	8003a24 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004740:	f7fe ffbc 	bl	80036bc <HAL_GetTick>
 8004744:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <ADC_Enable+0x104>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <ADC_Enable+0x66>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a29      	ldr	r2, [pc, #164]	; (80047fc <ADC_Enable+0x108>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d101      	bne.n	800475e <ADC_Enable+0x6a>
 800475a:	4b29      	ldr	r3, [pc, #164]	; (8004800 <ADC_Enable+0x10c>)
 800475c:	e000      	b.n	8004760 <ADC_Enable+0x6c>
 800475e:	4b29      	ldr	r3, [pc, #164]	; (8004804 <ADC_Enable+0x110>)
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff f903 	bl	800396c <LL_ADC_GetMultimode>
 8004766:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <ADC_Enable+0x108>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d002      	beq.n	8004778 <ADC_Enable+0x84>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	e000      	b.n	800477a <ADC_Enable+0x86>
 8004778:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <ADC_Enable+0x104>)
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	4293      	cmp	r3, r2
 8004780:	d02c      	beq.n	80047dc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d130      	bne.n	80047ea <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004788:	e028      	b.n	80047dc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff f970 	bl	8003a74 <LL_ADC_IsEnabled>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff f940 	bl	8003a24 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047a4:	f7fe ff8a 	bl	80036bc <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d914      	bls.n	80047dc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d00d      	beq.n	80047dc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	f043 0210 	orr.w	r2, r3, #16
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	f043 0201 	orr.w	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e007      	b.n	80047ec <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d1cf      	bne.n	800478a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	8000003f 	.word	0x8000003f
 80047f8:	40022000 	.word	0x40022000
 80047fc:	40022100 	.word	0x40022100
 8004800:	40022300 	.word	0x40022300
 8004804:	58026300 	.word	0x58026300

08004808 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff f940 	bl	8003a9a <LL_ADC_IsDisableOngoing>
 800481a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff f927 	bl	8003a74 <LL_ADC_IsEnabled>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d047      	beq.n	80048bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d144      	bne.n	80048bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 030d 	and.w	r3, r3, #13
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10c      	bne.n	800485a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff f901 	bl	8003a4c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2203      	movs	r2, #3
 8004850:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004852:	f7fe ff33 	bl	80036bc <HAL_GetTick>
 8004856:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004858:	e029      	b.n	80048ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	f043 0210 	orr.w	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	f043 0201 	orr.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e023      	b.n	80048be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004876:	f7fe ff21 	bl	80036bc <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d914      	bls.n	80048ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00d      	beq.n	80048ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004896:	f043 0210 	orr.w	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e007      	b.n	80048be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1dc      	bne.n	8004876 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d14b      	bne.n	8004978 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d021      	beq.n	800493e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe ff92 	bl	8003828 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d032      	beq.n	8004970 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d12b      	bne.n	8004970 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11f      	bne.n	8004970 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004934:	f043 0201 	orr.w	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
 800493c:	e018      	b.n	8004970 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d111      	bne.n	8004970 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f043 0201 	orr.w	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff fb45 	bl	8004000 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004976:	e00e      	b.n	8004996 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fb4f 	bl	8004028 <HAL_ADC_ErrorCallback>
}
 800498a:	e004      	b.n	8004996 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
}
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7ff fb31 	bl	8004014 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d8:	f043 0204 	orr.w	r2, r3, #4
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f7ff fb21 	bl	8004028 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a7a      	ldr	r2, [pc, #488]	; (8004be8 <ADC_ConfigureBoostMode+0x1f8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <ADC_ConfigureBoostMode+0x1c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a79      	ldr	r2, [pc, #484]	; (8004bec <ADC_ConfigureBoostMode+0x1fc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d109      	bne.n	8004a20 <ADC_ConfigureBoostMode+0x30>
 8004a0c:	4b78      	ldr	r3, [pc, #480]	; (8004bf0 <ADC_ConfigureBoostMode+0x200>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e008      	b.n	8004a32 <ADC_ConfigureBoostMode+0x42>
 8004a20:	4b74      	ldr	r3, [pc, #464]	; (8004bf4 <ADC_ConfigureBoostMode+0x204>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01c      	beq.n	8004a70 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a36:	f005 f88f 	bl	8009b58 <HAL_RCC_GetHCLKFreq>
 8004a3a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a44:	d010      	beq.n	8004a68 <ADC_ConfigureBoostMode+0x78>
 8004a46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a4a:	d873      	bhi.n	8004b34 <ADC_ConfigureBoostMode+0x144>
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a50:	d002      	beq.n	8004a58 <ADC_ConfigureBoostMode+0x68>
 8004a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a56:	d16d      	bne.n	8004b34 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	60fb      	str	r3, [r7, #12]
        break;
 8004a66:	e068      	b.n	8004b3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	089b      	lsrs	r3, r3, #2
 8004a6c:	60fb      	str	r3, [r7, #12]
        break;
 8004a6e:	e064      	b.n	8004b3a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004a70:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	f006 fb16 	bl	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a7c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a86:	d051      	beq.n	8004b2c <ADC_ConfigureBoostMode+0x13c>
 8004a88:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a8c:	d854      	bhi.n	8004b38 <ADC_ConfigureBoostMode+0x148>
 8004a8e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a92:	d047      	beq.n	8004b24 <ADC_ConfigureBoostMode+0x134>
 8004a94:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a98:	d84e      	bhi.n	8004b38 <ADC_ConfigureBoostMode+0x148>
 8004a9a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a9e:	d03d      	beq.n	8004b1c <ADC_ConfigureBoostMode+0x12c>
 8004aa0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004aa4:	d848      	bhi.n	8004b38 <ADC_ConfigureBoostMode+0x148>
 8004aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aaa:	d033      	beq.n	8004b14 <ADC_ConfigureBoostMode+0x124>
 8004aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ab0:	d842      	bhi.n	8004b38 <ADC_ConfigureBoostMode+0x148>
 8004ab2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ab6:	d029      	beq.n	8004b0c <ADC_ConfigureBoostMode+0x11c>
 8004ab8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004abc:	d83c      	bhi.n	8004b38 <ADC_ConfigureBoostMode+0x148>
 8004abe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ac2:	d01a      	beq.n	8004afa <ADC_ConfigureBoostMode+0x10a>
 8004ac4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ac8:	d836      	bhi.n	8004b38 <ADC_ConfigureBoostMode+0x148>
 8004aca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ace:	d014      	beq.n	8004afa <ADC_ConfigureBoostMode+0x10a>
 8004ad0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ad4:	d830      	bhi.n	8004b38 <ADC_ConfigureBoostMode+0x148>
 8004ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ada:	d00e      	beq.n	8004afa <ADC_ConfigureBoostMode+0x10a>
 8004adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae0:	d82a      	bhi.n	8004b38 <ADC_ConfigureBoostMode+0x148>
 8004ae2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ae6:	d008      	beq.n	8004afa <ADC_ConfigureBoostMode+0x10a>
 8004ae8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004aec:	d824      	bhi.n	8004b38 <ADC_ConfigureBoostMode+0x148>
 8004aee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004af2:	d002      	beq.n	8004afa <ADC_ConfigureBoostMode+0x10a>
 8004af4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004af8:	d11e      	bne.n	8004b38 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	0c9b      	lsrs	r3, r3, #18
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	60fb      	str	r3, [r7, #12]
        break;
 8004b0a:	e016      	b.n	8004b3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	60fb      	str	r3, [r7, #12]
        break;
 8004b12:	e012      	b.n	8004b3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	60fb      	str	r3, [r7, #12]
        break;
 8004b1a:	e00e      	b.n	8004b3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	099b      	lsrs	r3, r3, #6
 8004b20:	60fb      	str	r3, [r7, #12]
        break;
 8004b22:	e00a      	b.n	8004b3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	09db      	lsrs	r3, r3, #7
 8004b28:	60fb      	str	r3, [r7, #12]
        break;
 8004b2a:	e006      	b.n	8004b3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	60fb      	str	r3, [r7, #12]
        break;
 8004b32:	e002      	b.n	8004b3a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b34:	bf00      	nop
 8004b36:	e000      	b.n	8004b3a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b38:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004b3a:	f7fe fdcb 	bl	80036d4 <HAL_GetREVID>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d815      	bhi.n	8004b74 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a2b      	ldr	r2, [pc, #172]	; (8004bf8 <ADC_ConfigureBoostMode+0x208>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d908      	bls.n	8004b62 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b60:	e03e      	b.n	8004be0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b70:	609a      	str	r2, [r3, #8]
}
 8004b72:	e035      	b.n	8004be0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <ADC_ConfigureBoostMode+0x20c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d808      	bhi.n	8004b94 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b90:	609a      	str	r2, [r3, #8]
}
 8004b92:	e025      	b.n	8004be0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <ADC_ConfigureBoostMode+0x210>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d80a      	bhi.n	8004bb2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	e016      	b.n	8004be0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <ADC_ConfigureBoostMode+0x214>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d80a      	bhi.n	8004bd0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bcc:	609a      	str	r2, [r3, #8]
}
 8004bce:	e007      	b.n	8004be0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004bde:	609a      	str	r2, [r3, #8]
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40022000 	.word	0x40022000
 8004bec:	40022100 	.word	0x40022100
 8004bf0:	40022300 	.word	0x40022300
 8004bf4:	58026300 	.word	0x58026300
 8004bf8:	01312d00 	.word	0x01312d00
 8004bfc:	005f5e10 	.word	0x005f5e10
 8004c00:	00bebc20 	.word	0x00bebc20
 8004c04:	017d7840 	.word	0x017d7840

08004c08 <LL_ADC_IsEnabled>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <LL_ADC_IsEnabled+0x18>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <LL_ADC_IsEnabled+0x1a>
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <LL_ADC_StartCalibration>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <LL_ADC_StartCalibration+0x38>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c50:	430a      	orrs	r2, r1
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	3ffeffc0 	.word	0x3ffeffc0

08004c6c <LL_ADC_IsCalibrationOnGoing>:
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c80:	d101      	bne.n	8004c86 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d101      	bne.n	8004cac <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_ADCEx_Calibration_Start+0x1e>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e04c      	b.n	8004d74 <HAL_ADCEx_Calibration_Start+0xb8>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff fd90 	bl	8004808 <ADC_Disable>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d135      	bne.n	8004d5e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cf6:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	f043 0202 	orr.w	r2, r3, #2
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff ff90 	bl	8004c30 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d10:	e014      	b.n	8004d3c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	3301      	adds	r3, #1
 8004d16:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d30d      	bcc.n	8004d3c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	f023 0312 	bic.w	r3, r3, #18
 8004d28:	f043 0210 	orr.w	r2, r3, #16
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e01b      	b.n	8004d74 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff93 	bl	8004c6c <LL_ADC_IsCalibrationOnGoing>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e2      	bne.n	8004d12 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	f023 0303 	bic.w	r3, r3, #3
 8004d54:	f043 0201 	orr.w	r2, r3, #1
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d5c:	e005      	b.n	8004d6a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f043 0210 	orr.w	r2, r3, #16
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	ffffeefd 	.word	0xffffeefd
 8004d80:	25c3f800 	.word	0x25c3f800

08004d84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d84:	b590      	push	{r4, r7, lr}
 8004d86:	b09f      	sub	sp, #124	; 0x7c
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e0be      	b.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004daa:	2300      	movs	r3, #0
 8004dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a5c      	ldr	r2, [pc, #368]	; (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d102      	bne.n	8004dc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004dbc:	4b5b      	ldr	r3, [pc, #364]	; (8004f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	e001      	b.n	8004dc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10b      	bne.n	8004de4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd0:	f043 0220 	orr.w	r2, r3, #32
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e09d      	b.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff ff54 	bl	8004c94 <LL_ADC_REG_IsConversionOngoing>
 8004dec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff ff4e 	bl	8004c94 <LL_ADC_REG_IsConversionOngoing>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d17f      	bne.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d17c      	bne.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a47      	ldr	r2, [pc, #284]	; (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a46      	ldr	r2, [pc, #280]	; (8004f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d101      	bne.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004e18:	4b45      	ldr	r3, [pc, #276]	; (8004f30 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e1a:	e000      	b.n	8004e1e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004e1c:	4b45      	ldr	r3, [pc, #276]	; (8004f34 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e1e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d039      	beq.n	8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e38:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a3a      	ldr	r2, [pc, #232]	; (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a38      	ldr	r2, [pc, #224]	; (8004f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10e      	bne.n	8004e6c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004e4e:	4836      	ldr	r0, [pc, #216]	; (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e50:	f7ff feda 	bl	8004c08 <LL_ADC_IsEnabled>
 8004e54:	4604      	mov	r4, r0
 8004e56:	4835      	ldr	r0, [pc, #212]	; (8004f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e58:	f7ff fed6 	bl	8004c08 <LL_ADC_IsEnabled>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4323      	orrs	r3, r4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e008      	b.n	8004e7e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004e6c:	4832      	ldr	r0, [pc, #200]	; (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e6e:	f7ff fecb 	bl	8004c08 <LL_ADC_IsEnabled>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d047      	beq.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	6811      	ldr	r1, [r2, #0]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	6892      	ldr	r2, [r2, #8]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	431a      	orrs	r2, r3
 8004e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e98:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e9a:	e03a      	b.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1e      	ldr	r2, [pc, #120]	; (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d10e      	bne.n	8004eda <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004ebc:	481a      	ldr	r0, [pc, #104]	; (8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ebe:	f7ff fea3 	bl	8004c08 <LL_ADC_IsEnabled>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4819      	ldr	r0, [pc, #100]	; (8004f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ec6:	f7ff fe9f 	bl	8004c08 <LL_ADC_IsEnabled>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4323      	orrs	r3, r4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bf0c      	ite	eq
 8004ed2:	2301      	moveq	r3, #1
 8004ed4:	2300      	movne	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e008      	b.n	8004eec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004eda:	4817      	ldr	r0, [pc, #92]	; (8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004edc:	f7ff fe94 	bl	8004c08 <LL_ADC_IsEnabled>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2301      	moveq	r3, #1
 8004ee8:	2300      	movne	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004efa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004efc:	e009      	b.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	f043 0220 	orr.w	r2, r3, #32
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004f10:	e000      	b.n	8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f12:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f1c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	377c      	adds	r7, #124	; 0x7c
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd90      	pop	{r4, r7, pc}
 8004f28:	40022000 	.word	0x40022000
 8004f2c:	40022100 	.word	0x40022100
 8004f30:	40022300 	.word	0x40022300
 8004f34:	58026300 	.word	0x58026300
 8004f38:	58026000 	.word	0x58026000
 8004f3c:	fffff0e0 	.word	0xfffff0e0

08004f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <__NVIC_SetPriorityGrouping+0x40>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <__NVIC_SetPriorityGrouping+0x44>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f6e:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <__NVIC_SetPriorityGrouping+0x40>)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	60d3      	str	r3, [r2, #12]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	e000ed00 	.word	0xe000ed00
 8004f84:	05fa0000 	.word	0x05fa0000

08004f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f8c:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	0a1b      	lsrs	r3, r3, #8
 8004f92:	f003 0307 	and.w	r3, r3, #7
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	e000ed00 	.word	0xe000ed00

08004fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	db0b      	blt.n	8004fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	f003 021f 	and.w	r2, r3, #31
 8004fbc:	4907      	ldr	r1, [pc, #28]	; (8004fdc <__NVIC_EnableIRQ+0x38>)
 8004fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	e000e100 	.word	0xe000e100

08004fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	6039      	str	r1, [r7, #0]
 8004fea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	db0a      	blt.n	800500a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	490c      	ldr	r1, [pc, #48]	; (800502c <__NVIC_SetPriority+0x4c>)
 8004ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ffe:	0112      	lsls	r2, r2, #4
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	440b      	add	r3, r1
 8005004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005008:	e00a      	b.n	8005020 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	b2da      	uxtb	r2, r3
 800500e:	4908      	ldr	r1, [pc, #32]	; (8005030 <__NVIC_SetPriority+0x50>)
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	3b04      	subs	r3, #4
 8005018:	0112      	lsls	r2, r2, #4
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	440b      	add	r3, r1
 800501e:	761a      	strb	r2, [r3, #24]
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	e000e100 	.word	0xe000e100
 8005030:	e000ed00 	.word	0xe000ed00

08005034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005034:	b480      	push	{r7}
 8005036:	b089      	sub	sp, #36	; 0x24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f1c3 0307 	rsb	r3, r3, #7
 800504e:	2b04      	cmp	r3, #4
 8005050:	bf28      	it	cs
 8005052:	2304      	movcs	r3, #4
 8005054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3304      	adds	r3, #4
 800505a:	2b06      	cmp	r3, #6
 800505c:	d902      	bls.n	8005064 <NVIC_EncodePriority+0x30>
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3b03      	subs	r3, #3
 8005062:	e000      	b.n	8005066 <NVIC_EncodePriority+0x32>
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	43da      	mvns	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	401a      	ands	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800507c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	fa01 f303 	lsl.w	r3, r1, r3
 8005086:	43d9      	mvns	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800508c:	4313      	orrs	r3, r2
         );
}
 800508e:	4618      	mov	r0, r3
 8005090:	3724      	adds	r7, #36	; 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff ff4c 	bl	8004f40 <__NVIC_SetPriorityGrouping>
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050be:	f7ff ff63 	bl	8004f88 <__NVIC_GetPriorityGrouping>
 80050c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	6978      	ldr	r0, [r7, #20]
 80050ca:	f7ff ffb3 	bl	8005034 <NVIC_EncodePriority>
 80050ce:	4602      	mov	r2, r0
 80050d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ff82 	bl	8004fe0 <__NVIC_SetPriority>
}
 80050dc:	bf00      	nop
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ff56 	bl	8004fa4 <__NVIC_EnableIRQ>
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e014      	b.n	800513c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	791b      	ldrb	r3, [r3, #4]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d105      	bne.n	8005128 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fd fcdc 	bl	8002ae0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e046      	b.n	80051e6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	795b      	ldrb	r3, [r3, #5]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_DAC_Start+0x20>
 8005160:	2302      	movs	r3, #2
 8005162:	e040      	b.n	80051e6 <HAL_DAC_Start+0xa2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6819      	ldr	r1, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2201      	movs	r2, #1
 800517e:	409a      	lsls	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10f      	bne.n	80051ae <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005198:	2b02      	cmp	r3, #2
 800519a:	d11d      	bne.n	80051d8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	605a      	str	r2, [r3, #4]
 80051ac:	e014      	b.n	80051d8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2102      	movs	r1, #2
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d107      	bne.n	80051d8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0202 	orr.w	r2, r2, #2
 80051d6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0a2      	b.n	8005352 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	795b      	ldrb	r3, [r3, #5]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_DAC_Start_DMA+0x24>
 8005214:	2302      	movs	r3, #2
 8005216:	e09c      	b.n	8005352 <HAL_DAC_Start_DMA+0x15e>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2202      	movs	r2, #2
 8005222:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d129      	bne.n	800527e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	4a4b      	ldr	r2, [pc, #300]	; (800535c <HAL_DAC_Start_DMA+0x168>)
 8005230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	4a4a      	ldr	r2, [pc, #296]	; (8005360 <HAL_DAC_Start_DMA+0x16c>)
 8005238:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	4a49      	ldr	r2, [pc, #292]	; (8005364 <HAL_DAC_Start_DMA+0x170>)
 8005240:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005250:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_DAC_Start_DMA+0x6c>
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	2b04      	cmp	r3, #4
 800525c:	d005      	beq.n	800526a <HAL_DAC_Start_DMA+0x76>
 800525e:	e009      	b.n	8005274 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3308      	adds	r3, #8
 8005266:	613b      	str	r3, [r7, #16]
        break;
 8005268:	e033      	b.n	80052d2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	613b      	str	r3, [r7, #16]
        break;
 8005272:	e02e      	b.n	80052d2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3310      	adds	r3, #16
 800527a:	613b      	str	r3, [r7, #16]
        break;
 800527c:	e029      	b.n	80052d2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	4a39      	ldr	r2, [pc, #228]	; (8005368 <HAL_DAC_Start_DMA+0x174>)
 8005284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	4a38      	ldr	r2, [pc, #224]	; (800536c <HAL_DAC_Start_DMA+0x178>)
 800528c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	4a37      	ldr	r2, [pc, #220]	; (8005370 <HAL_DAC_Start_DMA+0x17c>)
 8005294:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80052a4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_DAC_Start_DMA+0xc0>
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d005      	beq.n	80052be <HAL_DAC_Start_DMA+0xca>
 80052b2:	e009      	b.n	80052c8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3314      	adds	r3, #20
 80052ba:	613b      	str	r3, [r7, #16]
        break;
 80052bc:	e009      	b.n	80052d2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3318      	adds	r3, #24
 80052c4:	613b      	str	r3, [r7, #16]
        break;
 80052c6:	e004      	b.n	80052d2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	331c      	adds	r3, #28
 80052ce:	613b      	str	r3, [r7, #16]
        break;
 80052d0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d111      	bne.n	80052fc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6898      	ldr	r0, [r3, #8]
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	f000 fe67 	bl	8005fc4 <HAL_DMA_Start_IT>
 80052f6:	4603      	mov	r3, r0
 80052f8:	75fb      	strb	r3, [r7, #23]
 80052fa:	e010      	b.n	800531e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800530a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68d8      	ldr	r0, [r3, #12]
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	f000 fe55 	bl	8005fc4 <HAL_DMA_Start_IT>
 800531a:	4603      	mov	r3, r0
 800531c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10c      	bne.n	8005344 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6819      	ldr	r1, [r3, #0]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2201      	movs	r2, #1
 8005338:	409a      	lsls	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e005      	b.n	8005350 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f043 0204 	orr.w	r2, r3, #4
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005350:	7dfb      	ldrb	r3, [r7, #23]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	080057e5 	.word	0x080057e5
 8005360:	08005807 	.word	0x08005807
 8005364:	08005823 	.word	0x08005823
 8005368:	080058a1 	.word	0x080058a1
 800536c:	080058c3 	.word	0x080058c3
 8005370:	080058df 	.word	0x080058df

08005374 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e03e      	b.n	8005406 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6819      	ldr	r1, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	43da      	mvns	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	400a      	ands	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2201      	movs	r2, #1
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	43da      	mvns	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	400a      	ands	r2, r1
 80053c0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10d      	bne.n	80053e4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 f863 	bl	8006498 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e00c      	b.n	80053fe <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f001 f855 	bl	8006498 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80053fc:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01d      	beq.n	800546c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d018      	beq.n	800546c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2204      	movs	r2, #4
 800543e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f043 0201 	orr.w	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005454:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005464:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f86f 	bl	800554a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01d      	beq.n	80054b2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d018      	beq.n	80054b2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2204      	movs	r2, #4
 8005484:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f043 0202 	orr.w	r2, r3, #2
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800549a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80054aa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f9ed 	bl	800588c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e015      	b.n	8005502 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d105      	bne.n	80054ee <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4413      	add	r3, r2
 80054e8:	3308      	adds	r3, #8
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e004      	b.n	80054f8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4413      	add	r3, r2
 80054f4:	3314      	adds	r3, #20
 80054f6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	461a      	mov	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
	...

08005560 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_DAC_ConfigChannel+0x1e>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e12a      	b.n	80057d8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	795b      	ldrb	r3, [r3, #5]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_DAC_ConfigChannel+0x2e>
 800558a:	2302      	movs	r3, #2
 800558c:	e124      	b.n	80057d8 <HAL_DAC_ConfigChannel+0x278>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2202      	movs	r2, #2
 8005598:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d17a      	bne.n	8005698 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80055a2:	f7fe f88b 	bl	80036bc <HAL_GetTick>
 80055a6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d13d      	bne.n	800562a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055ae:	e018      	b.n	80055e2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80055b0:	f7fe f884 	bl	80036bc <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d911      	bls.n	80055e2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c4:	4b86      	ldr	r3, [pc, #536]	; (80057e0 <HAL_DAC_ConfigChannel+0x280>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f043 0208 	orr.w	r2, r3, #8
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2203      	movs	r2, #3
 80055dc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e0fa      	b.n	80057d8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e8:	4b7d      	ldr	r3, [pc, #500]	; (80057e0 <HAL_DAC_ConfigChannel+0x280>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1df      	bne.n	80055b0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	6992      	ldr	r2, [r2, #24]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
 80055fa:	e020      	b.n	800563e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80055fc:	f7fe f85e 	bl	80036bc <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b01      	cmp	r3, #1
 8005608:	d90f      	bls.n	800562a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005610:	2b00      	cmp	r3, #0
 8005612:	da0a      	bge.n	800562a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f043 0208 	orr.w	r2, r3, #8
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2203      	movs	r2, #3
 8005624:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e0d6      	b.n	80057d8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005630:	2b00      	cmp	r3, #0
 8005632:	dbe3      	blt.n	80055fc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	6992      	ldr	r2, [r2, #24]
 800563c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800564e:	fa01 f303 	lsl.w	r3, r1, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	ea02 0103 	and.w	r1, r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	409a      	lsls	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	21ff      	movs	r1, #255	; 0xff
 800567a:	fa01 f303 	lsl.w	r3, r1, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	ea02 0103 	and.w	r1, r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	409a      	lsls	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d11d      	bne.n	80056dc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	221f      	movs	r2, #31
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2207      	movs	r2, #7
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d102      	bne.n	8005706 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005700:	2300      	movs	r3, #0
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	e00f      	b.n	8005726 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d102      	bne.n	8005714 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800570e:	2301      	movs	r3, #1
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
 8005712:	e008      	b.n	8005726 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800571c:	2301      	movs	r3, #1
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
 8005720:	e001      	b.n	8005726 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005722:	2300      	movs	r3, #0
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	4313      	orrs	r3, r2
 8005730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4313      	orrs	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6819      	ldr	r1, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	43da      	mvns	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	400a      	ands	r2, r1
 800576c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f003 0310 	and.w	r3, r3, #16
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	22c0      	movs	r2, #192	; 0xc0
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	43da      	mvns	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	400a      	ands	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80057d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3728      	adds	r7, #40	; 0x28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20008000 	.word	0x20008000

080057e4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff fe8b 	bl	800550e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	711a      	strb	r2, [r3, #4]
}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff fe84 	bl	8005522 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f043 0204 	orr.w	r2, r3, #4
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff fe7a 	bl	8005536 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	711a      	strb	r2, [r3, #4]
}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7ff ffce 	bl	8005850 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	711a      	strb	r2, [r3, #4]
}
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff ffc7 	bl	8005864 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80058d6:	bf00      	nop
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f043 0204 	orr.w	r2, r3, #4
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff ffbd 	bl	8005878 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	711a      	strb	r2, [r3, #4]
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005914:	f7fd fed2 	bl	80036bc <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e316      	b.n	8005f52 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a66      	ldr	r2, [pc, #408]	; (8005ac4 <HAL_DMA_Init+0x1b8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d04a      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a65      	ldr	r2, [pc, #404]	; (8005ac8 <HAL_DMA_Init+0x1bc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d045      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a63      	ldr	r2, [pc, #396]	; (8005acc <HAL_DMA_Init+0x1c0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d040      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a62      	ldr	r2, [pc, #392]	; (8005ad0 <HAL_DMA_Init+0x1c4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d03b      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a60      	ldr	r2, [pc, #384]	; (8005ad4 <HAL_DMA_Init+0x1c8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d036      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a5f      	ldr	r2, [pc, #380]	; (8005ad8 <HAL_DMA_Init+0x1cc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d031      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a5d      	ldr	r2, [pc, #372]	; (8005adc <HAL_DMA_Init+0x1d0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d02c      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a5c      	ldr	r2, [pc, #368]	; (8005ae0 <HAL_DMA_Init+0x1d4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d027      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a5a      	ldr	r2, [pc, #360]	; (8005ae4 <HAL_DMA_Init+0x1d8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d022      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a59      	ldr	r2, [pc, #356]	; (8005ae8 <HAL_DMA_Init+0x1dc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d01d      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a57      	ldr	r2, [pc, #348]	; (8005aec <HAL_DMA_Init+0x1e0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d018      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a56      	ldr	r2, [pc, #344]	; (8005af0 <HAL_DMA_Init+0x1e4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d013      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a54      	ldr	r2, [pc, #336]	; (8005af4 <HAL_DMA_Init+0x1e8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00e      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a53      	ldr	r2, [pc, #332]	; (8005af8 <HAL_DMA_Init+0x1ec>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a51      	ldr	r2, [pc, #324]	; (8005afc <HAL_DMA_Init+0x1f0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d004      	beq.n	80059c4 <HAL_DMA_Init+0xb8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a50      	ldr	r2, [pc, #320]	; (8005b00 <HAL_DMA_Init+0x1f4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d101      	bne.n	80059c8 <HAL_DMA_Init+0xbc>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <HAL_DMA_Init+0xbe>
 80059c8:	2300      	movs	r3, #0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 813b 	beq.w	8005c46 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a37      	ldr	r2, [pc, #220]	; (8005ac4 <HAL_DMA_Init+0x1b8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d04a      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a36      	ldr	r2, [pc, #216]	; (8005ac8 <HAL_DMA_Init+0x1bc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d045      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a34      	ldr	r2, [pc, #208]	; (8005acc <HAL_DMA_Init+0x1c0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d040      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a33      	ldr	r2, [pc, #204]	; (8005ad0 <HAL_DMA_Init+0x1c4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d03b      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a31      	ldr	r2, [pc, #196]	; (8005ad4 <HAL_DMA_Init+0x1c8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d036      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a30      	ldr	r2, [pc, #192]	; (8005ad8 <HAL_DMA_Init+0x1cc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d031      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2e      	ldr	r2, [pc, #184]	; (8005adc <HAL_DMA_Init+0x1d0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d02c      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2d      	ldr	r2, [pc, #180]	; (8005ae0 <HAL_DMA_Init+0x1d4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d027      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <HAL_DMA_Init+0x1d8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d022      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <HAL_DMA_Init+0x1dc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d01d      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a28      	ldr	r2, [pc, #160]	; (8005aec <HAL_DMA_Init+0x1e0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d018      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a27      	ldr	r2, [pc, #156]	; (8005af0 <HAL_DMA_Init+0x1e4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <HAL_DMA_Init+0x1e8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00e      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a24      	ldr	r2, [pc, #144]	; (8005af8 <HAL_DMA_Init+0x1ec>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d009      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a22      	ldr	r2, [pc, #136]	; (8005afc <HAL_DMA_Init+0x1f0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_DMA_Init+0x174>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <HAL_DMA_Init+0x1f4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d108      	bne.n	8005a92 <HAL_DMA_Init+0x186>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e007      	b.n	8005aa2 <HAL_DMA_Init+0x196>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005aa2:	e02f      	b.n	8005b04 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aa4:	f7fd fe0a 	bl	80036bc <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b05      	cmp	r3, #5
 8005ab0:	d928      	bls.n	8005b04 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2203      	movs	r2, #3
 8005abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e246      	b.n	8005f52 <HAL_DMA_Init+0x646>
 8005ac4:	40020010 	.word	0x40020010
 8005ac8:	40020028 	.word	0x40020028
 8005acc:	40020040 	.word	0x40020040
 8005ad0:	40020058 	.word	0x40020058
 8005ad4:	40020070 	.word	0x40020070
 8005ad8:	40020088 	.word	0x40020088
 8005adc:	400200a0 	.word	0x400200a0
 8005ae0:	400200b8 	.word	0x400200b8
 8005ae4:	40020410 	.word	0x40020410
 8005ae8:	40020428 	.word	0x40020428
 8005aec:	40020440 	.word	0x40020440
 8005af0:	40020458 	.word	0x40020458
 8005af4:	40020470 	.word	0x40020470
 8005af8:	40020488 	.word	0x40020488
 8005afc:	400204a0 	.word	0x400204a0
 8005b00:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1c8      	bne.n	8005aa4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4b83      	ldr	r3, [pc, #524]	; (8005d2c <HAL_DMA_Init+0x420>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005b2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b36:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b42:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d107      	bne.n	8005b68 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	4313      	orrs	r3, r2
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005b68:	4b71      	ldr	r3, [pc, #452]	; (8005d30 <HAL_DMA_Init+0x424>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4b71      	ldr	r3, [pc, #452]	; (8005d34 <HAL_DMA_Init+0x428>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b74:	d328      	bcc.n	8005bc8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b28      	cmp	r3, #40	; 0x28
 8005b7c:	d903      	bls.n	8005b86 <HAL_DMA_Init+0x27a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b2e      	cmp	r3, #46	; 0x2e
 8005b84:	d917      	bls.n	8005bb6 <HAL_DMA_Init+0x2aa>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b8c:	d903      	bls.n	8005b96 <HAL_DMA_Init+0x28a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b42      	cmp	r3, #66	; 0x42
 8005b94:	d90f      	bls.n	8005bb6 <HAL_DMA_Init+0x2aa>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b46      	cmp	r3, #70	; 0x46
 8005b9c:	d903      	bls.n	8005ba6 <HAL_DMA_Init+0x29a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b48      	cmp	r3, #72	; 0x48
 8005ba4:	d907      	bls.n	8005bb6 <HAL_DMA_Init+0x2aa>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b4e      	cmp	r3, #78	; 0x4e
 8005bac:	d905      	bls.n	8005bba <HAL_DMA_Init+0x2ae>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b52      	cmp	r3, #82	; 0x52
 8005bb4:	d801      	bhi.n	8005bba <HAL_DMA_Init+0x2ae>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <HAL_DMA_Init+0x2b0>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f023 0307 	bic.w	r3, r3, #7
 8005bde:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d117      	bne.n	8005c22 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00e      	beq.n	8005c22 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f002 fb33 	bl	8008270 <DMA_CheckFifoParam>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2240      	movs	r2, #64	; 0x40
 8005c14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e197      	b.n	8005f52 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f002 fa6e 	bl	800810c <DMA_CalcBaseAndBitshift>
 8005c30:	4603      	mov	r3, r0
 8005c32:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	223f      	movs	r2, #63	; 0x3f
 8005c3e:	409a      	lsls	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	e0cd      	b.n	8005de2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a3b      	ldr	r2, [pc, #236]	; (8005d38 <HAL_DMA_Init+0x42c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_Init+0x38a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a39      	ldr	r2, [pc, #228]	; (8005d3c <HAL_DMA_Init+0x430>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <HAL_DMA_Init+0x38a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a38      	ldr	r2, [pc, #224]	; (8005d40 <HAL_DMA_Init+0x434>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_DMA_Init+0x38a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a36      	ldr	r2, [pc, #216]	; (8005d44 <HAL_DMA_Init+0x438>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_DMA_Init+0x38a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a35      	ldr	r2, [pc, #212]	; (8005d48 <HAL_DMA_Init+0x43c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_DMA_Init+0x38a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a33      	ldr	r2, [pc, #204]	; (8005d4c <HAL_DMA_Init+0x440>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_DMA_Init+0x38a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a32      	ldr	r2, [pc, #200]	; (8005d50 <HAL_DMA_Init+0x444>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_DMA_Init+0x38a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a30      	ldr	r2, [pc, #192]	; (8005d54 <HAL_DMA_Init+0x448>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_DMA_Init+0x38e>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_DMA_Init+0x390>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8097 	beq.w	8005dd0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a24      	ldr	r2, [pc, #144]	; (8005d38 <HAL_DMA_Init+0x42c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d021      	beq.n	8005cf0 <HAL_DMA_Init+0x3e4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a22      	ldr	r2, [pc, #136]	; (8005d3c <HAL_DMA_Init+0x430>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01c      	beq.n	8005cf0 <HAL_DMA_Init+0x3e4>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a21      	ldr	r2, [pc, #132]	; (8005d40 <HAL_DMA_Init+0x434>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d017      	beq.n	8005cf0 <HAL_DMA_Init+0x3e4>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1f      	ldr	r2, [pc, #124]	; (8005d44 <HAL_DMA_Init+0x438>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d012      	beq.n	8005cf0 <HAL_DMA_Init+0x3e4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1e      	ldr	r2, [pc, #120]	; (8005d48 <HAL_DMA_Init+0x43c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00d      	beq.n	8005cf0 <HAL_DMA_Init+0x3e4>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1c      	ldr	r2, [pc, #112]	; (8005d4c <HAL_DMA_Init+0x440>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d008      	beq.n	8005cf0 <HAL_DMA_Init+0x3e4>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1b      	ldr	r2, [pc, #108]	; (8005d50 <HAL_DMA_Init+0x444>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <HAL_DMA_Init+0x3e4>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a19      	ldr	r2, [pc, #100]	; (8005d54 <HAL_DMA_Init+0x448>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <HAL_DMA_Init+0x44c>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d020      	beq.n	8005d5c <HAL_DMA_Init+0x450>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b80      	cmp	r3, #128	; 0x80
 8005d20:	d102      	bne.n	8005d28 <HAL_DMA_Init+0x41c>
 8005d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d26:	e01a      	b.n	8005d5e <HAL_DMA_Init+0x452>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e018      	b.n	8005d5e <HAL_DMA_Init+0x452>
 8005d2c:	fe10803f 	.word	0xfe10803f
 8005d30:	5c001000 	.word	0x5c001000
 8005d34:	ffff0000 	.word	0xffff0000
 8005d38:	58025408 	.word	0x58025408
 8005d3c:	5802541c 	.word	0x5802541c
 8005d40:	58025430 	.word	0x58025430
 8005d44:	58025444 	.word	0x58025444
 8005d48:	58025458 	.word	0x58025458
 8005d4c:	5802546c 	.word	0x5802546c
 8005d50:	58025480 	.word	0x58025480
 8005d54:	58025494 	.word	0x58025494
 8005d58:	fffe000f 	.word	0xfffe000f
 8005d5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	68d2      	ldr	r2, [r2, #12]
 8005d62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005d6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005d74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005d7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005d84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005d8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	4b6e      	ldr	r3, [pc, #440]	; (8005f5c <HAL_DMA_Init+0x650>)
 8005da4:	4413      	add	r3, r2
 8005da6:	4a6e      	ldr	r2, [pc, #440]	; (8005f60 <HAL_DMA_Init+0x654>)
 8005da8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dac:	091b      	lsrs	r3, r3, #4
 8005dae:	009a      	lsls	r2, r3, #2
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f002 f9a9 	bl	800810c <DMA_CalcBaseAndBitshift>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	409a      	lsls	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	e008      	b.n	8005de2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2240      	movs	r2, #64	; 0x40
 8005dd4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2203      	movs	r2, #3
 8005dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e0b7      	b.n	8005f52 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a5f      	ldr	r2, [pc, #380]	; (8005f64 <HAL_DMA_Init+0x658>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d072      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a5d      	ldr	r2, [pc, #372]	; (8005f68 <HAL_DMA_Init+0x65c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d06d      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a5c      	ldr	r2, [pc, #368]	; (8005f6c <HAL_DMA_Init+0x660>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d068      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a5a      	ldr	r2, [pc, #360]	; (8005f70 <HAL_DMA_Init+0x664>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d063      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a59      	ldr	r2, [pc, #356]	; (8005f74 <HAL_DMA_Init+0x668>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d05e      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a57      	ldr	r2, [pc, #348]	; (8005f78 <HAL_DMA_Init+0x66c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d059      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a56      	ldr	r2, [pc, #344]	; (8005f7c <HAL_DMA_Init+0x670>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d054      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a54      	ldr	r2, [pc, #336]	; (8005f80 <HAL_DMA_Init+0x674>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d04f      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a53      	ldr	r2, [pc, #332]	; (8005f84 <HAL_DMA_Init+0x678>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d04a      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a51      	ldr	r2, [pc, #324]	; (8005f88 <HAL_DMA_Init+0x67c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d045      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a50      	ldr	r2, [pc, #320]	; (8005f8c <HAL_DMA_Init+0x680>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d040      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a4e      	ldr	r2, [pc, #312]	; (8005f90 <HAL_DMA_Init+0x684>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d03b      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a4d      	ldr	r2, [pc, #308]	; (8005f94 <HAL_DMA_Init+0x688>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d036      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a4b      	ldr	r2, [pc, #300]	; (8005f98 <HAL_DMA_Init+0x68c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d031      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a4a      	ldr	r2, [pc, #296]	; (8005f9c <HAL_DMA_Init+0x690>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d02c      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a48      	ldr	r2, [pc, #288]	; (8005fa0 <HAL_DMA_Init+0x694>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d027      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a47      	ldr	r2, [pc, #284]	; (8005fa4 <HAL_DMA_Init+0x698>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d022      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a45      	ldr	r2, [pc, #276]	; (8005fa8 <HAL_DMA_Init+0x69c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01d      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a44      	ldr	r2, [pc, #272]	; (8005fac <HAL_DMA_Init+0x6a0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d018      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a42      	ldr	r2, [pc, #264]	; (8005fb0 <HAL_DMA_Init+0x6a4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a41      	ldr	r2, [pc, #260]	; (8005fb4 <HAL_DMA_Init+0x6a8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3f      	ldr	r2, [pc, #252]	; (8005fb8 <HAL_DMA_Init+0x6ac>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a3e      	ldr	r2, [pc, #248]	; (8005fbc <HAL_DMA_Init+0x6b0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_DMA_Init+0x5c6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a3c      	ldr	r2, [pc, #240]	; (8005fc0 <HAL_DMA_Init+0x6b4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d101      	bne.n	8005ed6 <HAL_DMA_Init+0x5ca>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <HAL_DMA_Init+0x5cc>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d032      	beq.n	8005f42 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f002 fa43 	bl	8008368 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b80      	cmp	r3, #128	; 0x80
 8005ee8:	d102      	bne.n	8005ef0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d010      	beq.n	8005f30 <HAL_DMA_Init+0x624>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d80c      	bhi.n	8005f30 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f002 fac0 	bl	800849c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	e008      	b.n	8005f42 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	a7fdabf8 	.word	0xa7fdabf8
 8005f60:	cccccccd 	.word	0xcccccccd
 8005f64:	40020010 	.word	0x40020010
 8005f68:	40020028 	.word	0x40020028
 8005f6c:	40020040 	.word	0x40020040
 8005f70:	40020058 	.word	0x40020058
 8005f74:	40020070 	.word	0x40020070
 8005f78:	40020088 	.word	0x40020088
 8005f7c:	400200a0 	.word	0x400200a0
 8005f80:	400200b8 	.word	0x400200b8
 8005f84:	40020410 	.word	0x40020410
 8005f88:	40020428 	.word	0x40020428
 8005f8c:	40020440 	.word	0x40020440
 8005f90:	40020458 	.word	0x40020458
 8005f94:	40020470 	.word	0x40020470
 8005f98:	40020488 	.word	0x40020488
 8005f9c:	400204a0 	.word	0x400204a0
 8005fa0:	400204b8 	.word	0x400204b8
 8005fa4:	58025408 	.word	0x58025408
 8005fa8:	5802541c 	.word	0x5802541c
 8005fac:	58025430 	.word	0x58025430
 8005fb0:	58025444 	.word	0x58025444
 8005fb4:	58025458 	.word	0x58025458
 8005fb8:	5802546c 	.word	0x5802546c
 8005fbc:	58025480 	.word	0x58025480
 8005fc0:	58025494 	.word	0x58025494

08005fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e226      	b.n	800642e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_DMA_Start_IT+0x2a>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e21f      	b.n	800642e <HAL_DMA_Start_IT+0x46a>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	f040 820a 	bne.w	8006418 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a68      	ldr	r2, [pc, #416]	; (80061b8 <HAL_DMA_Start_IT+0x1f4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d04a      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a66      	ldr	r2, [pc, #408]	; (80061bc <HAL_DMA_Start_IT+0x1f8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d045      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a65      	ldr	r2, [pc, #404]	; (80061c0 <HAL_DMA_Start_IT+0x1fc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d040      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a63      	ldr	r2, [pc, #396]	; (80061c4 <HAL_DMA_Start_IT+0x200>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d03b      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a62      	ldr	r2, [pc, #392]	; (80061c8 <HAL_DMA_Start_IT+0x204>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d036      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a60      	ldr	r2, [pc, #384]	; (80061cc <HAL_DMA_Start_IT+0x208>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d031      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a5f      	ldr	r2, [pc, #380]	; (80061d0 <HAL_DMA_Start_IT+0x20c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d02c      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a5d      	ldr	r2, [pc, #372]	; (80061d4 <HAL_DMA_Start_IT+0x210>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d027      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a5c      	ldr	r2, [pc, #368]	; (80061d8 <HAL_DMA_Start_IT+0x214>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d022      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a5a      	ldr	r2, [pc, #360]	; (80061dc <HAL_DMA_Start_IT+0x218>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01d      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a59      	ldr	r2, [pc, #356]	; (80061e0 <HAL_DMA_Start_IT+0x21c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d018      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a57      	ldr	r2, [pc, #348]	; (80061e4 <HAL_DMA_Start_IT+0x220>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a56      	ldr	r2, [pc, #344]	; (80061e8 <HAL_DMA_Start_IT+0x224>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a54      	ldr	r2, [pc, #336]	; (80061ec <HAL_DMA_Start_IT+0x228>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d009      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a53      	ldr	r2, [pc, #332]	; (80061f0 <HAL_DMA_Start_IT+0x22c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <HAL_DMA_Start_IT+0xee>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a51      	ldr	r2, [pc, #324]	; (80061f4 <HAL_DMA_Start_IT+0x230>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d108      	bne.n	80060c4 <HAL_DMA_Start_IT+0x100>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	e007      	b.n	80060d4 <HAL_DMA_Start_IT+0x110>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0201 	bic.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f001 fe6a 	bl	8007db4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a34      	ldr	r2, [pc, #208]	; (80061b8 <HAL_DMA_Start_IT+0x1f4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d04a      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a33      	ldr	r2, [pc, #204]	; (80061bc <HAL_DMA_Start_IT+0x1f8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d045      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a31      	ldr	r2, [pc, #196]	; (80061c0 <HAL_DMA_Start_IT+0x1fc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d040      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a30      	ldr	r2, [pc, #192]	; (80061c4 <HAL_DMA_Start_IT+0x200>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d03b      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2e      	ldr	r2, [pc, #184]	; (80061c8 <HAL_DMA_Start_IT+0x204>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d036      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2d      	ldr	r2, [pc, #180]	; (80061cc <HAL_DMA_Start_IT+0x208>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d031      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2b      	ldr	r2, [pc, #172]	; (80061d0 <HAL_DMA_Start_IT+0x20c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d02c      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2a      	ldr	r2, [pc, #168]	; (80061d4 <HAL_DMA_Start_IT+0x210>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d027      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a28      	ldr	r2, [pc, #160]	; (80061d8 <HAL_DMA_Start_IT+0x214>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d022      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a27      	ldr	r2, [pc, #156]	; (80061dc <HAL_DMA_Start_IT+0x218>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d01d      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a25      	ldr	r2, [pc, #148]	; (80061e0 <HAL_DMA_Start_IT+0x21c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d018      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a24      	ldr	r2, [pc, #144]	; (80061e4 <HAL_DMA_Start_IT+0x220>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a22      	ldr	r2, [pc, #136]	; (80061e8 <HAL_DMA_Start_IT+0x224>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00e      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a21      	ldr	r2, [pc, #132]	; (80061ec <HAL_DMA_Start_IT+0x228>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d009      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1f      	ldr	r2, [pc, #124]	; (80061f0 <HAL_DMA_Start_IT+0x22c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_DMA_Start_IT+0x1bc>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1e      	ldr	r2, [pc, #120]	; (80061f4 <HAL_DMA_Start_IT+0x230>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d101      	bne.n	8006184 <HAL_DMA_Start_IT+0x1c0>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <HAL_DMA_Start_IT+0x1c2>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d036      	beq.n	80061f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 021e 	bic.w	r2, r3, #30
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0216 	orr.w	r2, r2, #22
 800619c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d03e      	beq.n	8006224 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0208 	orr.w	r2, r2, #8
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e035      	b.n	8006224 <HAL_DMA_Start_IT+0x260>
 80061b8:	40020010 	.word	0x40020010
 80061bc:	40020028 	.word	0x40020028
 80061c0:	40020040 	.word	0x40020040
 80061c4:	40020058 	.word	0x40020058
 80061c8:	40020070 	.word	0x40020070
 80061cc:	40020088 	.word	0x40020088
 80061d0:	400200a0 	.word	0x400200a0
 80061d4:	400200b8 	.word	0x400200b8
 80061d8:	40020410 	.word	0x40020410
 80061dc:	40020428 	.word	0x40020428
 80061e0:	40020440 	.word	0x40020440
 80061e4:	40020458 	.word	0x40020458
 80061e8:	40020470 	.word	0x40020470
 80061ec:	40020488 	.word	0x40020488
 80061f0:	400204a0 	.word	0x400204a0
 80061f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f023 020e 	bic.w	r2, r3, #14
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 020a 	orr.w	r2, r2, #10
 800620a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0204 	orr.w	r2, r2, #4
 8006222:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a83      	ldr	r2, [pc, #524]	; (8006438 <HAL_DMA_Start_IT+0x474>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d072      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a82      	ldr	r2, [pc, #520]	; (800643c <HAL_DMA_Start_IT+0x478>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d06d      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a80      	ldr	r2, [pc, #512]	; (8006440 <HAL_DMA_Start_IT+0x47c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d068      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a7f      	ldr	r2, [pc, #508]	; (8006444 <HAL_DMA_Start_IT+0x480>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d063      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a7d      	ldr	r2, [pc, #500]	; (8006448 <HAL_DMA_Start_IT+0x484>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d05e      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a7c      	ldr	r2, [pc, #496]	; (800644c <HAL_DMA_Start_IT+0x488>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d059      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a7a      	ldr	r2, [pc, #488]	; (8006450 <HAL_DMA_Start_IT+0x48c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d054      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a79      	ldr	r2, [pc, #484]	; (8006454 <HAL_DMA_Start_IT+0x490>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d04f      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a77      	ldr	r2, [pc, #476]	; (8006458 <HAL_DMA_Start_IT+0x494>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d04a      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a76      	ldr	r2, [pc, #472]	; (800645c <HAL_DMA_Start_IT+0x498>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d045      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a74      	ldr	r2, [pc, #464]	; (8006460 <HAL_DMA_Start_IT+0x49c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d040      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a73      	ldr	r2, [pc, #460]	; (8006464 <HAL_DMA_Start_IT+0x4a0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d03b      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a71      	ldr	r2, [pc, #452]	; (8006468 <HAL_DMA_Start_IT+0x4a4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d036      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a70      	ldr	r2, [pc, #448]	; (800646c <HAL_DMA_Start_IT+0x4a8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d031      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a6e      	ldr	r2, [pc, #440]	; (8006470 <HAL_DMA_Start_IT+0x4ac>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d02c      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a6d      	ldr	r2, [pc, #436]	; (8006474 <HAL_DMA_Start_IT+0x4b0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d027      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a6b      	ldr	r2, [pc, #428]	; (8006478 <HAL_DMA_Start_IT+0x4b4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d022      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a6a      	ldr	r2, [pc, #424]	; (800647c <HAL_DMA_Start_IT+0x4b8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d01d      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a68      	ldr	r2, [pc, #416]	; (8006480 <HAL_DMA_Start_IT+0x4bc>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d018      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a67      	ldr	r2, [pc, #412]	; (8006484 <HAL_DMA_Start_IT+0x4c0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d013      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a65      	ldr	r2, [pc, #404]	; (8006488 <HAL_DMA_Start_IT+0x4c4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00e      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a64      	ldr	r2, [pc, #400]	; (800648c <HAL_DMA_Start_IT+0x4c8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d009      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a62      	ldr	r2, [pc, #392]	; (8006490 <HAL_DMA_Start_IT+0x4cc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_DMA_Start_IT+0x350>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a61      	ldr	r2, [pc, #388]	; (8006494 <HAL_DMA_Start_IT+0x4d0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d101      	bne.n	8006318 <HAL_DMA_Start_IT+0x354>
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <HAL_DMA_Start_IT+0x356>
 8006318:	2300      	movs	r3, #0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01a      	beq.n	8006354 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800633a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800634e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006352:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a37      	ldr	r2, [pc, #220]	; (8006438 <HAL_DMA_Start_IT+0x474>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d04a      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a36      	ldr	r2, [pc, #216]	; (800643c <HAL_DMA_Start_IT+0x478>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d045      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a34      	ldr	r2, [pc, #208]	; (8006440 <HAL_DMA_Start_IT+0x47c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d040      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a33      	ldr	r2, [pc, #204]	; (8006444 <HAL_DMA_Start_IT+0x480>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d03b      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a31      	ldr	r2, [pc, #196]	; (8006448 <HAL_DMA_Start_IT+0x484>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d036      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a30      	ldr	r2, [pc, #192]	; (800644c <HAL_DMA_Start_IT+0x488>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d031      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a2e      	ldr	r2, [pc, #184]	; (8006450 <HAL_DMA_Start_IT+0x48c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d02c      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a2d      	ldr	r2, [pc, #180]	; (8006454 <HAL_DMA_Start_IT+0x490>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d027      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a2b      	ldr	r2, [pc, #172]	; (8006458 <HAL_DMA_Start_IT+0x494>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d022      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a2a      	ldr	r2, [pc, #168]	; (800645c <HAL_DMA_Start_IT+0x498>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d01d      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a28      	ldr	r2, [pc, #160]	; (8006460 <HAL_DMA_Start_IT+0x49c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d018      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a27      	ldr	r2, [pc, #156]	; (8006464 <HAL_DMA_Start_IT+0x4a0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a25      	ldr	r2, [pc, #148]	; (8006468 <HAL_DMA_Start_IT+0x4a4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a24      	ldr	r2, [pc, #144]	; (800646c <HAL_DMA_Start_IT+0x4a8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a22      	ldr	r2, [pc, #136]	; (8006470 <HAL_DMA_Start_IT+0x4ac>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_DMA_Start_IT+0x430>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a21      	ldr	r2, [pc, #132]	; (8006474 <HAL_DMA_Start_IT+0x4b0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d108      	bne.n	8006406 <HAL_DMA_Start_IT+0x442>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e012      	b.n	800642c <HAL_DMA_Start_IT+0x468>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0201 	orr.w	r2, r2, #1
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	e009      	b.n	800642c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800641e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40020010 	.word	0x40020010
 800643c:	40020028 	.word	0x40020028
 8006440:	40020040 	.word	0x40020040
 8006444:	40020058 	.word	0x40020058
 8006448:	40020070 	.word	0x40020070
 800644c:	40020088 	.word	0x40020088
 8006450:	400200a0 	.word	0x400200a0
 8006454:	400200b8 	.word	0x400200b8
 8006458:	40020410 	.word	0x40020410
 800645c:	40020428 	.word	0x40020428
 8006460:	40020440 	.word	0x40020440
 8006464:	40020458 	.word	0x40020458
 8006468:	40020470 	.word	0x40020470
 800646c:	40020488 	.word	0x40020488
 8006470:	400204a0 	.word	0x400204a0
 8006474:	400204b8 	.word	0x400204b8
 8006478:	58025408 	.word	0x58025408
 800647c:	5802541c 	.word	0x5802541c
 8006480:	58025430 	.word	0x58025430
 8006484:	58025444 	.word	0x58025444
 8006488:	58025458 	.word	0x58025458
 800648c:	5802546c 	.word	0x5802546c
 8006490:	58025480 	.word	0x58025480
 8006494:	58025494 	.word	0x58025494

08006498 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80064a0:	f7fd f90c 	bl	80036bc <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e2dc      	b.n	8006a6a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d008      	beq.n	80064ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2280      	movs	r2, #128	; 0x80
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e2cd      	b.n	8006a6a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a76      	ldr	r2, [pc, #472]	; (80066ac <HAL_DMA_Abort+0x214>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d04a      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a74      	ldr	r2, [pc, #464]	; (80066b0 <HAL_DMA_Abort+0x218>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d045      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a73      	ldr	r2, [pc, #460]	; (80066b4 <HAL_DMA_Abort+0x21c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d040      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a71      	ldr	r2, [pc, #452]	; (80066b8 <HAL_DMA_Abort+0x220>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d03b      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a70      	ldr	r2, [pc, #448]	; (80066bc <HAL_DMA_Abort+0x224>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d036      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a6e      	ldr	r2, [pc, #440]	; (80066c0 <HAL_DMA_Abort+0x228>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d031      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a6d      	ldr	r2, [pc, #436]	; (80066c4 <HAL_DMA_Abort+0x22c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d02c      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a6b      	ldr	r2, [pc, #428]	; (80066c8 <HAL_DMA_Abort+0x230>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d027      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a6a      	ldr	r2, [pc, #424]	; (80066cc <HAL_DMA_Abort+0x234>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d022      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a68      	ldr	r2, [pc, #416]	; (80066d0 <HAL_DMA_Abort+0x238>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01d      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a67      	ldr	r2, [pc, #412]	; (80066d4 <HAL_DMA_Abort+0x23c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d018      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a65      	ldr	r2, [pc, #404]	; (80066d8 <HAL_DMA_Abort+0x240>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d013      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a64      	ldr	r2, [pc, #400]	; (80066dc <HAL_DMA_Abort+0x244>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00e      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a62      	ldr	r2, [pc, #392]	; (80066e0 <HAL_DMA_Abort+0x248>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d009      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a61      	ldr	r2, [pc, #388]	; (80066e4 <HAL_DMA_Abort+0x24c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d004      	beq.n	800656e <HAL_DMA_Abort+0xd6>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a5f      	ldr	r2, [pc, #380]	; (80066e8 <HAL_DMA_Abort+0x250>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d101      	bne.n	8006572 <HAL_DMA_Abort+0xda>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <HAL_DMA_Abort+0xdc>
 8006572:	2300      	movs	r3, #0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d013      	beq.n	80065a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 021e 	bic.w	r2, r2, #30
 8006586:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695a      	ldr	r2, [r3, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006596:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e00a      	b.n	80065b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 020e 	bic.w	r2, r2, #14
 80065ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a3c      	ldr	r2, [pc, #240]	; (80066ac <HAL_DMA_Abort+0x214>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d072      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a3a      	ldr	r2, [pc, #232]	; (80066b0 <HAL_DMA_Abort+0x218>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d06d      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a39      	ldr	r2, [pc, #228]	; (80066b4 <HAL_DMA_Abort+0x21c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d068      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a37      	ldr	r2, [pc, #220]	; (80066b8 <HAL_DMA_Abort+0x220>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d063      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a36      	ldr	r2, [pc, #216]	; (80066bc <HAL_DMA_Abort+0x224>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d05e      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a34      	ldr	r2, [pc, #208]	; (80066c0 <HAL_DMA_Abort+0x228>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d059      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a33      	ldr	r2, [pc, #204]	; (80066c4 <HAL_DMA_Abort+0x22c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d054      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a31      	ldr	r2, [pc, #196]	; (80066c8 <HAL_DMA_Abort+0x230>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d04f      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a30      	ldr	r2, [pc, #192]	; (80066cc <HAL_DMA_Abort+0x234>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d04a      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a2e      	ldr	r2, [pc, #184]	; (80066d0 <HAL_DMA_Abort+0x238>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d045      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a2d      	ldr	r2, [pc, #180]	; (80066d4 <HAL_DMA_Abort+0x23c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d040      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2b      	ldr	r2, [pc, #172]	; (80066d8 <HAL_DMA_Abort+0x240>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d03b      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2a      	ldr	r2, [pc, #168]	; (80066dc <HAL_DMA_Abort+0x244>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d036      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a28      	ldr	r2, [pc, #160]	; (80066e0 <HAL_DMA_Abort+0x248>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d031      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a27      	ldr	r2, [pc, #156]	; (80066e4 <HAL_DMA_Abort+0x24c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d02c      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a25      	ldr	r2, [pc, #148]	; (80066e8 <HAL_DMA_Abort+0x250>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d027      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a24      	ldr	r2, [pc, #144]	; (80066ec <HAL_DMA_Abort+0x254>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d022      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a22      	ldr	r2, [pc, #136]	; (80066f0 <HAL_DMA_Abort+0x258>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d01d      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a21      	ldr	r2, [pc, #132]	; (80066f4 <HAL_DMA_Abort+0x25c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d018      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1f      	ldr	r2, [pc, #124]	; (80066f8 <HAL_DMA_Abort+0x260>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1e      	ldr	r2, [pc, #120]	; (80066fc <HAL_DMA_Abort+0x264>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00e      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1c      	ldr	r2, [pc, #112]	; (8006700 <HAL_DMA_Abort+0x268>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d009      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1b      	ldr	r2, [pc, #108]	; (8006704 <HAL_DMA_Abort+0x26c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <HAL_DMA_Abort+0x20e>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a19      	ldr	r2, [pc, #100]	; (8006708 <HAL_DMA_Abort+0x270>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d132      	bne.n	800670c <HAL_DMA_Abort+0x274>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e031      	b.n	800670e <HAL_DMA_Abort+0x276>
 80066aa:	bf00      	nop
 80066ac:	40020010 	.word	0x40020010
 80066b0:	40020028 	.word	0x40020028
 80066b4:	40020040 	.word	0x40020040
 80066b8:	40020058 	.word	0x40020058
 80066bc:	40020070 	.word	0x40020070
 80066c0:	40020088 	.word	0x40020088
 80066c4:	400200a0 	.word	0x400200a0
 80066c8:	400200b8 	.word	0x400200b8
 80066cc:	40020410 	.word	0x40020410
 80066d0:	40020428 	.word	0x40020428
 80066d4:	40020440 	.word	0x40020440
 80066d8:	40020458 	.word	0x40020458
 80066dc:	40020470 	.word	0x40020470
 80066e0:	40020488 	.word	0x40020488
 80066e4:	400204a0 	.word	0x400204a0
 80066e8:	400204b8 	.word	0x400204b8
 80066ec:	58025408 	.word	0x58025408
 80066f0:	5802541c 	.word	0x5802541c
 80066f4:	58025430 	.word	0x58025430
 80066f8:	58025444 	.word	0x58025444
 80066fc:	58025458 	.word	0x58025458
 8006700:	5802546c 	.word	0x5802546c
 8006704:	58025480 	.word	0x58025480
 8006708:	58025494 	.word	0x58025494
 800670c:	2300      	movs	r3, #0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006720:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a6d      	ldr	r2, [pc, #436]	; (80068dc <HAL_DMA_Abort+0x444>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d04a      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a6b      	ldr	r2, [pc, #428]	; (80068e0 <HAL_DMA_Abort+0x448>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d045      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a6a      	ldr	r2, [pc, #424]	; (80068e4 <HAL_DMA_Abort+0x44c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d040      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a68      	ldr	r2, [pc, #416]	; (80068e8 <HAL_DMA_Abort+0x450>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d03b      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a67      	ldr	r2, [pc, #412]	; (80068ec <HAL_DMA_Abort+0x454>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d036      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a65      	ldr	r2, [pc, #404]	; (80068f0 <HAL_DMA_Abort+0x458>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d031      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a64      	ldr	r2, [pc, #400]	; (80068f4 <HAL_DMA_Abort+0x45c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d02c      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a62      	ldr	r2, [pc, #392]	; (80068f8 <HAL_DMA_Abort+0x460>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d027      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a61      	ldr	r2, [pc, #388]	; (80068fc <HAL_DMA_Abort+0x464>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d022      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a5f      	ldr	r2, [pc, #380]	; (8006900 <HAL_DMA_Abort+0x468>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01d      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a5e      	ldr	r2, [pc, #376]	; (8006904 <HAL_DMA_Abort+0x46c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d018      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a5c      	ldr	r2, [pc, #368]	; (8006908 <HAL_DMA_Abort+0x470>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a5b      	ldr	r2, [pc, #364]	; (800690c <HAL_DMA_Abort+0x474>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a59      	ldr	r2, [pc, #356]	; (8006910 <HAL_DMA_Abort+0x478>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d009      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a58      	ldr	r2, [pc, #352]	; (8006914 <HAL_DMA_Abort+0x47c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_DMA_Abort+0x32a>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a56      	ldr	r2, [pc, #344]	; (8006918 <HAL_DMA_Abort+0x480>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d108      	bne.n	80067d4 <HAL_DMA_Abort+0x33c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0201 	bic.w	r2, r2, #1
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	e007      	b.n	80067e4 <HAL_DMA_Abort+0x34c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80067e4:	e013      	b.n	800680e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067e6:	f7fc ff69 	bl	80036bc <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b05      	cmp	r3, #5
 80067f2:	d90c      	bls.n	800680e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2220      	movs	r2, #32
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2203      	movs	r2, #3
 80067fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e12d      	b.n	8006a6a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e5      	bne.n	80067e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a2f      	ldr	r2, [pc, #188]	; (80068dc <HAL_DMA_Abort+0x444>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d04a      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a2d      	ldr	r2, [pc, #180]	; (80068e0 <HAL_DMA_Abort+0x448>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d045      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2c      	ldr	r2, [pc, #176]	; (80068e4 <HAL_DMA_Abort+0x44c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d040      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a2a      	ldr	r2, [pc, #168]	; (80068e8 <HAL_DMA_Abort+0x450>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d03b      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a29      	ldr	r2, [pc, #164]	; (80068ec <HAL_DMA_Abort+0x454>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d036      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a27      	ldr	r2, [pc, #156]	; (80068f0 <HAL_DMA_Abort+0x458>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d031      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a26      	ldr	r2, [pc, #152]	; (80068f4 <HAL_DMA_Abort+0x45c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d02c      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a24      	ldr	r2, [pc, #144]	; (80068f8 <HAL_DMA_Abort+0x460>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d027      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a23      	ldr	r2, [pc, #140]	; (80068fc <HAL_DMA_Abort+0x464>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d022      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a21      	ldr	r2, [pc, #132]	; (8006900 <HAL_DMA_Abort+0x468>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d01d      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a20      	ldr	r2, [pc, #128]	; (8006904 <HAL_DMA_Abort+0x46c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d018      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <HAL_DMA_Abort+0x470>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d013      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1d      	ldr	r2, [pc, #116]	; (800690c <HAL_DMA_Abort+0x474>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00e      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1b      	ldr	r2, [pc, #108]	; (8006910 <HAL_DMA_Abort+0x478>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d009      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1a      	ldr	r2, [pc, #104]	; (8006914 <HAL_DMA_Abort+0x47c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d004      	beq.n	80068ba <HAL_DMA_Abort+0x422>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a18      	ldr	r2, [pc, #96]	; (8006918 <HAL_DMA_Abort+0x480>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d101      	bne.n	80068be <HAL_DMA_Abort+0x426>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <HAL_DMA_Abort+0x428>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d02b      	beq.n	800691c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	223f      	movs	r2, #63	; 0x3f
 80068d4:	409a      	lsls	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	609a      	str	r2, [r3, #8]
 80068da:	e02a      	b.n	8006932 <HAL_DMA_Abort+0x49a>
 80068dc:	40020010 	.word	0x40020010
 80068e0:	40020028 	.word	0x40020028
 80068e4:	40020040 	.word	0x40020040
 80068e8:	40020058 	.word	0x40020058
 80068ec:	40020070 	.word	0x40020070
 80068f0:	40020088 	.word	0x40020088
 80068f4:	400200a0 	.word	0x400200a0
 80068f8:	400200b8 	.word	0x400200b8
 80068fc:	40020410 	.word	0x40020410
 8006900:	40020428 	.word	0x40020428
 8006904:	40020440 	.word	0x40020440
 8006908:	40020458 	.word	0x40020458
 800690c:	40020470 	.word	0x40020470
 8006910:	40020488 	.word	0x40020488
 8006914:	400204a0 	.word	0x400204a0
 8006918:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006920:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	2201      	movs	r2, #1
 800692c:	409a      	lsls	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a4f      	ldr	r2, [pc, #316]	; (8006a74 <HAL_DMA_Abort+0x5dc>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d072      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a4d      	ldr	r2, [pc, #308]	; (8006a78 <HAL_DMA_Abort+0x5e0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d06d      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a4c      	ldr	r2, [pc, #304]	; (8006a7c <HAL_DMA_Abort+0x5e4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d068      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a4a      	ldr	r2, [pc, #296]	; (8006a80 <HAL_DMA_Abort+0x5e8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d063      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a49      	ldr	r2, [pc, #292]	; (8006a84 <HAL_DMA_Abort+0x5ec>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d05e      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a47      	ldr	r2, [pc, #284]	; (8006a88 <HAL_DMA_Abort+0x5f0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d059      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a46      	ldr	r2, [pc, #280]	; (8006a8c <HAL_DMA_Abort+0x5f4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d054      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a44      	ldr	r2, [pc, #272]	; (8006a90 <HAL_DMA_Abort+0x5f8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d04f      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a43      	ldr	r2, [pc, #268]	; (8006a94 <HAL_DMA_Abort+0x5fc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d04a      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a41      	ldr	r2, [pc, #260]	; (8006a98 <HAL_DMA_Abort+0x600>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d045      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a40      	ldr	r2, [pc, #256]	; (8006a9c <HAL_DMA_Abort+0x604>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d040      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a3e      	ldr	r2, [pc, #248]	; (8006aa0 <HAL_DMA_Abort+0x608>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d03b      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a3d      	ldr	r2, [pc, #244]	; (8006aa4 <HAL_DMA_Abort+0x60c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d036      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a3b      	ldr	r2, [pc, #236]	; (8006aa8 <HAL_DMA_Abort+0x610>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d031      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a3a      	ldr	r2, [pc, #232]	; (8006aac <HAL_DMA_Abort+0x614>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d02c      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a38      	ldr	r2, [pc, #224]	; (8006ab0 <HAL_DMA_Abort+0x618>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d027      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a37      	ldr	r2, [pc, #220]	; (8006ab4 <HAL_DMA_Abort+0x61c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d022      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a35      	ldr	r2, [pc, #212]	; (8006ab8 <HAL_DMA_Abort+0x620>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01d      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a34      	ldr	r2, [pc, #208]	; (8006abc <HAL_DMA_Abort+0x624>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d018      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a32      	ldr	r2, [pc, #200]	; (8006ac0 <HAL_DMA_Abort+0x628>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a31      	ldr	r2, [pc, #196]	; (8006ac4 <HAL_DMA_Abort+0x62c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a2f      	ldr	r2, [pc, #188]	; (8006ac8 <HAL_DMA_Abort+0x630>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a2e      	ldr	r2, [pc, #184]	; (8006acc <HAL_DMA_Abort+0x634>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_DMA_Abort+0x58a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a2c      	ldr	r2, [pc, #176]	; (8006ad0 <HAL_DMA_Abort+0x638>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d101      	bne.n	8006a26 <HAL_DMA_Abort+0x58e>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <HAL_DMA_Abort+0x590>
 8006a26:	2300      	movs	r3, #0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d015      	beq.n	8006a58 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a34:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00c      	beq.n	8006a58 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a4c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a56:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40020010 	.word	0x40020010
 8006a78:	40020028 	.word	0x40020028
 8006a7c:	40020040 	.word	0x40020040
 8006a80:	40020058 	.word	0x40020058
 8006a84:	40020070 	.word	0x40020070
 8006a88:	40020088 	.word	0x40020088
 8006a8c:	400200a0 	.word	0x400200a0
 8006a90:	400200b8 	.word	0x400200b8
 8006a94:	40020410 	.word	0x40020410
 8006a98:	40020428 	.word	0x40020428
 8006a9c:	40020440 	.word	0x40020440
 8006aa0:	40020458 	.word	0x40020458
 8006aa4:	40020470 	.word	0x40020470
 8006aa8:	40020488 	.word	0x40020488
 8006aac:	400204a0 	.word	0x400204a0
 8006ab0:	400204b8 	.word	0x400204b8
 8006ab4:	58025408 	.word	0x58025408
 8006ab8:	5802541c 	.word	0x5802541c
 8006abc:	58025430 	.word	0x58025430
 8006ac0:	58025444 	.word	0x58025444
 8006ac4:	58025458 	.word	0x58025458
 8006ac8:	5802546c 	.word	0x5802546c
 8006acc:	58025480 	.word	0x58025480
 8006ad0:	58025494 	.word	0x58025494

08006ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e237      	b.n	8006f56 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d004      	beq.n	8006afc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2280      	movs	r2, #128	; 0x80
 8006af6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e22c      	b.n	8006f56 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a5c      	ldr	r2, [pc, #368]	; (8006c74 <HAL_DMA_Abort_IT+0x1a0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d04a      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a5b      	ldr	r2, [pc, #364]	; (8006c78 <HAL_DMA_Abort_IT+0x1a4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d045      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a59      	ldr	r2, [pc, #356]	; (8006c7c <HAL_DMA_Abort_IT+0x1a8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d040      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a58      	ldr	r2, [pc, #352]	; (8006c80 <HAL_DMA_Abort_IT+0x1ac>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d03b      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a56      	ldr	r2, [pc, #344]	; (8006c84 <HAL_DMA_Abort_IT+0x1b0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d036      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a55      	ldr	r2, [pc, #340]	; (8006c88 <HAL_DMA_Abort_IT+0x1b4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d031      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a53      	ldr	r2, [pc, #332]	; (8006c8c <HAL_DMA_Abort_IT+0x1b8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d02c      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a52      	ldr	r2, [pc, #328]	; (8006c90 <HAL_DMA_Abort_IT+0x1bc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d027      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a50      	ldr	r2, [pc, #320]	; (8006c94 <HAL_DMA_Abort_IT+0x1c0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d022      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a4f      	ldr	r2, [pc, #316]	; (8006c98 <HAL_DMA_Abort_IT+0x1c4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d01d      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a4d      	ldr	r2, [pc, #308]	; (8006c9c <HAL_DMA_Abort_IT+0x1c8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d018      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a4c      	ldr	r2, [pc, #304]	; (8006ca0 <HAL_DMA_Abort_IT+0x1cc>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a4a      	ldr	r2, [pc, #296]	; (8006ca4 <HAL_DMA_Abort_IT+0x1d0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00e      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a49      	ldr	r2, [pc, #292]	; (8006ca8 <HAL_DMA_Abort_IT+0x1d4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a47      	ldr	r2, [pc, #284]	; (8006cac <HAL_DMA_Abort_IT+0x1d8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_DMA_Abort_IT+0xc8>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a46      	ldr	r2, [pc, #280]	; (8006cb0 <HAL_DMA_Abort_IT+0x1dc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <HAL_DMA_Abort_IT+0xcc>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_DMA_Abort_IT+0xce>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8086 	beq.w	8006cb4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2204      	movs	r2, #4
 8006bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a2f      	ldr	r2, [pc, #188]	; (8006c74 <HAL_DMA_Abort_IT+0x1a0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d04a      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a2e      	ldr	r2, [pc, #184]	; (8006c78 <HAL_DMA_Abort_IT+0x1a4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d045      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a2c      	ldr	r2, [pc, #176]	; (8006c7c <HAL_DMA_Abort_IT+0x1a8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d040      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a2b      	ldr	r2, [pc, #172]	; (8006c80 <HAL_DMA_Abort_IT+0x1ac>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d03b      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a29      	ldr	r2, [pc, #164]	; (8006c84 <HAL_DMA_Abort_IT+0x1b0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d036      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a28      	ldr	r2, [pc, #160]	; (8006c88 <HAL_DMA_Abort_IT+0x1b4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d031      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a26      	ldr	r2, [pc, #152]	; (8006c8c <HAL_DMA_Abort_IT+0x1b8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d02c      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a25      	ldr	r2, [pc, #148]	; (8006c90 <HAL_DMA_Abort_IT+0x1bc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d027      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a23      	ldr	r2, [pc, #140]	; (8006c94 <HAL_DMA_Abort_IT+0x1c0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d022      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <HAL_DMA_Abort_IT+0x1c4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d01d      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a20      	ldr	r2, [pc, #128]	; (8006c9c <HAL_DMA_Abort_IT+0x1c8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a1f      	ldr	r2, [pc, #124]	; (8006ca0 <HAL_DMA_Abort_IT+0x1cc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d013      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ca4 <HAL_DMA_Abort_IT+0x1d0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a1c      	ldr	r2, [pc, #112]	; (8006ca8 <HAL_DMA_Abort_IT+0x1d4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1a      	ldr	r2, [pc, #104]	; (8006cac <HAL_DMA_Abort_IT+0x1d8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_DMA_Abort_IT+0x17c>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a19      	ldr	r2, [pc, #100]	; (8006cb0 <HAL_DMA_Abort_IT+0x1dc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d108      	bne.n	8006c62 <HAL_DMA_Abort_IT+0x18e>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0201 	bic.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	e178      	b.n	8006f54 <HAL_DMA_Abort_IT+0x480>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e16f      	b.n	8006f54 <HAL_DMA_Abort_IT+0x480>
 8006c74:	40020010 	.word	0x40020010
 8006c78:	40020028 	.word	0x40020028
 8006c7c:	40020040 	.word	0x40020040
 8006c80:	40020058 	.word	0x40020058
 8006c84:	40020070 	.word	0x40020070
 8006c88:	40020088 	.word	0x40020088
 8006c8c:	400200a0 	.word	0x400200a0
 8006c90:	400200b8 	.word	0x400200b8
 8006c94:	40020410 	.word	0x40020410
 8006c98:	40020428 	.word	0x40020428
 8006c9c:	40020440 	.word	0x40020440
 8006ca0:	40020458 	.word	0x40020458
 8006ca4:	40020470 	.word	0x40020470
 8006ca8:	40020488 	.word	0x40020488
 8006cac:	400204a0 	.word	0x400204a0
 8006cb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 020e 	bic.w	r2, r2, #14
 8006cc2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a6c      	ldr	r2, [pc, #432]	; (8006e7c <HAL_DMA_Abort_IT+0x3a8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d04a      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a6b      	ldr	r2, [pc, #428]	; (8006e80 <HAL_DMA_Abort_IT+0x3ac>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d045      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a69      	ldr	r2, [pc, #420]	; (8006e84 <HAL_DMA_Abort_IT+0x3b0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d040      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a68      	ldr	r2, [pc, #416]	; (8006e88 <HAL_DMA_Abort_IT+0x3b4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d03b      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a66      	ldr	r2, [pc, #408]	; (8006e8c <HAL_DMA_Abort_IT+0x3b8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d036      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a65      	ldr	r2, [pc, #404]	; (8006e90 <HAL_DMA_Abort_IT+0x3bc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d031      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a63      	ldr	r2, [pc, #396]	; (8006e94 <HAL_DMA_Abort_IT+0x3c0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d02c      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a62      	ldr	r2, [pc, #392]	; (8006e98 <HAL_DMA_Abort_IT+0x3c4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d027      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a60      	ldr	r2, [pc, #384]	; (8006e9c <HAL_DMA_Abort_IT+0x3c8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d022      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a5f      	ldr	r2, [pc, #380]	; (8006ea0 <HAL_DMA_Abort_IT+0x3cc>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d01d      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a5d      	ldr	r2, [pc, #372]	; (8006ea4 <HAL_DMA_Abort_IT+0x3d0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d018      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a5c      	ldr	r2, [pc, #368]	; (8006ea8 <HAL_DMA_Abort_IT+0x3d4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d013      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a5a      	ldr	r2, [pc, #360]	; (8006eac <HAL_DMA_Abort_IT+0x3d8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00e      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a59      	ldr	r2, [pc, #356]	; (8006eb0 <HAL_DMA_Abort_IT+0x3dc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d009      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a57      	ldr	r2, [pc, #348]	; (8006eb4 <HAL_DMA_Abort_IT+0x3e0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d004      	beq.n	8006d64 <HAL_DMA_Abort_IT+0x290>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a56      	ldr	r2, [pc, #344]	; (8006eb8 <HAL_DMA_Abort_IT+0x3e4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d108      	bne.n	8006d76 <HAL_DMA_Abort_IT+0x2a2>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0201 	bic.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e007      	b.n	8006d86 <HAL_DMA_Abort_IT+0x2b2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a3c      	ldr	r2, [pc, #240]	; (8006e7c <HAL_DMA_Abort_IT+0x3a8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d072      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a3a      	ldr	r2, [pc, #232]	; (8006e80 <HAL_DMA_Abort_IT+0x3ac>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d06d      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a39      	ldr	r2, [pc, #228]	; (8006e84 <HAL_DMA_Abort_IT+0x3b0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d068      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a37      	ldr	r2, [pc, #220]	; (8006e88 <HAL_DMA_Abort_IT+0x3b4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d063      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a36      	ldr	r2, [pc, #216]	; (8006e8c <HAL_DMA_Abort_IT+0x3b8>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d05e      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a34      	ldr	r2, [pc, #208]	; (8006e90 <HAL_DMA_Abort_IT+0x3bc>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d059      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a33      	ldr	r2, [pc, #204]	; (8006e94 <HAL_DMA_Abort_IT+0x3c0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d054      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a31      	ldr	r2, [pc, #196]	; (8006e98 <HAL_DMA_Abort_IT+0x3c4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d04f      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a30      	ldr	r2, [pc, #192]	; (8006e9c <HAL_DMA_Abort_IT+0x3c8>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d04a      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a2e      	ldr	r2, [pc, #184]	; (8006ea0 <HAL_DMA_Abort_IT+0x3cc>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d045      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2d      	ldr	r2, [pc, #180]	; (8006ea4 <HAL_DMA_Abort_IT+0x3d0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d040      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a2b      	ldr	r2, [pc, #172]	; (8006ea8 <HAL_DMA_Abort_IT+0x3d4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d03b      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a2a      	ldr	r2, [pc, #168]	; (8006eac <HAL_DMA_Abort_IT+0x3d8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d036      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a28      	ldr	r2, [pc, #160]	; (8006eb0 <HAL_DMA_Abort_IT+0x3dc>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d031      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a27      	ldr	r2, [pc, #156]	; (8006eb4 <HAL_DMA_Abort_IT+0x3e0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d02c      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a25      	ldr	r2, [pc, #148]	; (8006eb8 <HAL_DMA_Abort_IT+0x3e4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d027      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a24      	ldr	r2, [pc, #144]	; (8006ebc <HAL_DMA_Abort_IT+0x3e8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a22      	ldr	r2, [pc, #136]	; (8006ec0 <HAL_DMA_Abort_IT+0x3ec>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01d      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a21      	ldr	r2, [pc, #132]	; (8006ec4 <HAL_DMA_Abort_IT+0x3f0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1f      	ldr	r2, [pc, #124]	; (8006ec8 <HAL_DMA_Abort_IT+0x3f4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1e      	ldr	r2, [pc, #120]	; (8006ecc <HAL_DMA_Abort_IT+0x3f8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <HAL_DMA_Abort_IT+0x3fc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <HAL_DMA_Abort_IT+0x400>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_DMA_Abort_IT+0x3a2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a19      	ldr	r2, [pc, #100]	; (8006ed8 <HAL_DMA_Abort_IT+0x404>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d132      	bne.n	8006edc <HAL_DMA_Abort_IT+0x408>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e031      	b.n	8006ede <HAL_DMA_Abort_IT+0x40a>
 8006e7a:	bf00      	nop
 8006e7c:	40020010 	.word	0x40020010
 8006e80:	40020028 	.word	0x40020028
 8006e84:	40020040 	.word	0x40020040
 8006e88:	40020058 	.word	0x40020058
 8006e8c:	40020070 	.word	0x40020070
 8006e90:	40020088 	.word	0x40020088
 8006e94:	400200a0 	.word	0x400200a0
 8006e98:	400200b8 	.word	0x400200b8
 8006e9c:	40020410 	.word	0x40020410
 8006ea0:	40020428 	.word	0x40020428
 8006ea4:	40020440 	.word	0x40020440
 8006ea8:	40020458 	.word	0x40020458
 8006eac:	40020470 	.word	0x40020470
 8006eb0:	40020488 	.word	0x40020488
 8006eb4:	400204a0 	.word	0x400204a0
 8006eb8:	400204b8 	.word	0x400204b8
 8006ebc:	58025408 	.word	0x58025408
 8006ec0:	5802541c 	.word	0x5802541c
 8006ec4:	58025430 	.word	0x58025430
 8006ec8:	58025444 	.word	0x58025444
 8006ecc:	58025458 	.word	0x58025458
 8006ed0:	5802546c 	.word	0x5802546c
 8006ed4:	58025480 	.word	0x58025480
 8006ed8:	58025494 	.word	0x58025494
 8006edc:	2300      	movs	r3, #0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d028      	beq.n	8006f34 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ef0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	2201      	movs	r2, #1
 8006f02:	409a      	lsls	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00c      	beq.n	8006f34 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop

08006f60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08a      	sub	sp, #40	; 0x28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f6c:	4b67      	ldr	r3, [pc, #412]	; (800710c <HAL_DMA_IRQHandler+0x1ac>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a67      	ldr	r2, [pc, #412]	; (8007110 <HAL_DMA_IRQHandler+0x1b0>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	0a9b      	lsrs	r3, r3, #10
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a5f      	ldr	r2, [pc, #380]	; (8007114 <HAL_DMA_IRQHandler+0x1b4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d04a      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a5d      	ldr	r2, [pc, #372]	; (8007118 <HAL_DMA_IRQHandler+0x1b8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d045      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a5c      	ldr	r2, [pc, #368]	; (800711c <HAL_DMA_IRQHandler+0x1bc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d040      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a5a      	ldr	r2, [pc, #360]	; (8007120 <HAL_DMA_IRQHandler+0x1c0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d03b      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a59      	ldr	r2, [pc, #356]	; (8007124 <HAL_DMA_IRQHandler+0x1c4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d036      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a57      	ldr	r2, [pc, #348]	; (8007128 <HAL_DMA_IRQHandler+0x1c8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d031      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a56      	ldr	r2, [pc, #344]	; (800712c <HAL_DMA_IRQHandler+0x1cc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d02c      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a54      	ldr	r2, [pc, #336]	; (8007130 <HAL_DMA_IRQHandler+0x1d0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d027      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a53      	ldr	r2, [pc, #332]	; (8007134 <HAL_DMA_IRQHandler+0x1d4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d022      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a51      	ldr	r2, [pc, #324]	; (8007138 <HAL_DMA_IRQHandler+0x1d8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a50      	ldr	r2, [pc, #320]	; (800713c <HAL_DMA_IRQHandler+0x1dc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d018      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a4e      	ldr	r2, [pc, #312]	; (8007140 <HAL_DMA_IRQHandler+0x1e0>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a4d      	ldr	r2, [pc, #308]	; (8007144 <HAL_DMA_IRQHandler+0x1e4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a4b      	ldr	r2, [pc, #300]	; (8007148 <HAL_DMA_IRQHandler+0x1e8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a4a      	ldr	r2, [pc, #296]	; (800714c <HAL_DMA_IRQHandler+0x1ec>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_DMA_IRQHandler+0xd2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a48      	ldr	r2, [pc, #288]	; (8007150 <HAL_DMA_IRQHandler+0x1f0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d101      	bne.n	8007036 <HAL_DMA_IRQHandler+0xd6>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <HAL_DMA_IRQHandler+0xd8>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 842b 	beq.w	8007894 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007042:	f003 031f 	and.w	r3, r3, #31
 8007046:	2208      	movs	r2, #8
 8007048:	409a      	lsls	r2, r3
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	4013      	ands	r3, r2
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 80a2 	beq.w	8007198 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a2e      	ldr	r2, [pc, #184]	; (8007114 <HAL_DMA_IRQHandler+0x1b4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d04a      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a2d      	ldr	r2, [pc, #180]	; (8007118 <HAL_DMA_IRQHandler+0x1b8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d045      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a2b      	ldr	r2, [pc, #172]	; (800711c <HAL_DMA_IRQHandler+0x1bc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d040      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a2a      	ldr	r2, [pc, #168]	; (8007120 <HAL_DMA_IRQHandler+0x1c0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d03b      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a28      	ldr	r2, [pc, #160]	; (8007124 <HAL_DMA_IRQHandler+0x1c4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d036      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a27      	ldr	r2, [pc, #156]	; (8007128 <HAL_DMA_IRQHandler+0x1c8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d031      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a25      	ldr	r2, [pc, #148]	; (800712c <HAL_DMA_IRQHandler+0x1cc>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d02c      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a24      	ldr	r2, [pc, #144]	; (8007130 <HAL_DMA_IRQHandler+0x1d0>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d027      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a22      	ldr	r2, [pc, #136]	; (8007134 <HAL_DMA_IRQHandler+0x1d4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d022      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a21      	ldr	r2, [pc, #132]	; (8007138 <HAL_DMA_IRQHandler+0x1d8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d01d      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1f      	ldr	r2, [pc, #124]	; (800713c <HAL_DMA_IRQHandler+0x1dc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d018      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <HAL_DMA_IRQHandler+0x1e0>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1c      	ldr	r2, [pc, #112]	; (8007144 <HAL_DMA_IRQHandler+0x1e4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00e      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1b      	ldr	r2, [pc, #108]	; (8007148 <HAL_DMA_IRQHandler+0x1e8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a19      	ldr	r2, [pc, #100]	; (800714c <HAL_DMA_IRQHandler+0x1ec>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x194>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a18      	ldr	r2, [pc, #96]	; (8007150 <HAL_DMA_IRQHandler+0x1f0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d12f      	bne.n	8007154 <HAL_DMA_IRQHandler+0x1f4>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bf14      	ite	ne
 8007102:	2301      	movne	r3, #1
 8007104:	2300      	moveq	r3, #0
 8007106:	b2db      	uxtb	r3, r3
 8007108:	e02e      	b.n	8007168 <HAL_DMA_IRQHandler+0x208>
 800710a:	bf00      	nop
 800710c:	24000088 	.word	0x24000088
 8007110:	1b4e81b5 	.word	0x1b4e81b5
 8007114:	40020010 	.word	0x40020010
 8007118:	40020028 	.word	0x40020028
 800711c:	40020040 	.word	0x40020040
 8007120:	40020058 	.word	0x40020058
 8007124:	40020070 	.word	0x40020070
 8007128:	40020088 	.word	0x40020088
 800712c:	400200a0 	.word	0x400200a0
 8007130:	400200b8 	.word	0x400200b8
 8007134:	40020410 	.word	0x40020410
 8007138:	40020428 	.word	0x40020428
 800713c:	40020440 	.word	0x40020440
 8007140:	40020458 	.word	0x40020458
 8007144:	40020470 	.word	0x40020470
 8007148:	40020488 	.word	0x40020488
 800714c:	400204a0 	.word	0x400204a0
 8007150:	400204b8 	.word	0x400204b8
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	bf14      	ite	ne
 8007162:	2301      	movne	r3, #1
 8007164:	2300      	moveq	r3, #0
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d015      	beq.n	8007198 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0204 	bic.w	r2, r2, #4
 800717a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007180:	f003 031f 	and.w	r3, r3, #31
 8007184:	2208      	movs	r2, #8
 8007186:	409a      	lsls	r2, r3
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007190:	f043 0201 	orr.w	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	fa22 f303 	lsr.w	r3, r2, r3
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d06e      	beq.n	800728c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a69      	ldr	r2, [pc, #420]	; (8007358 <HAL_DMA_IRQHandler+0x3f8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d04a      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a67      	ldr	r2, [pc, #412]	; (800735c <HAL_DMA_IRQHandler+0x3fc>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d045      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a66      	ldr	r2, [pc, #408]	; (8007360 <HAL_DMA_IRQHandler+0x400>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d040      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a64      	ldr	r2, [pc, #400]	; (8007364 <HAL_DMA_IRQHandler+0x404>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d03b      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a63      	ldr	r2, [pc, #396]	; (8007368 <HAL_DMA_IRQHandler+0x408>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d036      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a61      	ldr	r2, [pc, #388]	; (800736c <HAL_DMA_IRQHandler+0x40c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d031      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a60      	ldr	r2, [pc, #384]	; (8007370 <HAL_DMA_IRQHandler+0x410>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d02c      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a5e      	ldr	r2, [pc, #376]	; (8007374 <HAL_DMA_IRQHandler+0x414>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d027      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a5d      	ldr	r2, [pc, #372]	; (8007378 <HAL_DMA_IRQHandler+0x418>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d022      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a5b      	ldr	r2, [pc, #364]	; (800737c <HAL_DMA_IRQHandler+0x41c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01d      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a5a      	ldr	r2, [pc, #360]	; (8007380 <HAL_DMA_IRQHandler+0x420>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d018      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a58      	ldr	r2, [pc, #352]	; (8007384 <HAL_DMA_IRQHandler+0x424>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a57      	ldr	r2, [pc, #348]	; (8007388 <HAL_DMA_IRQHandler+0x428>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00e      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a55      	ldr	r2, [pc, #340]	; (800738c <HAL_DMA_IRQHandler+0x42c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d009      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a54      	ldr	r2, [pc, #336]	; (8007390 <HAL_DMA_IRQHandler+0x430>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d004      	beq.n	800724e <HAL_DMA_IRQHandler+0x2ee>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a52      	ldr	r2, [pc, #328]	; (8007394 <HAL_DMA_IRQHandler+0x434>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d10a      	bne.n	8007264 <HAL_DMA_IRQHandler+0x304>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007258:	2b00      	cmp	r3, #0
 800725a:	bf14      	ite	ne
 800725c:	2301      	movne	r3, #1
 800725e:	2300      	moveq	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	e003      	b.n	800726c <HAL_DMA_IRQHandler+0x30c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2300      	movs	r3, #0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00d      	beq.n	800728c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007274:	f003 031f 	and.w	r3, r3, #31
 8007278:	2201      	movs	r2, #1
 800727a:	409a      	lsls	r2, r3
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007284:	f043 0202 	orr.w	r2, r3, #2
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007290:	f003 031f 	and.w	r3, r3, #31
 8007294:	2204      	movs	r2, #4
 8007296:	409a      	lsls	r2, r3
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	4013      	ands	r3, r2
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 808f 	beq.w	80073c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a2c      	ldr	r2, [pc, #176]	; (8007358 <HAL_DMA_IRQHandler+0x3f8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d04a      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a2a      	ldr	r2, [pc, #168]	; (800735c <HAL_DMA_IRQHandler+0x3fc>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d045      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a29      	ldr	r2, [pc, #164]	; (8007360 <HAL_DMA_IRQHandler+0x400>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d040      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a27      	ldr	r2, [pc, #156]	; (8007364 <HAL_DMA_IRQHandler+0x404>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d03b      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a26      	ldr	r2, [pc, #152]	; (8007368 <HAL_DMA_IRQHandler+0x408>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d036      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a24      	ldr	r2, [pc, #144]	; (800736c <HAL_DMA_IRQHandler+0x40c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d031      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a23      	ldr	r2, [pc, #140]	; (8007370 <HAL_DMA_IRQHandler+0x410>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d02c      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a21      	ldr	r2, [pc, #132]	; (8007374 <HAL_DMA_IRQHandler+0x414>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d027      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a20      	ldr	r2, [pc, #128]	; (8007378 <HAL_DMA_IRQHandler+0x418>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d022      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1e      	ldr	r2, [pc, #120]	; (800737c <HAL_DMA_IRQHandler+0x41c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01d      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <HAL_DMA_IRQHandler+0x420>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d018      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1b      	ldr	r2, [pc, #108]	; (8007384 <HAL_DMA_IRQHandler+0x424>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d013      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a1a      	ldr	r2, [pc, #104]	; (8007388 <HAL_DMA_IRQHandler+0x428>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a18      	ldr	r2, [pc, #96]	; (800738c <HAL_DMA_IRQHandler+0x42c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a17      	ldr	r2, [pc, #92]	; (8007390 <HAL_DMA_IRQHandler+0x430>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_DMA_IRQHandler+0x3e2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a15      	ldr	r2, [pc, #84]	; (8007394 <HAL_DMA_IRQHandler+0x434>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d12a      	bne.n	8007398 <HAL_DMA_IRQHandler+0x438>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	bf14      	ite	ne
 8007350:	2301      	movne	r3, #1
 8007352:	2300      	moveq	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	e023      	b.n	80073a0 <HAL_DMA_IRQHandler+0x440>
 8007358:	40020010 	.word	0x40020010
 800735c:	40020028 	.word	0x40020028
 8007360:	40020040 	.word	0x40020040
 8007364:	40020058 	.word	0x40020058
 8007368:	40020070 	.word	0x40020070
 800736c:	40020088 	.word	0x40020088
 8007370:	400200a0 	.word	0x400200a0
 8007374:	400200b8 	.word	0x400200b8
 8007378:	40020410 	.word	0x40020410
 800737c:	40020428 	.word	0x40020428
 8007380:	40020440 	.word	0x40020440
 8007384:	40020458 	.word	0x40020458
 8007388:	40020470 	.word	0x40020470
 800738c:	40020488 	.word	0x40020488
 8007390:	400204a0 	.word	0x400204a0
 8007394:	400204b8 	.word	0x400204b8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00d      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	2204      	movs	r2, #4
 80073ae:	409a      	lsls	r2, r3
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b8:	f043 0204 	orr.w	r2, r3, #4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2210      	movs	r2, #16
 80073ca:	409a      	lsls	r2, r3
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	4013      	ands	r3, r2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80a6 	beq.w	8007522 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a85      	ldr	r2, [pc, #532]	; (80075f0 <HAL_DMA_IRQHandler+0x690>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d04a      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a83      	ldr	r2, [pc, #524]	; (80075f4 <HAL_DMA_IRQHandler+0x694>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d045      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a82      	ldr	r2, [pc, #520]	; (80075f8 <HAL_DMA_IRQHandler+0x698>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d040      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a80      	ldr	r2, [pc, #512]	; (80075fc <HAL_DMA_IRQHandler+0x69c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d03b      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a7f      	ldr	r2, [pc, #508]	; (8007600 <HAL_DMA_IRQHandler+0x6a0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d036      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a7d      	ldr	r2, [pc, #500]	; (8007604 <HAL_DMA_IRQHandler+0x6a4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d031      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a7c      	ldr	r2, [pc, #496]	; (8007608 <HAL_DMA_IRQHandler+0x6a8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d02c      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a7a      	ldr	r2, [pc, #488]	; (800760c <HAL_DMA_IRQHandler+0x6ac>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d027      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a79      	ldr	r2, [pc, #484]	; (8007610 <HAL_DMA_IRQHandler+0x6b0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d022      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a77      	ldr	r2, [pc, #476]	; (8007614 <HAL_DMA_IRQHandler+0x6b4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01d      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a76      	ldr	r2, [pc, #472]	; (8007618 <HAL_DMA_IRQHandler+0x6b8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d018      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a74      	ldr	r2, [pc, #464]	; (800761c <HAL_DMA_IRQHandler+0x6bc>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d013      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a73      	ldr	r2, [pc, #460]	; (8007620 <HAL_DMA_IRQHandler+0x6c0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00e      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a71      	ldr	r2, [pc, #452]	; (8007624 <HAL_DMA_IRQHandler+0x6c4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d009      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a70      	ldr	r2, [pc, #448]	; (8007628 <HAL_DMA_IRQHandler+0x6c8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d004      	beq.n	8007476 <HAL_DMA_IRQHandler+0x516>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a6e      	ldr	r2, [pc, #440]	; (800762c <HAL_DMA_IRQHandler+0x6cc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d10a      	bne.n	800748c <HAL_DMA_IRQHandler+0x52c>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	bf14      	ite	ne
 8007484:	2301      	movne	r3, #1
 8007486:	2300      	moveq	r3, #0
 8007488:	b2db      	uxtb	r3, r3
 800748a:	e009      	b.n	80074a0 <HAL_DMA_IRQHandler+0x540>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	bf14      	ite	ne
 800749a:	2301      	movne	r3, #1
 800749c:	2300      	moveq	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d03e      	beq.n	8007522 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2210      	movs	r2, #16
 80074ae:	409a      	lsls	r2, r3
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d018      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d108      	bne.n	80074e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d024      	beq.n	8007522 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	4798      	blx	r3
 80074e0:	e01f      	b.n	8007522 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01b      	beq.n	8007522 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
 80074f2:	e016      	b.n	8007522 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d107      	bne.n	8007512 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0208 	bic.w	r2, r2, #8
 8007510:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	2220      	movs	r2, #32
 800752c:	409a      	lsls	r2, r3
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	4013      	ands	r3, r2
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 8110 	beq.w	8007758 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2c      	ldr	r2, [pc, #176]	; (80075f0 <HAL_DMA_IRQHandler+0x690>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d04a      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a2b      	ldr	r2, [pc, #172]	; (80075f4 <HAL_DMA_IRQHandler+0x694>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d045      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a29      	ldr	r2, [pc, #164]	; (80075f8 <HAL_DMA_IRQHandler+0x698>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d040      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a28      	ldr	r2, [pc, #160]	; (80075fc <HAL_DMA_IRQHandler+0x69c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d03b      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a26      	ldr	r2, [pc, #152]	; (8007600 <HAL_DMA_IRQHandler+0x6a0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d036      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a25      	ldr	r2, [pc, #148]	; (8007604 <HAL_DMA_IRQHandler+0x6a4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d031      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a23      	ldr	r2, [pc, #140]	; (8007608 <HAL_DMA_IRQHandler+0x6a8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d02c      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a22      	ldr	r2, [pc, #136]	; (800760c <HAL_DMA_IRQHandler+0x6ac>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d027      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a20      	ldr	r2, [pc, #128]	; (8007610 <HAL_DMA_IRQHandler+0x6b0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d022      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1f      	ldr	r2, [pc, #124]	; (8007614 <HAL_DMA_IRQHandler+0x6b4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d01d      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a1d      	ldr	r2, [pc, #116]	; (8007618 <HAL_DMA_IRQHandler+0x6b8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d018      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a1c      	ldr	r2, [pc, #112]	; (800761c <HAL_DMA_IRQHandler+0x6bc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d013      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a1a      	ldr	r2, [pc, #104]	; (8007620 <HAL_DMA_IRQHandler+0x6c0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00e      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a19      	ldr	r2, [pc, #100]	; (8007624 <HAL_DMA_IRQHandler+0x6c4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d009      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a17      	ldr	r2, [pc, #92]	; (8007628 <HAL_DMA_IRQHandler+0x6c8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d004      	beq.n	80075d8 <HAL_DMA_IRQHandler+0x678>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a16      	ldr	r2, [pc, #88]	; (800762c <HAL_DMA_IRQHandler+0x6cc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d12b      	bne.n	8007630 <HAL_DMA_IRQHandler+0x6d0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bf14      	ite	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	2300      	moveq	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	e02a      	b.n	8007644 <HAL_DMA_IRQHandler+0x6e4>
 80075ee:	bf00      	nop
 80075f0:	40020010 	.word	0x40020010
 80075f4:	40020028 	.word	0x40020028
 80075f8:	40020040 	.word	0x40020040
 80075fc:	40020058 	.word	0x40020058
 8007600:	40020070 	.word	0x40020070
 8007604:	40020088 	.word	0x40020088
 8007608:	400200a0 	.word	0x400200a0
 800760c:	400200b8 	.word	0x400200b8
 8007610:	40020410 	.word	0x40020410
 8007614:	40020428 	.word	0x40020428
 8007618:	40020440 	.word	0x40020440
 800761c:	40020458 	.word	0x40020458
 8007620:	40020470 	.word	0x40020470
 8007624:	40020488 	.word	0x40020488
 8007628:	400204a0 	.word	0x400204a0
 800762c:	400204b8 	.word	0x400204b8
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	bf14      	ite	ne
 800763e:	2301      	movne	r3, #1
 8007640:	2300      	moveq	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 8087 	beq.w	8007758 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764e:	f003 031f 	and.w	r3, r3, #31
 8007652:	2220      	movs	r2, #32
 8007654:	409a      	lsls	r2, r3
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b04      	cmp	r3, #4
 8007664:	d139      	bne.n	80076da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0216 	bic.w	r2, r2, #22
 8007674:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	695a      	ldr	r2, [r3, #20]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007684:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d103      	bne.n	8007696 <HAL_DMA_IRQHandler+0x736>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007692:	2b00      	cmp	r3, #0
 8007694:	d007      	beq.n	80076a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0208 	bic.w	r2, r2, #8
 80076a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076aa:	f003 031f 	and.w	r3, r3, #31
 80076ae:	223f      	movs	r2, #63	; 0x3f
 80076b0:	409a      	lsls	r2, r3
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 834a 	beq.w	8007d64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4798      	blx	r3
          }
          return;
 80076d8:	e344      	b.n	8007d64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d018      	beq.n	800771a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d108      	bne.n	8007708 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d02c      	beq.n	8007758 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	4798      	blx	r3
 8007706:	e027      	b.n	8007758 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d023      	beq.n	8007758 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	4798      	blx	r3
 8007718:	e01e      	b.n	8007758 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10f      	bne.n	8007748 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0210 	bic.w	r2, r2, #16
 8007736:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 8306 	beq.w	8007d6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8088 	beq.w	8007880 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2204      	movs	r2, #4
 8007774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a7a      	ldr	r2, [pc, #488]	; (8007968 <HAL_DMA_IRQHandler+0xa08>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d04a      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a79      	ldr	r2, [pc, #484]	; (800796c <HAL_DMA_IRQHandler+0xa0c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d045      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a77      	ldr	r2, [pc, #476]	; (8007970 <HAL_DMA_IRQHandler+0xa10>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d040      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a76      	ldr	r2, [pc, #472]	; (8007974 <HAL_DMA_IRQHandler+0xa14>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d03b      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a74      	ldr	r2, [pc, #464]	; (8007978 <HAL_DMA_IRQHandler+0xa18>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d036      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a73      	ldr	r2, [pc, #460]	; (800797c <HAL_DMA_IRQHandler+0xa1c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d031      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a71      	ldr	r2, [pc, #452]	; (8007980 <HAL_DMA_IRQHandler+0xa20>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d02c      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a70      	ldr	r2, [pc, #448]	; (8007984 <HAL_DMA_IRQHandler+0xa24>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d027      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a6e      	ldr	r2, [pc, #440]	; (8007988 <HAL_DMA_IRQHandler+0xa28>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d022      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a6d      	ldr	r2, [pc, #436]	; (800798c <HAL_DMA_IRQHandler+0xa2c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d01d      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a6b      	ldr	r2, [pc, #428]	; (8007990 <HAL_DMA_IRQHandler+0xa30>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d018      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a6a      	ldr	r2, [pc, #424]	; (8007994 <HAL_DMA_IRQHandler+0xa34>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d013      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a68      	ldr	r2, [pc, #416]	; (8007998 <HAL_DMA_IRQHandler+0xa38>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00e      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a67      	ldr	r2, [pc, #412]	; (800799c <HAL_DMA_IRQHandler+0xa3c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d009      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a65      	ldr	r2, [pc, #404]	; (80079a0 <HAL_DMA_IRQHandler+0xa40>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d004      	beq.n	8007818 <HAL_DMA_IRQHandler+0x8b8>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a64      	ldr	r2, [pc, #400]	; (80079a4 <HAL_DMA_IRQHandler+0xa44>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d108      	bne.n	800782a <HAL_DMA_IRQHandler+0x8ca>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0201 	bic.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	e007      	b.n	800783a <HAL_DMA_IRQHandler+0x8da>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0201 	bic.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007842:	429a      	cmp	r2, r3
 8007844:	d307      	bcc.n	8007856 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f2      	bne.n	800783a <HAL_DMA_IRQHandler+0x8da>
 8007854:	e000      	b.n	8007858 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007856:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2203      	movs	r2, #3
 800786a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800786e:	e003      	b.n	8007878 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8272 	beq.w	8007d6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
 8007892:	e26c      	b.n	8007d6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a43      	ldr	r2, [pc, #268]	; (80079a8 <HAL_DMA_IRQHandler+0xa48>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d022      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x984>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a42      	ldr	r2, [pc, #264]	; (80079ac <HAL_DMA_IRQHandler+0xa4c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d01d      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x984>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a40      	ldr	r2, [pc, #256]	; (80079b0 <HAL_DMA_IRQHandler+0xa50>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d018      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x984>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a3f      	ldr	r2, [pc, #252]	; (80079b4 <HAL_DMA_IRQHandler+0xa54>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d013      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x984>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a3d      	ldr	r2, [pc, #244]	; (80079b8 <HAL_DMA_IRQHandler+0xa58>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00e      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x984>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a3c      	ldr	r2, [pc, #240]	; (80079bc <HAL_DMA_IRQHandler+0xa5c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d009      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x984>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a3a      	ldr	r2, [pc, #232]	; (80079c0 <HAL_DMA_IRQHandler+0xa60>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d004      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x984>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a39      	ldr	r2, [pc, #228]	; (80079c4 <HAL_DMA_IRQHandler+0xa64>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d101      	bne.n	80078e8 <HAL_DMA_IRQHandler+0x988>
 80078e4:	2301      	movs	r3, #1
 80078e6:	e000      	b.n	80078ea <HAL_DMA_IRQHandler+0x98a>
 80078e8:	2300      	movs	r3, #0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 823f 	beq.w	8007d6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fc:	f003 031f 	and.w	r3, r3, #31
 8007900:	2204      	movs	r2, #4
 8007902:	409a      	lsls	r2, r3
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	4013      	ands	r3, r2
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 80cd 	beq.w	8007aa8 <HAL_DMA_IRQHandler+0xb48>
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 80c7 	beq.w	8007aa8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	2204      	movs	r2, #4
 8007924:	409a      	lsls	r2, r3
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d049      	beq.n	80079c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d109      	bne.n	8007952 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8210 	beq.w	8007d68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007950:	e20a      	b.n	8007d68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8206 	beq.w	8007d68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007964:	e200      	b.n	8007d68 <HAL_DMA_IRQHandler+0xe08>
 8007966:	bf00      	nop
 8007968:	40020010 	.word	0x40020010
 800796c:	40020028 	.word	0x40020028
 8007970:	40020040 	.word	0x40020040
 8007974:	40020058 	.word	0x40020058
 8007978:	40020070 	.word	0x40020070
 800797c:	40020088 	.word	0x40020088
 8007980:	400200a0 	.word	0x400200a0
 8007984:	400200b8 	.word	0x400200b8
 8007988:	40020410 	.word	0x40020410
 800798c:	40020428 	.word	0x40020428
 8007990:	40020440 	.word	0x40020440
 8007994:	40020458 	.word	0x40020458
 8007998:	40020470 	.word	0x40020470
 800799c:	40020488 	.word	0x40020488
 80079a0:	400204a0 	.word	0x400204a0
 80079a4:	400204b8 	.word	0x400204b8
 80079a8:	58025408 	.word	0x58025408
 80079ac:	5802541c 	.word	0x5802541c
 80079b0:	58025430 	.word	0x58025430
 80079b4:	58025444 	.word	0x58025444
 80079b8:	58025458 	.word	0x58025458
 80079bc:	5802546c 	.word	0x5802546c
 80079c0:	58025480 	.word	0x58025480
 80079c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d160      	bne.n	8007a94 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a7f      	ldr	r2, [pc, #508]	; (8007bd4 <HAL_DMA_IRQHandler+0xc74>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d04a      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a7d      	ldr	r2, [pc, #500]	; (8007bd8 <HAL_DMA_IRQHandler+0xc78>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d045      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a7c      	ldr	r2, [pc, #496]	; (8007bdc <HAL_DMA_IRQHandler+0xc7c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d040      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a7a      	ldr	r2, [pc, #488]	; (8007be0 <HAL_DMA_IRQHandler+0xc80>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d03b      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a79      	ldr	r2, [pc, #484]	; (8007be4 <HAL_DMA_IRQHandler+0xc84>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d036      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a77      	ldr	r2, [pc, #476]	; (8007be8 <HAL_DMA_IRQHandler+0xc88>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d031      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a76      	ldr	r2, [pc, #472]	; (8007bec <HAL_DMA_IRQHandler+0xc8c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d02c      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a74      	ldr	r2, [pc, #464]	; (8007bf0 <HAL_DMA_IRQHandler+0xc90>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d027      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a73      	ldr	r2, [pc, #460]	; (8007bf4 <HAL_DMA_IRQHandler+0xc94>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d022      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a71      	ldr	r2, [pc, #452]	; (8007bf8 <HAL_DMA_IRQHandler+0xc98>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d01d      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a70      	ldr	r2, [pc, #448]	; (8007bfc <HAL_DMA_IRQHandler+0xc9c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d018      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a6e      	ldr	r2, [pc, #440]	; (8007c00 <HAL_DMA_IRQHandler+0xca0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d013      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a6d      	ldr	r2, [pc, #436]	; (8007c04 <HAL_DMA_IRQHandler+0xca4>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00e      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a6b      	ldr	r2, [pc, #428]	; (8007c08 <HAL_DMA_IRQHandler+0xca8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d009      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a6a      	ldr	r2, [pc, #424]	; (8007c0c <HAL_DMA_IRQHandler+0xcac>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d004      	beq.n	8007a72 <HAL_DMA_IRQHandler+0xb12>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a68      	ldr	r2, [pc, #416]	; (8007c10 <HAL_DMA_IRQHandler+0xcb0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d108      	bne.n	8007a84 <HAL_DMA_IRQHandler+0xb24>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0208 	bic.w	r2, r2, #8
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	e007      	b.n	8007a94 <HAL_DMA_IRQHandler+0xb34>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0204 	bic.w	r2, r2, #4
 8007a92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8165 	beq.w	8007d68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aa6:	e15f      	b.n	8007d68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	409a      	lsls	r2, r3
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80c5 	beq.w	8007c48 <HAL_DMA_IRQHandler+0xce8>
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80bf 	beq.w	8007c48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ace:	f003 031f 	and.w	r3, r3, #31
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	409a      	lsls	r2, r3
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d018      	beq.n	8007b16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 813a 	beq.w	8007d6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b00:	e134      	b.n	8007d6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8130 	beq.w	8007d6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b14:	e12a      	b.n	8007d6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f003 0320 	and.w	r3, r3, #32
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f040 8089 	bne.w	8007c34 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a2b      	ldr	r2, [pc, #172]	; (8007bd4 <HAL_DMA_IRQHandler+0xc74>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d04a      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a29      	ldr	r2, [pc, #164]	; (8007bd8 <HAL_DMA_IRQHandler+0xc78>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d045      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a28      	ldr	r2, [pc, #160]	; (8007bdc <HAL_DMA_IRQHandler+0xc7c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d040      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <HAL_DMA_IRQHandler+0xc80>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d03b      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a25      	ldr	r2, [pc, #148]	; (8007be4 <HAL_DMA_IRQHandler+0xc84>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d036      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a23      	ldr	r2, [pc, #140]	; (8007be8 <HAL_DMA_IRQHandler+0xc88>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d031      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a22      	ldr	r2, [pc, #136]	; (8007bec <HAL_DMA_IRQHandler+0xc8c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d02c      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a20      	ldr	r2, [pc, #128]	; (8007bf0 <HAL_DMA_IRQHandler+0xc90>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d027      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1f      	ldr	r2, [pc, #124]	; (8007bf4 <HAL_DMA_IRQHandler+0xc94>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d022      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1d      	ldr	r2, [pc, #116]	; (8007bf8 <HAL_DMA_IRQHandler+0xc98>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01d      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a1c      	ldr	r2, [pc, #112]	; (8007bfc <HAL_DMA_IRQHandler+0xc9c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d018      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a1a      	ldr	r2, [pc, #104]	; (8007c00 <HAL_DMA_IRQHandler+0xca0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a19      	ldr	r2, [pc, #100]	; (8007c04 <HAL_DMA_IRQHandler+0xca4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a17      	ldr	r2, [pc, #92]	; (8007c08 <HAL_DMA_IRQHandler+0xca8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <HAL_DMA_IRQHandler+0xcac>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xc62>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a14      	ldr	r2, [pc, #80]	; (8007c10 <HAL_DMA_IRQHandler+0xcb0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d128      	bne.n	8007c14 <HAL_DMA_IRQHandler+0xcb4>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0214 	bic.w	r2, r2, #20
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	e027      	b.n	8007c24 <HAL_DMA_IRQHandler+0xcc4>
 8007bd4:	40020010 	.word	0x40020010
 8007bd8:	40020028 	.word	0x40020028
 8007bdc:	40020040 	.word	0x40020040
 8007be0:	40020058 	.word	0x40020058
 8007be4:	40020070 	.word	0x40020070
 8007be8:	40020088 	.word	0x40020088
 8007bec:	400200a0 	.word	0x400200a0
 8007bf0:	400200b8 	.word	0x400200b8
 8007bf4:	40020410 	.word	0x40020410
 8007bf8:	40020428 	.word	0x40020428
 8007bfc:	40020440 	.word	0x40020440
 8007c00:	40020458 	.word	0x40020458
 8007c04:	40020470 	.word	0x40020470
 8007c08:	40020488 	.word	0x40020488
 8007c0c:	400204a0 	.word	0x400204a0
 8007c10:	400204b8 	.word	0x400204b8
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 020a 	bic.w	r2, r2, #10
 8007c22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8097 	beq.w	8007d6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c46:	e091      	b.n	8007d6c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	f003 031f 	and.w	r3, r3, #31
 8007c50:	2208      	movs	r2, #8
 8007c52:	409a      	lsls	r2, r3
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	4013      	ands	r3, r2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8088 	beq.w	8007d6e <HAL_DMA_IRQHandler+0xe0e>
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 8082 	beq.w	8007d6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a41      	ldr	r2, [pc, #260]	; (8007d74 <HAL_DMA_IRQHandler+0xe14>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d04a      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a3f      	ldr	r2, [pc, #252]	; (8007d78 <HAL_DMA_IRQHandler+0xe18>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d045      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a3e      	ldr	r2, [pc, #248]	; (8007d7c <HAL_DMA_IRQHandler+0xe1c>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d040      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a3c      	ldr	r2, [pc, #240]	; (8007d80 <HAL_DMA_IRQHandler+0xe20>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d03b      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a3b      	ldr	r2, [pc, #236]	; (8007d84 <HAL_DMA_IRQHandler+0xe24>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d036      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a39      	ldr	r2, [pc, #228]	; (8007d88 <HAL_DMA_IRQHandler+0xe28>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d031      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a38      	ldr	r2, [pc, #224]	; (8007d8c <HAL_DMA_IRQHandler+0xe2c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d02c      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a36      	ldr	r2, [pc, #216]	; (8007d90 <HAL_DMA_IRQHandler+0xe30>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d027      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a35      	ldr	r2, [pc, #212]	; (8007d94 <HAL_DMA_IRQHandler+0xe34>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d022      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a33      	ldr	r2, [pc, #204]	; (8007d98 <HAL_DMA_IRQHandler+0xe38>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d01d      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a32      	ldr	r2, [pc, #200]	; (8007d9c <HAL_DMA_IRQHandler+0xe3c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d018      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a30      	ldr	r2, [pc, #192]	; (8007da0 <HAL_DMA_IRQHandler+0xe40>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d013      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a2f      	ldr	r2, [pc, #188]	; (8007da4 <HAL_DMA_IRQHandler+0xe44>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00e      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a2d      	ldr	r2, [pc, #180]	; (8007da8 <HAL_DMA_IRQHandler+0xe48>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d009      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a2c      	ldr	r2, [pc, #176]	; (8007dac <HAL_DMA_IRQHandler+0xe4c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d004      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xdaa>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a2a      	ldr	r2, [pc, #168]	; (8007db0 <HAL_DMA_IRQHandler+0xe50>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d108      	bne.n	8007d1c <HAL_DMA_IRQHandler+0xdbc>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 021c 	bic.w	r2, r2, #28
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e007      	b.n	8007d2c <HAL_DMA_IRQHandler+0xdcc>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 020e 	bic.w	r2, r2, #14
 8007d2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d30:	f003 031f 	and.w	r3, r3, #31
 8007d34:	2201      	movs	r2, #1
 8007d36:	409a      	lsls	r2, r3
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
 8007d62:	e004      	b.n	8007d6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007d64:	bf00      	nop
 8007d66:	e002      	b.n	8007d6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d68:	bf00      	nop
 8007d6a:	e000      	b.n	8007d6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007d6e:	3728      	adds	r7, #40	; 0x28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	40020010 	.word	0x40020010
 8007d78:	40020028 	.word	0x40020028
 8007d7c:	40020040 	.word	0x40020040
 8007d80:	40020058 	.word	0x40020058
 8007d84:	40020070 	.word	0x40020070
 8007d88:	40020088 	.word	0x40020088
 8007d8c:	400200a0 	.word	0x400200a0
 8007d90:	400200b8 	.word	0x400200b8
 8007d94:	40020410 	.word	0x40020410
 8007d98:	40020428 	.word	0x40020428
 8007d9c:	40020440 	.word	0x40020440
 8007da0:	40020458 	.word	0x40020458
 8007da4:	40020470 	.word	0x40020470
 8007da8:	40020488 	.word	0x40020488
 8007dac:	400204a0 	.word	0x400204a0
 8007db0:	400204b8 	.word	0x400204b8

08007db4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dcc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a7f      	ldr	r2, [pc, #508]	; (8007fd0 <DMA_SetConfig+0x21c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d072      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a7d      	ldr	r2, [pc, #500]	; (8007fd4 <DMA_SetConfig+0x220>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d06d      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a7c      	ldr	r2, [pc, #496]	; (8007fd8 <DMA_SetConfig+0x224>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d068      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a7a      	ldr	r2, [pc, #488]	; (8007fdc <DMA_SetConfig+0x228>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d063      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a79      	ldr	r2, [pc, #484]	; (8007fe0 <DMA_SetConfig+0x22c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d05e      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a77      	ldr	r2, [pc, #476]	; (8007fe4 <DMA_SetConfig+0x230>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d059      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a76      	ldr	r2, [pc, #472]	; (8007fe8 <DMA_SetConfig+0x234>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d054      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a74      	ldr	r2, [pc, #464]	; (8007fec <DMA_SetConfig+0x238>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d04f      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a73      	ldr	r2, [pc, #460]	; (8007ff0 <DMA_SetConfig+0x23c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d04a      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a71      	ldr	r2, [pc, #452]	; (8007ff4 <DMA_SetConfig+0x240>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d045      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a70      	ldr	r2, [pc, #448]	; (8007ff8 <DMA_SetConfig+0x244>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d040      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a6e      	ldr	r2, [pc, #440]	; (8007ffc <DMA_SetConfig+0x248>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d03b      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a6d      	ldr	r2, [pc, #436]	; (8008000 <DMA_SetConfig+0x24c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d036      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a6b      	ldr	r2, [pc, #428]	; (8008004 <DMA_SetConfig+0x250>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d031      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a6a      	ldr	r2, [pc, #424]	; (8008008 <DMA_SetConfig+0x254>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d02c      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a68      	ldr	r2, [pc, #416]	; (800800c <DMA_SetConfig+0x258>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d027      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a67      	ldr	r2, [pc, #412]	; (8008010 <DMA_SetConfig+0x25c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d022      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a65      	ldr	r2, [pc, #404]	; (8008014 <DMA_SetConfig+0x260>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d01d      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a64      	ldr	r2, [pc, #400]	; (8008018 <DMA_SetConfig+0x264>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d018      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a62      	ldr	r2, [pc, #392]	; (800801c <DMA_SetConfig+0x268>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d013      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a61      	ldr	r2, [pc, #388]	; (8008020 <DMA_SetConfig+0x26c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00e      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a5f      	ldr	r2, [pc, #380]	; (8008024 <DMA_SetConfig+0x270>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d009      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a5e      	ldr	r2, [pc, #376]	; (8008028 <DMA_SetConfig+0x274>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d004      	beq.n	8007ebe <DMA_SetConfig+0x10a>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a5c      	ldr	r2, [pc, #368]	; (800802c <DMA_SetConfig+0x278>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d101      	bne.n	8007ec2 <DMA_SetConfig+0x10e>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <DMA_SetConfig+0x110>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00d      	beq.n	8007ee4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ed0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ee2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a39      	ldr	r2, [pc, #228]	; (8007fd0 <DMA_SetConfig+0x21c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d04a      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a38      	ldr	r2, [pc, #224]	; (8007fd4 <DMA_SetConfig+0x220>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d045      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a36      	ldr	r2, [pc, #216]	; (8007fd8 <DMA_SetConfig+0x224>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d040      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a35      	ldr	r2, [pc, #212]	; (8007fdc <DMA_SetConfig+0x228>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d03b      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a33      	ldr	r2, [pc, #204]	; (8007fe0 <DMA_SetConfig+0x22c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d036      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a32      	ldr	r2, [pc, #200]	; (8007fe4 <DMA_SetConfig+0x230>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d031      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a30      	ldr	r2, [pc, #192]	; (8007fe8 <DMA_SetConfig+0x234>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d02c      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a2f      	ldr	r2, [pc, #188]	; (8007fec <DMA_SetConfig+0x238>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d027      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a2d      	ldr	r2, [pc, #180]	; (8007ff0 <DMA_SetConfig+0x23c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d022      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a2c      	ldr	r2, [pc, #176]	; (8007ff4 <DMA_SetConfig+0x240>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d01d      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a2a      	ldr	r2, [pc, #168]	; (8007ff8 <DMA_SetConfig+0x244>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d018      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a29      	ldr	r2, [pc, #164]	; (8007ffc <DMA_SetConfig+0x248>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d013      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a27      	ldr	r2, [pc, #156]	; (8008000 <DMA_SetConfig+0x24c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00e      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a26      	ldr	r2, [pc, #152]	; (8008004 <DMA_SetConfig+0x250>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d009      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a24      	ldr	r2, [pc, #144]	; (8008008 <DMA_SetConfig+0x254>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d004      	beq.n	8007f84 <DMA_SetConfig+0x1d0>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a23      	ldr	r2, [pc, #140]	; (800800c <DMA_SetConfig+0x258>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d101      	bne.n	8007f88 <DMA_SetConfig+0x1d4>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e000      	b.n	8007f8a <DMA_SetConfig+0x1d6>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d059      	beq.n	8008042 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f92:	f003 031f 	and.w	r3, r3, #31
 8007f96:	223f      	movs	r2, #63	; 0x3f
 8007f98:	409a      	lsls	r2, r3
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b40      	cmp	r3, #64	; 0x40
 8007fbc:	d138      	bne.n	8008030 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007fce:	e086      	b.n	80080de <DMA_SetConfig+0x32a>
 8007fd0:	40020010 	.word	0x40020010
 8007fd4:	40020028 	.word	0x40020028
 8007fd8:	40020040 	.word	0x40020040
 8007fdc:	40020058 	.word	0x40020058
 8007fe0:	40020070 	.word	0x40020070
 8007fe4:	40020088 	.word	0x40020088
 8007fe8:	400200a0 	.word	0x400200a0
 8007fec:	400200b8 	.word	0x400200b8
 8007ff0:	40020410 	.word	0x40020410
 8007ff4:	40020428 	.word	0x40020428
 8007ff8:	40020440 	.word	0x40020440
 8007ffc:	40020458 	.word	0x40020458
 8008000:	40020470 	.word	0x40020470
 8008004:	40020488 	.word	0x40020488
 8008008:	400204a0 	.word	0x400204a0
 800800c:	400204b8 	.word	0x400204b8
 8008010:	58025408 	.word	0x58025408
 8008014:	5802541c 	.word	0x5802541c
 8008018:	58025430 	.word	0x58025430
 800801c:	58025444 	.word	0x58025444
 8008020:	58025458 	.word	0x58025458
 8008024:	5802546c 	.word	0x5802546c
 8008028:	58025480 	.word	0x58025480
 800802c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	60da      	str	r2, [r3, #12]
}
 8008040:	e04d      	b.n	80080de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a29      	ldr	r2, [pc, #164]	; (80080ec <DMA_SetConfig+0x338>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d022      	beq.n	8008092 <DMA_SetConfig+0x2de>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a27      	ldr	r2, [pc, #156]	; (80080f0 <DMA_SetConfig+0x33c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d01d      	beq.n	8008092 <DMA_SetConfig+0x2de>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a26      	ldr	r2, [pc, #152]	; (80080f4 <DMA_SetConfig+0x340>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d018      	beq.n	8008092 <DMA_SetConfig+0x2de>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a24      	ldr	r2, [pc, #144]	; (80080f8 <DMA_SetConfig+0x344>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <DMA_SetConfig+0x2de>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a23      	ldr	r2, [pc, #140]	; (80080fc <DMA_SetConfig+0x348>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00e      	beq.n	8008092 <DMA_SetConfig+0x2de>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a21      	ldr	r2, [pc, #132]	; (8008100 <DMA_SetConfig+0x34c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d009      	beq.n	8008092 <DMA_SetConfig+0x2de>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a20      	ldr	r2, [pc, #128]	; (8008104 <DMA_SetConfig+0x350>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d004      	beq.n	8008092 <DMA_SetConfig+0x2de>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a1e      	ldr	r2, [pc, #120]	; (8008108 <DMA_SetConfig+0x354>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d101      	bne.n	8008096 <DMA_SetConfig+0x2e2>
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <DMA_SetConfig+0x2e4>
 8008096:	2300      	movs	r3, #0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d020      	beq.n	80080de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a0:	f003 031f 	and.w	r3, r3, #31
 80080a4:	2201      	movs	r2, #1
 80080a6:	409a      	lsls	r2, r3
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	2b40      	cmp	r3, #64	; 0x40
 80080ba:	d108      	bne.n	80080ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	60da      	str	r2, [r3, #12]
}
 80080cc:	e007      	b.n	80080de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	60da      	str	r2, [r3, #12]
}
 80080de:	bf00      	nop
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	58025408 	.word	0x58025408
 80080f0:	5802541c 	.word	0x5802541c
 80080f4:	58025430 	.word	0x58025430
 80080f8:	58025444 	.word	0x58025444
 80080fc:	58025458 	.word	0x58025458
 8008100:	5802546c 	.word	0x5802546c
 8008104:	58025480 	.word	0x58025480
 8008108:	58025494 	.word	0x58025494

0800810c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a42      	ldr	r2, [pc, #264]	; (8008224 <DMA_CalcBaseAndBitshift+0x118>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d04a      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a41      	ldr	r2, [pc, #260]	; (8008228 <DMA_CalcBaseAndBitshift+0x11c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d045      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a3f      	ldr	r2, [pc, #252]	; (800822c <DMA_CalcBaseAndBitshift+0x120>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d040      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a3e      	ldr	r2, [pc, #248]	; (8008230 <DMA_CalcBaseAndBitshift+0x124>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d03b      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a3c      	ldr	r2, [pc, #240]	; (8008234 <DMA_CalcBaseAndBitshift+0x128>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d036      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a3b      	ldr	r2, [pc, #236]	; (8008238 <DMA_CalcBaseAndBitshift+0x12c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d031      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a39      	ldr	r2, [pc, #228]	; (800823c <DMA_CalcBaseAndBitshift+0x130>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d02c      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a38      	ldr	r2, [pc, #224]	; (8008240 <DMA_CalcBaseAndBitshift+0x134>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d027      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a36      	ldr	r2, [pc, #216]	; (8008244 <DMA_CalcBaseAndBitshift+0x138>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d022      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a35      	ldr	r2, [pc, #212]	; (8008248 <DMA_CalcBaseAndBitshift+0x13c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d01d      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a33      	ldr	r2, [pc, #204]	; (800824c <DMA_CalcBaseAndBitshift+0x140>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a32      	ldr	r2, [pc, #200]	; (8008250 <DMA_CalcBaseAndBitshift+0x144>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a30      	ldr	r2, [pc, #192]	; (8008254 <DMA_CalcBaseAndBitshift+0x148>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00e      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a2f      	ldr	r2, [pc, #188]	; (8008258 <DMA_CalcBaseAndBitshift+0x14c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a2d      	ldr	r2, [pc, #180]	; (800825c <DMA_CalcBaseAndBitshift+0x150>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xa8>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a2c      	ldr	r2, [pc, #176]	; (8008260 <DMA_CalcBaseAndBitshift+0x154>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d101      	bne.n	80081b8 <DMA_CalcBaseAndBitshift+0xac>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <DMA_CalcBaseAndBitshift+0xae>
 80081b8:	2300      	movs	r3, #0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d024      	beq.n	8008208 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	3b10      	subs	r3, #16
 80081c6:	4a27      	ldr	r2, [pc, #156]	; (8008264 <DMA_CalcBaseAndBitshift+0x158>)
 80081c8:	fba2 2303 	umull	r2, r3, r2, r3
 80081cc:	091b      	lsrs	r3, r3, #4
 80081ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	4a24      	ldr	r2, [pc, #144]	; (8008268 <DMA_CalcBaseAndBitshift+0x15c>)
 80081d8:	5cd3      	ldrb	r3, [r2, r3]
 80081da:	461a      	mov	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d908      	bls.n	80081f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	4b1f      	ldr	r3, [pc, #124]	; (800826c <DMA_CalcBaseAndBitshift+0x160>)
 80081ee:	4013      	ands	r3, r2
 80081f0:	1d1a      	adds	r2, r3, #4
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	659a      	str	r2, [r3, #88]	; 0x58
 80081f6:	e00d      	b.n	8008214 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	4b1b      	ldr	r3, [pc, #108]	; (800826c <DMA_CalcBaseAndBitshift+0x160>)
 8008200:	4013      	ands	r3, r2
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6593      	str	r3, [r2, #88]	; 0x58
 8008206:	e005      	b.n	8008214 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	40020010 	.word	0x40020010
 8008228:	40020028 	.word	0x40020028
 800822c:	40020040 	.word	0x40020040
 8008230:	40020058 	.word	0x40020058
 8008234:	40020070 	.word	0x40020070
 8008238:	40020088 	.word	0x40020088
 800823c:	400200a0 	.word	0x400200a0
 8008240:	400200b8 	.word	0x400200b8
 8008244:	40020410 	.word	0x40020410
 8008248:	40020428 	.word	0x40020428
 800824c:	40020440 	.word	0x40020440
 8008250:	40020458 	.word	0x40020458
 8008254:	40020470 	.word	0x40020470
 8008258:	40020488 	.word	0x40020488
 800825c:	400204a0 	.word	0x400204a0
 8008260:	400204b8 	.word	0x400204b8
 8008264:	aaaaaaab 	.word	0xaaaaaaab
 8008268:	080160f4 	.word	0x080160f4
 800826c:	fffffc00 	.word	0xfffffc00

08008270 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d120      	bne.n	80082c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008288:	2b03      	cmp	r3, #3
 800828a:	d858      	bhi.n	800833e <DMA_CheckFifoParam+0xce>
 800828c:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <DMA_CheckFifoParam+0x24>)
 800828e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008292:	bf00      	nop
 8008294:	080082a5 	.word	0x080082a5
 8008298:	080082b7 	.word	0x080082b7
 800829c:	080082a5 	.word	0x080082a5
 80082a0:	0800833f 	.word	0x0800833f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d048      	beq.n	8008342 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082b4:	e045      	b.n	8008342 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082be:	d142      	bne.n	8008346 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082c4:	e03f      	b.n	8008346 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ce:	d123      	bne.n	8008318 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d838      	bhi.n	800834a <DMA_CheckFifoParam+0xda>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <DMA_CheckFifoParam+0x70>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	080082f1 	.word	0x080082f1
 80082e4:	080082f7 	.word	0x080082f7
 80082e8:	080082f1 	.word	0x080082f1
 80082ec:	08008309 	.word	0x08008309
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	73fb      	strb	r3, [r7, #15]
        break;
 80082f4:	e030      	b.n	8008358 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d025      	beq.n	800834e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008306:	e022      	b.n	800834e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008310:	d11f      	bne.n	8008352 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008316:	e01c      	b.n	8008352 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831c:	2b02      	cmp	r3, #2
 800831e:	d902      	bls.n	8008326 <DMA_CheckFifoParam+0xb6>
 8008320:	2b03      	cmp	r3, #3
 8008322:	d003      	beq.n	800832c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008324:	e018      	b.n	8008358 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	73fb      	strb	r3, [r7, #15]
        break;
 800832a:	e015      	b.n	8008358 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00e      	beq.n	8008356 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	73fb      	strb	r3, [r7, #15]
    break;
 800833c:	e00b      	b.n	8008356 <DMA_CheckFifoParam+0xe6>
        break;
 800833e:	bf00      	nop
 8008340:	e00a      	b.n	8008358 <DMA_CheckFifoParam+0xe8>
        break;
 8008342:	bf00      	nop
 8008344:	e008      	b.n	8008358 <DMA_CheckFifoParam+0xe8>
        break;
 8008346:	bf00      	nop
 8008348:	e006      	b.n	8008358 <DMA_CheckFifoParam+0xe8>
        break;
 800834a:	bf00      	nop
 800834c:	e004      	b.n	8008358 <DMA_CheckFifoParam+0xe8>
        break;
 800834e:	bf00      	nop
 8008350:	e002      	b.n	8008358 <DMA_CheckFifoParam+0xe8>
        break;
 8008352:	bf00      	nop
 8008354:	e000      	b.n	8008358 <DMA_CheckFifoParam+0xe8>
    break;
 8008356:	bf00      	nop
    }
  }

  return status;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop

08008368 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a38      	ldr	r2, [pc, #224]	; (800845c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d022      	beq.n	80083c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a36      	ldr	r2, [pc, #216]	; (8008460 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d01d      	beq.n	80083c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a35      	ldr	r2, [pc, #212]	; (8008464 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d018      	beq.n	80083c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a33      	ldr	r2, [pc, #204]	; (8008468 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d013      	beq.n	80083c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a32      	ldr	r2, [pc, #200]	; (800846c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00e      	beq.n	80083c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a30      	ldr	r2, [pc, #192]	; (8008470 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d009      	beq.n	80083c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a2f      	ldr	r2, [pc, #188]	; (8008474 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d004      	beq.n	80083c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a2d      	ldr	r2, [pc, #180]	; (8008478 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d101      	bne.n	80083ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e000      	b.n	80083cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80083ca:	2300      	movs	r3, #0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01a      	beq.n	8008406 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	3b08      	subs	r3, #8
 80083d8:	4a28      	ldr	r2, [pc, #160]	; (800847c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80083da:	fba2 2303 	umull	r2, r3, r2, r3
 80083de:	091b      	lsrs	r3, r3, #4
 80083e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4b26      	ldr	r3, [pc, #152]	; (8008480 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a24      	ldr	r2, [pc, #144]	; (8008484 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80083f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f003 031f 	and.w	r3, r3, #31
 80083fc:	2201      	movs	r2, #1
 80083fe:	409a      	lsls	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008404:	e024      	b.n	8008450 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	3b10      	subs	r3, #16
 800840e:	4a1e      	ldr	r2, [pc, #120]	; (8008488 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008410:	fba2 2303 	umull	r2, r3, r2, r3
 8008414:	091b      	lsrs	r3, r3, #4
 8008416:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	4a1c      	ldr	r2, [pc, #112]	; (800848c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d806      	bhi.n	800842e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d902      	bls.n	800842e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3308      	adds	r3, #8
 800842c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	4b18      	ldr	r3, [pc, #96]	; (8008494 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	461a      	mov	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a16      	ldr	r2, [pc, #88]	; (8008498 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008440:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f003 031f 	and.w	r3, r3, #31
 8008448:	2201      	movs	r2, #1
 800844a:	409a      	lsls	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008450:	bf00      	nop
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	58025408 	.word	0x58025408
 8008460:	5802541c 	.word	0x5802541c
 8008464:	58025430 	.word	0x58025430
 8008468:	58025444 	.word	0x58025444
 800846c:	58025458 	.word	0x58025458
 8008470:	5802546c 	.word	0x5802546c
 8008474:	58025480 	.word	0x58025480
 8008478:	58025494 	.word	0x58025494
 800847c:	cccccccd 	.word	0xcccccccd
 8008480:	16009600 	.word	0x16009600
 8008484:	58025880 	.word	0x58025880
 8008488:	aaaaaaab 	.word	0xaaaaaaab
 800848c:	400204b8 	.word	0x400204b8
 8008490:	4002040f 	.word	0x4002040f
 8008494:	10008200 	.word	0x10008200
 8008498:	40020880 	.word	0x40020880

0800849c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d04a      	beq.n	8008548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d847      	bhi.n	8008548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a25      	ldr	r2, [pc, #148]	; (8008554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d022      	beq.n	8008508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a24      	ldr	r2, [pc, #144]	; (8008558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d01d      	beq.n	8008508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a22      	ldr	r2, [pc, #136]	; (800855c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d018      	beq.n	8008508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a21      	ldr	r2, [pc, #132]	; (8008560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d013      	beq.n	8008508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a1f      	ldr	r2, [pc, #124]	; (8008564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00e      	beq.n	8008508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d009      	beq.n	8008508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a1c      	ldr	r2, [pc, #112]	; (800856c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d004      	beq.n	8008508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1b      	ldr	r2, [pc, #108]	; (8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d101      	bne.n	800850c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008508:	2301      	movs	r3, #1
 800850a:	e000      	b.n	800850e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800850c:	2300      	movs	r3, #0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	4b17      	ldr	r3, [pc, #92]	; (8008574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	461a      	mov	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a15      	ldr	r2, [pc, #84]	; (8008578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008524:	671a      	str	r2, [r3, #112]	; 0x70
 8008526:	e009      	b.n	800853c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4b14      	ldr	r3, [pc, #80]	; (800857c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	461a      	mov	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a11      	ldr	r2, [pc, #68]	; (8008580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800853a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3b01      	subs	r3, #1
 8008540:	2201      	movs	r2, #1
 8008542:	409a      	lsls	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008548:	bf00      	nop
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	58025408 	.word	0x58025408
 8008558:	5802541c 	.word	0x5802541c
 800855c:	58025430 	.word	0x58025430
 8008560:	58025444 	.word	0x58025444
 8008564:	58025458 	.word	0x58025458
 8008568:	5802546c 	.word	0x5802546c
 800856c:	58025480 	.word	0x58025480
 8008570:	58025494 	.word	0x58025494
 8008574:	1600963f 	.word	0x1600963f
 8008578:	58025940 	.word	0x58025940
 800857c:	1000823f 	.word	0x1000823f
 8008580:	40020940 	.word	0x40020940

08008584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008584:	b480      	push	{r7}
 8008586:	b089      	sub	sp, #36	; 0x24
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800858e:	2300      	movs	r3, #0
 8008590:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008592:	4b89      	ldr	r3, [pc, #548]	; (80087b8 <HAL_GPIO_Init+0x234>)
 8008594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008596:	e194      	b.n	80088c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	2101      	movs	r1, #1
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	fa01 f303 	lsl.w	r3, r1, r3
 80085a4:	4013      	ands	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 8186 	beq.w	80088bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d005      	beq.n	80085c8 <HAL_GPIO_Init+0x44>
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d130      	bne.n	800862a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	2203      	movs	r2, #3
 80085d4:	fa02 f303 	lsl.w	r3, r2, r3
 80085d8:	43db      	mvns	r3, r3
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	4013      	ands	r3, r2
 80085de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80085fe:	2201      	movs	r2, #1
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	fa02 f303 	lsl.w	r3, r2, r3
 8008606:	43db      	mvns	r3, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	4013      	ands	r3, r2
 800860c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	091b      	lsrs	r3, r3, #4
 8008614:	f003 0201 	and.w	r2, r3, #1
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	fa02 f303 	lsl.w	r3, r2, r3
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	4313      	orrs	r3, r2
 8008622:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	2b03      	cmp	r3, #3
 8008634:	d017      	beq.n	8008666 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	2203      	movs	r2, #3
 8008642:	fa02 f303 	lsl.w	r3, r2, r3
 8008646:	43db      	mvns	r3, r3
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	4013      	ands	r3, r2
 800864c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	689a      	ldr	r2, [r3, #8]
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	fa02 f303 	lsl.w	r3, r2, r3
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	4313      	orrs	r3, r2
 800865e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	2b02      	cmp	r3, #2
 8008670:	d123      	bne.n	80086ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	08da      	lsrs	r2, r3, #3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3208      	adds	r2, #8
 800867a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800867e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	220f      	movs	r2, #15
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	43db      	mvns	r3, r3
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	4013      	ands	r3, r2
 8008694:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	691a      	ldr	r2, [r3, #16]
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	fa02 f303 	lsl.w	r3, r2, r3
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	08da      	lsrs	r2, r3, #3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3208      	adds	r2, #8
 80086b4:	69b9      	ldr	r1, [r7, #24]
 80086b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	2203      	movs	r2, #3
 80086c6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ca:	43db      	mvns	r3, r3
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	4013      	ands	r3, r2
 80086d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f003 0203 	and.w	r2, r3, #3
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 80e0 	beq.w	80088bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086fc:	4b2f      	ldr	r3, [pc, #188]	; (80087bc <HAL_GPIO_Init+0x238>)
 80086fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008702:	4a2e      	ldr	r2, [pc, #184]	; (80087bc <HAL_GPIO_Init+0x238>)
 8008704:	f043 0302 	orr.w	r3, r3, #2
 8008708:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800870c:	4b2b      	ldr	r3, [pc, #172]	; (80087bc <HAL_GPIO_Init+0x238>)
 800870e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800871a:	4a29      	ldr	r2, [pc, #164]	; (80087c0 <HAL_GPIO_Init+0x23c>)
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	089b      	lsrs	r3, r3, #2
 8008720:	3302      	adds	r3, #2
 8008722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	220f      	movs	r2, #15
 8008732:	fa02 f303 	lsl.w	r3, r2, r3
 8008736:	43db      	mvns	r3, r3
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	4013      	ands	r3, r2
 800873c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <HAL_GPIO_Init+0x240>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d052      	beq.n	80087ec <HAL_GPIO_Init+0x268>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a1f      	ldr	r2, [pc, #124]	; (80087c8 <HAL_GPIO_Init+0x244>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d031      	beq.n	80087b2 <HAL_GPIO_Init+0x22e>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a1e      	ldr	r2, [pc, #120]	; (80087cc <HAL_GPIO_Init+0x248>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d02b      	beq.n	80087ae <HAL_GPIO_Init+0x22a>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a1d      	ldr	r2, [pc, #116]	; (80087d0 <HAL_GPIO_Init+0x24c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d025      	beq.n	80087aa <HAL_GPIO_Init+0x226>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a1c      	ldr	r2, [pc, #112]	; (80087d4 <HAL_GPIO_Init+0x250>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d01f      	beq.n	80087a6 <HAL_GPIO_Init+0x222>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a1b      	ldr	r2, [pc, #108]	; (80087d8 <HAL_GPIO_Init+0x254>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d019      	beq.n	80087a2 <HAL_GPIO_Init+0x21e>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a1a      	ldr	r2, [pc, #104]	; (80087dc <HAL_GPIO_Init+0x258>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d013      	beq.n	800879e <HAL_GPIO_Init+0x21a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a19      	ldr	r2, [pc, #100]	; (80087e0 <HAL_GPIO_Init+0x25c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00d      	beq.n	800879a <HAL_GPIO_Init+0x216>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a18      	ldr	r2, [pc, #96]	; (80087e4 <HAL_GPIO_Init+0x260>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d007      	beq.n	8008796 <HAL_GPIO_Init+0x212>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a17      	ldr	r2, [pc, #92]	; (80087e8 <HAL_GPIO_Init+0x264>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d101      	bne.n	8008792 <HAL_GPIO_Init+0x20e>
 800878e:	2309      	movs	r3, #9
 8008790:	e02d      	b.n	80087ee <HAL_GPIO_Init+0x26a>
 8008792:	230a      	movs	r3, #10
 8008794:	e02b      	b.n	80087ee <HAL_GPIO_Init+0x26a>
 8008796:	2308      	movs	r3, #8
 8008798:	e029      	b.n	80087ee <HAL_GPIO_Init+0x26a>
 800879a:	2307      	movs	r3, #7
 800879c:	e027      	b.n	80087ee <HAL_GPIO_Init+0x26a>
 800879e:	2306      	movs	r3, #6
 80087a0:	e025      	b.n	80087ee <HAL_GPIO_Init+0x26a>
 80087a2:	2305      	movs	r3, #5
 80087a4:	e023      	b.n	80087ee <HAL_GPIO_Init+0x26a>
 80087a6:	2304      	movs	r3, #4
 80087a8:	e021      	b.n	80087ee <HAL_GPIO_Init+0x26a>
 80087aa:	2303      	movs	r3, #3
 80087ac:	e01f      	b.n	80087ee <HAL_GPIO_Init+0x26a>
 80087ae:	2302      	movs	r3, #2
 80087b0:	e01d      	b.n	80087ee <HAL_GPIO_Init+0x26a>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e01b      	b.n	80087ee <HAL_GPIO_Init+0x26a>
 80087b6:	bf00      	nop
 80087b8:	58000080 	.word	0x58000080
 80087bc:	58024400 	.word	0x58024400
 80087c0:	58000400 	.word	0x58000400
 80087c4:	58020000 	.word	0x58020000
 80087c8:	58020400 	.word	0x58020400
 80087cc:	58020800 	.word	0x58020800
 80087d0:	58020c00 	.word	0x58020c00
 80087d4:	58021000 	.word	0x58021000
 80087d8:	58021400 	.word	0x58021400
 80087dc:	58021800 	.word	0x58021800
 80087e0:	58021c00 	.word	0x58021c00
 80087e4:	58022000 	.word	0x58022000
 80087e8:	58022400 	.word	0x58022400
 80087ec:	2300      	movs	r3, #0
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	f002 0203 	and.w	r2, r2, #3
 80087f4:	0092      	lsls	r2, r2, #2
 80087f6:	4093      	lsls	r3, r2
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087fe:	4938      	ldr	r1, [pc, #224]	; (80088e0 <HAL_GPIO_Init+0x35c>)
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	089b      	lsrs	r3, r3, #2
 8008804:	3302      	adds	r3, #2
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800880c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	43db      	mvns	r3, r3
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	4013      	ands	r3, r2
 800881c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	4313      	orrs	r3, r2
 8008830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800883a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	43db      	mvns	r3, r3
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	4013      	ands	r3, r2
 800884a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008858:	69ba      	ldr	r2, [r7, #24]
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	43db      	mvns	r3, r3
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	4013      	ands	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	4313      	orrs	r3, r2
 800888a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	43db      	mvns	r3, r3
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	4013      	ands	r3, r2
 80088a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	3301      	adds	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	fa22 f303 	lsr.w	r3, r2, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f47f ae63 	bne.w	8008598 <HAL_GPIO_Init+0x14>
  }
}
 80088d2:	bf00      	nop
 80088d4:	bf00      	nop
 80088d6:	3724      	adds	r7, #36	; 0x24
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	58000400 	.word	0x58000400

080088e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	691a      	ldr	r2, [r3, #16]
 80088f4:	887b      	ldrh	r3, [r7, #2]
 80088f6:	4013      	ands	r3, r2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088fc:	2301      	movs	r3, #1
 80088fe:	73fb      	strb	r3, [r7, #15]
 8008900:	e001      	b.n	8008906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008906:	7bfb      	ldrb	r3, [r7, #15]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	807b      	strh	r3, [r7, #2]
 8008920:	4613      	mov	r3, r2
 8008922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008924:	787b      	ldrb	r3, [r7, #1]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800892a:	887a      	ldrh	r2, [r7, #2]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008930:	e003      	b.n	800893a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008932:	887b      	ldrh	r3, [r7, #2]
 8008934:	041a      	lsls	r2, r3, #16
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	619a      	str	r2, [r3, #24]
}
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e08b      	b.n	8008a72 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d106      	bne.n	8008974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fa f938 	bl	8002be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2224      	movs	r2, #36	; 0x24
 8008978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0201 	bic.w	r2, r2, #1
 800898a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d107      	bne.n	80089c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089be:	609a      	str	r2, [r3, #8]
 80089c0:	e006      	b.n	80089d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80089ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d108      	bne.n	80089ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e6:	605a      	str	r2, [r3, #4]
 80089e8:	e007      	b.n	80089fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6859      	ldr	r1, [r3, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	4b1d      	ldr	r3, [pc, #116]	; (8008a7c <HAL_I2C_Init+0x134>)
 8008a06:	430b      	orrs	r3, r1
 8008a08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68da      	ldr	r2, [r3, #12]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691a      	ldr	r2, [r3, #16]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	69d9      	ldr	r1, [r3, #28]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a1a      	ldr	r2, [r3, #32]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	430a      	orrs	r2, r1
 8008a42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f042 0201 	orr.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	02008000 	.word	0x02008000

08008a80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b20      	cmp	r3, #32
 8008a94:	d138      	bne.n	8008b08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e032      	b.n	8008b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2224      	movs	r2, #36	; 0x24
 8008ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0201 	bic.w	r2, r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ad2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6819      	ldr	r1, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f042 0201 	orr.w	r2, r2, #1
 8008af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	e000      	b.n	8008b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b08:	2302      	movs	r3, #2
  }
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b085      	sub	sp, #20
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b20      	cmp	r3, #32
 8008b2a:	d139      	bne.n	8008ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d101      	bne.n	8008b3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008b36:	2302      	movs	r3, #2
 8008b38:	e033      	b.n	8008ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2224      	movs	r2, #36	; 0x24
 8008b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f022 0201 	bic.w	r2, r2, #1
 8008b58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008b68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0201 	orr.w	r2, r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e000      	b.n	8008ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008ba0:	2302      	movs	r3, #2
  }
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
	...

08008bb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008bb4:	4b05      	ldr	r3, [pc, #20]	; (8008bcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a04      	ldr	r2, [pc, #16]	; (8008bcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bbe:	6013      	str	r3, [r2, #0]
}
 8008bc0:	bf00      	nop
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	58024800 	.word	0x58024800

08008bd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008bd8:	4b19      	ldr	r3, [pc, #100]	; (8008c40 <HAL_PWREx_ConfigSupply+0x70>)
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f003 0304 	and.w	r3, r3, #4
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d00a      	beq.n	8008bfa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008be4:	4b16      	ldr	r3, [pc, #88]	; (8008c40 <HAL_PWREx_ConfigSupply+0x70>)
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d001      	beq.n	8008bf6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e01f      	b.n	8008c36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e01d      	b.n	8008c36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008bfa:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <HAL_PWREx_ConfigSupply+0x70>)
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f023 0207 	bic.w	r2, r3, #7
 8008c02:	490f      	ldr	r1, [pc, #60]	; (8008c40 <HAL_PWREx_ConfigSupply+0x70>)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008c0a:	f7fa fd57 	bl	80036bc <HAL_GetTick>
 8008c0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c10:	e009      	b.n	8008c26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c12:	f7fa fd53 	bl	80036bc <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c20:	d901      	bls.n	8008c26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e007      	b.n	8008c36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c26:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <HAL_PWREx_ConfigSupply+0x70>)
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c32:	d1ee      	bne.n	8008c12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	58024800 	.word	0x58024800

08008c44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08c      	sub	sp, #48	; 0x30
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d102      	bne.n	8008c58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f000 bc48 	b.w	80094e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8088 	beq.w	8008d76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c66:	4b99      	ldr	r3, [pc, #612]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c70:	4b96      	ldr	r3, [pc, #600]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c74:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c78:	2b10      	cmp	r3, #16
 8008c7a:	d007      	beq.n	8008c8c <HAL_RCC_OscConfig+0x48>
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	2b18      	cmp	r3, #24
 8008c80:	d111      	bne.n	8008ca6 <HAL_RCC_OscConfig+0x62>
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	f003 0303 	and.w	r3, r3, #3
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d10c      	bne.n	8008ca6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c8c:	4b8f      	ldr	r3, [pc, #572]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d06d      	beq.n	8008d74 <HAL_RCC_OscConfig+0x130>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d169      	bne.n	8008d74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	f000 bc21 	b.w	80094e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cae:	d106      	bne.n	8008cbe <HAL_RCC_OscConfig+0x7a>
 8008cb0:	4b86      	ldr	r3, [pc, #536]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a85      	ldr	r2, [pc, #532]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	e02e      	b.n	8008d1c <HAL_RCC_OscConfig+0xd8>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10c      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x9c>
 8008cc6:	4b81      	ldr	r3, [pc, #516]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a80      	ldr	r2, [pc, #512]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	4b7e      	ldr	r3, [pc, #504]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a7d      	ldr	r2, [pc, #500]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	e01d      	b.n	8008d1c <HAL_RCC_OscConfig+0xd8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ce8:	d10c      	bne.n	8008d04 <HAL_RCC_OscConfig+0xc0>
 8008cea:	4b78      	ldr	r3, [pc, #480]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a77      	ldr	r2, [pc, #476]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	4b75      	ldr	r3, [pc, #468]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a74      	ldr	r2, [pc, #464]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	e00b      	b.n	8008d1c <HAL_RCC_OscConfig+0xd8>
 8008d04:	4b71      	ldr	r3, [pc, #452]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a70      	ldr	r2, [pc, #448]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	4b6e      	ldr	r3, [pc, #440]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a6d      	ldr	r2, [pc, #436]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d013      	beq.n	8008d4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d24:	f7fa fcca 	bl	80036bc <HAL_GetTick>
 8008d28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d2a:	e008      	b.n	8008d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d2c:	f7fa fcc6 	bl	80036bc <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b64      	cmp	r3, #100	; 0x64
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e3d4      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d3e:	4b63      	ldr	r3, [pc, #396]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0f0      	beq.n	8008d2c <HAL_RCC_OscConfig+0xe8>
 8008d4a:	e014      	b.n	8008d76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4c:	f7fa fcb6 	bl	80036bc <HAL_GetTick>
 8008d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d54:	f7fa fcb2 	bl	80036bc <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b64      	cmp	r3, #100	; 0x64
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e3c0      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d66:	4b59      	ldr	r3, [pc, #356]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1f0      	bne.n	8008d54 <HAL_RCC_OscConfig+0x110>
 8008d72:	e000      	b.n	8008d76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 80ca 	beq.w	8008f18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d84:	4b51      	ldr	r3, [pc, #324]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d8e:	4b4f      	ldr	r3, [pc, #316]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d007      	beq.n	8008daa <HAL_RCC_OscConfig+0x166>
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	2b18      	cmp	r3, #24
 8008d9e:	d156      	bne.n	8008e4e <HAL_RCC_OscConfig+0x20a>
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d151      	bne.n	8008e4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008daa:	4b48      	ldr	r3, [pc, #288]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0304 	and.w	r3, r3, #4
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x17e>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e392      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008dc2:	4b42      	ldr	r3, [pc, #264]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f023 0219 	bic.w	r2, r3, #25
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	493f      	ldr	r1, [pc, #252]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd4:	f7fa fc72 	bl	80036bc <HAL_GetTick>
 8008dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dda:	e008      	b.n	8008dee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ddc:	f7fa fc6e 	bl	80036bc <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e37c      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dee:	4b37      	ldr	r3, [pc, #220]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0304 	and.w	r3, r3, #4
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0f0      	beq.n	8008ddc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dfa:	f7fa fc6b 	bl	80036d4 <HAL_GetREVID>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d817      	bhi.n	8008e38 <HAL_RCC_OscConfig+0x1f4>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	2b40      	cmp	r3, #64	; 0x40
 8008e0e:	d108      	bne.n	8008e22 <HAL_RCC_OscConfig+0x1de>
 8008e10:	4b2e      	ldr	r3, [pc, #184]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008e18:	4a2c      	ldr	r2, [pc, #176]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e20:	e07a      	b.n	8008f18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e22:	4b2a      	ldr	r3, [pc, #168]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	031b      	lsls	r3, r3, #12
 8008e30:	4926      	ldr	r1, [pc, #152]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e36:	e06f      	b.n	8008f18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e38:	4b24      	ldr	r3, [pc, #144]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	061b      	lsls	r3, r3, #24
 8008e46:	4921      	ldr	r1, [pc, #132]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e4c:	e064      	b.n	8008f18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d047      	beq.n	8008ee6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e56:	4b1d      	ldr	r3, [pc, #116]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f023 0219 	bic.w	r2, r3, #25
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	491a      	ldr	r1, [pc, #104]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e68:	f7fa fc28 	bl	80036bc <HAL_GetTick>
 8008e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e6e:	e008      	b.n	8008e82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e70:	f7fa fc24 	bl	80036bc <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e332      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e82:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0304 	and.w	r3, r3, #4
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0f0      	beq.n	8008e70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e8e:	f7fa fc21 	bl	80036d4 <HAL_GetREVID>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d819      	bhi.n	8008ed0 <HAL_RCC_OscConfig+0x28c>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	2b40      	cmp	r3, #64	; 0x40
 8008ea2:	d108      	bne.n	8008eb6 <HAL_RCC_OscConfig+0x272>
 8008ea4:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008eac:	4a07      	ldr	r2, [pc, #28]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eb2:	6053      	str	r3, [r2, #4]
 8008eb4:	e030      	b.n	8008f18 <HAL_RCC_OscConfig+0x2d4>
 8008eb6:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	031b      	lsls	r3, r3, #12
 8008ec4:	4901      	ldr	r1, [pc, #4]	; (8008ecc <HAL_RCC_OscConfig+0x288>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	604b      	str	r3, [r1, #4]
 8008eca:	e025      	b.n	8008f18 <HAL_RCC_OscConfig+0x2d4>
 8008ecc:	58024400 	.word	0x58024400
 8008ed0:	4b9a      	ldr	r3, [pc, #616]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	061b      	lsls	r3, r3, #24
 8008ede:	4997      	ldr	r1, [pc, #604]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	604b      	str	r3, [r1, #4]
 8008ee4:	e018      	b.n	8008f18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ee6:	4b95      	ldr	r3, [pc, #596]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a94      	ldr	r2, [pc, #592]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008eec:	f023 0301 	bic.w	r3, r3, #1
 8008ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef2:	f7fa fbe3 	bl	80036bc <HAL_GetTick>
 8008ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ef8:	e008      	b.n	8008f0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008efa:	f7fa fbdf 	bl	80036bc <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d901      	bls.n	8008f0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e2ed      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f0c:	4b8b      	ldr	r3, [pc, #556]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f0      	bne.n	8008efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0310 	and.w	r3, r3, #16
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 80a9 	beq.w	8009078 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f26:	4b85      	ldr	r3, [pc, #532]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f30:	4b82      	ldr	r3, [pc, #520]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d007      	beq.n	8008f4c <HAL_RCC_OscConfig+0x308>
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	2b18      	cmp	r3, #24
 8008f40:	d13a      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x374>
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f003 0303 	and.w	r3, r3, #3
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d135      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f4c:	4b7b      	ldr	r3, [pc, #492]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d005      	beq.n	8008f64 <HAL_RCC_OscConfig+0x320>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	2b80      	cmp	r3, #128	; 0x80
 8008f5e:	d001      	beq.n	8008f64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e2c1      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f64:	f7fa fbb6 	bl	80036d4 <HAL_GetREVID>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d817      	bhi.n	8008fa2 <HAL_RCC_OscConfig+0x35e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	2b20      	cmp	r3, #32
 8008f78:	d108      	bne.n	8008f8c <HAL_RCC_OscConfig+0x348>
 8008f7a:	4b70      	ldr	r3, [pc, #448]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008f82:	4a6e      	ldr	r2, [pc, #440]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f8a:	e075      	b.n	8009078 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f8c:	4b6b      	ldr	r3, [pc, #428]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	069b      	lsls	r3, r3, #26
 8008f9a:	4968      	ldr	r1, [pc, #416]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fa0:	e06a      	b.n	8009078 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fa2:	4b66      	ldr	r3, [pc, #408]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	061b      	lsls	r3, r3, #24
 8008fb0:	4962      	ldr	r1, [pc, #392]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fb6:	e05f      	b.n	8009078 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d042      	beq.n	8009046 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008fc0:	4b5e      	ldr	r3, [pc, #376]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a5d      	ldr	r2, [pc, #372]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fcc:	f7fa fb76 	bl	80036bc <HAL_GetTick>
 8008fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008fd4:	f7fa fb72 	bl	80036bc <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e280      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fe6:	4b55      	ldr	r3, [pc, #340]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0f0      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ff2:	f7fa fb6f 	bl	80036d4 <HAL_GetREVID>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d817      	bhi.n	8009030 <HAL_RCC_OscConfig+0x3ec>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a1b      	ldr	r3, [r3, #32]
 8009004:	2b20      	cmp	r3, #32
 8009006:	d108      	bne.n	800901a <HAL_RCC_OscConfig+0x3d6>
 8009008:	4b4c      	ldr	r3, [pc, #304]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009010:	4a4a      	ldr	r2, [pc, #296]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8009012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009016:	6053      	str	r3, [r2, #4]
 8009018:	e02e      	b.n	8009078 <HAL_RCC_OscConfig+0x434>
 800901a:	4b48      	ldr	r3, [pc, #288]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	069b      	lsls	r3, r3, #26
 8009028:	4944      	ldr	r1, [pc, #272]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 800902a:	4313      	orrs	r3, r2
 800902c:	604b      	str	r3, [r1, #4]
 800902e:	e023      	b.n	8009078 <HAL_RCC_OscConfig+0x434>
 8009030:	4b42      	ldr	r3, [pc, #264]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	061b      	lsls	r3, r3, #24
 800903e:	493f      	ldr	r1, [pc, #252]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8009040:	4313      	orrs	r3, r2
 8009042:	60cb      	str	r3, [r1, #12]
 8009044:	e018      	b.n	8009078 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009046:	4b3d      	ldr	r3, [pc, #244]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a3c      	ldr	r2, [pc, #240]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 800904c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009052:	f7fa fb33 	bl	80036bc <HAL_GetTick>
 8009056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009058:	e008      	b.n	800906c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800905a:	f7fa fb2f 	bl	80036bc <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d901      	bls.n	800906c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e23d      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800906c:	4b33      	ldr	r3, [pc, #204]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f0      	bne.n	800905a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0308 	and.w	r3, r3, #8
 8009080:	2b00      	cmp	r3, #0
 8009082:	d036      	beq.n	80090f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d019      	beq.n	80090c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800908c:	4b2b      	ldr	r3, [pc, #172]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 800908e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009090:	4a2a      	ldr	r2, [pc, #168]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8009092:	f043 0301 	orr.w	r3, r3, #1
 8009096:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009098:	f7fa fb10 	bl	80036bc <HAL_GetTick>
 800909c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800909e:	e008      	b.n	80090b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090a0:	f7fa fb0c 	bl	80036bc <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e21a      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090b2:	4b22      	ldr	r3, [pc, #136]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 80090b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0f0      	beq.n	80090a0 <HAL_RCC_OscConfig+0x45c>
 80090be:	e018      	b.n	80090f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090c0:	4b1e      	ldr	r3, [pc, #120]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 80090c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c4:	4a1d      	ldr	r2, [pc, #116]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 80090c6:	f023 0301 	bic.w	r3, r3, #1
 80090ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090cc:	f7fa faf6 	bl	80036bc <HAL_GetTick>
 80090d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090d2:	e008      	b.n	80090e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090d4:	f7fa faf2 	bl	80036bc <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d901      	bls.n	80090e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e200      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090e6:	4b15      	ldr	r3, [pc, #84]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 80090e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f0      	bne.n	80090d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0320 	and.w	r3, r3, #32
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d039      	beq.n	8009172 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d01c      	beq.n	8009140 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009106:	4b0d      	ldr	r3, [pc, #52]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a0c      	ldr	r2, [pc, #48]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 800910c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009110:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009112:	f7fa fad3 	bl	80036bc <HAL_GetTick>
 8009116:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009118:	e008      	b.n	800912c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800911a:	f7fa facf 	bl	80036bc <HAL_GetTick>
 800911e:	4602      	mov	r2, r0
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	2b02      	cmp	r3, #2
 8009126:	d901      	bls.n	800912c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e1dd      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800912c:	4b03      	ldr	r3, [pc, #12]	; (800913c <HAL_RCC_OscConfig+0x4f8>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0f0      	beq.n	800911a <HAL_RCC_OscConfig+0x4d6>
 8009138:	e01b      	b.n	8009172 <HAL_RCC_OscConfig+0x52e>
 800913a:	bf00      	nop
 800913c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009140:	4b9b      	ldr	r3, [pc, #620]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a9a      	ldr	r2, [pc, #616]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800914a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800914c:	f7fa fab6 	bl	80036bc <HAL_GetTick>
 8009150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009152:	e008      	b.n	8009166 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009154:	f7fa fab2 	bl	80036bc <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b02      	cmp	r3, #2
 8009160:	d901      	bls.n	8009166 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e1c0      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009166:	4b92      	ldr	r3, [pc, #584]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1f0      	bne.n	8009154 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0304 	and.w	r3, r3, #4
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 8081 	beq.w	8009282 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009180:	4b8c      	ldr	r3, [pc, #560]	; (80093b4 <HAL_RCC_OscConfig+0x770>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a8b      	ldr	r2, [pc, #556]	; (80093b4 <HAL_RCC_OscConfig+0x770>)
 8009186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800918a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800918c:	f7fa fa96 	bl	80036bc <HAL_GetTick>
 8009190:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009192:	e008      	b.n	80091a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009194:	f7fa fa92 	bl	80036bc <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	2b64      	cmp	r3, #100	; 0x64
 80091a0:	d901      	bls.n	80091a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e1a0      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091a6:	4b83      	ldr	r3, [pc, #524]	; (80093b4 <HAL_RCC_OscConfig+0x770>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d0f0      	beq.n	8009194 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d106      	bne.n	80091c8 <HAL_RCC_OscConfig+0x584>
 80091ba:	4b7d      	ldr	r3, [pc, #500]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80091bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091be:	4a7c      	ldr	r2, [pc, #496]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80091c0:	f043 0301 	orr.w	r3, r3, #1
 80091c4:	6713      	str	r3, [r2, #112]	; 0x70
 80091c6:	e02d      	b.n	8009224 <HAL_RCC_OscConfig+0x5e0>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10c      	bne.n	80091ea <HAL_RCC_OscConfig+0x5a6>
 80091d0:	4b77      	ldr	r3, [pc, #476]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80091d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d4:	4a76      	ldr	r2, [pc, #472]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80091d6:	f023 0301 	bic.w	r3, r3, #1
 80091da:	6713      	str	r3, [r2, #112]	; 0x70
 80091dc:	4b74      	ldr	r3, [pc, #464]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80091de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e0:	4a73      	ldr	r2, [pc, #460]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80091e2:	f023 0304 	bic.w	r3, r3, #4
 80091e6:	6713      	str	r3, [r2, #112]	; 0x70
 80091e8:	e01c      	b.n	8009224 <HAL_RCC_OscConfig+0x5e0>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	2b05      	cmp	r3, #5
 80091f0:	d10c      	bne.n	800920c <HAL_RCC_OscConfig+0x5c8>
 80091f2:	4b6f      	ldr	r3, [pc, #444]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80091f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f6:	4a6e      	ldr	r2, [pc, #440]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80091f8:	f043 0304 	orr.w	r3, r3, #4
 80091fc:	6713      	str	r3, [r2, #112]	; 0x70
 80091fe:	4b6c      	ldr	r3, [pc, #432]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009202:	4a6b      	ldr	r2, [pc, #428]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009204:	f043 0301 	orr.w	r3, r3, #1
 8009208:	6713      	str	r3, [r2, #112]	; 0x70
 800920a:	e00b      	b.n	8009224 <HAL_RCC_OscConfig+0x5e0>
 800920c:	4b68      	ldr	r3, [pc, #416]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 800920e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009210:	4a67      	ldr	r2, [pc, #412]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009212:	f023 0301 	bic.w	r3, r3, #1
 8009216:	6713      	str	r3, [r2, #112]	; 0x70
 8009218:	4b65      	ldr	r3, [pc, #404]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 800921a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921c:	4a64      	ldr	r2, [pc, #400]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 800921e:	f023 0304 	bic.w	r3, r3, #4
 8009222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d015      	beq.n	8009258 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800922c:	f7fa fa46 	bl	80036bc <HAL_GetTick>
 8009230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009232:	e00a      	b.n	800924a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009234:	f7fa fa42 	bl	80036bc <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009242:	4293      	cmp	r3, r2
 8009244:	d901      	bls.n	800924a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e14e      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800924a:	4b59      	ldr	r3, [pc, #356]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 800924c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0ee      	beq.n	8009234 <HAL_RCC_OscConfig+0x5f0>
 8009256:	e014      	b.n	8009282 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009258:	f7fa fa30 	bl	80036bc <HAL_GetTick>
 800925c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800925e:	e00a      	b.n	8009276 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009260:	f7fa fa2c 	bl	80036bc <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	f241 3288 	movw	r2, #5000	; 0x1388
 800926e:	4293      	cmp	r3, r2
 8009270:	d901      	bls.n	8009276 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e138      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009276:	4b4e      	ldr	r3, [pc, #312]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1ee      	bne.n	8009260 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	2b00      	cmp	r3, #0
 8009288:	f000 812d 	beq.w	80094e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800928c:	4b48      	ldr	r3, [pc, #288]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009294:	2b18      	cmp	r3, #24
 8009296:	f000 80bd 	beq.w	8009414 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	2b02      	cmp	r3, #2
 80092a0:	f040 809e 	bne.w	80093e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092a4:	4b42      	ldr	r3, [pc, #264]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a41      	ldr	r2, [pc, #260]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80092aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b0:	f7fa fa04 	bl	80036bc <HAL_GetTick>
 80092b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092b6:	e008      	b.n	80092ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092b8:	f7fa fa00 	bl	80036bc <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e10e      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092ca:	4b39      	ldr	r3, [pc, #228]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1f0      	bne.n	80092b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092d6:	4b36      	ldr	r3, [pc, #216]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80092d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092da:	4b37      	ldr	r3, [pc, #220]	; (80093b8 <HAL_RCC_OscConfig+0x774>)
 80092dc:	4013      	ands	r3, r2
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80092e6:	0112      	lsls	r2, r2, #4
 80092e8:	430a      	orrs	r2, r1
 80092ea:	4931      	ldr	r1, [pc, #196]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	628b      	str	r3, [r1, #40]	; 0x28
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f4:	3b01      	subs	r3, #1
 80092f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fe:	3b01      	subs	r3, #1
 8009300:	025b      	lsls	r3, r3, #9
 8009302:	b29b      	uxth	r3, r3
 8009304:	431a      	orrs	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930a:	3b01      	subs	r3, #1
 800930c:	041b      	lsls	r3, r3, #16
 800930e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009318:	3b01      	subs	r3, #1
 800931a:	061b      	lsls	r3, r3, #24
 800931c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009320:	4923      	ldr	r1, [pc, #140]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009322:	4313      	orrs	r3, r2
 8009324:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009326:	4b22      	ldr	r3, [pc, #136]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	4a21      	ldr	r2, [pc, #132]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 800932c:	f023 0301 	bic.w	r3, r3, #1
 8009330:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009332:	4b1f      	ldr	r3, [pc, #124]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009336:	4b21      	ldr	r3, [pc, #132]	; (80093bc <HAL_RCC_OscConfig+0x778>)
 8009338:	4013      	ands	r3, r2
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800933e:	00d2      	lsls	r2, r2, #3
 8009340:	491b      	ldr	r1, [pc, #108]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009342:	4313      	orrs	r3, r2
 8009344:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009346:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934a:	f023 020c 	bic.w	r2, r3, #12
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	4917      	ldr	r1, [pc, #92]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009354:	4313      	orrs	r3, r2
 8009356:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009358:	4b15      	ldr	r3, [pc, #84]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	f023 0202 	bic.w	r2, r3, #2
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009364:	4912      	ldr	r1, [pc, #72]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009366:	4313      	orrs	r3, r2
 8009368:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800936a:	4b11      	ldr	r3, [pc, #68]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	4a10      	ldr	r2, [pc, #64]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009374:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009376:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937a:	4a0d      	ldr	r2, [pc, #52]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 800937c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009380:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009382:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009386:	4a0a      	ldr	r2, [pc, #40]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800938c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800938e:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	4a07      	ldr	r2, [pc, #28]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 8009394:	f043 0301 	orr.w	r3, r3, #1
 8009398:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800939a:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a04      	ldr	r2, [pc, #16]	; (80093b0 <HAL_RCC_OscConfig+0x76c>)
 80093a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a6:	f7fa f989 	bl	80036bc <HAL_GetTick>
 80093aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093ac:	e011      	b.n	80093d2 <HAL_RCC_OscConfig+0x78e>
 80093ae:	bf00      	nop
 80093b0:	58024400 	.word	0x58024400
 80093b4:	58024800 	.word	0x58024800
 80093b8:	fffffc0c 	.word	0xfffffc0c
 80093bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093c0:	f7fa f97c 	bl	80036bc <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e08a      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093d2:	4b47      	ldr	r3, [pc, #284]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0f0      	beq.n	80093c0 <HAL_RCC_OscConfig+0x77c>
 80093de:	e082      	b.n	80094e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093e0:	4b43      	ldr	r3, [pc, #268]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a42      	ldr	r2, [pc, #264]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 80093e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ec:	f7fa f966 	bl	80036bc <HAL_GetTick>
 80093f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093f2:	e008      	b.n	8009406 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093f4:	f7fa f962 	bl	80036bc <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d901      	bls.n	8009406 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e070      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009406:	4b3a      	ldr	r3, [pc, #232]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1f0      	bne.n	80093f4 <HAL_RCC_OscConfig+0x7b0>
 8009412:	e068      	b.n	80094e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009414:	4b36      	ldr	r3, [pc, #216]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 8009416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009418:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800941a:	4b35      	ldr	r3, [pc, #212]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 800941c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	2b01      	cmp	r3, #1
 8009426:	d031      	beq.n	800948c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	f003 0203 	and.w	r2, r3, #3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009432:	429a      	cmp	r2, r3
 8009434:	d12a      	bne.n	800948c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	091b      	lsrs	r3, r3, #4
 800943a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009442:	429a      	cmp	r2, r3
 8009444:	d122      	bne.n	800948c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009450:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009452:	429a      	cmp	r2, r3
 8009454:	d11a      	bne.n	800948c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	0a5b      	lsrs	r3, r3, #9
 800945a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009462:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009464:	429a      	cmp	r2, r3
 8009466:	d111      	bne.n	800948c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	0c1b      	lsrs	r3, r3, #16
 800946c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009476:	429a      	cmp	r2, r3
 8009478:	d108      	bne.n	800948c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	0e1b      	lsrs	r3, r3, #24
 800947e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009486:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009488:	429a      	cmp	r2, r3
 800948a:	d001      	beq.n	8009490 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e02b      	b.n	80094e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009490:	4b17      	ldr	r3, [pc, #92]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 8009492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009494:	08db      	lsrs	r3, r3, #3
 8009496:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800949a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d01f      	beq.n	80094e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80094a6:	4b12      	ldr	r3, [pc, #72]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	4a11      	ldr	r2, [pc, #68]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 80094ac:	f023 0301 	bic.w	r3, r3, #1
 80094b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094b2:	f7fa f903 	bl	80036bc <HAL_GetTick>
 80094b6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80094b8:	bf00      	nop
 80094ba:	f7fa f8ff 	bl	80036bc <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d0f9      	beq.n	80094ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094c6:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 80094c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ca:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <HAL_RCC_OscConfig+0x8b0>)
 80094cc:	4013      	ands	r3, r2
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094d2:	00d2      	lsls	r2, r2, #3
 80094d4:	4906      	ldr	r1, [pc, #24]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80094da:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	4a04      	ldr	r2, [pc, #16]	; (80094f0 <HAL_RCC_OscConfig+0x8ac>)
 80094e0:	f043 0301 	orr.w	r3, r3, #1
 80094e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3730      	adds	r7, #48	; 0x30
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	58024400 	.word	0x58024400
 80094f4:	ffff0007 	.word	0xffff0007

080094f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e19c      	b.n	8009846 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800950c:	4b8a      	ldr	r3, [pc, #552]	; (8009738 <HAL_RCC_ClockConfig+0x240>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d910      	bls.n	800953c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800951a:	4b87      	ldr	r3, [pc, #540]	; (8009738 <HAL_RCC_ClockConfig+0x240>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f023 020f 	bic.w	r2, r3, #15
 8009522:	4985      	ldr	r1, [pc, #532]	; (8009738 <HAL_RCC_ClockConfig+0x240>)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	4313      	orrs	r3, r2
 8009528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800952a:	4b83      	ldr	r3, [pc, #524]	; (8009738 <HAL_RCC_ClockConfig+0x240>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 030f 	and.w	r3, r3, #15
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	429a      	cmp	r2, r3
 8009536:	d001      	beq.n	800953c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e184      	b.n	8009846 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	d010      	beq.n	800956a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	4b7b      	ldr	r3, [pc, #492]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009554:	429a      	cmp	r2, r3
 8009556:	d908      	bls.n	800956a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009558:	4b78      	ldr	r3, [pc, #480]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	4975      	ldr	r1, [pc, #468]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 8009566:	4313      	orrs	r3, r2
 8009568:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0308 	and.w	r3, r3, #8
 8009572:	2b00      	cmp	r3, #0
 8009574:	d010      	beq.n	8009598 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	695a      	ldr	r2, [r3, #20]
 800957a:	4b70      	ldr	r3, [pc, #448]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009582:	429a      	cmp	r2, r3
 8009584:	d908      	bls.n	8009598 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009586:	4b6d      	ldr	r3, [pc, #436]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	496a      	ldr	r1, [pc, #424]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 8009594:	4313      	orrs	r3, r2
 8009596:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0310 	and.w	r3, r3, #16
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d010      	beq.n	80095c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699a      	ldr	r2, [r3, #24]
 80095a8:	4b64      	ldr	r3, [pc, #400]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d908      	bls.n	80095c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095b4:	4b61      	ldr	r3, [pc, #388]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	495e      	ldr	r1, [pc, #376]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d010      	beq.n	80095f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	69da      	ldr	r2, [r3, #28]
 80095d6:	4b59      	ldr	r3, [pc, #356]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095de:	429a      	cmp	r2, r3
 80095e0:	d908      	bls.n	80095f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80095e2:	4b56      	ldr	r3, [pc, #344]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	4953      	ldr	r1, [pc, #332]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d010      	beq.n	8009622 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68da      	ldr	r2, [r3, #12]
 8009604:	4b4d      	ldr	r3, [pc, #308]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	f003 030f 	and.w	r3, r3, #15
 800960c:	429a      	cmp	r2, r3
 800960e:	d908      	bls.n	8009622 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009610:	4b4a      	ldr	r3, [pc, #296]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	f023 020f 	bic.w	r2, r3, #15
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	4947      	ldr	r1, [pc, #284]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 800961e:	4313      	orrs	r3, r2
 8009620:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	d055      	beq.n	80096da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800962e:	4b43      	ldr	r3, [pc, #268]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	4940      	ldr	r1, [pc, #256]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 800963c:	4313      	orrs	r3, r2
 800963e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	2b02      	cmp	r3, #2
 8009646:	d107      	bne.n	8009658 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009648:	4b3c      	ldr	r3, [pc, #240]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d121      	bne.n	8009698 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e0f6      	b.n	8009846 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	2b03      	cmp	r3, #3
 800965e:	d107      	bne.n	8009670 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009660:	4b36      	ldr	r3, [pc, #216]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d115      	bne.n	8009698 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e0ea      	b.n	8009846 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d107      	bne.n	8009688 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009678:	4b30      	ldr	r3, [pc, #192]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009680:	2b00      	cmp	r3, #0
 8009682:	d109      	bne.n	8009698 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e0de      	b.n	8009846 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009688:	4b2c      	ldr	r3, [pc, #176]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0304 	and.w	r3, r3, #4
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e0d6      	b.n	8009846 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009698:	4b28      	ldr	r3, [pc, #160]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	f023 0207 	bic.w	r2, r3, #7
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	4925      	ldr	r1, [pc, #148]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096aa:	f7fa f807 	bl	80036bc <HAL_GetTick>
 80096ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096b0:	e00a      	b.n	80096c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096b2:	f7fa f803 	bl	80036bc <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d901      	bls.n	80096c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e0be      	b.n	8009846 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096c8:	4b1c      	ldr	r3, [pc, #112]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d1eb      	bne.n	80096b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d010      	beq.n	8009708 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	4b14      	ldr	r3, [pc, #80]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	f003 030f 	and.w	r3, r3, #15
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d208      	bcs.n	8009708 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096f6:	4b11      	ldr	r3, [pc, #68]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	f023 020f 	bic.w	r2, r3, #15
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	490e      	ldr	r1, [pc, #56]	; (800973c <HAL_RCC_ClockConfig+0x244>)
 8009704:	4313      	orrs	r3, r2
 8009706:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009708:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <HAL_RCC_ClockConfig+0x240>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 030f 	and.w	r3, r3, #15
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	d214      	bcs.n	8009740 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009716:	4b08      	ldr	r3, [pc, #32]	; (8009738 <HAL_RCC_ClockConfig+0x240>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f023 020f 	bic.w	r2, r3, #15
 800971e:	4906      	ldr	r1, [pc, #24]	; (8009738 <HAL_RCC_ClockConfig+0x240>)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	4313      	orrs	r3, r2
 8009724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009726:	4b04      	ldr	r3, [pc, #16]	; (8009738 <HAL_RCC_ClockConfig+0x240>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 030f 	and.w	r3, r3, #15
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d005      	beq.n	8009740 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e086      	b.n	8009846 <HAL_RCC_ClockConfig+0x34e>
 8009738:	52002000 	.word	0x52002000
 800973c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 0304 	and.w	r3, r3, #4
 8009748:	2b00      	cmp	r3, #0
 800974a:	d010      	beq.n	800976e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	691a      	ldr	r2, [r3, #16]
 8009750:	4b3f      	ldr	r3, [pc, #252]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009758:	429a      	cmp	r2, r3
 800975a:	d208      	bcs.n	800976e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800975c:	4b3c      	ldr	r3, [pc, #240]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	4939      	ldr	r1, [pc, #228]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 800976a:	4313      	orrs	r3, r2
 800976c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0308 	and.w	r3, r3, #8
 8009776:	2b00      	cmp	r3, #0
 8009778:	d010      	beq.n	800979c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	695a      	ldr	r2, [r3, #20]
 800977e:	4b34      	ldr	r3, [pc, #208]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009786:	429a      	cmp	r2, r3
 8009788:	d208      	bcs.n	800979c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800978a:	4b31      	ldr	r3, [pc, #196]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	492e      	ldr	r1, [pc, #184]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 8009798:	4313      	orrs	r3, r2
 800979a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0310 	and.w	r3, r3, #16
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d010      	beq.n	80097ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699a      	ldr	r2, [r3, #24]
 80097ac:	4b28      	ldr	r3, [pc, #160]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d208      	bcs.n	80097ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097b8:	4b25      	ldr	r3, [pc, #148]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	4922      	ldr	r1, [pc, #136]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0320 	and.w	r3, r3, #32
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d010      	beq.n	80097f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	69da      	ldr	r2, [r3, #28]
 80097da:	4b1d      	ldr	r3, [pc, #116]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d208      	bcs.n	80097f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80097e6:	4b1a      	ldr	r3, [pc, #104]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	4917      	ldr	r1, [pc, #92]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80097f8:	f000 f834 	bl	8009864 <HAL_RCC_GetSysClockFreq>
 80097fc:	4602      	mov	r2, r0
 80097fe:	4b14      	ldr	r3, [pc, #80]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	0a1b      	lsrs	r3, r3, #8
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	4912      	ldr	r1, [pc, #72]	; (8009854 <HAL_RCC_ClockConfig+0x35c>)
 800980a:	5ccb      	ldrb	r3, [r1, r3]
 800980c:	f003 031f 	and.w	r3, r3, #31
 8009810:	fa22 f303 	lsr.w	r3, r2, r3
 8009814:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009816:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <HAL_RCC_ClockConfig+0x358>)
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	f003 030f 	and.w	r3, r3, #15
 800981e:	4a0d      	ldr	r2, [pc, #52]	; (8009854 <HAL_RCC_ClockConfig+0x35c>)
 8009820:	5cd3      	ldrb	r3, [r2, r3]
 8009822:	f003 031f 	and.w	r3, r3, #31
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	fa22 f303 	lsr.w	r3, r2, r3
 800982c:	4a0a      	ldr	r2, [pc, #40]	; (8009858 <HAL_RCC_ClockConfig+0x360>)
 800982e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009830:	4a0a      	ldr	r2, [pc, #40]	; (800985c <HAL_RCC_ClockConfig+0x364>)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009836:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <HAL_RCC_ClockConfig+0x368>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4618      	mov	r0, r3
 800983c:	f7f9 fc76 	bl	800312c <HAL_InitTick>
 8009840:	4603      	mov	r3, r0
 8009842:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009844:	7bfb      	ldrb	r3, [r7, #15]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	58024400 	.word	0x58024400
 8009854:	080160e4 	.word	0x080160e4
 8009858:	2400008c 	.word	0x2400008c
 800985c:	24000088 	.word	0x24000088
 8009860:	24000090 	.word	0x24000090

08009864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009864:	b480      	push	{r7}
 8009866:	b089      	sub	sp, #36	; 0x24
 8009868:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800986a:	4bb3      	ldr	r3, [pc, #716]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009872:	2b18      	cmp	r3, #24
 8009874:	f200 8155 	bhi.w	8009b22 <HAL_RCC_GetSysClockFreq+0x2be>
 8009878:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <HAL_RCC_GetSysClockFreq+0x1c>)
 800987a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987e:	bf00      	nop
 8009880:	080098e5 	.word	0x080098e5
 8009884:	08009b23 	.word	0x08009b23
 8009888:	08009b23 	.word	0x08009b23
 800988c:	08009b23 	.word	0x08009b23
 8009890:	08009b23 	.word	0x08009b23
 8009894:	08009b23 	.word	0x08009b23
 8009898:	08009b23 	.word	0x08009b23
 800989c:	08009b23 	.word	0x08009b23
 80098a0:	0800990b 	.word	0x0800990b
 80098a4:	08009b23 	.word	0x08009b23
 80098a8:	08009b23 	.word	0x08009b23
 80098ac:	08009b23 	.word	0x08009b23
 80098b0:	08009b23 	.word	0x08009b23
 80098b4:	08009b23 	.word	0x08009b23
 80098b8:	08009b23 	.word	0x08009b23
 80098bc:	08009b23 	.word	0x08009b23
 80098c0:	08009911 	.word	0x08009911
 80098c4:	08009b23 	.word	0x08009b23
 80098c8:	08009b23 	.word	0x08009b23
 80098cc:	08009b23 	.word	0x08009b23
 80098d0:	08009b23 	.word	0x08009b23
 80098d4:	08009b23 	.word	0x08009b23
 80098d8:	08009b23 	.word	0x08009b23
 80098dc:	08009b23 	.word	0x08009b23
 80098e0:	08009917 	.word	0x08009917
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e4:	4b94      	ldr	r3, [pc, #592]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0320 	and.w	r3, r3, #32
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d009      	beq.n	8009904 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098f0:	4b91      	ldr	r3, [pc, #580]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	08db      	lsrs	r3, r3, #3
 80098f6:	f003 0303 	and.w	r3, r3, #3
 80098fa:	4a90      	ldr	r2, [pc, #576]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009900:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009902:	e111      	b.n	8009b28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009904:	4b8d      	ldr	r3, [pc, #564]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009906:	61bb      	str	r3, [r7, #24]
      break;
 8009908:	e10e      	b.n	8009b28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800990a:	4b8d      	ldr	r3, [pc, #564]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800990c:	61bb      	str	r3, [r7, #24]
      break;
 800990e:	e10b      	b.n	8009b28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009910:	4b8c      	ldr	r3, [pc, #560]	; (8009b44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009912:	61bb      	str	r3, [r7, #24]
      break;
 8009914:	e108      	b.n	8009b28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009916:	4b88      	ldr	r3, [pc, #544]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009920:	4b85      	ldr	r3, [pc, #532]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009924:	091b      	lsrs	r3, r3, #4
 8009926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800992a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800992c:	4b82      	ldr	r3, [pc, #520]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009936:	4b80      	ldr	r3, [pc, #512]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993a:	08db      	lsrs	r3, r3, #3
 800993c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	fb02 f303 	mul.w	r3, r2, r3
 8009946:	ee07 3a90 	vmov	s15, r3
 800994a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 80e1 	beq.w	8009b1c <HAL_RCC_GetSysClockFreq+0x2b8>
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b02      	cmp	r3, #2
 800995e:	f000 8083 	beq.w	8009a68 <HAL_RCC_GetSysClockFreq+0x204>
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2b02      	cmp	r3, #2
 8009966:	f200 80a1 	bhi.w	8009aac <HAL_RCC_GetSysClockFreq+0x248>
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <HAL_RCC_GetSysClockFreq+0x114>
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d056      	beq.n	8009a24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009976:	e099      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009978:	4b6f      	ldr	r3, [pc, #444]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0320 	and.w	r3, r3, #32
 8009980:	2b00      	cmp	r3, #0
 8009982:	d02d      	beq.n	80099e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009984:	4b6c      	ldr	r3, [pc, #432]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	08db      	lsrs	r3, r3, #3
 800998a:	f003 0303 	and.w	r3, r3, #3
 800998e:	4a6b      	ldr	r2, [pc, #428]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009990:	fa22 f303 	lsr.w	r3, r2, r3
 8009994:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	ee07 3a90 	vmov	s15, r3
 800999c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	ee07 3a90 	vmov	s15, r3
 80099a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ae:	4b62      	ldr	r3, [pc, #392]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b6:	ee07 3a90 	vmov	s15, r3
 80099ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099be:	ed97 6a02 	vldr	s12, [r7, #8]
 80099c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80099de:	e087      	b.n	8009af0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e8>
 80099ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f2:	4b51      	ldr	r3, [pc, #324]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a22:	e065      	b.n	8009af0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a36:	4b40      	ldr	r3, [pc, #256]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a66:	e043      	b.n	8009af0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a7a:	4b2f      	ldr	r3, [pc, #188]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009aaa:	e021      	b.n	8009af0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009abe:	4b1e      	ldr	r3, [pc, #120]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ad2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009aee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009af0:	4b11      	ldr	r3, [pc, #68]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af4:	0a5b      	lsrs	r3, r3, #9
 8009af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009afa:	3301      	adds	r3, #1
 8009afc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	ee07 3a90 	vmov	s15, r3
 8009b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b14:	ee17 3a90 	vmov	r3, s15
 8009b18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009b1a:	e005      	b.n	8009b28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	61bb      	str	r3, [r7, #24]
      break;
 8009b20:	e002      	b.n	8009b28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009b22:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b24:	61bb      	str	r3, [r7, #24]
      break;
 8009b26:	bf00      	nop
  }

  return sysclockfreq;
 8009b28:	69bb      	ldr	r3, [r7, #24]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3724      	adds	r7, #36	; 0x24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	58024400 	.word	0x58024400
 8009b3c:	03d09000 	.word	0x03d09000
 8009b40:	003d0900 	.word	0x003d0900
 8009b44:	017d7840 	.word	0x017d7840
 8009b48:	46000000 	.word	0x46000000
 8009b4c:	4c742400 	.word	0x4c742400
 8009b50:	4a742400 	.word	0x4a742400
 8009b54:	4bbebc20 	.word	0x4bbebc20

08009b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b5e:	f7ff fe81 	bl	8009864 <HAL_RCC_GetSysClockFreq>
 8009b62:	4602      	mov	r2, r0
 8009b64:	4b10      	ldr	r3, [pc, #64]	; (8009ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	0a1b      	lsrs	r3, r3, #8
 8009b6a:	f003 030f 	and.w	r3, r3, #15
 8009b6e:	490f      	ldr	r1, [pc, #60]	; (8009bac <HAL_RCC_GetHCLKFreq+0x54>)
 8009b70:	5ccb      	ldrb	r3, [r1, r3]
 8009b72:	f003 031f 	and.w	r3, r3, #31
 8009b76:	fa22 f303 	lsr.w	r3, r2, r3
 8009b7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	f003 030f 	and.w	r3, r3, #15
 8009b84:	4a09      	ldr	r2, [pc, #36]	; (8009bac <HAL_RCC_GetHCLKFreq+0x54>)
 8009b86:	5cd3      	ldrb	r3, [r2, r3]
 8009b88:	f003 031f 	and.w	r3, r3, #31
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b92:	4a07      	ldr	r2, [pc, #28]	; (8009bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b96:	4a07      	ldr	r2, [pc, #28]	; (8009bb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009b9c:	4b04      	ldr	r3, [pc, #16]	; (8009bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	58024400 	.word	0x58024400
 8009bac:	080160e4 	.word	0x080160e4
 8009bb0:	2400008c 	.word	0x2400008c
 8009bb4:	24000088 	.word	0x24000088

08009bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009bbc:	f7ff ffcc 	bl	8009b58 <HAL_RCC_GetHCLKFreq>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	091b      	lsrs	r3, r3, #4
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	4904      	ldr	r1, [pc, #16]	; (8009be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bce:	5ccb      	ldrb	r3, [r1, r3]
 8009bd0:	f003 031f 	and.w	r3, r3, #31
 8009bd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	58024400 	.word	0x58024400
 8009be0:	080160e4 	.word	0x080160e4

08009be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009be8:	f7ff ffb6 	bl	8009b58 <HAL_RCC_GetHCLKFreq>
 8009bec:	4602      	mov	r2, r0
 8009bee:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	0a1b      	lsrs	r3, r3, #8
 8009bf4:	f003 0307 	and.w	r3, r3, #7
 8009bf8:	4904      	ldr	r1, [pc, #16]	; (8009c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009bfa:	5ccb      	ldrb	r3, [r1, r3]
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	58024400 	.word	0x58024400
 8009c0c:	080160e4 	.word	0x080160e4

08009c10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	223f      	movs	r2, #63	; 0x3f
 8009c1e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009c20:	4b1a      	ldr	r3, [pc, #104]	; (8009c8c <HAL_RCC_GetClockConfig+0x7c>)
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	f003 0207 	and.w	r2, r3, #7
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009c2c:	4b17      	ldr	r3, [pc, #92]	; (8009c8c <HAL_RCC_GetClockConfig+0x7c>)
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009c38:	4b14      	ldr	r3, [pc, #80]	; (8009c8c <HAL_RCC_GetClockConfig+0x7c>)
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	f003 020f 	and.w	r2, r3, #15
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009c44:	4b11      	ldr	r3, [pc, #68]	; (8009c8c <HAL_RCC_GetClockConfig+0x7c>)
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009c50:	4b0e      	ldr	r3, [pc, #56]	; (8009c8c <HAL_RCC_GetClockConfig+0x7c>)
 8009c52:	69db      	ldr	r3, [r3, #28]
 8009c54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009c5c:	4b0b      	ldr	r3, [pc, #44]	; (8009c8c <HAL_RCC_GetClockConfig+0x7c>)
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009c68:	4b08      	ldr	r3, [pc, #32]	; (8009c8c <HAL_RCC_GetClockConfig+0x7c>)
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c74:	4b06      	ldr	r3, [pc, #24]	; (8009c90 <HAL_RCC_GetClockConfig+0x80>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 020f 	and.w	r2, r3, #15
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	601a      	str	r2, [r3, #0]
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	58024400 	.word	0x58024400
 8009c90:	52002000 	.word	0x52002000

08009c94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c98:	b0ca      	sub	sp, #296	; 0x128
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009cb8:	2500      	movs	r5, #0
 8009cba:	ea54 0305 	orrs.w	r3, r4, r5
 8009cbe:	d049      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009cca:	d02f      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009ccc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009cd0:	d828      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cd6:	d01a      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cdc:	d822      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce6:	d007      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009ce8:	e01c      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cea:	4bb8      	ldr	r3, [pc, #736]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cee:	4ab7      	ldr	r2, [pc, #732]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cf6:	e01a      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	2102      	movs	r1, #2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f002 fb61 	bl	800c3c8 <RCCEx_PLL2_Config>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d0c:	e00f      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d12:	3328      	adds	r3, #40	; 0x28
 8009d14:	2102      	movs	r1, #2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f002 fc08 	bl	800c52c <RCCEx_PLL3_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d22:	e004      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d2a:	e000      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009d36:	4ba5      	ldr	r3, [pc, #660]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d44:	4aa1      	ldr	r2, [pc, #644]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d46:	430b      	orrs	r3, r1
 8009d48:	6513      	str	r3, [r2, #80]	; 0x50
 8009d4a:	e003      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009d60:	f04f 0900 	mov.w	r9, #0
 8009d64:	ea58 0309 	orrs.w	r3, r8, r9
 8009d68:	d047      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d70:	2b04      	cmp	r3, #4
 8009d72:	d82a      	bhi.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009d74:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7a:	bf00      	nop
 8009d7c:	08009d91 	.word	0x08009d91
 8009d80:	08009d9f 	.word	0x08009d9f
 8009d84:	08009db5 	.word	0x08009db5
 8009d88:	08009dd3 	.word	0x08009dd3
 8009d8c:	08009dd3 	.word	0x08009dd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d90:	4b8e      	ldr	r3, [pc, #568]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d94:	4a8d      	ldr	r2, [pc, #564]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d9c:	e01a      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da2:	3308      	adds	r3, #8
 8009da4:	2100      	movs	r1, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f002 fb0e 	bl	800c3c8 <RCCEx_PLL2_Config>
 8009dac:	4603      	mov	r3, r0
 8009dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009db2:	e00f      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db8:	3328      	adds	r3, #40	; 0x28
 8009dba:	2100      	movs	r1, #0
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f002 fbb5 	bl	800c52c <RCCEx_PLL3_Config>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009dc8:	e004      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dd0:	e000      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10a      	bne.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ddc:	4b7b      	ldr	r3, [pc, #492]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de0:	f023 0107 	bic.w	r1, r3, #7
 8009de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dea:	4a78      	ldr	r2, [pc, #480]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dec:	430b      	orrs	r3, r1
 8009dee:	6513      	str	r3, [r2, #80]	; 0x50
 8009df0:	e003      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009df6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009e06:	f04f 0b00 	mov.w	fp, #0
 8009e0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8009e0e:	d04c      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e1a:	d030      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e20:	d829      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009e22:	2bc0      	cmp	r3, #192	; 0xc0
 8009e24:	d02d      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009e26:	2bc0      	cmp	r3, #192	; 0xc0
 8009e28:	d825      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009e2a:	2b80      	cmp	r3, #128	; 0x80
 8009e2c:	d018      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009e2e:	2b80      	cmp	r3, #128	; 0x80
 8009e30:	d821      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009e36:	2b40      	cmp	r3, #64	; 0x40
 8009e38:	d007      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009e3a:	e01c      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e3c:	4b63      	ldr	r3, [pc, #396]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	4a62      	ldr	r2, [pc, #392]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e48:	e01c      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e4e:	3308      	adds	r3, #8
 8009e50:	2100      	movs	r1, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	f002 fab8 	bl	800c3c8 <RCCEx_PLL2_Config>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e5e:	e011      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e64:	3328      	adds	r3, #40	; 0x28
 8009e66:	2100      	movs	r1, #0
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f002 fb5f 	bl	800c52c <RCCEx_PLL3_Config>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e74:	e006      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e7c:	e002      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009e7e:	bf00      	nop
 8009e80:	e000      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10a      	bne.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009e8c:	4b4f      	ldr	r3, [pc, #316]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e90:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9a:	4a4c      	ldr	r2, [pc, #304]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	6513      	str	r3, [r2, #80]	; 0x50
 8009ea0:	e003      	b.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009eb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009ec0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	d053      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ed2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ed6:	d035      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009ed8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009edc:	d82e      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009ede:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ee2:	d031      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009ee4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ee8:	d828      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eee:	d01a      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ef4:	d822      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009efe:	d007      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009f00:	e01c      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f02:	4b32      	ldr	r3, [pc, #200]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f06:	4a31      	ldr	r2, [pc, #196]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f0e:	e01c      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f14:	3308      	adds	r3, #8
 8009f16:	2100      	movs	r1, #0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f002 fa55 	bl	800c3c8 <RCCEx_PLL2_Config>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f24:	e011      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f2a:	3328      	adds	r3, #40	; 0x28
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f002 fafc 	bl	800c52c <RCCEx_PLL3_Config>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f3a:	e006      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f42:	e002      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009f44:	bf00      	nop
 8009f46:	e000      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10b      	bne.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f52:	4b1e      	ldr	r3, [pc, #120]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f56:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f62:	4a1a      	ldr	r2, [pc, #104]	; (8009fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f64:	430b      	orrs	r3, r1
 8009f66:	6593      	str	r3, [r2, #88]	; 0x58
 8009f68:	e003      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009f7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f82:	2300      	movs	r3, #0
 8009f84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009f88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	d056      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f9e:	d038      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fa4:	d831      	bhi.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009fa6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009faa:	d034      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009fac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fb0:	d82b      	bhi.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009fb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fb6:	d01d      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fbc:	d825      	bhi.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d006      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009fc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fc6:	d00a      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009fc8:	e01f      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009fca:	bf00      	nop
 8009fcc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fd0:	4ba2      	ldr	r3, [pc, #648]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	4aa1      	ldr	r2, [pc, #644]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fdc:	e01c      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f002 f9ee 	bl	800c3c8 <RCCEx_PLL2_Config>
 8009fec:	4603      	mov	r3, r0
 8009fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ff2:	e011      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff8:	3328      	adds	r3, #40	; 0x28
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f002 fa95 	bl	800c52c <RCCEx_PLL3_Config>
 800a002:	4603      	mov	r3, r0
 800a004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a008:	e006      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a010:	e002      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a012:	bf00      	nop
 800a014:	e000      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a016:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a020:	4b8e      	ldr	r3, [pc, #568]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a024:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a02c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a030:	4a8a      	ldr	r2, [pc, #552]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a032:	430b      	orrs	r3, r1
 800a034:	6593      	str	r3, [r2, #88]	; 0x58
 800a036:	e003      	b.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a03c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a04c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a050:	2300      	movs	r3, #0
 800a052:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a056:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a05a:	460b      	mov	r3, r1
 800a05c:	4313      	orrs	r3, r2
 800a05e:	d03a      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a066:	2b30      	cmp	r3, #48	; 0x30
 800a068:	d01f      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a06a:	2b30      	cmp	r3, #48	; 0x30
 800a06c:	d819      	bhi.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a06e:	2b20      	cmp	r3, #32
 800a070:	d00c      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a072:	2b20      	cmp	r3, #32
 800a074:	d815      	bhi.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a076:	2b00      	cmp	r3, #0
 800a078:	d019      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a07a:	2b10      	cmp	r3, #16
 800a07c:	d111      	bne.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a07e:	4b77      	ldr	r3, [pc, #476]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a082:	4a76      	ldr	r2, [pc, #472]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a088:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a08a:	e011      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a090:	3308      	adds	r3, #8
 800a092:	2102      	movs	r1, #2
 800a094:	4618      	mov	r0, r3
 800a096:	f002 f997 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a0a0:	e006      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0a8:	e002      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a0aa:	bf00      	nop
 800a0ac:	e000      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a0ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a0b8:	4b68      	ldr	r3, [pc, #416]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0bc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0c6:	4a65      	ldr	r2, [pc, #404]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0c8:	430b      	orrs	r3, r1
 800a0ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a0cc:	e003      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a0e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a0ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	d051      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a100:	d035      	beq.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a106:	d82e      	bhi.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a108:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a10c:	d031      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a10e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a112:	d828      	bhi.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a118:	d01a      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a11a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a11e:	d822      	bhi.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a128:	d007      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a12a:	e01c      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a12c:	4b4b      	ldr	r3, [pc, #300]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a130:	4a4a      	ldr	r2, [pc, #296]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a138:	e01c      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a13e:	3308      	adds	r3, #8
 800a140:	2100      	movs	r1, #0
 800a142:	4618      	mov	r0, r3
 800a144:	f002 f940 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a148:	4603      	mov	r3, r0
 800a14a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a14e:	e011      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a154:	3328      	adds	r3, #40	; 0x28
 800a156:	2100      	movs	r1, #0
 800a158:	4618      	mov	r0, r3
 800a15a:	f002 f9e7 	bl	800c52c <RCCEx_PLL3_Config>
 800a15e:	4603      	mov	r3, r0
 800a160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a164:	e006      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a16c:	e002      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a16e:	bf00      	nop
 800a170:	e000      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a172:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10a      	bne.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a17c:	4b37      	ldr	r3, [pc, #220]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a17e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a180:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a18a:	4a34      	ldr	r2, [pc, #208]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a18c:	430b      	orrs	r3, r1
 800a18e:	6513      	str	r3, [r2, #80]	; 0x50
 800a190:	e003      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a196:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a1a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a1b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	d056      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1c4:	d033      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a1c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1ca:	d82c      	bhi.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a1cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a1d0:	d02f      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a1d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a1d6:	d826      	bhi.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a1d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a1dc:	d02b      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a1de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a1e2:	d820      	bhi.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a1e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1e8:	d012      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a1ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1ee:	d81a      	bhi.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d022      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1f8:	d115      	bne.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1fe:	3308      	adds	r3, #8
 800a200:	2101      	movs	r1, #1
 800a202:	4618      	mov	r0, r3
 800a204:	f002 f8e0 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a208:	4603      	mov	r3, r0
 800a20a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a20e:	e015      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a214:	3328      	adds	r3, #40	; 0x28
 800a216:	2101      	movs	r1, #1
 800a218:	4618      	mov	r0, r3
 800a21a:	f002 f987 	bl	800c52c <RCCEx_PLL3_Config>
 800a21e:	4603      	mov	r3, r0
 800a220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a224:	e00a      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a22c:	e006      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a22e:	bf00      	nop
 800a230:	e004      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a232:	bf00      	nop
 800a234:	e002      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a236:	bf00      	nop
 800a238:	e000      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a23a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a23c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10d      	bne.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a248:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a252:	4a02      	ldr	r2, [pc, #8]	; (800a25c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a254:	430b      	orrs	r3, r1
 800a256:	6513      	str	r3, [r2, #80]	; 0x50
 800a258:	e006      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a25a:	bf00      	nop
 800a25c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a278:	2300      	movs	r3, #0
 800a27a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a27e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a282:	460b      	mov	r3, r1
 800a284:	4313      	orrs	r3, r2
 800a286:	d055      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a294:	d033      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a29a:	d82c      	bhi.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a29c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a0:	d02f      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a6:	d826      	bhi.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a2a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2ac:	d02b      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a2ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2b2:	d820      	bhi.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a2b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2b8:	d012      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a2ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2be:	d81a      	bhi.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d022      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a2c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2c8:	d115      	bne.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f002 f878 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2de:	e015      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2e4:	3328      	adds	r3, #40	; 0x28
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f002 f91f 	bl	800c52c <RCCEx_PLL3_Config>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2f4:	e00a      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2fc:	e006      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2fe:	bf00      	nop
 800a300:	e004      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a302:	bf00      	nop
 800a304:	e002      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a306:	bf00      	nop
 800a308:	e000      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a30a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a30c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10b      	bne.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a314:	4ba3      	ldr	r3, [pc, #652]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a318:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a324:	4a9f      	ldr	r2, [pc, #636]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a326:	430b      	orrs	r3, r1
 800a328:	6593      	str	r3, [r2, #88]	; 0x58
 800a32a:	e003      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a32c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a330:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a344:	2300      	movs	r3, #0
 800a346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a34a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a34e:	460b      	mov	r3, r1
 800a350:	4313      	orrs	r3, r2
 800a352:	d037      	beq.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a35e:	d00e      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a364:	d816      	bhi.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a366:	2b00      	cmp	r3, #0
 800a368:	d018      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a36a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a36e:	d111      	bne.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a370:	4b8c      	ldr	r3, [pc, #560]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a374:	4a8b      	ldr	r2, [pc, #556]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a37a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a37c:	e00f      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a382:	3308      	adds	r3, #8
 800a384:	2101      	movs	r1, #1
 800a386:	4618      	mov	r0, r3
 800a388:	f002 f81e 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a38c:	4603      	mov	r3, r0
 800a38e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a392:	e004      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a39a:	e000      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a39c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a39e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10a      	bne.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a3a6:	4b7f      	ldr	r3, [pc, #508]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b4:	4a7b      	ldr	r2, [pc, #492]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3b6:	430b      	orrs	r3, r1
 800a3b8:	6513      	str	r3, [r2, #80]	; 0x50
 800a3ba:	e003      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a3d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a3da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	d039      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d81c      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a3ee:	a201      	add	r2, pc, #4	; (adr r2, 800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f4:	0800a431 	.word	0x0800a431
 800a3f8:	0800a405 	.word	0x0800a405
 800a3fc:	0800a413 	.word	0x0800a413
 800a400:	0800a431 	.word	0x0800a431
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a404:	4b67      	ldr	r3, [pc, #412]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a408:	4a66      	ldr	r2, [pc, #408]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a40a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a40e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a410:	e00f      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a416:	3308      	adds	r3, #8
 800a418:	2102      	movs	r1, #2
 800a41a:	4618      	mov	r0, r3
 800a41c:	f001 ffd4 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a420:	4603      	mov	r3, r0
 800a422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a426:	e004      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a42e:	e000      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a430:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10a      	bne.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a43a:	4b5a      	ldr	r3, [pc, #360]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a43e:	f023 0103 	bic.w	r1, r3, #3
 800a442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a448:	4a56      	ldr	r2, [pc, #344]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a44a:	430b      	orrs	r3, r1
 800a44c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a44e:	e003      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a450:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a454:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a468:	2300      	movs	r3, #0
 800a46a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a46e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a472:	460b      	mov	r3, r1
 800a474:	4313      	orrs	r3, r2
 800a476:	f000 809f 	beq.w	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a47a:	4b4b      	ldr	r3, [pc, #300]	; (800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a4a      	ldr	r2, [pc, #296]	; (800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a484:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a486:	f7f9 f919 	bl	80036bc <HAL_GetTick>
 800a48a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a48e:	e00b      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a490:	f7f9 f914 	bl	80036bc <HAL_GetTick>
 800a494:	4602      	mov	r2, r0
 800a496:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	2b64      	cmp	r3, #100	; 0x64
 800a49e:	d903      	bls.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4a6:	e005      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4a8:	4b3f      	ldr	r3, [pc, #252]	; (800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0ed      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a4b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d179      	bne.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a4bc:	4b39      	ldr	r3, [pc, #228]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a4c8:	4053      	eors	r3, r2
 800a4ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d015      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4d2:	4b34      	ldr	r3, [pc, #208]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4de:	4b31      	ldr	r3, [pc, #196]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e2:	4a30      	ldr	r2, [pc, #192]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4ea:	4b2e      	ldr	r3, [pc, #184]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ee:	4a2d      	ldr	r2, [pc, #180]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a4f6:	4a2b      	ldr	r2, [pc, #172]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a4fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a50a:	d118      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a50c:	f7f9 f8d6 	bl	80036bc <HAL_GetTick>
 800a510:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a514:	e00d      	b.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a516:	f7f9 f8d1 	bl	80036bc <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a520:	1ad2      	subs	r2, r2, r3
 800a522:	f241 3388 	movw	r3, #5000	; 0x1388
 800a526:	429a      	cmp	r2, r3
 800a528:	d903      	bls.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a530:	e005      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a532:	4b1c      	ldr	r3, [pc, #112]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0eb      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a53e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a542:	2b00      	cmp	r3, #0
 800a544:	d129      	bne.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a54a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a54e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a556:	d10e      	bne.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a558:	4b12      	ldr	r3, [pc, #72]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a564:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a568:	091a      	lsrs	r2, r3, #4
 800a56a:	4b10      	ldr	r3, [pc, #64]	; (800a5ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	4a0d      	ldr	r2, [pc, #52]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a570:	430b      	orrs	r3, r1
 800a572:	6113      	str	r3, [r2, #16]
 800a574:	e005      	b.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a576:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	4a0a      	ldr	r2, [pc, #40]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a57c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a580:	6113      	str	r3, [r2, #16]
 800a582:	4b08      	ldr	r3, [pc, #32]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a584:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a58a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a58e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a592:	4a04      	ldr	r2, [pc, #16]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a594:	430b      	orrs	r3, r1
 800a596:	6713      	str	r3, [r2, #112]	; 0x70
 800a598:	e00e      	b.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a59a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a59e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a5a2:	e009      	b.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a5a4:	58024400 	.word	0x58024400
 800a5a8:	58024800 	.word	0x58024800
 800a5ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c0:	f002 0301 	and.w	r3, r2, #1
 800a5c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a5ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	f000 8089 	beq.w	800a6ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5e0:	2b28      	cmp	r3, #40	; 0x28
 800a5e2:	d86b      	bhi.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a5e4:	a201      	add	r2, pc, #4	; (adr r2, 800a5ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ea:	bf00      	nop
 800a5ec:	0800a6c5 	.word	0x0800a6c5
 800a5f0:	0800a6bd 	.word	0x0800a6bd
 800a5f4:	0800a6bd 	.word	0x0800a6bd
 800a5f8:	0800a6bd 	.word	0x0800a6bd
 800a5fc:	0800a6bd 	.word	0x0800a6bd
 800a600:	0800a6bd 	.word	0x0800a6bd
 800a604:	0800a6bd 	.word	0x0800a6bd
 800a608:	0800a6bd 	.word	0x0800a6bd
 800a60c:	0800a691 	.word	0x0800a691
 800a610:	0800a6bd 	.word	0x0800a6bd
 800a614:	0800a6bd 	.word	0x0800a6bd
 800a618:	0800a6bd 	.word	0x0800a6bd
 800a61c:	0800a6bd 	.word	0x0800a6bd
 800a620:	0800a6bd 	.word	0x0800a6bd
 800a624:	0800a6bd 	.word	0x0800a6bd
 800a628:	0800a6bd 	.word	0x0800a6bd
 800a62c:	0800a6a7 	.word	0x0800a6a7
 800a630:	0800a6bd 	.word	0x0800a6bd
 800a634:	0800a6bd 	.word	0x0800a6bd
 800a638:	0800a6bd 	.word	0x0800a6bd
 800a63c:	0800a6bd 	.word	0x0800a6bd
 800a640:	0800a6bd 	.word	0x0800a6bd
 800a644:	0800a6bd 	.word	0x0800a6bd
 800a648:	0800a6bd 	.word	0x0800a6bd
 800a64c:	0800a6c5 	.word	0x0800a6c5
 800a650:	0800a6bd 	.word	0x0800a6bd
 800a654:	0800a6bd 	.word	0x0800a6bd
 800a658:	0800a6bd 	.word	0x0800a6bd
 800a65c:	0800a6bd 	.word	0x0800a6bd
 800a660:	0800a6bd 	.word	0x0800a6bd
 800a664:	0800a6bd 	.word	0x0800a6bd
 800a668:	0800a6bd 	.word	0x0800a6bd
 800a66c:	0800a6c5 	.word	0x0800a6c5
 800a670:	0800a6bd 	.word	0x0800a6bd
 800a674:	0800a6bd 	.word	0x0800a6bd
 800a678:	0800a6bd 	.word	0x0800a6bd
 800a67c:	0800a6bd 	.word	0x0800a6bd
 800a680:	0800a6bd 	.word	0x0800a6bd
 800a684:	0800a6bd 	.word	0x0800a6bd
 800a688:	0800a6bd 	.word	0x0800a6bd
 800a68c:	0800a6c5 	.word	0x0800a6c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a694:	3308      	adds	r3, #8
 800a696:	2101      	movs	r1, #1
 800a698:	4618      	mov	r0, r3
 800a69a:	f001 fe95 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a6a4:	e00f      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6aa:	3328      	adds	r3, #40	; 0x28
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f001 ff3c 	bl	800c52c <RCCEx_PLL3_Config>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a6ba:	e004      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6c2:	e000      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a6c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a6ce:	4bbf      	ldr	r3, [pc, #764]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6dc:	4abb      	ldr	r2, [pc, #748]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6de:	430b      	orrs	r3, r1
 800a6e0:	6553      	str	r3, [r2, #84]	; 0x54
 800a6e2:	e003      	b.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	f002 0302 	and.w	r3, r2, #2
 800a6f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a702:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a706:	460b      	mov	r3, r1
 800a708:	4313      	orrs	r3, r2
 800a70a:	d041      	beq.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a712:	2b05      	cmp	r3, #5
 800a714:	d824      	bhi.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a716:	a201      	add	r2, pc, #4	; (adr r2, 800a71c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71c:	0800a769 	.word	0x0800a769
 800a720:	0800a735 	.word	0x0800a735
 800a724:	0800a74b 	.word	0x0800a74b
 800a728:	0800a769 	.word	0x0800a769
 800a72c:	0800a769 	.word	0x0800a769
 800a730:	0800a769 	.word	0x0800a769
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a738:	3308      	adds	r3, #8
 800a73a:	2101      	movs	r1, #1
 800a73c:	4618      	mov	r0, r3
 800a73e:	f001 fe43 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a742:	4603      	mov	r3, r0
 800a744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a748:	e00f      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74e:	3328      	adds	r3, #40	; 0x28
 800a750:	2101      	movs	r1, #1
 800a752:	4618      	mov	r0, r3
 800a754:	f001 feea 	bl	800c52c <RCCEx_PLL3_Config>
 800a758:	4603      	mov	r3, r0
 800a75a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a75e:	e004      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a766:	e000      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a76a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10a      	bne.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a772:	4b96      	ldr	r3, [pc, #600]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a776:	f023 0107 	bic.w	r1, r3, #7
 800a77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a780:	4a92      	ldr	r2, [pc, #584]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a782:	430b      	orrs	r3, r1
 800a784:	6553      	str	r3, [r2, #84]	; 0x54
 800a786:	e003      	b.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a78c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	f002 0304 	and.w	r3, r2, #4
 800a79c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	d044      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7b8:	2b05      	cmp	r3, #5
 800a7ba:	d825      	bhi.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a7bc:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c2:	bf00      	nop
 800a7c4:	0800a811 	.word	0x0800a811
 800a7c8:	0800a7dd 	.word	0x0800a7dd
 800a7cc:	0800a7f3 	.word	0x0800a7f3
 800a7d0:	0800a811 	.word	0x0800a811
 800a7d4:	0800a811 	.word	0x0800a811
 800a7d8:	0800a811 	.word	0x0800a811
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e0:	3308      	adds	r3, #8
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 fdef 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7f0:	e00f      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f6:	3328      	adds	r3, #40	; 0x28
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 fe96 	bl	800c52c <RCCEx_PLL3_Config>
 800a800:	4603      	mov	r3, r0
 800a802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a806:	e004      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a80e:	e000      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a810:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10b      	bne.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a81a:	4b6c      	ldr	r3, [pc, #432]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a81c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a81e:	f023 0107 	bic.w	r1, r3, #7
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a82a:	4a68      	ldr	r2, [pc, #416]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a82c:	430b      	orrs	r3, r1
 800a82e:	6593      	str	r3, [r2, #88]	; 0x58
 800a830:	e003      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f002 0320 	and.w	r3, r2, #32
 800a846:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a84a:	2300      	movs	r3, #0
 800a84c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a854:	460b      	mov	r3, r1
 800a856:	4313      	orrs	r3, r2
 800a858:	d055      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a85e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a866:	d033      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a86c:	d82c      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a872:	d02f      	beq.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a878:	d826      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a87a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a87e:	d02b      	beq.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a880:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a884:	d820      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a88a:	d012      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a88c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a890:	d81a      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d022      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a89a:	d115      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a0:	3308      	adds	r3, #8
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f001 fd8f 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a8b0:	e015      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b6:	3328      	adds	r3, #40	; 0x28
 800a8b8:	2102      	movs	r1, #2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 fe36 	bl	800c52c <RCCEx_PLL3_Config>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a8c6:	e00a      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8ce:	e006      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a8d0:	bf00      	nop
 800a8d2:	e004      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a8d4:	bf00      	nop
 800a8d6:	e002      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a8d8:	bf00      	nop
 800a8da:	e000      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a8dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10b      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8e6:	4b39      	ldr	r3, [pc, #228]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8f6:	4a35      	ldr	r2, [pc, #212]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	6553      	str	r3, [r2, #84]	; 0x54
 800a8fc:	e003      	b.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a902:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a916:	2300      	movs	r3, #0
 800a918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a91c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a920:	460b      	mov	r3, r1
 800a922:	4313      	orrs	r3, r2
 800a924:	d058      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a92a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a92e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a932:	d033      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a934:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a938:	d82c      	bhi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a93a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a93e:	d02f      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a944:	d826      	bhi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a946:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a94a:	d02b      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a94c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a950:	d820      	bhi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a956:	d012      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a95c:	d81a      	bhi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d022      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a966:	d115      	bne.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96c:	3308      	adds	r3, #8
 800a96e:	2100      	movs	r1, #0
 800a970:	4618      	mov	r0, r3
 800a972:	f001 fd29 	bl	800c3c8 <RCCEx_PLL2_Config>
 800a976:	4603      	mov	r3, r0
 800a978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a97c:	e015      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a982:	3328      	adds	r3, #40	; 0x28
 800a984:	2102      	movs	r1, #2
 800a986:	4618      	mov	r0, r3
 800a988:	f001 fdd0 	bl	800c52c <RCCEx_PLL3_Config>
 800a98c:	4603      	mov	r3, r0
 800a98e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a992:	e00a      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a99a:	e006      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a99c:	bf00      	nop
 800a99e:	e004      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a9a0:	bf00      	nop
 800a9a2:	e002      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a9a4:	bf00      	nop
 800a9a6:	e000      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a9a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10e      	bne.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a9b2:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9c2:	4a02      	ldr	r2, [pc, #8]	; (800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9c4:	430b      	orrs	r3, r1
 800a9c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a9c8:	e006      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a9ca:	bf00      	nop
 800a9cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a9e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	d055      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aa04:	d033      	beq.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800aa06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aa0a:	d82c      	bhi.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aa0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa10:	d02f      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800aa12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa16:	d826      	bhi.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aa18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aa1c:	d02b      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800aa1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aa22:	d820      	bhi.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aa24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa28:	d012      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800aa2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa2e:	d81a      	bhi.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d022      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800aa34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa38:	d115      	bne.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3e:	3308      	adds	r3, #8
 800aa40:	2100      	movs	r1, #0
 800aa42:	4618      	mov	r0, r3
 800aa44:	f001 fcc0 	bl	800c3c8 <RCCEx_PLL2_Config>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa4e:	e015      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa54:	3328      	adds	r3, #40	; 0x28
 800aa56:	2102      	movs	r1, #2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f001 fd67 	bl	800c52c <RCCEx_PLL3_Config>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa64:	e00a      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa6c:	e006      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa6e:	bf00      	nop
 800aa70:	e004      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa72:	bf00      	nop
 800aa74:	e002      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa76:	bf00      	nop
 800aa78:	e000      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10b      	bne.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa84:	4ba1      	ldr	r3, [pc, #644]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa88:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800aa8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa94:	4a9d      	ldr	r2, [pc, #628]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa96:	430b      	orrs	r3, r1
 800aa98:	6593      	str	r3, [r2, #88]	; 0x58
 800aa9a:	e003      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aaa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f002 0308 	and.w	r3, r2, #8
 800aab0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aab4:	2300      	movs	r3, #0
 800aab6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aaba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800aabe:	460b      	mov	r3, r1
 800aac0:	4313      	orrs	r3, r2
 800aac2:	d01e      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800aac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad0:	d10c      	bne.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aad6:	3328      	adds	r3, #40	; 0x28
 800aad8:	2102      	movs	r1, #2
 800aada:	4618      	mov	r0, r3
 800aadc:	f001 fd26 	bl	800c52c <RCCEx_PLL3_Config>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d002      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aaec:	4b87      	ldr	r3, [pc, #540]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aaee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aaf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aafc:	4a83      	ldr	r2, [pc, #524]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aafe:	430b      	orrs	r3, r1
 800ab00:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	f002 0310 	and.w	r3, r2, #16
 800ab0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab12:	2300      	movs	r3, #0
 800ab14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ab18:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	d01e      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ab22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab2e:	d10c      	bne.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab34:	3328      	adds	r3, #40	; 0x28
 800ab36:	2102      	movs	r1, #2
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 fcf7 	bl	800c52c <RCCEx_PLL3_Config>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab4a:	4b70      	ldr	r3, [pc, #448]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ab52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab5a:	4a6c      	ldr	r2, [pc, #432]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab5c:	430b      	orrs	r3, r1
 800ab5e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ab6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab70:	2300      	movs	r3, #0
 800ab72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab76:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	d03e      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ab80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab8c:	d022      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ab8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab92:	d81b      	bhi.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d003      	beq.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ab98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab9c:	d00b      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ab9e:	e015      	b.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba4:	3308      	adds	r3, #8
 800aba6:	2100      	movs	r1, #0
 800aba8:	4618      	mov	r0, r3
 800abaa:	f001 fc0d 	bl	800c3c8 <RCCEx_PLL2_Config>
 800abae:	4603      	mov	r3, r0
 800abb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800abb4:	e00f      	b.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abba:	3328      	adds	r3, #40	; 0x28
 800abbc:	2102      	movs	r1, #2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f001 fcb4 	bl	800c52c <RCCEx_PLL3_Config>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800abca:	e004      	b.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abd2:	e000      	b.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800abd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10b      	bne.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800abde:	4b4b      	ldr	r3, [pc, #300]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800abe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800abee:	4a47      	ldr	r2, [pc, #284]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abf0:	430b      	orrs	r3, r1
 800abf2:	6593      	str	r3, [r2, #88]	; 0x58
 800abf4:	e003      	b.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800abfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ac0a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ac14:	460b      	mov	r3, r1
 800ac16:	4313      	orrs	r3, r2
 800ac18:	d03b      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ac1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac26:	d01f      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ac28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac2c:	d818      	bhi.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ac2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac32:	d003      	beq.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ac34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac38:	d007      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ac3a:	e011      	b.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac3c:	4b33      	ldr	r3, [pc, #204]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac40:	4a32      	ldr	r2, [pc, #200]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac48:	e00f      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac4e:	3328      	adds	r3, #40	; 0x28
 800ac50:	2101      	movs	r1, #1
 800ac52:	4618      	mov	r0, r3
 800ac54:	f001 fc6a 	bl	800c52c <RCCEx_PLL3_Config>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac5e:	e004      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac66:	e000      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ac68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10b      	bne.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac72:	4b26      	ldr	r3, [pc, #152]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac76:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ac7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac82:	4a22      	ldr	r2, [pc, #136]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac84:	430b      	orrs	r3, r1
 800ac86:	6553      	str	r3, [r2, #84]	; 0x54
 800ac88:	e003      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ac92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ac9e:	673b      	str	r3, [r7, #112]	; 0x70
 800aca0:	2300      	movs	r3, #0
 800aca2:	677b      	str	r3, [r7, #116]	; 0x74
 800aca4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800aca8:	460b      	mov	r3, r1
 800acaa:	4313      	orrs	r3, r2
 800acac:	d034      	beq.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800acae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d003      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800acb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acbc:	d007      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800acbe:	e011      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc0:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	4a11      	ldr	r2, [pc, #68]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800accc:	e00e      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd2:	3308      	adds	r3, #8
 800acd4:	2102      	movs	r1, #2
 800acd6:	4618      	mov	r0, r3
 800acd8:	f001 fb76 	bl	800c3c8 <RCCEx_PLL2_Config>
 800acdc:	4603      	mov	r3, r0
 800acde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ace2:	e003      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10d      	bne.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad02:	4a02      	ldr	r2, [pc, #8]	; (800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad04:	430b      	orrs	r3, r1
 800ad06:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad08:	e006      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ad0a:	bf00      	nop
 800ad0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ad18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad20:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ad24:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad26:	2300      	movs	r3, #0
 800ad28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4313      	orrs	r3, r2
 800ad32:	d00c      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad38:	3328      	adds	r3, #40	; 0x28
 800ad3a:	2102      	movs	r1, #2
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f001 fbf5 	bl	800c52c <RCCEx_PLL3_Config>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ad5a:	663b      	str	r3, [r7, #96]	; 0x60
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	667b      	str	r3, [r7, #100]	; 0x64
 800ad60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ad64:	460b      	mov	r3, r1
 800ad66:	4313      	orrs	r3, r2
 800ad68:	d038      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ad6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad76:	d018      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ad78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad7c:	d811      	bhi.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ad7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad82:	d014      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ad84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad88:	d80b      	bhi.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d011      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ad8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad92:	d106      	bne.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad94:	4bc3      	ldr	r3, [pc, #780]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	4ac2      	ldr	r2, [pc, #776]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ada0:	e008      	b.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ada8:	e004      	b.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800adaa:	bf00      	nop
 800adac:	e002      	b.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800adae:	bf00      	nop
 800adb0:	e000      	b.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800adb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10b      	bne.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800adbc:	4bb9      	ldr	r3, [pc, #740]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800adc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adcc:	4ab5      	ldr	r2, [pc, #724]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adce:	430b      	orrs	r3, r1
 800add0:	6553      	str	r3, [r2, #84]	; 0x54
 800add2:	e003      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800add8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800addc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ade8:	65bb      	str	r3, [r7, #88]	; 0x58
 800adea:	2300      	movs	r3, #0
 800adec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800adf2:	460b      	mov	r3, r1
 800adf4:	4313      	orrs	r3, r2
 800adf6:	d009      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800adf8:	4baa      	ldr	r3, [pc, #680]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adfc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae06:	4aa7      	ldr	r2, [pc, #668]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae08:	430b      	orrs	r3, r1
 800ae0a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ae0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ae18:	653b      	str	r3, [r7, #80]	; 0x50
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	657b      	str	r3, [r7, #84]	; 0x54
 800ae1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ae22:	460b      	mov	r3, r1
 800ae24:	4313      	orrs	r3, r2
 800ae26:	d00a      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ae28:	4b9e      	ldr	r3, [pc, #632]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ae30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ae38:	4a9a      	ldr	r2, [pc, #616]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae3a:	430b      	orrs	r3, r1
 800ae3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ae4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ae54:	460b      	mov	r3, r1
 800ae56:	4313      	orrs	r3, r2
 800ae58:	d009      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae5a:	4b92      	ldr	r3, [pc, #584]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae5e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ae62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae68:	4a8e      	ldr	r2, [pc, #568]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae6a:	430b      	orrs	r3, r1
 800ae6c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ae7a:	643b      	str	r3, [r7, #64]	; 0x40
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ae80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ae84:	460b      	mov	r3, r1
 800ae86:	4313      	orrs	r3, r2
 800ae88:	d00e      	beq.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae8a:	4b86      	ldr	r3, [pc, #536]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	4a85      	ldr	r2, [pc, #532]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae94:	6113      	str	r3, [r2, #16]
 800ae96:	4b83      	ldr	r3, [pc, #524]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae98:	6919      	ldr	r1, [r3, #16]
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800aea2:	4a80      	ldr	r2, [pc, #512]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aea4:	430b      	orrs	r3, r1
 800aea6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aeb4:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800aebe:	460b      	mov	r3, r1
 800aec0:	4313      	orrs	r3, r2
 800aec2:	d009      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aec4:	4b77      	ldr	r3, [pc, #476]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed2:	4a74      	ldr	r2, [pc, #464]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aed4:	430b      	orrs	r3, r1
 800aed6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800aee4:	633b      	str	r3, [r7, #48]	; 0x30
 800aee6:	2300      	movs	r3, #0
 800aee8:	637b      	str	r3, [r7, #52]	; 0x34
 800aeea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800aeee:	460b      	mov	r3, r1
 800aef0:	4313      	orrs	r3, r2
 800aef2:	d00a      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aef4:	4b6b      	ldr	r3, [pc, #428]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800aefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af04:	4a67      	ldr	r2, [pc, #412]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af06:	430b      	orrs	r3, r1
 800af08:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800af0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	2100      	movs	r1, #0
 800af14:	62b9      	str	r1, [r7, #40]	; 0x28
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800af20:	460b      	mov	r3, r1
 800af22:	4313      	orrs	r3, r2
 800af24:	d011      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af2a:	3308      	adds	r3, #8
 800af2c:	2100      	movs	r1, #0
 800af2e:	4618      	mov	r0, r3
 800af30:	f001 fa4a 	bl	800c3c8 <RCCEx_PLL2_Config>
 800af34:	4603      	mov	r3, r0
 800af36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d003      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800af4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	2100      	movs	r1, #0
 800af54:	6239      	str	r1, [r7, #32]
 800af56:	f003 0302 	and.w	r3, r3, #2
 800af5a:	627b      	str	r3, [r7, #36]	; 0x24
 800af5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800af60:	460b      	mov	r3, r1
 800af62:	4313      	orrs	r3, r2
 800af64:	d011      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6a:	3308      	adds	r3, #8
 800af6c:	2101      	movs	r1, #1
 800af6e:	4618      	mov	r0, r3
 800af70:	f001 fa2a 	bl	800c3c8 <RCCEx_PLL2_Config>
 800af74:	4603      	mov	r3, r0
 800af76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800af7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800af8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	2100      	movs	r1, #0
 800af94:	61b9      	str	r1, [r7, #24]
 800af96:	f003 0304 	and.w	r3, r3, #4
 800af9a:	61fb      	str	r3, [r7, #28]
 800af9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800afa0:	460b      	mov	r3, r1
 800afa2:	4313      	orrs	r3, r2
 800afa4:	d011      	beq.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afaa:	3308      	adds	r3, #8
 800afac:	2102      	movs	r1, #2
 800afae:	4618      	mov	r0, r3
 800afb0:	f001 fa0a 	bl	800c3c8 <RCCEx_PLL2_Config>
 800afb4:	4603      	mov	r3, r0
 800afb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800afba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800afca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	2100      	movs	r1, #0
 800afd4:	6139      	str	r1, [r7, #16]
 800afd6:	f003 0308 	and.w	r3, r3, #8
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800afe0:	460b      	mov	r3, r1
 800afe2:	4313      	orrs	r3, r2
 800afe4:	d011      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afea:	3328      	adds	r3, #40	; 0x28
 800afec:	2100      	movs	r1, #0
 800afee:	4618      	mov	r0, r3
 800aff0:	f001 fa9c 	bl	800c52c <RCCEx_PLL3_Config>
 800aff4:	4603      	mov	r3, r0
 800aff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800affa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800affe:	2b00      	cmp	r3, #0
 800b000:	d003      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b006:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b012:	2100      	movs	r1, #0
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	f003 0310 	and.w	r3, r3, #16
 800b01a:	60fb      	str	r3, [r7, #12]
 800b01c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b020:	460b      	mov	r3, r1
 800b022:	4313      	orrs	r3, r2
 800b024:	d011      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b02a:	3328      	adds	r3, #40	; 0x28
 800b02c:	2101      	movs	r1, #1
 800b02e:	4618      	mov	r0, r3
 800b030:	f001 fa7c 	bl	800c52c <RCCEx_PLL3_Config>
 800b034:	4603      	mov	r3, r0
 800b036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b03a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b046:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	2100      	movs	r1, #0
 800b054:	6039      	str	r1, [r7, #0]
 800b056:	f003 0320 	and.w	r3, r3, #32
 800b05a:	607b      	str	r3, [r7, #4]
 800b05c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b060:	460b      	mov	r3, r1
 800b062:	4313      	orrs	r3, r2
 800b064:	d011      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b06a:	3328      	adds	r3, #40	; 0x28
 800b06c:	2102      	movs	r1, #2
 800b06e:	4618      	mov	r0, r3
 800b070:	f001 fa5c 	bl	800c52c <RCCEx_PLL3_Config>
 800b074:	4603      	mov	r3, r0
 800b076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b07a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d003      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800b08a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	e000      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
}
 800b098:	4618      	mov	r0, r3
 800b09a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0a4:	58024400 	.word	0x58024400

0800b0a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b090      	sub	sp, #64	; 0x40
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b0b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	f040 8094 	bne.w	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b0c0:	4b9e      	ldr	r3, [pc, #632]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c4:	f003 0307 	and.w	r3, r3, #7
 800b0c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	2b04      	cmp	r3, #4
 800b0ce:	f200 8087 	bhi.w	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b0d2:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d8:	0800b0ed 	.word	0x0800b0ed
 800b0dc:	0800b115 	.word	0x0800b115
 800b0e0:	0800b13d 	.word	0x0800b13d
 800b0e4:	0800b1d9 	.word	0x0800b1d9
 800b0e8:	0800b165 	.word	0x0800b165
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0ec:	4b93      	ldr	r3, [pc, #588]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0f8:	d108      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0fe:	4618      	mov	r0, r3
 800b100:	f001 f810 	bl	800c124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b108:	f000 bd45 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b110:	f000 bd41 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b114:	4b89      	ldr	r3, [pc, #548]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b11c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b120:	d108      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b122:	f107 0318 	add.w	r3, r7, #24
 800b126:	4618      	mov	r0, r3
 800b128:	f000 fd54 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b130:	f000 bd31 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b138:	f000 bd2d 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b13c:	4b7f      	ldr	r3, [pc, #508]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b148:	d108      	bne.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b14a:	f107 030c 	add.w	r3, r7, #12
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 fe94 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b158:	f000 bd1d 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b160:	f000 bd19 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b164:	4b75      	ldr	r3, [pc, #468]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b16c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b16e:	4b73      	ldr	r3, [pc, #460]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0304 	and.w	r3, r3, #4
 800b176:	2b04      	cmp	r3, #4
 800b178:	d10c      	bne.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d109      	bne.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b180:	4b6e      	ldr	r3, [pc, #440]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	08db      	lsrs	r3, r3, #3
 800b186:	f003 0303 	and.w	r3, r3, #3
 800b18a:	4a6d      	ldr	r2, [pc, #436]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b18c:	fa22 f303 	lsr.w	r3, r2, r3
 800b190:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b192:	e01f      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b194:	4b69      	ldr	r3, [pc, #420]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1a0:	d106      	bne.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1a8:	d102      	bne.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1aa:	4b66      	ldr	r3, [pc, #408]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1ae:	e011      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1b0:	4b62      	ldr	r3, [pc, #392]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1bc:	d106      	bne.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c4:	d102      	bne.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1c6:	4b60      	ldr	r3, [pc, #384]	; (800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1ca:	e003      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b1d0:	f000 bce1 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1d4:	f000 bcdf 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1d8:	4b5c      	ldr	r3, [pc, #368]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1dc:	f000 bcdb 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1e4:	f000 bcd7 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b1e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ec:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b1f0:	430b      	orrs	r3, r1
 800b1f2:	f040 80ad 	bne.w	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b1f6:	4b51      	ldr	r3, [pc, #324]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1fa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b1fe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b206:	d056      	beq.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b20e:	f200 8090 	bhi.w	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b214:	2bc0      	cmp	r3, #192	; 0xc0
 800b216:	f000 8088 	beq.w	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	2bc0      	cmp	r3, #192	; 0xc0
 800b21e:	f200 8088 	bhi.w	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b224:	2b80      	cmp	r3, #128	; 0x80
 800b226:	d032      	beq.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	2b80      	cmp	r3, #128	; 0x80
 800b22c:	f200 8081 	bhi.w	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	2b40      	cmp	r3, #64	; 0x40
 800b23a:	d014      	beq.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b23c:	e079      	b.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b23e:	4b3f      	ldr	r3, [pc, #252]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b24a:	d108      	bne.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b24c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b250:	4618      	mov	r0, r3
 800b252:	f000 ff67 	bl	800c124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b25a:	f000 bc9c 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b262:	f000 bc98 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b266:	4b35      	ldr	r3, [pc, #212]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b26e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b272:	d108      	bne.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b274:	f107 0318 	add.w	r3, r7, #24
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 fcab 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b282:	f000 bc88 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b28a:	f000 bc84 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b28e:	4b2b      	ldr	r3, [pc, #172]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b29a:	d108      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b29c:	f107 030c 	add.w	r3, r7, #12
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fdeb 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2aa:	f000 bc74 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2b2:	f000 bc70 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2b6:	4b21      	ldr	r3, [pc, #132]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2c0:	4b1e      	ldr	r3, [pc, #120]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0304 	and.w	r3, r3, #4
 800b2c8:	2b04      	cmp	r3, #4
 800b2ca:	d10c      	bne.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d109      	bne.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2d2:	4b1a      	ldr	r3, [pc, #104]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	08db      	lsrs	r3, r3, #3
 800b2d8:	f003 0303 	and.w	r3, r3, #3
 800b2dc:	4a18      	ldr	r2, [pc, #96]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b2de:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e4:	e01f      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2e6:	4b15      	ldr	r3, [pc, #84]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f2:	d106      	bne.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2fa:	d102      	bne.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2fc:	4b11      	ldr	r3, [pc, #68]	; (800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b300:	e011      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b302:	4b0e      	ldr	r3, [pc, #56]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b30a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b30e:	d106      	bne.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b316:	d102      	bne.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b318:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b31c:	e003      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b31e:	2300      	movs	r3, #0
 800b320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b322:	f000 bc38 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b326:	f000 bc36 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b32a:	4b08      	ldr	r3, [pc, #32]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32e:	f000 bc32 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b336:	f000 bc2e 	b.w	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b33a:	bf00      	nop
 800b33c:	58024400 	.word	0x58024400
 800b340:	03d09000 	.word	0x03d09000
 800b344:	003d0900 	.word	0x003d0900
 800b348:	017d7840 	.word	0x017d7840
 800b34c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b354:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b358:	430b      	orrs	r3, r1
 800b35a:	f040 809c 	bne.w	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b35e:	4b9e      	ldr	r3, [pc, #632]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b362:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b366:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b36e:	d054      	beq.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b376:	f200 808b 	bhi.w	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b380:	f000 8083 	beq.w	800b48a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b386:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b38a:	f200 8081 	bhi.w	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b394:	d02f      	beq.n	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b39c:	d878      	bhi.n	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d004      	beq.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3aa:	d012      	beq.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b3ac:	e070      	b.n	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3ae:	4b8a      	ldr	r3, [pc, #552]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ba:	d107      	bne.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 feaf 	bl	800c124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ca:	e3e4      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3d0:	e3e1      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3d2:	4b81      	ldr	r3, [pc, #516]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3de:	d107      	bne.n	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3e0:	f107 0318 	add.w	r3, r7, #24
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 fbf5 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ee:	e3d2      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3f4:	e3cf      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3f6:	4b78      	ldr	r3, [pc, #480]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b402:	d107      	bne.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b404:	f107 030c 	add.w	r3, r7, #12
 800b408:	4618      	mov	r0, r3
 800b40a:	f000 fd37 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b412:	e3c0      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b414:	2300      	movs	r3, #0
 800b416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b418:	e3bd      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b41a:	4b6f      	ldr	r3, [pc, #444]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b41c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b41e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b422:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b424:	4b6c      	ldr	r3, [pc, #432]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 0304 	and.w	r3, r3, #4
 800b42c:	2b04      	cmp	r3, #4
 800b42e:	d10c      	bne.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b432:	2b00      	cmp	r3, #0
 800b434:	d109      	bne.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b436:	4b68      	ldr	r3, [pc, #416]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	08db      	lsrs	r3, r3, #3
 800b43c:	f003 0303 	and.w	r3, r3, #3
 800b440:	4a66      	ldr	r2, [pc, #408]	; (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b442:	fa22 f303 	lsr.w	r3, r2, r3
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b448:	e01e      	b.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b44a:	4b63      	ldr	r3, [pc, #396]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b456:	d106      	bne.n	800b466 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b45e:	d102      	bne.n	800b466 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b460:	4b5f      	ldr	r3, [pc, #380]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b462:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b464:	e010      	b.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b466:	4b5c      	ldr	r3, [pc, #368]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b46e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b472:	d106      	bne.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b47a:	d102      	bne.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b47c:	4b59      	ldr	r3, [pc, #356]	; (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b47e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b480:	e002      	b.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b486:	e386      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b488:	e385      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b48a:	4b57      	ldr	r3, [pc, #348]	; (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b48c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b48e:	e382      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b494:	e37f      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b49a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b49e:	430b      	orrs	r3, r1
 800b4a0:	f040 80a7 	bne.w	800b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b4a4:	4b4c      	ldr	r3, [pc, #304]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b4ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4b4:	d055      	beq.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4bc:	f200 8096 	bhi.w	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b4c6:	f000 8084 	beq.w	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b4d0:	f200 808c 	bhi.w	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4da:	d030      	beq.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4e2:	f200 8083 	bhi.w	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d004      	beq.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b4f2:	d012      	beq.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b4f4:	e07a      	b.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4f6:	4b38      	ldr	r3, [pc, #224]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b502:	d107      	bne.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 fe0b 	bl	800c124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b512:	e340      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b518:	e33d      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b51a:	4b2f      	ldr	r3, [pc, #188]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b526:	d107      	bne.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b528:	f107 0318 	add.w	r3, r7, #24
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 fb51 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b536:	e32e      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b53c:	e32b      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b53e:	4b26      	ldr	r3, [pc, #152]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b54a:	d107      	bne.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b54c:	f107 030c 	add.w	r3, r7, #12
 800b550:	4618      	mov	r0, r3
 800b552:	f000 fc93 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b55a:	e31c      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b560:	e319      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b562:	4b1d      	ldr	r3, [pc, #116]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b56a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b56c:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 0304 	and.w	r3, r3, #4
 800b574:	2b04      	cmp	r3, #4
 800b576:	d10c      	bne.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d109      	bne.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b57e:	4b16      	ldr	r3, [pc, #88]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	08db      	lsrs	r3, r3, #3
 800b584:	f003 0303 	and.w	r3, r3, #3
 800b588:	4a14      	ldr	r2, [pc, #80]	; (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b58a:	fa22 f303 	lsr.w	r3, r2, r3
 800b58e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b590:	e01e      	b.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b592:	4b11      	ldr	r3, [pc, #68]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b59e:	d106      	bne.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5a6:	d102      	bne.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b5a8:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ac:	e010      	b.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5ae:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ba:	d106      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5c2:	d102      	bne.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b5c4:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5c8:	e002      	b.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b5ce:	e2e2      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5d0:	e2e1      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5d2:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5d6:	e2de      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5d8:	58024400 	.word	0x58024400
 800b5dc:	03d09000 	.word	0x03d09000
 800b5e0:	003d0900 	.word	0x003d0900
 800b5e4:	017d7840 	.word	0x017d7840
 800b5e8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5f0:	e2d1      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b5f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5f6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b5fa:	430b      	orrs	r3, r1
 800b5fc:	f040 809c 	bne.w	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b600:	4b93      	ldr	r3, [pc, #588]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b604:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b608:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b610:	d054      	beq.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b618:	f200 808b 	bhi.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b622:	f000 8083 	beq.w	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b62c:	f200 8081 	bhi.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b636:	d02f      	beq.n	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b63e:	d878      	bhi.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	2b00      	cmp	r3, #0
 800b644:	d004      	beq.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b64c:	d012      	beq.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b64e:	e070      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b650:	4b7f      	ldr	r3, [pc, #508]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b65c:	d107      	bne.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b65e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b662:	4618      	mov	r0, r3
 800b664:	f000 fd5e 	bl	800c124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b66c:	e293      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b672:	e290      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b674:	4b76      	ldr	r3, [pc, #472]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b67c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b680:	d107      	bne.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b682:	f107 0318 	add.w	r3, r7, #24
 800b686:	4618      	mov	r0, r3
 800b688:	f000 faa4 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b690:	e281      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b692:	2300      	movs	r3, #0
 800b694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b696:	e27e      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b698:	4b6d      	ldr	r3, [pc, #436]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6a4:	d107      	bne.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6a6:	f107 030c 	add.w	r3, r7, #12
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fbe6 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6b4:	e26f      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6ba:	e26c      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6bc:	4b64      	ldr	r3, [pc, #400]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6c6:	4b62      	ldr	r3, [pc, #392]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 0304 	and.w	r3, r3, #4
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	d10c      	bne.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d109      	bne.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6d8:	4b5d      	ldr	r3, [pc, #372]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	08db      	lsrs	r3, r3, #3
 800b6de:	f003 0303 	and.w	r3, r3, #3
 800b6e2:	4a5c      	ldr	r2, [pc, #368]	; (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b6e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6ea:	e01e      	b.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6ec:	4b58      	ldr	r3, [pc, #352]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6f8:	d106      	bne.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b700:	d102      	bne.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b702:	4b55      	ldr	r3, [pc, #340]	; (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b704:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b706:	e010      	b.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b708:	4b51      	ldr	r3, [pc, #324]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b714:	d106      	bne.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b71c:	d102      	bne.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b71e:	4b4f      	ldr	r3, [pc, #316]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b720:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b722:	e002      	b.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b728:	e235      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b72a:	e234      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b72c:	4b4c      	ldr	r3, [pc, #304]	; (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b730:	e231      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b736:	e22e      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b73c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b740:	430b      	orrs	r3, r1
 800b742:	f040 808f 	bne.w	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b746:	4b42      	ldr	r3, [pc, #264]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b74a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b74e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b752:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b756:	d06b      	beq.n	800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b75e:	d874      	bhi.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b766:	d056      	beq.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b76e:	d86c      	bhi.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b772:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b776:	d03b      	beq.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b77e:	d864      	bhi.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b786:	d021      	beq.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b78e:	d85c      	bhi.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b792:	2b00      	cmp	r3, #0
 800b794:	d004      	beq.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b79c:	d004      	beq.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b79e:	e054      	b.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b7a0:	f7fe fa0a 	bl	8009bb8 <HAL_RCC_GetPCLK1Freq>
 800b7a4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b7a6:	e1f6      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7a8:	4b29      	ldr	r3, [pc, #164]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7b4:	d107      	bne.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7b6:	f107 0318 	add.w	r3, r7, #24
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 fa0a 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7c4:	e1e7      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ca:	e1e4      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7cc:	4b20      	ldr	r3, [pc, #128]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7d8:	d107      	bne.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7da:	f107 030c 	add.w	r3, r7, #12
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f000 fb4c 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7e8:	e1d5      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ee:	e1d2      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7f0:	4b17      	ldr	r3, [pc, #92]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d109      	bne.n	800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7fc:	4b14      	ldr	r3, [pc, #80]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	08db      	lsrs	r3, r3, #3
 800b802:	f003 0303 	and.w	r3, r3, #3
 800b806:	4a13      	ldr	r2, [pc, #76]	; (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b808:	fa22 f303 	lsr.w	r3, r2, r3
 800b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b80e:	e1c2      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b810:	2300      	movs	r3, #0
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b814:	e1bf      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b816:	4b0e      	ldr	r3, [pc, #56]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b81e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b822:	d102      	bne.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b824:	4b0c      	ldr	r3, [pc, #48]	; (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b828:	e1b5      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b82a:	2300      	movs	r3, #0
 800b82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b82e:	e1b2      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b830:	4b07      	ldr	r3, [pc, #28]	; (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b83c:	d102      	bne.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b83e:	4b07      	ldr	r3, [pc, #28]	; (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b840:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b842:	e1a8      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b848:	e1a5      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b84e:	e1a2      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b850:	58024400 	.word	0x58024400
 800b854:	03d09000 	.word	0x03d09000
 800b858:	003d0900 	.word	0x003d0900
 800b85c:	017d7840 	.word	0x017d7840
 800b860:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b864:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b868:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b86c:	430b      	orrs	r3, r1
 800b86e:	d173      	bne.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b870:	4b9c      	ldr	r3, [pc, #624]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b878:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b880:	d02f      	beq.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b888:	d863      	bhi.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d004      	beq.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b896:	d012      	beq.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b898:	e05b      	b.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b89a:	4b92      	ldr	r3, [pc, #584]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8a6:	d107      	bne.n	800b8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8a8:	f107 0318 	add.w	r3, r7, #24
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 f991 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8b6:	e16e      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8bc:	e16b      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8be:	4b89      	ldr	r3, [pc, #548]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ca:	d107      	bne.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8cc:	f107 030c 	add.w	r3, r7, #12
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 fad3 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8da:	e15c      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8e0:	e159      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8e2:	4b80      	ldr	r3, [pc, #512]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8ec:	4b7d      	ldr	r3, [pc, #500]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 0304 	and.w	r3, r3, #4
 800b8f4:	2b04      	cmp	r3, #4
 800b8f6:	d10c      	bne.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d109      	bne.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8fe:	4b79      	ldr	r3, [pc, #484]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	08db      	lsrs	r3, r3, #3
 800b904:	f003 0303 	and.w	r3, r3, #3
 800b908:	4a77      	ldr	r2, [pc, #476]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b90a:	fa22 f303 	lsr.w	r3, r2, r3
 800b90e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b910:	e01e      	b.n	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b912:	4b74      	ldr	r3, [pc, #464]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b91a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b91e:	d106      	bne.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b926:	d102      	bne.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b928:	4b70      	ldr	r3, [pc, #448]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b92c:	e010      	b.n	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b92e:	4b6d      	ldr	r3, [pc, #436]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b93a:	d106      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b93e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b942:	d102      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b944:	4b6a      	ldr	r3, [pc, #424]	; (800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b946:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b948:	e002      	b.n	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b94a:	2300      	movs	r3, #0
 800b94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b94e:	e122      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b950:	e121      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b956:	e11e      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b95c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b960:	430b      	orrs	r3, r1
 800b962:	d133      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b964:	4b5f      	ldr	r3, [pc, #380]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b96c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b970:	2b00      	cmp	r3, #0
 800b972:	d004      	beq.n	800b97e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b97a:	d012      	beq.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b97c:	e023      	b.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b97e:	4b59      	ldr	r3, [pc, #356]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b98a:	d107      	bne.n	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b98c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b990:	4618      	mov	r0, r3
 800b992:	f000 fbc7 	bl	800c124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b99a:	e0fc      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9a0:	e0f9      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9a2:	4b50      	ldr	r3, [pc, #320]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9ae:	d107      	bne.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9b0:	f107 0318 	add.w	r3, r7, #24
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 f90d 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b9ba:	6a3b      	ldr	r3, [r7, #32]
 800b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9be:	e0ea      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9c4:	e0e7      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ca:	e0e4      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b9cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9d0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b9d4:	430b      	orrs	r3, r1
 800b9d6:	f040 808d 	bne.w	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b9da:	4b42      	ldr	r3, [pc, #264]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9de:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b9e2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9ea:	d06b      	beq.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9f2:	d874      	bhi.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9fa:	d056      	beq.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba02:	d86c      	bhi.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ba04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba0a:	d03b      	beq.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba12:	d864      	bhi.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba1a:	d021      	beq.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba22:	d85c      	bhi.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ba24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d004      	beq.n	800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ba2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba30:	d004      	beq.n	800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ba32:	e054      	b.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ba34:	f000 f8b8 	bl	800bba8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba38:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba3a:	e0ac      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba3c:	4b29      	ldr	r3, [pc, #164]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba48:	d107      	bne.n	800ba5a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba4a:	f107 0318 	add.w	r3, r7, #24
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 f8c0 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba58:	e09d      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba5e:	e09a      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba60:	4b20      	ldr	r3, [pc, #128]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba6c:	d107      	bne.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba6e:	f107 030c 	add.w	r3, r7, #12
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 fa02 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba7c:	e08b      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba82:	e088      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba84:	4b17      	ldr	r3, [pc, #92]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 0304 	and.w	r3, r3, #4
 800ba8c:	2b04      	cmp	r3, #4
 800ba8e:	d109      	bne.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba90:	4b14      	ldr	r3, [pc, #80]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	08db      	lsrs	r3, r3, #3
 800ba96:	f003 0303 	and.w	r3, r3, #3
 800ba9a:	4a13      	ldr	r2, [pc, #76]	; (800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ba9c:	fa22 f303 	lsr.w	r3, r2, r3
 800baa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baa2:	e078      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa8:	e075      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800baaa:	4b0e      	ldr	r3, [pc, #56]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bab6:	d102      	bne.n	800babe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bab8:	4b0c      	ldr	r3, [pc, #48]	; (800baec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800baba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800babc:	e06b      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bac2:	e068      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bac4:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bacc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bad0:	d102      	bne.n	800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bad2:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bad6:	e05e      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bad8:	2300      	movs	r3, #0
 800bada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800badc:	e05b      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bade:	2300      	movs	r3, #0
 800bae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bae2:	e058      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bae4:	58024400 	.word	0x58024400
 800bae8:	03d09000 	.word	0x03d09000
 800baec:	003d0900 	.word	0x003d0900
 800baf0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800baf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baf8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bafc:	430b      	orrs	r3, r1
 800bafe:	d148      	bne.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bb00:	4b27      	ldr	r3, [pc, #156]	; (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb08:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb10:	d02a      	beq.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb18:	d838      	bhi.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d004      	beq.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb26:	d00d      	beq.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bb28:	e030      	b.n	800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bb2a:	4b1d      	ldr	r3, [pc, #116]	; (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb36:	d102      	bne.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bb38:	4b1a      	ldr	r3, [pc, #104]	; (800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb3c:	e02b      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb42:	e028      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb44:	4b16      	ldr	r3, [pc, #88]	; (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb50:	d107      	bne.n	800bb62 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 fae4 	bl	800c124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb60:	e019      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb66:	e016      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb68:	4b0d      	ldr	r3, [pc, #52]	; (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb74:	d107      	bne.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb76:	f107 0318 	add.w	r3, r7, #24
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 f82a 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb84:	e007      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb8a:	e004      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb90:	e001      	b.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bb92:	2300      	movs	r3, #0
 800bb94:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3740      	adds	r7, #64	; 0x40
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	58024400 	.word	0x58024400
 800bba4:	017d7840 	.word	0x017d7840

0800bba8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bbac:	f7fd ffd4 	bl	8009b58 <HAL_RCC_GetHCLKFreq>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	091b      	lsrs	r3, r3, #4
 800bbb8:	f003 0307 	and.w	r3, r3, #7
 800bbbc:	4904      	ldr	r1, [pc, #16]	; (800bbd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bbbe:	5ccb      	ldrb	r3, [r1, r3]
 800bbc0:	f003 031f 	and.w	r3, r3, #31
 800bbc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	58024400 	.word	0x58024400
 800bbd0:	080160e4 	.word	0x080160e4

0800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b089      	sub	sp, #36	; 0x24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbdc:	4ba1      	ldr	r3, [pc, #644]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bbe6:	4b9f      	ldr	r3, [pc, #636]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbea:	0b1b      	lsrs	r3, r3, #12
 800bbec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbf0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bbf2:	4b9c      	ldr	r3, [pc, #624]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	091b      	lsrs	r3, r3, #4
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bbfe:	4b99      	ldr	r3, [pc, #612]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc02:	08db      	lsrs	r3, r3, #3
 800bc04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	fb02 f303 	mul.w	r3, r2, r3
 800bc0e:	ee07 3a90 	vmov	s15, r3
 800bc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f000 8111 	beq.w	800be44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	f000 8083 	beq.w	800bd30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	f200 80a1 	bhi.w	800bd74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d003      	beq.n	800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d056      	beq.n	800bcec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bc3e:	e099      	b.n	800bd74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc40:	4b88      	ldr	r3, [pc, #544]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 0320 	and.w	r3, r3, #32
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d02d      	beq.n	800bca8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc4c:	4b85      	ldr	r3, [pc, #532]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	08db      	lsrs	r3, r3, #3
 800bc52:	f003 0303 	and.w	r3, r3, #3
 800bc56:	4a84      	ldr	r2, [pc, #528]	; (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc58:	fa22 f303 	lsr.w	r3, r2, r3
 800bc5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	ee07 3a90 	vmov	s15, r3
 800bc64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	ee07 3a90 	vmov	s15, r3
 800bc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc76:	4b7b      	ldr	r3, [pc, #492]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc7e:	ee07 3a90 	vmov	s15, r3
 800bc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc86:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bca2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bca6:	e087      	b.n	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bcb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcba:	4b6a      	ldr	r3, [pc, #424]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc2:	ee07 3a90 	vmov	s15, r3
 800bcc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcea:	e065      	b.n	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcfe:	4b59      	ldr	r3, [pc, #356]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd06:	ee07 3a90 	vmov	s15, r3
 800bd0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd2e:	e043      	b.n	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	ee07 3a90 	vmov	s15, r3
 800bd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bd3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd42:	4b48      	ldr	r3, [pc, #288]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd4a:	ee07 3a90 	vmov	s15, r3
 800bd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd52:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd72:	e021      	b.n	800bdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	ee07 3a90 	vmov	s15, r3
 800bd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd86:	4b37      	ldr	r3, [pc, #220]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd8e:	ee07 3a90 	vmov	s15, r3
 800bd92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd96:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bda2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bda6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bdb8:	4b2a      	ldr	r3, [pc, #168]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdbc:	0a5b      	lsrs	r3, r3, #9
 800bdbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdc2:	ee07 3a90 	vmov	s15, r3
 800bdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdde:	ee17 2a90 	vmov	r2, s15
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bde6:	4b1f      	ldr	r3, [pc, #124]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdea:	0c1b      	lsrs	r3, r3, #16
 800bdec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdf0:	ee07 3a90 	vmov	s15, r3
 800bdf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be00:	edd7 6a07 	vldr	s13, [r7, #28]
 800be04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be0c:	ee17 2a90 	vmov	r2, s15
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800be14:	4b13      	ldr	r3, [pc, #76]	; (800be64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be18:	0e1b      	lsrs	r3, r3, #24
 800be1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be1e:	ee07 3a90 	vmov	s15, r3
 800be22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be3a:	ee17 2a90 	vmov	r2, s15
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800be42:	e008      	b.n	800be56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	609a      	str	r2, [r3, #8]
}
 800be56:	bf00      	nop
 800be58:	3724      	adds	r7, #36	; 0x24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	58024400 	.word	0x58024400
 800be68:	03d09000 	.word	0x03d09000
 800be6c:	46000000 	.word	0x46000000
 800be70:	4c742400 	.word	0x4c742400
 800be74:	4a742400 	.word	0x4a742400
 800be78:	4bbebc20 	.word	0x4bbebc20

0800be7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b089      	sub	sp, #36	; 0x24
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be84:	4ba1      	ldr	r3, [pc, #644]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be88:	f003 0303 	and.w	r3, r3, #3
 800be8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800be8e:	4b9f      	ldr	r3, [pc, #636]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be92:	0d1b      	lsrs	r3, r3, #20
 800be94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be9a:	4b9c      	ldr	r3, [pc, #624]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9e:	0a1b      	lsrs	r3, r3, #8
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bea6:	4b99      	ldr	r3, [pc, #612]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beaa:	08db      	lsrs	r3, r3, #3
 800beac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	fb02 f303 	mul.w	r3, r2, r3
 800beb6:	ee07 3a90 	vmov	s15, r3
 800beba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bebe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 8111 	beq.w	800c0ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	2b02      	cmp	r3, #2
 800bece:	f000 8083 	beq.w	800bfd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	f200 80a1 	bhi.w	800c01c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d056      	beq.n	800bf94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bee6:	e099      	b.n	800c01c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bee8:	4b88      	ldr	r3, [pc, #544]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 0320 	and.w	r3, r3, #32
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d02d      	beq.n	800bf50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bef4:	4b85      	ldr	r3, [pc, #532]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	08db      	lsrs	r3, r3, #3
 800befa:	f003 0303 	and.w	r3, r3, #3
 800befe:	4a84      	ldr	r2, [pc, #528]	; (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bf00:	fa22 f303 	lsr.w	r3, r2, r3
 800bf04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	ee07 3a90 	vmov	s15, r3
 800bf0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	ee07 3a90 	vmov	s15, r3
 800bf16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf1e:	4b7b      	ldr	r3, [pc, #492]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf26:	ee07 3a90 	vmov	s15, r3
 800bf2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf32:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf4e:	e087      	b.n	800c060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	ee07 3a90 	vmov	s15, r3
 800bf56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf62:	4b6a      	ldr	r3, [pc, #424]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf6a:	ee07 3a90 	vmov	s15, r3
 800bf6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf72:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf76:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf92:	e065      	b.n	800c060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c11c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa6:	4b59      	ldr	r3, [pc, #356]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfae:	ee07 3a90 	vmov	s15, r3
 800bfb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfd6:	e043      	b.n	800c060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bfe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfea:	4b48      	ldr	r3, [pc, #288]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff2:	ee07 3a90 	vmov	s15, r3
 800bff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bffa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bffe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c01a:	e021      	b.n	800c060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c026:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c11c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c02e:	4b37      	ldr	r3, [pc, #220]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c036:	ee07 3a90 	vmov	s15, r3
 800c03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c03e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c042:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c04e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c05e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c060:	4b2a      	ldr	r3, [pc, #168]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c064:	0a5b      	lsrs	r3, r3, #9
 800c066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c06a:	ee07 3a90 	vmov	s15, r3
 800c06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c07a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c07e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c086:	ee17 2a90 	vmov	r2, s15
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c08e:	4b1f      	ldr	r3, [pc, #124]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c092:	0c1b      	lsrs	r3, r3, #16
 800c094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c098:	ee07 3a90 	vmov	s15, r3
 800c09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0b4:	ee17 2a90 	vmov	r2, s15
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c0bc:	4b13      	ldr	r3, [pc, #76]	; (800c10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c0:	0e1b      	lsrs	r3, r3, #24
 800c0c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0c6:	ee07 3a90 	vmov	s15, r3
 800c0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0e2:	ee17 2a90 	vmov	r2, s15
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c0ea:	e008      	b.n	800c0fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	609a      	str	r2, [r3, #8]
}
 800c0fe:	bf00      	nop
 800c100:	3724      	adds	r7, #36	; 0x24
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	58024400 	.word	0x58024400
 800c110:	03d09000 	.word	0x03d09000
 800c114:	46000000 	.word	0x46000000
 800c118:	4c742400 	.word	0x4c742400
 800c11c:	4a742400 	.word	0x4a742400
 800c120:	4bbebc20 	.word	0x4bbebc20

0800c124 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c124:	b480      	push	{r7}
 800c126:	b089      	sub	sp, #36	; 0x24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c12c:	4ba0      	ldr	r3, [pc, #640]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c130:	f003 0303 	and.w	r3, r3, #3
 800c134:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c136:	4b9e      	ldr	r3, [pc, #632]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c13a:	091b      	lsrs	r3, r3, #4
 800c13c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c140:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c142:	4b9b      	ldr	r3, [pc, #620]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c146:	f003 0301 	and.w	r3, r3, #1
 800c14a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c14c:	4b98      	ldr	r3, [pc, #608]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c150:	08db      	lsrs	r3, r3, #3
 800c152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	fb02 f303 	mul.w	r3, r2, r3
 800c15c:	ee07 3a90 	vmov	s15, r3
 800c160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c164:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f000 8111 	beq.w	800c392 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	2b02      	cmp	r3, #2
 800c174:	f000 8083 	beq.w	800c27e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	f200 80a1 	bhi.w	800c2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d056      	beq.n	800c23a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c18c:	e099      	b.n	800c2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c18e:	4b88      	ldr	r3, [pc, #544]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f003 0320 	and.w	r3, r3, #32
 800c196:	2b00      	cmp	r3, #0
 800c198:	d02d      	beq.n	800c1f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c19a:	4b85      	ldr	r3, [pc, #532]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	08db      	lsrs	r3, r3, #3
 800c1a0:	f003 0303 	and.w	r3, r3, #3
 800c1a4:	4a83      	ldr	r2, [pc, #524]	; (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1aa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	ee07 3a90 	vmov	s15, r3
 800c1bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1c4:	4b7a      	ldr	r3, [pc, #488]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1cc:	ee07 3a90 	vmov	s15, r3
 800c1d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c1f4:	e087      	b.n	800c306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	ee07 3a90 	vmov	s15, r3
 800c1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c200:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c3bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c208:	4b69      	ldr	r3, [pc, #420]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c20c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c210:	ee07 3a90 	vmov	s15, r3
 800c214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c218:	ed97 6a03 	vldr	s12, [r7, #12]
 800c21c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c22c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c230:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c234:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c238:	e065      	b.n	800c306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	ee07 3a90 	vmov	s15, r3
 800c240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c244:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c24c:	4b58      	ldr	r3, [pc, #352]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c254:	ee07 3a90 	vmov	s15, r3
 800c258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c25c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c260:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c26c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c274:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c278:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c27c:	e043      	b.n	800c306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	ee07 3a90 	vmov	s15, r3
 800c284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c288:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c3c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c28c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c290:	4b47      	ldr	r3, [pc, #284]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c298:	ee07 3a90 	vmov	s15, r3
 800c29c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2c0:	e021      	b.n	800c306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	ee07 3a90 	vmov	s15, r3
 800c2c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c3bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c2d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2d4:	4b36      	ldr	r3, [pc, #216]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2dc:	ee07 3a90 	vmov	s15, r3
 800c2e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c300:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c304:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c306:	4b2a      	ldr	r3, [pc, #168]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c30a:	0a5b      	lsrs	r3, r3, #9
 800c30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c310:	ee07 3a90 	vmov	s15, r3
 800c314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c31c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c320:	edd7 6a07 	vldr	s13, [r7, #28]
 800c324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c32c:	ee17 2a90 	vmov	r2, s15
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c334:	4b1e      	ldr	r3, [pc, #120]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c338:	0c1b      	lsrs	r3, r3, #16
 800c33a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c33e:	ee07 3a90 	vmov	s15, r3
 800c342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c34a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c34e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c35a:	ee17 2a90 	vmov	r2, s15
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c362:	4b13      	ldr	r3, [pc, #76]	; (800c3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c366:	0e1b      	lsrs	r3, r3, #24
 800c368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c36c:	ee07 3a90 	vmov	s15, r3
 800c370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c37c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c388:	ee17 2a90 	vmov	r2, s15
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c390:	e008      	b.n	800c3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	609a      	str	r2, [r3, #8]
}
 800c3a4:	bf00      	nop
 800c3a6:	3724      	adds	r7, #36	; 0x24
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	58024400 	.word	0x58024400
 800c3b4:	03d09000 	.word	0x03d09000
 800c3b8:	46000000 	.word	0x46000000
 800c3bc:	4c742400 	.word	0x4c742400
 800c3c0:	4a742400 	.word	0x4a742400
 800c3c4:	4bbebc20 	.word	0x4bbebc20

0800c3c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3d6:	4b53      	ldr	r3, [pc, #332]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3da:	f003 0303 	and.w	r3, r3, #3
 800c3de:	2b03      	cmp	r3, #3
 800c3e0:	d101      	bne.n	800c3e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e099      	b.n	800c51a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c3e6:	4b4f      	ldr	r3, [pc, #316]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a4e      	ldr	r2, [pc, #312]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c3ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3f2:	f7f7 f963 	bl	80036bc <HAL_GetTick>
 800c3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3f8:	e008      	b.n	800c40c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3fa:	f7f7 f95f 	bl	80036bc <HAL_GetTick>
 800c3fe:	4602      	mov	r2, r0
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	2b02      	cmp	r3, #2
 800c406:	d901      	bls.n	800c40c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c408:	2303      	movs	r3, #3
 800c40a:	e086      	b.n	800c51a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c40c:	4b45      	ldr	r3, [pc, #276]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1f0      	bne.n	800c3fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c418:	4b42      	ldr	r3, [pc, #264]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c41c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	031b      	lsls	r3, r3, #12
 800c426:	493f      	ldr	r1, [pc, #252]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c428:	4313      	orrs	r3, r2
 800c42a:	628b      	str	r3, [r1, #40]	; 0x28
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	3b01      	subs	r3, #1
 800c432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	3b01      	subs	r3, #1
 800c43c:	025b      	lsls	r3, r3, #9
 800c43e:	b29b      	uxth	r3, r3
 800c440:	431a      	orrs	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	3b01      	subs	r3, #1
 800c448:	041b      	lsls	r3, r3, #16
 800c44a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c44e:	431a      	orrs	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	3b01      	subs	r3, #1
 800c456:	061b      	lsls	r3, r3, #24
 800c458:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c45c:	4931      	ldr	r1, [pc, #196]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c45e:	4313      	orrs	r3, r2
 800c460:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c462:	4b30      	ldr	r3, [pc, #192]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c466:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	492d      	ldr	r1, [pc, #180]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c470:	4313      	orrs	r3, r2
 800c472:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c474:	4b2b      	ldr	r3, [pc, #172]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c478:	f023 0220 	bic.w	r2, r3, #32
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	699b      	ldr	r3, [r3, #24]
 800c480:	4928      	ldr	r1, [pc, #160]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c482:	4313      	orrs	r3, r2
 800c484:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c486:	4b27      	ldr	r3, [pc, #156]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48a:	4a26      	ldr	r2, [pc, #152]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c48c:	f023 0310 	bic.w	r3, r3, #16
 800c490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c492:	4b24      	ldr	r3, [pc, #144]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c496:	4b24      	ldr	r3, [pc, #144]	; (800c528 <RCCEx_PLL2_Config+0x160>)
 800c498:	4013      	ands	r3, r2
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	69d2      	ldr	r2, [r2, #28]
 800c49e:	00d2      	lsls	r2, r2, #3
 800c4a0:	4920      	ldr	r1, [pc, #128]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c4a6:	4b1f      	ldr	r3, [pc, #124]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4aa:	4a1e      	ldr	r2, [pc, #120]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4ac:	f043 0310 	orr.w	r3, r3, #16
 800c4b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d106      	bne.n	800c4c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c4b8:	4b1a      	ldr	r3, [pc, #104]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4bc:	4a19      	ldr	r2, [pc, #100]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c4c4:	e00f      	b.n	800c4e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d106      	bne.n	800c4da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c4cc:	4b15      	ldr	r3, [pc, #84]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d0:	4a14      	ldr	r2, [pc, #80]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c4d8:	e005      	b.n	800c4e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c4da:	4b12      	ldr	r3, [pc, #72]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4de:	4a11      	ldr	r2, [pc, #68]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c4e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c4e6:	4b0f      	ldr	r3, [pc, #60]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a0e      	ldr	r2, [pc, #56]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c4ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c4f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4f2:	f7f7 f8e3 	bl	80036bc <HAL_GetTick>
 800c4f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4f8:	e008      	b.n	800c50c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c4fa:	f7f7 f8df 	bl	80036bc <HAL_GetTick>
 800c4fe:	4602      	mov	r2, r0
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	2b02      	cmp	r3, #2
 800c506:	d901      	bls.n	800c50c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c508:	2303      	movs	r3, #3
 800c50a:	e006      	b.n	800c51a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c50c:	4b05      	ldr	r3, [pc, #20]	; (800c524 <RCCEx_PLL2_Config+0x15c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d0f0      	beq.n	800c4fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c518:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	58024400 	.word	0x58024400
 800c528:	ffff0007 	.word	0xffff0007

0800c52c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c53a:	4b53      	ldr	r3, [pc, #332]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c53e:	f003 0303 	and.w	r3, r3, #3
 800c542:	2b03      	cmp	r3, #3
 800c544:	d101      	bne.n	800c54a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	e099      	b.n	800c67e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c54a:	4b4f      	ldr	r3, [pc, #316]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a4e      	ldr	r2, [pc, #312]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c556:	f7f7 f8b1 	bl	80036bc <HAL_GetTick>
 800c55a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c55c:	e008      	b.n	800c570 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c55e:	f7f7 f8ad 	bl	80036bc <HAL_GetTick>
 800c562:	4602      	mov	r2, r0
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d901      	bls.n	800c570 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e086      	b.n	800c67e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c570:	4b45      	ldr	r3, [pc, #276]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1f0      	bne.n	800c55e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c57c:	4b42      	ldr	r3, [pc, #264]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c580:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	051b      	lsls	r3, r3, #20
 800c58a:	493f      	ldr	r1, [pc, #252]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c58c:	4313      	orrs	r3, r2
 800c58e:	628b      	str	r3, [r1, #40]	; 0x28
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	3b01      	subs	r3, #1
 800c596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	025b      	lsls	r3, r3, #9
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	431a      	orrs	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	041b      	lsls	r3, r3, #16
 800c5ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c5b2:	431a      	orrs	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	691b      	ldr	r3, [r3, #16]
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	061b      	lsls	r3, r3, #24
 800c5bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c5c0:	4931      	ldr	r1, [pc, #196]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c5c6:	4b30      	ldr	r3, [pc, #192]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	492d      	ldr	r1, [pc, #180]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c5d8:	4b2b      	ldr	r3, [pc, #172]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	4928      	ldr	r1, [pc, #160]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c5ea:	4b27      	ldr	r3, [pc, #156]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ee:	4a26      	ldr	r2, [pc, #152]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c5f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c5f6:	4b24      	ldr	r3, [pc, #144]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c5f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5fa:	4b24      	ldr	r3, [pc, #144]	; (800c68c <RCCEx_PLL3_Config+0x160>)
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	69d2      	ldr	r2, [r2, #28]
 800c602:	00d2      	lsls	r2, r2, #3
 800c604:	4920      	ldr	r1, [pc, #128]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c606:	4313      	orrs	r3, r2
 800c608:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c60a:	4b1f      	ldr	r3, [pc, #124]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60e:	4a1e      	ldr	r2, [pc, #120]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d106      	bne.n	800c62a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c61c:	4b1a      	ldr	r3, [pc, #104]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c620:	4a19      	ldr	r2, [pc, #100]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c622:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c626:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c628:	e00f      	b.n	800c64a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d106      	bne.n	800c63e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c630:	4b15      	ldr	r3, [pc, #84]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c634:	4a14      	ldr	r2, [pc, #80]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c636:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c63a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c63c:	e005      	b.n	800c64a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c63e:	4b12      	ldr	r3, [pc, #72]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c642:	4a11      	ldr	r2, [pc, #68]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c648:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c64a:	4b0f      	ldr	r3, [pc, #60]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a0e      	ldr	r2, [pc, #56]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c656:	f7f7 f831 	bl	80036bc <HAL_GetTick>
 800c65a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c65c:	e008      	b.n	800c670 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c65e:	f7f7 f82d 	bl	80036bc <HAL_GetTick>
 800c662:	4602      	mov	r2, r0
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d901      	bls.n	800c670 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c66c:	2303      	movs	r3, #3
 800c66e:	e006      	b.n	800c67e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c670:	4b05      	ldr	r3, [pc, #20]	; (800c688 <RCCEx_PLL3_Config+0x15c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d0f0      	beq.n	800c65e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	58024400 	.word	0x58024400
 800c68c:	ffff0007 	.word	0xffff0007

0800c690 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c698:	2301      	movs	r3, #1
 800c69a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d071      	beq.n	800c786 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d106      	bne.n	800c6bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f7f6 fafe 	bl	8002cb8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	f003 0310 	and.w	r3, r3, #16
 800c6ce:	2b10      	cmp	r3, #16
 800c6d0:	d050      	beq.n	800c774 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	22ca      	movs	r2, #202	; 0xca
 800c6d8:	625a      	str	r2, [r3, #36]	; 0x24
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2253      	movs	r2, #83	; 0x53
 800c6e0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fa4a 	bl	800cb7c <RTC_EnterInitMode>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c6ec:	7bfb      	ldrb	r3, [r7, #15]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d124      	bne.n	800c73c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	6899      	ldr	r1, [r3, #8]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	4b24      	ldr	r3, [pc, #144]	; (800c790 <HAL_RTC_Init+0x100>)
 800c6fe:	400b      	ands	r3, r1
 800c700:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6899      	ldr	r1, [r3, #8]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	431a      	orrs	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	699b      	ldr	r3, [r3, #24]
 800c716:	431a      	orrs	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	430a      	orrs	r2, r1
 800c71e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	0419      	lsls	r1, r3, #16
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68da      	ldr	r2, [r3, #12]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	430a      	orrs	r2, r1
 800c730:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 fa56 	bl	800cbe4 <RTC_ExitInitMode>
 800c738:	4603      	mov	r3, r0
 800c73a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d113      	bne.n	800c76a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f022 0203 	bic.w	r2, r2, #3
 800c750:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	69da      	ldr	r2, [r3, #28]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	431a      	orrs	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	430a      	orrs	r2, r1
 800c768:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	22ff      	movs	r2, #255	; 0xff
 800c770:	625a      	str	r2, [r3, #36]	; 0x24
 800c772:	e001      	b.n	800c778 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c774:	2300      	movs	r3, #0
 800c776:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c778:	7bfb      	ldrb	r3, [r7, #15]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d103      	bne.n	800c786 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c786:	7bfb      	ldrb	r3, [r7, #15]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	ff8fffbf 	.word	0xff8fffbf

0800c794 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c794:	b590      	push	{r4, r7, lr}
 800c796:	b087      	sub	sp, #28
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d101      	bne.n	800c7ae <HAL_RTC_SetTime+0x1a>
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	e089      	b.n	800c8c2 <HAL_RTC_SetTime+0x12e>
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2202      	movs	r2, #2
 800c7ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	22ca      	movs	r2, #202	; 0xca
 800c7c4:	625a      	str	r2, [r3, #36]	; 0x24
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2253      	movs	r2, #83	; 0x53
 800c7cc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f000 f9d4 	bl	800cb7c <RTC_EnterInitMode>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c7d8:	7cfb      	ldrb	r3, [r7, #19]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d161      	bne.n	800c8a2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d126      	bne.n	800c832 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d102      	bne.n	800c7f8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 fa2f 	bl	800cc60 <RTC_ByteToBcd2>
 800c802:	4603      	mov	r3, r0
 800c804:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	785b      	ldrb	r3, [r3, #1]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 fa28 	bl	800cc60 <RTC_ByteToBcd2>
 800c810:	4603      	mov	r3, r0
 800c812:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c814:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	789b      	ldrb	r3, [r3, #2]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f000 fa20 	bl	800cc60 <RTC_ByteToBcd2>
 800c820:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c822:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	78db      	ldrb	r3, [r3, #3]
 800c82a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c82c:	4313      	orrs	r3, r2
 800c82e:	617b      	str	r3, [r7, #20]
 800c830:	e018      	b.n	800c864 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d102      	bne.n	800c846 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	2200      	movs	r2, #0
 800c844:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	785b      	ldrb	r3, [r3, #1]
 800c850:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c852:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c858:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	78db      	ldrb	r3, [r3, #3]
 800c85e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c860:	4313      	orrs	r3, r2
 800c862:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	6979      	ldr	r1, [r7, #20]
 800c86a:	4b18      	ldr	r3, [pc, #96]	; (800c8cc <HAL_RTC_SetTime+0x138>)
 800c86c:	400b      	ands	r3, r1
 800c86e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	689a      	ldr	r2, [r3, #8]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c87e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	6899      	ldr	r1, [r3, #8]
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	68da      	ldr	r2, [r3, #12]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	431a      	orrs	r2, r3
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	430a      	orrs	r2, r1
 800c896:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f000 f9a3 	bl	800cbe4 <RTC_ExitInitMode>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	22ff      	movs	r2, #255	; 0xff
 800c8a8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c8aa:	7cfb      	ldrb	r3, [r7, #19]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d103      	bne.n	800c8b8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c8c0:	7cfb      	ldrb	r3, [r7, #19]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	371c      	adds	r7, #28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd90      	pop	{r4, r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	007f7f7f 	.word	0x007f7f7f

0800c8d0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	4b22      	ldr	r3, [pc, #136]	; (800c984 <HAL_RTC_GetTime+0xb4>)
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	0c1b      	lsrs	r3, r3, #16
 800c904:	b2db      	uxtb	r3, r3
 800c906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	0a1b      	lsrs	r3, r3, #8
 800c914:	b2db      	uxtb	r3, r3
 800c916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c91a:	b2da      	uxtb	r2, r3
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	b2db      	uxtb	r3, r3
 800c924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	0d9b      	lsrs	r3, r3, #22
 800c932:	b2db      	uxtb	r3, r3
 800c934:	f003 0301 	and.w	r3, r3, #1
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d11a      	bne.n	800c97a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	4618      	mov	r0, r3
 800c94a:	f000 f9a9 	bl	800cca0 <RTC_Bcd2ToByte>
 800c94e:	4603      	mov	r3, r0
 800c950:	461a      	mov	r2, r3
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	785b      	ldrb	r3, [r3, #1]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f000 f9a0 	bl	800cca0 <RTC_Bcd2ToByte>
 800c960:	4603      	mov	r3, r0
 800c962:	461a      	mov	r2, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	789b      	ldrb	r3, [r3, #2]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 f997 	bl	800cca0 <RTC_Bcd2ToByte>
 800c972:	4603      	mov	r3, r0
 800c974:	461a      	mov	r2, r3
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	007f7f7f 	.word	0x007f7f7f

0800c988 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c988:	b590      	push	{r4, r7, lr}
 800c98a:	b087      	sub	sp, #28
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d101      	bne.n	800c9a2 <HAL_RTC_SetDate+0x1a>
 800c99e:	2302      	movs	r3, #2
 800c9a0:	e073      	b.n	800ca8a <HAL_RTC_SetDate+0x102>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2202      	movs	r2, #2
 800c9ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10e      	bne.n	800c9d6 <HAL_RTC_SetDate+0x4e>
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	785b      	ldrb	r3, [r3, #1]
 800c9bc:	f003 0310 	and.w	r3, r3, #16
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d008      	beq.n	800c9d6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	785b      	ldrb	r3, [r3, #1]
 800c9c8:	f023 0310 	bic.w	r3, r3, #16
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	330a      	adds	r3, #10
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d11c      	bne.n	800ca16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	78db      	ldrb	r3, [r3, #3]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 f93d 	bl	800cc60 <RTC_ByteToBcd2>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	785b      	ldrb	r3, [r3, #1]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 f936 	bl	800cc60 <RTC_ByteToBcd2>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c9f8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	789b      	ldrb	r3, [r3, #2]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f000 f92e 	bl	800cc60 <RTC_ByteToBcd2>
 800ca04:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ca06:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ca10:	4313      	orrs	r3, r2
 800ca12:	617b      	str	r3, [r7, #20]
 800ca14:	e00e      	b.n	800ca34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	78db      	ldrb	r3, [r3, #3]
 800ca1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	785b      	ldrb	r3, [r3, #1]
 800ca20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ca22:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ca28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ca30:	4313      	orrs	r3, r2
 800ca32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	22ca      	movs	r2, #202	; 0xca
 800ca3a:	625a      	str	r2, [r3, #36]	; 0x24
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2253      	movs	r2, #83	; 0x53
 800ca42:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f000 f899 	bl	800cb7c <RTC_EnterInitMode>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ca4e:	7cfb      	ldrb	r3, [r7, #19]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10a      	bne.n	800ca6a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	6979      	ldr	r1, [r7, #20]
 800ca5a:	4b0e      	ldr	r3, [pc, #56]	; (800ca94 <HAL_RTC_SetDate+0x10c>)
 800ca5c:	400b      	ands	r3, r1
 800ca5e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f000 f8bf 	bl	800cbe4 <RTC_ExitInitMode>
 800ca66:	4603      	mov	r3, r0
 800ca68:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	22ff      	movs	r2, #255	; 0xff
 800ca70:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ca72:	7cfb      	ldrb	r3, [r7, #19]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d103      	bne.n	800ca80 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ca88:	7cfb      	ldrb	r3, [r7, #19]


}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	371c      	adds	r7, #28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd90      	pop	{r4, r7, pc}
 800ca92:	bf00      	nop
 800ca94:	00ffff3f 	.word	0x00ffff3f

0800ca98 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	4b21      	ldr	r3, [pc, #132]	; (800cb30 <HAL_RTC_GetDate+0x98>)
 800caac:	4013      	ands	r3, r2
 800caae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	0c1b      	lsrs	r3, r3, #16
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	0a1b      	lsrs	r3, r3, #8
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	f003 031f 	and.w	r3, r3, #31
 800cac4:	b2da      	uxtb	r2, r3
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	0b5b      	lsrs	r3, r3, #13
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	f003 0307 	and.w	r3, r3, #7
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d11a      	bne.n	800cb24 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	78db      	ldrb	r3, [r3, #3]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 f8d4 	bl	800cca0 <RTC_Bcd2ToByte>
 800caf8:	4603      	mov	r3, r0
 800cafa:	461a      	mov	r2, r3
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	785b      	ldrb	r3, [r3, #1]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f000 f8cb 	bl	800cca0 <RTC_Bcd2ToByte>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	789b      	ldrb	r3, [r3, #2]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 f8c2 	bl	800cca0 <RTC_Bcd2ToByte>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	461a      	mov	r2, r3
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3718      	adds	r7, #24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	00ffff3f 	.word	0x00ffff3f

0800cb34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a0d      	ldr	r2, [pc, #52]	; (800cb78 <HAL_RTC_WaitForSynchro+0x44>)
 800cb42:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800cb44:	f7f6 fdba 	bl	80036bc <HAL_GetTick>
 800cb48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb4a:	e009      	b.n	800cb60 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb4c:	f7f6 fdb6 	bl	80036bc <HAL_GetTick>
 800cb50:	4602      	mov	r2, r0
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb5a:	d901      	bls.n	800cb60 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	e007      	b.n	800cb70 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	f003 0320 	and.w	r3, r3, #32
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0ee      	beq.n	800cb4c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	0003ff5f 	.word	0x0003ff5f

0800cb7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d120      	bne.n	800cbd8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb9e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cba0:	f7f6 fd8c 	bl	80036bc <HAL_GetTick>
 800cba4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cba6:	e00d      	b.n	800cbc4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cba8:	f7f6 fd88 	bl	80036bc <HAL_GetTick>
 800cbac:	4602      	mov	r2, r0
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbb6:	d905      	bls.n	800cbc4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2203      	movs	r2, #3
 800cbc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d102      	bne.n	800cbd8 <RTC_EnterInitMode+0x5c>
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
 800cbd4:	2b03      	cmp	r3, #3
 800cbd6:	d1e7      	bne.n	800cba8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
	...

0800cbe4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800cbf0:	4b1a      	ldr	r3, [pc, #104]	; (800cc5c <RTC_ExitInitMode+0x78>)
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	4a19      	ldr	r2, [pc, #100]	; (800cc5c <RTC_ExitInitMode+0x78>)
 800cbf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbfa:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cbfc:	4b17      	ldr	r3, [pc, #92]	; (800cc5c <RTC_ExitInitMode+0x78>)
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	f003 0320 	and.w	r3, r3, #32
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10c      	bne.n	800cc22 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff ff93 	bl	800cb34 <HAL_RTC_WaitForSynchro>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d01e      	beq.n	800cc52 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2203      	movs	r2, #3
 800cc18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	73fb      	strb	r3, [r7, #15]
 800cc20:	e017      	b.n	800cc52 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc22:	4b0e      	ldr	r3, [pc, #56]	; (800cc5c <RTC_ExitInitMode+0x78>)
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	4a0d      	ldr	r2, [pc, #52]	; (800cc5c <RTC_ExitInitMode+0x78>)
 800cc28:	f023 0320 	bic.w	r3, r3, #32
 800cc2c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7ff ff80 	bl	800cb34 <HAL_RTC_WaitForSynchro>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d005      	beq.n	800cc46 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2203      	movs	r2, #3
 800cc3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800cc42:	2303      	movs	r3, #3
 800cc44:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cc46:	4b05      	ldr	r3, [pc, #20]	; (800cc5c <RTC_ExitInitMode+0x78>)
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	4a04      	ldr	r2, [pc, #16]	; (800cc5c <RTC_ExitInitMode+0x78>)
 800cc4c:	f043 0320 	orr.w	r3, r3, #32
 800cc50:	6093      	str	r3, [r2, #8]
  }

  return status;
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	58004000 	.word	0x58004000

0800cc60 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	4603      	mov	r3, r0
 800cc68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800cc6e:	79fb      	ldrb	r3, [r7, #7]
 800cc70:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800cc72:	e005      	b.n	800cc80 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	3301      	adds	r3, #1
 800cc78:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800cc7a:	7afb      	ldrb	r3, [r7, #11]
 800cc7c:	3b0a      	subs	r3, #10
 800cc7e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800cc80:	7afb      	ldrb	r3, [r7, #11]
 800cc82:	2b09      	cmp	r3, #9
 800cc84:	d8f6      	bhi.n	800cc74 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	011b      	lsls	r3, r3, #4
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	7afb      	ldrb	r3, [r7, #11]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	b2db      	uxtb	r3, r3
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ccaa:	79fb      	ldrb	r3, [r7, #7]
 800ccac:	091b      	lsrs	r3, r3, #4
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	0092      	lsls	r2, r2, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ccba:	79fb      	ldrb	r3, [r7, #7]
 800ccbc:	f003 030f 	and.w	r3, r3, #15
 800ccc0:	b2da      	uxtb	r2, r3
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	b2db      	uxtb	r3, r3
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3714      	adds	r7, #20
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d101      	bne.n	800cce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	e10f      	b.n	800cf06 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a87      	ldr	r2, [pc, #540]	; (800cf10 <HAL_SPI_Init+0x23c>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d00f      	beq.n	800cd16 <HAL_SPI_Init+0x42>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a86      	ldr	r2, [pc, #536]	; (800cf14 <HAL_SPI_Init+0x240>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d00a      	beq.n	800cd16 <HAL_SPI_Init+0x42>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a84      	ldr	r2, [pc, #528]	; (800cf18 <HAL_SPI_Init+0x244>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d005      	beq.n	800cd16 <HAL_SPI_Init+0x42>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	2b0f      	cmp	r3, #15
 800cd10:	d901      	bls.n	800cd16 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cd12:	2301      	movs	r3, #1
 800cd14:	e0f7      	b.n	800cf06 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 f900 	bl	800cf1c <SPI_GetPacketSize>
 800cd1c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a7b      	ldr	r2, [pc, #492]	; (800cf10 <HAL_SPI_Init+0x23c>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d00c      	beq.n	800cd42 <HAL_SPI_Init+0x6e>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a79      	ldr	r2, [pc, #484]	; (800cf14 <HAL_SPI_Init+0x240>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d007      	beq.n	800cd42 <HAL_SPI_Init+0x6e>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a78      	ldr	r2, [pc, #480]	; (800cf18 <HAL_SPI_Init+0x244>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d002      	beq.n	800cd42 <HAL_SPI_Init+0x6e>
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2b08      	cmp	r3, #8
 800cd40:	d811      	bhi.n	800cd66 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd46:	4a72      	ldr	r2, [pc, #456]	; (800cf10 <HAL_SPI_Init+0x23c>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d009      	beq.n	800cd60 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a70      	ldr	r2, [pc, #448]	; (800cf14 <HAL_SPI_Init+0x240>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d004      	beq.n	800cd60 <HAL_SPI_Init+0x8c>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a6f      	ldr	r2, [pc, #444]	; (800cf18 <HAL_SPI_Init+0x244>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d104      	bne.n	800cd6a <HAL_SPI_Init+0x96>
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b10      	cmp	r3, #16
 800cd64:	d901      	bls.n	800cd6a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e0cd      	b.n	800cf06 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d106      	bne.n	800cd84 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7f5 ffcc 	bl	8002d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2202      	movs	r2, #2
 800cd88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f022 0201 	bic.w	r2, r2, #1
 800cd9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cda6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cdb0:	d119      	bne.n	800cde6 <HAL_SPI_Init+0x112>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdba:	d103      	bne.n	800cdc4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d008      	beq.n	800cdd6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10c      	bne.n	800cde6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cdd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdd4:	d107      	bne.n	800cde6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cde4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00f      	beq.n	800ce12 <HAL_SPI_Init+0x13e>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	2b06      	cmp	r3, #6
 800cdf8:	d90b      	bls.n	800ce12 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	e007      	b.n	800ce22 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	69da      	ldr	r2, [r3, #28]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2a:	431a      	orrs	r2, r3
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	431a      	orrs	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce34:	ea42 0103 	orr.w	r1, r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68da      	ldr	r2, [r3, #12]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	430a      	orrs	r2, r1
 800ce42:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	431a      	orrs	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce52:	431a      	orrs	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	699b      	ldr	r3, [r3, #24]
 800ce58:	431a      	orrs	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	695b      	ldr	r3, [r3, #20]
 800ce64:	431a      	orrs	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	431a      	orrs	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce76:	431a      	orrs	r2, r3
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	431a      	orrs	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce82:	ea42 0103 	orr.w	r1, r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	430a      	orrs	r2, r1
 800ce90:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d113      	bne.n	800cec2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ceac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cec0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f022 0201 	bic.w	r2, r2, #1
 800ced0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00a      	beq.n	800cef4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	430a      	orrs	r2, r1
 800cef2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2201      	movs	r2, #1
 800cf00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	40013000 	.word	0x40013000
 800cf14:	40003800 	.word	0x40003800
 800cf18:	40003c00 	.word	0x40003c00

0800cf1c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf28:	095b      	lsrs	r3, r3, #5
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	3301      	adds	r3, #1
 800cf34:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	3307      	adds	r3, #7
 800cf3a:	08db      	lsrs	r3, r3, #3
 800cf3c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	fb02 f303 	mul.w	r3, r2, r3
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b082      	sub	sp, #8
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d101      	bne.n	800cf64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e049      	b.n	800cff8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d106      	bne.n	800cf7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7f5 ff85 	bl	8002e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2202      	movs	r2, #2
 800cf82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	4619      	mov	r1, r3
 800cf90:	4610      	mov	r0, r2
 800cf92:	f000 ff41 	bl	800de18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b01      	cmp	r3, #1
 800d012:	d001      	beq.n	800d018 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d014:	2301      	movs	r3, #1
 800d016:	e04c      	b.n	800d0b2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2202      	movs	r2, #2
 800d01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a26      	ldr	r2, [pc, #152]	; (800d0c0 <HAL_TIM_Base_Start+0xc0>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d022      	beq.n	800d070 <HAL_TIM_Base_Start+0x70>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d032:	d01d      	beq.n	800d070 <HAL_TIM_Base_Start+0x70>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a22      	ldr	r2, [pc, #136]	; (800d0c4 <HAL_TIM_Base_Start+0xc4>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d018      	beq.n	800d070 <HAL_TIM_Base_Start+0x70>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a21      	ldr	r2, [pc, #132]	; (800d0c8 <HAL_TIM_Base_Start+0xc8>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d013      	beq.n	800d070 <HAL_TIM_Base_Start+0x70>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a1f      	ldr	r2, [pc, #124]	; (800d0cc <HAL_TIM_Base_Start+0xcc>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d00e      	beq.n	800d070 <HAL_TIM_Base_Start+0x70>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a1e      	ldr	r2, [pc, #120]	; (800d0d0 <HAL_TIM_Base_Start+0xd0>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d009      	beq.n	800d070 <HAL_TIM_Base_Start+0x70>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a1c      	ldr	r2, [pc, #112]	; (800d0d4 <HAL_TIM_Base_Start+0xd4>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d004      	beq.n	800d070 <HAL_TIM_Base_Start+0x70>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a1b      	ldr	r2, [pc, #108]	; (800d0d8 <HAL_TIM_Base_Start+0xd8>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d115      	bne.n	800d09c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	689a      	ldr	r2, [r3, #8]
 800d076:	4b19      	ldr	r3, [pc, #100]	; (800d0dc <HAL_TIM_Base_Start+0xdc>)
 800d078:	4013      	ands	r3, r2
 800d07a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2b06      	cmp	r3, #6
 800d080:	d015      	beq.n	800d0ae <HAL_TIM_Base_Start+0xae>
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d088:	d011      	beq.n	800d0ae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f042 0201 	orr.w	r2, r2, #1
 800d098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d09a:	e008      	b.n	800d0ae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f042 0201 	orr.w	r2, r2, #1
 800d0aa:	601a      	str	r2, [r3, #0]
 800d0ac:	e000      	b.n	800d0b0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3714      	adds	r7, #20
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	40010000 	.word	0x40010000
 800d0c4:	40000400 	.word	0x40000400
 800d0c8:	40000800 	.word	0x40000800
 800d0cc:	40000c00 	.word	0x40000c00
 800d0d0:	40010400 	.word	0x40010400
 800d0d4:	40001800 	.word	0x40001800
 800d0d8:	40014000 	.word	0x40014000
 800d0dc:	00010007 	.word	0x00010007

0800d0e0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	6a1a      	ldr	r2, [r3, #32]
 800d0ee:	f241 1311 	movw	r3, #4369	; 0x1111
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10f      	bne.n	800d118 <HAL_TIM_Base_Stop+0x38>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6a1a      	ldr	r2, [r3, #32]
 800d0fe:	f240 4344 	movw	r3, #1092	; 0x444
 800d102:	4013      	ands	r3, r2
 800d104:	2b00      	cmp	r3, #0
 800d106:	d107      	bne.n	800d118 <HAL_TIM_Base_Stop+0x38>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f022 0201 	bic.w	r2, r2, #1
 800d116:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
	...

0800d130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2b01      	cmp	r3, #1
 800d142:	d001      	beq.n	800d148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d144:	2301      	movs	r3, #1
 800d146:	e054      	b.n	800d1f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2202      	movs	r2, #2
 800d14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	68da      	ldr	r2, [r3, #12]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f042 0201 	orr.w	r2, r2, #1
 800d15e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a26      	ldr	r2, [pc, #152]	; (800d200 <HAL_TIM_Base_Start_IT+0xd0>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d022      	beq.n	800d1b0 <HAL_TIM_Base_Start_IT+0x80>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d172:	d01d      	beq.n	800d1b0 <HAL_TIM_Base_Start_IT+0x80>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a22      	ldr	r2, [pc, #136]	; (800d204 <HAL_TIM_Base_Start_IT+0xd4>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d018      	beq.n	800d1b0 <HAL_TIM_Base_Start_IT+0x80>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a21      	ldr	r2, [pc, #132]	; (800d208 <HAL_TIM_Base_Start_IT+0xd8>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d013      	beq.n	800d1b0 <HAL_TIM_Base_Start_IT+0x80>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a1f      	ldr	r2, [pc, #124]	; (800d20c <HAL_TIM_Base_Start_IT+0xdc>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d00e      	beq.n	800d1b0 <HAL_TIM_Base_Start_IT+0x80>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a1e      	ldr	r2, [pc, #120]	; (800d210 <HAL_TIM_Base_Start_IT+0xe0>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d009      	beq.n	800d1b0 <HAL_TIM_Base_Start_IT+0x80>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a1c      	ldr	r2, [pc, #112]	; (800d214 <HAL_TIM_Base_Start_IT+0xe4>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d004      	beq.n	800d1b0 <HAL_TIM_Base_Start_IT+0x80>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a1b      	ldr	r2, [pc, #108]	; (800d218 <HAL_TIM_Base_Start_IT+0xe8>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d115      	bne.n	800d1dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	689a      	ldr	r2, [r3, #8]
 800d1b6:	4b19      	ldr	r3, [pc, #100]	; (800d21c <HAL_TIM_Base_Start_IT+0xec>)
 800d1b8:	4013      	ands	r3, r2
 800d1ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2b06      	cmp	r3, #6
 800d1c0:	d015      	beq.n	800d1ee <HAL_TIM_Base_Start_IT+0xbe>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1c8:	d011      	beq.n	800d1ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f042 0201 	orr.w	r2, r2, #1
 800d1d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1da:	e008      	b.n	800d1ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f042 0201 	orr.w	r2, r2, #1
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	e000      	b.n	800d1f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	40010000 	.word	0x40010000
 800d204:	40000400 	.word	0x40000400
 800d208:	40000800 	.word	0x40000800
 800d20c:	40000c00 	.word	0x40000c00
 800d210:	40010400 	.word	0x40010400
 800d214:	40001800 	.word	0x40001800
 800d218:	40014000 	.word	0x40014000
 800d21c:	00010007 	.word	0x00010007

0800d220 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d109      	bne.n	800d248 <HAL_TIM_OC_Start_IT+0x28>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	bf14      	ite	ne
 800d240:	2301      	movne	r3, #1
 800d242:	2300      	moveq	r3, #0
 800d244:	b2db      	uxtb	r3, r3
 800d246:	e03c      	b.n	800d2c2 <HAL_TIM_OC_Start_IT+0xa2>
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	2b04      	cmp	r3, #4
 800d24c:	d109      	bne.n	800d262 <HAL_TIM_OC_Start_IT+0x42>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b01      	cmp	r3, #1
 800d258:	bf14      	ite	ne
 800d25a:	2301      	movne	r3, #1
 800d25c:	2300      	moveq	r3, #0
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	e02f      	b.n	800d2c2 <HAL_TIM_OC_Start_IT+0xa2>
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b08      	cmp	r3, #8
 800d266:	d109      	bne.n	800d27c <HAL_TIM_OC_Start_IT+0x5c>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b01      	cmp	r3, #1
 800d272:	bf14      	ite	ne
 800d274:	2301      	movne	r3, #1
 800d276:	2300      	moveq	r3, #0
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	e022      	b.n	800d2c2 <HAL_TIM_OC_Start_IT+0xa2>
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2b0c      	cmp	r3, #12
 800d280:	d109      	bne.n	800d296 <HAL_TIM_OC_Start_IT+0x76>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	bf14      	ite	ne
 800d28e:	2301      	movne	r3, #1
 800d290:	2300      	moveq	r3, #0
 800d292:	b2db      	uxtb	r3, r3
 800d294:	e015      	b.n	800d2c2 <HAL_TIM_OC_Start_IT+0xa2>
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	2b10      	cmp	r3, #16
 800d29a:	d109      	bne.n	800d2b0 <HAL_TIM_OC_Start_IT+0x90>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	bf14      	ite	ne
 800d2a8:	2301      	movne	r3, #1
 800d2aa:	2300      	moveq	r3, #0
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	e008      	b.n	800d2c2 <HAL_TIM_OC_Start_IT+0xa2>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	bf14      	ite	ne
 800d2bc:	2301      	movne	r3, #1
 800d2be:	2300      	moveq	r3, #0
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e0ec      	b.n	800d4a4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d104      	bne.n	800d2da <HAL_TIM_OC_Start_IT+0xba>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2202      	movs	r2, #2
 800d2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2d8:	e023      	b.n	800d322 <HAL_TIM_OC_Start_IT+0x102>
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	2b04      	cmp	r3, #4
 800d2de:	d104      	bne.n	800d2ea <HAL_TIM_OC_Start_IT+0xca>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2202      	movs	r2, #2
 800d2e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d2e8:	e01b      	b.n	800d322 <HAL_TIM_OC_Start_IT+0x102>
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	2b08      	cmp	r3, #8
 800d2ee:	d104      	bne.n	800d2fa <HAL_TIM_OC_Start_IT+0xda>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2202      	movs	r2, #2
 800d2f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2f8:	e013      	b.n	800d322 <HAL_TIM_OC_Start_IT+0x102>
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	2b0c      	cmp	r3, #12
 800d2fe:	d104      	bne.n	800d30a <HAL_TIM_OC_Start_IT+0xea>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2202      	movs	r2, #2
 800d304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d308:	e00b      	b.n	800d322 <HAL_TIM_OC_Start_IT+0x102>
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	2b10      	cmp	r3, #16
 800d30e:	d104      	bne.n	800d31a <HAL_TIM_OC_Start_IT+0xfa>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2202      	movs	r2, #2
 800d314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d318:	e003      	b.n	800d322 <HAL_TIM_OC_Start_IT+0x102>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2202      	movs	r2, #2
 800d31e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	2b0c      	cmp	r3, #12
 800d326:	d841      	bhi.n	800d3ac <HAL_TIM_OC_Start_IT+0x18c>
 800d328:	a201      	add	r2, pc, #4	; (adr r2, 800d330 <HAL_TIM_OC_Start_IT+0x110>)
 800d32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32e:	bf00      	nop
 800d330:	0800d365 	.word	0x0800d365
 800d334:	0800d3ad 	.word	0x0800d3ad
 800d338:	0800d3ad 	.word	0x0800d3ad
 800d33c:	0800d3ad 	.word	0x0800d3ad
 800d340:	0800d377 	.word	0x0800d377
 800d344:	0800d3ad 	.word	0x0800d3ad
 800d348:	0800d3ad 	.word	0x0800d3ad
 800d34c:	0800d3ad 	.word	0x0800d3ad
 800d350:	0800d389 	.word	0x0800d389
 800d354:	0800d3ad 	.word	0x0800d3ad
 800d358:	0800d3ad 	.word	0x0800d3ad
 800d35c:	0800d3ad 	.word	0x0800d3ad
 800d360:	0800d39b 	.word	0x0800d39b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	68da      	ldr	r2, [r3, #12]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f042 0202 	orr.w	r2, r2, #2
 800d372:	60da      	str	r2, [r3, #12]
      break;
 800d374:	e01d      	b.n	800d3b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68da      	ldr	r2, [r3, #12]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f042 0204 	orr.w	r2, r2, #4
 800d384:	60da      	str	r2, [r3, #12]
      break;
 800d386:	e014      	b.n	800d3b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	68da      	ldr	r2, [r3, #12]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f042 0208 	orr.w	r2, r2, #8
 800d396:	60da      	str	r2, [r3, #12]
      break;
 800d398:	e00b      	b.n	800d3b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	68da      	ldr	r2, [r3, #12]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f042 0210 	orr.w	r2, r2, #16
 800d3a8:	60da      	str	r2, [r3, #12]
      break;
 800d3aa:	e002      	b.n	800d3b2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	73fb      	strb	r3, [r7, #15]
      break;
 800d3b0:	bf00      	nop
  }

  if (status == HAL_OK)
 800d3b2:	7bfb      	ldrb	r3, [r7, #15]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d174      	bne.n	800d4a2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	6839      	ldr	r1, [r7, #0]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f001 f943 	bl	800e64c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a38      	ldr	r2, [pc, #224]	; (800d4ac <HAL_TIM_OC_Start_IT+0x28c>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d013      	beq.n	800d3f8 <HAL_TIM_OC_Start_IT+0x1d8>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a36      	ldr	r2, [pc, #216]	; (800d4b0 <HAL_TIM_OC_Start_IT+0x290>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d00e      	beq.n	800d3f8 <HAL_TIM_OC_Start_IT+0x1d8>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a35      	ldr	r2, [pc, #212]	; (800d4b4 <HAL_TIM_OC_Start_IT+0x294>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d009      	beq.n	800d3f8 <HAL_TIM_OC_Start_IT+0x1d8>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a33      	ldr	r2, [pc, #204]	; (800d4b8 <HAL_TIM_OC_Start_IT+0x298>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d004      	beq.n	800d3f8 <HAL_TIM_OC_Start_IT+0x1d8>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4a32      	ldr	r2, [pc, #200]	; (800d4bc <HAL_TIM_OC_Start_IT+0x29c>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d101      	bne.n	800d3fc <HAL_TIM_OC_Start_IT+0x1dc>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e000      	b.n	800d3fe <HAL_TIM_OC_Start_IT+0x1de>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d007      	beq.n	800d412 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d410:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a25      	ldr	r2, [pc, #148]	; (800d4ac <HAL_TIM_OC_Start_IT+0x28c>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d022      	beq.n	800d462 <HAL_TIM_OC_Start_IT+0x242>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d424:	d01d      	beq.n	800d462 <HAL_TIM_OC_Start_IT+0x242>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a25      	ldr	r2, [pc, #148]	; (800d4c0 <HAL_TIM_OC_Start_IT+0x2a0>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d018      	beq.n	800d462 <HAL_TIM_OC_Start_IT+0x242>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a23      	ldr	r2, [pc, #140]	; (800d4c4 <HAL_TIM_OC_Start_IT+0x2a4>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d013      	beq.n	800d462 <HAL_TIM_OC_Start_IT+0x242>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a22      	ldr	r2, [pc, #136]	; (800d4c8 <HAL_TIM_OC_Start_IT+0x2a8>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d00e      	beq.n	800d462 <HAL_TIM_OC_Start_IT+0x242>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a19      	ldr	r2, [pc, #100]	; (800d4b0 <HAL_TIM_OC_Start_IT+0x290>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d009      	beq.n	800d462 <HAL_TIM_OC_Start_IT+0x242>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a1e      	ldr	r2, [pc, #120]	; (800d4cc <HAL_TIM_OC_Start_IT+0x2ac>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d004      	beq.n	800d462 <HAL_TIM_OC_Start_IT+0x242>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a15      	ldr	r2, [pc, #84]	; (800d4b4 <HAL_TIM_OC_Start_IT+0x294>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d115      	bne.n	800d48e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	689a      	ldr	r2, [r3, #8]
 800d468:	4b19      	ldr	r3, [pc, #100]	; (800d4d0 <HAL_TIM_OC_Start_IT+0x2b0>)
 800d46a:	4013      	ands	r3, r2
 800d46c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	2b06      	cmp	r3, #6
 800d472:	d015      	beq.n	800d4a0 <HAL_TIM_OC_Start_IT+0x280>
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d47a:	d011      	beq.n	800d4a0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f042 0201 	orr.w	r2, r2, #1
 800d48a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d48c:	e008      	b.n	800d4a0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f042 0201 	orr.w	r2, r2, #1
 800d49c:	601a      	str	r2, [r3, #0]
 800d49e:	e000      	b.n	800d4a2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4a0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	40010000 	.word	0x40010000
 800d4b0:	40010400 	.word	0x40010400
 800d4b4:	40014000 	.word	0x40014000
 800d4b8:	40014400 	.word	0x40014400
 800d4bc:	40014800 	.word	0x40014800
 800d4c0:	40000400 	.word	0x40000400
 800d4c4:	40000800 	.word	0x40000800
 800d4c8:	40000c00 	.word	0x40000c00
 800d4cc:	40001800 	.word	0x40001800
 800d4d0:	00010007 	.word	0x00010007

0800d4d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e049      	b.n	800d57a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d106      	bne.n	800d500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f841 	bl	800d582 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2202      	movs	r2, #2
 800d504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	3304      	adds	r3, #4
 800d510:	4619      	mov	r1, r3
 800d512:	4610      	mov	r0, r2
 800d514:	f000 fc80 	bl	800de18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2201      	movs	r2, #1
 800d524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2201      	movs	r2, #1
 800d52c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d582:	b480      	push	{r7}
 800d584:	b083      	sub	sp, #12
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d58a:	bf00      	nop
 800d58c:	370c      	adds	r7, #12
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
	...

0800d598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d109      	bne.n	800d5bc <HAL_TIM_PWM_Start+0x24>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	e03c      	b.n	800d636 <HAL_TIM_PWM_Start+0x9e>
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	2b04      	cmp	r3, #4
 800d5c0:	d109      	bne.n	800d5d6 <HAL_TIM_PWM_Start+0x3e>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	bf14      	ite	ne
 800d5ce:	2301      	movne	r3, #1
 800d5d0:	2300      	moveq	r3, #0
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	e02f      	b.n	800d636 <HAL_TIM_PWM_Start+0x9e>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	2b08      	cmp	r3, #8
 800d5da:	d109      	bne.n	800d5f0 <HAL_TIM_PWM_Start+0x58>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	bf14      	ite	ne
 800d5e8:	2301      	movne	r3, #1
 800d5ea:	2300      	moveq	r3, #0
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	e022      	b.n	800d636 <HAL_TIM_PWM_Start+0x9e>
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	2b0c      	cmp	r3, #12
 800d5f4:	d109      	bne.n	800d60a <HAL_TIM_PWM_Start+0x72>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	bf14      	ite	ne
 800d602:	2301      	movne	r3, #1
 800d604:	2300      	moveq	r3, #0
 800d606:	b2db      	uxtb	r3, r3
 800d608:	e015      	b.n	800d636 <HAL_TIM_PWM_Start+0x9e>
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	2b10      	cmp	r3, #16
 800d60e:	d109      	bne.n	800d624 <HAL_TIM_PWM_Start+0x8c>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d616:	b2db      	uxtb	r3, r3
 800d618:	2b01      	cmp	r3, #1
 800d61a:	bf14      	ite	ne
 800d61c:	2301      	movne	r3, #1
 800d61e:	2300      	moveq	r3, #0
 800d620:	b2db      	uxtb	r3, r3
 800d622:	e008      	b.n	800d636 <HAL_TIM_PWM_Start+0x9e>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	bf14      	ite	ne
 800d630:	2301      	movne	r3, #1
 800d632:	2300      	moveq	r3, #0
 800d634:	b2db      	uxtb	r3, r3
 800d636:	2b00      	cmp	r3, #0
 800d638:	d001      	beq.n	800d63e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e0a1      	b.n	800d782 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d104      	bne.n	800d64e <HAL_TIM_PWM_Start+0xb6>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2202      	movs	r2, #2
 800d648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d64c:	e023      	b.n	800d696 <HAL_TIM_PWM_Start+0xfe>
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	2b04      	cmp	r3, #4
 800d652:	d104      	bne.n	800d65e <HAL_TIM_PWM_Start+0xc6>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2202      	movs	r2, #2
 800d658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d65c:	e01b      	b.n	800d696 <HAL_TIM_PWM_Start+0xfe>
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	2b08      	cmp	r3, #8
 800d662:	d104      	bne.n	800d66e <HAL_TIM_PWM_Start+0xd6>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2202      	movs	r2, #2
 800d668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d66c:	e013      	b.n	800d696 <HAL_TIM_PWM_Start+0xfe>
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b0c      	cmp	r3, #12
 800d672:	d104      	bne.n	800d67e <HAL_TIM_PWM_Start+0xe6>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2202      	movs	r2, #2
 800d678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d67c:	e00b      	b.n	800d696 <HAL_TIM_PWM_Start+0xfe>
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	2b10      	cmp	r3, #16
 800d682:	d104      	bne.n	800d68e <HAL_TIM_PWM_Start+0xf6>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2202      	movs	r2, #2
 800d688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d68c:	e003      	b.n	800d696 <HAL_TIM_PWM_Start+0xfe>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2202      	movs	r2, #2
 800d692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2201      	movs	r2, #1
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 ffd4 	bl	800e64c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a38      	ldr	r2, [pc, #224]	; (800d78c <HAL_TIM_PWM_Start+0x1f4>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d013      	beq.n	800d6d6 <HAL_TIM_PWM_Start+0x13e>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a37      	ldr	r2, [pc, #220]	; (800d790 <HAL_TIM_PWM_Start+0x1f8>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d00e      	beq.n	800d6d6 <HAL_TIM_PWM_Start+0x13e>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a35      	ldr	r2, [pc, #212]	; (800d794 <HAL_TIM_PWM_Start+0x1fc>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d009      	beq.n	800d6d6 <HAL_TIM_PWM_Start+0x13e>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a34      	ldr	r2, [pc, #208]	; (800d798 <HAL_TIM_PWM_Start+0x200>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d004      	beq.n	800d6d6 <HAL_TIM_PWM_Start+0x13e>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a32      	ldr	r2, [pc, #200]	; (800d79c <HAL_TIM_PWM_Start+0x204>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d101      	bne.n	800d6da <HAL_TIM_PWM_Start+0x142>
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	e000      	b.n	800d6dc <HAL_TIM_PWM_Start+0x144>
 800d6da:	2300      	movs	r3, #0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d007      	beq.n	800d6f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d6ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a25      	ldr	r2, [pc, #148]	; (800d78c <HAL_TIM_PWM_Start+0x1f4>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d022      	beq.n	800d740 <HAL_TIM_PWM_Start+0x1a8>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d702:	d01d      	beq.n	800d740 <HAL_TIM_PWM_Start+0x1a8>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a25      	ldr	r2, [pc, #148]	; (800d7a0 <HAL_TIM_PWM_Start+0x208>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d018      	beq.n	800d740 <HAL_TIM_PWM_Start+0x1a8>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a24      	ldr	r2, [pc, #144]	; (800d7a4 <HAL_TIM_PWM_Start+0x20c>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d013      	beq.n	800d740 <HAL_TIM_PWM_Start+0x1a8>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a22      	ldr	r2, [pc, #136]	; (800d7a8 <HAL_TIM_PWM_Start+0x210>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d00e      	beq.n	800d740 <HAL_TIM_PWM_Start+0x1a8>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a1a      	ldr	r2, [pc, #104]	; (800d790 <HAL_TIM_PWM_Start+0x1f8>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d009      	beq.n	800d740 <HAL_TIM_PWM_Start+0x1a8>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a1e      	ldr	r2, [pc, #120]	; (800d7ac <HAL_TIM_PWM_Start+0x214>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d004      	beq.n	800d740 <HAL_TIM_PWM_Start+0x1a8>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a16      	ldr	r2, [pc, #88]	; (800d794 <HAL_TIM_PWM_Start+0x1fc>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d115      	bne.n	800d76c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	689a      	ldr	r2, [r3, #8]
 800d746:	4b1a      	ldr	r3, [pc, #104]	; (800d7b0 <HAL_TIM_PWM_Start+0x218>)
 800d748:	4013      	ands	r3, r2
 800d74a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b06      	cmp	r3, #6
 800d750:	d015      	beq.n	800d77e <HAL_TIM_PWM_Start+0x1e6>
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d758:	d011      	beq.n	800d77e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f042 0201 	orr.w	r2, r2, #1
 800d768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d76a:	e008      	b.n	800d77e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f042 0201 	orr.w	r2, r2, #1
 800d77a:	601a      	str	r2, [r3, #0]
 800d77c:	e000      	b.n	800d780 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d77e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3710      	adds	r7, #16
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	40010000 	.word	0x40010000
 800d790:	40010400 	.word	0x40010400
 800d794:	40014000 	.word	0x40014000
 800d798:	40014400 	.word	0x40014400
 800d79c:	40014800 	.word	0x40014800
 800d7a0:	40000400 	.word	0x40000400
 800d7a4:	40000800 	.word	0x40000800
 800d7a8:	40000c00 	.word	0x40000c00
 800d7ac:	40001800 	.word	0x40001800
 800d7b0:	00010007 	.word	0x00010007

0800d7b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	691b      	ldr	r3, [r3, #16]
 800d7ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	f003 0302 	and.w	r3, r3, #2
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d020      	beq.n	800d818 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f003 0302 	and.w	r3, r3, #2
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d01b      	beq.n	800d818 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f06f 0202 	mvn.w	r2, #2
 800d7e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	f003 0303 	and.w	r3, r3, #3
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d003      	beq.n	800d806 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 faec 	bl	800dddc <HAL_TIM_IC_CaptureCallback>
 800d804:	e005      	b.n	800d812 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f7f2 ff3c 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 faef 	bl	800ddf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	f003 0304 	and.w	r3, r3, #4
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d020      	beq.n	800d864 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f003 0304 	and.w	r3, r3, #4
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d01b      	beq.n	800d864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f06f 0204 	mvn.w	r2, #4
 800d834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2202      	movs	r2, #2
 800d83a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d846:	2b00      	cmp	r3, #0
 800d848:	d003      	beq.n	800d852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fac6 	bl	800dddc <HAL_TIM_IC_CaptureCallback>
 800d850:	e005      	b.n	800d85e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7f2 ff16 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fac9 	bl	800ddf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	f003 0308 	and.w	r3, r3, #8
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d020      	beq.n	800d8b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f003 0308 	and.w	r3, r3, #8
 800d874:	2b00      	cmp	r3, #0
 800d876:	d01b      	beq.n	800d8b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f06f 0208 	mvn.w	r2, #8
 800d880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2204      	movs	r2, #4
 800d886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	69db      	ldr	r3, [r3, #28]
 800d88e:	f003 0303 	and.w	r3, r3, #3
 800d892:	2b00      	cmp	r3, #0
 800d894:	d003      	beq.n	800d89e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 faa0 	bl	800dddc <HAL_TIM_IC_CaptureCallback>
 800d89c:	e005      	b.n	800d8aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7f2 fef0 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 faa3 	bl	800ddf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	f003 0310 	and.w	r3, r3, #16
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d020      	beq.n	800d8fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f003 0310 	and.w	r3, r3, #16
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d01b      	beq.n	800d8fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f06f 0210 	mvn.w	r2, #16
 800d8cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2208      	movs	r2, #8
 800d8d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	69db      	ldr	r3, [r3, #28]
 800d8da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d003      	beq.n	800d8ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 fa7a 	bl	800dddc <HAL_TIM_IC_CaptureCallback>
 800d8e8:	e005      	b.n	800d8f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7f2 feca 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fa7d 	bl	800ddf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00c      	beq.n	800d920 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f003 0301 	and.w	r3, r3, #1
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d007      	beq.n	800d920 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f06f 0201 	mvn.w	r2, #1
 800d918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7f4 ff90 	bl	8002840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d926:	2b00      	cmp	r3, #0
 800d928:	d104      	bne.n	800d934 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00c      	beq.n	800d94e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d007      	beq.n	800d94e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 ffbb 	bl	800e8c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00c      	beq.n	800d972 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d007      	beq.n	800d972 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d96a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 ffb3 	bl	800e8d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00c      	beq.n	800d996 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d982:	2b00      	cmp	r3, #0
 800d984:	d007      	beq.n	800d996 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d98e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 fa37 	bl	800de04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	f003 0320 	and.w	r3, r3, #32
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00c      	beq.n	800d9ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f003 0320 	and.w	r3, r3, #32
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d007      	beq.n	800d9ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f06f 0220 	mvn.w	r2, #32
 800d9b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 ff7b 	bl	800e8b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d9ba:	bf00      	nop
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
	...

0800d9c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d101      	bne.n	800d9e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d9de:	2302      	movs	r3, #2
 800d9e0:	e0ff      	b.n	800dbe2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b14      	cmp	r3, #20
 800d9ee:	f200 80f0 	bhi.w	800dbd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d9f2:	a201      	add	r2, pc, #4	; (adr r2, 800d9f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f8:	0800da4d 	.word	0x0800da4d
 800d9fc:	0800dbd3 	.word	0x0800dbd3
 800da00:	0800dbd3 	.word	0x0800dbd3
 800da04:	0800dbd3 	.word	0x0800dbd3
 800da08:	0800da8d 	.word	0x0800da8d
 800da0c:	0800dbd3 	.word	0x0800dbd3
 800da10:	0800dbd3 	.word	0x0800dbd3
 800da14:	0800dbd3 	.word	0x0800dbd3
 800da18:	0800dacf 	.word	0x0800dacf
 800da1c:	0800dbd3 	.word	0x0800dbd3
 800da20:	0800dbd3 	.word	0x0800dbd3
 800da24:	0800dbd3 	.word	0x0800dbd3
 800da28:	0800db0f 	.word	0x0800db0f
 800da2c:	0800dbd3 	.word	0x0800dbd3
 800da30:	0800dbd3 	.word	0x0800dbd3
 800da34:	0800dbd3 	.word	0x0800dbd3
 800da38:	0800db51 	.word	0x0800db51
 800da3c:	0800dbd3 	.word	0x0800dbd3
 800da40:	0800dbd3 	.word	0x0800dbd3
 800da44:	0800dbd3 	.word	0x0800dbd3
 800da48:	0800db91 	.word	0x0800db91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	68b9      	ldr	r1, [r7, #8]
 800da52:	4618      	mov	r0, r3
 800da54:	f000 fa86 	bl	800df64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	699a      	ldr	r2, [r3, #24]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f042 0208 	orr.w	r2, r2, #8
 800da66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	699a      	ldr	r2, [r3, #24]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f022 0204 	bic.w	r2, r2, #4
 800da76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6999      	ldr	r1, [r3, #24]
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	691a      	ldr	r2, [r3, #16]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	430a      	orrs	r2, r1
 800da88:	619a      	str	r2, [r3, #24]
      break;
 800da8a:	e0a5      	b.n	800dbd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	4618      	mov	r0, r3
 800da94:	f000 faf6 	bl	800e084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	699a      	ldr	r2, [r3, #24]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800daa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	699a      	ldr	r2, [r3, #24]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	6999      	ldr	r1, [r3, #24]
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	691b      	ldr	r3, [r3, #16]
 800dac2:	021a      	lsls	r2, r3, #8
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	430a      	orrs	r2, r1
 800daca:	619a      	str	r2, [r3, #24]
      break;
 800dacc:	e084      	b.n	800dbd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68b9      	ldr	r1, [r7, #8]
 800dad4:	4618      	mov	r0, r3
 800dad6:	f000 fb5f 	bl	800e198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	69da      	ldr	r2, [r3, #28]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f042 0208 	orr.w	r2, r2, #8
 800dae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	69da      	ldr	r2, [r3, #28]
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f022 0204 	bic.w	r2, r2, #4
 800daf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	69d9      	ldr	r1, [r3, #28]
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	691a      	ldr	r2, [r3, #16]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	430a      	orrs	r2, r1
 800db0a:	61da      	str	r2, [r3, #28]
      break;
 800db0c:	e064      	b.n	800dbd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	4618      	mov	r0, r3
 800db16:	f000 fbc7 	bl	800e2a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	69da      	ldr	r2, [r3, #28]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	69da      	ldr	r2, [r3, #28]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	69d9      	ldr	r1, [r3, #28]
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	021a      	lsls	r2, r3, #8
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	430a      	orrs	r2, r1
 800db4c:	61da      	str	r2, [r3, #28]
      break;
 800db4e:	e043      	b.n	800dbd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68b9      	ldr	r1, [r7, #8]
 800db56:	4618      	mov	r0, r3
 800db58:	f000 fc10 	bl	800e37c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f042 0208 	orr.w	r2, r2, #8
 800db6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f022 0204 	bic.w	r2, r2, #4
 800db7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	691a      	ldr	r2, [r3, #16]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	430a      	orrs	r2, r1
 800db8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800db8e:	e023      	b.n	800dbd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	68b9      	ldr	r1, [r7, #8]
 800db96:	4618      	mov	r0, r3
 800db98:	f000 fc54 	bl	800e444 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	691b      	ldr	r3, [r3, #16]
 800dbc6:	021a      	lsls	r2, r3, #8
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	430a      	orrs	r2, r1
 800dbce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dbd0:	e002      	b.n	800dbd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	75fb      	strb	r3, [r7, #23]
      break;
 800dbd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dbe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3718      	adds	r7, #24
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop

0800dbec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d101      	bne.n	800dc08 <HAL_TIM_ConfigClockSource+0x1c>
 800dc04:	2302      	movs	r3, #2
 800dc06:	e0dc      	b.n	800ddc2 <HAL_TIM_ConfigClockSource+0x1d6>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2202      	movs	r2, #2
 800dc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dc20:	68ba      	ldr	r2, [r7, #8]
 800dc22:	4b6a      	ldr	r3, [pc, #424]	; (800ddcc <HAL_TIM_ConfigClockSource+0x1e0>)
 800dc24:	4013      	ands	r3, r2
 800dc26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a64      	ldr	r2, [pc, #400]	; (800ddd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	f000 80a9 	beq.w	800dd96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc44:	4a62      	ldr	r2, [pc, #392]	; (800ddd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	f200 80ae 	bhi.w	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc4c:	4a61      	ldr	r2, [pc, #388]	; (800ddd4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	f000 80a1 	beq.w	800dd96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc54:	4a5f      	ldr	r2, [pc, #380]	; (800ddd4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	f200 80a6 	bhi.w	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc5c:	4a5e      	ldr	r2, [pc, #376]	; (800ddd8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	f000 8099 	beq.w	800dd96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc64:	4a5c      	ldr	r2, [pc, #368]	; (800ddd8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	f200 809e 	bhi.w	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dc70:	f000 8091 	beq.w	800dd96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dc78:	f200 8096 	bhi.w	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc80:	f000 8089 	beq.w	800dd96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc88:	f200 808e 	bhi.w	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc90:	d03e      	beq.n	800dd10 <HAL_TIM_ConfigClockSource+0x124>
 800dc92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc96:	f200 8087 	bhi.w	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc9e:	f000 8086 	beq.w	800ddae <HAL_TIM_ConfigClockSource+0x1c2>
 800dca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dca6:	d87f      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dca8:	2b70      	cmp	r3, #112	; 0x70
 800dcaa:	d01a      	beq.n	800dce2 <HAL_TIM_ConfigClockSource+0xf6>
 800dcac:	2b70      	cmp	r3, #112	; 0x70
 800dcae:	d87b      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcb0:	2b60      	cmp	r3, #96	; 0x60
 800dcb2:	d050      	beq.n	800dd56 <HAL_TIM_ConfigClockSource+0x16a>
 800dcb4:	2b60      	cmp	r3, #96	; 0x60
 800dcb6:	d877      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcb8:	2b50      	cmp	r3, #80	; 0x50
 800dcba:	d03c      	beq.n	800dd36 <HAL_TIM_ConfigClockSource+0x14a>
 800dcbc:	2b50      	cmp	r3, #80	; 0x50
 800dcbe:	d873      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcc0:	2b40      	cmp	r3, #64	; 0x40
 800dcc2:	d058      	beq.n	800dd76 <HAL_TIM_ConfigClockSource+0x18a>
 800dcc4:	2b40      	cmp	r3, #64	; 0x40
 800dcc6:	d86f      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcc8:	2b30      	cmp	r3, #48	; 0x30
 800dcca:	d064      	beq.n	800dd96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dccc:	2b30      	cmp	r3, #48	; 0x30
 800dcce:	d86b      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcd0:	2b20      	cmp	r3, #32
 800dcd2:	d060      	beq.n	800dd96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dcd4:	2b20      	cmp	r3, #32
 800dcd6:	d867      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d05c      	beq.n	800dd96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dcdc:	2b10      	cmp	r3, #16
 800dcde:	d05a      	beq.n	800dd96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dce0:	e062      	b.n	800dda8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6818      	ldr	r0, [r3, #0]
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	6899      	ldr	r1, [r3, #8]
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	685a      	ldr	r2, [r3, #4]
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	f000 fc8b 	bl	800e60c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dd04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	609a      	str	r2, [r3, #8]
      break;
 800dd0e:	e04f      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6818      	ldr	r0, [r3, #0]
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	6899      	ldr	r1, [r3, #8]
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	685a      	ldr	r2, [r3, #4]
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	f000 fc74 	bl	800e60c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	689a      	ldr	r2, [r3, #8]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dd32:	609a      	str	r2, [r3, #8]
      break;
 800dd34:	e03c      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6818      	ldr	r0, [r3, #0]
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	6859      	ldr	r1, [r3, #4]
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	461a      	mov	r2, r3
 800dd44:	f000 fbe4 	bl	800e510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2150      	movs	r1, #80	; 0x50
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 fc3e 	bl	800e5d0 <TIM_ITRx_SetConfig>
      break;
 800dd54:	e02c      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6818      	ldr	r0, [r3, #0]
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	6859      	ldr	r1, [r3, #4]
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	461a      	mov	r2, r3
 800dd64:	f000 fc03 	bl	800e56e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2160      	movs	r1, #96	; 0x60
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f000 fc2e 	bl	800e5d0 <TIM_ITRx_SetConfig>
      break;
 800dd74:	e01c      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6818      	ldr	r0, [r3, #0]
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	6859      	ldr	r1, [r3, #4]
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	461a      	mov	r2, r3
 800dd84:	f000 fbc4 	bl	800e510 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2140      	movs	r1, #64	; 0x40
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 fc1e 	bl	800e5d0 <TIM_ITRx_SetConfig>
      break;
 800dd94:	e00c      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4610      	mov	r0, r2
 800dda2:	f000 fc15 	bl	800e5d0 <TIM_ITRx_SetConfig>
      break;
 800dda6:	e003      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ddac:	e000      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ddae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ddc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	ffceff88 	.word	0xffceff88
 800ddd0:	00100040 	.word	0x00100040
 800ddd4:	00100030 	.word	0x00100030
 800ddd8:	00100020 	.word	0x00100020

0800dddc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dde4:	bf00      	nop
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddf8:	bf00      	nop
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de0c:	bf00      	nop
 800de0e:	370c      	adds	r7, #12
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a46      	ldr	r2, [pc, #280]	; (800df44 <TIM_Base_SetConfig+0x12c>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d013      	beq.n	800de58 <TIM_Base_SetConfig+0x40>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de36:	d00f      	beq.n	800de58 <TIM_Base_SetConfig+0x40>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	4a43      	ldr	r2, [pc, #268]	; (800df48 <TIM_Base_SetConfig+0x130>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d00b      	beq.n	800de58 <TIM_Base_SetConfig+0x40>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4a42      	ldr	r2, [pc, #264]	; (800df4c <TIM_Base_SetConfig+0x134>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d007      	beq.n	800de58 <TIM_Base_SetConfig+0x40>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4a41      	ldr	r2, [pc, #260]	; (800df50 <TIM_Base_SetConfig+0x138>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d003      	beq.n	800de58 <TIM_Base_SetConfig+0x40>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4a40      	ldr	r2, [pc, #256]	; (800df54 <TIM_Base_SetConfig+0x13c>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d108      	bne.n	800de6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	4313      	orrs	r3, r2
 800de68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	4a35      	ldr	r2, [pc, #212]	; (800df44 <TIM_Base_SetConfig+0x12c>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d01f      	beq.n	800deb2 <TIM_Base_SetConfig+0x9a>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de78:	d01b      	beq.n	800deb2 <TIM_Base_SetConfig+0x9a>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	4a32      	ldr	r2, [pc, #200]	; (800df48 <TIM_Base_SetConfig+0x130>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d017      	beq.n	800deb2 <TIM_Base_SetConfig+0x9a>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4a31      	ldr	r2, [pc, #196]	; (800df4c <TIM_Base_SetConfig+0x134>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d013      	beq.n	800deb2 <TIM_Base_SetConfig+0x9a>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	4a30      	ldr	r2, [pc, #192]	; (800df50 <TIM_Base_SetConfig+0x138>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d00f      	beq.n	800deb2 <TIM_Base_SetConfig+0x9a>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	4a2f      	ldr	r2, [pc, #188]	; (800df54 <TIM_Base_SetConfig+0x13c>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d00b      	beq.n	800deb2 <TIM_Base_SetConfig+0x9a>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4a2e      	ldr	r2, [pc, #184]	; (800df58 <TIM_Base_SetConfig+0x140>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d007      	beq.n	800deb2 <TIM_Base_SetConfig+0x9a>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a2d      	ldr	r2, [pc, #180]	; (800df5c <TIM_Base_SetConfig+0x144>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d003      	beq.n	800deb2 <TIM_Base_SetConfig+0x9a>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a2c      	ldr	r2, [pc, #176]	; (800df60 <TIM_Base_SetConfig+0x148>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d108      	bne.n	800dec4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800deb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	68fa      	ldr	r2, [r7, #12]
 800dec0:	4313      	orrs	r3, r2
 800dec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	695b      	ldr	r3, [r3, #20]
 800dece:	4313      	orrs	r3, r2
 800ded0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	689a      	ldr	r2, [r3, #8]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4a16      	ldr	r2, [pc, #88]	; (800df44 <TIM_Base_SetConfig+0x12c>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d00f      	beq.n	800df10 <TIM_Base_SetConfig+0xf8>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	4a18      	ldr	r2, [pc, #96]	; (800df54 <TIM_Base_SetConfig+0x13c>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d00b      	beq.n	800df10 <TIM_Base_SetConfig+0xf8>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	4a17      	ldr	r2, [pc, #92]	; (800df58 <TIM_Base_SetConfig+0x140>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d007      	beq.n	800df10 <TIM_Base_SetConfig+0xf8>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	4a16      	ldr	r2, [pc, #88]	; (800df5c <TIM_Base_SetConfig+0x144>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d003      	beq.n	800df10 <TIM_Base_SetConfig+0xf8>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	4a15      	ldr	r2, [pc, #84]	; (800df60 <TIM_Base_SetConfig+0x148>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d103      	bne.n	800df18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	691a      	ldr	r2, [r3, #16]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2201      	movs	r2, #1
 800df1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	2b01      	cmp	r3, #1
 800df28:	d105      	bne.n	800df36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	691b      	ldr	r3, [r3, #16]
 800df2e:	f023 0201 	bic.w	r2, r3, #1
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	611a      	str	r2, [r3, #16]
  }
}
 800df36:	bf00      	nop
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop
 800df44:	40010000 	.word	0x40010000
 800df48:	40000400 	.word	0x40000400
 800df4c:	40000800 	.word	0x40000800
 800df50:	40000c00 	.word	0x40000c00
 800df54:	40010400 	.word	0x40010400
 800df58:	40014000 	.word	0x40014000
 800df5c:	40014400 	.word	0x40014400
 800df60:	40014800 	.word	0x40014800

0800df64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df64:	b480      	push	{r7}
 800df66:	b087      	sub	sp, #28
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a1b      	ldr	r3, [r3, #32]
 800df72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a1b      	ldr	r3, [r3, #32]
 800df78:	f023 0201 	bic.w	r2, r3, #1
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	699b      	ldr	r3, [r3, #24]
 800df8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	4b37      	ldr	r3, [pc, #220]	; (800e06c <TIM_OC1_SetConfig+0x108>)
 800df90:	4013      	ands	r3, r2
 800df92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f023 0303 	bic.w	r3, r3, #3
 800df9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	f023 0302 	bic.w	r3, r3, #2
 800dfac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	689b      	ldr	r3, [r3, #8]
 800dfb2:	697a      	ldr	r2, [r7, #20]
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a2d      	ldr	r2, [pc, #180]	; (800e070 <TIM_OC1_SetConfig+0x10c>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d00f      	beq.n	800dfe0 <TIM_OC1_SetConfig+0x7c>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a2c      	ldr	r2, [pc, #176]	; (800e074 <TIM_OC1_SetConfig+0x110>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d00b      	beq.n	800dfe0 <TIM_OC1_SetConfig+0x7c>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a2b      	ldr	r2, [pc, #172]	; (800e078 <TIM_OC1_SetConfig+0x114>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d007      	beq.n	800dfe0 <TIM_OC1_SetConfig+0x7c>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a2a      	ldr	r2, [pc, #168]	; (800e07c <TIM_OC1_SetConfig+0x118>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d003      	beq.n	800dfe0 <TIM_OC1_SetConfig+0x7c>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4a29      	ldr	r2, [pc, #164]	; (800e080 <TIM_OC1_SetConfig+0x11c>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d10c      	bne.n	800dffa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	f023 0308 	bic.w	r3, r3, #8
 800dfe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	697a      	ldr	r2, [r7, #20]
 800dfee:	4313      	orrs	r3, r2
 800dff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	f023 0304 	bic.w	r3, r3, #4
 800dff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4a1c      	ldr	r2, [pc, #112]	; (800e070 <TIM_OC1_SetConfig+0x10c>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	d00f      	beq.n	800e022 <TIM_OC1_SetConfig+0xbe>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4a1b      	ldr	r2, [pc, #108]	; (800e074 <TIM_OC1_SetConfig+0x110>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d00b      	beq.n	800e022 <TIM_OC1_SetConfig+0xbe>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4a1a      	ldr	r2, [pc, #104]	; (800e078 <TIM_OC1_SetConfig+0x114>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d007      	beq.n	800e022 <TIM_OC1_SetConfig+0xbe>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4a19      	ldr	r2, [pc, #100]	; (800e07c <TIM_OC1_SetConfig+0x118>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d003      	beq.n	800e022 <TIM_OC1_SetConfig+0xbe>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a18      	ldr	r2, [pc, #96]	; (800e080 <TIM_OC1_SetConfig+0x11c>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d111      	bne.n	800e046 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	695b      	ldr	r3, [r3, #20]
 800e036:	693a      	ldr	r2, [r7, #16]
 800e038:	4313      	orrs	r3, r2
 800e03a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	699b      	ldr	r3, [r3, #24]
 800e040:	693a      	ldr	r2, [r7, #16]
 800e042:	4313      	orrs	r3, r2
 800e044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68fa      	ldr	r2, [r7, #12]
 800e050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	685a      	ldr	r2, [r3, #4]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	697a      	ldr	r2, [r7, #20]
 800e05e:	621a      	str	r2, [r3, #32]
}
 800e060:	bf00      	nop
 800e062:	371c      	adds	r7, #28
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr
 800e06c:	fffeff8f 	.word	0xfffeff8f
 800e070:	40010000 	.word	0x40010000
 800e074:	40010400 	.word	0x40010400
 800e078:	40014000 	.word	0x40014000
 800e07c:	40014400 	.word	0x40014400
 800e080:	40014800 	.word	0x40014800

0800e084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e084:	b480      	push	{r7}
 800e086:	b087      	sub	sp, #28
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6a1b      	ldr	r3, [r3, #32]
 800e092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a1b      	ldr	r3, [r3, #32]
 800e098:	f023 0210 	bic.w	r2, r3, #16
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	699b      	ldr	r3, [r3, #24]
 800e0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	4b34      	ldr	r3, [pc, #208]	; (800e180 <TIM_OC2_SetConfig+0xfc>)
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	021b      	lsls	r3, r3, #8
 800e0c2:	68fa      	ldr	r2, [r7, #12]
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	f023 0320 	bic.w	r3, r3, #32
 800e0ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	689b      	ldr	r3, [r3, #8]
 800e0d4:	011b      	lsls	r3, r3, #4
 800e0d6:	697a      	ldr	r2, [r7, #20]
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4a29      	ldr	r2, [pc, #164]	; (800e184 <TIM_OC2_SetConfig+0x100>)
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	d003      	beq.n	800e0ec <TIM_OC2_SetConfig+0x68>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4a28      	ldr	r2, [pc, #160]	; (800e188 <TIM_OC2_SetConfig+0x104>)
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d10d      	bne.n	800e108 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	011b      	lsls	r3, r3, #4
 800e0fa:	697a      	ldr	r2, [r7, #20]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e106:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4a1e      	ldr	r2, [pc, #120]	; (800e184 <TIM_OC2_SetConfig+0x100>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d00f      	beq.n	800e130 <TIM_OC2_SetConfig+0xac>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	4a1d      	ldr	r2, [pc, #116]	; (800e188 <TIM_OC2_SetConfig+0x104>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d00b      	beq.n	800e130 <TIM_OC2_SetConfig+0xac>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	4a1c      	ldr	r2, [pc, #112]	; (800e18c <TIM_OC2_SetConfig+0x108>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d007      	beq.n	800e130 <TIM_OC2_SetConfig+0xac>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4a1b      	ldr	r2, [pc, #108]	; (800e190 <TIM_OC2_SetConfig+0x10c>)
 800e124:	4293      	cmp	r3, r2
 800e126:	d003      	beq.n	800e130 <TIM_OC2_SetConfig+0xac>
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4a1a      	ldr	r2, [pc, #104]	; (800e194 <TIM_OC2_SetConfig+0x110>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d113      	bne.n	800e158 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e13e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	695b      	ldr	r3, [r3, #20]
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	693a      	ldr	r2, [r7, #16]
 800e148:	4313      	orrs	r3, r2
 800e14a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	693a      	ldr	r2, [r7, #16]
 800e154:	4313      	orrs	r3, r2
 800e156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	693a      	ldr	r2, [r7, #16]
 800e15c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	685a      	ldr	r2, [r3, #4]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	697a      	ldr	r2, [r7, #20]
 800e170:	621a      	str	r2, [r3, #32]
}
 800e172:	bf00      	nop
 800e174:	371c      	adds	r7, #28
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	feff8fff 	.word	0xfeff8fff
 800e184:	40010000 	.word	0x40010000
 800e188:	40010400 	.word	0x40010400
 800e18c:	40014000 	.word	0x40014000
 800e190:	40014400 	.word	0x40014400
 800e194:	40014800 	.word	0x40014800

0800e198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e198:	b480      	push	{r7}
 800e19a:	b087      	sub	sp, #28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a1b      	ldr	r3, [r3, #32]
 800e1a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6a1b      	ldr	r3, [r3, #32]
 800e1ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	69db      	ldr	r3, [r3, #28]
 800e1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	4b33      	ldr	r3, [pc, #204]	; (800e290 <TIM_OC3_SetConfig+0xf8>)
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f023 0303 	bic.w	r3, r3, #3
 800e1ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	68fa      	ldr	r2, [r7, #12]
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	021b      	lsls	r3, r3, #8
 800e1e8:	697a      	ldr	r2, [r7, #20]
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a28      	ldr	r2, [pc, #160]	; (800e294 <TIM_OC3_SetConfig+0xfc>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d003      	beq.n	800e1fe <TIM_OC3_SetConfig+0x66>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a27      	ldr	r2, [pc, #156]	; (800e298 <TIM_OC3_SetConfig+0x100>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d10d      	bne.n	800e21a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	021b      	lsls	r3, r3, #8
 800e20c:	697a      	ldr	r2, [r7, #20]
 800e20e:	4313      	orrs	r3, r2
 800e210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4a1d      	ldr	r2, [pc, #116]	; (800e294 <TIM_OC3_SetConfig+0xfc>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d00f      	beq.n	800e242 <TIM_OC3_SetConfig+0xaa>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	4a1c      	ldr	r2, [pc, #112]	; (800e298 <TIM_OC3_SetConfig+0x100>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d00b      	beq.n	800e242 <TIM_OC3_SetConfig+0xaa>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4a1b      	ldr	r2, [pc, #108]	; (800e29c <TIM_OC3_SetConfig+0x104>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d007      	beq.n	800e242 <TIM_OC3_SetConfig+0xaa>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	4a1a      	ldr	r2, [pc, #104]	; (800e2a0 <TIM_OC3_SetConfig+0x108>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d003      	beq.n	800e242 <TIM_OC3_SetConfig+0xaa>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4a19      	ldr	r2, [pc, #100]	; (800e2a4 <TIM_OC3_SetConfig+0x10c>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d113      	bne.n	800e26a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	695b      	ldr	r3, [r3, #20]
 800e256:	011b      	lsls	r3, r3, #4
 800e258:	693a      	ldr	r2, [r7, #16]
 800e25a:	4313      	orrs	r3, r2
 800e25c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	699b      	ldr	r3, [r3, #24]
 800e262:	011b      	lsls	r3, r3, #4
 800e264:	693a      	ldr	r2, [r7, #16]
 800e266:	4313      	orrs	r3, r2
 800e268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	693a      	ldr	r2, [r7, #16]
 800e26e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	685a      	ldr	r2, [r3, #4]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	697a      	ldr	r2, [r7, #20]
 800e282:	621a      	str	r2, [r3, #32]
}
 800e284:	bf00      	nop
 800e286:	371c      	adds	r7, #28
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	fffeff8f 	.word	0xfffeff8f
 800e294:	40010000 	.word	0x40010000
 800e298:	40010400 	.word	0x40010400
 800e29c:	40014000 	.word	0x40014000
 800e2a0:	40014400 	.word	0x40014400
 800e2a4:	40014800 	.word	0x40014800

0800e2a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b087      	sub	sp, #28
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a1b      	ldr	r3, [r3, #32]
 800e2b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a1b      	ldr	r3, [r3, #32]
 800e2bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	69db      	ldr	r3, [r3, #28]
 800e2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	4b24      	ldr	r3, [pc, #144]	; (800e364 <TIM_OC4_SetConfig+0xbc>)
 800e2d4:	4013      	ands	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	021b      	lsls	r3, r3, #8
 800e2e6:	68fa      	ldr	r2, [r7, #12]
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e2f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	031b      	lsls	r3, r3, #12
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4a19      	ldr	r2, [pc, #100]	; (800e368 <TIM_OC4_SetConfig+0xc0>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d00f      	beq.n	800e328 <TIM_OC4_SetConfig+0x80>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	4a18      	ldr	r2, [pc, #96]	; (800e36c <TIM_OC4_SetConfig+0xc4>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d00b      	beq.n	800e328 <TIM_OC4_SetConfig+0x80>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4a17      	ldr	r2, [pc, #92]	; (800e370 <TIM_OC4_SetConfig+0xc8>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d007      	beq.n	800e328 <TIM_OC4_SetConfig+0x80>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	4a16      	ldr	r2, [pc, #88]	; (800e374 <TIM_OC4_SetConfig+0xcc>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d003      	beq.n	800e328 <TIM_OC4_SetConfig+0x80>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	4a15      	ldr	r2, [pc, #84]	; (800e378 <TIM_OC4_SetConfig+0xd0>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d109      	bne.n	800e33c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e32e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	695b      	ldr	r3, [r3, #20]
 800e334:	019b      	lsls	r3, r3, #6
 800e336:	697a      	ldr	r2, [r7, #20]
 800e338:	4313      	orrs	r3, r2
 800e33a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	697a      	ldr	r2, [r7, #20]
 800e340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	68fa      	ldr	r2, [r7, #12]
 800e346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	685a      	ldr	r2, [r3, #4]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	693a      	ldr	r2, [r7, #16]
 800e354:	621a      	str	r2, [r3, #32]
}
 800e356:	bf00      	nop
 800e358:	371c      	adds	r7, #28
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	feff8fff 	.word	0xfeff8fff
 800e368:	40010000 	.word	0x40010000
 800e36c:	40010400 	.word	0x40010400
 800e370:	40014000 	.word	0x40014000
 800e374:	40014400 	.word	0x40014400
 800e378:	40014800 	.word	0x40014800

0800e37c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b087      	sub	sp, #28
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6a1b      	ldr	r3, [r3, #32]
 800e38a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a1b      	ldr	r3, [r3, #32]
 800e390:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e3a4:	68fa      	ldr	r2, [r7, #12]
 800e3a6:	4b21      	ldr	r3, [pc, #132]	; (800e42c <TIM_OC5_SetConfig+0xb0>)
 800e3a8:	4013      	ands	r3, r2
 800e3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e3bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	689b      	ldr	r3, [r3, #8]
 800e3c2:	041b      	lsls	r3, r3, #16
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4a18      	ldr	r2, [pc, #96]	; (800e430 <TIM_OC5_SetConfig+0xb4>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d00f      	beq.n	800e3f2 <TIM_OC5_SetConfig+0x76>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	4a17      	ldr	r2, [pc, #92]	; (800e434 <TIM_OC5_SetConfig+0xb8>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d00b      	beq.n	800e3f2 <TIM_OC5_SetConfig+0x76>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4a16      	ldr	r2, [pc, #88]	; (800e438 <TIM_OC5_SetConfig+0xbc>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d007      	beq.n	800e3f2 <TIM_OC5_SetConfig+0x76>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4a15      	ldr	r2, [pc, #84]	; (800e43c <TIM_OC5_SetConfig+0xc0>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d003      	beq.n	800e3f2 <TIM_OC5_SetConfig+0x76>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	4a14      	ldr	r2, [pc, #80]	; (800e440 <TIM_OC5_SetConfig+0xc4>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d109      	bne.n	800e406 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e3f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	695b      	ldr	r3, [r3, #20]
 800e3fe:	021b      	lsls	r3, r3, #8
 800e400:	697a      	ldr	r2, [r7, #20]
 800e402:	4313      	orrs	r3, r2
 800e404:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	697a      	ldr	r2, [r7, #20]
 800e40a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	685a      	ldr	r2, [r3, #4]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	693a      	ldr	r2, [r7, #16]
 800e41e:	621a      	str	r2, [r3, #32]
}
 800e420:	bf00      	nop
 800e422:	371c      	adds	r7, #28
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr
 800e42c:	fffeff8f 	.word	0xfffeff8f
 800e430:	40010000 	.word	0x40010000
 800e434:	40010400 	.word	0x40010400
 800e438:	40014000 	.word	0x40014000
 800e43c:	40014400 	.word	0x40014400
 800e440:	40014800 	.word	0x40014800

0800e444 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e444:	b480      	push	{r7}
 800e446:	b087      	sub	sp, #28
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6a1b      	ldr	r3, [r3, #32]
 800e452:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6a1b      	ldr	r3, [r3, #32]
 800e458:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e46c:	68fa      	ldr	r2, [r7, #12]
 800e46e:	4b22      	ldr	r3, [pc, #136]	; (800e4f8 <TIM_OC6_SetConfig+0xb4>)
 800e470:	4013      	ands	r3, r2
 800e472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	021b      	lsls	r3, r3, #8
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	4313      	orrs	r3, r2
 800e47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	051b      	lsls	r3, r3, #20
 800e48e:	693a      	ldr	r2, [r7, #16]
 800e490:	4313      	orrs	r3, r2
 800e492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	4a19      	ldr	r2, [pc, #100]	; (800e4fc <TIM_OC6_SetConfig+0xb8>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d00f      	beq.n	800e4bc <TIM_OC6_SetConfig+0x78>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	4a18      	ldr	r2, [pc, #96]	; (800e500 <TIM_OC6_SetConfig+0xbc>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d00b      	beq.n	800e4bc <TIM_OC6_SetConfig+0x78>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4a17      	ldr	r2, [pc, #92]	; (800e504 <TIM_OC6_SetConfig+0xc0>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d007      	beq.n	800e4bc <TIM_OC6_SetConfig+0x78>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4a16      	ldr	r2, [pc, #88]	; (800e508 <TIM_OC6_SetConfig+0xc4>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d003      	beq.n	800e4bc <TIM_OC6_SetConfig+0x78>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	4a15      	ldr	r2, [pc, #84]	; (800e50c <TIM_OC6_SetConfig+0xc8>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d109      	bne.n	800e4d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e4c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	695b      	ldr	r3, [r3, #20]
 800e4c8:	029b      	lsls	r3, r3, #10
 800e4ca:	697a      	ldr	r2, [r7, #20]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	685a      	ldr	r2, [r3, #4]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	693a      	ldr	r2, [r7, #16]
 800e4e8:	621a      	str	r2, [r3, #32]
}
 800e4ea:	bf00      	nop
 800e4ec:	371c      	adds	r7, #28
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	feff8fff 	.word	0xfeff8fff
 800e4fc:	40010000 	.word	0x40010000
 800e500:	40010400 	.word	0x40010400
 800e504:	40014000 	.word	0x40014000
 800e508:	40014400 	.word	0x40014400
 800e50c:	40014800 	.word	0x40014800

0800e510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e510:	b480      	push	{r7}
 800e512:	b087      	sub	sp, #28
 800e514:	af00      	add	r7, sp, #0
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	60b9      	str	r1, [r7, #8]
 800e51a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6a1b      	ldr	r3, [r3, #32]
 800e520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6a1b      	ldr	r3, [r3, #32]
 800e526:	f023 0201 	bic.w	r2, r3, #1
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	699b      	ldr	r3, [r3, #24]
 800e532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e53a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	011b      	lsls	r3, r3, #4
 800e540:	693a      	ldr	r2, [r7, #16]
 800e542:	4313      	orrs	r3, r2
 800e544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	f023 030a 	bic.w	r3, r3, #10
 800e54c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e54e:	697a      	ldr	r2, [r7, #20]
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	4313      	orrs	r3, r2
 800e554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	693a      	ldr	r2, [r7, #16]
 800e55a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	621a      	str	r2, [r3, #32]
}
 800e562:	bf00      	nop
 800e564:	371c      	adds	r7, #28
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr

0800e56e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e56e:	b480      	push	{r7}
 800e570:	b087      	sub	sp, #28
 800e572:	af00      	add	r7, sp, #0
 800e574:	60f8      	str	r0, [r7, #12]
 800e576:	60b9      	str	r1, [r7, #8]
 800e578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6a1b      	ldr	r3, [r3, #32]
 800e57e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6a1b      	ldr	r3, [r3, #32]
 800e584:	f023 0210 	bic.w	r2, r3, #16
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	699b      	ldr	r3, [r3, #24]
 800e590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	031b      	lsls	r3, r3, #12
 800e59e:	693a      	ldr	r2, [r7, #16]
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e5aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	011b      	lsls	r3, r3, #4
 800e5b0:	697a      	ldr	r2, [r7, #20]
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	693a      	ldr	r2, [r7, #16]
 800e5ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	697a      	ldr	r2, [r7, #20]
 800e5c0:	621a      	str	r2, [r3, #32]
}
 800e5c2:	bf00      	nop
 800e5c4:	371c      	adds	r7, #28
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5cc:	4770      	bx	lr
	...

0800e5d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b085      	sub	sp, #20
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	4b09      	ldr	r3, [pc, #36]	; (800e608 <TIM_ITRx_SetConfig+0x38>)
 800e5e4:	4013      	ands	r3, r2
 800e5e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e5e8:	683a      	ldr	r2, [r7, #0]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	f043 0307 	orr.w	r3, r3, #7
 800e5f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	68fa      	ldr	r2, [r7, #12]
 800e5f8:	609a      	str	r2, [r3, #8]
}
 800e5fa:	bf00      	nop
 800e5fc:	3714      	adds	r7, #20
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	ffcfff8f 	.word	0xffcfff8f

0800e60c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b087      	sub	sp, #28
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	607a      	str	r2, [r7, #4]
 800e618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	021a      	lsls	r2, r3, #8
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	431a      	orrs	r2, r3
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	4313      	orrs	r3, r2
 800e634:	697a      	ldr	r2, [r7, #20]
 800e636:	4313      	orrs	r3, r2
 800e638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	697a      	ldr	r2, [r7, #20]
 800e63e:	609a      	str	r2, [r3, #8]
}
 800e640:	bf00      	nop
 800e642:	371c      	adds	r7, #28
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b087      	sub	sp, #28
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	f003 031f 	and.w	r3, r3, #31
 800e65e:	2201      	movs	r2, #1
 800e660:	fa02 f303 	lsl.w	r3, r2, r3
 800e664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6a1a      	ldr	r2, [r3, #32]
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	43db      	mvns	r3, r3
 800e66e:	401a      	ands	r2, r3
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6a1a      	ldr	r2, [r3, #32]
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	f003 031f 	and.w	r3, r3, #31
 800e67e:	6879      	ldr	r1, [r7, #4]
 800e680:	fa01 f303 	lsl.w	r3, r1, r3
 800e684:	431a      	orrs	r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	621a      	str	r2, [r3, #32]
}
 800e68a:	bf00      	nop
 800e68c:	371c      	adds	r7, #28
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
	...

0800e698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e698:	b480      	push	{r7}
 800e69a:	b085      	sub	sp, #20
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d101      	bne.n	800e6b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e6ac:	2302      	movs	r3, #2
 800e6ae:	e06d      	b.n	800e78c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2202      	movs	r2, #2
 800e6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a30      	ldr	r2, [pc, #192]	; (800e798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d004      	beq.n	800e6e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	4a2f      	ldr	r2, [pc, #188]	; (800e79c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d108      	bne.n	800e6f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e6ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	4313      	orrs	r3, r2
 800e706:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a20      	ldr	r2, [pc, #128]	; (800e798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d022      	beq.n	800e760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e722:	d01d      	beq.n	800e760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a1d      	ldr	r2, [pc, #116]	; (800e7a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d018      	beq.n	800e760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	4a1c      	ldr	r2, [pc, #112]	; (800e7a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d013      	beq.n	800e760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a1a      	ldr	r2, [pc, #104]	; (800e7a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d00e      	beq.n	800e760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4a15      	ldr	r2, [pc, #84]	; (800e79c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d009      	beq.n	800e760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a16      	ldr	r2, [pc, #88]	; (800e7ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d004      	beq.n	800e760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a15      	ldr	r2, [pc, #84]	; (800e7b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d10c      	bne.n	800e77a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	68ba      	ldr	r2, [r7, #8]
 800e76e:	4313      	orrs	r3, r2
 800e770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2201      	movs	r2, #1
 800e77e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3714      	adds	r7, #20
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr
 800e798:	40010000 	.word	0x40010000
 800e79c:	40010400 	.word	0x40010400
 800e7a0:	40000400 	.word	0x40000400
 800e7a4:	40000800 	.word	0x40000800
 800e7a8:	40000c00 	.word	0x40000c00
 800e7ac:	40001800 	.word	0x40001800
 800e7b0:	40014000 	.word	0x40014000

0800e7b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b085      	sub	sp, #20
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d101      	bne.n	800e7d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	e065      	b.n	800e89c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	4313      	orrs	r3, r2
 800e800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4313      	orrs	r3, r2
 800e80e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	691b      	ldr	r3, [r3, #16]
 800e81a:	4313      	orrs	r3, r2
 800e81c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	695b      	ldr	r3, [r3, #20]
 800e828:	4313      	orrs	r3, r2
 800e82a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e836:	4313      	orrs	r3, r2
 800e838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	041b      	lsls	r3, r3, #16
 800e846:	4313      	orrs	r3, r2
 800e848:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a16      	ldr	r2, [pc, #88]	; (800e8a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d004      	beq.n	800e85e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a14      	ldr	r2, [pc, #80]	; (800e8ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d115      	bne.n	800e88a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e868:	051b      	lsls	r3, r3, #20
 800e86a:	4313      	orrs	r3, r2
 800e86c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	69db      	ldr	r3, [r3, #28]
 800e878:	4313      	orrs	r3, r2
 800e87a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	6a1b      	ldr	r3, [r3, #32]
 800e886:	4313      	orrs	r3, r2
 800e888:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	68fa      	ldr	r2, [r7, #12]
 800e890:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3714      	adds	r7, #20
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	40010000 	.word	0x40010000
 800e8ac:	40010400 	.word	0x40010400

0800e8b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e8b8:	bf00      	nop
 800e8ba:	370c      	adds	r7, #12
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e8cc:	bf00      	nop
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d101      	bne.n	800e8fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e042      	b.n	800e984 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e904:	2b00      	cmp	r3, #0
 800e906:	d106      	bne.n	800e916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f7f4 fb99 	bl	8003048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2224      	movs	r2, #36	; 0x24
 800e91a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f022 0201 	bic.w	r2, r2, #1
 800e92c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f001 fb0c 	bl	800ff54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 fda1 	bl	800f484 <UART_SetConfig>
 800e942:	4603      	mov	r3, r0
 800e944:	2b01      	cmp	r3, #1
 800e946:	d101      	bne.n	800e94c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e948:	2301      	movs	r3, #1
 800e94a:	e01b      	b.n	800e984 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	685a      	ldr	r2, [r3, #4]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e95a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	689a      	ldr	r2, [r3, #8]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e96a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f042 0201 	orr.w	r2, r2, #1
 800e97a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f001 fb8b 	bl	8010098 <UART_CheckIdleState>
 800e982:	4603      	mov	r3, r0
}
 800e984:	4618      	mov	r0, r3
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b08a      	sub	sp, #40	; 0x28
 800e990:	af02      	add	r7, sp, #8
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	60b9      	str	r1, [r7, #8]
 800e996:	603b      	str	r3, [r7, #0]
 800e998:	4613      	mov	r3, r2
 800e99a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9a2:	2b20      	cmp	r3, #32
 800e9a4:	d17b      	bne.n	800ea9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d002      	beq.n	800e9b2 <HAL_UART_Transmit+0x26>
 800e9ac:	88fb      	ldrh	r3, [r7, #6]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d101      	bne.n	800e9b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e074      	b.n	800eaa0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2221      	movs	r2, #33	; 0x21
 800e9c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e9c6:	f7f4 fe79 	bl	80036bc <HAL_GetTick>
 800e9ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	88fa      	ldrh	r2, [r7, #6]
 800e9d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	88fa      	ldrh	r2, [r7, #6]
 800e9d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9e4:	d108      	bne.n	800e9f8 <HAL_UART_Transmit+0x6c>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	691b      	ldr	r3, [r3, #16]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d104      	bne.n	800e9f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	61bb      	str	r3, [r7, #24]
 800e9f6:	e003      	b.n	800ea00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ea00:	e030      	b.n	800ea64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	2180      	movs	r1, #128	; 0x80
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f001 fbed 	bl	80101ec <UART_WaitOnFlagUntilTimeout>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d005      	beq.n	800ea24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2220      	movs	r2, #32
 800ea1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ea20:	2303      	movs	r3, #3
 800ea22:	e03d      	b.n	800eaa0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10b      	bne.n	800ea42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	3302      	adds	r3, #2
 800ea3e:	61bb      	str	r3, [r7, #24]
 800ea40:	e007      	b.n	800ea52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	781a      	ldrb	r2, [r3, #0]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	3b01      	subs	r3, #1
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d1c8      	bne.n	800ea02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	9300      	str	r3, [sp, #0]
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	2200      	movs	r2, #0
 800ea78:	2140      	movs	r1, #64	; 0x40
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f001 fbb6 	bl	80101ec <UART_WaitOnFlagUntilTimeout>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d005      	beq.n	800ea92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2220      	movs	r2, #32
 800ea8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ea8e:	2303      	movs	r3, #3
 800ea90:	e006      	b.n	800eaa0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2220      	movs	r2, #32
 800ea96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	e000      	b.n	800eaa0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ea9e:	2302      	movs	r3, #2
  }
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3720      	adds	r7, #32
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b08a      	sub	sp, #40	; 0x28
 800eaac:	af02      	add	r7, sp, #8
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	603b      	str	r3, [r7, #0]
 800eab4:	4613      	mov	r3, r2
 800eab6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eabe:	2b20      	cmp	r3, #32
 800eac0:	f040 80b5 	bne.w	800ec2e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d002      	beq.n	800ead0 <HAL_UART_Receive+0x28>
 800eaca:	88fb      	ldrh	r3, [r7, #6]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ead0:	2301      	movs	r3, #1
 800ead2:	e0ad      	b.n	800ec30 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2222      	movs	r2, #34	; 0x22
 800eae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eaea:	f7f4 fde7 	bl	80036bc <HAL_GetTick>
 800eaee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	88fa      	ldrh	r2, [r7, #6]
 800eaf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	88fa      	ldrh	r2, [r7, #6]
 800eafc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	689b      	ldr	r3, [r3, #8]
 800eb04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb08:	d10e      	bne.n	800eb28 <HAL_UART_Receive+0x80>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	691b      	ldr	r3, [r3, #16]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d105      	bne.n	800eb1e <HAL_UART_Receive+0x76>
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f240 12ff 	movw	r2, #511	; 0x1ff
 800eb18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb1c:	e02d      	b.n	800eb7a <HAL_UART_Receive+0xd2>
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	22ff      	movs	r2, #255	; 0xff
 800eb22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb26:	e028      	b.n	800eb7a <HAL_UART_Receive+0xd2>
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10d      	bne.n	800eb4c <HAL_UART_Receive+0xa4>
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d104      	bne.n	800eb42 <HAL_UART_Receive+0x9a>
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	22ff      	movs	r2, #255	; 0xff
 800eb3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb40:	e01b      	b.n	800eb7a <HAL_UART_Receive+0xd2>
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	227f      	movs	r2, #127	; 0x7f
 800eb46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb4a:	e016      	b.n	800eb7a <HAL_UART_Receive+0xd2>
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	689b      	ldr	r3, [r3, #8]
 800eb50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb54:	d10d      	bne.n	800eb72 <HAL_UART_Receive+0xca>
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	691b      	ldr	r3, [r3, #16]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d104      	bne.n	800eb68 <HAL_UART_Receive+0xc0>
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	227f      	movs	r2, #127	; 0x7f
 800eb62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb66:	e008      	b.n	800eb7a <HAL_UART_Receive+0xd2>
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	223f      	movs	r2, #63	; 0x3f
 800eb6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb70:	e003      	b.n	800eb7a <HAL_UART_Receive+0xd2>
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb80:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	689b      	ldr	r3, [r3, #8]
 800eb86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb8a:	d108      	bne.n	800eb9e <HAL_UART_Receive+0xf6>
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	691b      	ldr	r3, [r3, #16]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d104      	bne.n	800eb9e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800eb94:	2300      	movs	r3, #0
 800eb96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	61bb      	str	r3, [r7, #24]
 800eb9c:	e003      	b.n	800eba6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eba2:	2300      	movs	r3, #0
 800eba4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800eba6:	e036      	b.n	800ec16 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	2120      	movs	r1, #32
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f001 fb1a 	bl	80101ec <UART_WaitOnFlagUntilTimeout>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d005      	beq.n	800ebca <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2220      	movs	r2, #32
 800ebc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800ebc6:	2303      	movs	r3, #3
 800ebc8:	e032      	b.n	800ec30 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10c      	bne.n	800ebea <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	8a7b      	ldrh	r3, [r7, #18]
 800ebda:	4013      	ands	r3, r2
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ebe2:	69bb      	ldr	r3, [r7, #24]
 800ebe4:	3302      	adds	r3, #2
 800ebe6:	61bb      	str	r3, [r7, #24]
 800ebe8:	e00c      	b.n	800ec04 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf0:	b2da      	uxtb	r2, r3
 800ebf2:	8a7b      	ldrh	r3, [r7, #18]
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	4013      	ands	r3, r2
 800ebf8:	b2da      	uxtb	r2, r3
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	3301      	adds	r3, #1
 800ec02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1c2      	bne.n	800eba8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2220      	movs	r2, #32
 800ec26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	e000      	b.n	800ec30 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800ec2e:	2302      	movs	r3, #2
  }
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3720      	adds	r7, #32
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b08a      	sub	sp, #40	; 0x28
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	4613      	mov	r3, r2
 800ec44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec4c:	2b20      	cmp	r3, #32
 800ec4e:	d137      	bne.n	800ecc0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d002      	beq.n	800ec5c <HAL_UART_Receive_IT+0x24>
 800ec56:	88fb      	ldrh	r3, [r7, #6]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d101      	bne.n	800ec60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e030      	b.n	800ecc2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2200      	movs	r2, #0
 800ec64:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a18      	ldr	r2, [pc, #96]	; (800eccc <HAL_UART_Receive_IT+0x94>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d01f      	beq.n	800ecb0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d018      	beq.n	800ecb0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	e853 3f00 	ldrex	r3, [r3]
 800ec8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ec92:	627b      	str	r3, [r7, #36]	; 0x24
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	461a      	mov	r2, r3
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9c:	623b      	str	r3, [r7, #32]
 800ec9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca0:	69f9      	ldr	r1, [r7, #28]
 800eca2:	6a3a      	ldr	r2, [r7, #32]
 800eca4:	e841 2300 	strex	r3, r2, [r1]
 800eca8:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1e6      	bne.n	800ec7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ecb0:	88fb      	ldrh	r3, [r7, #6]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	68b9      	ldr	r1, [r7, #8]
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f001 fb06 	bl	80102c8 <UART_Start_Receive_IT>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	e000      	b.n	800ecc2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ecc0:	2302      	movs	r3, #2
  }
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3728      	adds	r7, #40	; 0x28
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	58000c00 	.word	0x58000c00

0800ecd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b0ba      	sub	sp, #232	; 0xe8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	69db      	ldr	r3, [r3, #28]
 800ecde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ecf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ecfa:	f640 030f 	movw	r3, #2063	; 0x80f
 800ecfe:	4013      	ands	r3, r2
 800ed00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ed04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d11b      	bne.n	800ed44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ed0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed10:	f003 0320 	and.w	r3, r3, #32
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d015      	beq.n	800ed44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ed18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed1c:	f003 0320 	and.w	r3, r3, #32
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d105      	bne.n	800ed30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ed24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d009      	beq.n	800ed44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f000 8377 	beq.w	800f428 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	4798      	blx	r3
      }
      return;
 800ed42:	e371      	b.n	800f428 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ed44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f000 8123 	beq.w	800ef94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ed4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ed52:	4b8d      	ldr	r3, [pc, #564]	; (800ef88 <HAL_UART_IRQHandler+0x2b8>)
 800ed54:	4013      	ands	r3, r2
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ed5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ed5e:	4b8b      	ldr	r3, [pc, #556]	; (800ef8c <HAL_UART_IRQHandler+0x2bc>)
 800ed60:	4013      	ands	r3, r2
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 8116 	beq.w	800ef94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed6c:	f003 0301 	and.w	r3, r3, #1
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d011      	beq.n	800ed98 <HAL_UART_IRQHandler+0xc8>
 800ed74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00b      	beq.n	800ed98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2201      	movs	r2, #1
 800ed86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed8e:	f043 0201 	orr.w	r2, r3, #1
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed9c:	f003 0302 	and.w	r3, r3, #2
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d011      	beq.n	800edc8 <HAL_UART_IRQHandler+0xf8>
 800eda4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eda8:	f003 0301 	and.w	r3, r3, #1
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00b      	beq.n	800edc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2202      	movs	r2, #2
 800edb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edbe:	f043 0204 	orr.w	r2, r3, #4
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800edc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edcc:	f003 0304 	and.w	r3, r3, #4
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d011      	beq.n	800edf8 <HAL_UART_IRQHandler+0x128>
 800edd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edd8:	f003 0301 	and.w	r3, r3, #1
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d00b      	beq.n	800edf8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2204      	movs	r2, #4
 800ede6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edee:	f043 0202 	orr.w	r2, r3, #2
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800edf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edfc:	f003 0308 	and.w	r3, r3, #8
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d017      	beq.n	800ee34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ee04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee08:	f003 0320 	and.w	r3, r3, #32
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d105      	bne.n	800ee1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ee10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ee14:	4b5c      	ldr	r3, [pc, #368]	; (800ef88 <HAL_UART_IRQHandler+0x2b8>)
 800ee16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d00b      	beq.n	800ee34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2208      	movs	r2, #8
 800ee22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee2a:	f043 0208 	orr.w	r2, r3, #8
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ee34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d012      	beq.n	800ee66 <HAL_UART_IRQHandler+0x196>
 800ee40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00c      	beq.n	800ee66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee5c:	f043 0220 	orr.w	r2, r3, #32
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f000 82dd 	beq.w	800f42c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ee72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee76:	f003 0320 	and.w	r3, r3, #32
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d013      	beq.n	800eea6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ee7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee82:	f003 0320 	and.w	r3, r3, #32
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d105      	bne.n	800ee96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ee8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d007      	beq.n	800eea6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eeac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	689b      	ldr	r3, [r3, #8]
 800eeb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeba:	2b40      	cmp	r3, #64	; 0x40
 800eebc:	d005      	beq.n	800eeca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d054      	beq.n	800ef74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f001 fb1e 	bl	801050c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeda:	2b40      	cmp	r3, #64	; 0x40
 800eedc:	d146      	bne.n	800ef6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	3308      	adds	r3, #8
 800eee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eeec:	e853 3f00 	ldrex	r3, [r3]
 800eef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800eef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eefc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	3308      	adds	r3, #8
 800ef06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ef0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ef0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ef16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ef1a:	e841 2300 	strex	r3, r2, [r1]
 800ef1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ef22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1d9      	bne.n	800eede <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d017      	beq.n	800ef64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef3a:	4a15      	ldr	r2, [pc, #84]	; (800ef90 <HAL_UART_IRQHandler+0x2c0>)
 800ef3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7f7 fdc5 	bl	8006ad4 <HAL_DMA_Abort_IT>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d019      	beq.n	800ef84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ef5e:	4610      	mov	r0, r2
 800ef60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef62:	e00f      	b.n	800ef84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 fa77 	bl	800f458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef6a:	e00b      	b.n	800ef84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 fa73 	bl	800f458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef72:	e007      	b.n	800ef84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f000 fa6f 	bl	800f458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ef82:	e253      	b.n	800f42c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef84:	bf00      	nop
    return;
 800ef86:	e251      	b.n	800f42c <HAL_UART_IRQHandler+0x75c>
 800ef88:	10000001 	.word	0x10000001
 800ef8c:	04000120 	.word	0x04000120
 800ef90:	080105d9 	.word	0x080105d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	f040 81e7 	bne.w	800f36c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ef9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efa2:	f003 0310 	and.w	r3, r3, #16
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	f000 81e0 	beq.w	800f36c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800efac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efb0:	f003 0310 	and.w	r3, r3, #16
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	f000 81d9 	beq.w	800f36c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	2210      	movs	r2, #16
 800efc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	689b      	ldr	r3, [r3, #8]
 800efc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efcc:	2b40      	cmp	r3, #64	; 0x40
 800efce:	f040 8151 	bne.w	800f274 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	4a96      	ldr	r2, [pc, #600]	; (800f234 <HAL_UART_IRQHandler+0x564>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d068      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a93      	ldr	r2, [pc, #588]	; (800f238 <HAL_UART_IRQHandler+0x568>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d061      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4a91      	ldr	r2, [pc, #580]	; (800f23c <HAL_UART_IRQHandler+0x56c>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d05a      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a8e      	ldr	r2, [pc, #568]	; (800f240 <HAL_UART_IRQHandler+0x570>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d053      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	4a8c      	ldr	r2, [pc, #560]	; (800f244 <HAL_UART_IRQHandler+0x574>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d04c      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	4a89      	ldr	r2, [pc, #548]	; (800f248 <HAL_UART_IRQHandler+0x578>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d045      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	4a87      	ldr	r2, [pc, #540]	; (800f24c <HAL_UART_IRQHandler+0x57c>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d03e      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a84      	ldr	r2, [pc, #528]	; (800f250 <HAL_UART_IRQHandler+0x580>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d037      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	4a82      	ldr	r2, [pc, #520]	; (800f254 <HAL_UART_IRQHandler+0x584>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d030      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4a7f      	ldr	r2, [pc, #508]	; (800f258 <HAL_UART_IRQHandler+0x588>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d029      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4a7d      	ldr	r2, [pc, #500]	; (800f25c <HAL_UART_IRQHandler+0x58c>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d022      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	4a7a      	ldr	r2, [pc, #488]	; (800f260 <HAL_UART_IRQHandler+0x590>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d01b      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4a78      	ldr	r2, [pc, #480]	; (800f264 <HAL_UART_IRQHandler+0x594>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d014      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a75      	ldr	r2, [pc, #468]	; (800f268 <HAL_UART_IRQHandler+0x598>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d00d      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4a73      	ldr	r2, [pc, #460]	; (800f26c <HAL_UART_IRQHandler+0x59c>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d006      	beq.n	800f0b2 <HAL_UART_IRQHandler+0x3e2>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a70      	ldr	r2, [pc, #448]	; (800f270 <HAL_UART_IRQHandler+0x5a0>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d106      	bne.n	800f0c0 <HAL_UART_IRQHandler+0x3f0>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	e005      	b.n	800f0cc <HAL_UART_IRQHandler+0x3fc>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f0d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	f000 81ab 	beq.w	800f430 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f0e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	f080 81a3 	bcs.w	800f430 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f0f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0fa:	69db      	ldr	r3, [r3, #28]
 800f0fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f100:	f000 8087 	beq.w	800f212 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f10c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f110:	e853 3f00 	ldrex	r3, [r3]
 800f114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f11c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	461a      	mov	r2, r3
 800f12a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f12e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f132:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f136:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f13a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f13e:	e841 2300 	strex	r3, r2, [r1]
 800f142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d1da      	bne.n	800f104 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3308      	adds	r3, #8
 800f154:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f158:	e853 3f00 	ldrex	r3, [r3]
 800f15c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f15e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f160:	f023 0301 	bic.w	r3, r3, #1
 800f164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	3308      	adds	r3, #8
 800f16e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f172:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f176:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f178:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f17a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f17e:	e841 2300 	strex	r3, r2, [r1]
 800f182:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1e1      	bne.n	800f14e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	3308      	adds	r3, #8
 800f190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f194:	e853 3f00 	ldrex	r3, [r3]
 800f198:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f19a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f19c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	3308      	adds	r3, #8
 800f1aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f1ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f1b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f1b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f1b6:	e841 2300 	strex	r3, r2, [r1]
 800f1ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f1bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d1e3      	bne.n	800f18a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2220      	movs	r2, #32
 800f1c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1d8:	e853 3f00 	ldrex	r3, [r3]
 800f1dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f1de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1e0:	f023 0310 	bic.w	r3, r3, #16
 800f1e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f1f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f1f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f1f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f1fa:	e841 2300 	strex	r3, r2, [r1]
 800f1fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f202:	2b00      	cmp	r3, #0
 800f204:	d1e4      	bne.n	800f1d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7f7 f943 	bl	8006498 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2202      	movs	r2, #2
 800f216:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f224:	b29b      	uxth	r3, r3
 800f226:	1ad3      	subs	r3, r2, r3
 800f228:	b29b      	uxth	r3, r3
 800f22a:	4619      	mov	r1, r3
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 f91d 	bl	800f46c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f232:	e0fd      	b.n	800f430 <HAL_UART_IRQHandler+0x760>
 800f234:	40020010 	.word	0x40020010
 800f238:	40020028 	.word	0x40020028
 800f23c:	40020040 	.word	0x40020040
 800f240:	40020058 	.word	0x40020058
 800f244:	40020070 	.word	0x40020070
 800f248:	40020088 	.word	0x40020088
 800f24c:	400200a0 	.word	0x400200a0
 800f250:	400200b8 	.word	0x400200b8
 800f254:	40020410 	.word	0x40020410
 800f258:	40020428 	.word	0x40020428
 800f25c:	40020440 	.word	0x40020440
 800f260:	40020458 	.word	0x40020458
 800f264:	40020470 	.word	0x40020470
 800f268:	40020488 	.word	0x40020488
 800f26c:	400204a0 	.word	0x400204a0
 800f270:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f280:	b29b      	uxth	r3, r3
 800f282:	1ad3      	subs	r3, r2, r3
 800f284:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f28e:	b29b      	uxth	r3, r3
 800f290:	2b00      	cmp	r3, #0
 800f292:	f000 80cf 	beq.w	800f434 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f000 80ca 	beq.w	800f434 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a8:	e853 3f00 	ldrex	r3, [r3]
 800f2ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f2c2:	647b      	str	r3, [r7, #68]	; 0x44
 800f2c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2ca:	e841 2300 	strex	r3, r2, [r1]
 800f2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d1e4      	bne.n	800f2a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	3308      	adds	r3, #8
 800f2dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e0:	e853 3f00 	ldrex	r3, [r3]
 800f2e4:	623b      	str	r3, [r7, #32]
   return(result);
 800f2e6:	6a3a      	ldr	r2, [r7, #32]
 800f2e8:	4b55      	ldr	r3, [pc, #340]	; (800f440 <HAL_UART_IRQHandler+0x770>)
 800f2ea:	4013      	ands	r3, r2
 800f2ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	3308      	adds	r3, #8
 800f2f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f2fa:	633a      	str	r2, [r7, #48]	; 0x30
 800f2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f302:	e841 2300 	strex	r3, r2, [r1]
 800f306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d1e3      	bne.n	800f2d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2220      	movs	r2, #32
 800f312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2200      	movs	r2, #0
 800f31a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	e853 3f00 	ldrex	r3, [r3]
 800f32e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f023 0310 	bic.w	r3, r3, #16
 800f336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	461a      	mov	r2, r3
 800f340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f344:	61fb      	str	r3, [r7, #28]
 800f346:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f348:	69b9      	ldr	r1, [r7, #24]
 800f34a:	69fa      	ldr	r2, [r7, #28]
 800f34c:	e841 2300 	strex	r3, r2, [r1]
 800f350:	617b      	str	r3, [r7, #20]
   return(result);
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d1e4      	bne.n	800f322 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2202      	movs	r2, #2
 800f35c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f35e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f362:	4619      	mov	r1, r3
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 f881 	bl	800f46c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f36a:	e063      	b.n	800f434 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00e      	beq.n	800f396 <HAL_UART_IRQHandler+0x6c6>
 800f378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f37c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f380:	2b00      	cmp	r3, #0
 800f382:	d008      	beq.n	800f396 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f38c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f001 fe80 	bl	8011094 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f394:	e051      	b.n	800f43a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f39a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d014      	beq.n	800f3cc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f3a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d105      	bne.n	800f3ba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f3ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f3b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d008      	beq.n	800f3cc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d03a      	beq.n	800f438 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	4798      	blx	r3
    }
    return;
 800f3ca:	e035      	b.n	800f438 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d009      	beq.n	800f3ec <HAL_UART_IRQHandler+0x71c>
 800f3d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d003      	beq.n	800f3ec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f001 f90d 	bl	8010604 <UART_EndTransmit_IT>
    return;
 800f3ea:	e026      	b.n	800f43a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f3ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d009      	beq.n	800f40c <HAL_UART_IRQHandler+0x73c>
 800f3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f400:	2b00      	cmp	r3, #0
 800f402:	d003      	beq.n	800f40c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f001 fe59 	bl	80110bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f40a:	e016      	b.n	800f43a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f414:	2b00      	cmp	r3, #0
 800f416:	d010      	beq.n	800f43a <HAL_UART_IRQHandler+0x76a>
 800f418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	da0c      	bge.n	800f43a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f001 fe41 	bl	80110a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f426:	e008      	b.n	800f43a <HAL_UART_IRQHandler+0x76a>
      return;
 800f428:	bf00      	nop
 800f42a:	e006      	b.n	800f43a <HAL_UART_IRQHandler+0x76a>
    return;
 800f42c:	bf00      	nop
 800f42e:	e004      	b.n	800f43a <HAL_UART_IRQHandler+0x76a>
      return;
 800f430:	bf00      	nop
 800f432:	e002      	b.n	800f43a <HAL_UART_IRQHandler+0x76a>
      return;
 800f434:	bf00      	nop
 800f436:	e000      	b.n	800f43a <HAL_UART_IRQHandler+0x76a>
    return;
 800f438:	bf00      	nop
  }
}
 800f43a:	37e8      	adds	r7, #232	; 0xe8
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	effffffe 	.word	0xeffffffe

0800f444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f44c:	bf00      	nop
 800f44e:	370c      	adds	r7, #12
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f458:	b480      	push	{r7}
 800f45a:	b083      	sub	sp, #12
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f460:	bf00      	nop
 800f462:	370c      	adds	r7, #12
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	460b      	mov	r3, r1
 800f476:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f478:	bf00      	nop
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f488:	b092      	sub	sp, #72	; 0x48
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f48e:	2300      	movs	r3, #0
 800f490:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	689a      	ldr	r2, [r3, #8]
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	691b      	ldr	r3, [r3, #16]
 800f49c:	431a      	orrs	r2, r3
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	695b      	ldr	r3, [r3, #20]
 800f4a2:	431a      	orrs	r2, r3
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	69db      	ldr	r3, [r3, #28]
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	4bbe      	ldr	r3, [pc, #760]	; (800f7ac <UART_SetConfig+0x328>)
 800f4b4:	4013      	ands	r3, r2
 800f4b6:	697a      	ldr	r2, [r7, #20]
 800f4b8:	6812      	ldr	r2, [r2, #0]
 800f4ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4bc:	430b      	orrs	r3, r1
 800f4be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	68da      	ldr	r2, [r3, #12]
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	430a      	orrs	r2, r1
 800f4d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	699b      	ldr	r3, [r3, #24]
 800f4da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	4ab3      	ldr	r2, [pc, #716]	; (800f7b0 <UART_SetConfig+0x32c>)
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d004      	beq.n	800f4f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	6a1b      	ldr	r3, [r3, #32]
 800f4ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	689a      	ldr	r2, [r3, #8]
 800f4f6:	4baf      	ldr	r3, [pc, #700]	; (800f7b4 <UART_SetConfig+0x330>)
 800f4f8:	4013      	ands	r3, r2
 800f4fa:	697a      	ldr	r2, [r7, #20]
 800f4fc:	6812      	ldr	r2, [r2, #0]
 800f4fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f500:	430b      	orrs	r3, r1
 800f502:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50a:	f023 010f 	bic.w	r1, r3, #15
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	430a      	orrs	r2, r1
 800f518:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	4aa6      	ldr	r2, [pc, #664]	; (800f7b8 <UART_SetConfig+0x334>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d177      	bne.n	800f614 <UART_SetConfig+0x190>
 800f524:	4ba5      	ldr	r3, [pc, #660]	; (800f7bc <UART_SetConfig+0x338>)
 800f526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f52c:	2b28      	cmp	r3, #40	; 0x28
 800f52e:	d86d      	bhi.n	800f60c <UART_SetConfig+0x188>
 800f530:	a201      	add	r2, pc, #4	; (adr r2, 800f538 <UART_SetConfig+0xb4>)
 800f532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f536:	bf00      	nop
 800f538:	0800f5dd 	.word	0x0800f5dd
 800f53c:	0800f60d 	.word	0x0800f60d
 800f540:	0800f60d 	.word	0x0800f60d
 800f544:	0800f60d 	.word	0x0800f60d
 800f548:	0800f60d 	.word	0x0800f60d
 800f54c:	0800f60d 	.word	0x0800f60d
 800f550:	0800f60d 	.word	0x0800f60d
 800f554:	0800f60d 	.word	0x0800f60d
 800f558:	0800f5e5 	.word	0x0800f5e5
 800f55c:	0800f60d 	.word	0x0800f60d
 800f560:	0800f60d 	.word	0x0800f60d
 800f564:	0800f60d 	.word	0x0800f60d
 800f568:	0800f60d 	.word	0x0800f60d
 800f56c:	0800f60d 	.word	0x0800f60d
 800f570:	0800f60d 	.word	0x0800f60d
 800f574:	0800f60d 	.word	0x0800f60d
 800f578:	0800f5ed 	.word	0x0800f5ed
 800f57c:	0800f60d 	.word	0x0800f60d
 800f580:	0800f60d 	.word	0x0800f60d
 800f584:	0800f60d 	.word	0x0800f60d
 800f588:	0800f60d 	.word	0x0800f60d
 800f58c:	0800f60d 	.word	0x0800f60d
 800f590:	0800f60d 	.word	0x0800f60d
 800f594:	0800f60d 	.word	0x0800f60d
 800f598:	0800f5f5 	.word	0x0800f5f5
 800f59c:	0800f60d 	.word	0x0800f60d
 800f5a0:	0800f60d 	.word	0x0800f60d
 800f5a4:	0800f60d 	.word	0x0800f60d
 800f5a8:	0800f60d 	.word	0x0800f60d
 800f5ac:	0800f60d 	.word	0x0800f60d
 800f5b0:	0800f60d 	.word	0x0800f60d
 800f5b4:	0800f60d 	.word	0x0800f60d
 800f5b8:	0800f5fd 	.word	0x0800f5fd
 800f5bc:	0800f60d 	.word	0x0800f60d
 800f5c0:	0800f60d 	.word	0x0800f60d
 800f5c4:	0800f60d 	.word	0x0800f60d
 800f5c8:	0800f60d 	.word	0x0800f60d
 800f5cc:	0800f60d 	.word	0x0800f60d
 800f5d0:	0800f60d 	.word	0x0800f60d
 800f5d4:	0800f60d 	.word	0x0800f60d
 800f5d8:	0800f605 	.word	0x0800f605
 800f5dc:	2301      	movs	r3, #1
 800f5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e2:	e222      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f5e4:	2304      	movs	r3, #4
 800f5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ea:	e21e      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f5ec:	2308      	movs	r3, #8
 800f5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f2:	e21a      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f5f4:	2310      	movs	r3, #16
 800f5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fa:	e216      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f5fc:	2320      	movs	r3, #32
 800f5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f602:	e212      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f604:	2340      	movs	r3, #64	; 0x40
 800f606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f60a:	e20e      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f60c:	2380      	movs	r3, #128	; 0x80
 800f60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f612:	e20a      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4a69      	ldr	r2, [pc, #420]	; (800f7c0 <UART_SetConfig+0x33c>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d130      	bne.n	800f680 <UART_SetConfig+0x1fc>
 800f61e:	4b67      	ldr	r3, [pc, #412]	; (800f7bc <UART_SetConfig+0x338>)
 800f620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f622:	f003 0307 	and.w	r3, r3, #7
 800f626:	2b05      	cmp	r3, #5
 800f628:	d826      	bhi.n	800f678 <UART_SetConfig+0x1f4>
 800f62a:	a201      	add	r2, pc, #4	; (adr r2, 800f630 <UART_SetConfig+0x1ac>)
 800f62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f630:	0800f649 	.word	0x0800f649
 800f634:	0800f651 	.word	0x0800f651
 800f638:	0800f659 	.word	0x0800f659
 800f63c:	0800f661 	.word	0x0800f661
 800f640:	0800f669 	.word	0x0800f669
 800f644:	0800f671 	.word	0x0800f671
 800f648:	2300      	movs	r3, #0
 800f64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64e:	e1ec      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f650:	2304      	movs	r3, #4
 800f652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f656:	e1e8      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f658:	2308      	movs	r3, #8
 800f65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f65e:	e1e4      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f660:	2310      	movs	r3, #16
 800f662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f666:	e1e0      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f668:	2320      	movs	r3, #32
 800f66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66e:	e1dc      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f670:	2340      	movs	r3, #64	; 0x40
 800f672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f676:	e1d8      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f678:	2380      	movs	r3, #128	; 0x80
 800f67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f67e:	e1d4      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a4f      	ldr	r2, [pc, #316]	; (800f7c4 <UART_SetConfig+0x340>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d130      	bne.n	800f6ec <UART_SetConfig+0x268>
 800f68a:	4b4c      	ldr	r3, [pc, #304]	; (800f7bc <UART_SetConfig+0x338>)
 800f68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f68e:	f003 0307 	and.w	r3, r3, #7
 800f692:	2b05      	cmp	r3, #5
 800f694:	d826      	bhi.n	800f6e4 <UART_SetConfig+0x260>
 800f696:	a201      	add	r2, pc, #4	; (adr r2, 800f69c <UART_SetConfig+0x218>)
 800f698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69c:	0800f6b5 	.word	0x0800f6b5
 800f6a0:	0800f6bd 	.word	0x0800f6bd
 800f6a4:	0800f6c5 	.word	0x0800f6c5
 800f6a8:	0800f6cd 	.word	0x0800f6cd
 800f6ac:	0800f6d5 	.word	0x0800f6d5
 800f6b0:	0800f6dd 	.word	0x0800f6dd
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ba:	e1b6      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f6bc:	2304      	movs	r3, #4
 800f6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6c2:	e1b2      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f6c4:	2308      	movs	r3, #8
 800f6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ca:	e1ae      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f6cc:	2310      	movs	r3, #16
 800f6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6d2:	e1aa      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f6d4:	2320      	movs	r3, #32
 800f6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6da:	e1a6      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f6dc:	2340      	movs	r3, #64	; 0x40
 800f6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6e2:	e1a2      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f6e4:	2380      	movs	r3, #128	; 0x80
 800f6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ea:	e19e      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a35      	ldr	r2, [pc, #212]	; (800f7c8 <UART_SetConfig+0x344>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d130      	bne.n	800f758 <UART_SetConfig+0x2d4>
 800f6f6:	4b31      	ldr	r3, [pc, #196]	; (800f7bc <UART_SetConfig+0x338>)
 800f6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6fa:	f003 0307 	and.w	r3, r3, #7
 800f6fe:	2b05      	cmp	r3, #5
 800f700:	d826      	bhi.n	800f750 <UART_SetConfig+0x2cc>
 800f702:	a201      	add	r2, pc, #4	; (adr r2, 800f708 <UART_SetConfig+0x284>)
 800f704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f708:	0800f721 	.word	0x0800f721
 800f70c:	0800f729 	.word	0x0800f729
 800f710:	0800f731 	.word	0x0800f731
 800f714:	0800f739 	.word	0x0800f739
 800f718:	0800f741 	.word	0x0800f741
 800f71c:	0800f749 	.word	0x0800f749
 800f720:	2300      	movs	r3, #0
 800f722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f726:	e180      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f728:	2304      	movs	r3, #4
 800f72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f72e:	e17c      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f730:	2308      	movs	r3, #8
 800f732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f736:	e178      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f738:	2310      	movs	r3, #16
 800f73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f73e:	e174      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f740:	2320      	movs	r3, #32
 800f742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f746:	e170      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f748:	2340      	movs	r3, #64	; 0x40
 800f74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f74e:	e16c      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f750:	2380      	movs	r3, #128	; 0x80
 800f752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f756:	e168      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4a1b      	ldr	r2, [pc, #108]	; (800f7cc <UART_SetConfig+0x348>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d142      	bne.n	800f7e8 <UART_SetConfig+0x364>
 800f762:	4b16      	ldr	r3, [pc, #88]	; (800f7bc <UART_SetConfig+0x338>)
 800f764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f766:	f003 0307 	and.w	r3, r3, #7
 800f76a:	2b05      	cmp	r3, #5
 800f76c:	d838      	bhi.n	800f7e0 <UART_SetConfig+0x35c>
 800f76e:	a201      	add	r2, pc, #4	; (adr r2, 800f774 <UART_SetConfig+0x2f0>)
 800f770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f774:	0800f78d 	.word	0x0800f78d
 800f778:	0800f795 	.word	0x0800f795
 800f77c:	0800f79d 	.word	0x0800f79d
 800f780:	0800f7a5 	.word	0x0800f7a5
 800f784:	0800f7d1 	.word	0x0800f7d1
 800f788:	0800f7d9 	.word	0x0800f7d9
 800f78c:	2300      	movs	r3, #0
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f792:	e14a      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f794:	2304      	movs	r3, #4
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79a:	e146      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f79c:	2308      	movs	r3, #8
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7a2:	e142      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f7a4:	2310      	movs	r3, #16
 800f7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7aa:	e13e      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f7ac:	cfff69f3 	.word	0xcfff69f3
 800f7b0:	58000c00 	.word	0x58000c00
 800f7b4:	11fff4ff 	.word	0x11fff4ff
 800f7b8:	40011000 	.word	0x40011000
 800f7bc:	58024400 	.word	0x58024400
 800f7c0:	40004400 	.word	0x40004400
 800f7c4:	40004800 	.word	0x40004800
 800f7c8:	40004c00 	.word	0x40004c00
 800f7cc:	40005000 	.word	0x40005000
 800f7d0:	2320      	movs	r3, #32
 800f7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7d6:	e128      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f7d8:	2340      	movs	r3, #64	; 0x40
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7de:	e124      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f7e0:	2380      	movs	r3, #128	; 0x80
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e6:	e120      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4acb      	ldr	r2, [pc, #812]	; (800fb1c <UART_SetConfig+0x698>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d176      	bne.n	800f8e0 <UART_SetConfig+0x45c>
 800f7f2:	4bcb      	ldr	r3, [pc, #812]	; (800fb20 <UART_SetConfig+0x69c>)
 800f7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7fa:	2b28      	cmp	r3, #40	; 0x28
 800f7fc:	d86c      	bhi.n	800f8d8 <UART_SetConfig+0x454>
 800f7fe:	a201      	add	r2, pc, #4	; (adr r2, 800f804 <UART_SetConfig+0x380>)
 800f800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f804:	0800f8a9 	.word	0x0800f8a9
 800f808:	0800f8d9 	.word	0x0800f8d9
 800f80c:	0800f8d9 	.word	0x0800f8d9
 800f810:	0800f8d9 	.word	0x0800f8d9
 800f814:	0800f8d9 	.word	0x0800f8d9
 800f818:	0800f8d9 	.word	0x0800f8d9
 800f81c:	0800f8d9 	.word	0x0800f8d9
 800f820:	0800f8d9 	.word	0x0800f8d9
 800f824:	0800f8b1 	.word	0x0800f8b1
 800f828:	0800f8d9 	.word	0x0800f8d9
 800f82c:	0800f8d9 	.word	0x0800f8d9
 800f830:	0800f8d9 	.word	0x0800f8d9
 800f834:	0800f8d9 	.word	0x0800f8d9
 800f838:	0800f8d9 	.word	0x0800f8d9
 800f83c:	0800f8d9 	.word	0x0800f8d9
 800f840:	0800f8d9 	.word	0x0800f8d9
 800f844:	0800f8b9 	.word	0x0800f8b9
 800f848:	0800f8d9 	.word	0x0800f8d9
 800f84c:	0800f8d9 	.word	0x0800f8d9
 800f850:	0800f8d9 	.word	0x0800f8d9
 800f854:	0800f8d9 	.word	0x0800f8d9
 800f858:	0800f8d9 	.word	0x0800f8d9
 800f85c:	0800f8d9 	.word	0x0800f8d9
 800f860:	0800f8d9 	.word	0x0800f8d9
 800f864:	0800f8c1 	.word	0x0800f8c1
 800f868:	0800f8d9 	.word	0x0800f8d9
 800f86c:	0800f8d9 	.word	0x0800f8d9
 800f870:	0800f8d9 	.word	0x0800f8d9
 800f874:	0800f8d9 	.word	0x0800f8d9
 800f878:	0800f8d9 	.word	0x0800f8d9
 800f87c:	0800f8d9 	.word	0x0800f8d9
 800f880:	0800f8d9 	.word	0x0800f8d9
 800f884:	0800f8c9 	.word	0x0800f8c9
 800f888:	0800f8d9 	.word	0x0800f8d9
 800f88c:	0800f8d9 	.word	0x0800f8d9
 800f890:	0800f8d9 	.word	0x0800f8d9
 800f894:	0800f8d9 	.word	0x0800f8d9
 800f898:	0800f8d9 	.word	0x0800f8d9
 800f89c:	0800f8d9 	.word	0x0800f8d9
 800f8a0:	0800f8d9 	.word	0x0800f8d9
 800f8a4:	0800f8d1 	.word	0x0800f8d1
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ae:	e0bc      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f8b0:	2304      	movs	r3, #4
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b6:	e0b8      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f8b8:	2308      	movs	r3, #8
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8be:	e0b4      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f8c0:	2310      	movs	r3, #16
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8c6:	e0b0      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f8c8:	2320      	movs	r3, #32
 800f8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ce:	e0ac      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f8d0:	2340      	movs	r3, #64	; 0x40
 800f8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8d6:	e0a8      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f8d8:	2380      	movs	r3, #128	; 0x80
 800f8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8de:	e0a4      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a8f      	ldr	r2, [pc, #572]	; (800fb24 <UART_SetConfig+0x6a0>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d130      	bne.n	800f94c <UART_SetConfig+0x4c8>
 800f8ea:	4b8d      	ldr	r3, [pc, #564]	; (800fb20 <UART_SetConfig+0x69c>)
 800f8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8ee:	f003 0307 	and.w	r3, r3, #7
 800f8f2:	2b05      	cmp	r3, #5
 800f8f4:	d826      	bhi.n	800f944 <UART_SetConfig+0x4c0>
 800f8f6:	a201      	add	r2, pc, #4	; (adr r2, 800f8fc <UART_SetConfig+0x478>)
 800f8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8fc:	0800f915 	.word	0x0800f915
 800f900:	0800f91d 	.word	0x0800f91d
 800f904:	0800f925 	.word	0x0800f925
 800f908:	0800f92d 	.word	0x0800f92d
 800f90c:	0800f935 	.word	0x0800f935
 800f910:	0800f93d 	.word	0x0800f93d
 800f914:	2300      	movs	r3, #0
 800f916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91a:	e086      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f91c:	2304      	movs	r3, #4
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f922:	e082      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f924:	2308      	movs	r3, #8
 800f926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92a:	e07e      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f92c:	2310      	movs	r3, #16
 800f92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f932:	e07a      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f934:	2320      	movs	r3, #32
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f93a:	e076      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f93c:	2340      	movs	r3, #64	; 0x40
 800f93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f942:	e072      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f944:	2380      	movs	r3, #128	; 0x80
 800f946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f94a:	e06e      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	4a75      	ldr	r2, [pc, #468]	; (800fb28 <UART_SetConfig+0x6a4>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d130      	bne.n	800f9b8 <UART_SetConfig+0x534>
 800f956:	4b72      	ldr	r3, [pc, #456]	; (800fb20 <UART_SetConfig+0x69c>)
 800f958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f95a:	f003 0307 	and.w	r3, r3, #7
 800f95e:	2b05      	cmp	r3, #5
 800f960:	d826      	bhi.n	800f9b0 <UART_SetConfig+0x52c>
 800f962:	a201      	add	r2, pc, #4	; (adr r2, 800f968 <UART_SetConfig+0x4e4>)
 800f964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f968:	0800f981 	.word	0x0800f981
 800f96c:	0800f989 	.word	0x0800f989
 800f970:	0800f991 	.word	0x0800f991
 800f974:	0800f999 	.word	0x0800f999
 800f978:	0800f9a1 	.word	0x0800f9a1
 800f97c:	0800f9a9 	.word	0x0800f9a9
 800f980:	2300      	movs	r3, #0
 800f982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f986:	e050      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f988:	2304      	movs	r3, #4
 800f98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f98e:	e04c      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f990:	2308      	movs	r3, #8
 800f992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f996:	e048      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f998:	2310      	movs	r3, #16
 800f99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f99e:	e044      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f9a0:	2320      	movs	r3, #32
 800f9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9a6:	e040      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f9a8:	2340      	movs	r3, #64	; 0x40
 800f9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ae:	e03c      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f9b0:	2380      	movs	r3, #128	; 0x80
 800f9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9b6:	e038      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	4a5b      	ldr	r2, [pc, #364]	; (800fb2c <UART_SetConfig+0x6a8>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d130      	bne.n	800fa24 <UART_SetConfig+0x5a0>
 800f9c2:	4b57      	ldr	r3, [pc, #348]	; (800fb20 <UART_SetConfig+0x69c>)
 800f9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9c6:	f003 0307 	and.w	r3, r3, #7
 800f9ca:	2b05      	cmp	r3, #5
 800f9cc:	d826      	bhi.n	800fa1c <UART_SetConfig+0x598>
 800f9ce:	a201      	add	r2, pc, #4	; (adr r2, 800f9d4 <UART_SetConfig+0x550>)
 800f9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d4:	0800f9ed 	.word	0x0800f9ed
 800f9d8:	0800f9f5 	.word	0x0800f9f5
 800f9dc:	0800f9fd 	.word	0x0800f9fd
 800f9e0:	0800fa05 	.word	0x0800fa05
 800f9e4:	0800fa0d 	.word	0x0800fa0d
 800f9e8:	0800fa15 	.word	0x0800fa15
 800f9ec:	2302      	movs	r3, #2
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f2:	e01a      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f9f4:	2304      	movs	r3, #4
 800f9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9fa:	e016      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800f9fc:	2308      	movs	r3, #8
 800f9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa02:	e012      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800fa04:	2310      	movs	r3, #16
 800fa06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa0a:	e00e      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800fa0c:	2320      	movs	r3, #32
 800fa0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa12:	e00a      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800fa14:	2340      	movs	r3, #64	; 0x40
 800fa16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa1a:	e006      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800fa1c:	2380      	movs	r3, #128	; 0x80
 800fa1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa22:	e002      	b.n	800fa2a <UART_SetConfig+0x5a6>
 800fa24:	2380      	movs	r3, #128	; 0x80
 800fa26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4a3f      	ldr	r2, [pc, #252]	; (800fb2c <UART_SetConfig+0x6a8>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	f040 80f8 	bne.w	800fc26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fa3a:	2b20      	cmp	r3, #32
 800fa3c:	dc46      	bgt.n	800facc <UART_SetConfig+0x648>
 800fa3e:	2b02      	cmp	r3, #2
 800fa40:	f2c0 8082 	blt.w	800fb48 <UART_SetConfig+0x6c4>
 800fa44:	3b02      	subs	r3, #2
 800fa46:	2b1e      	cmp	r3, #30
 800fa48:	d87e      	bhi.n	800fb48 <UART_SetConfig+0x6c4>
 800fa4a:	a201      	add	r2, pc, #4	; (adr r2, 800fa50 <UART_SetConfig+0x5cc>)
 800fa4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa50:	0800fad3 	.word	0x0800fad3
 800fa54:	0800fb49 	.word	0x0800fb49
 800fa58:	0800fadb 	.word	0x0800fadb
 800fa5c:	0800fb49 	.word	0x0800fb49
 800fa60:	0800fb49 	.word	0x0800fb49
 800fa64:	0800fb49 	.word	0x0800fb49
 800fa68:	0800faeb 	.word	0x0800faeb
 800fa6c:	0800fb49 	.word	0x0800fb49
 800fa70:	0800fb49 	.word	0x0800fb49
 800fa74:	0800fb49 	.word	0x0800fb49
 800fa78:	0800fb49 	.word	0x0800fb49
 800fa7c:	0800fb49 	.word	0x0800fb49
 800fa80:	0800fb49 	.word	0x0800fb49
 800fa84:	0800fb49 	.word	0x0800fb49
 800fa88:	0800fafb 	.word	0x0800fafb
 800fa8c:	0800fb49 	.word	0x0800fb49
 800fa90:	0800fb49 	.word	0x0800fb49
 800fa94:	0800fb49 	.word	0x0800fb49
 800fa98:	0800fb49 	.word	0x0800fb49
 800fa9c:	0800fb49 	.word	0x0800fb49
 800faa0:	0800fb49 	.word	0x0800fb49
 800faa4:	0800fb49 	.word	0x0800fb49
 800faa8:	0800fb49 	.word	0x0800fb49
 800faac:	0800fb49 	.word	0x0800fb49
 800fab0:	0800fb49 	.word	0x0800fb49
 800fab4:	0800fb49 	.word	0x0800fb49
 800fab8:	0800fb49 	.word	0x0800fb49
 800fabc:	0800fb49 	.word	0x0800fb49
 800fac0:	0800fb49 	.word	0x0800fb49
 800fac4:	0800fb49 	.word	0x0800fb49
 800fac8:	0800fb3b 	.word	0x0800fb3b
 800facc:	2b40      	cmp	r3, #64	; 0x40
 800face:	d037      	beq.n	800fb40 <UART_SetConfig+0x6bc>
 800fad0:	e03a      	b.n	800fb48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fad2:	f7fc f869 	bl	800bba8 <HAL_RCCEx_GetD3PCLK1Freq>
 800fad6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fad8:	e03c      	b.n	800fb54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fc f878 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fae8:	e034      	b.n	800fb54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800faea:	f107 0318 	add.w	r3, r7, #24
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fc f9c4 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800faf8:	e02c      	b.n	800fb54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fafa:	4b09      	ldr	r3, [pc, #36]	; (800fb20 <UART_SetConfig+0x69c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f003 0320 	and.w	r3, r3, #32
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d016      	beq.n	800fb34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb06:	4b06      	ldr	r3, [pc, #24]	; (800fb20 <UART_SetConfig+0x69c>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	08db      	lsrs	r3, r3, #3
 800fb0c:	f003 0303 	and.w	r3, r3, #3
 800fb10:	4a07      	ldr	r2, [pc, #28]	; (800fb30 <UART_SetConfig+0x6ac>)
 800fb12:	fa22 f303 	lsr.w	r3, r2, r3
 800fb16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb18:	e01c      	b.n	800fb54 <UART_SetConfig+0x6d0>
 800fb1a:	bf00      	nop
 800fb1c:	40011400 	.word	0x40011400
 800fb20:	58024400 	.word	0x58024400
 800fb24:	40007800 	.word	0x40007800
 800fb28:	40007c00 	.word	0x40007c00
 800fb2c:	58000c00 	.word	0x58000c00
 800fb30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fb34:	4b9d      	ldr	r3, [pc, #628]	; (800fdac <UART_SetConfig+0x928>)
 800fb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb38:	e00c      	b.n	800fb54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb3a:	4b9d      	ldr	r3, [pc, #628]	; (800fdb0 <UART_SetConfig+0x92c>)
 800fb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb3e:	e009      	b.n	800fb54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb46:	e005      	b.n	800fb54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fb52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f000 81de 	beq.w	800ff18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb60:	4a94      	ldr	r2, [pc, #592]	; (800fdb4 <UART_SetConfig+0x930>)
 800fb62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb66:	461a      	mov	r2, r3
 800fb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb6e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	685a      	ldr	r2, [r3, #4]
 800fb74:	4613      	mov	r3, r2
 800fb76:	005b      	lsls	r3, r3, #1
 800fb78:	4413      	add	r3, r2
 800fb7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d305      	bcc.n	800fb8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d903      	bls.n	800fb94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fb92:	e1c1      	b.n	800ff18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb96:	2200      	movs	r2, #0
 800fb98:	60bb      	str	r3, [r7, #8]
 800fb9a:	60fa      	str	r2, [r7, #12]
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba0:	4a84      	ldr	r2, [pc, #528]	; (800fdb4 <UART_SetConfig+0x930>)
 800fba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	2200      	movs	r2, #0
 800fbaa:	603b      	str	r3, [r7, #0]
 800fbac:	607a      	str	r2, [r7, #4]
 800fbae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fbb6:	f7f0 fbe3 	bl	8000380 <__aeabi_uldivmod>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	4610      	mov	r0, r2
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	f04f 0200 	mov.w	r2, #0
 800fbc6:	f04f 0300 	mov.w	r3, #0
 800fbca:	020b      	lsls	r3, r1, #8
 800fbcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fbd0:	0202      	lsls	r2, r0, #8
 800fbd2:	6979      	ldr	r1, [r7, #20]
 800fbd4:	6849      	ldr	r1, [r1, #4]
 800fbd6:	0849      	lsrs	r1, r1, #1
 800fbd8:	2000      	movs	r0, #0
 800fbda:	460c      	mov	r4, r1
 800fbdc:	4605      	mov	r5, r0
 800fbde:	eb12 0804 	adds.w	r8, r2, r4
 800fbe2:	eb43 0905 	adc.w	r9, r3, r5
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	2200      	movs	r2, #0
 800fbec:	469a      	mov	sl, r3
 800fbee:	4693      	mov	fp, r2
 800fbf0:	4652      	mov	r2, sl
 800fbf2:	465b      	mov	r3, fp
 800fbf4:	4640      	mov	r0, r8
 800fbf6:	4649      	mov	r1, r9
 800fbf8:	f7f0 fbc2 	bl	8000380 <__aeabi_uldivmod>
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	460b      	mov	r3, r1
 800fc00:	4613      	mov	r3, r2
 800fc02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc0a:	d308      	bcc.n	800fc1e <UART_SetConfig+0x79a>
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc12:	d204      	bcs.n	800fc1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc1a:	60da      	str	r2, [r3, #12]
 800fc1c:	e17c      	b.n	800ff18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fc24:	e178      	b.n	800ff18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	69db      	ldr	r3, [r3, #28]
 800fc2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc2e:	f040 80c5 	bne.w	800fdbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fc32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc36:	2b20      	cmp	r3, #32
 800fc38:	dc48      	bgt.n	800fccc <UART_SetConfig+0x848>
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	db7b      	blt.n	800fd36 <UART_SetConfig+0x8b2>
 800fc3e:	2b20      	cmp	r3, #32
 800fc40:	d879      	bhi.n	800fd36 <UART_SetConfig+0x8b2>
 800fc42:	a201      	add	r2, pc, #4	; (adr r2, 800fc48 <UART_SetConfig+0x7c4>)
 800fc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc48:	0800fcd3 	.word	0x0800fcd3
 800fc4c:	0800fcdb 	.word	0x0800fcdb
 800fc50:	0800fd37 	.word	0x0800fd37
 800fc54:	0800fd37 	.word	0x0800fd37
 800fc58:	0800fce3 	.word	0x0800fce3
 800fc5c:	0800fd37 	.word	0x0800fd37
 800fc60:	0800fd37 	.word	0x0800fd37
 800fc64:	0800fd37 	.word	0x0800fd37
 800fc68:	0800fcf3 	.word	0x0800fcf3
 800fc6c:	0800fd37 	.word	0x0800fd37
 800fc70:	0800fd37 	.word	0x0800fd37
 800fc74:	0800fd37 	.word	0x0800fd37
 800fc78:	0800fd37 	.word	0x0800fd37
 800fc7c:	0800fd37 	.word	0x0800fd37
 800fc80:	0800fd37 	.word	0x0800fd37
 800fc84:	0800fd37 	.word	0x0800fd37
 800fc88:	0800fd03 	.word	0x0800fd03
 800fc8c:	0800fd37 	.word	0x0800fd37
 800fc90:	0800fd37 	.word	0x0800fd37
 800fc94:	0800fd37 	.word	0x0800fd37
 800fc98:	0800fd37 	.word	0x0800fd37
 800fc9c:	0800fd37 	.word	0x0800fd37
 800fca0:	0800fd37 	.word	0x0800fd37
 800fca4:	0800fd37 	.word	0x0800fd37
 800fca8:	0800fd37 	.word	0x0800fd37
 800fcac:	0800fd37 	.word	0x0800fd37
 800fcb0:	0800fd37 	.word	0x0800fd37
 800fcb4:	0800fd37 	.word	0x0800fd37
 800fcb8:	0800fd37 	.word	0x0800fd37
 800fcbc:	0800fd37 	.word	0x0800fd37
 800fcc0:	0800fd37 	.word	0x0800fd37
 800fcc4:	0800fd37 	.word	0x0800fd37
 800fcc8:	0800fd29 	.word	0x0800fd29
 800fccc:	2b40      	cmp	r3, #64	; 0x40
 800fcce:	d02e      	beq.n	800fd2e <UART_SetConfig+0x8aa>
 800fcd0:	e031      	b.n	800fd36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fcd2:	f7f9 ff71 	bl	8009bb8 <HAL_RCC_GetPCLK1Freq>
 800fcd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fcd8:	e033      	b.n	800fd42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fcda:	f7f9 ff83 	bl	8009be4 <HAL_RCC_GetPCLK2Freq>
 800fcde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fce0:	e02f      	b.n	800fd42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fb ff74 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcf0:	e027      	b.n	800fd42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcf2:	f107 0318 	add.w	r3, r7, #24
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fc f8c0 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd00:	e01f      	b.n	800fd42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd02:	4b2d      	ldr	r3, [pc, #180]	; (800fdb8 <UART_SetConfig+0x934>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f003 0320 	and.w	r3, r3, #32
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d009      	beq.n	800fd22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd0e:	4b2a      	ldr	r3, [pc, #168]	; (800fdb8 <UART_SetConfig+0x934>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	08db      	lsrs	r3, r3, #3
 800fd14:	f003 0303 	and.w	r3, r3, #3
 800fd18:	4a24      	ldr	r2, [pc, #144]	; (800fdac <UART_SetConfig+0x928>)
 800fd1a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd20:	e00f      	b.n	800fd42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fd22:	4b22      	ldr	r3, [pc, #136]	; (800fdac <UART_SetConfig+0x928>)
 800fd24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd26:	e00c      	b.n	800fd42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd28:	4b21      	ldr	r3, [pc, #132]	; (800fdb0 <UART_SetConfig+0x92c>)
 800fd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd2c:	e009      	b.n	800fd42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd34:	e005      	b.n	800fd42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fd36:	2300      	movs	r3, #0
 800fd38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fd40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f000 80e7 	beq.w	800ff18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd4e:	4a19      	ldr	r2, [pc, #100]	; (800fdb4 <UART_SetConfig+0x930>)
 800fd50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd54:	461a      	mov	r2, r3
 800fd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd58:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd5c:	005a      	lsls	r2, r3, #1
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	085b      	lsrs	r3, r3, #1
 800fd64:	441a      	add	r2, r3
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	685b      	ldr	r3, [r3, #4]
 800fd6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd72:	2b0f      	cmp	r3, #15
 800fd74:	d916      	bls.n	800fda4 <UART_SetConfig+0x920>
 800fd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd7c:	d212      	bcs.n	800fda4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	f023 030f 	bic.w	r3, r3, #15
 800fd86:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8a:	085b      	lsrs	r3, r3, #1
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	f003 0307 	and.w	r3, r3, #7
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd96:	4313      	orrs	r3, r2
 800fd98:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fda0:	60da      	str	r2, [r3, #12]
 800fda2:	e0b9      	b.n	800ff18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fda4:	2301      	movs	r3, #1
 800fda6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fdaa:	e0b5      	b.n	800ff18 <UART_SetConfig+0xa94>
 800fdac:	03d09000 	.word	0x03d09000
 800fdb0:	003d0900 	.word	0x003d0900
 800fdb4:	080160fc 	.word	0x080160fc
 800fdb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fdbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fdc0:	2b20      	cmp	r3, #32
 800fdc2:	dc49      	bgt.n	800fe58 <UART_SetConfig+0x9d4>
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	db7c      	blt.n	800fec2 <UART_SetConfig+0xa3e>
 800fdc8:	2b20      	cmp	r3, #32
 800fdca:	d87a      	bhi.n	800fec2 <UART_SetConfig+0xa3e>
 800fdcc:	a201      	add	r2, pc, #4	; (adr r2, 800fdd4 <UART_SetConfig+0x950>)
 800fdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd2:	bf00      	nop
 800fdd4:	0800fe5f 	.word	0x0800fe5f
 800fdd8:	0800fe67 	.word	0x0800fe67
 800fddc:	0800fec3 	.word	0x0800fec3
 800fde0:	0800fec3 	.word	0x0800fec3
 800fde4:	0800fe6f 	.word	0x0800fe6f
 800fde8:	0800fec3 	.word	0x0800fec3
 800fdec:	0800fec3 	.word	0x0800fec3
 800fdf0:	0800fec3 	.word	0x0800fec3
 800fdf4:	0800fe7f 	.word	0x0800fe7f
 800fdf8:	0800fec3 	.word	0x0800fec3
 800fdfc:	0800fec3 	.word	0x0800fec3
 800fe00:	0800fec3 	.word	0x0800fec3
 800fe04:	0800fec3 	.word	0x0800fec3
 800fe08:	0800fec3 	.word	0x0800fec3
 800fe0c:	0800fec3 	.word	0x0800fec3
 800fe10:	0800fec3 	.word	0x0800fec3
 800fe14:	0800fe8f 	.word	0x0800fe8f
 800fe18:	0800fec3 	.word	0x0800fec3
 800fe1c:	0800fec3 	.word	0x0800fec3
 800fe20:	0800fec3 	.word	0x0800fec3
 800fe24:	0800fec3 	.word	0x0800fec3
 800fe28:	0800fec3 	.word	0x0800fec3
 800fe2c:	0800fec3 	.word	0x0800fec3
 800fe30:	0800fec3 	.word	0x0800fec3
 800fe34:	0800fec3 	.word	0x0800fec3
 800fe38:	0800fec3 	.word	0x0800fec3
 800fe3c:	0800fec3 	.word	0x0800fec3
 800fe40:	0800fec3 	.word	0x0800fec3
 800fe44:	0800fec3 	.word	0x0800fec3
 800fe48:	0800fec3 	.word	0x0800fec3
 800fe4c:	0800fec3 	.word	0x0800fec3
 800fe50:	0800fec3 	.word	0x0800fec3
 800fe54:	0800feb5 	.word	0x0800feb5
 800fe58:	2b40      	cmp	r3, #64	; 0x40
 800fe5a:	d02e      	beq.n	800feba <UART_SetConfig+0xa36>
 800fe5c:	e031      	b.n	800fec2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe5e:	f7f9 feab 	bl	8009bb8 <HAL_RCC_GetPCLK1Freq>
 800fe62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe64:	e033      	b.n	800fece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe66:	f7f9 febd 	bl	8009be4 <HAL_RCC_GetPCLK2Freq>
 800fe6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe6c:	e02f      	b.n	800fece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fb feae 	bl	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe7c:	e027      	b.n	800fece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe7e:	f107 0318 	add.w	r3, r7, #24
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fb fffa 	bl	800be7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe88:	69fb      	ldr	r3, [r7, #28]
 800fe8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe8c:	e01f      	b.n	800fece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe8e:	4b2d      	ldr	r3, [pc, #180]	; (800ff44 <UART_SetConfig+0xac0>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f003 0320 	and.w	r3, r3, #32
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d009      	beq.n	800feae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe9a:	4b2a      	ldr	r3, [pc, #168]	; (800ff44 <UART_SetConfig+0xac0>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	08db      	lsrs	r3, r3, #3
 800fea0:	f003 0303 	and.w	r3, r3, #3
 800fea4:	4a28      	ldr	r2, [pc, #160]	; (800ff48 <UART_SetConfig+0xac4>)
 800fea6:	fa22 f303 	lsr.w	r3, r2, r3
 800feaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800feac:	e00f      	b.n	800fece <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800feae:	4b26      	ldr	r3, [pc, #152]	; (800ff48 <UART_SetConfig+0xac4>)
 800feb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800feb2:	e00c      	b.n	800fece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800feb4:	4b25      	ldr	r3, [pc, #148]	; (800ff4c <UART_SetConfig+0xac8>)
 800feb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800feb8:	e009      	b.n	800fece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800feba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800febe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fec0:	e005      	b.n	800fece <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fec2:	2300      	movs	r3, #0
 800fec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fecc:	bf00      	nop
    }

    if (pclk != 0U)
 800fece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d021      	beq.n	800ff18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fed8:	4a1d      	ldr	r2, [pc, #116]	; (800ff50 <UART_SetConfig+0xacc>)
 800feda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fede:	461a      	mov	r2, r3
 800fee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fee2:	fbb3 f2f2 	udiv	r2, r3, r2
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	085b      	lsrs	r3, r3, #1
 800feec:	441a      	add	r2, r3
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fef6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	2b0f      	cmp	r3, #15
 800fefc:	d909      	bls.n	800ff12 <UART_SetConfig+0xa8e>
 800fefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff04:	d205      	bcs.n	800ff12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ff06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff08:	b29a      	uxth	r2, r3
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	60da      	str	r2, [r3, #12]
 800ff10:	e002      	b.n	800ff18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ff12:	2301      	movs	r3, #1
 800ff14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	2201      	movs	r2, #1
 800ff24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	2200      	movs	r2, #0
 800ff32:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ff34:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3748      	adds	r7, #72	; 0x48
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff42:	bf00      	nop
 800ff44:	58024400 	.word	0x58024400
 800ff48:	03d09000 	.word	0x03d09000
 800ff4c:	003d0900 	.word	0x003d0900
 800ff50:	080160fc 	.word	0x080160fc

0800ff54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff60:	f003 0308 	and.w	r3, r3, #8
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00a      	beq.n	800ff7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	430a      	orrs	r2, r1
 800ff7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff82:	f003 0301 	and.w	r3, r3, #1
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00a      	beq.n	800ffa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	430a      	orrs	r2, r1
 800ff9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffa4:	f003 0302 	and.w	r3, r3, #2
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d00a      	beq.n	800ffc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	430a      	orrs	r2, r1
 800ffc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffc6:	f003 0304 	and.w	r3, r3, #4
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00a      	beq.n	800ffe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	430a      	orrs	r2, r1
 800ffe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe8:	f003 0310 	and.w	r3, r3, #16
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00a      	beq.n	8010006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	430a      	orrs	r2, r1
 8010004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801000a:	f003 0320 	and.w	r3, r3, #32
 801000e:	2b00      	cmp	r3, #0
 8010010:	d00a      	beq.n	8010028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	689b      	ldr	r3, [r3, #8]
 8010018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	430a      	orrs	r2, r1
 8010026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801002c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010030:	2b00      	cmp	r3, #0
 8010032:	d01a      	beq.n	801006a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	430a      	orrs	r2, r1
 8010048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801004e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010052:	d10a      	bne.n	801006a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	430a      	orrs	r2, r1
 8010068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801006e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00a      	beq.n	801008c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	430a      	orrs	r2, r1
 801008a:	605a      	str	r2, [r3, #4]
  }
}
 801008c:	bf00      	nop
 801008e:	370c      	adds	r7, #12
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr

08010098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b098      	sub	sp, #96	; 0x60
 801009c:	af02      	add	r7, sp, #8
 801009e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2200      	movs	r2, #0
 80100a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80100a8:	f7f3 fb08 	bl	80036bc <HAL_GetTick>
 80100ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f003 0308 	and.w	r3, r3, #8
 80100b8:	2b08      	cmp	r3, #8
 80100ba:	d12f      	bne.n	801011c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80100bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80100c0:	9300      	str	r3, [sp, #0]
 80100c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100c4:	2200      	movs	r2, #0
 80100c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f000 f88e 	bl	80101ec <UART_WaitOnFlagUntilTimeout>
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d022      	beq.n	801011c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100de:	e853 3f00 	ldrex	r3, [r3]
 80100e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80100e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100ea:	653b      	str	r3, [r7, #80]	; 0x50
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	461a      	mov	r2, r3
 80100f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100f4:	647b      	str	r3, [r7, #68]	; 0x44
 80100f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80100fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100fc:	e841 2300 	strex	r3, r2, [r1]
 8010100:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1e6      	bne.n	80100d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2220      	movs	r2, #32
 801010c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2200      	movs	r2, #0
 8010114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010118:	2303      	movs	r3, #3
 801011a:	e063      	b.n	80101e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f003 0304 	and.w	r3, r3, #4
 8010126:	2b04      	cmp	r3, #4
 8010128:	d149      	bne.n	80101be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801012a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801012e:	9300      	str	r3, [sp, #0]
 8010130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010132:	2200      	movs	r2, #0
 8010134:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 f857 	bl	80101ec <UART_WaitOnFlagUntilTimeout>
 801013e:	4603      	mov	r3, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d03c      	beq.n	80101be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014c:	e853 3f00 	ldrex	r3, [r3]
 8010150:	623b      	str	r3, [r7, #32]
   return(result);
 8010152:	6a3b      	ldr	r3, [r7, #32]
 8010154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010158:	64fb      	str	r3, [r7, #76]	; 0x4c
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010162:	633b      	str	r3, [r7, #48]	; 0x30
 8010164:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801016a:	e841 2300 	strex	r3, r2, [r1]
 801016e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1e6      	bne.n	8010144 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3308      	adds	r3, #8
 801017c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	e853 3f00 	ldrex	r3, [r3]
 8010184:	60fb      	str	r3, [r7, #12]
   return(result);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f023 0301 	bic.w	r3, r3, #1
 801018c:	64bb      	str	r3, [r7, #72]	; 0x48
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	3308      	adds	r3, #8
 8010194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010196:	61fa      	str	r2, [r7, #28]
 8010198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801019a:	69b9      	ldr	r1, [r7, #24]
 801019c:	69fa      	ldr	r2, [r7, #28]
 801019e:	e841 2300 	strex	r3, r2, [r1]
 80101a2:	617b      	str	r3, [r7, #20]
   return(result);
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d1e5      	bne.n	8010176 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2220      	movs	r2, #32
 80101ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2200      	movs	r2, #0
 80101b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80101ba:	2303      	movs	r3, #3
 80101bc:	e012      	b.n	80101e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2220      	movs	r2, #32
 80101c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2220      	movs	r2, #32
 80101ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2200      	movs	r2, #0
 80101d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2200      	movs	r2, #0
 80101de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3758      	adds	r7, #88	; 0x58
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	603b      	str	r3, [r7, #0]
 80101f8:	4613      	mov	r3, r2
 80101fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101fc:	e04f      	b.n	801029e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80101fe:	69bb      	ldr	r3, [r7, #24]
 8010200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010204:	d04b      	beq.n	801029e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010206:	f7f3 fa59 	bl	80036bc <HAL_GetTick>
 801020a:	4602      	mov	r2, r0
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	69ba      	ldr	r2, [r7, #24]
 8010212:	429a      	cmp	r2, r3
 8010214:	d302      	bcc.n	801021c <UART_WaitOnFlagUntilTimeout+0x30>
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d101      	bne.n	8010220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801021c:	2303      	movs	r3, #3
 801021e:	e04e      	b.n	80102be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f003 0304 	and.w	r3, r3, #4
 801022a:	2b00      	cmp	r3, #0
 801022c:	d037      	beq.n	801029e <UART_WaitOnFlagUntilTimeout+0xb2>
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	2b80      	cmp	r3, #128	; 0x80
 8010232:	d034      	beq.n	801029e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	2b40      	cmp	r3, #64	; 0x40
 8010238:	d031      	beq.n	801029e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	69db      	ldr	r3, [r3, #28]
 8010240:	f003 0308 	and.w	r3, r3, #8
 8010244:	2b08      	cmp	r3, #8
 8010246:	d110      	bne.n	801026a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2208      	movs	r2, #8
 801024e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f000 f95b 	bl	801050c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2208      	movs	r2, #8
 801025a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2200      	movs	r2, #0
 8010262:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8010266:	2301      	movs	r3, #1
 8010268:	e029      	b.n	80102be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	69db      	ldr	r3, [r3, #28]
 8010270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010278:	d111      	bne.n	801029e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010284:	68f8      	ldr	r0, [r7, #12]
 8010286:	f000 f941 	bl	801050c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2220      	movs	r2, #32
 801028e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2200      	movs	r2, #0
 8010296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801029a:	2303      	movs	r3, #3
 801029c:	e00f      	b.n	80102be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	69da      	ldr	r2, [r3, #28]
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	4013      	ands	r3, r2
 80102a8:	68ba      	ldr	r2, [r7, #8]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	bf0c      	ite	eq
 80102ae:	2301      	moveq	r3, #1
 80102b0:	2300      	movne	r3, #0
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	461a      	mov	r2, r3
 80102b6:	79fb      	ldrb	r3, [r7, #7]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d0a0      	beq.n	80101fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80102bc:	2300      	movs	r3, #0
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3710      	adds	r7, #16
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
	...

080102c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102c8:	b480      	push	{r7}
 80102ca:	b0a3      	sub	sp, #140	; 0x8c
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	60b9      	str	r1, [r7, #8]
 80102d2:	4613      	mov	r3, r2
 80102d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	68ba      	ldr	r2, [r7, #8]
 80102da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	88fa      	ldrh	r2, [r7, #6]
 80102e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	88fa      	ldrh	r2, [r7, #6]
 80102e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2200      	movs	r2, #0
 80102f0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102fa:	d10e      	bne.n	801031a <UART_Start_Receive_IT+0x52>
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	691b      	ldr	r3, [r3, #16]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d105      	bne.n	8010310 <UART_Start_Receive_IT+0x48>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f240 12ff 	movw	r2, #511	; 0x1ff
 801030a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801030e:	e02d      	b.n	801036c <UART_Start_Receive_IT+0xa4>
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	22ff      	movs	r2, #255	; 0xff
 8010314:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010318:	e028      	b.n	801036c <UART_Start_Receive_IT+0xa4>
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	689b      	ldr	r3, [r3, #8]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10d      	bne.n	801033e <UART_Start_Receive_IT+0x76>
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	691b      	ldr	r3, [r3, #16]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d104      	bne.n	8010334 <UART_Start_Receive_IT+0x6c>
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	22ff      	movs	r2, #255	; 0xff
 801032e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010332:	e01b      	b.n	801036c <UART_Start_Receive_IT+0xa4>
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	227f      	movs	r2, #127	; 0x7f
 8010338:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801033c:	e016      	b.n	801036c <UART_Start_Receive_IT+0xa4>
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	689b      	ldr	r3, [r3, #8]
 8010342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010346:	d10d      	bne.n	8010364 <UART_Start_Receive_IT+0x9c>
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	691b      	ldr	r3, [r3, #16]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d104      	bne.n	801035a <UART_Start_Receive_IT+0x92>
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	227f      	movs	r2, #127	; 0x7f
 8010354:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010358:	e008      	b.n	801036c <UART_Start_Receive_IT+0xa4>
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	223f      	movs	r2, #63	; 0x3f
 801035e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010362:	e003      	b.n	801036c <UART_Start_Receive_IT+0xa4>
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2200      	movs	r2, #0
 8010368:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2200      	movs	r2, #0
 8010370:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	2222      	movs	r2, #34	; 0x22
 8010378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	3308      	adds	r3, #8
 8010382:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010386:	e853 3f00 	ldrex	r3, [r3]
 801038a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801038c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801038e:	f043 0301 	orr.w	r3, r3, #1
 8010392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	3308      	adds	r3, #8
 801039c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80103a0:	673a      	str	r2, [r7, #112]	; 0x70
 80103a2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80103a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80103a8:	e841 2300 	strex	r3, r2, [r1]
 80103ac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80103ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d1e3      	bne.n	801037c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103bc:	d14f      	bne.n	801045e <UART_Start_Receive_IT+0x196>
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80103c4:	88fa      	ldrh	r2, [r7, #6]
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d349      	bcc.n	801045e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103d2:	d107      	bne.n	80103e4 <UART_Start_Receive_IT+0x11c>
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	691b      	ldr	r3, [r3, #16]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d103      	bne.n	80103e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	4a47      	ldr	r2, [pc, #284]	; (80104fc <UART_Start_Receive_IT+0x234>)
 80103e0:	675a      	str	r2, [r3, #116]	; 0x74
 80103e2:	e002      	b.n	80103ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	4a46      	ldr	r2, [pc, #280]	; (8010500 <UART_Start_Receive_IT+0x238>)
 80103e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	691b      	ldr	r3, [r3, #16]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d01a      	beq.n	8010428 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103fa:	e853 3f00 	ldrex	r3, [r3]
 80103fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	461a      	mov	r2, r3
 8010410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010416:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010418:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801041a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801041c:	e841 2300 	strex	r3, r2, [r1]
 8010420:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010424:	2b00      	cmp	r3, #0
 8010426:	d1e4      	bne.n	80103f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	3308      	adds	r3, #8
 801042e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010432:	e853 3f00 	ldrex	r3, [r3]
 8010436:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801043e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	3308      	adds	r3, #8
 8010446:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010448:	64ba      	str	r2, [r7, #72]	; 0x48
 801044a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801044e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010450:	e841 2300 	strex	r3, r2, [r1]
 8010454:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1e5      	bne.n	8010428 <UART_Start_Receive_IT+0x160>
 801045c:	e046      	b.n	80104ec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	689b      	ldr	r3, [r3, #8]
 8010462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010466:	d107      	bne.n	8010478 <UART_Start_Receive_IT+0x1b0>
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	691b      	ldr	r3, [r3, #16]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d103      	bne.n	8010478 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	4a24      	ldr	r2, [pc, #144]	; (8010504 <UART_Start_Receive_IT+0x23c>)
 8010474:	675a      	str	r2, [r3, #116]	; 0x74
 8010476:	e002      	b.n	801047e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	4a23      	ldr	r2, [pc, #140]	; (8010508 <UART_Start_Receive_IT+0x240>)
 801047c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	691b      	ldr	r3, [r3, #16]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d019      	beq.n	80104ba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801048c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048e:	e853 3f00 	ldrex	r3, [r3]
 8010492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801049a:	677b      	str	r3, [r7, #116]	; 0x74
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	461a      	mov	r2, r3
 80104a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104a4:	637b      	str	r3, [r7, #52]	; 0x34
 80104a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80104aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104ac:	e841 2300 	strex	r3, r2, [r1]
 80104b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80104b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1e6      	bne.n	8010486 <UART_Start_Receive_IT+0x1be>
 80104b8:	e018      	b.n	80104ec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	e853 3f00 	ldrex	r3, [r3]
 80104c6:	613b      	str	r3, [r7, #16]
   return(result);
 80104c8:	693b      	ldr	r3, [r7, #16]
 80104ca:	f043 0320 	orr.w	r3, r3, #32
 80104ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	461a      	mov	r2, r3
 80104d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104d8:	623b      	str	r3, [r7, #32]
 80104da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104dc:	69f9      	ldr	r1, [r7, #28]
 80104de:	6a3a      	ldr	r2, [r7, #32]
 80104e0:	e841 2300 	strex	r3, r2, [r1]
 80104e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d1e6      	bne.n	80104ba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	378c      	adds	r7, #140	; 0x8c
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	08010d2d 	.word	0x08010d2d
 8010500:	080109cd 	.word	0x080109cd
 8010504:	08010815 	.word	0x08010815
 8010508:	0801065d 	.word	0x0801065d

0801050c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801050c:	b480      	push	{r7}
 801050e:	b095      	sub	sp, #84	; 0x54
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801051a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801051c:	e853 3f00 	ldrex	r3, [r3]
 8010520:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010528:	64fb      	str	r3, [r7, #76]	; 0x4c
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	461a      	mov	r2, r3
 8010530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010532:	643b      	str	r3, [r7, #64]	; 0x40
 8010534:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010536:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801053a:	e841 2300 	strex	r3, r2, [r1]
 801053e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010542:	2b00      	cmp	r3, #0
 8010544:	d1e6      	bne.n	8010514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	3308      	adds	r3, #8
 801054c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801054e:	6a3b      	ldr	r3, [r7, #32]
 8010550:	e853 3f00 	ldrex	r3, [r3]
 8010554:	61fb      	str	r3, [r7, #28]
   return(result);
 8010556:	69fa      	ldr	r2, [r7, #28]
 8010558:	4b1e      	ldr	r3, [pc, #120]	; (80105d4 <UART_EndRxTransfer+0xc8>)
 801055a:	4013      	ands	r3, r2
 801055c:	64bb      	str	r3, [r7, #72]	; 0x48
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3308      	adds	r3, #8
 8010564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010568:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801056a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801056c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801056e:	e841 2300 	strex	r3, r2, [r1]
 8010572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1e5      	bne.n	8010546 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801057e:	2b01      	cmp	r3, #1
 8010580:	d118      	bne.n	80105b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	e853 3f00 	ldrex	r3, [r3]
 801058e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	f023 0310 	bic.w	r3, r3, #16
 8010596:	647b      	str	r3, [r7, #68]	; 0x44
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	461a      	mov	r2, r3
 801059e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105a0:	61bb      	str	r3, [r7, #24]
 80105a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a4:	6979      	ldr	r1, [r7, #20]
 80105a6:	69ba      	ldr	r2, [r7, #24]
 80105a8:	e841 2300 	strex	r3, r2, [r1]
 80105ac:	613b      	str	r3, [r7, #16]
   return(result);
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d1e6      	bne.n	8010582 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2220      	movs	r2, #32
 80105b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2200      	movs	r2, #0
 80105c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2200      	movs	r2, #0
 80105c6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80105c8:	bf00      	nop
 80105ca:	3754      	adds	r7, #84	; 0x54
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr
 80105d4:	effffffe 	.word	0xeffffffe

080105d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2200      	movs	r2, #0
 80105ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	2200      	movs	r2, #0
 80105f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80105f6:	68f8      	ldr	r0, [r7, #12]
 80105f8:	f7fe ff2e 	bl	800f458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105fc:	bf00      	nop
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b088      	sub	sp, #32
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	e853 3f00 	ldrex	r3, [r3]
 8010618:	60bb      	str	r3, [r7, #8]
   return(result);
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010620:	61fb      	str	r3, [r7, #28]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	461a      	mov	r2, r3
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	61bb      	str	r3, [r7, #24]
 801062c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062e:	6979      	ldr	r1, [r7, #20]
 8010630:	69ba      	ldr	r2, [r7, #24]
 8010632:	e841 2300 	strex	r3, r2, [r1]
 8010636:	613b      	str	r3, [r7, #16]
   return(result);
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1e6      	bne.n	801060c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2220      	movs	r2, #32
 8010642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f7fe fef9 	bl	800f444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010652:	bf00      	nop
 8010654:	3720      	adds	r7, #32
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
	...

0801065c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b09c      	sub	sp, #112	; 0x70
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801066a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010674:	2b22      	cmp	r3, #34	; 0x22
 8010676:	f040 80be 	bne.w	80107f6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010680:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010684:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010688:	b2d9      	uxtb	r1, r3
 801068a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801068e:	b2da      	uxtb	r2, r3
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010694:	400a      	ands	r2, r1
 8010696:	b2d2      	uxtb	r2, r2
 8010698:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801069e:	1c5a      	adds	r2, r3, #1
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	3b01      	subs	r3, #1
 80106ae:	b29a      	uxth	r2, r3
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106bc:	b29b      	uxth	r3, r3
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f040 80a1 	bne.w	8010806 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106cc:	e853 3f00 	ldrex	r3, [r3]
 80106d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80106d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	461a      	mov	r2, r3
 80106e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80106e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80106e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106ea:	e841 2300 	strex	r3, r2, [r1]
 80106ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80106f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d1e6      	bne.n	80106c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	3308      	adds	r3, #8
 80106fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010700:	e853 3f00 	ldrex	r3, [r3]
 8010704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010708:	f023 0301 	bic.w	r3, r3, #1
 801070c:	667b      	str	r3, [r7, #100]	; 0x64
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	3308      	adds	r3, #8
 8010714:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010716:	647a      	str	r2, [r7, #68]	; 0x44
 8010718:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801071a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801071c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801071e:	e841 2300 	strex	r3, r2, [r1]
 8010722:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010726:	2b00      	cmp	r3, #0
 8010728:	d1e5      	bne.n	80106f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2220      	movs	r2, #32
 801072e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2200      	movs	r2, #0
 8010736:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4a33      	ldr	r2, [pc, #204]	; (8010810 <UART_RxISR_8BIT+0x1b4>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d01f      	beq.n	8010788 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010752:	2b00      	cmp	r3, #0
 8010754:	d018      	beq.n	8010788 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075e:	e853 3f00 	ldrex	r3, [r3]
 8010762:	623b      	str	r3, [r7, #32]
   return(result);
 8010764:	6a3b      	ldr	r3, [r7, #32]
 8010766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801076a:	663b      	str	r3, [r7, #96]	; 0x60
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	461a      	mov	r2, r3
 8010772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010774:	633b      	str	r3, [r7, #48]	; 0x30
 8010776:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801077a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801077c:	e841 2300 	strex	r3, r2, [r1]
 8010780:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010784:	2b00      	cmp	r3, #0
 8010786:	d1e6      	bne.n	8010756 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801078c:	2b01      	cmp	r3, #1
 801078e:	d12e      	bne.n	80107ee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2200      	movs	r2, #0
 8010794:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	e853 3f00 	ldrex	r3, [r3]
 80107a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f023 0310 	bic.w	r3, r3, #16
 80107aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	461a      	mov	r2, r3
 80107b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107b4:	61fb      	str	r3, [r7, #28]
 80107b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b8:	69b9      	ldr	r1, [r7, #24]
 80107ba:	69fa      	ldr	r2, [r7, #28]
 80107bc:	e841 2300 	strex	r3, r2, [r1]
 80107c0:	617b      	str	r3, [r7, #20]
   return(result);
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1e6      	bne.n	8010796 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	69db      	ldr	r3, [r3, #28]
 80107ce:	f003 0310 	and.w	r3, r3, #16
 80107d2:	2b10      	cmp	r3, #16
 80107d4:	d103      	bne.n	80107de <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	2210      	movs	r2, #16
 80107dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80107e4:	4619      	mov	r1, r3
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7fe fe40 	bl	800f46c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80107ec:	e00b      	b.n	8010806 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f7ef ff7e 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 80107f4:	e007      	b.n	8010806 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	699a      	ldr	r2, [r3, #24]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f042 0208 	orr.w	r2, r2, #8
 8010804:	619a      	str	r2, [r3, #24]
}
 8010806:	bf00      	nop
 8010808:	3770      	adds	r7, #112	; 0x70
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	58000c00 	.word	0x58000c00

08010814 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b09c      	sub	sp, #112	; 0x70
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010822:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801082c:	2b22      	cmp	r3, #34	; 0x22
 801082e:	f040 80be 	bne.w	80109ae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010838:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010840:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010842:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8010846:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801084a:	4013      	ands	r3, r2
 801084c:	b29a      	uxth	r2, r3
 801084e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010850:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010856:	1c9a      	adds	r2, r3, #2
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010862:	b29b      	uxth	r3, r3
 8010864:	3b01      	subs	r3, #1
 8010866:	b29a      	uxth	r2, r3
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010874:	b29b      	uxth	r3, r3
 8010876:	2b00      	cmp	r3, #0
 8010878:	f040 80a1 	bne.w	80109be <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010884:	e853 3f00 	ldrex	r3, [r3]
 8010888:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801088a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801088c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010890:	667b      	str	r3, [r7, #100]	; 0x64
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	461a      	mov	r2, r3
 8010898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801089a:	657b      	str	r3, [r7, #84]	; 0x54
 801089c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80108a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80108a2:	e841 2300 	strex	r3, r2, [r1]
 80108a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80108a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d1e6      	bne.n	801087c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	3308      	adds	r3, #8
 80108b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b8:	e853 3f00 	ldrex	r3, [r3]
 80108bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80108be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c0:	f023 0301 	bic.w	r3, r3, #1
 80108c4:	663b      	str	r3, [r7, #96]	; 0x60
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	3308      	adds	r3, #8
 80108cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80108ce:	643a      	str	r2, [r7, #64]	; 0x40
 80108d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80108d6:	e841 2300 	strex	r3, r2, [r1]
 80108da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80108dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1e5      	bne.n	80108ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2220      	movs	r2, #32
 80108e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4a33      	ldr	r2, [pc, #204]	; (80109c8 <UART_RxISR_16BIT+0x1b4>)
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d01f      	beq.n	8010940 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801090a:	2b00      	cmp	r3, #0
 801090c:	d018      	beq.n	8010940 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010914:	6a3b      	ldr	r3, [r7, #32]
 8010916:	e853 3f00 	ldrex	r3, [r3]
 801091a:	61fb      	str	r3, [r7, #28]
   return(result);
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	461a      	mov	r2, r3
 801092a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801092c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801092e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010934:	e841 2300 	strex	r3, r2, [r1]
 8010938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093c:	2b00      	cmp	r3, #0
 801093e:	d1e6      	bne.n	801090e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010944:	2b01      	cmp	r3, #1
 8010946:	d12e      	bne.n	80109a6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	e853 3f00 	ldrex	r3, [r3]
 801095a:	60bb      	str	r3, [r7, #8]
   return(result);
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	f023 0310 	bic.w	r3, r3, #16
 8010962:	65bb      	str	r3, [r7, #88]	; 0x58
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	461a      	mov	r2, r3
 801096a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801096c:	61bb      	str	r3, [r7, #24]
 801096e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010970:	6979      	ldr	r1, [r7, #20]
 8010972:	69ba      	ldr	r2, [r7, #24]
 8010974:	e841 2300 	strex	r3, r2, [r1]
 8010978:	613b      	str	r3, [r7, #16]
   return(result);
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d1e6      	bne.n	801094e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	69db      	ldr	r3, [r3, #28]
 8010986:	f003 0310 	and.w	r3, r3, #16
 801098a:	2b10      	cmp	r3, #16
 801098c:	d103      	bne.n	8010996 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	2210      	movs	r2, #16
 8010994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801099c:	4619      	mov	r1, r3
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f7fe fd64 	bl	800f46c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80109a4:	e00b      	b.n	80109be <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f7ef fea2 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 80109ac:	e007      	b.n	80109be <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	699a      	ldr	r2, [r3, #24]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f042 0208 	orr.w	r2, r2, #8
 80109bc:	619a      	str	r2, [r3, #24]
}
 80109be:	bf00      	nop
 80109c0:	3770      	adds	r7, #112	; 0x70
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	58000c00 	.word	0x58000c00

080109cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b0ac      	sub	sp, #176	; 0xb0
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	69db      	ldr	r3, [r3, #28]
 80109e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	689b      	ldr	r3, [r3, #8]
 80109f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a02:	2b22      	cmp	r3, #34	; 0x22
 8010a04:	f040 8180 	bne.w	8010d08 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010a0e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010a12:	e123      	b.n	8010c5c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a1a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010a1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010a22:	b2d9      	uxtb	r1, r3
 8010a24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010a28:	b2da      	uxtb	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a2e:	400a      	ands	r2, r1
 8010a30:	b2d2      	uxtb	r2, r2
 8010a32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a38:	1c5a      	adds	r2, r3, #1
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	3b01      	subs	r3, #1
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	69db      	ldr	r3, [r3, #28]
 8010a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a5e:	f003 0307 	and.w	r3, r3, #7
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d053      	beq.n	8010b0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a6a:	f003 0301 	and.w	r3, r3, #1
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d011      	beq.n	8010a96 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d00b      	beq.n	8010a96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2201      	movs	r2, #1
 8010a84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a8c:	f043 0201 	orr.w	r2, r3, #1
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a9a:	f003 0302 	and.w	r3, r3, #2
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d011      	beq.n	8010ac6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010aa6:	f003 0301 	and.w	r3, r3, #1
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00b      	beq.n	8010ac6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2202      	movs	r2, #2
 8010ab4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010abc:	f043 0204 	orr.w	r2, r3, #4
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010aca:	f003 0304 	and.w	r3, r3, #4
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d011      	beq.n	8010af6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010ad6:	f003 0301 	and.w	r3, r3, #1
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d00b      	beq.n	8010af6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	2204      	movs	r2, #4
 8010ae4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010aec:	f043 0202 	orr.w	r2, r3, #2
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d006      	beq.n	8010b0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f7fe fca9 	bl	800f458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	f040 80a0 	bne.w	8010c5c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b24:	e853 3f00 	ldrex	r3, [r3]
 8010b28:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	461a      	mov	r2, r3
 8010b3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010b40:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b42:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010b44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010b46:	e841 2300 	strex	r3, r2, [r1]
 8010b4a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d1e4      	bne.n	8010b1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	3308      	adds	r3, #8
 8010b58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b5c:	e853 3f00 	ldrex	r3, [r3]
 8010b60:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010b62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b64:	4b6e      	ldr	r3, [pc, #440]	; (8010d20 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010b66:	4013      	ands	r3, r2
 8010b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	3308      	adds	r3, #8
 8010b72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b76:	66ba      	str	r2, [r7, #104]	; 0x68
 8010b78:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b7a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010b7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b7e:	e841 2300 	strex	r3, r2, [r1]
 8010b82:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d1e3      	bne.n	8010b52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2220      	movs	r2, #32
 8010b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2200      	movs	r2, #0
 8010b96:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	4a60      	ldr	r2, [pc, #384]	; (8010d24 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d021      	beq.n	8010bec <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d01a      	beq.n	8010bec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bbe:	e853 3f00 	ldrex	r3, [r3]
 8010bc2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8010bda:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010bde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010be0:	e841 2300 	strex	r3, r2, [r1]
 8010be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d1e4      	bne.n	8010bb6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d130      	bne.n	8010c56 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c02:	e853 3f00 	ldrex	r3, [r3]
 8010c06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0a:	f023 0310 	bic.w	r3, r3, #16
 8010c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	461a      	mov	r2, r3
 8010c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8010c1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010c24:	e841 2300 	strex	r3, r2, [r1]
 8010c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d1e4      	bne.n	8010bfa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	69db      	ldr	r3, [r3, #28]
 8010c36:	f003 0310 	and.w	r3, r3, #16
 8010c3a:	2b10      	cmp	r3, #16
 8010c3c:	d103      	bne.n	8010c46 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	2210      	movs	r2, #16
 8010c44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f7fe fc0c 	bl	800f46c <HAL_UARTEx_RxEventCallback>
 8010c54:	e002      	b.n	8010c5c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f7ef fd4a 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010c5c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d006      	beq.n	8010c72 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c68:	f003 0320 	and.w	r3, r3, #32
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	f47f aed1 	bne.w	8010a14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c78:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010c7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d049      	beq.n	8010d18 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010c8a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d242      	bcs.n	8010d18 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	3308      	adds	r3, #8
 8010c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c9a:	6a3b      	ldr	r3, [r7, #32]
 8010c9c:	e853 3f00 	ldrex	r3, [r3]
 8010ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	3308      	adds	r3, #8
 8010cb2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cbe:	e841 2300 	strex	r3, r2, [r1]
 8010cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d1e3      	bne.n	8010c92 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4a16      	ldr	r2, [pc, #88]	; (8010d28 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010cce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	e853 3f00 	ldrex	r3, [r3]
 8010cdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	f043 0320 	orr.w	r3, r3, #32
 8010ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	461a      	mov	r2, r3
 8010cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cf2:	61bb      	str	r3, [r7, #24]
 8010cf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf6:	6979      	ldr	r1, [r7, #20]
 8010cf8:	69ba      	ldr	r2, [r7, #24]
 8010cfa:	e841 2300 	strex	r3, r2, [r1]
 8010cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1e4      	bne.n	8010cd0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d06:	e007      	b.n	8010d18 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	699a      	ldr	r2, [r3, #24]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f042 0208 	orr.w	r2, r2, #8
 8010d16:	619a      	str	r2, [r3, #24]
}
 8010d18:	bf00      	nop
 8010d1a:	37b0      	adds	r7, #176	; 0xb0
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	effffffe 	.word	0xeffffffe
 8010d24:	58000c00 	.word	0x58000c00
 8010d28:	0801065d 	.word	0x0801065d

08010d2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b0ae      	sub	sp, #184	; 0xb8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d3a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	69db      	ldr	r3, [r3, #28]
 8010d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	689b      	ldr	r3, [r3, #8]
 8010d58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d62:	2b22      	cmp	r3, #34	; 0x22
 8010d64:	f040 8184 	bne.w	8011070 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d6e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d72:	e127      	b.n	8010fc4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d7a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010d86:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8010d8a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010d8e:	4013      	ands	r3, r2
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d9c:	1c9a      	adds	r2, r3, #2
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	3b01      	subs	r3, #1
 8010dac:	b29a      	uxth	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	69db      	ldr	r3, [r3, #28]
 8010dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010dc2:	f003 0307 	and.w	r3, r3, #7
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d053      	beq.n	8010e72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010dca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010dce:	f003 0301 	and.w	r3, r3, #1
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d011      	beq.n	8010dfa <UART_RxISR_16BIT_FIFOEN+0xce>
 8010dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d00b      	beq.n	8010dfa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	2201      	movs	r2, #1
 8010de8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010df0:	f043 0201 	orr.w	r2, r3, #1
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010dfe:	f003 0302 	and.w	r3, r3, #2
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d011      	beq.n	8010e2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010e0a:	f003 0301 	and.w	r3, r3, #1
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d00b      	beq.n	8010e2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2202      	movs	r2, #2
 8010e18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e20:	f043 0204 	orr.w	r2, r3, #4
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010e2e:	f003 0304 	and.w	r3, r3, #4
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d011      	beq.n	8010e5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010e3a:	f003 0301 	and.w	r3, r3, #1
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00b      	beq.n	8010e5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2204      	movs	r2, #4
 8010e48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e50:	f043 0202 	orr.w	r2, r3, #2
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d006      	beq.n	8010e72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7fe faf7 	bl	800f458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f040 80a2 	bne.w	8010fc4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e88:	e853 3f00 	ldrex	r3, [r3]
 8010e8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010eaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010eae:	e841 2300 	strex	r3, r2, [r1]
 8010eb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d1e2      	bne.n	8010e80 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	3308      	adds	r3, #8
 8010ec0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ec4:	e853 3f00 	ldrex	r3, [r3]
 8010ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010eca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010ecc:	4b6e      	ldr	r3, [pc, #440]	; (8011088 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010ece:	4013      	ands	r3, r2
 8010ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	3308      	adds	r3, #8
 8010eda:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010ede:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010ee0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ee2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ee4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ee6:	e841 2300 	strex	r3, r2, [r1]
 8010eea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d1e3      	bne.n	8010eba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2220      	movs	r2, #32
 8010ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2200      	movs	r2, #0
 8010efe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2200      	movs	r2, #0
 8010f04:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a60      	ldr	r2, [pc, #384]	; (801108c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d021      	beq.n	8010f54 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d01a      	beq.n	8010f54 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f26:	e853 3f00 	ldrex	r3, [r3]
 8010f2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f48:	e841 2300 	strex	r3, r2, [r1]
 8010f4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d1e4      	bne.n	8010f1e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d130      	bne.n	8010fbe <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6a:	e853 3f00 	ldrex	r3, [r3]
 8010f6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f72:	f023 0310 	bic.w	r3, r3, #16
 8010f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	461a      	mov	r2, r3
 8010f80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f84:	647b      	str	r3, [r7, #68]	; 0x44
 8010f86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f8c:	e841 2300 	strex	r3, r2, [r1]
 8010f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1e4      	bne.n	8010f62 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	69db      	ldr	r3, [r3, #28]
 8010f9e:	f003 0310 	and.w	r3, r3, #16
 8010fa2:	2b10      	cmp	r3, #16
 8010fa4:	d103      	bne.n	8010fae <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2210      	movs	r2, #16
 8010fac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010fb4:	4619      	mov	r1, r3
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f7fe fa58 	bl	800f46c <HAL_UARTEx_RxEventCallback>
 8010fbc:	e002      	b.n	8010fc4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f7ef fb96 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010fc4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d006      	beq.n	8010fda <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010fcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010fd0:	f003 0320 	and.w	r3, r3, #32
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	f47f aecd 	bne.w	8010d74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fe0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010fe4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d049      	beq.n	8011080 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010ff2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d242      	bcs.n	8011080 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	3308      	adds	r3, #8
 8011000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011004:	e853 3f00 	ldrex	r3, [r3]
 8011008:	623b      	str	r3, [r7, #32]
   return(result);
 801100a:	6a3b      	ldr	r3, [r7, #32]
 801100c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	3308      	adds	r3, #8
 801101a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801101e:	633a      	str	r2, [r7, #48]	; 0x30
 8011020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011026:	e841 2300 	strex	r3, r2, [r1]
 801102a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102e:	2b00      	cmp	r3, #0
 8011030:	d1e3      	bne.n	8010ffa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	4a16      	ldr	r2, [pc, #88]	; (8011090 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011036:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	e853 3f00 	ldrex	r3, [r3]
 8011044:	60fb      	str	r3, [r7, #12]
   return(result);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	f043 0320 	orr.w	r3, r3, #32
 801104c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	461a      	mov	r2, r3
 8011056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801105a:	61fb      	str	r3, [r7, #28]
 801105c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801105e:	69b9      	ldr	r1, [r7, #24]
 8011060:	69fa      	ldr	r2, [r7, #28]
 8011062:	e841 2300 	strex	r3, r2, [r1]
 8011066:	617b      	str	r3, [r7, #20]
   return(result);
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1e4      	bne.n	8011038 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801106e:	e007      	b.n	8011080 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	699a      	ldr	r2, [r3, #24]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f042 0208 	orr.w	r2, r2, #8
 801107e:	619a      	str	r2, [r3, #24]
}
 8011080:	bf00      	nop
 8011082:	37b8      	adds	r7, #184	; 0xb8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	effffffe 	.word	0xeffffffe
 801108c:	58000c00 	.word	0x58000c00
 8011090:	08010815 	.word	0x08010815

08011094 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801109c:	bf00      	nop
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80110b0:	bf00      	nop
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80110c4:	bf00      	nop
 80110c6:	370c      	adds	r7, #12
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr

080110d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80110d0:	b480      	push	{r7}
 80110d2:	b085      	sub	sp, #20
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d101      	bne.n	80110e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80110e2:	2302      	movs	r3, #2
 80110e4:	e027      	b.n	8011136 <HAL_UARTEx_DisableFifoMode+0x66>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2201      	movs	r2, #1
 80110ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2224      	movs	r2, #36	; 0x24
 80110f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	f022 0201 	bic.w	r2, r2, #1
 801110c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011114:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2200      	movs	r2, #0
 801111a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	68fa      	ldr	r2, [r7, #12]
 8011122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2220      	movs	r2, #32
 8011128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011134:	2300      	movs	r3, #0
}
 8011136:	4618      	mov	r0, r3
 8011138:	3714      	adds	r7, #20
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr

08011142 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b084      	sub	sp, #16
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011152:	2b01      	cmp	r3, #1
 8011154:	d101      	bne.n	801115a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011156:	2302      	movs	r3, #2
 8011158:	e02d      	b.n	80111b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2201      	movs	r2, #1
 801115e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2224      	movs	r2, #36	; 0x24
 8011166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f022 0201 	bic.w	r2, r2, #1
 8011180:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	689b      	ldr	r3, [r3, #8]
 8011188:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	683a      	ldr	r2, [r7, #0]
 8011192:	430a      	orrs	r2, r1
 8011194:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 f850 	bl	801123c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	68fa      	ldr	r2, [r7, #12]
 80111a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2220      	movs	r2, #32
 80111a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80111b4:	2300      	movs	r3, #0
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3710      	adds	r7, #16
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}

080111be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80111be:	b580      	push	{r7, lr}
 80111c0:	b084      	sub	sp, #16
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
 80111c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d101      	bne.n	80111d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80111d2:	2302      	movs	r3, #2
 80111d4:	e02d      	b.n	8011232 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2201      	movs	r2, #1
 80111da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2224      	movs	r2, #36	; 0x24
 80111e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f022 0201 	bic.w	r2, r2, #1
 80111fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	689b      	ldr	r3, [r3, #8]
 8011204:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	683a      	ldr	r2, [r7, #0]
 801120e:	430a      	orrs	r2, r1
 8011210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 f812 	bl	801123c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2220      	movs	r2, #32
 8011224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011230:	2300      	movs	r3, #0
}
 8011232:	4618      	mov	r0, r3
 8011234:	3710      	adds	r7, #16
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
	...

0801123c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801123c:	b480      	push	{r7}
 801123e:	b085      	sub	sp, #20
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011248:	2b00      	cmp	r3, #0
 801124a:	d108      	bne.n	801125e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2201      	movs	r2, #1
 8011250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2201      	movs	r2, #1
 8011258:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801125c:	e031      	b.n	80112c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801125e:	2310      	movs	r3, #16
 8011260:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011262:	2310      	movs	r3, #16
 8011264:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	689b      	ldr	r3, [r3, #8]
 801126c:	0e5b      	lsrs	r3, r3, #25
 801126e:	b2db      	uxtb	r3, r3
 8011270:	f003 0307 	and.w	r3, r3, #7
 8011274:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	689b      	ldr	r3, [r3, #8]
 801127c:	0f5b      	lsrs	r3, r3, #29
 801127e:	b2db      	uxtb	r3, r3
 8011280:	f003 0307 	and.w	r3, r3, #7
 8011284:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011286:	7bbb      	ldrb	r3, [r7, #14]
 8011288:	7b3a      	ldrb	r2, [r7, #12]
 801128a:	4911      	ldr	r1, [pc, #68]	; (80112d0 <UARTEx_SetNbDataToProcess+0x94>)
 801128c:	5c8a      	ldrb	r2, [r1, r2]
 801128e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011292:	7b3a      	ldrb	r2, [r7, #12]
 8011294:	490f      	ldr	r1, [pc, #60]	; (80112d4 <UARTEx_SetNbDataToProcess+0x98>)
 8011296:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011298:	fb93 f3f2 	sdiv	r3, r3, r2
 801129c:	b29a      	uxth	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112a4:	7bfb      	ldrb	r3, [r7, #15]
 80112a6:	7b7a      	ldrb	r2, [r7, #13]
 80112a8:	4909      	ldr	r1, [pc, #36]	; (80112d0 <UARTEx_SetNbDataToProcess+0x94>)
 80112aa:	5c8a      	ldrb	r2, [r1, r2]
 80112ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80112b0:	7b7a      	ldrb	r2, [r7, #13]
 80112b2:	4908      	ldr	r1, [pc, #32]	; (80112d4 <UARTEx_SetNbDataToProcess+0x98>)
 80112b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80112ba:	b29a      	uxth	r2, r3
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80112c2:	bf00      	nop
 80112c4:	3714      	adds	r7, #20
 80112c6:	46bd      	mov	sp, r7
 80112c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop
 80112d0:	08016114 	.word	0x08016114
 80112d4:	0801611c 	.word	0x0801611c

080112d8 <__NVIC_SetPriority>:
{
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
 80112de:	4603      	mov	r3, r0
 80112e0:	6039      	str	r1, [r7, #0]
 80112e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80112e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	db0a      	blt.n	8011302 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	b2da      	uxtb	r2, r3
 80112f0:	490c      	ldr	r1, [pc, #48]	; (8011324 <__NVIC_SetPriority+0x4c>)
 80112f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112f6:	0112      	lsls	r2, r2, #4
 80112f8:	b2d2      	uxtb	r2, r2
 80112fa:	440b      	add	r3, r1
 80112fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011300:	e00a      	b.n	8011318 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	b2da      	uxtb	r2, r3
 8011306:	4908      	ldr	r1, [pc, #32]	; (8011328 <__NVIC_SetPriority+0x50>)
 8011308:	88fb      	ldrh	r3, [r7, #6]
 801130a:	f003 030f 	and.w	r3, r3, #15
 801130e:	3b04      	subs	r3, #4
 8011310:	0112      	lsls	r2, r2, #4
 8011312:	b2d2      	uxtb	r2, r2
 8011314:	440b      	add	r3, r1
 8011316:	761a      	strb	r2, [r3, #24]
}
 8011318:	bf00      	nop
 801131a:	370c      	adds	r7, #12
 801131c:	46bd      	mov	sp, r7
 801131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011322:	4770      	bx	lr
 8011324:	e000e100 	.word	0xe000e100
 8011328:	e000ed00 	.word	0xe000ed00

0801132c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801132c:	b580      	push	{r7, lr}
 801132e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011330:	4b05      	ldr	r3, [pc, #20]	; (8011348 <SysTick_Handler+0x1c>)
 8011332:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011334:	f002 fc16 	bl	8013b64 <xTaskGetSchedulerState>
 8011338:	4603      	mov	r3, r0
 801133a:	2b01      	cmp	r3, #1
 801133c:	d001      	beq.n	8011342 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801133e:	f003 fa33 	bl	80147a8 <xPortSysTickHandler>
  }
}
 8011342:	bf00      	nop
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	e000e010 	.word	0xe000e010

0801134c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801134c:	b580      	push	{r7, lr}
 801134e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011350:	2100      	movs	r1, #0
 8011352:	f06f 0004 	mvn.w	r0, #4
 8011356:	f7ff ffbf 	bl	80112d8 <__NVIC_SetPriority>
#endif
}
 801135a:	bf00      	nop
 801135c:	bd80      	pop	{r7, pc}
	...

08011360 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011366:	f3ef 8305 	mrs	r3, IPSR
 801136a:	603b      	str	r3, [r7, #0]
  return(result);
 801136c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801136e:	2b00      	cmp	r3, #0
 8011370:	d003      	beq.n	801137a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011372:	f06f 0305 	mvn.w	r3, #5
 8011376:	607b      	str	r3, [r7, #4]
 8011378:	e00c      	b.n	8011394 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801137a:	4b0a      	ldr	r3, [pc, #40]	; (80113a4 <osKernelInitialize+0x44>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d105      	bne.n	801138e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011382:	4b08      	ldr	r3, [pc, #32]	; (80113a4 <osKernelInitialize+0x44>)
 8011384:	2201      	movs	r2, #1
 8011386:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011388:	2300      	movs	r3, #0
 801138a:	607b      	str	r3, [r7, #4]
 801138c:	e002      	b.n	8011394 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801138e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011392:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011394:	687b      	ldr	r3, [r7, #4]
}
 8011396:	4618      	mov	r0, r3
 8011398:	370c      	adds	r7, #12
 801139a:	46bd      	mov	sp, r7
 801139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop
 80113a4:	24000c3c 	.word	0x24000c3c

080113a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113ae:	f3ef 8305 	mrs	r3, IPSR
 80113b2:	603b      	str	r3, [r7, #0]
  return(result);
 80113b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d003      	beq.n	80113c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80113ba:	f06f 0305 	mvn.w	r3, #5
 80113be:	607b      	str	r3, [r7, #4]
 80113c0:	e010      	b.n	80113e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80113c2:	4b0b      	ldr	r3, [pc, #44]	; (80113f0 <osKernelStart+0x48>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2b01      	cmp	r3, #1
 80113c8:	d109      	bne.n	80113de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80113ca:	f7ff ffbf 	bl	801134c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80113ce:	4b08      	ldr	r3, [pc, #32]	; (80113f0 <osKernelStart+0x48>)
 80113d0:	2202      	movs	r2, #2
 80113d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80113d4:	f001 fee0 	bl	8013198 <vTaskStartScheduler>
      stat = osOK;
 80113d8:	2300      	movs	r3, #0
 80113da:	607b      	str	r3, [r7, #4]
 80113dc:	e002      	b.n	80113e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80113de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80113e4:	687b      	ldr	r3, [r7, #4]
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3708      	adds	r7, #8
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	bf00      	nop
 80113f0:	24000c3c 	.word	0x24000c3c

080113f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b08e      	sub	sp, #56	; 0x38
 80113f8:	af04      	add	r7, sp, #16
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011400:	2300      	movs	r3, #0
 8011402:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011404:	f3ef 8305 	mrs	r3, IPSR
 8011408:	617b      	str	r3, [r7, #20]
  return(result);
 801140a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801140c:	2b00      	cmp	r3, #0
 801140e:	d17e      	bne.n	801150e <osThreadNew+0x11a>
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d07b      	beq.n	801150e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011416:	2380      	movs	r3, #128	; 0x80
 8011418:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801141a:	2318      	movs	r3, #24
 801141c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801141e:	2300      	movs	r3, #0
 8011420:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011426:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d045      	beq.n	80114ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d002      	beq.n	801143c <osThreadNew+0x48>
        name = attr->name;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	699b      	ldr	r3, [r3, #24]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d002      	beq.n	801144a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	699b      	ldr	r3, [r3, #24]
 8011448:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d008      	beq.n	8011462 <osThreadNew+0x6e>
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	2b38      	cmp	r3, #56	; 0x38
 8011454:	d805      	bhi.n	8011462 <osThreadNew+0x6e>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	f003 0301 	and.w	r3, r3, #1
 801145e:	2b00      	cmp	r3, #0
 8011460:	d001      	beq.n	8011466 <osThreadNew+0x72>
        return (NULL);
 8011462:	2300      	movs	r3, #0
 8011464:	e054      	b.n	8011510 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	695b      	ldr	r3, [r3, #20]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d003      	beq.n	8011476 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	695b      	ldr	r3, [r3, #20]
 8011472:	089b      	lsrs	r3, r3, #2
 8011474:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	689b      	ldr	r3, [r3, #8]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d00e      	beq.n	801149c <osThreadNew+0xa8>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	68db      	ldr	r3, [r3, #12]
 8011482:	2b5b      	cmp	r3, #91	; 0x5b
 8011484:	d90a      	bls.n	801149c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801148a:	2b00      	cmp	r3, #0
 801148c:	d006      	beq.n	801149c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	695b      	ldr	r3, [r3, #20]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d002      	beq.n	801149c <osThreadNew+0xa8>
        mem = 1;
 8011496:	2301      	movs	r3, #1
 8011498:	61bb      	str	r3, [r7, #24]
 801149a:	e010      	b.n	80114be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	689b      	ldr	r3, [r3, #8]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d10c      	bne.n	80114be <osThreadNew+0xca>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d108      	bne.n	80114be <osThreadNew+0xca>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	691b      	ldr	r3, [r3, #16]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d104      	bne.n	80114be <osThreadNew+0xca>
          mem = 0;
 80114b4:	2300      	movs	r3, #0
 80114b6:	61bb      	str	r3, [r7, #24]
 80114b8:	e001      	b.n	80114be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80114ba:	2300      	movs	r3, #0
 80114bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d110      	bne.n	80114e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80114c8:	687a      	ldr	r2, [r7, #4]
 80114ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80114cc:	9202      	str	r2, [sp, #8]
 80114ce:	9301      	str	r3, [sp, #4]
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	9300      	str	r3, [sp, #0]
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	6a3a      	ldr	r2, [r7, #32]
 80114d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	f001 fb6c 	bl	8012bb8 <xTaskCreateStatic>
 80114e0:	4603      	mov	r3, r0
 80114e2:	613b      	str	r3, [r7, #16]
 80114e4:	e013      	b.n	801150e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80114e6:	69bb      	ldr	r3, [r7, #24]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d110      	bne.n	801150e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80114ec:	6a3b      	ldr	r3, [r7, #32]
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	f107 0310 	add.w	r3, r7, #16
 80114f4:	9301      	str	r3, [sp, #4]
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114fe:	68f8      	ldr	r0, [r7, #12]
 8011500:	f001 fbb7 	bl	8012c72 <xTaskCreate>
 8011504:	4603      	mov	r3, r0
 8011506:	2b01      	cmp	r3, #1
 8011508:	d001      	beq.n	801150e <osThreadNew+0x11a>
            hTask = NULL;
 801150a:	2300      	movs	r3, #0
 801150c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801150e:	693b      	ldr	r3, [r7, #16]
}
 8011510:	4618      	mov	r0, r3
 8011512:	3728      	adds	r7, #40	; 0x28
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}

08011518 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801151e:	f3ef 8305 	mrs	r3, IPSR
 8011522:	603b      	str	r3, [r7, #0]
  return(result);
 8011524:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011526:	2b00      	cmp	r3, #0
 8011528:	d003      	beq.n	8011532 <osThreadYield+0x1a>
    stat = osErrorISR;
 801152a:	f06f 0305 	mvn.w	r3, #5
 801152e:	607b      	str	r3, [r7, #4]
 8011530:	e009      	b.n	8011546 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8011532:	2300      	movs	r3, #0
 8011534:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8011536:	4b07      	ldr	r3, [pc, #28]	; (8011554 <osThreadYield+0x3c>)
 8011538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801153c:	601a      	str	r2, [r3, #0]
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8011546:	687b      	ldr	r3, [r7, #4]
}
 8011548:	4618      	mov	r0, r3
 801154a:	370c      	adds	r7, #12
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr
 8011554:	e000ed04 	.word	0xe000ed04

08011558 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8011558:	b580      	push	{r7, lr}
 801155a:	b086      	sub	sp, #24
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011564:	f3ef 8305 	mrs	r3, IPSR
 8011568:	60fb      	str	r3, [r7, #12]
  return(result);
 801156a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801156c:	2b00      	cmp	r3, #0
 801156e:	d003      	beq.n	8011578 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8011570:	f06f 0305 	mvn.w	r3, #5
 8011574:	617b      	str	r3, [r7, #20]
 8011576:	e00b      	b.n	8011590 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d103      	bne.n	8011586 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801157e:	f06f 0303 	mvn.w	r3, #3
 8011582:	617b      	str	r3, [r7, #20]
 8011584:	e004      	b.n	8011590 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8011586:	2300      	movs	r3, #0
 8011588:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 801158a:	6938      	ldr	r0, [r7, #16]
 801158c:	f001 fcea 	bl	8012f64 <vTaskSuspend>
  }

  return (stat);
 8011590:	697b      	ldr	r3, [r7, #20]
}
 8011592:	4618      	mov	r0, r3
 8011594:	3718      	adds	r7, #24
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}

0801159a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801159a:	b580      	push	{r7, lr}
 801159c:	b084      	sub	sp, #16
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115a2:	f3ef 8305 	mrs	r3, IPSR
 80115a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80115a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d003      	beq.n	80115b6 <osDelay+0x1c>
    stat = osErrorISR;
 80115ae:	f06f 0305 	mvn.w	r3, #5
 80115b2:	60fb      	str	r3, [r7, #12]
 80115b4:	e007      	b.n	80115c6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80115b6:	2300      	movs	r3, #0
 80115b8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d002      	beq.n	80115c6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f001 fc9b 	bl	8012efc <vTaskDelay>
    }
  }

  return (stat);
 80115c6:	68fb      	ldr	r3, [r7, #12]
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3710      	adds	r7, #16
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}

080115d0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b086      	sub	sp, #24
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80115d8:	2300      	movs	r3, #0
 80115da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115dc:	f3ef 8305 	mrs	r3, IPSR
 80115e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80115e2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d12d      	bne.n	8011644 <osEventFlagsNew+0x74>
    mem = -1;
 80115e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115ec:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d015      	beq.n	8011620 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	689b      	ldr	r3, [r3, #8]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d006      	beq.n	801160a <osEventFlagsNew+0x3a>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	2b1f      	cmp	r3, #31
 8011602:	d902      	bls.n	801160a <osEventFlagsNew+0x3a>
        mem = 1;
 8011604:	2301      	movs	r3, #1
 8011606:	613b      	str	r3, [r7, #16]
 8011608:	e00c      	b.n	8011624 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d108      	bne.n	8011624 <osEventFlagsNew+0x54>
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	68db      	ldr	r3, [r3, #12]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d104      	bne.n	8011624 <osEventFlagsNew+0x54>
          mem = 0;
 801161a:	2300      	movs	r3, #0
 801161c:	613b      	str	r3, [r7, #16]
 801161e:	e001      	b.n	8011624 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8011620:	2300      	movs	r3, #0
 8011622:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	2b01      	cmp	r3, #1
 8011628:	d106      	bne.n	8011638 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	689b      	ldr	r3, [r3, #8]
 801162e:	4618      	mov	r0, r3
 8011630:	f000 fa3e 	bl	8011ab0 <xEventGroupCreateStatic>
 8011634:	6178      	str	r0, [r7, #20]
 8011636:	e005      	b.n	8011644 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d102      	bne.n	8011644 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801163e:	f000 fa6e 	bl	8011b1e <xEventGroupCreate>
 8011642:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8011644:	697b      	ldr	r3, [r7, #20]
}
 8011646:	4618      	mov	r0, r3
 8011648:	3718      	adds	r7, #24
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
	...

08011650 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d004      	beq.n	801166e <osEventFlagsSet+0x1e>
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801166a:	2b00      	cmp	r3, #0
 801166c:	d003      	beq.n	8011676 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801166e:	f06f 0303 	mvn.w	r3, #3
 8011672:	617b      	str	r3, [r7, #20]
 8011674:	e028      	b.n	80116c8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011676:	f3ef 8305 	mrs	r3, IPSR
 801167a:	60fb      	str	r3, [r7, #12]
  return(result);
 801167c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801167e:	2b00      	cmp	r3, #0
 8011680:	d01d      	beq.n	80116be <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8011682:	2300      	movs	r3, #0
 8011684:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8011686:	f107 0308 	add.w	r3, r7, #8
 801168a:	461a      	mov	r2, r3
 801168c:	6839      	ldr	r1, [r7, #0]
 801168e:	6938      	ldr	r0, [r7, #16]
 8011690:	f000 fbe8 	bl	8011e64 <xEventGroupSetBitsFromISR>
 8011694:	4603      	mov	r3, r0
 8011696:	2b00      	cmp	r3, #0
 8011698:	d103      	bne.n	80116a2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801169a:	f06f 0302 	mvn.w	r3, #2
 801169e:	617b      	str	r3, [r7, #20]
 80116a0:	e012      	b.n	80116c8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d00d      	beq.n	80116c8 <osEventFlagsSet+0x78>
 80116ac:	4b09      	ldr	r3, [pc, #36]	; (80116d4 <osEventFlagsSet+0x84>)
 80116ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116b2:	601a      	str	r2, [r3, #0]
 80116b4:	f3bf 8f4f 	dsb	sy
 80116b8:	f3bf 8f6f 	isb	sy
 80116bc:	e004      	b.n	80116c8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80116be:	6839      	ldr	r1, [r7, #0]
 80116c0:	6938      	ldr	r0, [r7, #16]
 80116c2:	f000 fb15 	bl	8011cf0 <xEventGroupSetBits>
 80116c6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80116c8:	697b      	ldr	r3, [r7, #20]
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3718      	adds	r7, #24
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
 80116d2:	bf00      	nop
 80116d4:	e000ed04 	.word	0xe000ed04

080116d8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80116d8:	b580      	push	{r7, lr}
 80116da:	b08c      	sub	sp, #48	; 0x30
 80116dc:	af02      	add	r7, sp, #8
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	607a      	str	r2, [r7, #4]
 80116e4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80116ea:	69bb      	ldr	r3, [r7, #24]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d004      	beq.n	80116fa <osEventFlagsWait+0x22>
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d003      	beq.n	8011702 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80116fa:	f06f 0303 	mvn.w	r3, #3
 80116fe:	61fb      	str	r3, [r7, #28]
 8011700:	e04b      	b.n	801179a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011702:	f3ef 8305 	mrs	r3, IPSR
 8011706:	617b      	str	r3, [r7, #20]
  return(result);
 8011708:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801170a:	2b00      	cmp	r3, #0
 801170c:	d003      	beq.n	8011716 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801170e:	f06f 0305 	mvn.w	r3, #5
 8011712:	61fb      	str	r3, [r7, #28]
 8011714:	e041      	b.n	801179a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f003 0301 	and.w	r3, r3, #1
 801171c:	2b00      	cmp	r3, #0
 801171e:	d002      	beq.n	8011726 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8011720:	2301      	movs	r3, #1
 8011722:	627b      	str	r3, [r7, #36]	; 0x24
 8011724:	e001      	b.n	801172a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8011726:	2300      	movs	r3, #0
 8011728:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f003 0302 	and.w	r3, r3, #2
 8011730:	2b00      	cmp	r3, #0
 8011732:	d002      	beq.n	801173a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8011734:	2300      	movs	r3, #0
 8011736:	623b      	str	r3, [r7, #32]
 8011738:	e001      	b.n	801173e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801173a:	2301      	movs	r3, #1
 801173c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	9300      	str	r3, [sp, #0]
 8011742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011744:	6a3a      	ldr	r2, [r7, #32]
 8011746:	68b9      	ldr	r1, [r7, #8]
 8011748:	69b8      	ldr	r0, [r7, #24]
 801174a:	f000 fa03 	bl	8011b54 <xEventGroupWaitBits>
 801174e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f003 0301 	and.w	r3, r3, #1
 8011756:	2b00      	cmp	r3, #0
 8011758:	d010      	beq.n	801177c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801175a:	68ba      	ldr	r2, [r7, #8]
 801175c:	69fb      	ldr	r3, [r7, #28]
 801175e:	4013      	ands	r3, r2
 8011760:	68ba      	ldr	r2, [r7, #8]
 8011762:	429a      	cmp	r2, r3
 8011764:	d019      	beq.n	801179a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d003      	beq.n	8011774 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801176c:	f06f 0301 	mvn.w	r3, #1
 8011770:	61fb      	str	r3, [r7, #28]
 8011772:	e012      	b.n	801179a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011774:	f06f 0302 	mvn.w	r3, #2
 8011778:	61fb      	str	r3, [r7, #28]
 801177a:	e00e      	b.n	801179a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801177c:	68ba      	ldr	r2, [r7, #8]
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	4013      	ands	r3, r2
 8011782:	2b00      	cmp	r3, #0
 8011784:	d109      	bne.n	801179a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d003      	beq.n	8011794 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801178c:	f06f 0301 	mvn.w	r3, #1
 8011790:	61fb      	str	r3, [r7, #28]
 8011792:	e002      	b.n	801179a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011794:	f06f 0302 	mvn.w	r3, #2
 8011798:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801179a:	69fb      	ldr	r3, [r7, #28]
}
 801179c:	4618      	mov	r0, r3
 801179e:	3728      	adds	r7, #40	; 0x28
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}

080117a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b08a      	sub	sp, #40	; 0x28
 80117a8:	af02      	add	r7, sp, #8
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80117b0:	2300      	movs	r3, #0
 80117b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80117b4:	f3ef 8305 	mrs	r3, IPSR
 80117b8:	613b      	str	r3, [r7, #16]
  return(result);
 80117ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d15f      	bne.n	8011880 <osMessageQueueNew+0xdc>
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d05c      	beq.n	8011880 <osMessageQueueNew+0xdc>
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d059      	beq.n	8011880 <osMessageQueueNew+0xdc>
    mem = -1;
 80117cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d029      	beq.n	801182c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	689b      	ldr	r3, [r3, #8]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d012      	beq.n	8011806 <osMessageQueueNew+0x62>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	2b4f      	cmp	r3, #79	; 0x4f
 80117e6:	d90e      	bls.n	8011806 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d00a      	beq.n	8011806 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	695a      	ldr	r2, [r3, #20]
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	68b9      	ldr	r1, [r7, #8]
 80117f8:	fb01 f303 	mul.w	r3, r1, r3
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d302      	bcc.n	8011806 <osMessageQueueNew+0x62>
        mem = 1;
 8011800:	2301      	movs	r3, #1
 8011802:	61bb      	str	r3, [r7, #24]
 8011804:	e014      	b.n	8011830 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	689b      	ldr	r3, [r3, #8]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d110      	bne.n	8011830 <osMessageQueueNew+0x8c>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d10c      	bne.n	8011830 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801181a:	2b00      	cmp	r3, #0
 801181c:	d108      	bne.n	8011830 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	695b      	ldr	r3, [r3, #20]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d104      	bne.n	8011830 <osMessageQueueNew+0x8c>
          mem = 0;
 8011826:	2300      	movs	r3, #0
 8011828:	61bb      	str	r3, [r7, #24]
 801182a:	e001      	b.n	8011830 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801182c:	2300      	movs	r3, #0
 801182e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	2b01      	cmp	r3, #1
 8011834:	d10b      	bne.n	801184e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	691a      	ldr	r2, [r3, #16]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	689b      	ldr	r3, [r3, #8]
 801183e:	2100      	movs	r1, #0
 8011840:	9100      	str	r1, [sp, #0]
 8011842:	68b9      	ldr	r1, [r7, #8]
 8011844:	68f8      	ldr	r0, [r7, #12]
 8011846:	f000 fc3d 	bl	80120c4 <xQueueGenericCreateStatic>
 801184a:	61f8      	str	r0, [r7, #28]
 801184c:	e008      	b.n	8011860 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d105      	bne.n	8011860 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011854:	2200      	movs	r2, #0
 8011856:	68b9      	ldr	r1, [r7, #8]
 8011858:	68f8      	ldr	r0, [r7, #12]
 801185a:	f000 fcab 	bl	80121b4 <xQueueGenericCreate>
 801185e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011860:	69fb      	ldr	r3, [r7, #28]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00c      	beq.n	8011880 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d003      	beq.n	8011874 <osMessageQueueNew+0xd0>
        name = attr->name;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	617b      	str	r3, [r7, #20]
 8011872:	e001      	b.n	8011878 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011874:	2300      	movs	r3, #0
 8011876:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011878:	6979      	ldr	r1, [r7, #20]
 801187a:	69f8      	ldr	r0, [r7, #28]
 801187c:	f001 f93e 	bl	8012afc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011880:	69fb      	ldr	r3, [r7, #28]
}
 8011882:	4618      	mov	r0, r3
 8011884:	3720      	adds	r7, #32
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
	...

0801188c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801188c:	b580      	push	{r7, lr}
 801188e:	b088      	sub	sp, #32
 8011890:	af00      	add	r7, sp, #0
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	603b      	str	r3, [r7, #0]
 8011898:	4613      	mov	r3, r2
 801189a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80118a0:	2300      	movs	r3, #0
 80118a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80118a4:	f3ef 8305 	mrs	r3, IPSR
 80118a8:	617b      	str	r3, [r7, #20]
  return(result);
 80118aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d028      	beq.n	8011902 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80118b0:	69bb      	ldr	r3, [r7, #24]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d005      	beq.n	80118c2 <osMessageQueuePut+0x36>
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d002      	beq.n	80118c2 <osMessageQueuePut+0x36>
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d003      	beq.n	80118ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80118c2:	f06f 0303 	mvn.w	r3, #3
 80118c6:	61fb      	str	r3, [r7, #28]
 80118c8:	e038      	b.n	801193c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80118ca:	2300      	movs	r3, #0
 80118cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80118ce:	f107 0210 	add.w	r2, r7, #16
 80118d2:	2300      	movs	r3, #0
 80118d4:	68b9      	ldr	r1, [r7, #8]
 80118d6:	69b8      	ldr	r0, [r7, #24]
 80118d8:	f000 fdc8 	bl	801246c <xQueueGenericSendFromISR>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d003      	beq.n	80118ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80118e2:	f06f 0302 	mvn.w	r3, #2
 80118e6:	61fb      	str	r3, [r7, #28]
 80118e8:	e028      	b.n	801193c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d025      	beq.n	801193c <osMessageQueuePut+0xb0>
 80118f0:	4b15      	ldr	r3, [pc, #84]	; (8011948 <osMessageQueuePut+0xbc>)
 80118f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118f6:	601a      	str	r2, [r3, #0]
 80118f8:	f3bf 8f4f 	dsb	sy
 80118fc:	f3bf 8f6f 	isb	sy
 8011900:	e01c      	b.n	801193c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d002      	beq.n	801190e <osMessageQueuePut+0x82>
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d103      	bne.n	8011916 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801190e:	f06f 0303 	mvn.w	r3, #3
 8011912:	61fb      	str	r3, [r7, #28]
 8011914:	e012      	b.n	801193c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011916:	2300      	movs	r3, #0
 8011918:	683a      	ldr	r2, [r7, #0]
 801191a:	68b9      	ldr	r1, [r7, #8]
 801191c:	69b8      	ldr	r0, [r7, #24]
 801191e:	f000 fca7 	bl	8012270 <xQueueGenericSend>
 8011922:	4603      	mov	r3, r0
 8011924:	2b01      	cmp	r3, #1
 8011926:	d009      	beq.n	801193c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d003      	beq.n	8011936 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801192e:	f06f 0301 	mvn.w	r3, #1
 8011932:	61fb      	str	r3, [r7, #28]
 8011934:	e002      	b.n	801193c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011936:	f06f 0302 	mvn.w	r3, #2
 801193a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801193c:	69fb      	ldr	r3, [r7, #28]
}
 801193e:	4618      	mov	r0, r3
 8011940:	3720      	adds	r7, #32
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	e000ed04 	.word	0xe000ed04

0801194c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801194c:	b580      	push	{r7, lr}
 801194e:	b088      	sub	sp, #32
 8011950:	af00      	add	r7, sp, #0
 8011952:	60f8      	str	r0, [r7, #12]
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	607a      	str	r2, [r7, #4]
 8011958:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801195e:	2300      	movs	r3, #0
 8011960:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011962:	f3ef 8305 	mrs	r3, IPSR
 8011966:	617b      	str	r3, [r7, #20]
  return(result);
 8011968:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801196a:	2b00      	cmp	r3, #0
 801196c:	d028      	beq.n	80119c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d005      	beq.n	8011980 <osMessageQueueGet+0x34>
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d002      	beq.n	8011980 <osMessageQueueGet+0x34>
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d003      	beq.n	8011988 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011980:	f06f 0303 	mvn.w	r3, #3
 8011984:	61fb      	str	r3, [r7, #28]
 8011986:	e037      	b.n	80119f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011988:	2300      	movs	r3, #0
 801198a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801198c:	f107 0310 	add.w	r3, r7, #16
 8011990:	461a      	mov	r2, r3
 8011992:	68b9      	ldr	r1, [r7, #8]
 8011994:	69b8      	ldr	r0, [r7, #24]
 8011996:	f000 fee5 	bl	8012764 <xQueueReceiveFromISR>
 801199a:	4603      	mov	r3, r0
 801199c:	2b01      	cmp	r3, #1
 801199e:	d003      	beq.n	80119a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80119a0:	f06f 0302 	mvn.w	r3, #2
 80119a4:	61fb      	str	r3, [r7, #28]
 80119a6:	e027      	b.n	80119f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d024      	beq.n	80119f8 <osMessageQueueGet+0xac>
 80119ae:	4b15      	ldr	r3, [pc, #84]	; (8011a04 <osMessageQueueGet+0xb8>)
 80119b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119b4:	601a      	str	r2, [r3, #0]
 80119b6:	f3bf 8f4f 	dsb	sy
 80119ba:	f3bf 8f6f 	isb	sy
 80119be:	e01b      	b.n	80119f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d002      	beq.n	80119cc <osMessageQueueGet+0x80>
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d103      	bne.n	80119d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80119cc:	f06f 0303 	mvn.w	r3, #3
 80119d0:	61fb      	str	r3, [r7, #28]
 80119d2:	e011      	b.n	80119f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80119d4:	683a      	ldr	r2, [r7, #0]
 80119d6:	68b9      	ldr	r1, [r7, #8]
 80119d8:	69b8      	ldr	r0, [r7, #24]
 80119da:	f000 fde3 	bl	80125a4 <xQueueReceive>
 80119de:	4603      	mov	r3, r0
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d009      	beq.n	80119f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d003      	beq.n	80119f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80119ea:	f06f 0301 	mvn.w	r3, #1
 80119ee:	61fb      	str	r3, [r7, #28]
 80119f0:	e002      	b.n	80119f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80119f2:	f06f 0302 	mvn.w	r3, #2
 80119f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80119f8:	69fb      	ldr	r3, [r7, #28]
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	3720      	adds	r7, #32
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
 8011a02:	bf00      	nop
 8011a04:	e000ed04 	.word	0xe000ed04

08011a08 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b086      	sub	sp, #24
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d102      	bne.n	8011a20 <osMessageQueueGetCount+0x18>
    count = 0U;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	617b      	str	r3, [r7, #20]
 8011a1e:	e00e      	b.n	8011a3e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a20:	f3ef 8305 	mrs	r3, IPSR
 8011a24:	60fb      	str	r3, [r7, #12]
  return(result);
 8011a26:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d004      	beq.n	8011a36 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8011a2c:	6938      	ldr	r0, [r7, #16]
 8011a2e:	f000 ff37 	bl	80128a0 <uxQueueMessagesWaitingFromISR>
 8011a32:	6178      	str	r0, [r7, #20]
 8011a34:	e003      	b.n	8011a3e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8011a36:	6938      	ldr	r0, [r7, #16]
 8011a38:	f000 ff14 	bl	8012864 <uxQueueMessagesWaiting>
 8011a3c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8011a3e:	697b      	ldr	r3, [r7, #20]
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3718      	adds	r7, #24
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011a48:	b480      	push	{r7}
 8011a4a:	b085      	sub	sp, #20
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	60f8      	str	r0, [r7, #12]
 8011a50:	60b9      	str	r1, [r7, #8]
 8011a52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	4a07      	ldr	r2, [pc, #28]	; (8011a74 <vApplicationGetIdleTaskMemory+0x2c>)
 8011a58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	4a06      	ldr	r2, [pc, #24]	; (8011a78 <vApplicationGetIdleTaskMemory+0x30>)
 8011a5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2280      	movs	r2, #128	; 0x80
 8011a64:	601a      	str	r2, [r3, #0]
}
 8011a66:	bf00      	nop
 8011a68:	3714      	adds	r7, #20
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a70:	4770      	bx	lr
 8011a72:	bf00      	nop
 8011a74:	24000c40 	.word	0x24000c40
 8011a78:	24000c9c 	.word	0x24000c9c

08011a7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011a7c:	b480      	push	{r7}
 8011a7e:	b085      	sub	sp, #20
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	60b9      	str	r1, [r7, #8]
 8011a86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	4a07      	ldr	r2, [pc, #28]	; (8011aa8 <vApplicationGetTimerTaskMemory+0x2c>)
 8011a8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	4a06      	ldr	r2, [pc, #24]	; (8011aac <vApplicationGetTimerTaskMemory+0x30>)
 8011a92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011a9a:	601a      	str	r2, [r3, #0]
}
 8011a9c:	bf00      	nop
 8011a9e:	3714      	adds	r7, #20
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr
 8011aa8:	24000e9c 	.word	0x24000e9c
 8011aac:	24000ef8 	.word	0x24000ef8

08011ab0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b086      	sub	sp, #24
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d10a      	bne.n	8011ad4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac2:	f383 8811 	msr	BASEPRI, r3
 8011ac6:	f3bf 8f6f 	isb	sy
 8011aca:	f3bf 8f4f 	dsb	sy
 8011ace:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011ad0:	bf00      	nop
 8011ad2:	e7fe      	b.n	8011ad2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8011ad4:	2320      	movs	r3, #32
 8011ad6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	2b20      	cmp	r3, #32
 8011adc:	d00a      	beq.n	8011af4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8011ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae2:	f383 8811 	msr	BASEPRI, r3
 8011ae6:	f3bf 8f6f 	isb	sy
 8011aea:	f3bf 8f4f 	dsb	sy
 8011aee:	60fb      	str	r3, [r7, #12]
}
 8011af0:	bf00      	nop
 8011af2:	e7fe      	b.n	8011af2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00a      	beq.n	8011b14 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	2200      	movs	r2, #0
 8011b02:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	3304      	adds	r3, #4
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f000 f9bf 	bl	8011e8c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2201      	movs	r2, #1
 8011b12:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011b14:	697b      	ldr	r3, [r7, #20]
	}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3718      	adds	r7, #24
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b082      	sub	sp, #8
 8011b22:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011b24:	2020      	movs	r0, #32
 8011b26:	f002 fecf 	bl	80148c8 <pvPortMalloc>
 8011b2a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d00a      	beq.n	8011b48 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2200      	movs	r2, #0
 8011b36:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	3304      	adds	r3, #4
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f000 f9a5 	bl	8011e8c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2200      	movs	r2, #0
 8011b46:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011b48:	687b      	ldr	r3, [r7, #4]
	}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3708      	adds	r7, #8
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
	...

08011b54 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b090      	sub	sp, #64	; 0x40
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	607a      	str	r2, [r7, #4]
 8011b60:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8011b66:	2300      	movs	r3, #0
 8011b68:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d10a      	bne.n	8011b8a <xEventGroupWaitBits+0x36>
	__asm volatile
 8011b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b78:	f383 8811 	msr	BASEPRI, r3
 8011b7c:	f3bf 8f6f 	isb	sy
 8011b80:	f3bf 8f4f 	dsb	sy
 8011b84:	623b      	str	r3, [r7, #32]
}
 8011b86:	bf00      	nop
 8011b88:	e7fe      	b.n	8011b88 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d00a      	beq.n	8011baa <xEventGroupWaitBits+0x56>
	__asm volatile
 8011b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b98:	f383 8811 	msr	BASEPRI, r3
 8011b9c:	f3bf 8f6f 	isb	sy
 8011ba0:	f3bf 8f4f 	dsb	sy
 8011ba4:	61fb      	str	r3, [r7, #28]
}
 8011ba6:	bf00      	nop
 8011ba8:	e7fe      	b.n	8011ba8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d10a      	bne.n	8011bc6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8011bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb4:	f383 8811 	msr	BASEPRI, r3
 8011bb8:	f3bf 8f6f 	isb	sy
 8011bbc:	f3bf 8f4f 	dsb	sy
 8011bc0:	61bb      	str	r3, [r7, #24]
}
 8011bc2:	bf00      	nop
 8011bc4:	e7fe      	b.n	8011bc4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011bc6:	f001 ffcd 	bl	8013b64 <xTaskGetSchedulerState>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d102      	bne.n	8011bd6 <xEventGroupWaitBits+0x82>
 8011bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d101      	bne.n	8011bda <xEventGroupWaitBits+0x86>
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	e000      	b.n	8011bdc <xEventGroupWaitBits+0x88>
 8011bda:	2300      	movs	r3, #0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d10a      	bne.n	8011bf6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be4:	f383 8811 	msr	BASEPRI, r3
 8011be8:	f3bf 8f6f 	isb	sy
 8011bec:	f3bf 8f4f 	dsb	sy
 8011bf0:	617b      	str	r3, [r7, #20]
}
 8011bf2:	bf00      	nop
 8011bf4:	e7fe      	b.n	8011bf4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011bf6:	f001 fb35 	bl	8013264 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	68b9      	ldr	r1, [r7, #8]
 8011c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c06:	f000 f90b 	bl	8011e20 <prvTestWaitCondition>
 8011c0a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d00e      	beq.n	8011c30 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c14:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011c16:	2300      	movs	r3, #0
 8011c18:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d028      	beq.n	8011c72 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	43db      	mvns	r3, r3
 8011c28:	401a      	ands	r2, r3
 8011c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c2c:	601a      	str	r2, [r3, #0]
 8011c2e:	e020      	b.n	8011c72 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d104      	bne.n	8011c40 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8011c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c38:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8011c3e:	e018      	b.n	8011c72 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d003      	beq.n	8011c4e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8011c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011c4c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d003      	beq.n	8011c5c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011c5a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c5e:	1d18      	adds	r0, r3, #4
 8011c60:	68ba      	ldr	r2, [r7, #8]
 8011c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c64:	4313      	orrs	r3, r2
 8011c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c68:	4619      	mov	r1, r3
 8011c6a:	f001 fcf3 	bl	8013654 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011c72:	f001 fb05 	bl	8013280 <xTaskResumeAll>
 8011c76:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d031      	beq.n	8011ce2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d107      	bne.n	8011c94 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011c84:	4b19      	ldr	r3, [pc, #100]	; (8011cec <xEventGroupWaitBits+0x198>)
 8011c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c8a:	601a      	str	r2, [r3, #0]
 8011c8c:	f3bf 8f4f 	dsb	sy
 8011c90:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011c94:	f001 fff2 	bl	8013c7c <uxTaskResetEventItemValue>
 8011c98:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d11a      	bne.n	8011cda <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011ca4:	f002 fcee 	bl	8014684 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011cae:	683a      	ldr	r2, [r7, #0]
 8011cb0:	68b9      	ldr	r1, [r7, #8]
 8011cb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011cb4:	f000 f8b4 	bl	8011e20 <prvTestWaitCondition>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d009      	beq.n	8011cd2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d006      	beq.n	8011cd2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	43db      	mvns	r3, r3
 8011ccc:	401a      	ands	r2, r3
 8011cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cd0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011cd6:	f002 fd05 	bl	80146e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8011ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3740      	adds	r7, #64	; 0x40
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}
 8011cec:	e000ed04 	.word	0xe000ed04

08011cf0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b08e      	sub	sp, #56	; 0x38
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011d02:	2300      	movs	r3, #0
 8011d04:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d10a      	bne.n	8011d22 <xEventGroupSetBits+0x32>
	__asm volatile
 8011d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d10:	f383 8811 	msr	BASEPRI, r3
 8011d14:	f3bf 8f6f 	isb	sy
 8011d18:	f3bf 8f4f 	dsb	sy
 8011d1c:	613b      	str	r3, [r7, #16]
}
 8011d1e:	bf00      	nop
 8011d20:	e7fe      	b.n	8011d20 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d00a      	beq.n	8011d42 <xEventGroupSetBits+0x52>
	__asm volatile
 8011d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d30:	f383 8811 	msr	BASEPRI, r3
 8011d34:	f3bf 8f6f 	isb	sy
 8011d38:	f3bf 8f4f 	dsb	sy
 8011d3c:	60fb      	str	r3, [r7, #12]
}
 8011d3e:	bf00      	nop
 8011d40:	e7fe      	b.n	8011d40 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d44:	3304      	adds	r3, #4
 8011d46:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4a:	3308      	adds	r3, #8
 8011d4c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011d4e:	f001 fa89 	bl	8013264 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d54:	68db      	ldr	r3, [r3, #12]
 8011d56:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	431a      	orrs	r2, r3
 8011d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d62:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011d64:	e03c      	b.n	8011de0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8011d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011d72:	2300      	movs	r3, #0
 8011d74:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8011d76:	69bb      	ldr	r3, [r7, #24]
 8011d78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011d7c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011d84:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d108      	bne.n	8011da2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	69bb      	ldr	r3, [r7, #24]
 8011d96:	4013      	ands	r3, r2
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00b      	beq.n	8011db4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011da0:	e008      	b.n	8011db4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da4:	681a      	ldr	r2, [r3, #0]
 8011da6:	69bb      	ldr	r3, [r7, #24]
 8011da8:	4013      	ands	r3, r2
 8011daa:	69ba      	ldr	r2, [r7, #24]
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d101      	bne.n	8011db4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011db0:	2301      	movs	r3, #1
 8011db2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d010      	beq.n	8011ddc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d003      	beq.n	8011dcc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dc6:	69bb      	ldr	r3, [r7, #24]
 8011dc8:	4313      	orrs	r3, r2
 8011dca:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011dd8:	f001 fd08 	bl	80137ec <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011ddc:	69fb      	ldr	r3, [r7, #28]
 8011dde:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011de2:	6a3b      	ldr	r3, [r7, #32]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d1be      	bne.n	8011d66 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dea:	681a      	ldr	r2, [r3, #0]
 8011dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dee:	43db      	mvns	r3, r3
 8011df0:	401a      	ands	r2, r3
 8011df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011df6:	f001 fa43 	bl	8013280 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfc:	681b      	ldr	r3, [r3, #0]
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3738      	adds	r7, #56	; 0x38
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}

08011e06 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b082      	sub	sp, #8
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
 8011e0e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011e10:	6839      	ldr	r1, [r7, #0]
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f7ff ff6c 	bl	8011cf0 <xEventGroupSetBits>
}
 8011e18:	bf00      	nop
 8011e1a:	3708      	adds	r7, #8
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011e20:	b480      	push	{r7}
 8011e22:	b087      	sub	sp, #28
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d107      	bne.n	8011e46 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011e36:	68fa      	ldr	r2, [r7, #12]
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	4013      	ands	r3, r2
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00a      	beq.n	8011e56 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011e40:	2301      	movs	r3, #1
 8011e42:	617b      	str	r3, [r7, #20]
 8011e44:	e007      	b.n	8011e56 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011e46:	68fa      	ldr	r2, [r7, #12]
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	4013      	ands	r3, r2
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d101      	bne.n	8011e56 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011e52:	2301      	movs	r3, #1
 8011e54:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011e56:	697b      	ldr	r3, [r7, #20]
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	371c      	adds	r7, #28
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e62:	4770      	bx	lr

08011e64 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b086      	sub	sp, #24
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	60b9      	str	r1, [r7, #8]
 8011e6e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	68ba      	ldr	r2, [r7, #8]
 8011e74:	68f9      	ldr	r1, [r7, #12]
 8011e76:	4804      	ldr	r0, [pc, #16]	; (8011e88 <xEventGroupSetBitsFromISR+0x24>)
 8011e78:	f002 faba 	bl	80143f0 <xTimerPendFunctionCallFromISR>
 8011e7c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8011e7e:	697b      	ldr	r3, [r7, #20]
	}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3718      	adds	r7, #24
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}
 8011e88:	08011e07 	.word	0x08011e07

08011e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f103 0208 	add.w	r2, r3, #8
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f103 0208 	add.w	r2, r3, #8
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f103 0208 	add.w	r2, r3, #8
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011ec0:	bf00      	nop
 8011ec2:	370c      	adds	r7, #12
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr

08011ecc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b083      	sub	sp, #12
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011eda:	bf00      	nop
 8011edc:	370c      	adds	r7, #12
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr

08011ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011ee6:	b480      	push	{r7}
 8011ee8:	b085      	sub	sp, #20
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
 8011eee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	68fa      	ldr	r2, [r7, #12]
 8011efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	689a      	ldr	r2, [r3, #8]
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	689b      	ldr	r3, [r3, #8]
 8011f08:	683a      	ldr	r2, [r7, #0]
 8011f0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	683a      	ldr	r2, [r7, #0]
 8011f10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	1c5a      	adds	r2, r3, #1
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	601a      	str	r2, [r3, #0]
}
 8011f22:	bf00      	nop
 8011f24:	3714      	adds	r7, #20
 8011f26:	46bd      	mov	sp, r7
 8011f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2c:	4770      	bx	lr

08011f2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011f2e:	b480      	push	{r7}
 8011f30:	b085      	sub	sp, #20
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	6078      	str	r0, [r7, #4]
 8011f36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f44:	d103      	bne.n	8011f4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	691b      	ldr	r3, [r3, #16]
 8011f4a:	60fb      	str	r3, [r7, #12]
 8011f4c:	e00c      	b.n	8011f68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	3308      	adds	r3, #8
 8011f52:	60fb      	str	r3, [r7, #12]
 8011f54:	e002      	b.n	8011f5c <vListInsert+0x2e>
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	685b      	ldr	r3, [r3, #4]
 8011f5a:	60fb      	str	r3, [r7, #12]
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	68ba      	ldr	r2, [r7, #8]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d2f6      	bcs.n	8011f56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	685a      	ldr	r2, [r3, #4]
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	685b      	ldr	r3, [r3, #4]
 8011f74:	683a      	ldr	r2, [r7, #0]
 8011f76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	68fa      	ldr	r2, [r7, #12]
 8011f7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	683a      	ldr	r2, [r7, #0]
 8011f82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	1c5a      	adds	r2, r3, #1
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	601a      	str	r2, [r3, #0]
}
 8011f94:	bf00      	nop
 8011f96:	3714      	adds	r7, #20
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr

08011fa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b085      	sub	sp, #20
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	691b      	ldr	r3, [r3, #16]
 8011fac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	6892      	ldr	r2, [r2, #8]
 8011fb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	6852      	ldr	r2, [r2, #4]
 8011fc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d103      	bne.n	8011fd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	689a      	ldr	r2, [r3, #8]
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	1e5a      	subs	r2, r3, #1
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3714      	adds	r7, #20
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr

08011ff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d10a      	bne.n	801201e <xQueueGenericReset+0x2a>
	__asm volatile
 8012008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801200c:	f383 8811 	msr	BASEPRI, r3
 8012010:	f3bf 8f6f 	isb	sy
 8012014:	f3bf 8f4f 	dsb	sy
 8012018:	60bb      	str	r3, [r7, #8]
}
 801201a:	bf00      	nop
 801201c:	e7fe      	b.n	801201c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801201e:	f002 fb31 	bl	8014684 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801202a:	68f9      	ldr	r1, [r7, #12]
 801202c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801202e:	fb01 f303 	mul.w	r3, r1, r3
 8012032:	441a      	add	r2, r3
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	2200      	movs	r2, #0
 801203c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801204e:	3b01      	subs	r3, #1
 8012050:	68f9      	ldr	r1, [r7, #12]
 8012052:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012054:	fb01 f303 	mul.w	r3, r1, r3
 8012058:	441a      	add	r2, r3
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	22ff      	movs	r2, #255	; 0xff
 8012062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	22ff      	movs	r2, #255	; 0xff
 801206a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d114      	bne.n	801209e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	691b      	ldr	r3, [r3, #16]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d01a      	beq.n	80120b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	3310      	adds	r3, #16
 8012080:	4618      	mov	r0, r3
 8012082:	f001 fb4f 	bl	8013724 <xTaskRemoveFromEventList>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	d012      	beq.n	80120b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801208c:	4b0c      	ldr	r3, [pc, #48]	; (80120c0 <xQueueGenericReset+0xcc>)
 801208e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012092:	601a      	str	r2, [r3, #0]
 8012094:	f3bf 8f4f 	dsb	sy
 8012098:	f3bf 8f6f 	isb	sy
 801209c:	e009      	b.n	80120b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	3310      	adds	r3, #16
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7ff fef2 	bl	8011e8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	3324      	adds	r3, #36	; 0x24
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7ff feed 	bl	8011e8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80120b2:	f002 fb17 	bl	80146e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80120b6:	2301      	movs	r3, #1
}
 80120b8:	4618      	mov	r0, r3
 80120ba:	3710      	adds	r7, #16
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}
 80120c0:	e000ed04 	.word	0xe000ed04

080120c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b08e      	sub	sp, #56	; 0x38
 80120c8:	af02      	add	r7, sp, #8
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
 80120d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d10a      	bne.n	80120ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80120d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120dc:	f383 8811 	msr	BASEPRI, r3
 80120e0:	f3bf 8f6f 	isb	sy
 80120e4:	f3bf 8f4f 	dsb	sy
 80120e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80120ea:	bf00      	nop
 80120ec:	e7fe      	b.n	80120ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d10a      	bne.n	801210a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80120f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f8:	f383 8811 	msr	BASEPRI, r3
 80120fc:	f3bf 8f6f 	isb	sy
 8012100:	f3bf 8f4f 	dsb	sy
 8012104:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012106:	bf00      	nop
 8012108:	e7fe      	b.n	8012108 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d002      	beq.n	8012116 <xQueueGenericCreateStatic+0x52>
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d001      	beq.n	801211a <xQueueGenericCreateStatic+0x56>
 8012116:	2301      	movs	r3, #1
 8012118:	e000      	b.n	801211c <xQueueGenericCreateStatic+0x58>
 801211a:	2300      	movs	r3, #0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d10a      	bne.n	8012136 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012124:	f383 8811 	msr	BASEPRI, r3
 8012128:	f3bf 8f6f 	isb	sy
 801212c:	f3bf 8f4f 	dsb	sy
 8012130:	623b      	str	r3, [r7, #32]
}
 8012132:	bf00      	nop
 8012134:	e7fe      	b.n	8012134 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d102      	bne.n	8012142 <xQueueGenericCreateStatic+0x7e>
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d101      	bne.n	8012146 <xQueueGenericCreateStatic+0x82>
 8012142:	2301      	movs	r3, #1
 8012144:	e000      	b.n	8012148 <xQueueGenericCreateStatic+0x84>
 8012146:	2300      	movs	r3, #0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d10a      	bne.n	8012162 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801214c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012150:	f383 8811 	msr	BASEPRI, r3
 8012154:	f3bf 8f6f 	isb	sy
 8012158:	f3bf 8f4f 	dsb	sy
 801215c:	61fb      	str	r3, [r7, #28]
}
 801215e:	bf00      	nop
 8012160:	e7fe      	b.n	8012160 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012162:	2350      	movs	r3, #80	; 0x50
 8012164:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	2b50      	cmp	r3, #80	; 0x50
 801216a:	d00a      	beq.n	8012182 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012170:	f383 8811 	msr	BASEPRI, r3
 8012174:	f3bf 8f6f 	isb	sy
 8012178:	f3bf 8f4f 	dsb	sy
 801217c:	61bb      	str	r3, [r7, #24]
}
 801217e:	bf00      	nop
 8012180:	e7fe      	b.n	8012180 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012182:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801218a:	2b00      	cmp	r3, #0
 801218c:	d00d      	beq.n	80121aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012190:	2201      	movs	r2, #1
 8012192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012196:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	4613      	mov	r3, r2
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	68b9      	ldr	r1, [r7, #8]
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	f000 f83f 	bl	8012228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80121aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3730      	adds	r7, #48	; 0x30
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b08a      	sub	sp, #40	; 0x28
 80121b8:	af02      	add	r7, sp, #8
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	4613      	mov	r3, r2
 80121c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d10a      	bne.n	80121de <xQueueGenericCreate+0x2a>
	__asm volatile
 80121c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121cc:	f383 8811 	msr	BASEPRI, r3
 80121d0:	f3bf 8f6f 	isb	sy
 80121d4:	f3bf 8f4f 	dsb	sy
 80121d8:	613b      	str	r3, [r7, #16]
}
 80121da:	bf00      	nop
 80121dc:	e7fe      	b.n	80121dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	68ba      	ldr	r2, [r7, #8]
 80121e2:	fb02 f303 	mul.w	r3, r2, r3
 80121e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	3350      	adds	r3, #80	; 0x50
 80121ec:	4618      	mov	r0, r3
 80121ee:	f002 fb6b 	bl	80148c8 <pvPortMalloc>
 80121f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80121f4:	69bb      	ldr	r3, [r7, #24]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d011      	beq.n	801221e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	3350      	adds	r3, #80	; 0x50
 8012202:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012204:	69bb      	ldr	r3, [r7, #24]
 8012206:	2200      	movs	r2, #0
 8012208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801220c:	79fa      	ldrb	r2, [r7, #7]
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	9300      	str	r3, [sp, #0]
 8012212:	4613      	mov	r3, r2
 8012214:	697a      	ldr	r2, [r7, #20]
 8012216:	68b9      	ldr	r1, [r7, #8]
 8012218:	68f8      	ldr	r0, [r7, #12]
 801221a:	f000 f805 	bl	8012228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801221e:	69bb      	ldr	r3, [r7, #24]
	}
 8012220:	4618      	mov	r0, r3
 8012222:	3720      	adds	r7, #32
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	60f8      	str	r0, [r7, #12]
 8012230:	60b9      	str	r1, [r7, #8]
 8012232:	607a      	str	r2, [r7, #4]
 8012234:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d103      	bne.n	8012244 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801223c:	69bb      	ldr	r3, [r7, #24]
 801223e:	69ba      	ldr	r2, [r7, #24]
 8012240:	601a      	str	r2, [r3, #0]
 8012242:	e002      	b.n	801224a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	687a      	ldr	r2, [r7, #4]
 8012248:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	68fa      	ldr	r2, [r7, #12]
 801224e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	68ba      	ldr	r2, [r7, #8]
 8012254:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012256:	2101      	movs	r1, #1
 8012258:	69b8      	ldr	r0, [r7, #24]
 801225a:	f7ff fecb 	bl	8011ff4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801225e:	69bb      	ldr	r3, [r7, #24]
 8012260:	78fa      	ldrb	r2, [r7, #3]
 8012262:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012266:	bf00      	nop
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
	...

08012270 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b08e      	sub	sp, #56	; 0x38
 8012274:	af00      	add	r7, sp, #0
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	607a      	str	r2, [r7, #4]
 801227c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801227e:	2300      	movs	r3, #0
 8012280:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012288:	2b00      	cmp	r3, #0
 801228a:	d10a      	bne.n	80122a2 <xQueueGenericSend+0x32>
	__asm volatile
 801228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012290:	f383 8811 	msr	BASEPRI, r3
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	f3bf 8f4f 	dsb	sy
 801229c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801229e:	bf00      	nop
 80122a0:	e7fe      	b.n	80122a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d103      	bne.n	80122b0 <xQueueGenericSend+0x40>
 80122a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d101      	bne.n	80122b4 <xQueueGenericSend+0x44>
 80122b0:	2301      	movs	r3, #1
 80122b2:	e000      	b.n	80122b6 <xQueueGenericSend+0x46>
 80122b4:	2300      	movs	r3, #0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d10a      	bne.n	80122d0 <xQueueGenericSend+0x60>
	__asm volatile
 80122ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122be:	f383 8811 	msr	BASEPRI, r3
 80122c2:	f3bf 8f6f 	isb	sy
 80122c6:	f3bf 8f4f 	dsb	sy
 80122ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80122cc:	bf00      	nop
 80122ce:	e7fe      	b.n	80122ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	2b02      	cmp	r3, #2
 80122d4:	d103      	bne.n	80122de <xQueueGenericSend+0x6e>
 80122d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122da:	2b01      	cmp	r3, #1
 80122dc:	d101      	bne.n	80122e2 <xQueueGenericSend+0x72>
 80122de:	2301      	movs	r3, #1
 80122e0:	e000      	b.n	80122e4 <xQueueGenericSend+0x74>
 80122e2:	2300      	movs	r3, #0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d10a      	bne.n	80122fe <xQueueGenericSend+0x8e>
	__asm volatile
 80122e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ec:	f383 8811 	msr	BASEPRI, r3
 80122f0:	f3bf 8f6f 	isb	sy
 80122f4:	f3bf 8f4f 	dsb	sy
 80122f8:	623b      	str	r3, [r7, #32]
}
 80122fa:	bf00      	nop
 80122fc:	e7fe      	b.n	80122fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122fe:	f001 fc31 	bl	8013b64 <xTaskGetSchedulerState>
 8012302:	4603      	mov	r3, r0
 8012304:	2b00      	cmp	r3, #0
 8012306:	d102      	bne.n	801230e <xQueueGenericSend+0x9e>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d101      	bne.n	8012312 <xQueueGenericSend+0xa2>
 801230e:	2301      	movs	r3, #1
 8012310:	e000      	b.n	8012314 <xQueueGenericSend+0xa4>
 8012312:	2300      	movs	r3, #0
 8012314:	2b00      	cmp	r3, #0
 8012316:	d10a      	bne.n	801232e <xQueueGenericSend+0xbe>
	__asm volatile
 8012318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801231c:	f383 8811 	msr	BASEPRI, r3
 8012320:	f3bf 8f6f 	isb	sy
 8012324:	f3bf 8f4f 	dsb	sy
 8012328:	61fb      	str	r3, [r7, #28]
}
 801232a:	bf00      	nop
 801232c:	e7fe      	b.n	801232c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801232e:	f002 f9a9 	bl	8014684 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801233a:	429a      	cmp	r2, r3
 801233c:	d302      	bcc.n	8012344 <xQueueGenericSend+0xd4>
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	2b02      	cmp	r3, #2
 8012342:	d129      	bne.n	8012398 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012344:	683a      	ldr	r2, [r7, #0]
 8012346:	68b9      	ldr	r1, [r7, #8]
 8012348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801234a:	f000 fac7 	bl	80128dc <prvCopyDataToQueue>
 801234e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012354:	2b00      	cmp	r3, #0
 8012356:	d010      	beq.n	801237a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801235a:	3324      	adds	r3, #36	; 0x24
 801235c:	4618      	mov	r0, r3
 801235e:	f001 f9e1 	bl	8013724 <xTaskRemoveFromEventList>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d013      	beq.n	8012390 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012368:	4b3f      	ldr	r3, [pc, #252]	; (8012468 <xQueueGenericSend+0x1f8>)
 801236a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801236e:	601a      	str	r2, [r3, #0]
 8012370:	f3bf 8f4f 	dsb	sy
 8012374:	f3bf 8f6f 	isb	sy
 8012378:	e00a      	b.n	8012390 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237c:	2b00      	cmp	r3, #0
 801237e:	d007      	beq.n	8012390 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012380:	4b39      	ldr	r3, [pc, #228]	; (8012468 <xQueueGenericSend+0x1f8>)
 8012382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012386:	601a      	str	r2, [r3, #0]
 8012388:	f3bf 8f4f 	dsb	sy
 801238c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012390:	f002 f9a8 	bl	80146e4 <vPortExitCritical>
				return pdPASS;
 8012394:	2301      	movs	r3, #1
 8012396:	e063      	b.n	8012460 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d103      	bne.n	80123a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801239e:	f002 f9a1 	bl	80146e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80123a2:	2300      	movs	r3, #0
 80123a4:	e05c      	b.n	8012460 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80123a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d106      	bne.n	80123ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80123ac:	f107 0314 	add.w	r3, r7, #20
 80123b0:	4618      	mov	r0, r3
 80123b2:	f001 fa7d 	bl	80138b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80123b6:	2301      	movs	r3, #1
 80123b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80123ba:	f002 f993 	bl	80146e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80123be:	f000 ff51 	bl	8013264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123c2:	f002 f95f 	bl	8014684 <vPortEnterCritical>
 80123c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123cc:	b25b      	sxtb	r3, r3
 80123ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123d2:	d103      	bne.n	80123dc <xQueueGenericSend+0x16c>
 80123d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d6:	2200      	movs	r2, #0
 80123d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123e2:	b25b      	sxtb	r3, r3
 80123e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123e8:	d103      	bne.n	80123f2 <xQueueGenericSend+0x182>
 80123ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ec:	2200      	movs	r2, #0
 80123ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80123f2:	f002 f977 	bl	80146e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80123f6:	1d3a      	adds	r2, r7, #4
 80123f8:	f107 0314 	add.w	r3, r7, #20
 80123fc:	4611      	mov	r1, r2
 80123fe:	4618      	mov	r0, r3
 8012400:	f001 fa6c 	bl	80138dc <xTaskCheckForTimeOut>
 8012404:	4603      	mov	r3, r0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d124      	bne.n	8012454 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801240a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801240c:	f000 fb5e 	bl	8012acc <prvIsQueueFull>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d018      	beq.n	8012448 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012418:	3310      	adds	r3, #16
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	4611      	mov	r1, r2
 801241e:	4618      	mov	r0, r3
 8012420:	f001 f8f4 	bl	801360c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012426:	f000 fae9 	bl	80129fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801242a:	f000 ff29 	bl	8013280 <xTaskResumeAll>
 801242e:	4603      	mov	r3, r0
 8012430:	2b00      	cmp	r3, #0
 8012432:	f47f af7c 	bne.w	801232e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012436:	4b0c      	ldr	r3, [pc, #48]	; (8012468 <xQueueGenericSend+0x1f8>)
 8012438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801243c:	601a      	str	r2, [r3, #0]
 801243e:	f3bf 8f4f 	dsb	sy
 8012442:	f3bf 8f6f 	isb	sy
 8012446:	e772      	b.n	801232e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801244a:	f000 fad7 	bl	80129fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801244e:	f000 ff17 	bl	8013280 <xTaskResumeAll>
 8012452:	e76c      	b.n	801232e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012456:	f000 fad1 	bl	80129fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801245a:	f000 ff11 	bl	8013280 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801245e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012460:	4618      	mov	r0, r3
 8012462:	3738      	adds	r7, #56	; 0x38
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}
 8012468:	e000ed04 	.word	0xe000ed04

0801246c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b090      	sub	sp, #64	; 0x40
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]
 8012478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012480:	2b00      	cmp	r3, #0
 8012482:	d10a      	bne.n	801249a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012488:	f383 8811 	msr	BASEPRI, r3
 801248c:	f3bf 8f6f 	isb	sy
 8012490:	f3bf 8f4f 	dsb	sy
 8012494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012496:	bf00      	nop
 8012498:	e7fe      	b.n	8012498 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d103      	bne.n	80124a8 <xQueueGenericSendFromISR+0x3c>
 80124a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d101      	bne.n	80124ac <xQueueGenericSendFromISR+0x40>
 80124a8:	2301      	movs	r3, #1
 80124aa:	e000      	b.n	80124ae <xQueueGenericSendFromISR+0x42>
 80124ac:	2300      	movs	r3, #0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d10a      	bne.n	80124c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80124b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b6:	f383 8811 	msr	BASEPRI, r3
 80124ba:	f3bf 8f6f 	isb	sy
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80124c4:	bf00      	nop
 80124c6:	e7fe      	b.n	80124c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	2b02      	cmp	r3, #2
 80124cc:	d103      	bne.n	80124d6 <xQueueGenericSendFromISR+0x6a>
 80124ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124d2:	2b01      	cmp	r3, #1
 80124d4:	d101      	bne.n	80124da <xQueueGenericSendFromISR+0x6e>
 80124d6:	2301      	movs	r3, #1
 80124d8:	e000      	b.n	80124dc <xQueueGenericSendFromISR+0x70>
 80124da:	2300      	movs	r3, #0
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d10a      	bne.n	80124f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80124e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e4:	f383 8811 	msr	BASEPRI, r3
 80124e8:	f3bf 8f6f 	isb	sy
 80124ec:	f3bf 8f4f 	dsb	sy
 80124f0:	623b      	str	r3, [r7, #32]
}
 80124f2:	bf00      	nop
 80124f4:	e7fe      	b.n	80124f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80124f6:	f002 f9a7 	bl	8014848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80124fa:	f3ef 8211 	mrs	r2, BASEPRI
 80124fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012502:	f383 8811 	msr	BASEPRI, r3
 8012506:	f3bf 8f6f 	isb	sy
 801250a:	f3bf 8f4f 	dsb	sy
 801250e:	61fa      	str	r2, [r7, #28]
 8012510:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012512:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012514:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801251a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801251e:	429a      	cmp	r2, r3
 8012520:	d302      	bcc.n	8012528 <xQueueGenericSendFromISR+0xbc>
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	2b02      	cmp	r3, #2
 8012526:	d12f      	bne.n	8012588 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801252e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012536:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012538:	683a      	ldr	r2, [r7, #0]
 801253a:	68b9      	ldr	r1, [r7, #8]
 801253c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801253e:	f000 f9cd 	bl	80128dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012542:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801254a:	d112      	bne.n	8012572 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012550:	2b00      	cmp	r3, #0
 8012552:	d016      	beq.n	8012582 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012556:	3324      	adds	r3, #36	; 0x24
 8012558:	4618      	mov	r0, r3
 801255a:	f001 f8e3 	bl	8013724 <xTaskRemoveFromEventList>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00e      	beq.n	8012582 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d00b      	beq.n	8012582 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2201      	movs	r2, #1
 801256e:	601a      	str	r2, [r3, #0]
 8012570:	e007      	b.n	8012582 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012572:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012576:	3301      	adds	r3, #1
 8012578:	b2db      	uxtb	r3, r3
 801257a:	b25a      	sxtb	r2, r3
 801257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012582:	2301      	movs	r3, #1
 8012584:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012586:	e001      	b.n	801258c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012588:	2300      	movs	r3, #0
 801258a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801258c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801258e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012596:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801259a:	4618      	mov	r0, r3
 801259c:	3740      	adds	r7, #64	; 0x40
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
	...

080125a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b08c      	sub	sp, #48	; 0x30
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	60b9      	str	r1, [r7, #8]
 80125ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80125b0:	2300      	movs	r3, #0
 80125b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80125b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d10a      	bne.n	80125d4 <xQueueReceive+0x30>
	__asm volatile
 80125be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c2:	f383 8811 	msr	BASEPRI, r3
 80125c6:	f3bf 8f6f 	isb	sy
 80125ca:	f3bf 8f4f 	dsb	sy
 80125ce:	623b      	str	r3, [r7, #32]
}
 80125d0:	bf00      	nop
 80125d2:	e7fe      	b.n	80125d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d103      	bne.n	80125e2 <xQueueReceive+0x3e>
 80125da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d101      	bne.n	80125e6 <xQueueReceive+0x42>
 80125e2:	2301      	movs	r3, #1
 80125e4:	e000      	b.n	80125e8 <xQueueReceive+0x44>
 80125e6:	2300      	movs	r3, #0
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d10a      	bne.n	8012602 <xQueueReceive+0x5e>
	__asm volatile
 80125ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f0:	f383 8811 	msr	BASEPRI, r3
 80125f4:	f3bf 8f6f 	isb	sy
 80125f8:	f3bf 8f4f 	dsb	sy
 80125fc:	61fb      	str	r3, [r7, #28]
}
 80125fe:	bf00      	nop
 8012600:	e7fe      	b.n	8012600 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012602:	f001 faaf 	bl	8013b64 <xTaskGetSchedulerState>
 8012606:	4603      	mov	r3, r0
 8012608:	2b00      	cmp	r3, #0
 801260a:	d102      	bne.n	8012612 <xQueueReceive+0x6e>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d101      	bne.n	8012616 <xQueueReceive+0x72>
 8012612:	2301      	movs	r3, #1
 8012614:	e000      	b.n	8012618 <xQueueReceive+0x74>
 8012616:	2300      	movs	r3, #0
 8012618:	2b00      	cmp	r3, #0
 801261a:	d10a      	bne.n	8012632 <xQueueReceive+0x8e>
	__asm volatile
 801261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012620:	f383 8811 	msr	BASEPRI, r3
 8012624:	f3bf 8f6f 	isb	sy
 8012628:	f3bf 8f4f 	dsb	sy
 801262c:	61bb      	str	r3, [r7, #24]
}
 801262e:	bf00      	nop
 8012630:	e7fe      	b.n	8012630 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012632:	f002 f827 	bl	8014684 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801263a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263e:	2b00      	cmp	r3, #0
 8012640:	d01f      	beq.n	8012682 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012642:	68b9      	ldr	r1, [r7, #8]
 8012644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012646:	f000 f9b3 	bl	80129b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	1e5a      	subs	r2, r3, #1
 801264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012650:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012654:	691b      	ldr	r3, [r3, #16]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d00f      	beq.n	801267a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265c:	3310      	adds	r3, #16
 801265e:	4618      	mov	r0, r3
 8012660:	f001 f860 	bl	8013724 <xTaskRemoveFromEventList>
 8012664:	4603      	mov	r3, r0
 8012666:	2b00      	cmp	r3, #0
 8012668:	d007      	beq.n	801267a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801266a:	4b3d      	ldr	r3, [pc, #244]	; (8012760 <xQueueReceive+0x1bc>)
 801266c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012670:	601a      	str	r2, [r3, #0]
 8012672:	f3bf 8f4f 	dsb	sy
 8012676:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801267a:	f002 f833 	bl	80146e4 <vPortExitCritical>
				return pdPASS;
 801267e:	2301      	movs	r3, #1
 8012680:	e069      	b.n	8012756 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d103      	bne.n	8012690 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012688:	f002 f82c 	bl	80146e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801268c:	2300      	movs	r3, #0
 801268e:	e062      	b.n	8012756 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012692:	2b00      	cmp	r3, #0
 8012694:	d106      	bne.n	80126a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012696:	f107 0310 	add.w	r3, r7, #16
 801269a:	4618      	mov	r0, r3
 801269c:	f001 f908 	bl	80138b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80126a0:	2301      	movs	r3, #1
 80126a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80126a4:	f002 f81e 	bl	80146e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80126a8:	f000 fddc 	bl	8013264 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80126ac:	f001 ffea 	bl	8014684 <vPortEnterCritical>
 80126b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80126b6:	b25b      	sxtb	r3, r3
 80126b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126bc:	d103      	bne.n	80126c6 <xQueueReceive+0x122>
 80126be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c0:	2200      	movs	r2, #0
 80126c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80126c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80126cc:	b25b      	sxtb	r3, r3
 80126ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126d2:	d103      	bne.n	80126dc <xQueueReceive+0x138>
 80126d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d6:	2200      	movs	r2, #0
 80126d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80126dc:	f002 f802 	bl	80146e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80126e0:	1d3a      	adds	r2, r7, #4
 80126e2:	f107 0310 	add.w	r3, r7, #16
 80126e6:	4611      	mov	r1, r2
 80126e8:	4618      	mov	r0, r3
 80126ea:	f001 f8f7 	bl	80138dc <xTaskCheckForTimeOut>
 80126ee:	4603      	mov	r3, r0
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d123      	bne.n	801273c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80126f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126f6:	f000 f9d3 	bl	8012aa0 <prvIsQueueEmpty>
 80126fa:	4603      	mov	r3, r0
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d017      	beq.n	8012730 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012702:	3324      	adds	r3, #36	; 0x24
 8012704:	687a      	ldr	r2, [r7, #4]
 8012706:	4611      	mov	r1, r2
 8012708:	4618      	mov	r0, r3
 801270a:	f000 ff7f 	bl	801360c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801270e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012710:	f000 f974 	bl	80129fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012714:	f000 fdb4 	bl	8013280 <xTaskResumeAll>
 8012718:	4603      	mov	r3, r0
 801271a:	2b00      	cmp	r3, #0
 801271c:	d189      	bne.n	8012632 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801271e:	4b10      	ldr	r3, [pc, #64]	; (8012760 <xQueueReceive+0x1bc>)
 8012720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012724:	601a      	str	r2, [r3, #0]
 8012726:	f3bf 8f4f 	dsb	sy
 801272a:	f3bf 8f6f 	isb	sy
 801272e:	e780      	b.n	8012632 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012732:	f000 f963 	bl	80129fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012736:	f000 fda3 	bl	8013280 <xTaskResumeAll>
 801273a:	e77a      	b.n	8012632 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801273c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801273e:	f000 f95d 	bl	80129fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012742:	f000 fd9d 	bl	8013280 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012748:	f000 f9aa 	bl	8012aa0 <prvIsQueueEmpty>
 801274c:	4603      	mov	r3, r0
 801274e:	2b00      	cmp	r3, #0
 8012750:	f43f af6f 	beq.w	8012632 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012754:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012756:	4618      	mov	r0, r3
 8012758:	3730      	adds	r7, #48	; 0x30
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	e000ed04 	.word	0xe000ed04

08012764 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b08e      	sub	sp, #56	; 0x38
 8012768:	af00      	add	r7, sp, #0
 801276a:	60f8      	str	r0, [r7, #12]
 801276c:	60b9      	str	r1, [r7, #8]
 801276e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012776:	2b00      	cmp	r3, #0
 8012778:	d10a      	bne.n	8012790 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801277e:	f383 8811 	msr	BASEPRI, r3
 8012782:	f3bf 8f6f 	isb	sy
 8012786:	f3bf 8f4f 	dsb	sy
 801278a:	623b      	str	r3, [r7, #32]
}
 801278c:	bf00      	nop
 801278e:	e7fe      	b.n	801278e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d103      	bne.n	801279e <xQueueReceiveFromISR+0x3a>
 8012796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801279a:	2b00      	cmp	r3, #0
 801279c:	d101      	bne.n	80127a2 <xQueueReceiveFromISR+0x3e>
 801279e:	2301      	movs	r3, #1
 80127a0:	e000      	b.n	80127a4 <xQueueReceiveFromISR+0x40>
 80127a2:	2300      	movs	r3, #0
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d10a      	bne.n	80127be <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80127a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ac:	f383 8811 	msr	BASEPRI, r3
 80127b0:	f3bf 8f6f 	isb	sy
 80127b4:	f3bf 8f4f 	dsb	sy
 80127b8:	61fb      	str	r3, [r7, #28]
}
 80127ba:	bf00      	nop
 80127bc:	e7fe      	b.n	80127bc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80127be:	f002 f843 	bl	8014848 <vPortValidateInterruptPriority>
	__asm volatile
 80127c2:	f3ef 8211 	mrs	r2, BASEPRI
 80127c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ca:	f383 8811 	msr	BASEPRI, r3
 80127ce:	f3bf 8f6f 	isb	sy
 80127d2:	f3bf 8f4f 	dsb	sy
 80127d6:	61ba      	str	r2, [r7, #24]
 80127d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80127da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80127dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80127de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80127e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d02f      	beq.n	801284a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80127ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80127f4:	68b9      	ldr	r1, [r7, #8]
 80127f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127f8:	f000 f8da 	bl	80129b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80127fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127fe:	1e5a      	subs	r2, r3, #1
 8012800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012802:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801280c:	d112      	bne.n	8012834 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012810:	691b      	ldr	r3, [r3, #16]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d016      	beq.n	8012844 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012818:	3310      	adds	r3, #16
 801281a:	4618      	mov	r0, r3
 801281c:	f000 ff82 	bl	8013724 <xTaskRemoveFromEventList>
 8012820:	4603      	mov	r3, r0
 8012822:	2b00      	cmp	r3, #0
 8012824:	d00e      	beq.n	8012844 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00b      	beq.n	8012844 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2201      	movs	r2, #1
 8012830:	601a      	str	r2, [r3, #0]
 8012832:	e007      	b.n	8012844 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012838:	3301      	adds	r3, #1
 801283a:	b2db      	uxtb	r3, r3
 801283c:	b25a      	sxtb	r2, r3
 801283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012844:	2301      	movs	r3, #1
 8012846:	637b      	str	r3, [r7, #52]	; 0x34
 8012848:	e001      	b.n	801284e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801284a:	2300      	movs	r3, #0
 801284c:	637b      	str	r3, [r7, #52]	; 0x34
 801284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012850:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	f383 8811 	msr	BASEPRI, r3
}
 8012858:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801285c:	4618      	mov	r0, r3
 801285e:	3738      	adds	r7, #56	; 0x38
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}

08012864 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d10a      	bne.n	8012888 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8012872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012876:	f383 8811 	msr	BASEPRI, r3
 801287a:	f3bf 8f6f 	isb	sy
 801287e:	f3bf 8f4f 	dsb	sy
 8012882:	60bb      	str	r3, [r7, #8]
}
 8012884:	bf00      	nop
 8012886:	e7fe      	b.n	8012886 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8012888:	f001 fefc 	bl	8014684 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012890:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8012892:	f001 ff27 	bl	80146e4 <vPortExitCritical>

	return uxReturn;
 8012896:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012898:	4618      	mov	r0, r3
 801289a:	3710      	adds	r7, #16
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80128a0:	b480      	push	{r7}
 80128a2:	b087      	sub	sp, #28
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d10a      	bne.n	80128c8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80128b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b6:	f383 8811 	msr	BASEPRI, r3
 80128ba:	f3bf 8f6f 	isb	sy
 80128be:	f3bf 8f4f 	dsb	sy
 80128c2:	60fb      	str	r3, [r7, #12]
}
 80128c4:	bf00      	nop
 80128c6:	e7fe      	b.n	80128c6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128cc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80128ce:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80128d0:	4618      	mov	r0, r3
 80128d2:	371c      	adds	r7, #28
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr

080128dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b086      	sub	sp, #24
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	60b9      	str	r1, [r7, #8]
 80128e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80128e8:	2300      	movs	r3, #0
 80128ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d10d      	bne.n	8012916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d14d      	bne.n	801299e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	689b      	ldr	r3, [r3, #8]
 8012906:	4618      	mov	r0, r3
 8012908:	f001 f94a 	bl	8013ba0 <xTaskPriorityDisinherit>
 801290c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	2200      	movs	r2, #0
 8012912:	609a      	str	r2, [r3, #8]
 8012914:	e043      	b.n	801299e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d119      	bne.n	8012950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	6858      	ldr	r0, [r3, #4]
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012924:	461a      	mov	r2, r3
 8012926:	68b9      	ldr	r1, [r7, #8]
 8012928:	f002 f9f2 	bl	8014d10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	685a      	ldr	r2, [r3, #4]
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012934:	441a      	add	r2, r3
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	685a      	ldr	r2, [r3, #4]
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	689b      	ldr	r3, [r3, #8]
 8012942:	429a      	cmp	r2, r3
 8012944:	d32b      	bcc.n	801299e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681a      	ldr	r2, [r3, #0]
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	605a      	str	r2, [r3, #4]
 801294e:	e026      	b.n	801299e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	68d8      	ldr	r0, [r3, #12]
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012958:	461a      	mov	r2, r3
 801295a:	68b9      	ldr	r1, [r7, #8]
 801295c:	f002 f9d8 	bl	8014d10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	68da      	ldr	r2, [r3, #12]
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012968:	425b      	negs	r3, r3
 801296a:	441a      	add	r2, r3
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	68da      	ldr	r2, [r3, #12]
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	429a      	cmp	r2, r3
 801297a:	d207      	bcs.n	801298c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	689a      	ldr	r2, [r3, #8]
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012984:	425b      	negs	r3, r3
 8012986:	441a      	add	r2, r3
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2b02      	cmp	r3, #2
 8012990:	d105      	bne.n	801299e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d002      	beq.n	801299e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	3b01      	subs	r3, #1
 801299c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	1c5a      	adds	r2, r3, #1
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80129a6:	697b      	ldr	r3, [r7, #20]
}
 80129a8:	4618      	mov	r0, r3
 80129aa:	3718      	adds	r7, #24
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}

080129b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d018      	beq.n	80129f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	68da      	ldr	r2, [r3, #12]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129ca:	441a      	add	r2, r3
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	68da      	ldr	r2, [r3, #12]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	689b      	ldr	r3, [r3, #8]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d303      	bcc.n	80129e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	68d9      	ldr	r1, [r3, #12]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129ec:	461a      	mov	r2, r3
 80129ee:	6838      	ldr	r0, [r7, #0]
 80129f0:	f002 f98e 	bl	8014d10 <memcpy>
	}
}
 80129f4:	bf00      	nop
 80129f6:	3708      	adds	r7, #8
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}

080129fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012a04:	f001 fe3e 	bl	8014684 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012a10:	e011      	b.n	8012a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d012      	beq.n	8012a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	3324      	adds	r3, #36	; 0x24
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f000 fe80 	bl	8013724 <xTaskRemoveFromEventList>
 8012a24:	4603      	mov	r3, r0
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d001      	beq.n	8012a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012a2a:	f000 ffb9 	bl	80139a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012a2e:	7bfb      	ldrb	r3, [r7, #15]
 8012a30:	3b01      	subs	r3, #1
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	dce9      	bgt.n	8012a12 <prvUnlockQueue+0x16>
 8012a3e:	e000      	b.n	8012a42 <prvUnlockQueue+0x46>
					break;
 8012a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	22ff      	movs	r2, #255	; 0xff
 8012a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012a4a:	f001 fe4b 	bl	80146e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012a4e:	f001 fe19 	bl	8014684 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012a5a:	e011      	b.n	8012a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	691b      	ldr	r3, [r3, #16]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d012      	beq.n	8012a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	3310      	adds	r3, #16
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f000 fe5b 	bl	8013724 <xTaskRemoveFromEventList>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d001      	beq.n	8012a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012a74:	f000 ff94 	bl	80139a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012a78:	7bbb      	ldrb	r3, [r7, #14]
 8012a7a:	3b01      	subs	r3, #1
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	dce9      	bgt.n	8012a5c <prvUnlockQueue+0x60>
 8012a88:	e000      	b.n	8012a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	22ff      	movs	r2, #255	; 0xff
 8012a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012a94:	f001 fe26 	bl	80146e4 <vPortExitCritical>
}
 8012a98:	bf00      	nop
 8012a9a:	3710      	adds	r7, #16
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}

08012aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b084      	sub	sp, #16
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012aa8:	f001 fdec 	bl	8014684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d102      	bne.n	8012aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	60fb      	str	r3, [r7, #12]
 8012ab8:	e001      	b.n	8012abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012aba:	2300      	movs	r3, #0
 8012abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012abe:	f001 fe11 	bl	80146e4 <vPortExitCritical>

	return xReturn;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3710      	adds	r7, #16
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}

08012acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b084      	sub	sp, #16
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012ad4:	f001 fdd6 	bl	8014684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d102      	bne.n	8012aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	60fb      	str	r3, [r7, #12]
 8012ae8:	e001      	b.n	8012aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012aea:	2300      	movs	r3, #0
 8012aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012aee:	f001 fdf9 	bl	80146e4 <vPortExitCritical>

	return xReturn;
 8012af2:	68fb      	ldr	r3, [r7, #12]
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	3710      	adds	r7, #16
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012afc:	b480      	push	{r7}
 8012afe:	b085      	sub	sp, #20
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012b06:	2300      	movs	r3, #0
 8012b08:	60fb      	str	r3, [r7, #12]
 8012b0a:	e014      	b.n	8012b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012b0c:	4a0f      	ldr	r2, [pc, #60]	; (8012b4c <vQueueAddToRegistry+0x50>)
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d10b      	bne.n	8012b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012b18:	490c      	ldr	r1, [pc, #48]	; (8012b4c <vQueueAddToRegistry+0x50>)
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	683a      	ldr	r2, [r7, #0]
 8012b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012b22:	4a0a      	ldr	r2, [pc, #40]	; (8012b4c <vQueueAddToRegistry+0x50>)
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	00db      	lsls	r3, r3, #3
 8012b28:	4413      	add	r3, r2
 8012b2a:	687a      	ldr	r2, [r7, #4]
 8012b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012b2e:	e006      	b.n	8012b3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	3301      	adds	r3, #1
 8012b34:	60fb      	str	r3, [r7, #12]
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2b07      	cmp	r3, #7
 8012b3a:	d9e7      	bls.n	8012b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012b3c:	bf00      	nop
 8012b3e:	bf00      	nop
 8012b40:	3714      	adds	r7, #20
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr
 8012b4a:	bf00      	nop
 8012b4c:	240012f8 	.word	0x240012f8

08012b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b086      	sub	sp, #24
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	60b9      	str	r1, [r7, #8]
 8012b5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012b60:	f001 fd90 	bl	8014684 <vPortEnterCritical>
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b6a:	b25b      	sxtb	r3, r3
 8012b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b70:	d103      	bne.n	8012b7a <vQueueWaitForMessageRestricted+0x2a>
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	2200      	movs	r2, #0
 8012b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b80:	b25b      	sxtb	r3, r3
 8012b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b86:	d103      	bne.n	8012b90 <vQueueWaitForMessageRestricted+0x40>
 8012b88:	697b      	ldr	r3, [r7, #20]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b90:	f001 fda8 	bl	80146e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d106      	bne.n	8012baa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	3324      	adds	r3, #36	; 0x24
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	68b9      	ldr	r1, [r7, #8]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f000 fd91 	bl	80136cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012baa:	6978      	ldr	r0, [r7, #20]
 8012bac:	f7ff ff26 	bl	80129fc <prvUnlockQueue>
	}
 8012bb0:	bf00      	nop
 8012bb2:	3718      	adds	r7, #24
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b08e      	sub	sp, #56	; 0x38
 8012bbc:	af04      	add	r7, sp, #16
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]
 8012bc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d10a      	bne.n	8012be2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd0:	f383 8811 	msr	BASEPRI, r3
 8012bd4:	f3bf 8f6f 	isb	sy
 8012bd8:	f3bf 8f4f 	dsb	sy
 8012bdc:	623b      	str	r3, [r7, #32]
}
 8012bde:	bf00      	nop
 8012be0:	e7fe      	b.n	8012be0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d10a      	bne.n	8012bfe <xTaskCreateStatic+0x46>
	__asm volatile
 8012be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bec:	f383 8811 	msr	BASEPRI, r3
 8012bf0:	f3bf 8f6f 	isb	sy
 8012bf4:	f3bf 8f4f 	dsb	sy
 8012bf8:	61fb      	str	r3, [r7, #28]
}
 8012bfa:	bf00      	nop
 8012bfc:	e7fe      	b.n	8012bfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012bfe:	235c      	movs	r3, #92	; 0x5c
 8012c00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	2b5c      	cmp	r3, #92	; 0x5c
 8012c06:	d00a      	beq.n	8012c1e <xTaskCreateStatic+0x66>
	__asm volatile
 8012c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c0c:	f383 8811 	msr	BASEPRI, r3
 8012c10:	f3bf 8f6f 	isb	sy
 8012c14:	f3bf 8f4f 	dsb	sy
 8012c18:	61bb      	str	r3, [r7, #24]
}
 8012c1a:	bf00      	nop
 8012c1c:	e7fe      	b.n	8012c1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012c1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d01e      	beq.n	8012c64 <xTaskCreateStatic+0xac>
 8012c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d01b      	beq.n	8012c64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c38:	2202      	movs	r2, #2
 8012c3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012c3e:	2300      	movs	r3, #0
 8012c40:	9303      	str	r3, [sp, #12]
 8012c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c44:	9302      	str	r3, [sp, #8]
 8012c46:	f107 0314 	add.w	r3, r7, #20
 8012c4a:	9301      	str	r3, [sp, #4]
 8012c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4e:	9300      	str	r3, [sp, #0]
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	687a      	ldr	r2, [r7, #4]
 8012c54:	68b9      	ldr	r1, [r7, #8]
 8012c56:	68f8      	ldr	r0, [r7, #12]
 8012c58:	f000 f850 	bl	8012cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c5e:	f000 f8dd 	bl	8012e1c <prvAddNewTaskToReadyList>
 8012c62:	e001      	b.n	8012c68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012c64:	2300      	movs	r3, #0
 8012c66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012c68:	697b      	ldr	r3, [r7, #20]
	}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3728      	adds	r7, #40	; 0x28
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}

08012c72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012c72:	b580      	push	{r7, lr}
 8012c74:	b08c      	sub	sp, #48	; 0x30
 8012c76:	af04      	add	r7, sp, #16
 8012c78:	60f8      	str	r0, [r7, #12]
 8012c7a:	60b9      	str	r1, [r7, #8]
 8012c7c:	603b      	str	r3, [r7, #0]
 8012c7e:	4613      	mov	r3, r2
 8012c80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012c82:	88fb      	ldrh	r3, [r7, #6]
 8012c84:	009b      	lsls	r3, r3, #2
 8012c86:	4618      	mov	r0, r3
 8012c88:	f001 fe1e 	bl	80148c8 <pvPortMalloc>
 8012c8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d00e      	beq.n	8012cb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012c94:	205c      	movs	r0, #92	; 0x5c
 8012c96:	f001 fe17 	bl	80148c8 <pvPortMalloc>
 8012c9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012c9c:	69fb      	ldr	r3, [r7, #28]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d003      	beq.n	8012caa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012ca2:	69fb      	ldr	r3, [r7, #28]
 8012ca4:	697a      	ldr	r2, [r7, #20]
 8012ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8012ca8:	e005      	b.n	8012cb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012caa:	6978      	ldr	r0, [r7, #20]
 8012cac:	f001 fed8 	bl	8014a60 <vPortFree>
 8012cb0:	e001      	b.n	8012cb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012cb6:	69fb      	ldr	r3, [r7, #28]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d017      	beq.n	8012cec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012cc4:	88fa      	ldrh	r2, [r7, #6]
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	9303      	str	r3, [sp, #12]
 8012cca:	69fb      	ldr	r3, [r7, #28]
 8012ccc:	9302      	str	r3, [sp, #8]
 8012cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd0:	9301      	str	r3, [sp, #4]
 8012cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd4:	9300      	str	r3, [sp, #0]
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	68b9      	ldr	r1, [r7, #8]
 8012cda:	68f8      	ldr	r0, [r7, #12]
 8012cdc:	f000 f80e 	bl	8012cfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012ce0:	69f8      	ldr	r0, [r7, #28]
 8012ce2:	f000 f89b 	bl	8012e1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	61bb      	str	r3, [r7, #24]
 8012cea:	e002      	b.n	8012cf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012cf2:	69bb      	ldr	r3, [r7, #24]
	}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3720      	adds	r7, #32
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}

08012cfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b088      	sub	sp, #32
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	60b9      	str	r1, [r7, #8]
 8012d06:	607a      	str	r2, [r7, #4]
 8012d08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	461a      	mov	r2, r3
 8012d14:	21a5      	movs	r1, #165	; 0xa5
 8012d16:	f002 f809 	bl	8014d2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d1e:	6879      	ldr	r1, [r7, #4]
 8012d20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012d24:	440b      	add	r3, r1
 8012d26:	009b      	lsls	r3, r3, #2
 8012d28:	4413      	add	r3, r2
 8012d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	f023 0307 	bic.w	r3, r3, #7
 8012d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012d34:	69bb      	ldr	r3, [r7, #24]
 8012d36:	f003 0307 	and.w	r3, r3, #7
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d00a      	beq.n	8012d54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d42:	f383 8811 	msr	BASEPRI, r3
 8012d46:	f3bf 8f6f 	isb	sy
 8012d4a:	f3bf 8f4f 	dsb	sy
 8012d4e:	617b      	str	r3, [r7, #20]
}
 8012d50:	bf00      	nop
 8012d52:	e7fe      	b.n	8012d52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d01f      	beq.n	8012d9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	61fb      	str	r3, [r7, #28]
 8012d5e:	e012      	b.n	8012d86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012d60:	68ba      	ldr	r2, [r7, #8]
 8012d62:	69fb      	ldr	r3, [r7, #28]
 8012d64:	4413      	add	r3, r2
 8012d66:	7819      	ldrb	r1, [r3, #0]
 8012d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d6a:	69fb      	ldr	r3, [r7, #28]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	3334      	adds	r3, #52	; 0x34
 8012d70:	460a      	mov	r2, r1
 8012d72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012d74:	68ba      	ldr	r2, [r7, #8]
 8012d76:	69fb      	ldr	r3, [r7, #28]
 8012d78:	4413      	add	r3, r2
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d006      	beq.n	8012d8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	3301      	adds	r3, #1
 8012d84:	61fb      	str	r3, [r7, #28]
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	2b0f      	cmp	r3, #15
 8012d8a:	d9e9      	bls.n	8012d60 <prvInitialiseNewTask+0x64>
 8012d8c:	e000      	b.n	8012d90 <prvInitialiseNewTask+0x94>
			{
				break;
 8012d8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d92:	2200      	movs	r2, #0
 8012d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012d98:	e003      	b.n	8012da2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da4:	2b37      	cmp	r3, #55	; 0x37
 8012da6:	d901      	bls.n	8012dac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012da8:	2337      	movs	r3, #55	; 0x37
 8012daa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012db0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012db6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dba:	2200      	movs	r2, #0
 8012dbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc0:	3304      	adds	r3, #4
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7ff f882 	bl	8011ecc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dca:	3318      	adds	r3, #24
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7ff f87d 	bl	8011ecc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012de6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dea:	2200      	movs	r2, #0
 8012dec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df0:	2200      	movs	r2, #0
 8012df2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012df6:	683a      	ldr	r2, [r7, #0]
 8012df8:	68f9      	ldr	r1, [r7, #12]
 8012dfa:	69b8      	ldr	r0, [r7, #24]
 8012dfc:	f001 fb18 	bl	8014430 <pxPortInitialiseStack>
 8012e00:	4602      	mov	r2, r0
 8012e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d002      	beq.n	8012e12 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e12:	bf00      	nop
 8012e14:	3720      	adds	r7, #32
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
	...

08012e1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b082      	sub	sp, #8
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012e24:	f001 fc2e 	bl	8014684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012e28:	4b2d      	ldr	r3, [pc, #180]	; (8012ee0 <prvAddNewTaskToReadyList+0xc4>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	4a2c      	ldr	r2, [pc, #176]	; (8012ee0 <prvAddNewTaskToReadyList+0xc4>)
 8012e30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012e32:	4b2c      	ldr	r3, [pc, #176]	; (8012ee4 <prvAddNewTaskToReadyList+0xc8>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d109      	bne.n	8012e4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012e3a:	4a2a      	ldr	r2, [pc, #168]	; (8012ee4 <prvAddNewTaskToReadyList+0xc8>)
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012e40:	4b27      	ldr	r3, [pc, #156]	; (8012ee0 <prvAddNewTaskToReadyList+0xc4>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b01      	cmp	r3, #1
 8012e46:	d110      	bne.n	8012e6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012e48:	f000 fdce 	bl	80139e8 <prvInitialiseTaskLists>
 8012e4c:	e00d      	b.n	8012e6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012e4e:	4b26      	ldr	r3, [pc, #152]	; (8012ee8 <prvAddNewTaskToReadyList+0xcc>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d109      	bne.n	8012e6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012e56:	4b23      	ldr	r3, [pc, #140]	; (8012ee4 <prvAddNewTaskToReadyList+0xc8>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d802      	bhi.n	8012e6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012e64:	4a1f      	ldr	r2, [pc, #124]	; (8012ee4 <prvAddNewTaskToReadyList+0xc8>)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012e6a:	4b20      	ldr	r3, [pc, #128]	; (8012eec <prvAddNewTaskToReadyList+0xd0>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	3301      	adds	r3, #1
 8012e70:	4a1e      	ldr	r2, [pc, #120]	; (8012eec <prvAddNewTaskToReadyList+0xd0>)
 8012e72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012e74:	4b1d      	ldr	r3, [pc, #116]	; (8012eec <prvAddNewTaskToReadyList+0xd0>)
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e80:	4b1b      	ldr	r3, [pc, #108]	; (8012ef0 <prvAddNewTaskToReadyList+0xd4>)
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d903      	bls.n	8012e90 <prvAddNewTaskToReadyList+0x74>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e8c:	4a18      	ldr	r2, [pc, #96]	; (8012ef0 <prvAddNewTaskToReadyList+0xd4>)
 8012e8e:	6013      	str	r3, [r2, #0]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e94:	4613      	mov	r3, r2
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	4413      	add	r3, r2
 8012e9a:	009b      	lsls	r3, r3, #2
 8012e9c:	4a15      	ldr	r2, [pc, #84]	; (8012ef4 <prvAddNewTaskToReadyList+0xd8>)
 8012e9e:	441a      	add	r2, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	3304      	adds	r3, #4
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	4610      	mov	r0, r2
 8012ea8:	f7ff f81d 	bl	8011ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012eac:	f001 fc1a 	bl	80146e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012eb0:	4b0d      	ldr	r3, [pc, #52]	; (8012ee8 <prvAddNewTaskToReadyList+0xcc>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d00e      	beq.n	8012ed6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012eb8:	4b0a      	ldr	r3, [pc, #40]	; (8012ee4 <prvAddNewTaskToReadyList+0xc8>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d207      	bcs.n	8012ed6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012ec6:	4b0c      	ldr	r3, [pc, #48]	; (8012ef8 <prvAddNewTaskToReadyList+0xdc>)
 8012ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ecc:	601a      	str	r2, [r3, #0]
 8012ece:	f3bf 8f4f 	dsb	sy
 8012ed2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ed6:	bf00      	nop
 8012ed8:	3708      	adds	r7, #8
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	bf00      	nop
 8012ee0:	2400180c 	.word	0x2400180c
 8012ee4:	24001338 	.word	0x24001338
 8012ee8:	24001818 	.word	0x24001818
 8012eec:	24001828 	.word	0x24001828
 8012ef0:	24001814 	.word	0x24001814
 8012ef4:	2400133c 	.word	0x2400133c
 8012ef8:	e000ed04 	.word	0xe000ed04

08012efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b084      	sub	sp, #16
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012f04:	2300      	movs	r3, #0
 8012f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d017      	beq.n	8012f3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012f0e:	4b13      	ldr	r3, [pc, #76]	; (8012f5c <vTaskDelay+0x60>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00a      	beq.n	8012f2c <vTaskDelay+0x30>
	__asm volatile
 8012f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f1a:	f383 8811 	msr	BASEPRI, r3
 8012f1e:	f3bf 8f6f 	isb	sy
 8012f22:	f3bf 8f4f 	dsb	sy
 8012f26:	60bb      	str	r3, [r7, #8]
}
 8012f28:	bf00      	nop
 8012f2a:	e7fe      	b.n	8012f2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012f2c:	f000 f99a 	bl	8013264 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012f30:	2100      	movs	r1, #0
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f000 feba 	bl	8013cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012f38:	f000 f9a2 	bl	8013280 <xTaskResumeAll>
 8012f3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d107      	bne.n	8012f54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012f44:	4b06      	ldr	r3, [pc, #24]	; (8012f60 <vTaskDelay+0x64>)
 8012f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f4a:	601a      	str	r2, [r3, #0]
 8012f4c:	f3bf 8f4f 	dsb	sy
 8012f50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f54:	bf00      	nop
 8012f56:	3710      	adds	r7, #16
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	24001834 	.word	0x24001834
 8012f60:	e000ed04 	.word	0xe000ed04

08012f64 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b084      	sub	sp, #16
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012f6c:	f001 fb8a 	bl	8014684 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d102      	bne.n	8012f7c <vTaskSuspend+0x18>
 8012f76:	4b30      	ldr	r3, [pc, #192]	; (8013038 <vTaskSuspend+0xd4>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	e000      	b.n	8012f7e <vTaskSuspend+0x1a>
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	3304      	adds	r3, #4
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7ff f80b 	bl	8011fa0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d004      	beq.n	8012f9c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	3318      	adds	r3, #24
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7ff f802 	bl	8011fa0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	3304      	adds	r3, #4
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	4826      	ldr	r0, [pc, #152]	; (801303c <vTaskSuspend+0xd8>)
 8012fa4:	f7fe ff9f 	bl	8011ee6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d103      	bne.n	8012fbc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012fbc:	f001 fb92 	bl	80146e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012fc0:	4b1f      	ldr	r3, [pc, #124]	; (8013040 <vTaskSuspend+0xdc>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d005      	beq.n	8012fd4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012fc8:	f001 fb5c 	bl	8014684 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012fcc:	f000 fdaa 	bl	8013b24 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012fd0:	f001 fb88 	bl	80146e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8012fd4:	4b18      	ldr	r3, [pc, #96]	; (8013038 <vTaskSuspend+0xd4>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	68fa      	ldr	r2, [r7, #12]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d127      	bne.n	801302e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8012fde:	4b18      	ldr	r3, [pc, #96]	; (8013040 <vTaskSuspend+0xdc>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d017      	beq.n	8013016 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8012fe6:	4b17      	ldr	r3, [pc, #92]	; (8013044 <vTaskSuspend+0xe0>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d00a      	beq.n	8013004 <vTaskSuspend+0xa0>
	__asm volatile
 8012fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff2:	f383 8811 	msr	BASEPRI, r3
 8012ff6:	f3bf 8f6f 	isb	sy
 8012ffa:	f3bf 8f4f 	dsb	sy
 8012ffe:	60bb      	str	r3, [r7, #8]
}
 8013000:	bf00      	nop
 8013002:	e7fe      	b.n	8013002 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8013004:	4b10      	ldr	r3, [pc, #64]	; (8013048 <vTaskSuspend+0xe4>)
 8013006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801300a:	601a      	str	r2, [r3, #0]
 801300c:	f3bf 8f4f 	dsb	sy
 8013010:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013014:	e00b      	b.n	801302e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013016:	4b09      	ldr	r3, [pc, #36]	; (801303c <vTaskSuspend+0xd8>)
 8013018:	681a      	ldr	r2, [r3, #0]
 801301a:	4b0c      	ldr	r3, [pc, #48]	; (801304c <vTaskSuspend+0xe8>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	429a      	cmp	r2, r3
 8013020:	d103      	bne.n	801302a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8013022:	4b05      	ldr	r3, [pc, #20]	; (8013038 <vTaskSuspend+0xd4>)
 8013024:	2200      	movs	r2, #0
 8013026:	601a      	str	r2, [r3, #0]
	}
 8013028:	e001      	b.n	801302e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 801302a:	f000 fa91 	bl	8013550 <vTaskSwitchContext>
	}
 801302e:	bf00      	nop
 8013030:	3710      	adds	r7, #16
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	24001338 	.word	0x24001338
 801303c:	240017f8 	.word	0x240017f8
 8013040:	24001818 	.word	0x24001818
 8013044:	24001834 	.word	0x24001834
 8013048:	e000ed04 	.word	0xe000ed04
 801304c:	2400180c 	.word	0x2400180c

08013050 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013050:	b480      	push	{r7}
 8013052:	b087      	sub	sp, #28
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013058:	2300      	movs	r3, #0
 801305a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d10a      	bne.n	801307c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8013066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801306a:	f383 8811 	msr	BASEPRI, r3
 801306e:	f3bf 8f6f 	isb	sy
 8013072:	f3bf 8f4f 	dsb	sy
 8013076:	60fb      	str	r3, [r7, #12]
}
 8013078:	bf00      	nop
 801307a:	e7fe      	b.n	801307a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	695b      	ldr	r3, [r3, #20]
 8013080:	4a0a      	ldr	r2, [pc, #40]	; (80130ac <prvTaskIsTaskSuspended+0x5c>)
 8013082:	4293      	cmp	r3, r2
 8013084:	d10a      	bne.n	801309c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801308a:	4a09      	ldr	r2, [pc, #36]	; (80130b0 <prvTaskIsTaskSuspended+0x60>)
 801308c:	4293      	cmp	r3, r2
 801308e:	d005      	beq.n	801309c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013094:	2b00      	cmp	r3, #0
 8013096:	d101      	bne.n	801309c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8013098:	2301      	movs	r3, #1
 801309a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801309c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801309e:	4618      	mov	r0, r3
 80130a0:	371c      	adds	r7, #28
 80130a2:	46bd      	mov	sp, r7
 80130a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a8:	4770      	bx	lr
 80130aa:	bf00      	nop
 80130ac:	240017f8 	.word	0x240017f8
 80130b0:	240017cc 	.word	0x240017cc

080130b4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b08a      	sub	sp, #40	; 0x28
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80130bc:	2300      	movs	r3, #0
 80130be:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d10a      	bne.n	80130e0 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80130ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ce:	f383 8811 	msr	BASEPRI, r3
 80130d2:	f3bf 8f6f 	isb	sy
 80130d6:	f3bf 8f4f 	dsb	sy
 80130da:	61bb      	str	r3, [r7, #24]
}
 80130dc:	bf00      	nop
 80130de:	e7fe      	b.n	80130de <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80130e0:	f001 fbb2 	bl	8014848 <vPortValidateInterruptPriority>
	__asm volatile
 80130e4:	f3ef 8211 	mrs	r2, BASEPRI
 80130e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ec:	f383 8811 	msr	BASEPRI, r3
 80130f0:	f3bf 8f6f 	isb	sy
 80130f4:	f3bf 8f4f 	dsb	sy
 80130f8:	617a      	str	r2, [r7, #20]
 80130fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80130fc:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80130fe:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013100:	6a38      	ldr	r0, [r7, #32]
 8013102:	f7ff ffa5 	bl	8013050 <prvTaskIsTaskSuspended>
 8013106:	4603      	mov	r3, r0
 8013108:	2b00      	cmp	r3, #0
 801310a:	d030      	beq.n	801316e <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801310c:	4b1d      	ldr	r3, [pc, #116]	; (8013184 <xTaskResumeFromISR+0xd0>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d126      	bne.n	8013162 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013114:	6a3b      	ldr	r3, [r7, #32]
 8013116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013118:	4b1b      	ldr	r3, [pc, #108]	; (8013188 <xTaskResumeFromISR+0xd4>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801311e:	429a      	cmp	r2, r3
 8013120:	d301      	bcc.n	8013126 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8013122:	2301      	movs	r3, #1
 8013124:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013126:	6a3b      	ldr	r3, [r7, #32]
 8013128:	3304      	adds	r3, #4
 801312a:	4618      	mov	r0, r3
 801312c:	f7fe ff38 	bl	8011fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013130:	6a3b      	ldr	r3, [r7, #32]
 8013132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013134:	4b15      	ldr	r3, [pc, #84]	; (801318c <xTaskResumeFromISR+0xd8>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	429a      	cmp	r2, r3
 801313a:	d903      	bls.n	8013144 <xTaskResumeFromISR+0x90>
 801313c:	6a3b      	ldr	r3, [r7, #32]
 801313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013140:	4a12      	ldr	r2, [pc, #72]	; (801318c <xTaskResumeFromISR+0xd8>)
 8013142:	6013      	str	r3, [r2, #0]
 8013144:	6a3b      	ldr	r3, [r7, #32]
 8013146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013148:	4613      	mov	r3, r2
 801314a:	009b      	lsls	r3, r3, #2
 801314c:	4413      	add	r3, r2
 801314e:	009b      	lsls	r3, r3, #2
 8013150:	4a0f      	ldr	r2, [pc, #60]	; (8013190 <xTaskResumeFromISR+0xdc>)
 8013152:	441a      	add	r2, r3
 8013154:	6a3b      	ldr	r3, [r7, #32]
 8013156:	3304      	adds	r3, #4
 8013158:	4619      	mov	r1, r3
 801315a:	4610      	mov	r0, r2
 801315c:	f7fe fec3 	bl	8011ee6 <vListInsertEnd>
 8013160:	e005      	b.n	801316e <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013162:	6a3b      	ldr	r3, [r7, #32]
 8013164:	3318      	adds	r3, #24
 8013166:	4619      	mov	r1, r3
 8013168:	480a      	ldr	r0, [pc, #40]	; (8013194 <xTaskResumeFromISR+0xe0>)
 801316a:	f7fe febc 	bl	8011ee6 <vListInsertEnd>
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	f383 8811 	msr	BASEPRI, r3
}
 8013178:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801317c:	4618      	mov	r0, r3
 801317e:	3728      	adds	r7, #40	; 0x28
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	24001834 	.word	0x24001834
 8013188:	24001338 	.word	0x24001338
 801318c:	24001814 	.word	0x24001814
 8013190:	2400133c 	.word	0x2400133c
 8013194:	240017cc 	.word	0x240017cc

08013198 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b08a      	sub	sp, #40	; 0x28
 801319c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801319e:	2300      	movs	r3, #0
 80131a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80131a2:	2300      	movs	r3, #0
 80131a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80131a6:	463a      	mov	r2, r7
 80131a8:	1d39      	adds	r1, r7, #4
 80131aa:	f107 0308 	add.w	r3, r7, #8
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7fe fc4a 	bl	8011a48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80131b4:	6839      	ldr	r1, [r7, #0]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	68ba      	ldr	r2, [r7, #8]
 80131ba:	9202      	str	r2, [sp, #8]
 80131bc:	9301      	str	r3, [sp, #4]
 80131be:	2300      	movs	r3, #0
 80131c0:	9300      	str	r3, [sp, #0]
 80131c2:	2300      	movs	r3, #0
 80131c4:	460a      	mov	r2, r1
 80131c6:	4921      	ldr	r1, [pc, #132]	; (801324c <vTaskStartScheduler+0xb4>)
 80131c8:	4821      	ldr	r0, [pc, #132]	; (8013250 <vTaskStartScheduler+0xb8>)
 80131ca:	f7ff fcf5 	bl	8012bb8 <xTaskCreateStatic>
 80131ce:	4603      	mov	r3, r0
 80131d0:	4a20      	ldr	r2, [pc, #128]	; (8013254 <vTaskStartScheduler+0xbc>)
 80131d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80131d4:	4b1f      	ldr	r3, [pc, #124]	; (8013254 <vTaskStartScheduler+0xbc>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d002      	beq.n	80131e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80131dc:	2301      	movs	r3, #1
 80131de:	617b      	str	r3, [r7, #20]
 80131e0:	e001      	b.n	80131e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80131e2:	2300      	movs	r3, #0
 80131e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	2b01      	cmp	r3, #1
 80131ea:	d102      	bne.n	80131f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80131ec:	f000 fdb2 	bl	8013d54 <xTimerCreateTimerTask>
 80131f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	2b01      	cmp	r3, #1
 80131f6:	d116      	bne.n	8013226 <vTaskStartScheduler+0x8e>
	__asm volatile
 80131f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fc:	f383 8811 	msr	BASEPRI, r3
 8013200:	f3bf 8f6f 	isb	sy
 8013204:	f3bf 8f4f 	dsb	sy
 8013208:	613b      	str	r3, [r7, #16]
}
 801320a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801320c:	4b12      	ldr	r3, [pc, #72]	; (8013258 <vTaskStartScheduler+0xc0>)
 801320e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013212:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013214:	4b11      	ldr	r3, [pc, #68]	; (801325c <vTaskStartScheduler+0xc4>)
 8013216:	2201      	movs	r2, #1
 8013218:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801321a:	4b11      	ldr	r3, [pc, #68]	; (8013260 <vTaskStartScheduler+0xc8>)
 801321c:	2200      	movs	r2, #0
 801321e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013220:	f001 f98e 	bl	8014540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013224:	e00e      	b.n	8013244 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801322c:	d10a      	bne.n	8013244 <vTaskStartScheduler+0xac>
	__asm volatile
 801322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013232:	f383 8811 	msr	BASEPRI, r3
 8013236:	f3bf 8f6f 	isb	sy
 801323a:	f3bf 8f4f 	dsb	sy
 801323e:	60fb      	str	r3, [r7, #12]
}
 8013240:	bf00      	nop
 8013242:	e7fe      	b.n	8013242 <vTaskStartScheduler+0xaa>
}
 8013244:	bf00      	nop
 8013246:	3718      	adds	r7, #24
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	08015fd0 	.word	0x08015fd0
 8013250:	080139b9 	.word	0x080139b9
 8013254:	24001830 	.word	0x24001830
 8013258:	2400182c 	.word	0x2400182c
 801325c:	24001818 	.word	0x24001818
 8013260:	24001810 	.word	0x24001810

08013264 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013264:	b480      	push	{r7}
 8013266:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013268:	4b04      	ldr	r3, [pc, #16]	; (801327c <vTaskSuspendAll+0x18>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	3301      	adds	r3, #1
 801326e:	4a03      	ldr	r2, [pc, #12]	; (801327c <vTaskSuspendAll+0x18>)
 8013270:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013272:	bf00      	nop
 8013274:	46bd      	mov	sp, r7
 8013276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327a:	4770      	bx	lr
 801327c:	24001834 	.word	0x24001834

08013280 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b084      	sub	sp, #16
 8013284:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013286:	2300      	movs	r3, #0
 8013288:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801328a:	2300      	movs	r3, #0
 801328c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801328e:	4b42      	ldr	r3, [pc, #264]	; (8013398 <xTaskResumeAll+0x118>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d10a      	bne.n	80132ac <xTaskResumeAll+0x2c>
	__asm volatile
 8013296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801329a:	f383 8811 	msr	BASEPRI, r3
 801329e:	f3bf 8f6f 	isb	sy
 80132a2:	f3bf 8f4f 	dsb	sy
 80132a6:	603b      	str	r3, [r7, #0]
}
 80132a8:	bf00      	nop
 80132aa:	e7fe      	b.n	80132aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80132ac:	f001 f9ea 	bl	8014684 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80132b0:	4b39      	ldr	r3, [pc, #228]	; (8013398 <xTaskResumeAll+0x118>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	3b01      	subs	r3, #1
 80132b6:	4a38      	ldr	r2, [pc, #224]	; (8013398 <xTaskResumeAll+0x118>)
 80132b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80132ba:	4b37      	ldr	r3, [pc, #220]	; (8013398 <xTaskResumeAll+0x118>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d162      	bne.n	8013388 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80132c2:	4b36      	ldr	r3, [pc, #216]	; (801339c <xTaskResumeAll+0x11c>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d05e      	beq.n	8013388 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80132ca:	e02f      	b.n	801332c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132cc:	4b34      	ldr	r3, [pc, #208]	; (80133a0 <xTaskResumeAll+0x120>)
 80132ce:	68db      	ldr	r3, [r3, #12]
 80132d0:	68db      	ldr	r3, [r3, #12]
 80132d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	3318      	adds	r3, #24
 80132d8:	4618      	mov	r0, r3
 80132da:	f7fe fe61 	bl	8011fa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	3304      	adds	r3, #4
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fe fe5c 	bl	8011fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132ec:	4b2d      	ldr	r3, [pc, #180]	; (80133a4 <xTaskResumeAll+0x124>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d903      	bls.n	80132fc <xTaskResumeAll+0x7c>
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132f8:	4a2a      	ldr	r2, [pc, #168]	; (80133a4 <xTaskResumeAll+0x124>)
 80132fa:	6013      	str	r3, [r2, #0]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013300:	4613      	mov	r3, r2
 8013302:	009b      	lsls	r3, r3, #2
 8013304:	4413      	add	r3, r2
 8013306:	009b      	lsls	r3, r3, #2
 8013308:	4a27      	ldr	r2, [pc, #156]	; (80133a8 <xTaskResumeAll+0x128>)
 801330a:	441a      	add	r2, r3
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	3304      	adds	r3, #4
 8013310:	4619      	mov	r1, r3
 8013312:	4610      	mov	r0, r2
 8013314:	f7fe fde7 	bl	8011ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801331c:	4b23      	ldr	r3, [pc, #140]	; (80133ac <xTaskResumeAll+0x12c>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013322:	429a      	cmp	r2, r3
 8013324:	d302      	bcc.n	801332c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013326:	4b22      	ldr	r3, [pc, #136]	; (80133b0 <xTaskResumeAll+0x130>)
 8013328:	2201      	movs	r2, #1
 801332a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801332c:	4b1c      	ldr	r3, [pc, #112]	; (80133a0 <xTaskResumeAll+0x120>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d1cb      	bne.n	80132cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d001      	beq.n	801333e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801333a:	f000 fbf3 	bl	8013b24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801333e:	4b1d      	ldr	r3, [pc, #116]	; (80133b4 <xTaskResumeAll+0x134>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d010      	beq.n	801336c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801334a:	f000 f847 	bl	80133dc <xTaskIncrementTick>
 801334e:	4603      	mov	r3, r0
 8013350:	2b00      	cmp	r3, #0
 8013352:	d002      	beq.n	801335a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013354:	4b16      	ldr	r3, [pc, #88]	; (80133b0 <xTaskResumeAll+0x130>)
 8013356:	2201      	movs	r2, #1
 8013358:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	3b01      	subs	r3, #1
 801335e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d1f1      	bne.n	801334a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013366:	4b13      	ldr	r3, [pc, #76]	; (80133b4 <xTaskResumeAll+0x134>)
 8013368:	2200      	movs	r2, #0
 801336a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801336c:	4b10      	ldr	r3, [pc, #64]	; (80133b0 <xTaskResumeAll+0x130>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d009      	beq.n	8013388 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013374:	2301      	movs	r3, #1
 8013376:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013378:	4b0f      	ldr	r3, [pc, #60]	; (80133b8 <xTaskResumeAll+0x138>)
 801337a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801337e:	601a      	str	r2, [r3, #0]
 8013380:	f3bf 8f4f 	dsb	sy
 8013384:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013388:	f001 f9ac 	bl	80146e4 <vPortExitCritical>

	return xAlreadyYielded;
 801338c:	68bb      	ldr	r3, [r7, #8]
}
 801338e:	4618      	mov	r0, r3
 8013390:	3710      	adds	r7, #16
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
 8013396:	bf00      	nop
 8013398:	24001834 	.word	0x24001834
 801339c:	2400180c 	.word	0x2400180c
 80133a0:	240017cc 	.word	0x240017cc
 80133a4:	24001814 	.word	0x24001814
 80133a8:	2400133c 	.word	0x2400133c
 80133ac:	24001338 	.word	0x24001338
 80133b0:	24001820 	.word	0x24001820
 80133b4:	2400181c 	.word	0x2400181c
 80133b8:	e000ed04 	.word	0xe000ed04

080133bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80133bc:	b480      	push	{r7}
 80133be:	b083      	sub	sp, #12
 80133c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80133c2:	4b05      	ldr	r3, [pc, #20]	; (80133d8 <xTaskGetTickCount+0x1c>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80133c8:	687b      	ldr	r3, [r7, #4]
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	370c      	adds	r7, #12
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr
 80133d6:	bf00      	nop
 80133d8:	24001810 	.word	0x24001810

080133dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b086      	sub	sp, #24
 80133e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80133e2:	2300      	movs	r3, #0
 80133e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133e6:	4b4f      	ldr	r3, [pc, #316]	; (8013524 <xTaskIncrementTick+0x148>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	f040 808f 	bne.w	801350e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80133f0:	4b4d      	ldr	r3, [pc, #308]	; (8013528 <xTaskIncrementTick+0x14c>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	3301      	adds	r3, #1
 80133f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80133f8:	4a4b      	ldr	r2, [pc, #300]	; (8013528 <xTaskIncrementTick+0x14c>)
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d120      	bne.n	8013446 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013404:	4b49      	ldr	r3, [pc, #292]	; (801352c <xTaskIncrementTick+0x150>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d00a      	beq.n	8013424 <xTaskIncrementTick+0x48>
	__asm volatile
 801340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013412:	f383 8811 	msr	BASEPRI, r3
 8013416:	f3bf 8f6f 	isb	sy
 801341a:	f3bf 8f4f 	dsb	sy
 801341e:	603b      	str	r3, [r7, #0]
}
 8013420:	bf00      	nop
 8013422:	e7fe      	b.n	8013422 <xTaskIncrementTick+0x46>
 8013424:	4b41      	ldr	r3, [pc, #260]	; (801352c <xTaskIncrementTick+0x150>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	60fb      	str	r3, [r7, #12]
 801342a:	4b41      	ldr	r3, [pc, #260]	; (8013530 <xTaskIncrementTick+0x154>)
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	4a3f      	ldr	r2, [pc, #252]	; (801352c <xTaskIncrementTick+0x150>)
 8013430:	6013      	str	r3, [r2, #0]
 8013432:	4a3f      	ldr	r2, [pc, #252]	; (8013530 <xTaskIncrementTick+0x154>)
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	6013      	str	r3, [r2, #0]
 8013438:	4b3e      	ldr	r3, [pc, #248]	; (8013534 <xTaskIncrementTick+0x158>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	3301      	adds	r3, #1
 801343e:	4a3d      	ldr	r2, [pc, #244]	; (8013534 <xTaskIncrementTick+0x158>)
 8013440:	6013      	str	r3, [r2, #0]
 8013442:	f000 fb6f 	bl	8013b24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013446:	4b3c      	ldr	r3, [pc, #240]	; (8013538 <xTaskIncrementTick+0x15c>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	693a      	ldr	r2, [r7, #16]
 801344c:	429a      	cmp	r2, r3
 801344e:	d349      	bcc.n	80134e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013450:	4b36      	ldr	r3, [pc, #216]	; (801352c <xTaskIncrementTick+0x150>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d104      	bne.n	8013464 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801345a:	4b37      	ldr	r3, [pc, #220]	; (8013538 <xTaskIncrementTick+0x15c>)
 801345c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013460:	601a      	str	r2, [r3, #0]
					break;
 8013462:	e03f      	b.n	80134e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013464:	4b31      	ldr	r3, [pc, #196]	; (801352c <xTaskIncrementTick+0x150>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013474:	693a      	ldr	r2, [r7, #16]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	429a      	cmp	r2, r3
 801347a:	d203      	bcs.n	8013484 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801347c:	4a2e      	ldr	r2, [pc, #184]	; (8013538 <xTaskIncrementTick+0x15c>)
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013482:	e02f      	b.n	80134e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	3304      	adds	r3, #4
 8013488:	4618      	mov	r0, r3
 801348a:	f7fe fd89 	bl	8011fa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013492:	2b00      	cmp	r3, #0
 8013494:	d004      	beq.n	80134a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	3318      	adds	r3, #24
 801349a:	4618      	mov	r0, r3
 801349c:	f7fe fd80 	bl	8011fa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a4:	4b25      	ldr	r3, [pc, #148]	; (801353c <xTaskIncrementTick+0x160>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d903      	bls.n	80134b4 <xTaskIncrementTick+0xd8>
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134b0:	4a22      	ldr	r2, [pc, #136]	; (801353c <xTaskIncrementTick+0x160>)
 80134b2:	6013      	str	r3, [r2, #0]
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134b8:	4613      	mov	r3, r2
 80134ba:	009b      	lsls	r3, r3, #2
 80134bc:	4413      	add	r3, r2
 80134be:	009b      	lsls	r3, r3, #2
 80134c0:	4a1f      	ldr	r2, [pc, #124]	; (8013540 <xTaskIncrementTick+0x164>)
 80134c2:	441a      	add	r2, r3
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	3304      	adds	r3, #4
 80134c8:	4619      	mov	r1, r3
 80134ca:	4610      	mov	r0, r2
 80134cc:	f7fe fd0b 	bl	8011ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134d4:	4b1b      	ldr	r3, [pc, #108]	; (8013544 <xTaskIncrementTick+0x168>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134da:	429a      	cmp	r2, r3
 80134dc:	d3b8      	bcc.n	8013450 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80134de:	2301      	movs	r3, #1
 80134e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80134e2:	e7b5      	b.n	8013450 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80134e4:	4b17      	ldr	r3, [pc, #92]	; (8013544 <xTaskIncrementTick+0x168>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134ea:	4915      	ldr	r1, [pc, #84]	; (8013540 <xTaskIncrementTick+0x164>)
 80134ec:	4613      	mov	r3, r2
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	4413      	add	r3, r2
 80134f2:	009b      	lsls	r3, r3, #2
 80134f4:	440b      	add	r3, r1
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	2b01      	cmp	r3, #1
 80134fa:	d901      	bls.n	8013500 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80134fc:	2301      	movs	r3, #1
 80134fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013500:	4b11      	ldr	r3, [pc, #68]	; (8013548 <xTaskIncrementTick+0x16c>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d007      	beq.n	8013518 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013508:	2301      	movs	r3, #1
 801350a:	617b      	str	r3, [r7, #20]
 801350c:	e004      	b.n	8013518 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801350e:	4b0f      	ldr	r3, [pc, #60]	; (801354c <xTaskIncrementTick+0x170>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	3301      	adds	r3, #1
 8013514:	4a0d      	ldr	r2, [pc, #52]	; (801354c <xTaskIncrementTick+0x170>)
 8013516:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013518:	697b      	ldr	r3, [r7, #20]
}
 801351a:	4618      	mov	r0, r3
 801351c:	3718      	adds	r7, #24
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	bf00      	nop
 8013524:	24001834 	.word	0x24001834
 8013528:	24001810 	.word	0x24001810
 801352c:	240017c4 	.word	0x240017c4
 8013530:	240017c8 	.word	0x240017c8
 8013534:	24001824 	.word	0x24001824
 8013538:	2400182c 	.word	0x2400182c
 801353c:	24001814 	.word	0x24001814
 8013540:	2400133c 	.word	0x2400133c
 8013544:	24001338 	.word	0x24001338
 8013548:	24001820 	.word	0x24001820
 801354c:	2400181c 	.word	0x2400181c

08013550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013550:	b480      	push	{r7}
 8013552:	b085      	sub	sp, #20
 8013554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013556:	4b28      	ldr	r3, [pc, #160]	; (80135f8 <vTaskSwitchContext+0xa8>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d003      	beq.n	8013566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801355e:	4b27      	ldr	r3, [pc, #156]	; (80135fc <vTaskSwitchContext+0xac>)
 8013560:	2201      	movs	r2, #1
 8013562:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013564:	e041      	b.n	80135ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013566:	4b25      	ldr	r3, [pc, #148]	; (80135fc <vTaskSwitchContext+0xac>)
 8013568:	2200      	movs	r2, #0
 801356a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801356c:	4b24      	ldr	r3, [pc, #144]	; (8013600 <vTaskSwitchContext+0xb0>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	60fb      	str	r3, [r7, #12]
 8013572:	e010      	b.n	8013596 <vTaskSwitchContext+0x46>
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d10a      	bne.n	8013590 <vTaskSwitchContext+0x40>
	__asm volatile
 801357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801357e:	f383 8811 	msr	BASEPRI, r3
 8013582:	f3bf 8f6f 	isb	sy
 8013586:	f3bf 8f4f 	dsb	sy
 801358a:	607b      	str	r3, [r7, #4]
}
 801358c:	bf00      	nop
 801358e:	e7fe      	b.n	801358e <vTaskSwitchContext+0x3e>
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	3b01      	subs	r3, #1
 8013594:	60fb      	str	r3, [r7, #12]
 8013596:	491b      	ldr	r1, [pc, #108]	; (8013604 <vTaskSwitchContext+0xb4>)
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	4613      	mov	r3, r2
 801359c:	009b      	lsls	r3, r3, #2
 801359e:	4413      	add	r3, r2
 80135a0:	009b      	lsls	r3, r3, #2
 80135a2:	440b      	add	r3, r1
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d0e4      	beq.n	8013574 <vTaskSwitchContext+0x24>
 80135aa:	68fa      	ldr	r2, [r7, #12]
 80135ac:	4613      	mov	r3, r2
 80135ae:	009b      	lsls	r3, r3, #2
 80135b0:	4413      	add	r3, r2
 80135b2:	009b      	lsls	r3, r3, #2
 80135b4:	4a13      	ldr	r2, [pc, #76]	; (8013604 <vTaskSwitchContext+0xb4>)
 80135b6:	4413      	add	r3, r2
 80135b8:	60bb      	str	r3, [r7, #8]
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	685a      	ldr	r2, [r3, #4]
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	605a      	str	r2, [r3, #4]
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	685a      	ldr	r2, [r3, #4]
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	3308      	adds	r3, #8
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d104      	bne.n	80135da <vTaskSwitchContext+0x8a>
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	685a      	ldr	r2, [r3, #4]
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	605a      	str	r2, [r3, #4]
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	4a09      	ldr	r2, [pc, #36]	; (8013608 <vTaskSwitchContext+0xb8>)
 80135e2:	6013      	str	r3, [r2, #0]
 80135e4:	4a06      	ldr	r2, [pc, #24]	; (8013600 <vTaskSwitchContext+0xb0>)
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	6013      	str	r3, [r2, #0]
}
 80135ea:	bf00      	nop
 80135ec:	3714      	adds	r7, #20
 80135ee:	46bd      	mov	sp, r7
 80135f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f4:	4770      	bx	lr
 80135f6:	bf00      	nop
 80135f8:	24001834 	.word	0x24001834
 80135fc:	24001820 	.word	0x24001820
 8013600:	24001814 	.word	0x24001814
 8013604:	2400133c 	.word	0x2400133c
 8013608:	24001338 	.word	0x24001338

0801360c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b084      	sub	sp, #16
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d10a      	bne.n	8013632 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013620:	f383 8811 	msr	BASEPRI, r3
 8013624:	f3bf 8f6f 	isb	sy
 8013628:	f3bf 8f4f 	dsb	sy
 801362c:	60fb      	str	r3, [r7, #12]
}
 801362e:	bf00      	nop
 8013630:	e7fe      	b.n	8013630 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013632:	4b07      	ldr	r3, [pc, #28]	; (8013650 <vTaskPlaceOnEventList+0x44>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	3318      	adds	r3, #24
 8013638:	4619      	mov	r1, r3
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f7fe fc77 	bl	8011f2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013640:	2101      	movs	r1, #1
 8013642:	6838      	ldr	r0, [r7, #0]
 8013644:	f000 fb32 	bl	8013cac <prvAddCurrentTaskToDelayedList>
}
 8013648:	bf00      	nop
 801364a:	3710      	adds	r7, #16
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}
 8013650:	24001338 	.word	0x24001338

08013654 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b086      	sub	sp, #24
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d10a      	bne.n	801367c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8013666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366a:	f383 8811 	msr	BASEPRI, r3
 801366e:	f3bf 8f6f 	isb	sy
 8013672:	f3bf 8f4f 	dsb	sy
 8013676:	617b      	str	r3, [r7, #20]
}
 8013678:	bf00      	nop
 801367a:	e7fe      	b.n	801367a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801367c:	4b11      	ldr	r3, [pc, #68]	; (80136c4 <vTaskPlaceOnUnorderedEventList+0x70>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d10a      	bne.n	801369a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8013684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013688:	f383 8811 	msr	BASEPRI, r3
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	613b      	str	r3, [r7, #16]
}
 8013696:	bf00      	nop
 8013698:	e7fe      	b.n	8013698 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801369a:	4b0b      	ldr	r3, [pc, #44]	; (80136c8 <vTaskPlaceOnUnorderedEventList+0x74>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	68ba      	ldr	r2, [r7, #8]
 80136a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80136a4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80136a6:	4b08      	ldr	r3, [pc, #32]	; (80136c8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	3318      	adds	r3, #24
 80136ac:	4619      	mov	r1, r3
 80136ae:	68f8      	ldr	r0, [r7, #12]
 80136b0:	f7fe fc19 	bl	8011ee6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80136b4:	2101      	movs	r1, #1
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f000 faf8 	bl	8013cac <prvAddCurrentTaskToDelayedList>
}
 80136bc:	bf00      	nop
 80136be:	3718      	adds	r7, #24
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}
 80136c4:	24001834 	.word	0x24001834
 80136c8:	24001338 	.word	0x24001338

080136cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b086      	sub	sp, #24
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	60f8      	str	r0, [r7, #12]
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d10a      	bne.n	80136f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80136de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e2:	f383 8811 	msr	BASEPRI, r3
 80136e6:	f3bf 8f6f 	isb	sy
 80136ea:	f3bf 8f4f 	dsb	sy
 80136ee:	617b      	str	r3, [r7, #20]
}
 80136f0:	bf00      	nop
 80136f2:	e7fe      	b.n	80136f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80136f4:	4b0a      	ldr	r3, [pc, #40]	; (8013720 <vTaskPlaceOnEventListRestricted+0x54>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	3318      	adds	r3, #24
 80136fa:	4619      	mov	r1, r3
 80136fc:	68f8      	ldr	r0, [r7, #12]
 80136fe:	f7fe fbf2 	bl	8011ee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d002      	beq.n	801370e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801370c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801370e:	6879      	ldr	r1, [r7, #4]
 8013710:	68b8      	ldr	r0, [r7, #8]
 8013712:	f000 facb 	bl	8013cac <prvAddCurrentTaskToDelayedList>
	}
 8013716:	bf00      	nop
 8013718:	3718      	adds	r7, #24
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}
 801371e:	bf00      	nop
 8013720:	24001338 	.word	0x24001338

08013724 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b086      	sub	sp, #24
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	68db      	ldr	r3, [r3, #12]
 8013730:	68db      	ldr	r3, [r3, #12]
 8013732:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d10a      	bne.n	8013750 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801373e:	f383 8811 	msr	BASEPRI, r3
 8013742:	f3bf 8f6f 	isb	sy
 8013746:	f3bf 8f4f 	dsb	sy
 801374a:	60fb      	str	r3, [r7, #12]
}
 801374c:	bf00      	nop
 801374e:	e7fe      	b.n	801374e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	3318      	adds	r3, #24
 8013754:	4618      	mov	r0, r3
 8013756:	f7fe fc23 	bl	8011fa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801375a:	4b1e      	ldr	r3, [pc, #120]	; (80137d4 <xTaskRemoveFromEventList+0xb0>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d11d      	bne.n	801379e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	3304      	adds	r3, #4
 8013766:	4618      	mov	r0, r3
 8013768:	f7fe fc1a 	bl	8011fa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013770:	4b19      	ldr	r3, [pc, #100]	; (80137d8 <xTaskRemoveFromEventList+0xb4>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	429a      	cmp	r2, r3
 8013776:	d903      	bls.n	8013780 <xTaskRemoveFromEventList+0x5c>
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801377c:	4a16      	ldr	r2, [pc, #88]	; (80137d8 <xTaskRemoveFromEventList+0xb4>)
 801377e:	6013      	str	r3, [r2, #0]
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013784:	4613      	mov	r3, r2
 8013786:	009b      	lsls	r3, r3, #2
 8013788:	4413      	add	r3, r2
 801378a:	009b      	lsls	r3, r3, #2
 801378c:	4a13      	ldr	r2, [pc, #76]	; (80137dc <xTaskRemoveFromEventList+0xb8>)
 801378e:	441a      	add	r2, r3
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	3304      	adds	r3, #4
 8013794:	4619      	mov	r1, r3
 8013796:	4610      	mov	r0, r2
 8013798:	f7fe fba5 	bl	8011ee6 <vListInsertEnd>
 801379c:	e005      	b.n	80137aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801379e:	693b      	ldr	r3, [r7, #16]
 80137a0:	3318      	adds	r3, #24
 80137a2:	4619      	mov	r1, r3
 80137a4:	480e      	ldr	r0, [pc, #56]	; (80137e0 <xTaskRemoveFromEventList+0xbc>)
 80137a6:	f7fe fb9e 	bl	8011ee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137ae:	4b0d      	ldr	r3, [pc, #52]	; (80137e4 <xTaskRemoveFromEventList+0xc0>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d905      	bls.n	80137c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80137b8:	2301      	movs	r3, #1
 80137ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80137bc:	4b0a      	ldr	r3, [pc, #40]	; (80137e8 <xTaskRemoveFromEventList+0xc4>)
 80137be:	2201      	movs	r2, #1
 80137c0:	601a      	str	r2, [r3, #0]
 80137c2:	e001      	b.n	80137c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80137c4:	2300      	movs	r3, #0
 80137c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80137c8:	697b      	ldr	r3, [r7, #20]
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3718      	adds	r7, #24
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	24001834 	.word	0x24001834
 80137d8:	24001814 	.word	0x24001814
 80137dc:	2400133c 	.word	0x2400133c
 80137e0:	240017cc 	.word	0x240017cc
 80137e4:	24001338 	.word	0x24001338
 80137e8:	24001820 	.word	0x24001820

080137ec <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b086      	sub	sp, #24
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80137f6:	4b29      	ldr	r3, [pc, #164]	; (801389c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d10a      	bne.n	8013814 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80137fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013802:	f383 8811 	msr	BASEPRI, r3
 8013806:	f3bf 8f6f 	isb	sy
 801380a:	f3bf 8f4f 	dsb	sy
 801380e:	613b      	str	r3, [r7, #16]
}
 8013810:	bf00      	nop
 8013812:	e7fe      	b.n	8013812 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	68db      	ldr	r3, [r3, #12]
 8013822:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d10a      	bne.n	8013840 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801382e:	f383 8811 	msr	BASEPRI, r3
 8013832:	f3bf 8f6f 	isb	sy
 8013836:	f3bf 8f4f 	dsb	sy
 801383a:	60fb      	str	r3, [r7, #12]
}
 801383c:	bf00      	nop
 801383e:	e7fe      	b.n	801383e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f7fe fbad 	bl	8011fa0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	3304      	adds	r3, #4
 801384a:	4618      	mov	r0, r3
 801384c:	f7fe fba8 	bl	8011fa0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013854:	4b12      	ldr	r3, [pc, #72]	; (80138a0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	429a      	cmp	r2, r3
 801385a:	d903      	bls.n	8013864 <vTaskRemoveFromUnorderedEventList+0x78>
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013860:	4a0f      	ldr	r2, [pc, #60]	; (80138a0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8013862:	6013      	str	r3, [r2, #0]
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013868:	4613      	mov	r3, r2
 801386a:	009b      	lsls	r3, r3, #2
 801386c:	4413      	add	r3, r2
 801386e:	009b      	lsls	r3, r3, #2
 8013870:	4a0c      	ldr	r2, [pc, #48]	; (80138a4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8013872:	441a      	add	r2, r3
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	3304      	adds	r3, #4
 8013878:	4619      	mov	r1, r3
 801387a:	4610      	mov	r0, r2
 801387c:	f7fe fb33 	bl	8011ee6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013884:	4b08      	ldr	r3, [pc, #32]	; (80138a8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801388a:	429a      	cmp	r2, r3
 801388c:	d902      	bls.n	8013894 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801388e:	4b07      	ldr	r3, [pc, #28]	; (80138ac <vTaskRemoveFromUnorderedEventList+0xc0>)
 8013890:	2201      	movs	r2, #1
 8013892:	601a      	str	r2, [r3, #0]
	}
}
 8013894:	bf00      	nop
 8013896:	3718      	adds	r7, #24
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	24001834 	.word	0x24001834
 80138a0:	24001814 	.word	0x24001814
 80138a4:	2400133c 	.word	0x2400133c
 80138a8:	24001338 	.word	0x24001338
 80138ac:	24001820 	.word	0x24001820

080138b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80138b0:	b480      	push	{r7}
 80138b2:	b083      	sub	sp, #12
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80138b8:	4b06      	ldr	r3, [pc, #24]	; (80138d4 <vTaskInternalSetTimeOutState+0x24>)
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80138c0:	4b05      	ldr	r3, [pc, #20]	; (80138d8 <vTaskInternalSetTimeOutState+0x28>)
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	605a      	str	r2, [r3, #4]
}
 80138c8:	bf00      	nop
 80138ca:	370c      	adds	r7, #12
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr
 80138d4:	24001824 	.word	0x24001824
 80138d8:	24001810 	.word	0x24001810

080138dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b088      	sub	sp, #32
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10a      	bne.n	8013902 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80138ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f0:	f383 8811 	msr	BASEPRI, r3
 80138f4:	f3bf 8f6f 	isb	sy
 80138f8:	f3bf 8f4f 	dsb	sy
 80138fc:	613b      	str	r3, [r7, #16]
}
 80138fe:	bf00      	nop
 8013900:	e7fe      	b.n	8013900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d10a      	bne.n	801391e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801390c:	f383 8811 	msr	BASEPRI, r3
 8013910:	f3bf 8f6f 	isb	sy
 8013914:	f3bf 8f4f 	dsb	sy
 8013918:	60fb      	str	r3, [r7, #12]
}
 801391a:	bf00      	nop
 801391c:	e7fe      	b.n	801391c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801391e:	f000 feb1 	bl	8014684 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013922:	4b1d      	ldr	r3, [pc, #116]	; (8013998 <xTaskCheckForTimeOut+0xbc>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	685b      	ldr	r3, [r3, #4]
 801392c:	69ba      	ldr	r2, [r7, #24]
 801392e:	1ad3      	subs	r3, r2, r3
 8013930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801393a:	d102      	bne.n	8013942 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801393c:	2300      	movs	r3, #0
 801393e:	61fb      	str	r3, [r7, #28]
 8013940:	e023      	b.n	801398a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	681a      	ldr	r2, [r3, #0]
 8013946:	4b15      	ldr	r3, [pc, #84]	; (801399c <xTaskCheckForTimeOut+0xc0>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	429a      	cmp	r2, r3
 801394c:	d007      	beq.n	801395e <xTaskCheckForTimeOut+0x82>
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	69ba      	ldr	r2, [r7, #24]
 8013954:	429a      	cmp	r2, r3
 8013956:	d302      	bcc.n	801395e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013958:	2301      	movs	r3, #1
 801395a:	61fb      	str	r3, [r7, #28]
 801395c:	e015      	b.n	801398a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	697a      	ldr	r2, [r7, #20]
 8013964:	429a      	cmp	r2, r3
 8013966:	d20b      	bcs.n	8013980 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	681a      	ldr	r2, [r3, #0]
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	1ad2      	subs	r2, r2, r3
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f7ff ff9b 	bl	80138b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801397a:	2300      	movs	r3, #0
 801397c:	61fb      	str	r3, [r7, #28]
 801397e:	e004      	b.n	801398a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	2200      	movs	r2, #0
 8013984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013986:	2301      	movs	r3, #1
 8013988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801398a:	f000 feab 	bl	80146e4 <vPortExitCritical>

	return xReturn;
 801398e:	69fb      	ldr	r3, [r7, #28]
}
 8013990:	4618      	mov	r0, r3
 8013992:	3720      	adds	r7, #32
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}
 8013998:	24001810 	.word	0x24001810
 801399c:	24001824 	.word	0x24001824

080139a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80139a0:	b480      	push	{r7}
 80139a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80139a4:	4b03      	ldr	r3, [pc, #12]	; (80139b4 <vTaskMissedYield+0x14>)
 80139a6:	2201      	movs	r2, #1
 80139a8:	601a      	str	r2, [r3, #0]
}
 80139aa:	bf00      	nop
 80139ac:	46bd      	mov	sp, r7
 80139ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b2:	4770      	bx	lr
 80139b4:	24001820 	.word	0x24001820

080139b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80139c0:	f000 f852 	bl	8013a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80139c4:	4b06      	ldr	r3, [pc, #24]	; (80139e0 <prvIdleTask+0x28>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	d9f9      	bls.n	80139c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80139cc:	4b05      	ldr	r3, [pc, #20]	; (80139e4 <prvIdleTask+0x2c>)
 80139ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139d2:	601a      	str	r2, [r3, #0]
 80139d4:	f3bf 8f4f 	dsb	sy
 80139d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80139dc:	e7f0      	b.n	80139c0 <prvIdleTask+0x8>
 80139de:	bf00      	nop
 80139e0:	2400133c 	.word	0x2400133c
 80139e4:	e000ed04 	.word	0xe000ed04

080139e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139ee:	2300      	movs	r3, #0
 80139f0:	607b      	str	r3, [r7, #4]
 80139f2:	e00c      	b.n	8013a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80139f4:	687a      	ldr	r2, [r7, #4]
 80139f6:	4613      	mov	r3, r2
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	4413      	add	r3, r2
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	4a12      	ldr	r2, [pc, #72]	; (8013a48 <prvInitialiseTaskLists+0x60>)
 8013a00:	4413      	add	r3, r2
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7fe fa42 	bl	8011e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	3301      	adds	r3, #1
 8013a0c:	607b      	str	r3, [r7, #4]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b37      	cmp	r3, #55	; 0x37
 8013a12:	d9ef      	bls.n	80139f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013a14:	480d      	ldr	r0, [pc, #52]	; (8013a4c <prvInitialiseTaskLists+0x64>)
 8013a16:	f7fe fa39 	bl	8011e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013a1a:	480d      	ldr	r0, [pc, #52]	; (8013a50 <prvInitialiseTaskLists+0x68>)
 8013a1c:	f7fe fa36 	bl	8011e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013a20:	480c      	ldr	r0, [pc, #48]	; (8013a54 <prvInitialiseTaskLists+0x6c>)
 8013a22:	f7fe fa33 	bl	8011e8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013a26:	480c      	ldr	r0, [pc, #48]	; (8013a58 <prvInitialiseTaskLists+0x70>)
 8013a28:	f7fe fa30 	bl	8011e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013a2c:	480b      	ldr	r0, [pc, #44]	; (8013a5c <prvInitialiseTaskLists+0x74>)
 8013a2e:	f7fe fa2d 	bl	8011e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013a32:	4b0b      	ldr	r3, [pc, #44]	; (8013a60 <prvInitialiseTaskLists+0x78>)
 8013a34:	4a05      	ldr	r2, [pc, #20]	; (8013a4c <prvInitialiseTaskLists+0x64>)
 8013a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013a38:	4b0a      	ldr	r3, [pc, #40]	; (8013a64 <prvInitialiseTaskLists+0x7c>)
 8013a3a:	4a05      	ldr	r2, [pc, #20]	; (8013a50 <prvInitialiseTaskLists+0x68>)
 8013a3c:	601a      	str	r2, [r3, #0]
}
 8013a3e:	bf00      	nop
 8013a40:	3708      	adds	r7, #8
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	2400133c 	.word	0x2400133c
 8013a4c:	2400179c 	.word	0x2400179c
 8013a50:	240017b0 	.word	0x240017b0
 8013a54:	240017cc 	.word	0x240017cc
 8013a58:	240017e0 	.word	0x240017e0
 8013a5c:	240017f8 	.word	0x240017f8
 8013a60:	240017c4 	.word	0x240017c4
 8013a64:	240017c8 	.word	0x240017c8

08013a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a6e:	e019      	b.n	8013aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013a70:	f000 fe08 	bl	8014684 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a74:	4b10      	ldr	r3, [pc, #64]	; (8013ab8 <prvCheckTasksWaitingTermination+0x50>)
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	68db      	ldr	r3, [r3, #12]
 8013a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	3304      	adds	r3, #4
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7fe fa8d 	bl	8011fa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013a86:	4b0d      	ldr	r3, [pc, #52]	; (8013abc <prvCheckTasksWaitingTermination+0x54>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	3b01      	subs	r3, #1
 8013a8c:	4a0b      	ldr	r2, [pc, #44]	; (8013abc <prvCheckTasksWaitingTermination+0x54>)
 8013a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013a90:	4b0b      	ldr	r3, [pc, #44]	; (8013ac0 <prvCheckTasksWaitingTermination+0x58>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	3b01      	subs	r3, #1
 8013a96:	4a0a      	ldr	r2, [pc, #40]	; (8013ac0 <prvCheckTasksWaitingTermination+0x58>)
 8013a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013a9a:	f000 fe23 	bl	80146e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f000 f810 	bl	8013ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013aa4:	4b06      	ldr	r3, [pc, #24]	; (8013ac0 <prvCheckTasksWaitingTermination+0x58>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d1e1      	bne.n	8013a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013aac:	bf00      	nop
 8013aae:	bf00      	nop
 8013ab0:	3708      	adds	r7, #8
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	240017e0 	.word	0x240017e0
 8013abc:	2400180c 	.word	0x2400180c
 8013ac0:	240017f4 	.word	0x240017f4

08013ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b084      	sub	sp, #16
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d108      	bne.n	8013ae8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ada:	4618      	mov	r0, r3
 8013adc:	f000 ffc0 	bl	8014a60 <vPortFree>
				vPortFree( pxTCB );
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f000 ffbd 	bl	8014a60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013ae6:	e018      	b.n	8013b1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013aee:	2b01      	cmp	r3, #1
 8013af0:	d103      	bne.n	8013afa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f000 ffb4 	bl	8014a60 <vPortFree>
	}
 8013af8:	e00f      	b.n	8013b1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013b00:	2b02      	cmp	r3, #2
 8013b02:	d00a      	beq.n	8013b1a <prvDeleteTCB+0x56>
	__asm volatile
 8013b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b08:	f383 8811 	msr	BASEPRI, r3
 8013b0c:	f3bf 8f6f 	isb	sy
 8013b10:	f3bf 8f4f 	dsb	sy
 8013b14:	60fb      	str	r3, [r7, #12]
}
 8013b16:	bf00      	nop
 8013b18:	e7fe      	b.n	8013b18 <prvDeleteTCB+0x54>
	}
 8013b1a:	bf00      	nop
 8013b1c:	3710      	adds	r7, #16
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}
	...

08013b24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013b24:	b480      	push	{r7}
 8013b26:	b083      	sub	sp, #12
 8013b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b2a:	4b0c      	ldr	r3, [pc, #48]	; (8013b5c <prvResetNextTaskUnblockTime+0x38>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d104      	bne.n	8013b3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013b34:	4b0a      	ldr	r3, [pc, #40]	; (8013b60 <prvResetNextTaskUnblockTime+0x3c>)
 8013b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013b3c:	e008      	b.n	8013b50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b3e:	4b07      	ldr	r3, [pc, #28]	; (8013b5c <prvResetNextTaskUnblockTime+0x38>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	68db      	ldr	r3, [r3, #12]
 8013b44:	68db      	ldr	r3, [r3, #12]
 8013b46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	4a04      	ldr	r2, [pc, #16]	; (8013b60 <prvResetNextTaskUnblockTime+0x3c>)
 8013b4e:	6013      	str	r3, [r2, #0]
}
 8013b50:	bf00      	nop
 8013b52:	370c      	adds	r7, #12
 8013b54:	46bd      	mov	sp, r7
 8013b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5a:	4770      	bx	lr
 8013b5c:	240017c4 	.word	0x240017c4
 8013b60:	2400182c 	.word	0x2400182c

08013b64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013b64:	b480      	push	{r7}
 8013b66:	b083      	sub	sp, #12
 8013b68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013b6a:	4b0b      	ldr	r3, [pc, #44]	; (8013b98 <xTaskGetSchedulerState+0x34>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d102      	bne.n	8013b78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013b72:	2301      	movs	r3, #1
 8013b74:	607b      	str	r3, [r7, #4]
 8013b76:	e008      	b.n	8013b8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b78:	4b08      	ldr	r3, [pc, #32]	; (8013b9c <xTaskGetSchedulerState+0x38>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d102      	bne.n	8013b86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013b80:	2302      	movs	r3, #2
 8013b82:	607b      	str	r3, [r7, #4]
 8013b84:	e001      	b.n	8013b8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013b86:	2300      	movs	r3, #0
 8013b88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013b8a:	687b      	ldr	r3, [r7, #4]
	}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	370c      	adds	r7, #12
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr
 8013b98:	24001818 	.word	0x24001818
 8013b9c:	24001834 	.word	0x24001834

08013ba0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b086      	sub	sp, #24
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013bac:	2300      	movs	r3, #0
 8013bae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d056      	beq.n	8013c64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013bb6:	4b2e      	ldr	r3, [pc, #184]	; (8013c70 <xTaskPriorityDisinherit+0xd0>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	693a      	ldr	r2, [r7, #16]
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d00a      	beq.n	8013bd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc4:	f383 8811 	msr	BASEPRI, r3
 8013bc8:	f3bf 8f6f 	isb	sy
 8013bcc:	f3bf 8f4f 	dsb	sy
 8013bd0:	60fb      	str	r3, [r7, #12]
}
 8013bd2:	bf00      	nop
 8013bd4:	e7fe      	b.n	8013bd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d10a      	bne.n	8013bf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be2:	f383 8811 	msr	BASEPRI, r3
 8013be6:	f3bf 8f6f 	isb	sy
 8013bea:	f3bf 8f4f 	dsb	sy
 8013bee:	60bb      	str	r3, [r7, #8]
}
 8013bf0:	bf00      	nop
 8013bf2:	e7fe      	b.n	8013bf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bf8:	1e5a      	subs	r2, r3, #1
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d02c      	beq.n	8013c64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d128      	bne.n	8013c64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	3304      	adds	r3, #4
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fe f9c2 	bl	8011fa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c34:	4b0f      	ldr	r3, [pc, #60]	; (8013c74 <xTaskPriorityDisinherit+0xd4>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d903      	bls.n	8013c44 <xTaskPriorityDisinherit+0xa4>
 8013c3c:	693b      	ldr	r3, [r7, #16]
 8013c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c40:	4a0c      	ldr	r2, [pc, #48]	; (8013c74 <xTaskPriorityDisinherit+0xd4>)
 8013c42:	6013      	str	r3, [r2, #0]
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c48:	4613      	mov	r3, r2
 8013c4a:	009b      	lsls	r3, r3, #2
 8013c4c:	4413      	add	r3, r2
 8013c4e:	009b      	lsls	r3, r3, #2
 8013c50:	4a09      	ldr	r2, [pc, #36]	; (8013c78 <xTaskPriorityDisinherit+0xd8>)
 8013c52:	441a      	add	r2, r3
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	3304      	adds	r3, #4
 8013c58:	4619      	mov	r1, r3
 8013c5a:	4610      	mov	r0, r2
 8013c5c:	f7fe f943 	bl	8011ee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013c60:	2301      	movs	r3, #1
 8013c62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013c64:	697b      	ldr	r3, [r7, #20]
	}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3718      	adds	r7, #24
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	bf00      	nop
 8013c70:	24001338 	.word	0x24001338
 8013c74:	24001814 	.word	0x24001814
 8013c78:	2400133c 	.word	0x2400133c

08013c7c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b083      	sub	sp, #12
 8013c80:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8013c82:	4b09      	ldr	r3, [pc, #36]	; (8013ca8 <uxTaskResetEventItemValue+0x2c>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	699b      	ldr	r3, [r3, #24]
 8013c88:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c8a:	4b07      	ldr	r3, [pc, #28]	; (8013ca8 <uxTaskResetEventItemValue+0x2c>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c90:	4b05      	ldr	r3, [pc, #20]	; (8013ca8 <uxTaskResetEventItemValue+0x2c>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013c98:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8013c9a:	687b      	ldr	r3, [r7, #4]
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	370c      	adds	r7, #12
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr
 8013ca8:	24001338 	.word	0x24001338

08013cac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b084      	sub	sp, #16
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013cb6:	4b21      	ldr	r3, [pc, #132]	; (8013d3c <prvAddCurrentTaskToDelayedList+0x90>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013cbc:	4b20      	ldr	r3, [pc, #128]	; (8013d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	3304      	adds	r3, #4
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7fe f96c 	bl	8011fa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cce:	d10a      	bne.n	8013ce6 <prvAddCurrentTaskToDelayedList+0x3a>
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d007      	beq.n	8013ce6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013cd6:	4b1a      	ldr	r3, [pc, #104]	; (8013d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	3304      	adds	r3, #4
 8013cdc:	4619      	mov	r1, r3
 8013cde:	4819      	ldr	r0, [pc, #100]	; (8013d44 <prvAddCurrentTaskToDelayedList+0x98>)
 8013ce0:	f7fe f901 	bl	8011ee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013ce4:	e026      	b.n	8013d34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013ce6:	68fa      	ldr	r2, [r7, #12]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	4413      	add	r3, r2
 8013cec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013cee:	4b14      	ldr	r3, [pc, #80]	; (8013d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	68ba      	ldr	r2, [r7, #8]
 8013cf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013cf6:	68ba      	ldr	r2, [r7, #8]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d209      	bcs.n	8013d12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013cfe:	4b12      	ldr	r3, [pc, #72]	; (8013d48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013d00:	681a      	ldr	r2, [r3, #0]
 8013d02:	4b0f      	ldr	r3, [pc, #60]	; (8013d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	3304      	adds	r3, #4
 8013d08:	4619      	mov	r1, r3
 8013d0a:	4610      	mov	r0, r2
 8013d0c:	f7fe f90f 	bl	8011f2e <vListInsert>
}
 8013d10:	e010      	b.n	8013d34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013d12:	4b0e      	ldr	r3, [pc, #56]	; (8013d4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8013d14:	681a      	ldr	r2, [r3, #0]
 8013d16:	4b0a      	ldr	r3, [pc, #40]	; (8013d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	3304      	adds	r3, #4
 8013d1c:	4619      	mov	r1, r3
 8013d1e:	4610      	mov	r0, r2
 8013d20:	f7fe f905 	bl	8011f2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013d24:	4b0a      	ldr	r3, [pc, #40]	; (8013d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	68ba      	ldr	r2, [r7, #8]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d202      	bcs.n	8013d34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013d2e:	4a08      	ldr	r2, [pc, #32]	; (8013d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	6013      	str	r3, [r2, #0]
}
 8013d34:	bf00      	nop
 8013d36:	3710      	adds	r7, #16
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	24001810 	.word	0x24001810
 8013d40:	24001338 	.word	0x24001338
 8013d44:	240017f8 	.word	0x240017f8
 8013d48:	240017c8 	.word	0x240017c8
 8013d4c:	240017c4 	.word	0x240017c4
 8013d50:	2400182c 	.word	0x2400182c

08013d54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b08a      	sub	sp, #40	; 0x28
 8013d58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013d5e:	f000 fb07 	bl	8014370 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013d62:	4b1c      	ldr	r3, [pc, #112]	; (8013dd4 <xTimerCreateTimerTask+0x80>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d021      	beq.n	8013dae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013d72:	1d3a      	adds	r2, r7, #4
 8013d74:	f107 0108 	add.w	r1, r7, #8
 8013d78:	f107 030c 	add.w	r3, r7, #12
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7fd fe7d 	bl	8011a7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013d82:	6879      	ldr	r1, [r7, #4]
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	68fa      	ldr	r2, [r7, #12]
 8013d88:	9202      	str	r2, [sp, #8]
 8013d8a:	9301      	str	r3, [sp, #4]
 8013d8c:	2302      	movs	r3, #2
 8013d8e:	9300      	str	r3, [sp, #0]
 8013d90:	2300      	movs	r3, #0
 8013d92:	460a      	mov	r2, r1
 8013d94:	4910      	ldr	r1, [pc, #64]	; (8013dd8 <xTimerCreateTimerTask+0x84>)
 8013d96:	4811      	ldr	r0, [pc, #68]	; (8013ddc <xTimerCreateTimerTask+0x88>)
 8013d98:	f7fe ff0e 	bl	8012bb8 <xTaskCreateStatic>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	4a10      	ldr	r2, [pc, #64]	; (8013de0 <xTimerCreateTimerTask+0x8c>)
 8013da0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013da2:	4b0f      	ldr	r3, [pc, #60]	; (8013de0 <xTimerCreateTimerTask+0x8c>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d001      	beq.n	8013dae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013daa:	2301      	movs	r3, #1
 8013dac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d10a      	bne.n	8013dca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db8:	f383 8811 	msr	BASEPRI, r3
 8013dbc:	f3bf 8f6f 	isb	sy
 8013dc0:	f3bf 8f4f 	dsb	sy
 8013dc4:	613b      	str	r3, [r7, #16]
}
 8013dc6:	bf00      	nop
 8013dc8:	e7fe      	b.n	8013dc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013dca:	697b      	ldr	r3, [r7, #20]
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3718      	adds	r7, #24
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}
 8013dd4:	24001868 	.word	0x24001868
 8013dd8:	08015fd8 	.word	0x08015fd8
 8013ddc:	08013f19 	.word	0x08013f19
 8013de0:	2400186c 	.word	0x2400186c

08013de4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b08a      	sub	sp, #40	; 0x28
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	60f8      	str	r0, [r7, #12]
 8013dec:	60b9      	str	r1, [r7, #8]
 8013dee:	607a      	str	r2, [r7, #4]
 8013df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013df2:	2300      	movs	r3, #0
 8013df4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d10a      	bne.n	8013e12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8013dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e00:	f383 8811 	msr	BASEPRI, r3
 8013e04:	f3bf 8f6f 	isb	sy
 8013e08:	f3bf 8f4f 	dsb	sy
 8013e0c:	623b      	str	r3, [r7, #32]
}
 8013e0e:	bf00      	nop
 8013e10:	e7fe      	b.n	8013e10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013e12:	4b1a      	ldr	r3, [pc, #104]	; (8013e7c <xTimerGenericCommand+0x98>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d02a      	beq.n	8013e70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013e26:	68bb      	ldr	r3, [r7, #8]
 8013e28:	2b05      	cmp	r3, #5
 8013e2a:	dc18      	bgt.n	8013e5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013e2c:	f7ff fe9a 	bl	8013b64 <xTaskGetSchedulerState>
 8013e30:	4603      	mov	r3, r0
 8013e32:	2b02      	cmp	r3, #2
 8013e34:	d109      	bne.n	8013e4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013e36:	4b11      	ldr	r3, [pc, #68]	; (8013e7c <xTimerGenericCommand+0x98>)
 8013e38:	6818      	ldr	r0, [r3, #0]
 8013e3a:	f107 0110 	add.w	r1, r7, #16
 8013e3e:	2300      	movs	r3, #0
 8013e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e42:	f7fe fa15 	bl	8012270 <xQueueGenericSend>
 8013e46:	6278      	str	r0, [r7, #36]	; 0x24
 8013e48:	e012      	b.n	8013e70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013e4a:	4b0c      	ldr	r3, [pc, #48]	; (8013e7c <xTimerGenericCommand+0x98>)
 8013e4c:	6818      	ldr	r0, [r3, #0]
 8013e4e:	f107 0110 	add.w	r1, r7, #16
 8013e52:	2300      	movs	r3, #0
 8013e54:	2200      	movs	r2, #0
 8013e56:	f7fe fa0b 	bl	8012270 <xQueueGenericSend>
 8013e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8013e5c:	e008      	b.n	8013e70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013e5e:	4b07      	ldr	r3, [pc, #28]	; (8013e7c <xTimerGenericCommand+0x98>)
 8013e60:	6818      	ldr	r0, [r3, #0]
 8013e62:	f107 0110 	add.w	r1, r7, #16
 8013e66:	2300      	movs	r3, #0
 8013e68:	683a      	ldr	r2, [r7, #0]
 8013e6a:	f7fe faff 	bl	801246c <xQueueGenericSendFromISR>
 8013e6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3728      	adds	r7, #40	; 0x28
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}
 8013e7a:	bf00      	nop
 8013e7c:	24001868 	.word	0x24001868

08013e80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b088      	sub	sp, #32
 8013e84:	af02      	add	r7, sp, #8
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e8a:	4b22      	ldr	r3, [pc, #136]	; (8013f14 <prvProcessExpiredTimer+0x94>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	68db      	ldr	r3, [r3, #12]
 8013e90:	68db      	ldr	r3, [r3, #12]
 8013e92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	3304      	adds	r3, #4
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7fe f881 	bl	8011fa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ea4:	f003 0304 	and.w	r3, r3, #4
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d022      	beq.n	8013ef2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	699a      	ldr	r2, [r3, #24]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	18d1      	adds	r1, r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	683a      	ldr	r2, [r7, #0]
 8013eb8:	6978      	ldr	r0, [r7, #20]
 8013eba:	f000 f8d1 	bl	8014060 <prvInsertTimerInActiveList>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d01f      	beq.n	8013f04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	9300      	str	r3, [sp, #0]
 8013ec8:	2300      	movs	r3, #0
 8013eca:	687a      	ldr	r2, [r7, #4]
 8013ecc:	2100      	movs	r1, #0
 8013ece:	6978      	ldr	r0, [r7, #20]
 8013ed0:	f7ff ff88 	bl	8013de4 <xTimerGenericCommand>
 8013ed4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d113      	bne.n	8013f04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ee0:	f383 8811 	msr	BASEPRI, r3
 8013ee4:	f3bf 8f6f 	isb	sy
 8013ee8:	f3bf 8f4f 	dsb	sy
 8013eec:	60fb      	str	r3, [r7, #12]
}
 8013eee:	bf00      	nop
 8013ef0:	e7fe      	b.n	8013ef0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ef8:	f023 0301 	bic.w	r3, r3, #1
 8013efc:	b2da      	uxtb	r2, r3
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	6a1b      	ldr	r3, [r3, #32]
 8013f08:	6978      	ldr	r0, [r7, #20]
 8013f0a:	4798      	blx	r3
}
 8013f0c:	bf00      	nop
 8013f0e:	3718      	adds	r7, #24
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	24001860 	.word	0x24001860

08013f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b084      	sub	sp, #16
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013f20:	f107 0308 	add.w	r3, r7, #8
 8013f24:	4618      	mov	r0, r3
 8013f26:	f000 f857 	bl	8013fd8 <prvGetNextExpireTime>
 8013f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	4619      	mov	r1, r3
 8013f30:	68f8      	ldr	r0, [r7, #12]
 8013f32:	f000 f803 	bl	8013f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013f36:	f000 f8d5 	bl	80140e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013f3a:	e7f1      	b.n	8013f20 <prvTimerTask+0x8>

08013f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b084      	sub	sp, #16
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013f46:	f7ff f98d 	bl	8013264 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013f4a:	f107 0308 	add.w	r3, r7, #8
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f000 f866 	bl	8014020 <prvSampleTimeNow>
 8013f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d130      	bne.n	8013fbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d10a      	bne.n	8013f78 <prvProcessTimerOrBlockTask+0x3c>
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d806      	bhi.n	8013f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013f6a:	f7ff f989 	bl	8013280 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013f6e:	68f9      	ldr	r1, [r7, #12]
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7ff ff85 	bl	8013e80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013f76:	e024      	b.n	8013fc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d008      	beq.n	8013f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013f7e:	4b13      	ldr	r3, [pc, #76]	; (8013fcc <prvProcessTimerOrBlockTask+0x90>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d101      	bne.n	8013f8c <prvProcessTimerOrBlockTask+0x50>
 8013f88:	2301      	movs	r3, #1
 8013f8a:	e000      	b.n	8013f8e <prvProcessTimerOrBlockTask+0x52>
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013f90:	4b0f      	ldr	r3, [pc, #60]	; (8013fd0 <prvProcessTimerOrBlockTask+0x94>)
 8013f92:	6818      	ldr	r0, [r3, #0]
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	1ad3      	subs	r3, r2, r3
 8013f9a:	683a      	ldr	r2, [r7, #0]
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	f7fe fdd7 	bl	8012b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013fa2:	f7ff f96d 	bl	8013280 <xTaskResumeAll>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d10a      	bne.n	8013fc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013fac:	4b09      	ldr	r3, [pc, #36]	; (8013fd4 <prvProcessTimerOrBlockTask+0x98>)
 8013fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fb2:	601a      	str	r2, [r3, #0]
 8013fb4:	f3bf 8f4f 	dsb	sy
 8013fb8:	f3bf 8f6f 	isb	sy
}
 8013fbc:	e001      	b.n	8013fc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013fbe:	f7ff f95f 	bl	8013280 <xTaskResumeAll>
}
 8013fc2:	bf00      	nop
 8013fc4:	3710      	adds	r7, #16
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	24001864 	.word	0x24001864
 8013fd0:	24001868 	.word	0x24001868
 8013fd4:	e000ed04 	.word	0xe000ed04

08013fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013fd8:	b480      	push	{r7}
 8013fda:	b085      	sub	sp, #20
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013fe0:	4b0e      	ldr	r3, [pc, #56]	; (801401c <prvGetNextExpireTime+0x44>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d101      	bne.n	8013fee <prvGetNextExpireTime+0x16>
 8013fea:	2201      	movs	r2, #1
 8013fec:	e000      	b.n	8013ff0 <prvGetNextExpireTime+0x18>
 8013fee:	2200      	movs	r2, #0
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d105      	bne.n	8014008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013ffc:	4b07      	ldr	r3, [pc, #28]	; (801401c <prvGetNextExpireTime+0x44>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	68db      	ldr	r3, [r3, #12]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	60fb      	str	r3, [r7, #12]
 8014006:	e001      	b.n	801400c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014008:	2300      	movs	r3, #0
 801400a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801400c:	68fb      	ldr	r3, [r7, #12]
}
 801400e:	4618      	mov	r0, r3
 8014010:	3714      	adds	r7, #20
 8014012:	46bd      	mov	sp, r7
 8014014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014018:	4770      	bx	lr
 801401a:	bf00      	nop
 801401c:	24001860 	.word	0x24001860

08014020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b084      	sub	sp, #16
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014028:	f7ff f9c8 	bl	80133bc <xTaskGetTickCount>
 801402c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801402e:	4b0b      	ldr	r3, [pc, #44]	; (801405c <prvSampleTimeNow+0x3c>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	68fa      	ldr	r2, [r7, #12]
 8014034:	429a      	cmp	r2, r3
 8014036:	d205      	bcs.n	8014044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014038:	f000 f936 	bl	80142a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	2201      	movs	r2, #1
 8014040:	601a      	str	r2, [r3, #0]
 8014042:	e002      	b.n	801404a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2200      	movs	r2, #0
 8014048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801404a:	4a04      	ldr	r2, [pc, #16]	; (801405c <prvSampleTimeNow+0x3c>)
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014050:	68fb      	ldr	r3, [r7, #12]
}
 8014052:	4618      	mov	r0, r3
 8014054:	3710      	adds	r7, #16
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}
 801405a:	bf00      	nop
 801405c:	24001870 	.word	0x24001870

08014060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b086      	sub	sp, #24
 8014064:	af00      	add	r7, sp, #0
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	607a      	str	r2, [r7, #4]
 801406c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801406e:	2300      	movs	r3, #0
 8014070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	68ba      	ldr	r2, [r7, #8]
 8014076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	68fa      	ldr	r2, [r7, #12]
 801407c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801407e:	68ba      	ldr	r2, [r7, #8]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	429a      	cmp	r2, r3
 8014084:	d812      	bhi.n	80140ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014086:	687a      	ldr	r2, [r7, #4]
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	1ad2      	subs	r2, r2, r3
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	699b      	ldr	r3, [r3, #24]
 8014090:	429a      	cmp	r2, r3
 8014092:	d302      	bcc.n	801409a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014094:	2301      	movs	r3, #1
 8014096:	617b      	str	r3, [r7, #20]
 8014098:	e01b      	b.n	80140d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801409a:	4b10      	ldr	r3, [pc, #64]	; (80140dc <prvInsertTimerInActiveList+0x7c>)
 801409c:	681a      	ldr	r2, [r3, #0]
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	3304      	adds	r3, #4
 80140a2:	4619      	mov	r1, r3
 80140a4:	4610      	mov	r0, r2
 80140a6:	f7fd ff42 	bl	8011f2e <vListInsert>
 80140aa:	e012      	b.n	80140d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80140ac:	687a      	ldr	r2, [r7, #4]
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d206      	bcs.n	80140c2 <prvInsertTimerInActiveList+0x62>
 80140b4:	68ba      	ldr	r2, [r7, #8]
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d302      	bcc.n	80140c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80140bc:	2301      	movs	r3, #1
 80140be:	617b      	str	r3, [r7, #20]
 80140c0:	e007      	b.n	80140d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80140c2:	4b07      	ldr	r3, [pc, #28]	; (80140e0 <prvInsertTimerInActiveList+0x80>)
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	3304      	adds	r3, #4
 80140ca:	4619      	mov	r1, r3
 80140cc:	4610      	mov	r0, r2
 80140ce:	f7fd ff2e 	bl	8011f2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80140d2:	697b      	ldr	r3, [r7, #20]
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3718      	adds	r7, #24
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	24001864 	.word	0x24001864
 80140e0:	24001860 	.word	0x24001860

080140e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b08e      	sub	sp, #56	; 0x38
 80140e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80140ea:	e0ca      	b.n	8014282 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	da18      	bge.n	8014124 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80140f2:	1d3b      	adds	r3, r7, #4
 80140f4:	3304      	adds	r3, #4
 80140f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80140f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d10a      	bne.n	8014114 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80140fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014102:	f383 8811 	msr	BASEPRI, r3
 8014106:	f3bf 8f6f 	isb	sy
 801410a:	f3bf 8f4f 	dsb	sy
 801410e:	61fb      	str	r3, [r7, #28]
}
 8014110:	bf00      	nop
 8014112:	e7fe      	b.n	8014112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801411a:	6850      	ldr	r0, [r2, #4]
 801411c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801411e:	6892      	ldr	r2, [r2, #8]
 8014120:	4611      	mov	r1, r2
 8014122:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2b00      	cmp	r3, #0
 8014128:	f2c0 80aa 	blt.w	8014280 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014132:	695b      	ldr	r3, [r3, #20]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d004      	beq.n	8014142 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801413a:	3304      	adds	r3, #4
 801413c:	4618      	mov	r0, r3
 801413e:	f7fd ff2f 	bl	8011fa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014142:	463b      	mov	r3, r7
 8014144:	4618      	mov	r0, r3
 8014146:	f7ff ff6b 	bl	8014020 <prvSampleTimeNow>
 801414a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2b09      	cmp	r3, #9
 8014150:	f200 8097 	bhi.w	8014282 <prvProcessReceivedCommands+0x19e>
 8014154:	a201      	add	r2, pc, #4	; (adr r2, 801415c <prvProcessReceivedCommands+0x78>)
 8014156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801415a:	bf00      	nop
 801415c:	08014185 	.word	0x08014185
 8014160:	08014185 	.word	0x08014185
 8014164:	08014185 	.word	0x08014185
 8014168:	080141f9 	.word	0x080141f9
 801416c:	0801420d 	.word	0x0801420d
 8014170:	08014257 	.word	0x08014257
 8014174:	08014185 	.word	0x08014185
 8014178:	08014185 	.word	0x08014185
 801417c:	080141f9 	.word	0x080141f9
 8014180:	0801420d 	.word	0x0801420d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801418a:	f043 0301 	orr.w	r3, r3, #1
 801418e:	b2da      	uxtb	r2, r3
 8014190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014196:	68ba      	ldr	r2, [r7, #8]
 8014198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801419a:	699b      	ldr	r3, [r3, #24]
 801419c:	18d1      	adds	r1, r2, r3
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141a4:	f7ff ff5c 	bl	8014060 <prvInsertTimerInActiveList>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d069      	beq.n	8014282 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80141ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141b0:	6a1b      	ldr	r3, [r3, #32]
 80141b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80141b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141bc:	f003 0304 	and.w	r3, r3, #4
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d05e      	beq.n	8014282 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80141c4:	68ba      	ldr	r2, [r7, #8]
 80141c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c8:	699b      	ldr	r3, [r3, #24]
 80141ca:	441a      	add	r2, r3
 80141cc:	2300      	movs	r3, #0
 80141ce:	9300      	str	r3, [sp, #0]
 80141d0:	2300      	movs	r3, #0
 80141d2:	2100      	movs	r1, #0
 80141d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141d6:	f7ff fe05 	bl	8013de4 <xTimerGenericCommand>
 80141da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80141dc:	6a3b      	ldr	r3, [r7, #32]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d14f      	bne.n	8014282 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80141e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e6:	f383 8811 	msr	BASEPRI, r3
 80141ea:	f3bf 8f6f 	isb	sy
 80141ee:	f3bf 8f4f 	dsb	sy
 80141f2:	61bb      	str	r3, [r7, #24]
}
 80141f4:	bf00      	nop
 80141f6:	e7fe      	b.n	80141f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80141f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141fe:	f023 0301 	bic.w	r3, r3, #1
 8014202:	b2da      	uxtb	r2, r3
 8014204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801420a:	e03a      	b.n	8014282 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014212:	f043 0301 	orr.w	r3, r3, #1
 8014216:	b2da      	uxtb	r2, r3
 8014218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801421e:	68ba      	ldr	r2, [r7, #8]
 8014220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014222:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014226:	699b      	ldr	r3, [r3, #24]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d10a      	bne.n	8014242 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014230:	f383 8811 	msr	BASEPRI, r3
 8014234:	f3bf 8f6f 	isb	sy
 8014238:	f3bf 8f4f 	dsb	sy
 801423c:	617b      	str	r3, [r7, #20]
}
 801423e:	bf00      	nop
 8014240:	e7fe      	b.n	8014240 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014244:	699a      	ldr	r2, [r3, #24]
 8014246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014248:	18d1      	adds	r1, r2, r3
 801424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801424e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014250:	f7ff ff06 	bl	8014060 <prvInsertTimerInActiveList>
					break;
 8014254:	e015      	b.n	8014282 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801425c:	f003 0302 	and.w	r3, r3, #2
 8014260:	2b00      	cmp	r3, #0
 8014262:	d103      	bne.n	801426c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014266:	f000 fbfb 	bl	8014a60 <vPortFree>
 801426a:	e00a      	b.n	8014282 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801426e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014272:	f023 0301 	bic.w	r3, r3, #1
 8014276:	b2da      	uxtb	r2, r3
 8014278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801427a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801427e:	e000      	b.n	8014282 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014280:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014282:	4b08      	ldr	r3, [pc, #32]	; (80142a4 <prvProcessReceivedCommands+0x1c0>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	1d39      	adds	r1, r7, #4
 8014288:	2200      	movs	r2, #0
 801428a:	4618      	mov	r0, r3
 801428c:	f7fe f98a 	bl	80125a4 <xQueueReceive>
 8014290:	4603      	mov	r3, r0
 8014292:	2b00      	cmp	r3, #0
 8014294:	f47f af2a 	bne.w	80140ec <prvProcessReceivedCommands+0x8>
	}
}
 8014298:	bf00      	nop
 801429a:	bf00      	nop
 801429c:	3730      	adds	r7, #48	; 0x30
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
 80142a2:	bf00      	nop
 80142a4:	24001868 	.word	0x24001868

080142a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b088      	sub	sp, #32
 80142ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80142ae:	e048      	b.n	8014342 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80142b0:	4b2d      	ldr	r3, [pc, #180]	; (8014368 <prvSwitchTimerLists+0xc0>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	68db      	ldr	r3, [r3, #12]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142ba:	4b2b      	ldr	r3, [pc, #172]	; (8014368 <prvSwitchTimerLists+0xc0>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	68db      	ldr	r3, [r3, #12]
 80142c0:	68db      	ldr	r3, [r3, #12]
 80142c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	3304      	adds	r3, #4
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7fd fe69 	bl	8011fa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	6a1b      	ldr	r3, [r3, #32]
 80142d2:	68f8      	ldr	r0, [r7, #12]
 80142d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80142dc:	f003 0304 	and.w	r3, r3, #4
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d02e      	beq.n	8014342 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	699b      	ldr	r3, [r3, #24]
 80142e8:	693a      	ldr	r2, [r7, #16]
 80142ea:	4413      	add	r3, r2
 80142ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80142ee:	68ba      	ldr	r2, [r7, #8]
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d90e      	bls.n	8014314 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	68ba      	ldr	r2, [r7, #8]
 80142fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	68fa      	ldr	r2, [r7, #12]
 8014300:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014302:	4b19      	ldr	r3, [pc, #100]	; (8014368 <prvSwitchTimerLists+0xc0>)
 8014304:	681a      	ldr	r2, [r3, #0]
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	3304      	adds	r3, #4
 801430a:	4619      	mov	r1, r3
 801430c:	4610      	mov	r0, r2
 801430e:	f7fd fe0e 	bl	8011f2e <vListInsert>
 8014312:	e016      	b.n	8014342 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014314:	2300      	movs	r3, #0
 8014316:	9300      	str	r3, [sp, #0]
 8014318:	2300      	movs	r3, #0
 801431a:	693a      	ldr	r2, [r7, #16]
 801431c:	2100      	movs	r1, #0
 801431e:	68f8      	ldr	r0, [r7, #12]
 8014320:	f7ff fd60 	bl	8013de4 <xTimerGenericCommand>
 8014324:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d10a      	bne.n	8014342 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014330:	f383 8811 	msr	BASEPRI, r3
 8014334:	f3bf 8f6f 	isb	sy
 8014338:	f3bf 8f4f 	dsb	sy
 801433c:	603b      	str	r3, [r7, #0]
}
 801433e:	bf00      	nop
 8014340:	e7fe      	b.n	8014340 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014342:	4b09      	ldr	r3, [pc, #36]	; (8014368 <prvSwitchTimerLists+0xc0>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d1b1      	bne.n	80142b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801434c:	4b06      	ldr	r3, [pc, #24]	; (8014368 <prvSwitchTimerLists+0xc0>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014352:	4b06      	ldr	r3, [pc, #24]	; (801436c <prvSwitchTimerLists+0xc4>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	4a04      	ldr	r2, [pc, #16]	; (8014368 <prvSwitchTimerLists+0xc0>)
 8014358:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801435a:	4a04      	ldr	r2, [pc, #16]	; (801436c <prvSwitchTimerLists+0xc4>)
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	6013      	str	r3, [r2, #0]
}
 8014360:	bf00      	nop
 8014362:	3718      	adds	r7, #24
 8014364:	46bd      	mov	sp, r7
 8014366:	bd80      	pop	{r7, pc}
 8014368:	24001860 	.word	0x24001860
 801436c:	24001864 	.word	0x24001864

08014370 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014376:	f000 f985 	bl	8014684 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801437a:	4b15      	ldr	r3, [pc, #84]	; (80143d0 <prvCheckForValidListAndQueue+0x60>)
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d120      	bne.n	80143c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014382:	4814      	ldr	r0, [pc, #80]	; (80143d4 <prvCheckForValidListAndQueue+0x64>)
 8014384:	f7fd fd82 	bl	8011e8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014388:	4813      	ldr	r0, [pc, #76]	; (80143d8 <prvCheckForValidListAndQueue+0x68>)
 801438a:	f7fd fd7f 	bl	8011e8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801438e:	4b13      	ldr	r3, [pc, #76]	; (80143dc <prvCheckForValidListAndQueue+0x6c>)
 8014390:	4a10      	ldr	r2, [pc, #64]	; (80143d4 <prvCheckForValidListAndQueue+0x64>)
 8014392:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014394:	4b12      	ldr	r3, [pc, #72]	; (80143e0 <prvCheckForValidListAndQueue+0x70>)
 8014396:	4a10      	ldr	r2, [pc, #64]	; (80143d8 <prvCheckForValidListAndQueue+0x68>)
 8014398:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801439a:	2300      	movs	r3, #0
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	4b11      	ldr	r3, [pc, #68]	; (80143e4 <prvCheckForValidListAndQueue+0x74>)
 80143a0:	4a11      	ldr	r2, [pc, #68]	; (80143e8 <prvCheckForValidListAndQueue+0x78>)
 80143a2:	2110      	movs	r1, #16
 80143a4:	200a      	movs	r0, #10
 80143a6:	f7fd fe8d 	bl	80120c4 <xQueueGenericCreateStatic>
 80143aa:	4603      	mov	r3, r0
 80143ac:	4a08      	ldr	r2, [pc, #32]	; (80143d0 <prvCheckForValidListAndQueue+0x60>)
 80143ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80143b0:	4b07      	ldr	r3, [pc, #28]	; (80143d0 <prvCheckForValidListAndQueue+0x60>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d005      	beq.n	80143c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80143b8:	4b05      	ldr	r3, [pc, #20]	; (80143d0 <prvCheckForValidListAndQueue+0x60>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	490b      	ldr	r1, [pc, #44]	; (80143ec <prvCheckForValidListAndQueue+0x7c>)
 80143be:	4618      	mov	r0, r3
 80143c0:	f7fe fb9c 	bl	8012afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80143c4:	f000 f98e 	bl	80146e4 <vPortExitCritical>
}
 80143c8:	bf00      	nop
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	24001868 	.word	0x24001868
 80143d4:	24001838 	.word	0x24001838
 80143d8:	2400184c 	.word	0x2400184c
 80143dc:	24001860 	.word	0x24001860
 80143e0:	24001864 	.word	0x24001864
 80143e4:	24001914 	.word	0x24001914
 80143e8:	24001874 	.word	0x24001874
 80143ec:	08015fe0 	.word	0x08015fe0

080143f0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b08a      	sub	sp, #40	; 0x28
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	60f8      	str	r0, [r7, #12]
 80143f8:	60b9      	str	r1, [r7, #8]
 80143fa:	607a      	str	r2, [r7, #4]
 80143fc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80143fe:	f06f 0301 	mvn.w	r3, #1
 8014402:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014410:	4b06      	ldr	r3, [pc, #24]	; (801442c <xTimerPendFunctionCallFromISR+0x3c>)
 8014412:	6818      	ldr	r0, [r3, #0]
 8014414:	f107 0114 	add.w	r1, r7, #20
 8014418:	2300      	movs	r3, #0
 801441a:	683a      	ldr	r2, [r7, #0]
 801441c:	f7fe f826 	bl	801246c <xQueueGenericSendFromISR>
 8014420:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8014422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014424:	4618      	mov	r0, r3
 8014426:	3728      	adds	r7, #40	; 0x28
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}
 801442c:	24001868 	.word	0x24001868

08014430 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014430:	b480      	push	{r7}
 8014432:	b085      	sub	sp, #20
 8014434:	af00      	add	r7, sp, #0
 8014436:	60f8      	str	r0, [r7, #12]
 8014438:	60b9      	str	r1, [r7, #8]
 801443a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	3b04      	subs	r3, #4
 8014440:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	3b04      	subs	r3, #4
 801444e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014450:	68bb      	ldr	r3, [r7, #8]
 8014452:	f023 0201 	bic.w	r2, r3, #1
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	3b04      	subs	r3, #4
 801445e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014460:	4a0c      	ldr	r2, [pc, #48]	; (8014494 <pxPortInitialiseStack+0x64>)
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	3b14      	subs	r3, #20
 801446a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	3b04      	subs	r3, #4
 8014476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	f06f 0202 	mvn.w	r2, #2
 801447e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	3b20      	subs	r3, #32
 8014484:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014486:	68fb      	ldr	r3, [r7, #12]
}
 8014488:	4618      	mov	r0, r3
 801448a:	3714      	adds	r7, #20
 801448c:	46bd      	mov	sp, r7
 801448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014492:	4770      	bx	lr
 8014494:	08014499 	.word	0x08014499

08014498 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014498:	b480      	push	{r7}
 801449a:	b085      	sub	sp, #20
 801449c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801449e:	2300      	movs	r3, #0
 80144a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80144a2:	4b12      	ldr	r3, [pc, #72]	; (80144ec <prvTaskExitError+0x54>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80144aa:	d00a      	beq.n	80144c2 <prvTaskExitError+0x2a>
	__asm volatile
 80144ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144b0:	f383 8811 	msr	BASEPRI, r3
 80144b4:	f3bf 8f6f 	isb	sy
 80144b8:	f3bf 8f4f 	dsb	sy
 80144bc:	60fb      	str	r3, [r7, #12]
}
 80144be:	bf00      	nop
 80144c0:	e7fe      	b.n	80144c0 <prvTaskExitError+0x28>
	__asm volatile
 80144c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c6:	f383 8811 	msr	BASEPRI, r3
 80144ca:	f3bf 8f6f 	isb	sy
 80144ce:	f3bf 8f4f 	dsb	sy
 80144d2:	60bb      	str	r3, [r7, #8]
}
 80144d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80144d6:	bf00      	nop
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d0fc      	beq.n	80144d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80144de:	bf00      	nop
 80144e0:	bf00      	nop
 80144e2:	3714      	adds	r7, #20
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr
 80144ec:	24000098 	.word	0x24000098

080144f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80144f0:	4b07      	ldr	r3, [pc, #28]	; (8014510 <pxCurrentTCBConst2>)
 80144f2:	6819      	ldr	r1, [r3, #0]
 80144f4:	6808      	ldr	r0, [r1, #0]
 80144f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144fa:	f380 8809 	msr	PSP, r0
 80144fe:	f3bf 8f6f 	isb	sy
 8014502:	f04f 0000 	mov.w	r0, #0
 8014506:	f380 8811 	msr	BASEPRI, r0
 801450a:	4770      	bx	lr
 801450c:	f3af 8000 	nop.w

08014510 <pxCurrentTCBConst2>:
 8014510:	24001338 	.word	0x24001338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014514:	bf00      	nop
 8014516:	bf00      	nop

08014518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014518:	4808      	ldr	r0, [pc, #32]	; (801453c <prvPortStartFirstTask+0x24>)
 801451a:	6800      	ldr	r0, [r0, #0]
 801451c:	6800      	ldr	r0, [r0, #0]
 801451e:	f380 8808 	msr	MSP, r0
 8014522:	f04f 0000 	mov.w	r0, #0
 8014526:	f380 8814 	msr	CONTROL, r0
 801452a:	b662      	cpsie	i
 801452c:	b661      	cpsie	f
 801452e:	f3bf 8f4f 	dsb	sy
 8014532:	f3bf 8f6f 	isb	sy
 8014536:	df00      	svc	0
 8014538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801453a:	bf00      	nop
 801453c:	e000ed08 	.word	0xe000ed08

08014540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b086      	sub	sp, #24
 8014544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014546:	4b46      	ldr	r3, [pc, #280]	; (8014660 <xPortStartScheduler+0x120>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	4a46      	ldr	r2, [pc, #280]	; (8014664 <xPortStartScheduler+0x124>)
 801454c:	4293      	cmp	r3, r2
 801454e:	d10a      	bne.n	8014566 <xPortStartScheduler+0x26>
	__asm volatile
 8014550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014554:	f383 8811 	msr	BASEPRI, r3
 8014558:	f3bf 8f6f 	isb	sy
 801455c:	f3bf 8f4f 	dsb	sy
 8014560:	613b      	str	r3, [r7, #16]
}
 8014562:	bf00      	nop
 8014564:	e7fe      	b.n	8014564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014566:	4b3e      	ldr	r3, [pc, #248]	; (8014660 <xPortStartScheduler+0x120>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4a3f      	ldr	r2, [pc, #252]	; (8014668 <xPortStartScheduler+0x128>)
 801456c:	4293      	cmp	r3, r2
 801456e:	d10a      	bne.n	8014586 <xPortStartScheduler+0x46>
	__asm volatile
 8014570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014574:	f383 8811 	msr	BASEPRI, r3
 8014578:	f3bf 8f6f 	isb	sy
 801457c:	f3bf 8f4f 	dsb	sy
 8014580:	60fb      	str	r3, [r7, #12]
}
 8014582:	bf00      	nop
 8014584:	e7fe      	b.n	8014584 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014586:	4b39      	ldr	r3, [pc, #228]	; (801466c <xPortStartScheduler+0x12c>)
 8014588:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	b2db      	uxtb	r3, r3
 8014590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	22ff      	movs	r2, #255	; 0xff
 8014596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014598:	697b      	ldr	r3, [r7, #20]
 801459a:	781b      	ldrb	r3, [r3, #0]
 801459c:	b2db      	uxtb	r3, r3
 801459e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80145a0:	78fb      	ldrb	r3, [r7, #3]
 80145a2:	b2db      	uxtb	r3, r3
 80145a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80145a8:	b2da      	uxtb	r2, r3
 80145aa:	4b31      	ldr	r3, [pc, #196]	; (8014670 <xPortStartScheduler+0x130>)
 80145ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80145ae:	4b31      	ldr	r3, [pc, #196]	; (8014674 <xPortStartScheduler+0x134>)
 80145b0:	2207      	movs	r2, #7
 80145b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80145b4:	e009      	b.n	80145ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80145b6:	4b2f      	ldr	r3, [pc, #188]	; (8014674 <xPortStartScheduler+0x134>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	3b01      	subs	r3, #1
 80145bc:	4a2d      	ldr	r2, [pc, #180]	; (8014674 <xPortStartScheduler+0x134>)
 80145be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80145c0:	78fb      	ldrb	r3, [r7, #3]
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	005b      	lsls	r3, r3, #1
 80145c6:	b2db      	uxtb	r3, r3
 80145c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80145ca:	78fb      	ldrb	r3, [r7, #3]
 80145cc:	b2db      	uxtb	r3, r3
 80145ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80145d2:	2b80      	cmp	r3, #128	; 0x80
 80145d4:	d0ef      	beq.n	80145b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80145d6:	4b27      	ldr	r3, [pc, #156]	; (8014674 <xPortStartScheduler+0x134>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	f1c3 0307 	rsb	r3, r3, #7
 80145de:	2b04      	cmp	r3, #4
 80145e0:	d00a      	beq.n	80145f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80145e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e6:	f383 8811 	msr	BASEPRI, r3
 80145ea:	f3bf 8f6f 	isb	sy
 80145ee:	f3bf 8f4f 	dsb	sy
 80145f2:	60bb      	str	r3, [r7, #8]
}
 80145f4:	bf00      	nop
 80145f6:	e7fe      	b.n	80145f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80145f8:	4b1e      	ldr	r3, [pc, #120]	; (8014674 <xPortStartScheduler+0x134>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	021b      	lsls	r3, r3, #8
 80145fe:	4a1d      	ldr	r2, [pc, #116]	; (8014674 <xPortStartScheduler+0x134>)
 8014600:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014602:	4b1c      	ldr	r3, [pc, #112]	; (8014674 <xPortStartScheduler+0x134>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801460a:	4a1a      	ldr	r2, [pc, #104]	; (8014674 <xPortStartScheduler+0x134>)
 801460c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	b2da      	uxtb	r2, r3
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014616:	4b18      	ldr	r3, [pc, #96]	; (8014678 <xPortStartScheduler+0x138>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	4a17      	ldr	r2, [pc, #92]	; (8014678 <xPortStartScheduler+0x138>)
 801461c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014622:	4b15      	ldr	r3, [pc, #84]	; (8014678 <xPortStartScheduler+0x138>)
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	4a14      	ldr	r2, [pc, #80]	; (8014678 <xPortStartScheduler+0x138>)
 8014628:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801462c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801462e:	f000 f8dd 	bl	80147ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014632:	4b12      	ldr	r3, [pc, #72]	; (801467c <xPortStartScheduler+0x13c>)
 8014634:	2200      	movs	r2, #0
 8014636:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014638:	f000 f8fc 	bl	8014834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801463c:	4b10      	ldr	r3, [pc, #64]	; (8014680 <xPortStartScheduler+0x140>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	4a0f      	ldr	r2, [pc, #60]	; (8014680 <xPortStartScheduler+0x140>)
 8014642:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014646:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014648:	f7ff ff66 	bl	8014518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801464c:	f7fe ff80 	bl	8013550 <vTaskSwitchContext>
	prvTaskExitError();
 8014650:	f7ff ff22 	bl	8014498 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014654:	2300      	movs	r3, #0
}
 8014656:	4618      	mov	r0, r3
 8014658:	3718      	adds	r7, #24
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	e000ed00 	.word	0xe000ed00
 8014664:	410fc271 	.word	0x410fc271
 8014668:	410fc270 	.word	0x410fc270
 801466c:	e000e400 	.word	0xe000e400
 8014670:	24001964 	.word	0x24001964
 8014674:	24001968 	.word	0x24001968
 8014678:	e000ed20 	.word	0xe000ed20
 801467c:	24000098 	.word	0x24000098
 8014680:	e000ef34 	.word	0xe000ef34

08014684 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
	__asm volatile
 801468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801468e:	f383 8811 	msr	BASEPRI, r3
 8014692:	f3bf 8f6f 	isb	sy
 8014696:	f3bf 8f4f 	dsb	sy
 801469a:	607b      	str	r3, [r7, #4]
}
 801469c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801469e:	4b0f      	ldr	r3, [pc, #60]	; (80146dc <vPortEnterCritical+0x58>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	3301      	adds	r3, #1
 80146a4:	4a0d      	ldr	r2, [pc, #52]	; (80146dc <vPortEnterCritical+0x58>)
 80146a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80146a8:	4b0c      	ldr	r3, [pc, #48]	; (80146dc <vPortEnterCritical+0x58>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	2b01      	cmp	r3, #1
 80146ae:	d10f      	bne.n	80146d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80146b0:	4b0b      	ldr	r3, [pc, #44]	; (80146e0 <vPortEnterCritical+0x5c>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	b2db      	uxtb	r3, r3
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d00a      	beq.n	80146d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80146ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146be:	f383 8811 	msr	BASEPRI, r3
 80146c2:	f3bf 8f6f 	isb	sy
 80146c6:	f3bf 8f4f 	dsb	sy
 80146ca:	603b      	str	r3, [r7, #0]
}
 80146cc:	bf00      	nop
 80146ce:	e7fe      	b.n	80146ce <vPortEnterCritical+0x4a>
	}
}
 80146d0:	bf00      	nop
 80146d2:	370c      	adds	r7, #12
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr
 80146dc:	24000098 	.word	0x24000098
 80146e0:	e000ed04 	.word	0xe000ed04

080146e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80146e4:	b480      	push	{r7}
 80146e6:	b083      	sub	sp, #12
 80146e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80146ea:	4b12      	ldr	r3, [pc, #72]	; (8014734 <vPortExitCritical+0x50>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d10a      	bne.n	8014708 <vPortExitCritical+0x24>
	__asm volatile
 80146f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f6:	f383 8811 	msr	BASEPRI, r3
 80146fa:	f3bf 8f6f 	isb	sy
 80146fe:	f3bf 8f4f 	dsb	sy
 8014702:	607b      	str	r3, [r7, #4]
}
 8014704:	bf00      	nop
 8014706:	e7fe      	b.n	8014706 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014708:	4b0a      	ldr	r3, [pc, #40]	; (8014734 <vPortExitCritical+0x50>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	3b01      	subs	r3, #1
 801470e:	4a09      	ldr	r2, [pc, #36]	; (8014734 <vPortExitCritical+0x50>)
 8014710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014712:	4b08      	ldr	r3, [pc, #32]	; (8014734 <vPortExitCritical+0x50>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d105      	bne.n	8014726 <vPortExitCritical+0x42>
 801471a:	2300      	movs	r3, #0
 801471c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	f383 8811 	msr	BASEPRI, r3
}
 8014724:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014726:	bf00      	nop
 8014728:	370c      	adds	r7, #12
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop
 8014734:	24000098 	.word	0x24000098
	...

08014740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014740:	f3ef 8009 	mrs	r0, PSP
 8014744:	f3bf 8f6f 	isb	sy
 8014748:	4b15      	ldr	r3, [pc, #84]	; (80147a0 <pxCurrentTCBConst>)
 801474a:	681a      	ldr	r2, [r3, #0]
 801474c:	f01e 0f10 	tst.w	lr, #16
 8014750:	bf08      	it	eq
 8014752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801475a:	6010      	str	r0, [r2, #0]
 801475c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014764:	f380 8811 	msr	BASEPRI, r0
 8014768:	f3bf 8f4f 	dsb	sy
 801476c:	f3bf 8f6f 	isb	sy
 8014770:	f7fe feee 	bl	8013550 <vTaskSwitchContext>
 8014774:	f04f 0000 	mov.w	r0, #0
 8014778:	f380 8811 	msr	BASEPRI, r0
 801477c:	bc09      	pop	{r0, r3}
 801477e:	6819      	ldr	r1, [r3, #0]
 8014780:	6808      	ldr	r0, [r1, #0]
 8014782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014786:	f01e 0f10 	tst.w	lr, #16
 801478a:	bf08      	it	eq
 801478c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014790:	f380 8809 	msr	PSP, r0
 8014794:	f3bf 8f6f 	isb	sy
 8014798:	4770      	bx	lr
 801479a:	bf00      	nop
 801479c:	f3af 8000 	nop.w

080147a0 <pxCurrentTCBConst>:
 80147a0:	24001338 	.word	0x24001338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80147a4:	bf00      	nop
 80147a6:	bf00      	nop

080147a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
	__asm volatile
 80147ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b2:	f383 8811 	msr	BASEPRI, r3
 80147b6:	f3bf 8f6f 	isb	sy
 80147ba:	f3bf 8f4f 	dsb	sy
 80147be:	607b      	str	r3, [r7, #4]
}
 80147c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80147c2:	f7fe fe0b 	bl	80133dc <xTaskIncrementTick>
 80147c6:	4603      	mov	r3, r0
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d003      	beq.n	80147d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80147cc:	4b06      	ldr	r3, [pc, #24]	; (80147e8 <xPortSysTickHandler+0x40>)
 80147ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147d2:	601a      	str	r2, [r3, #0]
 80147d4:	2300      	movs	r3, #0
 80147d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	f383 8811 	msr	BASEPRI, r3
}
 80147de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80147e0:	bf00      	nop
 80147e2:	3708      	adds	r7, #8
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	e000ed04 	.word	0xe000ed04

080147ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80147ec:	b480      	push	{r7}
 80147ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80147f0:	4b0b      	ldr	r3, [pc, #44]	; (8014820 <vPortSetupTimerInterrupt+0x34>)
 80147f2:	2200      	movs	r2, #0
 80147f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80147f6:	4b0b      	ldr	r3, [pc, #44]	; (8014824 <vPortSetupTimerInterrupt+0x38>)
 80147f8:	2200      	movs	r2, #0
 80147fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80147fc:	4b0a      	ldr	r3, [pc, #40]	; (8014828 <vPortSetupTimerInterrupt+0x3c>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	4a0a      	ldr	r2, [pc, #40]	; (801482c <vPortSetupTimerInterrupt+0x40>)
 8014802:	fba2 2303 	umull	r2, r3, r2, r3
 8014806:	099b      	lsrs	r3, r3, #6
 8014808:	4a09      	ldr	r2, [pc, #36]	; (8014830 <vPortSetupTimerInterrupt+0x44>)
 801480a:	3b01      	subs	r3, #1
 801480c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801480e:	4b04      	ldr	r3, [pc, #16]	; (8014820 <vPortSetupTimerInterrupt+0x34>)
 8014810:	2207      	movs	r2, #7
 8014812:	601a      	str	r2, [r3, #0]
}
 8014814:	bf00      	nop
 8014816:	46bd      	mov	sp, r7
 8014818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop
 8014820:	e000e010 	.word	0xe000e010
 8014824:	e000e018 	.word	0xe000e018
 8014828:	24000088 	.word	0x24000088
 801482c:	10624dd3 	.word	0x10624dd3
 8014830:	e000e014 	.word	0xe000e014

08014834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014844 <vPortEnableVFP+0x10>
 8014838:	6801      	ldr	r1, [r0, #0]
 801483a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801483e:	6001      	str	r1, [r0, #0]
 8014840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014842:	bf00      	nop
 8014844:	e000ed88 	.word	0xe000ed88

08014848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014848:	b480      	push	{r7}
 801484a:	b085      	sub	sp, #20
 801484c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801484e:	f3ef 8305 	mrs	r3, IPSR
 8014852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2b0f      	cmp	r3, #15
 8014858:	d914      	bls.n	8014884 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801485a:	4a17      	ldr	r2, [pc, #92]	; (80148b8 <vPortValidateInterruptPriority+0x70>)
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	4413      	add	r3, r2
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014864:	4b15      	ldr	r3, [pc, #84]	; (80148bc <vPortValidateInterruptPriority+0x74>)
 8014866:	781b      	ldrb	r3, [r3, #0]
 8014868:	7afa      	ldrb	r2, [r7, #11]
 801486a:	429a      	cmp	r2, r3
 801486c:	d20a      	bcs.n	8014884 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014872:	f383 8811 	msr	BASEPRI, r3
 8014876:	f3bf 8f6f 	isb	sy
 801487a:	f3bf 8f4f 	dsb	sy
 801487e:	607b      	str	r3, [r7, #4]
}
 8014880:	bf00      	nop
 8014882:	e7fe      	b.n	8014882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014884:	4b0e      	ldr	r3, [pc, #56]	; (80148c0 <vPortValidateInterruptPriority+0x78>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801488c:	4b0d      	ldr	r3, [pc, #52]	; (80148c4 <vPortValidateInterruptPriority+0x7c>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	429a      	cmp	r2, r3
 8014892:	d90a      	bls.n	80148aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014898:	f383 8811 	msr	BASEPRI, r3
 801489c:	f3bf 8f6f 	isb	sy
 80148a0:	f3bf 8f4f 	dsb	sy
 80148a4:	603b      	str	r3, [r7, #0]
}
 80148a6:	bf00      	nop
 80148a8:	e7fe      	b.n	80148a8 <vPortValidateInterruptPriority+0x60>
	}
 80148aa:	bf00      	nop
 80148ac:	3714      	adds	r7, #20
 80148ae:	46bd      	mov	sp, r7
 80148b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b4:	4770      	bx	lr
 80148b6:	bf00      	nop
 80148b8:	e000e3f0 	.word	0xe000e3f0
 80148bc:	24001964 	.word	0x24001964
 80148c0:	e000ed0c 	.word	0xe000ed0c
 80148c4:	24001968 	.word	0x24001968

080148c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b08a      	sub	sp, #40	; 0x28
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80148d0:	2300      	movs	r3, #0
 80148d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80148d4:	f7fe fcc6 	bl	8013264 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80148d8:	4b5b      	ldr	r3, [pc, #364]	; (8014a48 <pvPortMalloc+0x180>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d101      	bne.n	80148e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80148e0:	f000 f920 	bl	8014b24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80148e4:	4b59      	ldr	r3, [pc, #356]	; (8014a4c <pvPortMalloc+0x184>)
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	4013      	ands	r3, r2
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	f040 8093 	bne.w	8014a18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d01d      	beq.n	8014934 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80148f8:	2208      	movs	r2, #8
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	4413      	add	r3, r2
 80148fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f003 0307 	and.w	r3, r3, #7
 8014906:	2b00      	cmp	r3, #0
 8014908:	d014      	beq.n	8014934 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f023 0307 	bic.w	r3, r3, #7
 8014910:	3308      	adds	r3, #8
 8014912:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f003 0307 	and.w	r3, r3, #7
 801491a:	2b00      	cmp	r3, #0
 801491c:	d00a      	beq.n	8014934 <pvPortMalloc+0x6c>
	__asm volatile
 801491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014922:	f383 8811 	msr	BASEPRI, r3
 8014926:	f3bf 8f6f 	isb	sy
 801492a:	f3bf 8f4f 	dsb	sy
 801492e:	617b      	str	r3, [r7, #20]
}
 8014930:	bf00      	nop
 8014932:	e7fe      	b.n	8014932 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d06e      	beq.n	8014a18 <pvPortMalloc+0x150>
 801493a:	4b45      	ldr	r3, [pc, #276]	; (8014a50 <pvPortMalloc+0x188>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	429a      	cmp	r2, r3
 8014942:	d869      	bhi.n	8014a18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014944:	4b43      	ldr	r3, [pc, #268]	; (8014a54 <pvPortMalloc+0x18c>)
 8014946:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014948:	4b42      	ldr	r3, [pc, #264]	; (8014a54 <pvPortMalloc+0x18c>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801494e:	e004      	b.n	801495a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014952:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	429a      	cmp	r2, r3
 8014962:	d903      	bls.n	801496c <pvPortMalloc+0xa4>
 8014964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d1f1      	bne.n	8014950 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801496c:	4b36      	ldr	r3, [pc, #216]	; (8014a48 <pvPortMalloc+0x180>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014972:	429a      	cmp	r2, r3
 8014974:	d050      	beq.n	8014a18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014976:	6a3b      	ldr	r3, [r7, #32]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	2208      	movs	r2, #8
 801497c:	4413      	add	r3, r2
 801497e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014982:	681a      	ldr	r2, [r3, #0]
 8014984:	6a3b      	ldr	r3, [r7, #32]
 8014986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801498a:	685a      	ldr	r2, [r3, #4]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	1ad2      	subs	r2, r2, r3
 8014990:	2308      	movs	r3, #8
 8014992:	005b      	lsls	r3, r3, #1
 8014994:	429a      	cmp	r2, r3
 8014996:	d91f      	bls.n	80149d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	4413      	add	r3, r2
 801499e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80149a0:	69bb      	ldr	r3, [r7, #24]
 80149a2:	f003 0307 	and.w	r3, r3, #7
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d00a      	beq.n	80149c0 <pvPortMalloc+0xf8>
	__asm volatile
 80149aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ae:	f383 8811 	msr	BASEPRI, r3
 80149b2:	f3bf 8f6f 	isb	sy
 80149b6:	f3bf 8f4f 	dsb	sy
 80149ba:	613b      	str	r3, [r7, #16]
}
 80149bc:	bf00      	nop
 80149be:	e7fe      	b.n	80149be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80149c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c2:	685a      	ldr	r2, [r3, #4]
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	1ad2      	subs	r2, r2, r3
 80149c8:	69bb      	ldr	r3, [r7, #24]
 80149ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80149cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ce:	687a      	ldr	r2, [r7, #4]
 80149d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80149d2:	69b8      	ldr	r0, [r7, #24]
 80149d4:	f000 f908 	bl	8014be8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80149d8:	4b1d      	ldr	r3, [pc, #116]	; (8014a50 <pvPortMalloc+0x188>)
 80149da:	681a      	ldr	r2, [r3, #0]
 80149dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149de:	685b      	ldr	r3, [r3, #4]
 80149e0:	1ad3      	subs	r3, r2, r3
 80149e2:	4a1b      	ldr	r2, [pc, #108]	; (8014a50 <pvPortMalloc+0x188>)
 80149e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80149e6:	4b1a      	ldr	r3, [pc, #104]	; (8014a50 <pvPortMalloc+0x188>)
 80149e8:	681a      	ldr	r2, [r3, #0]
 80149ea:	4b1b      	ldr	r3, [pc, #108]	; (8014a58 <pvPortMalloc+0x190>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	429a      	cmp	r2, r3
 80149f0:	d203      	bcs.n	80149fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80149f2:	4b17      	ldr	r3, [pc, #92]	; (8014a50 <pvPortMalloc+0x188>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	4a18      	ldr	r2, [pc, #96]	; (8014a58 <pvPortMalloc+0x190>)
 80149f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80149fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fc:	685a      	ldr	r2, [r3, #4]
 80149fe:	4b13      	ldr	r3, [pc, #76]	; (8014a4c <pvPortMalloc+0x184>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	431a      	orrs	r2, r3
 8014a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014a0e:	4b13      	ldr	r3, [pc, #76]	; (8014a5c <pvPortMalloc+0x194>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	3301      	adds	r3, #1
 8014a14:	4a11      	ldr	r2, [pc, #68]	; (8014a5c <pvPortMalloc+0x194>)
 8014a16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014a18:	f7fe fc32 	bl	8013280 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014a1c:	69fb      	ldr	r3, [r7, #28]
 8014a1e:	f003 0307 	and.w	r3, r3, #7
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d00a      	beq.n	8014a3c <pvPortMalloc+0x174>
	__asm volatile
 8014a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a2a:	f383 8811 	msr	BASEPRI, r3
 8014a2e:	f3bf 8f6f 	isb	sy
 8014a32:	f3bf 8f4f 	dsb	sy
 8014a36:	60fb      	str	r3, [r7, #12]
}
 8014a38:	bf00      	nop
 8014a3a:	e7fe      	b.n	8014a3a <pvPortMalloc+0x172>
	return pvReturn;
 8014a3c:	69fb      	ldr	r3, [r7, #28]
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3728      	adds	r7, #40	; 0x28
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	bf00      	nop
 8014a48:	24005574 	.word	0x24005574
 8014a4c:	24005588 	.word	0x24005588
 8014a50:	24005578 	.word	0x24005578
 8014a54:	2400556c 	.word	0x2400556c
 8014a58:	2400557c 	.word	0x2400557c
 8014a5c:	24005580 	.word	0x24005580

08014a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b086      	sub	sp, #24
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d04d      	beq.n	8014b0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014a72:	2308      	movs	r3, #8
 8014a74:	425b      	negs	r3, r3
 8014a76:	697a      	ldr	r2, [r7, #20]
 8014a78:	4413      	add	r3, r2
 8014a7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	685a      	ldr	r2, [r3, #4]
 8014a84:	4b24      	ldr	r3, [pc, #144]	; (8014b18 <vPortFree+0xb8>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	4013      	ands	r3, r2
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d10a      	bne.n	8014aa4 <vPortFree+0x44>
	__asm volatile
 8014a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a92:	f383 8811 	msr	BASEPRI, r3
 8014a96:	f3bf 8f6f 	isb	sy
 8014a9a:	f3bf 8f4f 	dsb	sy
 8014a9e:	60fb      	str	r3, [r7, #12]
}
 8014aa0:	bf00      	nop
 8014aa2:	e7fe      	b.n	8014aa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014aa4:	693b      	ldr	r3, [r7, #16]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d00a      	beq.n	8014ac2 <vPortFree+0x62>
	__asm volatile
 8014aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ab0:	f383 8811 	msr	BASEPRI, r3
 8014ab4:	f3bf 8f6f 	isb	sy
 8014ab8:	f3bf 8f4f 	dsb	sy
 8014abc:	60bb      	str	r3, [r7, #8]
}
 8014abe:	bf00      	nop
 8014ac0:	e7fe      	b.n	8014ac0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014ac2:	693b      	ldr	r3, [r7, #16]
 8014ac4:	685a      	ldr	r2, [r3, #4]
 8014ac6:	4b14      	ldr	r3, [pc, #80]	; (8014b18 <vPortFree+0xb8>)
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4013      	ands	r3, r2
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d01e      	beq.n	8014b0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014ad0:	693b      	ldr	r3, [r7, #16]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d11a      	bne.n	8014b0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014ad8:	693b      	ldr	r3, [r7, #16]
 8014ada:	685a      	ldr	r2, [r3, #4]
 8014adc:	4b0e      	ldr	r3, [pc, #56]	; (8014b18 <vPortFree+0xb8>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	43db      	mvns	r3, r3
 8014ae2:	401a      	ands	r2, r3
 8014ae4:	693b      	ldr	r3, [r7, #16]
 8014ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014ae8:	f7fe fbbc 	bl	8013264 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014aec:	693b      	ldr	r3, [r7, #16]
 8014aee:	685a      	ldr	r2, [r3, #4]
 8014af0:	4b0a      	ldr	r3, [pc, #40]	; (8014b1c <vPortFree+0xbc>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4413      	add	r3, r2
 8014af6:	4a09      	ldr	r2, [pc, #36]	; (8014b1c <vPortFree+0xbc>)
 8014af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014afa:	6938      	ldr	r0, [r7, #16]
 8014afc:	f000 f874 	bl	8014be8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014b00:	4b07      	ldr	r3, [pc, #28]	; (8014b20 <vPortFree+0xc0>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	3301      	adds	r3, #1
 8014b06:	4a06      	ldr	r2, [pc, #24]	; (8014b20 <vPortFree+0xc0>)
 8014b08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014b0a:	f7fe fbb9 	bl	8013280 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014b0e:	bf00      	nop
 8014b10:	3718      	adds	r7, #24
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
 8014b16:	bf00      	nop
 8014b18:	24005588 	.word	0x24005588
 8014b1c:	24005578 	.word	0x24005578
 8014b20:	24005584 	.word	0x24005584

08014b24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014b24:	b480      	push	{r7}
 8014b26:	b085      	sub	sp, #20
 8014b28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014b2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014b2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014b30:	4b27      	ldr	r3, [pc, #156]	; (8014bd0 <prvHeapInit+0xac>)
 8014b32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	f003 0307 	and.w	r3, r3, #7
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d00c      	beq.n	8014b58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	3307      	adds	r3, #7
 8014b42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	f023 0307 	bic.w	r3, r3, #7
 8014b4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014b4c:	68ba      	ldr	r2, [r7, #8]
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	1ad3      	subs	r3, r2, r3
 8014b52:	4a1f      	ldr	r2, [pc, #124]	; (8014bd0 <prvHeapInit+0xac>)
 8014b54:	4413      	add	r3, r2
 8014b56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014b5c:	4a1d      	ldr	r2, [pc, #116]	; (8014bd4 <prvHeapInit+0xb0>)
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014b62:	4b1c      	ldr	r3, [pc, #112]	; (8014bd4 <prvHeapInit+0xb0>)
 8014b64:	2200      	movs	r2, #0
 8014b66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	68ba      	ldr	r2, [r7, #8]
 8014b6c:	4413      	add	r3, r2
 8014b6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014b70:	2208      	movs	r2, #8
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	1a9b      	subs	r3, r3, r2
 8014b76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	f023 0307 	bic.w	r3, r3, #7
 8014b7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	4a15      	ldr	r2, [pc, #84]	; (8014bd8 <prvHeapInit+0xb4>)
 8014b84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014b86:	4b14      	ldr	r3, [pc, #80]	; (8014bd8 <prvHeapInit+0xb4>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014b8e:	4b12      	ldr	r3, [pc, #72]	; (8014bd8 <prvHeapInit+0xb4>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	2200      	movs	r2, #0
 8014b94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	1ad2      	subs	r2, r2, r3
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014ba4:	4b0c      	ldr	r3, [pc, #48]	; (8014bd8 <prvHeapInit+0xb4>)
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	685b      	ldr	r3, [r3, #4]
 8014bb0:	4a0a      	ldr	r2, [pc, #40]	; (8014bdc <prvHeapInit+0xb8>)
 8014bb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014bb4:	683b      	ldr	r3, [r7, #0]
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	4a09      	ldr	r2, [pc, #36]	; (8014be0 <prvHeapInit+0xbc>)
 8014bba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014bbc:	4b09      	ldr	r3, [pc, #36]	; (8014be4 <prvHeapInit+0xc0>)
 8014bbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014bc2:	601a      	str	r2, [r3, #0]
}
 8014bc4:	bf00      	nop
 8014bc6:	3714      	adds	r7, #20
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bce:	4770      	bx	lr
 8014bd0:	2400196c 	.word	0x2400196c
 8014bd4:	2400556c 	.word	0x2400556c
 8014bd8:	24005574 	.word	0x24005574
 8014bdc:	2400557c 	.word	0x2400557c
 8014be0:	24005578 	.word	0x24005578
 8014be4:	24005588 	.word	0x24005588

08014be8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014be8:	b480      	push	{r7}
 8014bea:	b085      	sub	sp, #20
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014bf0:	4b28      	ldr	r3, [pc, #160]	; (8014c94 <prvInsertBlockIntoFreeList+0xac>)
 8014bf2:	60fb      	str	r3, [r7, #12]
 8014bf4:	e002      	b.n	8014bfc <prvInsertBlockIntoFreeList+0x14>
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	60fb      	str	r3, [r7, #12]
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d8f7      	bhi.n	8014bf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	68ba      	ldr	r2, [r7, #8]
 8014c10:	4413      	add	r3, r2
 8014c12:	687a      	ldr	r2, [r7, #4]
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d108      	bne.n	8014c2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	685a      	ldr	r2, [r3, #4]
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	685b      	ldr	r3, [r3, #4]
 8014c20:	441a      	add	r2, r3
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	685b      	ldr	r3, [r3, #4]
 8014c32:	68ba      	ldr	r2, [r7, #8]
 8014c34:	441a      	add	r2, r3
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	d118      	bne.n	8014c70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	681a      	ldr	r2, [r3, #0]
 8014c42:	4b15      	ldr	r3, [pc, #84]	; (8014c98 <prvInsertBlockIntoFreeList+0xb0>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d00d      	beq.n	8014c66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	685a      	ldr	r2, [r3, #4]
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	685b      	ldr	r3, [r3, #4]
 8014c54:	441a      	add	r2, r3
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	601a      	str	r2, [r3, #0]
 8014c64:	e008      	b.n	8014c78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014c66:	4b0c      	ldr	r3, [pc, #48]	; (8014c98 <prvInsertBlockIntoFreeList+0xb0>)
 8014c68:	681a      	ldr	r2, [r3, #0]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	601a      	str	r2, [r3, #0]
 8014c6e:	e003      	b.n	8014c78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	681a      	ldr	r2, [r3, #0]
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014c78:	68fa      	ldr	r2, [r7, #12]
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d002      	beq.n	8014c86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	687a      	ldr	r2, [r7, #4]
 8014c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c86:	bf00      	nop
 8014c88:	3714      	adds	r7, #20
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c90:	4770      	bx	lr
 8014c92:	bf00      	nop
 8014c94:	2400556c 	.word	0x2400556c
 8014c98:	24005574 	.word	0x24005574

08014c9c <__errno>:
 8014c9c:	4b01      	ldr	r3, [pc, #4]	; (8014ca4 <__errno+0x8>)
 8014c9e:	6818      	ldr	r0, [r3, #0]
 8014ca0:	4770      	bx	lr
 8014ca2:	bf00      	nop
 8014ca4:	2400009c 	.word	0x2400009c

08014ca8 <__libc_init_array>:
 8014ca8:	b570      	push	{r4, r5, r6, lr}
 8014caa:	4d0d      	ldr	r5, [pc, #52]	; (8014ce0 <__libc_init_array+0x38>)
 8014cac:	4c0d      	ldr	r4, [pc, #52]	; (8014ce4 <__libc_init_array+0x3c>)
 8014cae:	1b64      	subs	r4, r4, r5
 8014cb0:	10a4      	asrs	r4, r4, #2
 8014cb2:	2600      	movs	r6, #0
 8014cb4:	42a6      	cmp	r6, r4
 8014cb6:	d109      	bne.n	8014ccc <__libc_init_array+0x24>
 8014cb8:	4d0b      	ldr	r5, [pc, #44]	; (8014ce8 <__libc_init_array+0x40>)
 8014cba:	4c0c      	ldr	r4, [pc, #48]	; (8014cec <__libc_init_array+0x44>)
 8014cbc:	f001 f842 	bl	8015d44 <_init>
 8014cc0:	1b64      	subs	r4, r4, r5
 8014cc2:	10a4      	asrs	r4, r4, #2
 8014cc4:	2600      	movs	r6, #0
 8014cc6:	42a6      	cmp	r6, r4
 8014cc8:	d105      	bne.n	8014cd6 <__libc_init_array+0x2e>
 8014cca:	bd70      	pop	{r4, r5, r6, pc}
 8014ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cd0:	4798      	blx	r3
 8014cd2:	3601      	adds	r6, #1
 8014cd4:	e7ee      	b.n	8014cb4 <__libc_init_array+0xc>
 8014cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cda:	4798      	blx	r3
 8014cdc:	3601      	adds	r6, #1
 8014cde:	e7f2      	b.n	8014cc6 <__libc_init_array+0x1e>
 8014ce0:	080161c4 	.word	0x080161c4
 8014ce4:	080161c4 	.word	0x080161c4
 8014ce8:	080161c4 	.word	0x080161c4
 8014cec:	080161c8 	.word	0x080161c8

08014cf0 <malloc>:
 8014cf0:	4b02      	ldr	r3, [pc, #8]	; (8014cfc <malloc+0xc>)
 8014cf2:	4601      	mov	r1, r0
 8014cf4:	6818      	ldr	r0, [r3, #0]
 8014cf6:	f000 b88d 	b.w	8014e14 <_malloc_r>
 8014cfa:	bf00      	nop
 8014cfc:	2400009c 	.word	0x2400009c

08014d00 <free>:
 8014d00:	4b02      	ldr	r3, [pc, #8]	; (8014d0c <free+0xc>)
 8014d02:	4601      	mov	r1, r0
 8014d04:	6818      	ldr	r0, [r3, #0]
 8014d06:	f000 b819 	b.w	8014d3c <_free_r>
 8014d0a:	bf00      	nop
 8014d0c:	2400009c 	.word	0x2400009c

08014d10 <memcpy>:
 8014d10:	440a      	add	r2, r1
 8014d12:	4291      	cmp	r1, r2
 8014d14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014d18:	d100      	bne.n	8014d1c <memcpy+0xc>
 8014d1a:	4770      	bx	lr
 8014d1c:	b510      	push	{r4, lr}
 8014d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d26:	4291      	cmp	r1, r2
 8014d28:	d1f9      	bne.n	8014d1e <memcpy+0xe>
 8014d2a:	bd10      	pop	{r4, pc}

08014d2c <memset>:
 8014d2c:	4402      	add	r2, r0
 8014d2e:	4603      	mov	r3, r0
 8014d30:	4293      	cmp	r3, r2
 8014d32:	d100      	bne.n	8014d36 <memset+0xa>
 8014d34:	4770      	bx	lr
 8014d36:	f803 1b01 	strb.w	r1, [r3], #1
 8014d3a:	e7f9      	b.n	8014d30 <memset+0x4>

08014d3c <_free_r>:
 8014d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d3e:	2900      	cmp	r1, #0
 8014d40:	d044      	beq.n	8014dcc <_free_r+0x90>
 8014d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d46:	9001      	str	r0, [sp, #4]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8014d4e:	bfb8      	it	lt
 8014d50:	18e4      	addlt	r4, r4, r3
 8014d52:	f000 fc51 	bl	80155f8 <__malloc_lock>
 8014d56:	4a1e      	ldr	r2, [pc, #120]	; (8014dd0 <_free_r+0x94>)
 8014d58:	9801      	ldr	r0, [sp, #4]
 8014d5a:	6813      	ldr	r3, [r2, #0]
 8014d5c:	b933      	cbnz	r3, 8014d6c <_free_r+0x30>
 8014d5e:	6063      	str	r3, [r4, #4]
 8014d60:	6014      	str	r4, [r2, #0]
 8014d62:	b003      	add	sp, #12
 8014d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d68:	f000 bc4c 	b.w	8015604 <__malloc_unlock>
 8014d6c:	42a3      	cmp	r3, r4
 8014d6e:	d908      	bls.n	8014d82 <_free_r+0x46>
 8014d70:	6825      	ldr	r5, [r4, #0]
 8014d72:	1961      	adds	r1, r4, r5
 8014d74:	428b      	cmp	r3, r1
 8014d76:	bf01      	itttt	eq
 8014d78:	6819      	ldreq	r1, [r3, #0]
 8014d7a:	685b      	ldreq	r3, [r3, #4]
 8014d7c:	1949      	addeq	r1, r1, r5
 8014d7e:	6021      	streq	r1, [r4, #0]
 8014d80:	e7ed      	b.n	8014d5e <_free_r+0x22>
 8014d82:	461a      	mov	r2, r3
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	b10b      	cbz	r3, 8014d8c <_free_r+0x50>
 8014d88:	42a3      	cmp	r3, r4
 8014d8a:	d9fa      	bls.n	8014d82 <_free_r+0x46>
 8014d8c:	6811      	ldr	r1, [r2, #0]
 8014d8e:	1855      	adds	r5, r2, r1
 8014d90:	42a5      	cmp	r5, r4
 8014d92:	d10b      	bne.n	8014dac <_free_r+0x70>
 8014d94:	6824      	ldr	r4, [r4, #0]
 8014d96:	4421      	add	r1, r4
 8014d98:	1854      	adds	r4, r2, r1
 8014d9a:	42a3      	cmp	r3, r4
 8014d9c:	6011      	str	r1, [r2, #0]
 8014d9e:	d1e0      	bne.n	8014d62 <_free_r+0x26>
 8014da0:	681c      	ldr	r4, [r3, #0]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	6053      	str	r3, [r2, #4]
 8014da6:	4421      	add	r1, r4
 8014da8:	6011      	str	r1, [r2, #0]
 8014daa:	e7da      	b.n	8014d62 <_free_r+0x26>
 8014dac:	d902      	bls.n	8014db4 <_free_r+0x78>
 8014dae:	230c      	movs	r3, #12
 8014db0:	6003      	str	r3, [r0, #0]
 8014db2:	e7d6      	b.n	8014d62 <_free_r+0x26>
 8014db4:	6825      	ldr	r5, [r4, #0]
 8014db6:	1961      	adds	r1, r4, r5
 8014db8:	428b      	cmp	r3, r1
 8014dba:	bf04      	itt	eq
 8014dbc:	6819      	ldreq	r1, [r3, #0]
 8014dbe:	685b      	ldreq	r3, [r3, #4]
 8014dc0:	6063      	str	r3, [r4, #4]
 8014dc2:	bf04      	itt	eq
 8014dc4:	1949      	addeq	r1, r1, r5
 8014dc6:	6021      	streq	r1, [r4, #0]
 8014dc8:	6054      	str	r4, [r2, #4]
 8014dca:	e7ca      	b.n	8014d62 <_free_r+0x26>
 8014dcc:	b003      	add	sp, #12
 8014dce:	bd30      	pop	{r4, r5, pc}
 8014dd0:	2400558c 	.word	0x2400558c

08014dd4 <sbrk_aligned>:
 8014dd4:	b570      	push	{r4, r5, r6, lr}
 8014dd6:	4e0e      	ldr	r6, [pc, #56]	; (8014e10 <sbrk_aligned+0x3c>)
 8014dd8:	460c      	mov	r4, r1
 8014dda:	6831      	ldr	r1, [r6, #0]
 8014ddc:	4605      	mov	r5, r0
 8014dde:	b911      	cbnz	r1, 8014de6 <sbrk_aligned+0x12>
 8014de0:	f000 f91a 	bl	8015018 <_sbrk_r>
 8014de4:	6030      	str	r0, [r6, #0]
 8014de6:	4621      	mov	r1, r4
 8014de8:	4628      	mov	r0, r5
 8014dea:	f000 f915 	bl	8015018 <_sbrk_r>
 8014dee:	1c43      	adds	r3, r0, #1
 8014df0:	d00a      	beq.n	8014e08 <sbrk_aligned+0x34>
 8014df2:	1cc4      	adds	r4, r0, #3
 8014df4:	f024 0403 	bic.w	r4, r4, #3
 8014df8:	42a0      	cmp	r0, r4
 8014dfa:	d007      	beq.n	8014e0c <sbrk_aligned+0x38>
 8014dfc:	1a21      	subs	r1, r4, r0
 8014dfe:	4628      	mov	r0, r5
 8014e00:	f000 f90a 	bl	8015018 <_sbrk_r>
 8014e04:	3001      	adds	r0, #1
 8014e06:	d101      	bne.n	8014e0c <sbrk_aligned+0x38>
 8014e08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	bd70      	pop	{r4, r5, r6, pc}
 8014e10:	24005590 	.word	0x24005590

08014e14 <_malloc_r>:
 8014e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e18:	1ccd      	adds	r5, r1, #3
 8014e1a:	f025 0503 	bic.w	r5, r5, #3
 8014e1e:	3508      	adds	r5, #8
 8014e20:	2d0c      	cmp	r5, #12
 8014e22:	bf38      	it	cc
 8014e24:	250c      	movcc	r5, #12
 8014e26:	2d00      	cmp	r5, #0
 8014e28:	4607      	mov	r7, r0
 8014e2a:	db01      	blt.n	8014e30 <_malloc_r+0x1c>
 8014e2c:	42a9      	cmp	r1, r5
 8014e2e:	d905      	bls.n	8014e3c <_malloc_r+0x28>
 8014e30:	230c      	movs	r3, #12
 8014e32:	603b      	str	r3, [r7, #0]
 8014e34:	2600      	movs	r6, #0
 8014e36:	4630      	mov	r0, r6
 8014e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e3c:	4e2e      	ldr	r6, [pc, #184]	; (8014ef8 <_malloc_r+0xe4>)
 8014e3e:	f000 fbdb 	bl	80155f8 <__malloc_lock>
 8014e42:	6833      	ldr	r3, [r6, #0]
 8014e44:	461c      	mov	r4, r3
 8014e46:	bb34      	cbnz	r4, 8014e96 <_malloc_r+0x82>
 8014e48:	4629      	mov	r1, r5
 8014e4a:	4638      	mov	r0, r7
 8014e4c:	f7ff ffc2 	bl	8014dd4 <sbrk_aligned>
 8014e50:	1c43      	adds	r3, r0, #1
 8014e52:	4604      	mov	r4, r0
 8014e54:	d14d      	bne.n	8014ef2 <_malloc_r+0xde>
 8014e56:	6834      	ldr	r4, [r6, #0]
 8014e58:	4626      	mov	r6, r4
 8014e5a:	2e00      	cmp	r6, #0
 8014e5c:	d140      	bne.n	8014ee0 <_malloc_r+0xcc>
 8014e5e:	6823      	ldr	r3, [r4, #0]
 8014e60:	4631      	mov	r1, r6
 8014e62:	4638      	mov	r0, r7
 8014e64:	eb04 0803 	add.w	r8, r4, r3
 8014e68:	f000 f8d6 	bl	8015018 <_sbrk_r>
 8014e6c:	4580      	cmp	r8, r0
 8014e6e:	d13a      	bne.n	8014ee6 <_malloc_r+0xd2>
 8014e70:	6821      	ldr	r1, [r4, #0]
 8014e72:	3503      	adds	r5, #3
 8014e74:	1a6d      	subs	r5, r5, r1
 8014e76:	f025 0503 	bic.w	r5, r5, #3
 8014e7a:	3508      	adds	r5, #8
 8014e7c:	2d0c      	cmp	r5, #12
 8014e7e:	bf38      	it	cc
 8014e80:	250c      	movcc	r5, #12
 8014e82:	4629      	mov	r1, r5
 8014e84:	4638      	mov	r0, r7
 8014e86:	f7ff ffa5 	bl	8014dd4 <sbrk_aligned>
 8014e8a:	3001      	adds	r0, #1
 8014e8c:	d02b      	beq.n	8014ee6 <_malloc_r+0xd2>
 8014e8e:	6823      	ldr	r3, [r4, #0]
 8014e90:	442b      	add	r3, r5
 8014e92:	6023      	str	r3, [r4, #0]
 8014e94:	e00e      	b.n	8014eb4 <_malloc_r+0xa0>
 8014e96:	6822      	ldr	r2, [r4, #0]
 8014e98:	1b52      	subs	r2, r2, r5
 8014e9a:	d41e      	bmi.n	8014eda <_malloc_r+0xc6>
 8014e9c:	2a0b      	cmp	r2, #11
 8014e9e:	d916      	bls.n	8014ece <_malloc_r+0xba>
 8014ea0:	1961      	adds	r1, r4, r5
 8014ea2:	42a3      	cmp	r3, r4
 8014ea4:	6025      	str	r5, [r4, #0]
 8014ea6:	bf18      	it	ne
 8014ea8:	6059      	strne	r1, [r3, #4]
 8014eaa:	6863      	ldr	r3, [r4, #4]
 8014eac:	bf08      	it	eq
 8014eae:	6031      	streq	r1, [r6, #0]
 8014eb0:	5162      	str	r2, [r4, r5]
 8014eb2:	604b      	str	r3, [r1, #4]
 8014eb4:	4638      	mov	r0, r7
 8014eb6:	f104 060b 	add.w	r6, r4, #11
 8014eba:	f000 fba3 	bl	8015604 <__malloc_unlock>
 8014ebe:	f026 0607 	bic.w	r6, r6, #7
 8014ec2:	1d23      	adds	r3, r4, #4
 8014ec4:	1af2      	subs	r2, r6, r3
 8014ec6:	d0b6      	beq.n	8014e36 <_malloc_r+0x22>
 8014ec8:	1b9b      	subs	r3, r3, r6
 8014eca:	50a3      	str	r3, [r4, r2]
 8014ecc:	e7b3      	b.n	8014e36 <_malloc_r+0x22>
 8014ece:	6862      	ldr	r2, [r4, #4]
 8014ed0:	42a3      	cmp	r3, r4
 8014ed2:	bf0c      	ite	eq
 8014ed4:	6032      	streq	r2, [r6, #0]
 8014ed6:	605a      	strne	r2, [r3, #4]
 8014ed8:	e7ec      	b.n	8014eb4 <_malloc_r+0xa0>
 8014eda:	4623      	mov	r3, r4
 8014edc:	6864      	ldr	r4, [r4, #4]
 8014ede:	e7b2      	b.n	8014e46 <_malloc_r+0x32>
 8014ee0:	4634      	mov	r4, r6
 8014ee2:	6876      	ldr	r6, [r6, #4]
 8014ee4:	e7b9      	b.n	8014e5a <_malloc_r+0x46>
 8014ee6:	230c      	movs	r3, #12
 8014ee8:	603b      	str	r3, [r7, #0]
 8014eea:	4638      	mov	r0, r7
 8014eec:	f000 fb8a 	bl	8015604 <__malloc_unlock>
 8014ef0:	e7a1      	b.n	8014e36 <_malloc_r+0x22>
 8014ef2:	6025      	str	r5, [r4, #0]
 8014ef4:	e7de      	b.n	8014eb4 <_malloc_r+0xa0>
 8014ef6:	bf00      	nop
 8014ef8:	2400558c 	.word	0x2400558c

08014efc <iprintf>:
 8014efc:	b40f      	push	{r0, r1, r2, r3}
 8014efe:	4b0a      	ldr	r3, [pc, #40]	; (8014f28 <iprintf+0x2c>)
 8014f00:	b513      	push	{r0, r1, r4, lr}
 8014f02:	681c      	ldr	r4, [r3, #0]
 8014f04:	b124      	cbz	r4, 8014f10 <iprintf+0x14>
 8014f06:	69a3      	ldr	r3, [r4, #24]
 8014f08:	b913      	cbnz	r3, 8014f10 <iprintf+0x14>
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	f000 fa6e 	bl	80153ec <__sinit>
 8014f10:	ab05      	add	r3, sp, #20
 8014f12:	9a04      	ldr	r2, [sp, #16]
 8014f14:	68a1      	ldr	r1, [r4, #8]
 8014f16:	9301      	str	r3, [sp, #4]
 8014f18:	4620      	mov	r0, r4
 8014f1a:	f000 fba3 	bl	8015664 <_vfiprintf_r>
 8014f1e:	b002      	add	sp, #8
 8014f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f24:	b004      	add	sp, #16
 8014f26:	4770      	bx	lr
 8014f28:	2400009c 	.word	0x2400009c

08014f2c <_puts_r>:
 8014f2c:	b570      	push	{r4, r5, r6, lr}
 8014f2e:	460e      	mov	r6, r1
 8014f30:	4605      	mov	r5, r0
 8014f32:	b118      	cbz	r0, 8014f3c <_puts_r+0x10>
 8014f34:	6983      	ldr	r3, [r0, #24]
 8014f36:	b90b      	cbnz	r3, 8014f3c <_puts_r+0x10>
 8014f38:	f000 fa58 	bl	80153ec <__sinit>
 8014f3c:	69ab      	ldr	r3, [r5, #24]
 8014f3e:	68ac      	ldr	r4, [r5, #8]
 8014f40:	b913      	cbnz	r3, 8014f48 <_puts_r+0x1c>
 8014f42:	4628      	mov	r0, r5
 8014f44:	f000 fa52 	bl	80153ec <__sinit>
 8014f48:	4b2c      	ldr	r3, [pc, #176]	; (8014ffc <_puts_r+0xd0>)
 8014f4a:	429c      	cmp	r4, r3
 8014f4c:	d120      	bne.n	8014f90 <_puts_r+0x64>
 8014f4e:	686c      	ldr	r4, [r5, #4]
 8014f50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014f52:	07db      	lsls	r3, r3, #31
 8014f54:	d405      	bmi.n	8014f62 <_puts_r+0x36>
 8014f56:	89a3      	ldrh	r3, [r4, #12]
 8014f58:	0598      	lsls	r0, r3, #22
 8014f5a:	d402      	bmi.n	8014f62 <_puts_r+0x36>
 8014f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f5e:	f000 fae3 	bl	8015528 <__retarget_lock_acquire_recursive>
 8014f62:	89a3      	ldrh	r3, [r4, #12]
 8014f64:	0719      	lsls	r1, r3, #28
 8014f66:	d51d      	bpl.n	8014fa4 <_puts_r+0x78>
 8014f68:	6923      	ldr	r3, [r4, #16]
 8014f6a:	b1db      	cbz	r3, 8014fa4 <_puts_r+0x78>
 8014f6c:	3e01      	subs	r6, #1
 8014f6e:	68a3      	ldr	r3, [r4, #8]
 8014f70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014f74:	3b01      	subs	r3, #1
 8014f76:	60a3      	str	r3, [r4, #8]
 8014f78:	bb39      	cbnz	r1, 8014fca <_puts_r+0x9e>
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	da38      	bge.n	8014ff0 <_puts_r+0xc4>
 8014f7e:	4622      	mov	r2, r4
 8014f80:	210a      	movs	r1, #10
 8014f82:	4628      	mov	r0, r5
 8014f84:	f000 f858 	bl	8015038 <__swbuf_r>
 8014f88:	3001      	adds	r0, #1
 8014f8a:	d011      	beq.n	8014fb0 <_puts_r+0x84>
 8014f8c:	250a      	movs	r5, #10
 8014f8e:	e011      	b.n	8014fb4 <_puts_r+0x88>
 8014f90:	4b1b      	ldr	r3, [pc, #108]	; (8015000 <_puts_r+0xd4>)
 8014f92:	429c      	cmp	r4, r3
 8014f94:	d101      	bne.n	8014f9a <_puts_r+0x6e>
 8014f96:	68ac      	ldr	r4, [r5, #8]
 8014f98:	e7da      	b.n	8014f50 <_puts_r+0x24>
 8014f9a:	4b1a      	ldr	r3, [pc, #104]	; (8015004 <_puts_r+0xd8>)
 8014f9c:	429c      	cmp	r4, r3
 8014f9e:	bf08      	it	eq
 8014fa0:	68ec      	ldreq	r4, [r5, #12]
 8014fa2:	e7d5      	b.n	8014f50 <_puts_r+0x24>
 8014fa4:	4621      	mov	r1, r4
 8014fa6:	4628      	mov	r0, r5
 8014fa8:	f000 f898 	bl	80150dc <__swsetup_r>
 8014fac:	2800      	cmp	r0, #0
 8014fae:	d0dd      	beq.n	8014f6c <_puts_r+0x40>
 8014fb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014fb6:	07da      	lsls	r2, r3, #31
 8014fb8:	d405      	bmi.n	8014fc6 <_puts_r+0x9a>
 8014fba:	89a3      	ldrh	r3, [r4, #12]
 8014fbc:	059b      	lsls	r3, r3, #22
 8014fbe:	d402      	bmi.n	8014fc6 <_puts_r+0x9a>
 8014fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fc2:	f000 fab2 	bl	801552a <__retarget_lock_release_recursive>
 8014fc6:	4628      	mov	r0, r5
 8014fc8:	bd70      	pop	{r4, r5, r6, pc}
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	da04      	bge.n	8014fd8 <_puts_r+0xac>
 8014fce:	69a2      	ldr	r2, [r4, #24]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	dc06      	bgt.n	8014fe2 <_puts_r+0xb6>
 8014fd4:	290a      	cmp	r1, #10
 8014fd6:	d004      	beq.n	8014fe2 <_puts_r+0xb6>
 8014fd8:	6823      	ldr	r3, [r4, #0]
 8014fda:	1c5a      	adds	r2, r3, #1
 8014fdc:	6022      	str	r2, [r4, #0]
 8014fde:	7019      	strb	r1, [r3, #0]
 8014fe0:	e7c5      	b.n	8014f6e <_puts_r+0x42>
 8014fe2:	4622      	mov	r2, r4
 8014fe4:	4628      	mov	r0, r5
 8014fe6:	f000 f827 	bl	8015038 <__swbuf_r>
 8014fea:	3001      	adds	r0, #1
 8014fec:	d1bf      	bne.n	8014f6e <_puts_r+0x42>
 8014fee:	e7df      	b.n	8014fb0 <_puts_r+0x84>
 8014ff0:	6823      	ldr	r3, [r4, #0]
 8014ff2:	250a      	movs	r5, #10
 8014ff4:	1c5a      	adds	r2, r3, #1
 8014ff6:	6022      	str	r2, [r4, #0]
 8014ff8:	701d      	strb	r5, [r3, #0]
 8014ffa:	e7db      	b.n	8014fb4 <_puts_r+0x88>
 8014ffc:	08016148 	.word	0x08016148
 8015000:	08016168 	.word	0x08016168
 8015004:	08016128 	.word	0x08016128

08015008 <puts>:
 8015008:	4b02      	ldr	r3, [pc, #8]	; (8015014 <puts+0xc>)
 801500a:	4601      	mov	r1, r0
 801500c:	6818      	ldr	r0, [r3, #0]
 801500e:	f7ff bf8d 	b.w	8014f2c <_puts_r>
 8015012:	bf00      	nop
 8015014:	2400009c 	.word	0x2400009c

08015018 <_sbrk_r>:
 8015018:	b538      	push	{r3, r4, r5, lr}
 801501a:	4d06      	ldr	r5, [pc, #24]	; (8015034 <_sbrk_r+0x1c>)
 801501c:	2300      	movs	r3, #0
 801501e:	4604      	mov	r4, r0
 8015020:	4608      	mov	r0, r1
 8015022:	602b      	str	r3, [r5, #0]
 8015024:	f7ee fa12 	bl	800344c <_sbrk>
 8015028:	1c43      	adds	r3, r0, #1
 801502a:	d102      	bne.n	8015032 <_sbrk_r+0x1a>
 801502c:	682b      	ldr	r3, [r5, #0]
 801502e:	b103      	cbz	r3, 8015032 <_sbrk_r+0x1a>
 8015030:	6023      	str	r3, [r4, #0]
 8015032:	bd38      	pop	{r3, r4, r5, pc}
 8015034:	24005598 	.word	0x24005598

08015038 <__swbuf_r>:
 8015038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801503a:	460e      	mov	r6, r1
 801503c:	4614      	mov	r4, r2
 801503e:	4605      	mov	r5, r0
 8015040:	b118      	cbz	r0, 801504a <__swbuf_r+0x12>
 8015042:	6983      	ldr	r3, [r0, #24]
 8015044:	b90b      	cbnz	r3, 801504a <__swbuf_r+0x12>
 8015046:	f000 f9d1 	bl	80153ec <__sinit>
 801504a:	4b21      	ldr	r3, [pc, #132]	; (80150d0 <__swbuf_r+0x98>)
 801504c:	429c      	cmp	r4, r3
 801504e:	d12b      	bne.n	80150a8 <__swbuf_r+0x70>
 8015050:	686c      	ldr	r4, [r5, #4]
 8015052:	69a3      	ldr	r3, [r4, #24]
 8015054:	60a3      	str	r3, [r4, #8]
 8015056:	89a3      	ldrh	r3, [r4, #12]
 8015058:	071a      	lsls	r2, r3, #28
 801505a:	d52f      	bpl.n	80150bc <__swbuf_r+0x84>
 801505c:	6923      	ldr	r3, [r4, #16]
 801505e:	b36b      	cbz	r3, 80150bc <__swbuf_r+0x84>
 8015060:	6923      	ldr	r3, [r4, #16]
 8015062:	6820      	ldr	r0, [r4, #0]
 8015064:	1ac0      	subs	r0, r0, r3
 8015066:	6963      	ldr	r3, [r4, #20]
 8015068:	b2f6      	uxtb	r6, r6
 801506a:	4283      	cmp	r3, r0
 801506c:	4637      	mov	r7, r6
 801506e:	dc04      	bgt.n	801507a <__swbuf_r+0x42>
 8015070:	4621      	mov	r1, r4
 8015072:	4628      	mov	r0, r5
 8015074:	f000 f926 	bl	80152c4 <_fflush_r>
 8015078:	bb30      	cbnz	r0, 80150c8 <__swbuf_r+0x90>
 801507a:	68a3      	ldr	r3, [r4, #8]
 801507c:	3b01      	subs	r3, #1
 801507e:	60a3      	str	r3, [r4, #8]
 8015080:	6823      	ldr	r3, [r4, #0]
 8015082:	1c5a      	adds	r2, r3, #1
 8015084:	6022      	str	r2, [r4, #0]
 8015086:	701e      	strb	r6, [r3, #0]
 8015088:	6963      	ldr	r3, [r4, #20]
 801508a:	3001      	adds	r0, #1
 801508c:	4283      	cmp	r3, r0
 801508e:	d004      	beq.n	801509a <__swbuf_r+0x62>
 8015090:	89a3      	ldrh	r3, [r4, #12]
 8015092:	07db      	lsls	r3, r3, #31
 8015094:	d506      	bpl.n	80150a4 <__swbuf_r+0x6c>
 8015096:	2e0a      	cmp	r6, #10
 8015098:	d104      	bne.n	80150a4 <__swbuf_r+0x6c>
 801509a:	4621      	mov	r1, r4
 801509c:	4628      	mov	r0, r5
 801509e:	f000 f911 	bl	80152c4 <_fflush_r>
 80150a2:	b988      	cbnz	r0, 80150c8 <__swbuf_r+0x90>
 80150a4:	4638      	mov	r0, r7
 80150a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150a8:	4b0a      	ldr	r3, [pc, #40]	; (80150d4 <__swbuf_r+0x9c>)
 80150aa:	429c      	cmp	r4, r3
 80150ac:	d101      	bne.n	80150b2 <__swbuf_r+0x7a>
 80150ae:	68ac      	ldr	r4, [r5, #8]
 80150b0:	e7cf      	b.n	8015052 <__swbuf_r+0x1a>
 80150b2:	4b09      	ldr	r3, [pc, #36]	; (80150d8 <__swbuf_r+0xa0>)
 80150b4:	429c      	cmp	r4, r3
 80150b6:	bf08      	it	eq
 80150b8:	68ec      	ldreq	r4, [r5, #12]
 80150ba:	e7ca      	b.n	8015052 <__swbuf_r+0x1a>
 80150bc:	4621      	mov	r1, r4
 80150be:	4628      	mov	r0, r5
 80150c0:	f000 f80c 	bl	80150dc <__swsetup_r>
 80150c4:	2800      	cmp	r0, #0
 80150c6:	d0cb      	beq.n	8015060 <__swbuf_r+0x28>
 80150c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80150cc:	e7ea      	b.n	80150a4 <__swbuf_r+0x6c>
 80150ce:	bf00      	nop
 80150d0:	08016148 	.word	0x08016148
 80150d4:	08016168 	.word	0x08016168
 80150d8:	08016128 	.word	0x08016128

080150dc <__swsetup_r>:
 80150dc:	4b32      	ldr	r3, [pc, #200]	; (80151a8 <__swsetup_r+0xcc>)
 80150de:	b570      	push	{r4, r5, r6, lr}
 80150e0:	681d      	ldr	r5, [r3, #0]
 80150e2:	4606      	mov	r6, r0
 80150e4:	460c      	mov	r4, r1
 80150e6:	b125      	cbz	r5, 80150f2 <__swsetup_r+0x16>
 80150e8:	69ab      	ldr	r3, [r5, #24]
 80150ea:	b913      	cbnz	r3, 80150f2 <__swsetup_r+0x16>
 80150ec:	4628      	mov	r0, r5
 80150ee:	f000 f97d 	bl	80153ec <__sinit>
 80150f2:	4b2e      	ldr	r3, [pc, #184]	; (80151ac <__swsetup_r+0xd0>)
 80150f4:	429c      	cmp	r4, r3
 80150f6:	d10f      	bne.n	8015118 <__swsetup_r+0x3c>
 80150f8:	686c      	ldr	r4, [r5, #4]
 80150fa:	89a3      	ldrh	r3, [r4, #12]
 80150fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015100:	0719      	lsls	r1, r3, #28
 8015102:	d42c      	bmi.n	801515e <__swsetup_r+0x82>
 8015104:	06dd      	lsls	r5, r3, #27
 8015106:	d411      	bmi.n	801512c <__swsetup_r+0x50>
 8015108:	2309      	movs	r3, #9
 801510a:	6033      	str	r3, [r6, #0]
 801510c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015110:	81a3      	strh	r3, [r4, #12]
 8015112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015116:	e03e      	b.n	8015196 <__swsetup_r+0xba>
 8015118:	4b25      	ldr	r3, [pc, #148]	; (80151b0 <__swsetup_r+0xd4>)
 801511a:	429c      	cmp	r4, r3
 801511c:	d101      	bne.n	8015122 <__swsetup_r+0x46>
 801511e:	68ac      	ldr	r4, [r5, #8]
 8015120:	e7eb      	b.n	80150fa <__swsetup_r+0x1e>
 8015122:	4b24      	ldr	r3, [pc, #144]	; (80151b4 <__swsetup_r+0xd8>)
 8015124:	429c      	cmp	r4, r3
 8015126:	bf08      	it	eq
 8015128:	68ec      	ldreq	r4, [r5, #12]
 801512a:	e7e6      	b.n	80150fa <__swsetup_r+0x1e>
 801512c:	0758      	lsls	r0, r3, #29
 801512e:	d512      	bpl.n	8015156 <__swsetup_r+0x7a>
 8015130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015132:	b141      	cbz	r1, 8015146 <__swsetup_r+0x6a>
 8015134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015138:	4299      	cmp	r1, r3
 801513a:	d002      	beq.n	8015142 <__swsetup_r+0x66>
 801513c:	4630      	mov	r0, r6
 801513e:	f7ff fdfd 	bl	8014d3c <_free_r>
 8015142:	2300      	movs	r3, #0
 8015144:	6363      	str	r3, [r4, #52]	; 0x34
 8015146:	89a3      	ldrh	r3, [r4, #12]
 8015148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801514c:	81a3      	strh	r3, [r4, #12]
 801514e:	2300      	movs	r3, #0
 8015150:	6063      	str	r3, [r4, #4]
 8015152:	6923      	ldr	r3, [r4, #16]
 8015154:	6023      	str	r3, [r4, #0]
 8015156:	89a3      	ldrh	r3, [r4, #12]
 8015158:	f043 0308 	orr.w	r3, r3, #8
 801515c:	81a3      	strh	r3, [r4, #12]
 801515e:	6923      	ldr	r3, [r4, #16]
 8015160:	b94b      	cbnz	r3, 8015176 <__swsetup_r+0x9a>
 8015162:	89a3      	ldrh	r3, [r4, #12]
 8015164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801516c:	d003      	beq.n	8015176 <__swsetup_r+0x9a>
 801516e:	4621      	mov	r1, r4
 8015170:	4630      	mov	r0, r6
 8015172:	f000 fa01 	bl	8015578 <__smakebuf_r>
 8015176:	89a0      	ldrh	r0, [r4, #12]
 8015178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801517c:	f010 0301 	ands.w	r3, r0, #1
 8015180:	d00a      	beq.n	8015198 <__swsetup_r+0xbc>
 8015182:	2300      	movs	r3, #0
 8015184:	60a3      	str	r3, [r4, #8]
 8015186:	6963      	ldr	r3, [r4, #20]
 8015188:	425b      	negs	r3, r3
 801518a:	61a3      	str	r3, [r4, #24]
 801518c:	6923      	ldr	r3, [r4, #16]
 801518e:	b943      	cbnz	r3, 80151a2 <__swsetup_r+0xc6>
 8015190:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015194:	d1ba      	bne.n	801510c <__swsetup_r+0x30>
 8015196:	bd70      	pop	{r4, r5, r6, pc}
 8015198:	0781      	lsls	r1, r0, #30
 801519a:	bf58      	it	pl
 801519c:	6963      	ldrpl	r3, [r4, #20]
 801519e:	60a3      	str	r3, [r4, #8]
 80151a0:	e7f4      	b.n	801518c <__swsetup_r+0xb0>
 80151a2:	2000      	movs	r0, #0
 80151a4:	e7f7      	b.n	8015196 <__swsetup_r+0xba>
 80151a6:	bf00      	nop
 80151a8:	2400009c 	.word	0x2400009c
 80151ac:	08016148 	.word	0x08016148
 80151b0:	08016168 	.word	0x08016168
 80151b4:	08016128 	.word	0x08016128

080151b8 <__sflush_r>:
 80151b8:	898a      	ldrh	r2, [r1, #12]
 80151ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151be:	4605      	mov	r5, r0
 80151c0:	0710      	lsls	r0, r2, #28
 80151c2:	460c      	mov	r4, r1
 80151c4:	d458      	bmi.n	8015278 <__sflush_r+0xc0>
 80151c6:	684b      	ldr	r3, [r1, #4]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	dc05      	bgt.n	80151d8 <__sflush_r+0x20>
 80151cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	dc02      	bgt.n	80151d8 <__sflush_r+0x20>
 80151d2:	2000      	movs	r0, #0
 80151d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151da:	2e00      	cmp	r6, #0
 80151dc:	d0f9      	beq.n	80151d2 <__sflush_r+0x1a>
 80151de:	2300      	movs	r3, #0
 80151e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80151e4:	682f      	ldr	r7, [r5, #0]
 80151e6:	602b      	str	r3, [r5, #0]
 80151e8:	d032      	beq.n	8015250 <__sflush_r+0x98>
 80151ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80151ec:	89a3      	ldrh	r3, [r4, #12]
 80151ee:	075a      	lsls	r2, r3, #29
 80151f0:	d505      	bpl.n	80151fe <__sflush_r+0x46>
 80151f2:	6863      	ldr	r3, [r4, #4]
 80151f4:	1ac0      	subs	r0, r0, r3
 80151f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80151f8:	b10b      	cbz	r3, 80151fe <__sflush_r+0x46>
 80151fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80151fc:	1ac0      	subs	r0, r0, r3
 80151fe:	2300      	movs	r3, #0
 8015200:	4602      	mov	r2, r0
 8015202:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015204:	6a21      	ldr	r1, [r4, #32]
 8015206:	4628      	mov	r0, r5
 8015208:	47b0      	blx	r6
 801520a:	1c43      	adds	r3, r0, #1
 801520c:	89a3      	ldrh	r3, [r4, #12]
 801520e:	d106      	bne.n	801521e <__sflush_r+0x66>
 8015210:	6829      	ldr	r1, [r5, #0]
 8015212:	291d      	cmp	r1, #29
 8015214:	d82c      	bhi.n	8015270 <__sflush_r+0xb8>
 8015216:	4a2a      	ldr	r2, [pc, #168]	; (80152c0 <__sflush_r+0x108>)
 8015218:	40ca      	lsrs	r2, r1
 801521a:	07d6      	lsls	r6, r2, #31
 801521c:	d528      	bpl.n	8015270 <__sflush_r+0xb8>
 801521e:	2200      	movs	r2, #0
 8015220:	6062      	str	r2, [r4, #4]
 8015222:	04d9      	lsls	r1, r3, #19
 8015224:	6922      	ldr	r2, [r4, #16]
 8015226:	6022      	str	r2, [r4, #0]
 8015228:	d504      	bpl.n	8015234 <__sflush_r+0x7c>
 801522a:	1c42      	adds	r2, r0, #1
 801522c:	d101      	bne.n	8015232 <__sflush_r+0x7a>
 801522e:	682b      	ldr	r3, [r5, #0]
 8015230:	b903      	cbnz	r3, 8015234 <__sflush_r+0x7c>
 8015232:	6560      	str	r0, [r4, #84]	; 0x54
 8015234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015236:	602f      	str	r7, [r5, #0]
 8015238:	2900      	cmp	r1, #0
 801523a:	d0ca      	beq.n	80151d2 <__sflush_r+0x1a>
 801523c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015240:	4299      	cmp	r1, r3
 8015242:	d002      	beq.n	801524a <__sflush_r+0x92>
 8015244:	4628      	mov	r0, r5
 8015246:	f7ff fd79 	bl	8014d3c <_free_r>
 801524a:	2000      	movs	r0, #0
 801524c:	6360      	str	r0, [r4, #52]	; 0x34
 801524e:	e7c1      	b.n	80151d4 <__sflush_r+0x1c>
 8015250:	6a21      	ldr	r1, [r4, #32]
 8015252:	2301      	movs	r3, #1
 8015254:	4628      	mov	r0, r5
 8015256:	47b0      	blx	r6
 8015258:	1c41      	adds	r1, r0, #1
 801525a:	d1c7      	bne.n	80151ec <__sflush_r+0x34>
 801525c:	682b      	ldr	r3, [r5, #0]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d0c4      	beq.n	80151ec <__sflush_r+0x34>
 8015262:	2b1d      	cmp	r3, #29
 8015264:	d001      	beq.n	801526a <__sflush_r+0xb2>
 8015266:	2b16      	cmp	r3, #22
 8015268:	d101      	bne.n	801526e <__sflush_r+0xb6>
 801526a:	602f      	str	r7, [r5, #0]
 801526c:	e7b1      	b.n	80151d2 <__sflush_r+0x1a>
 801526e:	89a3      	ldrh	r3, [r4, #12]
 8015270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015274:	81a3      	strh	r3, [r4, #12]
 8015276:	e7ad      	b.n	80151d4 <__sflush_r+0x1c>
 8015278:	690f      	ldr	r7, [r1, #16]
 801527a:	2f00      	cmp	r7, #0
 801527c:	d0a9      	beq.n	80151d2 <__sflush_r+0x1a>
 801527e:	0793      	lsls	r3, r2, #30
 8015280:	680e      	ldr	r6, [r1, #0]
 8015282:	bf08      	it	eq
 8015284:	694b      	ldreq	r3, [r1, #20]
 8015286:	600f      	str	r7, [r1, #0]
 8015288:	bf18      	it	ne
 801528a:	2300      	movne	r3, #0
 801528c:	eba6 0807 	sub.w	r8, r6, r7
 8015290:	608b      	str	r3, [r1, #8]
 8015292:	f1b8 0f00 	cmp.w	r8, #0
 8015296:	dd9c      	ble.n	80151d2 <__sflush_r+0x1a>
 8015298:	6a21      	ldr	r1, [r4, #32]
 801529a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801529c:	4643      	mov	r3, r8
 801529e:	463a      	mov	r2, r7
 80152a0:	4628      	mov	r0, r5
 80152a2:	47b0      	blx	r6
 80152a4:	2800      	cmp	r0, #0
 80152a6:	dc06      	bgt.n	80152b6 <__sflush_r+0xfe>
 80152a8:	89a3      	ldrh	r3, [r4, #12]
 80152aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152ae:	81a3      	strh	r3, [r4, #12]
 80152b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80152b4:	e78e      	b.n	80151d4 <__sflush_r+0x1c>
 80152b6:	4407      	add	r7, r0
 80152b8:	eba8 0800 	sub.w	r8, r8, r0
 80152bc:	e7e9      	b.n	8015292 <__sflush_r+0xda>
 80152be:	bf00      	nop
 80152c0:	20400001 	.word	0x20400001

080152c4 <_fflush_r>:
 80152c4:	b538      	push	{r3, r4, r5, lr}
 80152c6:	690b      	ldr	r3, [r1, #16]
 80152c8:	4605      	mov	r5, r0
 80152ca:	460c      	mov	r4, r1
 80152cc:	b913      	cbnz	r3, 80152d4 <_fflush_r+0x10>
 80152ce:	2500      	movs	r5, #0
 80152d0:	4628      	mov	r0, r5
 80152d2:	bd38      	pop	{r3, r4, r5, pc}
 80152d4:	b118      	cbz	r0, 80152de <_fflush_r+0x1a>
 80152d6:	6983      	ldr	r3, [r0, #24]
 80152d8:	b90b      	cbnz	r3, 80152de <_fflush_r+0x1a>
 80152da:	f000 f887 	bl	80153ec <__sinit>
 80152de:	4b14      	ldr	r3, [pc, #80]	; (8015330 <_fflush_r+0x6c>)
 80152e0:	429c      	cmp	r4, r3
 80152e2:	d11b      	bne.n	801531c <_fflush_r+0x58>
 80152e4:	686c      	ldr	r4, [r5, #4]
 80152e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d0ef      	beq.n	80152ce <_fflush_r+0xa>
 80152ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80152f0:	07d0      	lsls	r0, r2, #31
 80152f2:	d404      	bmi.n	80152fe <_fflush_r+0x3a>
 80152f4:	0599      	lsls	r1, r3, #22
 80152f6:	d402      	bmi.n	80152fe <_fflush_r+0x3a>
 80152f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152fa:	f000 f915 	bl	8015528 <__retarget_lock_acquire_recursive>
 80152fe:	4628      	mov	r0, r5
 8015300:	4621      	mov	r1, r4
 8015302:	f7ff ff59 	bl	80151b8 <__sflush_r>
 8015306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015308:	07da      	lsls	r2, r3, #31
 801530a:	4605      	mov	r5, r0
 801530c:	d4e0      	bmi.n	80152d0 <_fflush_r+0xc>
 801530e:	89a3      	ldrh	r3, [r4, #12]
 8015310:	059b      	lsls	r3, r3, #22
 8015312:	d4dd      	bmi.n	80152d0 <_fflush_r+0xc>
 8015314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015316:	f000 f908 	bl	801552a <__retarget_lock_release_recursive>
 801531a:	e7d9      	b.n	80152d0 <_fflush_r+0xc>
 801531c:	4b05      	ldr	r3, [pc, #20]	; (8015334 <_fflush_r+0x70>)
 801531e:	429c      	cmp	r4, r3
 8015320:	d101      	bne.n	8015326 <_fflush_r+0x62>
 8015322:	68ac      	ldr	r4, [r5, #8]
 8015324:	e7df      	b.n	80152e6 <_fflush_r+0x22>
 8015326:	4b04      	ldr	r3, [pc, #16]	; (8015338 <_fflush_r+0x74>)
 8015328:	429c      	cmp	r4, r3
 801532a:	bf08      	it	eq
 801532c:	68ec      	ldreq	r4, [r5, #12]
 801532e:	e7da      	b.n	80152e6 <_fflush_r+0x22>
 8015330:	08016148 	.word	0x08016148
 8015334:	08016168 	.word	0x08016168
 8015338:	08016128 	.word	0x08016128

0801533c <std>:
 801533c:	2300      	movs	r3, #0
 801533e:	b510      	push	{r4, lr}
 8015340:	4604      	mov	r4, r0
 8015342:	e9c0 3300 	strd	r3, r3, [r0]
 8015346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801534a:	6083      	str	r3, [r0, #8]
 801534c:	8181      	strh	r1, [r0, #12]
 801534e:	6643      	str	r3, [r0, #100]	; 0x64
 8015350:	81c2      	strh	r2, [r0, #14]
 8015352:	6183      	str	r3, [r0, #24]
 8015354:	4619      	mov	r1, r3
 8015356:	2208      	movs	r2, #8
 8015358:	305c      	adds	r0, #92	; 0x5c
 801535a:	f7ff fce7 	bl	8014d2c <memset>
 801535e:	4b05      	ldr	r3, [pc, #20]	; (8015374 <std+0x38>)
 8015360:	6263      	str	r3, [r4, #36]	; 0x24
 8015362:	4b05      	ldr	r3, [pc, #20]	; (8015378 <std+0x3c>)
 8015364:	62a3      	str	r3, [r4, #40]	; 0x28
 8015366:	4b05      	ldr	r3, [pc, #20]	; (801537c <std+0x40>)
 8015368:	62e3      	str	r3, [r4, #44]	; 0x2c
 801536a:	4b05      	ldr	r3, [pc, #20]	; (8015380 <std+0x44>)
 801536c:	6224      	str	r4, [r4, #32]
 801536e:	6323      	str	r3, [r4, #48]	; 0x30
 8015370:	bd10      	pop	{r4, pc}
 8015372:	bf00      	nop
 8015374:	08015bed 	.word	0x08015bed
 8015378:	08015c0f 	.word	0x08015c0f
 801537c:	08015c47 	.word	0x08015c47
 8015380:	08015c6b 	.word	0x08015c6b

08015384 <_cleanup_r>:
 8015384:	4901      	ldr	r1, [pc, #4]	; (801538c <_cleanup_r+0x8>)
 8015386:	f000 b8af 	b.w	80154e8 <_fwalk_reent>
 801538a:	bf00      	nop
 801538c:	080152c5 	.word	0x080152c5

08015390 <__sfmoreglue>:
 8015390:	b570      	push	{r4, r5, r6, lr}
 8015392:	2268      	movs	r2, #104	; 0x68
 8015394:	1e4d      	subs	r5, r1, #1
 8015396:	4355      	muls	r5, r2
 8015398:	460e      	mov	r6, r1
 801539a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801539e:	f7ff fd39 	bl	8014e14 <_malloc_r>
 80153a2:	4604      	mov	r4, r0
 80153a4:	b140      	cbz	r0, 80153b8 <__sfmoreglue+0x28>
 80153a6:	2100      	movs	r1, #0
 80153a8:	e9c0 1600 	strd	r1, r6, [r0]
 80153ac:	300c      	adds	r0, #12
 80153ae:	60a0      	str	r0, [r4, #8]
 80153b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80153b4:	f7ff fcba 	bl	8014d2c <memset>
 80153b8:	4620      	mov	r0, r4
 80153ba:	bd70      	pop	{r4, r5, r6, pc}

080153bc <__sfp_lock_acquire>:
 80153bc:	4801      	ldr	r0, [pc, #4]	; (80153c4 <__sfp_lock_acquire+0x8>)
 80153be:	f000 b8b3 	b.w	8015528 <__retarget_lock_acquire_recursive>
 80153c2:	bf00      	nop
 80153c4:	24005595 	.word	0x24005595

080153c8 <__sfp_lock_release>:
 80153c8:	4801      	ldr	r0, [pc, #4]	; (80153d0 <__sfp_lock_release+0x8>)
 80153ca:	f000 b8ae 	b.w	801552a <__retarget_lock_release_recursive>
 80153ce:	bf00      	nop
 80153d0:	24005595 	.word	0x24005595

080153d4 <__sinit_lock_acquire>:
 80153d4:	4801      	ldr	r0, [pc, #4]	; (80153dc <__sinit_lock_acquire+0x8>)
 80153d6:	f000 b8a7 	b.w	8015528 <__retarget_lock_acquire_recursive>
 80153da:	bf00      	nop
 80153dc:	24005596 	.word	0x24005596

080153e0 <__sinit_lock_release>:
 80153e0:	4801      	ldr	r0, [pc, #4]	; (80153e8 <__sinit_lock_release+0x8>)
 80153e2:	f000 b8a2 	b.w	801552a <__retarget_lock_release_recursive>
 80153e6:	bf00      	nop
 80153e8:	24005596 	.word	0x24005596

080153ec <__sinit>:
 80153ec:	b510      	push	{r4, lr}
 80153ee:	4604      	mov	r4, r0
 80153f0:	f7ff fff0 	bl	80153d4 <__sinit_lock_acquire>
 80153f4:	69a3      	ldr	r3, [r4, #24]
 80153f6:	b11b      	cbz	r3, 8015400 <__sinit+0x14>
 80153f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153fc:	f7ff bff0 	b.w	80153e0 <__sinit_lock_release>
 8015400:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015404:	6523      	str	r3, [r4, #80]	; 0x50
 8015406:	4b13      	ldr	r3, [pc, #76]	; (8015454 <__sinit+0x68>)
 8015408:	4a13      	ldr	r2, [pc, #76]	; (8015458 <__sinit+0x6c>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	62a2      	str	r2, [r4, #40]	; 0x28
 801540e:	42a3      	cmp	r3, r4
 8015410:	bf04      	itt	eq
 8015412:	2301      	moveq	r3, #1
 8015414:	61a3      	streq	r3, [r4, #24]
 8015416:	4620      	mov	r0, r4
 8015418:	f000 f820 	bl	801545c <__sfp>
 801541c:	6060      	str	r0, [r4, #4]
 801541e:	4620      	mov	r0, r4
 8015420:	f000 f81c 	bl	801545c <__sfp>
 8015424:	60a0      	str	r0, [r4, #8]
 8015426:	4620      	mov	r0, r4
 8015428:	f000 f818 	bl	801545c <__sfp>
 801542c:	2200      	movs	r2, #0
 801542e:	60e0      	str	r0, [r4, #12]
 8015430:	2104      	movs	r1, #4
 8015432:	6860      	ldr	r0, [r4, #4]
 8015434:	f7ff ff82 	bl	801533c <std>
 8015438:	68a0      	ldr	r0, [r4, #8]
 801543a:	2201      	movs	r2, #1
 801543c:	2109      	movs	r1, #9
 801543e:	f7ff ff7d 	bl	801533c <std>
 8015442:	68e0      	ldr	r0, [r4, #12]
 8015444:	2202      	movs	r2, #2
 8015446:	2112      	movs	r1, #18
 8015448:	f7ff ff78 	bl	801533c <std>
 801544c:	2301      	movs	r3, #1
 801544e:	61a3      	str	r3, [r4, #24]
 8015450:	e7d2      	b.n	80153f8 <__sinit+0xc>
 8015452:	bf00      	nop
 8015454:	08016124 	.word	0x08016124
 8015458:	08015385 	.word	0x08015385

0801545c <__sfp>:
 801545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801545e:	4607      	mov	r7, r0
 8015460:	f7ff ffac 	bl	80153bc <__sfp_lock_acquire>
 8015464:	4b1e      	ldr	r3, [pc, #120]	; (80154e0 <__sfp+0x84>)
 8015466:	681e      	ldr	r6, [r3, #0]
 8015468:	69b3      	ldr	r3, [r6, #24]
 801546a:	b913      	cbnz	r3, 8015472 <__sfp+0x16>
 801546c:	4630      	mov	r0, r6
 801546e:	f7ff ffbd 	bl	80153ec <__sinit>
 8015472:	3648      	adds	r6, #72	; 0x48
 8015474:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015478:	3b01      	subs	r3, #1
 801547a:	d503      	bpl.n	8015484 <__sfp+0x28>
 801547c:	6833      	ldr	r3, [r6, #0]
 801547e:	b30b      	cbz	r3, 80154c4 <__sfp+0x68>
 8015480:	6836      	ldr	r6, [r6, #0]
 8015482:	e7f7      	b.n	8015474 <__sfp+0x18>
 8015484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015488:	b9d5      	cbnz	r5, 80154c0 <__sfp+0x64>
 801548a:	4b16      	ldr	r3, [pc, #88]	; (80154e4 <__sfp+0x88>)
 801548c:	60e3      	str	r3, [r4, #12]
 801548e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015492:	6665      	str	r5, [r4, #100]	; 0x64
 8015494:	f000 f847 	bl	8015526 <__retarget_lock_init_recursive>
 8015498:	f7ff ff96 	bl	80153c8 <__sfp_lock_release>
 801549c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80154a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80154a4:	6025      	str	r5, [r4, #0]
 80154a6:	61a5      	str	r5, [r4, #24]
 80154a8:	2208      	movs	r2, #8
 80154aa:	4629      	mov	r1, r5
 80154ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80154b0:	f7ff fc3c 	bl	8014d2c <memset>
 80154b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80154b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80154bc:	4620      	mov	r0, r4
 80154be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154c0:	3468      	adds	r4, #104	; 0x68
 80154c2:	e7d9      	b.n	8015478 <__sfp+0x1c>
 80154c4:	2104      	movs	r1, #4
 80154c6:	4638      	mov	r0, r7
 80154c8:	f7ff ff62 	bl	8015390 <__sfmoreglue>
 80154cc:	4604      	mov	r4, r0
 80154ce:	6030      	str	r0, [r6, #0]
 80154d0:	2800      	cmp	r0, #0
 80154d2:	d1d5      	bne.n	8015480 <__sfp+0x24>
 80154d4:	f7ff ff78 	bl	80153c8 <__sfp_lock_release>
 80154d8:	230c      	movs	r3, #12
 80154da:	603b      	str	r3, [r7, #0]
 80154dc:	e7ee      	b.n	80154bc <__sfp+0x60>
 80154de:	bf00      	nop
 80154e0:	08016124 	.word	0x08016124
 80154e4:	ffff0001 	.word	0xffff0001

080154e8 <_fwalk_reent>:
 80154e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154ec:	4606      	mov	r6, r0
 80154ee:	4688      	mov	r8, r1
 80154f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80154f4:	2700      	movs	r7, #0
 80154f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80154fa:	f1b9 0901 	subs.w	r9, r9, #1
 80154fe:	d505      	bpl.n	801550c <_fwalk_reent+0x24>
 8015500:	6824      	ldr	r4, [r4, #0]
 8015502:	2c00      	cmp	r4, #0
 8015504:	d1f7      	bne.n	80154f6 <_fwalk_reent+0xe>
 8015506:	4638      	mov	r0, r7
 8015508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801550c:	89ab      	ldrh	r3, [r5, #12]
 801550e:	2b01      	cmp	r3, #1
 8015510:	d907      	bls.n	8015522 <_fwalk_reent+0x3a>
 8015512:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015516:	3301      	adds	r3, #1
 8015518:	d003      	beq.n	8015522 <_fwalk_reent+0x3a>
 801551a:	4629      	mov	r1, r5
 801551c:	4630      	mov	r0, r6
 801551e:	47c0      	blx	r8
 8015520:	4307      	orrs	r7, r0
 8015522:	3568      	adds	r5, #104	; 0x68
 8015524:	e7e9      	b.n	80154fa <_fwalk_reent+0x12>

08015526 <__retarget_lock_init_recursive>:
 8015526:	4770      	bx	lr

08015528 <__retarget_lock_acquire_recursive>:
 8015528:	4770      	bx	lr

0801552a <__retarget_lock_release_recursive>:
 801552a:	4770      	bx	lr

0801552c <__swhatbuf_r>:
 801552c:	b570      	push	{r4, r5, r6, lr}
 801552e:	460e      	mov	r6, r1
 8015530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015534:	2900      	cmp	r1, #0
 8015536:	b096      	sub	sp, #88	; 0x58
 8015538:	4614      	mov	r4, r2
 801553a:	461d      	mov	r5, r3
 801553c:	da08      	bge.n	8015550 <__swhatbuf_r+0x24>
 801553e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015542:	2200      	movs	r2, #0
 8015544:	602a      	str	r2, [r5, #0]
 8015546:	061a      	lsls	r2, r3, #24
 8015548:	d410      	bmi.n	801556c <__swhatbuf_r+0x40>
 801554a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801554e:	e00e      	b.n	801556e <__swhatbuf_r+0x42>
 8015550:	466a      	mov	r2, sp
 8015552:	f000 fbb1 	bl	8015cb8 <_fstat_r>
 8015556:	2800      	cmp	r0, #0
 8015558:	dbf1      	blt.n	801553e <__swhatbuf_r+0x12>
 801555a:	9a01      	ldr	r2, [sp, #4]
 801555c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015560:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015564:	425a      	negs	r2, r3
 8015566:	415a      	adcs	r2, r3
 8015568:	602a      	str	r2, [r5, #0]
 801556a:	e7ee      	b.n	801554a <__swhatbuf_r+0x1e>
 801556c:	2340      	movs	r3, #64	; 0x40
 801556e:	2000      	movs	r0, #0
 8015570:	6023      	str	r3, [r4, #0]
 8015572:	b016      	add	sp, #88	; 0x58
 8015574:	bd70      	pop	{r4, r5, r6, pc}
	...

08015578 <__smakebuf_r>:
 8015578:	898b      	ldrh	r3, [r1, #12]
 801557a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801557c:	079d      	lsls	r5, r3, #30
 801557e:	4606      	mov	r6, r0
 8015580:	460c      	mov	r4, r1
 8015582:	d507      	bpl.n	8015594 <__smakebuf_r+0x1c>
 8015584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015588:	6023      	str	r3, [r4, #0]
 801558a:	6123      	str	r3, [r4, #16]
 801558c:	2301      	movs	r3, #1
 801558e:	6163      	str	r3, [r4, #20]
 8015590:	b002      	add	sp, #8
 8015592:	bd70      	pop	{r4, r5, r6, pc}
 8015594:	ab01      	add	r3, sp, #4
 8015596:	466a      	mov	r2, sp
 8015598:	f7ff ffc8 	bl	801552c <__swhatbuf_r>
 801559c:	9900      	ldr	r1, [sp, #0]
 801559e:	4605      	mov	r5, r0
 80155a0:	4630      	mov	r0, r6
 80155a2:	f7ff fc37 	bl	8014e14 <_malloc_r>
 80155a6:	b948      	cbnz	r0, 80155bc <__smakebuf_r+0x44>
 80155a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155ac:	059a      	lsls	r2, r3, #22
 80155ae:	d4ef      	bmi.n	8015590 <__smakebuf_r+0x18>
 80155b0:	f023 0303 	bic.w	r3, r3, #3
 80155b4:	f043 0302 	orr.w	r3, r3, #2
 80155b8:	81a3      	strh	r3, [r4, #12]
 80155ba:	e7e3      	b.n	8015584 <__smakebuf_r+0xc>
 80155bc:	4b0d      	ldr	r3, [pc, #52]	; (80155f4 <__smakebuf_r+0x7c>)
 80155be:	62b3      	str	r3, [r6, #40]	; 0x28
 80155c0:	89a3      	ldrh	r3, [r4, #12]
 80155c2:	6020      	str	r0, [r4, #0]
 80155c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155c8:	81a3      	strh	r3, [r4, #12]
 80155ca:	9b00      	ldr	r3, [sp, #0]
 80155cc:	6163      	str	r3, [r4, #20]
 80155ce:	9b01      	ldr	r3, [sp, #4]
 80155d0:	6120      	str	r0, [r4, #16]
 80155d2:	b15b      	cbz	r3, 80155ec <__smakebuf_r+0x74>
 80155d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155d8:	4630      	mov	r0, r6
 80155da:	f000 fb7f 	bl	8015cdc <_isatty_r>
 80155de:	b128      	cbz	r0, 80155ec <__smakebuf_r+0x74>
 80155e0:	89a3      	ldrh	r3, [r4, #12]
 80155e2:	f023 0303 	bic.w	r3, r3, #3
 80155e6:	f043 0301 	orr.w	r3, r3, #1
 80155ea:	81a3      	strh	r3, [r4, #12]
 80155ec:	89a0      	ldrh	r0, [r4, #12]
 80155ee:	4305      	orrs	r5, r0
 80155f0:	81a5      	strh	r5, [r4, #12]
 80155f2:	e7cd      	b.n	8015590 <__smakebuf_r+0x18>
 80155f4:	08015385 	.word	0x08015385

080155f8 <__malloc_lock>:
 80155f8:	4801      	ldr	r0, [pc, #4]	; (8015600 <__malloc_lock+0x8>)
 80155fa:	f7ff bf95 	b.w	8015528 <__retarget_lock_acquire_recursive>
 80155fe:	bf00      	nop
 8015600:	24005594 	.word	0x24005594

08015604 <__malloc_unlock>:
 8015604:	4801      	ldr	r0, [pc, #4]	; (801560c <__malloc_unlock+0x8>)
 8015606:	f7ff bf90 	b.w	801552a <__retarget_lock_release_recursive>
 801560a:	bf00      	nop
 801560c:	24005594 	.word	0x24005594

08015610 <__sfputc_r>:
 8015610:	6893      	ldr	r3, [r2, #8]
 8015612:	3b01      	subs	r3, #1
 8015614:	2b00      	cmp	r3, #0
 8015616:	b410      	push	{r4}
 8015618:	6093      	str	r3, [r2, #8]
 801561a:	da08      	bge.n	801562e <__sfputc_r+0x1e>
 801561c:	6994      	ldr	r4, [r2, #24]
 801561e:	42a3      	cmp	r3, r4
 8015620:	db01      	blt.n	8015626 <__sfputc_r+0x16>
 8015622:	290a      	cmp	r1, #10
 8015624:	d103      	bne.n	801562e <__sfputc_r+0x1e>
 8015626:	f85d 4b04 	ldr.w	r4, [sp], #4
 801562a:	f7ff bd05 	b.w	8015038 <__swbuf_r>
 801562e:	6813      	ldr	r3, [r2, #0]
 8015630:	1c58      	adds	r0, r3, #1
 8015632:	6010      	str	r0, [r2, #0]
 8015634:	7019      	strb	r1, [r3, #0]
 8015636:	4608      	mov	r0, r1
 8015638:	f85d 4b04 	ldr.w	r4, [sp], #4
 801563c:	4770      	bx	lr

0801563e <__sfputs_r>:
 801563e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015640:	4606      	mov	r6, r0
 8015642:	460f      	mov	r7, r1
 8015644:	4614      	mov	r4, r2
 8015646:	18d5      	adds	r5, r2, r3
 8015648:	42ac      	cmp	r4, r5
 801564a:	d101      	bne.n	8015650 <__sfputs_r+0x12>
 801564c:	2000      	movs	r0, #0
 801564e:	e007      	b.n	8015660 <__sfputs_r+0x22>
 8015650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015654:	463a      	mov	r2, r7
 8015656:	4630      	mov	r0, r6
 8015658:	f7ff ffda 	bl	8015610 <__sfputc_r>
 801565c:	1c43      	adds	r3, r0, #1
 801565e:	d1f3      	bne.n	8015648 <__sfputs_r+0xa>
 8015660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015664 <_vfiprintf_r>:
 8015664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015668:	460d      	mov	r5, r1
 801566a:	b09d      	sub	sp, #116	; 0x74
 801566c:	4614      	mov	r4, r2
 801566e:	4698      	mov	r8, r3
 8015670:	4606      	mov	r6, r0
 8015672:	b118      	cbz	r0, 801567c <_vfiprintf_r+0x18>
 8015674:	6983      	ldr	r3, [r0, #24]
 8015676:	b90b      	cbnz	r3, 801567c <_vfiprintf_r+0x18>
 8015678:	f7ff feb8 	bl	80153ec <__sinit>
 801567c:	4b89      	ldr	r3, [pc, #548]	; (80158a4 <_vfiprintf_r+0x240>)
 801567e:	429d      	cmp	r5, r3
 8015680:	d11b      	bne.n	80156ba <_vfiprintf_r+0x56>
 8015682:	6875      	ldr	r5, [r6, #4]
 8015684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015686:	07d9      	lsls	r1, r3, #31
 8015688:	d405      	bmi.n	8015696 <_vfiprintf_r+0x32>
 801568a:	89ab      	ldrh	r3, [r5, #12]
 801568c:	059a      	lsls	r2, r3, #22
 801568e:	d402      	bmi.n	8015696 <_vfiprintf_r+0x32>
 8015690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015692:	f7ff ff49 	bl	8015528 <__retarget_lock_acquire_recursive>
 8015696:	89ab      	ldrh	r3, [r5, #12]
 8015698:	071b      	lsls	r3, r3, #28
 801569a:	d501      	bpl.n	80156a0 <_vfiprintf_r+0x3c>
 801569c:	692b      	ldr	r3, [r5, #16]
 801569e:	b9eb      	cbnz	r3, 80156dc <_vfiprintf_r+0x78>
 80156a0:	4629      	mov	r1, r5
 80156a2:	4630      	mov	r0, r6
 80156a4:	f7ff fd1a 	bl	80150dc <__swsetup_r>
 80156a8:	b1c0      	cbz	r0, 80156dc <_vfiprintf_r+0x78>
 80156aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156ac:	07dc      	lsls	r4, r3, #31
 80156ae:	d50e      	bpl.n	80156ce <_vfiprintf_r+0x6a>
 80156b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80156b4:	b01d      	add	sp, #116	; 0x74
 80156b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ba:	4b7b      	ldr	r3, [pc, #492]	; (80158a8 <_vfiprintf_r+0x244>)
 80156bc:	429d      	cmp	r5, r3
 80156be:	d101      	bne.n	80156c4 <_vfiprintf_r+0x60>
 80156c0:	68b5      	ldr	r5, [r6, #8]
 80156c2:	e7df      	b.n	8015684 <_vfiprintf_r+0x20>
 80156c4:	4b79      	ldr	r3, [pc, #484]	; (80158ac <_vfiprintf_r+0x248>)
 80156c6:	429d      	cmp	r5, r3
 80156c8:	bf08      	it	eq
 80156ca:	68f5      	ldreq	r5, [r6, #12]
 80156cc:	e7da      	b.n	8015684 <_vfiprintf_r+0x20>
 80156ce:	89ab      	ldrh	r3, [r5, #12]
 80156d0:	0598      	lsls	r0, r3, #22
 80156d2:	d4ed      	bmi.n	80156b0 <_vfiprintf_r+0x4c>
 80156d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156d6:	f7ff ff28 	bl	801552a <__retarget_lock_release_recursive>
 80156da:	e7e9      	b.n	80156b0 <_vfiprintf_r+0x4c>
 80156dc:	2300      	movs	r3, #0
 80156de:	9309      	str	r3, [sp, #36]	; 0x24
 80156e0:	2320      	movs	r3, #32
 80156e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80156e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80156ea:	2330      	movs	r3, #48	; 0x30
 80156ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80158b0 <_vfiprintf_r+0x24c>
 80156f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80156f4:	f04f 0901 	mov.w	r9, #1
 80156f8:	4623      	mov	r3, r4
 80156fa:	469a      	mov	sl, r3
 80156fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015700:	b10a      	cbz	r2, 8015706 <_vfiprintf_r+0xa2>
 8015702:	2a25      	cmp	r2, #37	; 0x25
 8015704:	d1f9      	bne.n	80156fa <_vfiprintf_r+0x96>
 8015706:	ebba 0b04 	subs.w	fp, sl, r4
 801570a:	d00b      	beq.n	8015724 <_vfiprintf_r+0xc0>
 801570c:	465b      	mov	r3, fp
 801570e:	4622      	mov	r2, r4
 8015710:	4629      	mov	r1, r5
 8015712:	4630      	mov	r0, r6
 8015714:	f7ff ff93 	bl	801563e <__sfputs_r>
 8015718:	3001      	adds	r0, #1
 801571a:	f000 80aa 	beq.w	8015872 <_vfiprintf_r+0x20e>
 801571e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015720:	445a      	add	r2, fp
 8015722:	9209      	str	r2, [sp, #36]	; 0x24
 8015724:	f89a 3000 	ldrb.w	r3, [sl]
 8015728:	2b00      	cmp	r3, #0
 801572a:	f000 80a2 	beq.w	8015872 <_vfiprintf_r+0x20e>
 801572e:	2300      	movs	r3, #0
 8015730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015738:	f10a 0a01 	add.w	sl, sl, #1
 801573c:	9304      	str	r3, [sp, #16]
 801573e:	9307      	str	r3, [sp, #28]
 8015740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015744:	931a      	str	r3, [sp, #104]	; 0x68
 8015746:	4654      	mov	r4, sl
 8015748:	2205      	movs	r2, #5
 801574a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801574e:	4858      	ldr	r0, [pc, #352]	; (80158b0 <_vfiprintf_r+0x24c>)
 8015750:	f7ea fdc6 	bl	80002e0 <memchr>
 8015754:	9a04      	ldr	r2, [sp, #16]
 8015756:	b9d8      	cbnz	r0, 8015790 <_vfiprintf_r+0x12c>
 8015758:	06d1      	lsls	r1, r2, #27
 801575a:	bf44      	itt	mi
 801575c:	2320      	movmi	r3, #32
 801575e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015762:	0713      	lsls	r3, r2, #28
 8015764:	bf44      	itt	mi
 8015766:	232b      	movmi	r3, #43	; 0x2b
 8015768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801576c:	f89a 3000 	ldrb.w	r3, [sl]
 8015770:	2b2a      	cmp	r3, #42	; 0x2a
 8015772:	d015      	beq.n	80157a0 <_vfiprintf_r+0x13c>
 8015774:	9a07      	ldr	r2, [sp, #28]
 8015776:	4654      	mov	r4, sl
 8015778:	2000      	movs	r0, #0
 801577a:	f04f 0c0a 	mov.w	ip, #10
 801577e:	4621      	mov	r1, r4
 8015780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015784:	3b30      	subs	r3, #48	; 0x30
 8015786:	2b09      	cmp	r3, #9
 8015788:	d94e      	bls.n	8015828 <_vfiprintf_r+0x1c4>
 801578a:	b1b0      	cbz	r0, 80157ba <_vfiprintf_r+0x156>
 801578c:	9207      	str	r2, [sp, #28]
 801578e:	e014      	b.n	80157ba <_vfiprintf_r+0x156>
 8015790:	eba0 0308 	sub.w	r3, r0, r8
 8015794:	fa09 f303 	lsl.w	r3, r9, r3
 8015798:	4313      	orrs	r3, r2
 801579a:	9304      	str	r3, [sp, #16]
 801579c:	46a2      	mov	sl, r4
 801579e:	e7d2      	b.n	8015746 <_vfiprintf_r+0xe2>
 80157a0:	9b03      	ldr	r3, [sp, #12]
 80157a2:	1d19      	adds	r1, r3, #4
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	9103      	str	r1, [sp, #12]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	bfbb      	ittet	lt
 80157ac:	425b      	neglt	r3, r3
 80157ae:	f042 0202 	orrlt.w	r2, r2, #2
 80157b2:	9307      	strge	r3, [sp, #28]
 80157b4:	9307      	strlt	r3, [sp, #28]
 80157b6:	bfb8      	it	lt
 80157b8:	9204      	strlt	r2, [sp, #16]
 80157ba:	7823      	ldrb	r3, [r4, #0]
 80157bc:	2b2e      	cmp	r3, #46	; 0x2e
 80157be:	d10c      	bne.n	80157da <_vfiprintf_r+0x176>
 80157c0:	7863      	ldrb	r3, [r4, #1]
 80157c2:	2b2a      	cmp	r3, #42	; 0x2a
 80157c4:	d135      	bne.n	8015832 <_vfiprintf_r+0x1ce>
 80157c6:	9b03      	ldr	r3, [sp, #12]
 80157c8:	1d1a      	adds	r2, r3, #4
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	9203      	str	r2, [sp, #12]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	bfb8      	it	lt
 80157d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80157d6:	3402      	adds	r4, #2
 80157d8:	9305      	str	r3, [sp, #20]
 80157da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80158c0 <_vfiprintf_r+0x25c>
 80157de:	7821      	ldrb	r1, [r4, #0]
 80157e0:	2203      	movs	r2, #3
 80157e2:	4650      	mov	r0, sl
 80157e4:	f7ea fd7c 	bl	80002e0 <memchr>
 80157e8:	b140      	cbz	r0, 80157fc <_vfiprintf_r+0x198>
 80157ea:	2340      	movs	r3, #64	; 0x40
 80157ec:	eba0 000a 	sub.w	r0, r0, sl
 80157f0:	fa03 f000 	lsl.w	r0, r3, r0
 80157f4:	9b04      	ldr	r3, [sp, #16]
 80157f6:	4303      	orrs	r3, r0
 80157f8:	3401      	adds	r4, #1
 80157fa:	9304      	str	r3, [sp, #16]
 80157fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015800:	482c      	ldr	r0, [pc, #176]	; (80158b4 <_vfiprintf_r+0x250>)
 8015802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015806:	2206      	movs	r2, #6
 8015808:	f7ea fd6a 	bl	80002e0 <memchr>
 801580c:	2800      	cmp	r0, #0
 801580e:	d03f      	beq.n	8015890 <_vfiprintf_r+0x22c>
 8015810:	4b29      	ldr	r3, [pc, #164]	; (80158b8 <_vfiprintf_r+0x254>)
 8015812:	bb1b      	cbnz	r3, 801585c <_vfiprintf_r+0x1f8>
 8015814:	9b03      	ldr	r3, [sp, #12]
 8015816:	3307      	adds	r3, #7
 8015818:	f023 0307 	bic.w	r3, r3, #7
 801581c:	3308      	adds	r3, #8
 801581e:	9303      	str	r3, [sp, #12]
 8015820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015822:	443b      	add	r3, r7
 8015824:	9309      	str	r3, [sp, #36]	; 0x24
 8015826:	e767      	b.n	80156f8 <_vfiprintf_r+0x94>
 8015828:	fb0c 3202 	mla	r2, ip, r2, r3
 801582c:	460c      	mov	r4, r1
 801582e:	2001      	movs	r0, #1
 8015830:	e7a5      	b.n	801577e <_vfiprintf_r+0x11a>
 8015832:	2300      	movs	r3, #0
 8015834:	3401      	adds	r4, #1
 8015836:	9305      	str	r3, [sp, #20]
 8015838:	4619      	mov	r1, r3
 801583a:	f04f 0c0a 	mov.w	ip, #10
 801583e:	4620      	mov	r0, r4
 8015840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015844:	3a30      	subs	r2, #48	; 0x30
 8015846:	2a09      	cmp	r2, #9
 8015848:	d903      	bls.n	8015852 <_vfiprintf_r+0x1ee>
 801584a:	2b00      	cmp	r3, #0
 801584c:	d0c5      	beq.n	80157da <_vfiprintf_r+0x176>
 801584e:	9105      	str	r1, [sp, #20]
 8015850:	e7c3      	b.n	80157da <_vfiprintf_r+0x176>
 8015852:	fb0c 2101 	mla	r1, ip, r1, r2
 8015856:	4604      	mov	r4, r0
 8015858:	2301      	movs	r3, #1
 801585a:	e7f0      	b.n	801583e <_vfiprintf_r+0x1da>
 801585c:	ab03      	add	r3, sp, #12
 801585e:	9300      	str	r3, [sp, #0]
 8015860:	462a      	mov	r2, r5
 8015862:	4b16      	ldr	r3, [pc, #88]	; (80158bc <_vfiprintf_r+0x258>)
 8015864:	a904      	add	r1, sp, #16
 8015866:	4630      	mov	r0, r6
 8015868:	f3af 8000 	nop.w
 801586c:	4607      	mov	r7, r0
 801586e:	1c78      	adds	r0, r7, #1
 8015870:	d1d6      	bne.n	8015820 <_vfiprintf_r+0x1bc>
 8015872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015874:	07d9      	lsls	r1, r3, #31
 8015876:	d405      	bmi.n	8015884 <_vfiprintf_r+0x220>
 8015878:	89ab      	ldrh	r3, [r5, #12]
 801587a:	059a      	lsls	r2, r3, #22
 801587c:	d402      	bmi.n	8015884 <_vfiprintf_r+0x220>
 801587e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015880:	f7ff fe53 	bl	801552a <__retarget_lock_release_recursive>
 8015884:	89ab      	ldrh	r3, [r5, #12]
 8015886:	065b      	lsls	r3, r3, #25
 8015888:	f53f af12 	bmi.w	80156b0 <_vfiprintf_r+0x4c>
 801588c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801588e:	e711      	b.n	80156b4 <_vfiprintf_r+0x50>
 8015890:	ab03      	add	r3, sp, #12
 8015892:	9300      	str	r3, [sp, #0]
 8015894:	462a      	mov	r2, r5
 8015896:	4b09      	ldr	r3, [pc, #36]	; (80158bc <_vfiprintf_r+0x258>)
 8015898:	a904      	add	r1, sp, #16
 801589a:	4630      	mov	r0, r6
 801589c:	f000 f880 	bl	80159a0 <_printf_i>
 80158a0:	e7e4      	b.n	801586c <_vfiprintf_r+0x208>
 80158a2:	bf00      	nop
 80158a4:	08016148 	.word	0x08016148
 80158a8:	08016168 	.word	0x08016168
 80158ac:	08016128 	.word	0x08016128
 80158b0:	08016188 	.word	0x08016188
 80158b4:	08016192 	.word	0x08016192
 80158b8:	00000000 	.word	0x00000000
 80158bc:	0801563f 	.word	0x0801563f
 80158c0:	0801618e 	.word	0x0801618e

080158c4 <_printf_common>:
 80158c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158c8:	4616      	mov	r6, r2
 80158ca:	4699      	mov	r9, r3
 80158cc:	688a      	ldr	r2, [r1, #8]
 80158ce:	690b      	ldr	r3, [r1, #16]
 80158d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80158d4:	4293      	cmp	r3, r2
 80158d6:	bfb8      	it	lt
 80158d8:	4613      	movlt	r3, r2
 80158da:	6033      	str	r3, [r6, #0]
 80158dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80158e0:	4607      	mov	r7, r0
 80158e2:	460c      	mov	r4, r1
 80158e4:	b10a      	cbz	r2, 80158ea <_printf_common+0x26>
 80158e6:	3301      	adds	r3, #1
 80158e8:	6033      	str	r3, [r6, #0]
 80158ea:	6823      	ldr	r3, [r4, #0]
 80158ec:	0699      	lsls	r1, r3, #26
 80158ee:	bf42      	ittt	mi
 80158f0:	6833      	ldrmi	r3, [r6, #0]
 80158f2:	3302      	addmi	r3, #2
 80158f4:	6033      	strmi	r3, [r6, #0]
 80158f6:	6825      	ldr	r5, [r4, #0]
 80158f8:	f015 0506 	ands.w	r5, r5, #6
 80158fc:	d106      	bne.n	801590c <_printf_common+0x48>
 80158fe:	f104 0a19 	add.w	sl, r4, #25
 8015902:	68e3      	ldr	r3, [r4, #12]
 8015904:	6832      	ldr	r2, [r6, #0]
 8015906:	1a9b      	subs	r3, r3, r2
 8015908:	42ab      	cmp	r3, r5
 801590a:	dc26      	bgt.n	801595a <_printf_common+0x96>
 801590c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015910:	1e13      	subs	r3, r2, #0
 8015912:	6822      	ldr	r2, [r4, #0]
 8015914:	bf18      	it	ne
 8015916:	2301      	movne	r3, #1
 8015918:	0692      	lsls	r2, r2, #26
 801591a:	d42b      	bmi.n	8015974 <_printf_common+0xb0>
 801591c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015920:	4649      	mov	r1, r9
 8015922:	4638      	mov	r0, r7
 8015924:	47c0      	blx	r8
 8015926:	3001      	adds	r0, #1
 8015928:	d01e      	beq.n	8015968 <_printf_common+0xa4>
 801592a:	6823      	ldr	r3, [r4, #0]
 801592c:	68e5      	ldr	r5, [r4, #12]
 801592e:	6832      	ldr	r2, [r6, #0]
 8015930:	f003 0306 	and.w	r3, r3, #6
 8015934:	2b04      	cmp	r3, #4
 8015936:	bf08      	it	eq
 8015938:	1aad      	subeq	r5, r5, r2
 801593a:	68a3      	ldr	r3, [r4, #8]
 801593c:	6922      	ldr	r2, [r4, #16]
 801593e:	bf0c      	ite	eq
 8015940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015944:	2500      	movne	r5, #0
 8015946:	4293      	cmp	r3, r2
 8015948:	bfc4      	itt	gt
 801594a:	1a9b      	subgt	r3, r3, r2
 801594c:	18ed      	addgt	r5, r5, r3
 801594e:	2600      	movs	r6, #0
 8015950:	341a      	adds	r4, #26
 8015952:	42b5      	cmp	r5, r6
 8015954:	d11a      	bne.n	801598c <_printf_common+0xc8>
 8015956:	2000      	movs	r0, #0
 8015958:	e008      	b.n	801596c <_printf_common+0xa8>
 801595a:	2301      	movs	r3, #1
 801595c:	4652      	mov	r2, sl
 801595e:	4649      	mov	r1, r9
 8015960:	4638      	mov	r0, r7
 8015962:	47c0      	blx	r8
 8015964:	3001      	adds	r0, #1
 8015966:	d103      	bne.n	8015970 <_printf_common+0xac>
 8015968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801596c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015970:	3501      	adds	r5, #1
 8015972:	e7c6      	b.n	8015902 <_printf_common+0x3e>
 8015974:	18e1      	adds	r1, r4, r3
 8015976:	1c5a      	adds	r2, r3, #1
 8015978:	2030      	movs	r0, #48	; 0x30
 801597a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801597e:	4422      	add	r2, r4
 8015980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015988:	3302      	adds	r3, #2
 801598a:	e7c7      	b.n	801591c <_printf_common+0x58>
 801598c:	2301      	movs	r3, #1
 801598e:	4622      	mov	r2, r4
 8015990:	4649      	mov	r1, r9
 8015992:	4638      	mov	r0, r7
 8015994:	47c0      	blx	r8
 8015996:	3001      	adds	r0, #1
 8015998:	d0e6      	beq.n	8015968 <_printf_common+0xa4>
 801599a:	3601      	adds	r6, #1
 801599c:	e7d9      	b.n	8015952 <_printf_common+0x8e>
	...

080159a0 <_printf_i>:
 80159a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80159a4:	7e0f      	ldrb	r7, [r1, #24]
 80159a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80159a8:	2f78      	cmp	r7, #120	; 0x78
 80159aa:	4691      	mov	r9, r2
 80159ac:	4680      	mov	r8, r0
 80159ae:	460c      	mov	r4, r1
 80159b0:	469a      	mov	sl, r3
 80159b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80159b6:	d807      	bhi.n	80159c8 <_printf_i+0x28>
 80159b8:	2f62      	cmp	r7, #98	; 0x62
 80159ba:	d80a      	bhi.n	80159d2 <_printf_i+0x32>
 80159bc:	2f00      	cmp	r7, #0
 80159be:	f000 80d8 	beq.w	8015b72 <_printf_i+0x1d2>
 80159c2:	2f58      	cmp	r7, #88	; 0x58
 80159c4:	f000 80a3 	beq.w	8015b0e <_printf_i+0x16e>
 80159c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80159d0:	e03a      	b.n	8015a48 <_printf_i+0xa8>
 80159d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80159d6:	2b15      	cmp	r3, #21
 80159d8:	d8f6      	bhi.n	80159c8 <_printf_i+0x28>
 80159da:	a101      	add	r1, pc, #4	; (adr r1, 80159e0 <_printf_i+0x40>)
 80159dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80159e0:	08015a39 	.word	0x08015a39
 80159e4:	08015a4d 	.word	0x08015a4d
 80159e8:	080159c9 	.word	0x080159c9
 80159ec:	080159c9 	.word	0x080159c9
 80159f0:	080159c9 	.word	0x080159c9
 80159f4:	080159c9 	.word	0x080159c9
 80159f8:	08015a4d 	.word	0x08015a4d
 80159fc:	080159c9 	.word	0x080159c9
 8015a00:	080159c9 	.word	0x080159c9
 8015a04:	080159c9 	.word	0x080159c9
 8015a08:	080159c9 	.word	0x080159c9
 8015a0c:	08015b59 	.word	0x08015b59
 8015a10:	08015a7d 	.word	0x08015a7d
 8015a14:	08015b3b 	.word	0x08015b3b
 8015a18:	080159c9 	.word	0x080159c9
 8015a1c:	080159c9 	.word	0x080159c9
 8015a20:	08015b7b 	.word	0x08015b7b
 8015a24:	080159c9 	.word	0x080159c9
 8015a28:	08015a7d 	.word	0x08015a7d
 8015a2c:	080159c9 	.word	0x080159c9
 8015a30:	080159c9 	.word	0x080159c9
 8015a34:	08015b43 	.word	0x08015b43
 8015a38:	682b      	ldr	r3, [r5, #0]
 8015a3a:	1d1a      	adds	r2, r3, #4
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	602a      	str	r2, [r5, #0]
 8015a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a48:	2301      	movs	r3, #1
 8015a4a:	e0a3      	b.n	8015b94 <_printf_i+0x1f4>
 8015a4c:	6820      	ldr	r0, [r4, #0]
 8015a4e:	6829      	ldr	r1, [r5, #0]
 8015a50:	0606      	lsls	r6, r0, #24
 8015a52:	f101 0304 	add.w	r3, r1, #4
 8015a56:	d50a      	bpl.n	8015a6e <_printf_i+0xce>
 8015a58:	680e      	ldr	r6, [r1, #0]
 8015a5a:	602b      	str	r3, [r5, #0]
 8015a5c:	2e00      	cmp	r6, #0
 8015a5e:	da03      	bge.n	8015a68 <_printf_i+0xc8>
 8015a60:	232d      	movs	r3, #45	; 0x2d
 8015a62:	4276      	negs	r6, r6
 8015a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a68:	485e      	ldr	r0, [pc, #376]	; (8015be4 <_printf_i+0x244>)
 8015a6a:	230a      	movs	r3, #10
 8015a6c:	e019      	b.n	8015aa2 <_printf_i+0x102>
 8015a6e:	680e      	ldr	r6, [r1, #0]
 8015a70:	602b      	str	r3, [r5, #0]
 8015a72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015a76:	bf18      	it	ne
 8015a78:	b236      	sxthne	r6, r6
 8015a7a:	e7ef      	b.n	8015a5c <_printf_i+0xbc>
 8015a7c:	682b      	ldr	r3, [r5, #0]
 8015a7e:	6820      	ldr	r0, [r4, #0]
 8015a80:	1d19      	adds	r1, r3, #4
 8015a82:	6029      	str	r1, [r5, #0]
 8015a84:	0601      	lsls	r1, r0, #24
 8015a86:	d501      	bpl.n	8015a8c <_printf_i+0xec>
 8015a88:	681e      	ldr	r6, [r3, #0]
 8015a8a:	e002      	b.n	8015a92 <_printf_i+0xf2>
 8015a8c:	0646      	lsls	r6, r0, #25
 8015a8e:	d5fb      	bpl.n	8015a88 <_printf_i+0xe8>
 8015a90:	881e      	ldrh	r6, [r3, #0]
 8015a92:	4854      	ldr	r0, [pc, #336]	; (8015be4 <_printf_i+0x244>)
 8015a94:	2f6f      	cmp	r7, #111	; 0x6f
 8015a96:	bf0c      	ite	eq
 8015a98:	2308      	moveq	r3, #8
 8015a9a:	230a      	movne	r3, #10
 8015a9c:	2100      	movs	r1, #0
 8015a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015aa2:	6865      	ldr	r5, [r4, #4]
 8015aa4:	60a5      	str	r5, [r4, #8]
 8015aa6:	2d00      	cmp	r5, #0
 8015aa8:	bfa2      	ittt	ge
 8015aaa:	6821      	ldrge	r1, [r4, #0]
 8015aac:	f021 0104 	bicge.w	r1, r1, #4
 8015ab0:	6021      	strge	r1, [r4, #0]
 8015ab2:	b90e      	cbnz	r6, 8015ab8 <_printf_i+0x118>
 8015ab4:	2d00      	cmp	r5, #0
 8015ab6:	d04d      	beq.n	8015b54 <_printf_i+0x1b4>
 8015ab8:	4615      	mov	r5, r2
 8015aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8015abe:	fb03 6711 	mls	r7, r3, r1, r6
 8015ac2:	5dc7      	ldrb	r7, [r0, r7]
 8015ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015ac8:	4637      	mov	r7, r6
 8015aca:	42bb      	cmp	r3, r7
 8015acc:	460e      	mov	r6, r1
 8015ace:	d9f4      	bls.n	8015aba <_printf_i+0x11a>
 8015ad0:	2b08      	cmp	r3, #8
 8015ad2:	d10b      	bne.n	8015aec <_printf_i+0x14c>
 8015ad4:	6823      	ldr	r3, [r4, #0]
 8015ad6:	07de      	lsls	r6, r3, #31
 8015ad8:	d508      	bpl.n	8015aec <_printf_i+0x14c>
 8015ada:	6923      	ldr	r3, [r4, #16]
 8015adc:	6861      	ldr	r1, [r4, #4]
 8015ade:	4299      	cmp	r1, r3
 8015ae0:	bfde      	ittt	le
 8015ae2:	2330      	movle	r3, #48	; 0x30
 8015ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ae8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015aec:	1b52      	subs	r2, r2, r5
 8015aee:	6122      	str	r2, [r4, #16]
 8015af0:	f8cd a000 	str.w	sl, [sp]
 8015af4:	464b      	mov	r3, r9
 8015af6:	aa03      	add	r2, sp, #12
 8015af8:	4621      	mov	r1, r4
 8015afa:	4640      	mov	r0, r8
 8015afc:	f7ff fee2 	bl	80158c4 <_printf_common>
 8015b00:	3001      	adds	r0, #1
 8015b02:	d14c      	bne.n	8015b9e <_printf_i+0x1fe>
 8015b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b08:	b004      	add	sp, #16
 8015b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b0e:	4835      	ldr	r0, [pc, #212]	; (8015be4 <_printf_i+0x244>)
 8015b10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015b14:	6829      	ldr	r1, [r5, #0]
 8015b16:	6823      	ldr	r3, [r4, #0]
 8015b18:	f851 6b04 	ldr.w	r6, [r1], #4
 8015b1c:	6029      	str	r1, [r5, #0]
 8015b1e:	061d      	lsls	r5, r3, #24
 8015b20:	d514      	bpl.n	8015b4c <_printf_i+0x1ac>
 8015b22:	07df      	lsls	r7, r3, #31
 8015b24:	bf44      	itt	mi
 8015b26:	f043 0320 	orrmi.w	r3, r3, #32
 8015b2a:	6023      	strmi	r3, [r4, #0]
 8015b2c:	b91e      	cbnz	r6, 8015b36 <_printf_i+0x196>
 8015b2e:	6823      	ldr	r3, [r4, #0]
 8015b30:	f023 0320 	bic.w	r3, r3, #32
 8015b34:	6023      	str	r3, [r4, #0]
 8015b36:	2310      	movs	r3, #16
 8015b38:	e7b0      	b.n	8015a9c <_printf_i+0xfc>
 8015b3a:	6823      	ldr	r3, [r4, #0]
 8015b3c:	f043 0320 	orr.w	r3, r3, #32
 8015b40:	6023      	str	r3, [r4, #0]
 8015b42:	2378      	movs	r3, #120	; 0x78
 8015b44:	4828      	ldr	r0, [pc, #160]	; (8015be8 <_printf_i+0x248>)
 8015b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015b4a:	e7e3      	b.n	8015b14 <_printf_i+0x174>
 8015b4c:	0659      	lsls	r1, r3, #25
 8015b4e:	bf48      	it	mi
 8015b50:	b2b6      	uxthmi	r6, r6
 8015b52:	e7e6      	b.n	8015b22 <_printf_i+0x182>
 8015b54:	4615      	mov	r5, r2
 8015b56:	e7bb      	b.n	8015ad0 <_printf_i+0x130>
 8015b58:	682b      	ldr	r3, [r5, #0]
 8015b5a:	6826      	ldr	r6, [r4, #0]
 8015b5c:	6961      	ldr	r1, [r4, #20]
 8015b5e:	1d18      	adds	r0, r3, #4
 8015b60:	6028      	str	r0, [r5, #0]
 8015b62:	0635      	lsls	r5, r6, #24
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	d501      	bpl.n	8015b6c <_printf_i+0x1cc>
 8015b68:	6019      	str	r1, [r3, #0]
 8015b6a:	e002      	b.n	8015b72 <_printf_i+0x1d2>
 8015b6c:	0670      	lsls	r0, r6, #25
 8015b6e:	d5fb      	bpl.n	8015b68 <_printf_i+0x1c8>
 8015b70:	8019      	strh	r1, [r3, #0]
 8015b72:	2300      	movs	r3, #0
 8015b74:	6123      	str	r3, [r4, #16]
 8015b76:	4615      	mov	r5, r2
 8015b78:	e7ba      	b.n	8015af0 <_printf_i+0x150>
 8015b7a:	682b      	ldr	r3, [r5, #0]
 8015b7c:	1d1a      	adds	r2, r3, #4
 8015b7e:	602a      	str	r2, [r5, #0]
 8015b80:	681d      	ldr	r5, [r3, #0]
 8015b82:	6862      	ldr	r2, [r4, #4]
 8015b84:	2100      	movs	r1, #0
 8015b86:	4628      	mov	r0, r5
 8015b88:	f7ea fbaa 	bl	80002e0 <memchr>
 8015b8c:	b108      	cbz	r0, 8015b92 <_printf_i+0x1f2>
 8015b8e:	1b40      	subs	r0, r0, r5
 8015b90:	6060      	str	r0, [r4, #4]
 8015b92:	6863      	ldr	r3, [r4, #4]
 8015b94:	6123      	str	r3, [r4, #16]
 8015b96:	2300      	movs	r3, #0
 8015b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b9c:	e7a8      	b.n	8015af0 <_printf_i+0x150>
 8015b9e:	6923      	ldr	r3, [r4, #16]
 8015ba0:	462a      	mov	r2, r5
 8015ba2:	4649      	mov	r1, r9
 8015ba4:	4640      	mov	r0, r8
 8015ba6:	47d0      	blx	sl
 8015ba8:	3001      	adds	r0, #1
 8015baa:	d0ab      	beq.n	8015b04 <_printf_i+0x164>
 8015bac:	6823      	ldr	r3, [r4, #0]
 8015bae:	079b      	lsls	r3, r3, #30
 8015bb0:	d413      	bmi.n	8015bda <_printf_i+0x23a>
 8015bb2:	68e0      	ldr	r0, [r4, #12]
 8015bb4:	9b03      	ldr	r3, [sp, #12]
 8015bb6:	4298      	cmp	r0, r3
 8015bb8:	bfb8      	it	lt
 8015bba:	4618      	movlt	r0, r3
 8015bbc:	e7a4      	b.n	8015b08 <_printf_i+0x168>
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	4632      	mov	r2, r6
 8015bc2:	4649      	mov	r1, r9
 8015bc4:	4640      	mov	r0, r8
 8015bc6:	47d0      	blx	sl
 8015bc8:	3001      	adds	r0, #1
 8015bca:	d09b      	beq.n	8015b04 <_printf_i+0x164>
 8015bcc:	3501      	adds	r5, #1
 8015bce:	68e3      	ldr	r3, [r4, #12]
 8015bd0:	9903      	ldr	r1, [sp, #12]
 8015bd2:	1a5b      	subs	r3, r3, r1
 8015bd4:	42ab      	cmp	r3, r5
 8015bd6:	dcf2      	bgt.n	8015bbe <_printf_i+0x21e>
 8015bd8:	e7eb      	b.n	8015bb2 <_printf_i+0x212>
 8015bda:	2500      	movs	r5, #0
 8015bdc:	f104 0619 	add.w	r6, r4, #25
 8015be0:	e7f5      	b.n	8015bce <_printf_i+0x22e>
 8015be2:	bf00      	nop
 8015be4:	08016199 	.word	0x08016199
 8015be8:	080161aa 	.word	0x080161aa

08015bec <__sread>:
 8015bec:	b510      	push	{r4, lr}
 8015bee:	460c      	mov	r4, r1
 8015bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bf4:	f000 f894 	bl	8015d20 <_read_r>
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	bfab      	itete	ge
 8015bfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8015c00:	181b      	addge	r3, r3, r0
 8015c02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015c06:	bfac      	ite	ge
 8015c08:	6563      	strge	r3, [r4, #84]	; 0x54
 8015c0a:	81a3      	strhlt	r3, [r4, #12]
 8015c0c:	bd10      	pop	{r4, pc}

08015c0e <__swrite>:
 8015c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c12:	461f      	mov	r7, r3
 8015c14:	898b      	ldrh	r3, [r1, #12]
 8015c16:	05db      	lsls	r3, r3, #23
 8015c18:	4605      	mov	r5, r0
 8015c1a:	460c      	mov	r4, r1
 8015c1c:	4616      	mov	r6, r2
 8015c1e:	d505      	bpl.n	8015c2c <__swrite+0x1e>
 8015c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c24:	2302      	movs	r3, #2
 8015c26:	2200      	movs	r2, #0
 8015c28:	f000 f868 	bl	8015cfc <_lseek_r>
 8015c2c:	89a3      	ldrh	r3, [r4, #12]
 8015c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c36:	81a3      	strh	r3, [r4, #12]
 8015c38:	4632      	mov	r2, r6
 8015c3a:	463b      	mov	r3, r7
 8015c3c:	4628      	mov	r0, r5
 8015c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c42:	f000 b817 	b.w	8015c74 <_write_r>

08015c46 <__sseek>:
 8015c46:	b510      	push	{r4, lr}
 8015c48:	460c      	mov	r4, r1
 8015c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c4e:	f000 f855 	bl	8015cfc <_lseek_r>
 8015c52:	1c43      	adds	r3, r0, #1
 8015c54:	89a3      	ldrh	r3, [r4, #12]
 8015c56:	bf15      	itete	ne
 8015c58:	6560      	strne	r0, [r4, #84]	; 0x54
 8015c5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015c5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015c62:	81a3      	strheq	r3, [r4, #12]
 8015c64:	bf18      	it	ne
 8015c66:	81a3      	strhne	r3, [r4, #12]
 8015c68:	bd10      	pop	{r4, pc}

08015c6a <__sclose>:
 8015c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c6e:	f000 b813 	b.w	8015c98 <_close_r>
	...

08015c74 <_write_r>:
 8015c74:	b538      	push	{r3, r4, r5, lr}
 8015c76:	4d07      	ldr	r5, [pc, #28]	; (8015c94 <_write_r+0x20>)
 8015c78:	4604      	mov	r4, r0
 8015c7a:	4608      	mov	r0, r1
 8015c7c:	4611      	mov	r1, r2
 8015c7e:	2200      	movs	r2, #0
 8015c80:	602a      	str	r2, [r5, #0]
 8015c82:	461a      	mov	r2, r3
 8015c84:	f7ed fb91 	bl	80033aa <_write>
 8015c88:	1c43      	adds	r3, r0, #1
 8015c8a:	d102      	bne.n	8015c92 <_write_r+0x1e>
 8015c8c:	682b      	ldr	r3, [r5, #0]
 8015c8e:	b103      	cbz	r3, 8015c92 <_write_r+0x1e>
 8015c90:	6023      	str	r3, [r4, #0]
 8015c92:	bd38      	pop	{r3, r4, r5, pc}
 8015c94:	24005598 	.word	0x24005598

08015c98 <_close_r>:
 8015c98:	b538      	push	{r3, r4, r5, lr}
 8015c9a:	4d06      	ldr	r5, [pc, #24]	; (8015cb4 <_close_r+0x1c>)
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	4604      	mov	r4, r0
 8015ca0:	4608      	mov	r0, r1
 8015ca2:	602b      	str	r3, [r5, #0]
 8015ca4:	f7ed fb9d 	bl	80033e2 <_close>
 8015ca8:	1c43      	adds	r3, r0, #1
 8015caa:	d102      	bne.n	8015cb2 <_close_r+0x1a>
 8015cac:	682b      	ldr	r3, [r5, #0]
 8015cae:	b103      	cbz	r3, 8015cb2 <_close_r+0x1a>
 8015cb0:	6023      	str	r3, [r4, #0]
 8015cb2:	bd38      	pop	{r3, r4, r5, pc}
 8015cb4:	24005598 	.word	0x24005598

08015cb8 <_fstat_r>:
 8015cb8:	b538      	push	{r3, r4, r5, lr}
 8015cba:	4d07      	ldr	r5, [pc, #28]	; (8015cd8 <_fstat_r+0x20>)
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	4604      	mov	r4, r0
 8015cc0:	4608      	mov	r0, r1
 8015cc2:	4611      	mov	r1, r2
 8015cc4:	602b      	str	r3, [r5, #0]
 8015cc6:	f7ed fb98 	bl	80033fa <_fstat>
 8015cca:	1c43      	adds	r3, r0, #1
 8015ccc:	d102      	bne.n	8015cd4 <_fstat_r+0x1c>
 8015cce:	682b      	ldr	r3, [r5, #0]
 8015cd0:	b103      	cbz	r3, 8015cd4 <_fstat_r+0x1c>
 8015cd2:	6023      	str	r3, [r4, #0]
 8015cd4:	bd38      	pop	{r3, r4, r5, pc}
 8015cd6:	bf00      	nop
 8015cd8:	24005598 	.word	0x24005598

08015cdc <_isatty_r>:
 8015cdc:	b538      	push	{r3, r4, r5, lr}
 8015cde:	4d06      	ldr	r5, [pc, #24]	; (8015cf8 <_isatty_r+0x1c>)
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	4604      	mov	r4, r0
 8015ce4:	4608      	mov	r0, r1
 8015ce6:	602b      	str	r3, [r5, #0]
 8015ce8:	f7ed fb97 	bl	800341a <_isatty>
 8015cec:	1c43      	adds	r3, r0, #1
 8015cee:	d102      	bne.n	8015cf6 <_isatty_r+0x1a>
 8015cf0:	682b      	ldr	r3, [r5, #0]
 8015cf2:	b103      	cbz	r3, 8015cf6 <_isatty_r+0x1a>
 8015cf4:	6023      	str	r3, [r4, #0]
 8015cf6:	bd38      	pop	{r3, r4, r5, pc}
 8015cf8:	24005598 	.word	0x24005598

08015cfc <_lseek_r>:
 8015cfc:	b538      	push	{r3, r4, r5, lr}
 8015cfe:	4d07      	ldr	r5, [pc, #28]	; (8015d1c <_lseek_r+0x20>)
 8015d00:	4604      	mov	r4, r0
 8015d02:	4608      	mov	r0, r1
 8015d04:	4611      	mov	r1, r2
 8015d06:	2200      	movs	r2, #0
 8015d08:	602a      	str	r2, [r5, #0]
 8015d0a:	461a      	mov	r2, r3
 8015d0c:	f7ed fb90 	bl	8003430 <_lseek>
 8015d10:	1c43      	adds	r3, r0, #1
 8015d12:	d102      	bne.n	8015d1a <_lseek_r+0x1e>
 8015d14:	682b      	ldr	r3, [r5, #0]
 8015d16:	b103      	cbz	r3, 8015d1a <_lseek_r+0x1e>
 8015d18:	6023      	str	r3, [r4, #0]
 8015d1a:	bd38      	pop	{r3, r4, r5, pc}
 8015d1c:	24005598 	.word	0x24005598

08015d20 <_read_r>:
 8015d20:	b538      	push	{r3, r4, r5, lr}
 8015d22:	4d07      	ldr	r5, [pc, #28]	; (8015d40 <_read_r+0x20>)
 8015d24:	4604      	mov	r4, r0
 8015d26:	4608      	mov	r0, r1
 8015d28:	4611      	mov	r1, r2
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	602a      	str	r2, [r5, #0]
 8015d2e:	461a      	mov	r2, r3
 8015d30:	f7ed fb1e 	bl	8003370 <_read>
 8015d34:	1c43      	adds	r3, r0, #1
 8015d36:	d102      	bne.n	8015d3e <_read_r+0x1e>
 8015d38:	682b      	ldr	r3, [r5, #0]
 8015d3a:	b103      	cbz	r3, 8015d3e <_read_r+0x1e>
 8015d3c:	6023      	str	r3, [r4, #0]
 8015d3e:	bd38      	pop	{r3, r4, r5, pc}
 8015d40:	24005598 	.word	0x24005598

08015d44 <_init>:
 8015d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d46:	bf00      	nop
 8015d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d4a:	bc08      	pop	{r3}
 8015d4c:	469e      	mov	lr, r3
 8015d4e:	4770      	bx	lr

08015d50 <_fini>:
 8015d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d52:	bf00      	nop
 8015d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d56:	bc08      	pop	{r3}
 8015d58:	469e      	mov	lr, r3
 8015d5a:	4770      	bx	lr
