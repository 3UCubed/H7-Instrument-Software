
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016970  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08016c10  08016c10  00026c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017024  08017024  00027024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801702c  0801702c  0002702c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017030  08017030  00027030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017034  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000590c  24000120  0801713c  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a2c  0801713c  00035a2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032b10  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000054af  00000000  00000000  00062c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002648  00000000  00000000  000680f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002450  00000000  00000000  0006a740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a96  00000000  00000000  0006cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030a85  00000000  00000000  00074626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019468c  00000000  00000000  000a50ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00239737  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ac68  00000000  00000000  00239788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016bf8 	.word	0x08016bf8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016bf8 	.word	0x08016bf8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 fae2 	bl	8012bc4 <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f012 fad7 	bl	8012bc4 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f012 facc 	bl	8012bc4 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f015 ff32 	bl	8016498 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	24000508 	.word	0x24000508
 8000640:	24000be8 	.word	0x24000be8
 8000644:	24000554 	.word	0x24000554
 8000648:	240005a0 	.word	0x240005a0
 800064c:	08016c70 	.word	0x08016c70

08000650 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	49f2      	ldr	r1, [pc, #968]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 800065c:	48f2      	ldr	r0, [pc, #968]	; (8000a28 <HAL_UART_RxCpltCallback+0x3d8>)
 800065e:	f00f fc4b 	bl	800fef8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4bf0      	ldr	r3, [pc, #960]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2be0      	cmp	r3, #224	; 0xe0
 800066c:	f200 83c8 	bhi.w	8000e00 <HAL_UART_RxCpltCallback+0x7b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000a11 	.word	0x08000a11
 800067c:	08000a4d 	.word	0x08000a4d
 8000680:	08000ad3 	.word	0x08000ad3
 8000684:	08000afd 	.word	0x08000afd
 8000688:	08000b25 	.word	0x08000b25
 800068c:	08000b4f 	.word	0x08000b4f
 8000690:	08000b7b 	.word	0x08000b7b
 8000694:	08000ba7 	.word	0x08000ba7
 8000698:	08000bd1 	.word	0x08000bd1
 800069c:	08000c03 	.word	0x08000c03
 80006a0:	08000c27 	.word	0x08000c27
 80006a4:	08000c43 	.word	0x08000c43
 80006a8:	08000c5f 	.word	0x08000c5f
 80006ac:	08000ca9 	.word	0x08000ca9
 80006b0:	08000da5 	.word	0x08000da5
 80006b4:	08000dd5 	.word	0x08000dd5
 80006b8:	080009fd 	.word	0x080009fd
 80006bc:	08000a39 	.word	0x08000a39
 80006c0:	08000abd 	.word	0x08000abd
 80006c4:	08000ae9 	.word	0x08000ae9
 80006c8:	08000b11 	.word	0x08000b11
 80006cc:	08000b39 	.word	0x08000b39
 80006d0:	08000b65 	.word	0x08000b65
 80006d4:	08000b91 	.word	0x08000b91
 80006d8:	08000bbd 	.word	0x08000bbd
 80006dc:	08000be5 	.word	0x08000be5
 80006e0:	08000c19 	.word	0x08000c19
 80006e4:	08000c35 	.word	0x08000c35
 80006e8:	08000c51 	.word	0x08000c51
 80006ec:	08000c6d 	.word	0x08000c6d
 80006f0:	08000ce5 	.word	0x08000ce5
 80006f4:	08000dcd 	.word	0x08000dcd
 80006f8:	08000e01 	.word	0x08000e01
 80006fc:	08000e01 	.word	0x08000e01
 8000700:	08000e01 	.word	0x08000e01
 8000704:	08000e01 	.word	0x08000e01
 8000708:	08000e01 	.word	0x08000e01
 800070c:	08000e01 	.word	0x08000e01
 8000710:	08000e01 	.word	0x08000e01
 8000714:	08000e01 	.word	0x08000e01
 8000718:	08000e01 	.word	0x08000e01
 800071c:	08000e01 	.word	0x08000e01
 8000720:	08000e01 	.word	0x08000e01
 8000724:	08000e01 	.word	0x08000e01
 8000728:	08000e01 	.word	0x08000e01
 800072c:	08000e01 	.word	0x08000e01
 8000730:	08000e01 	.word	0x08000e01
 8000734:	08000e01 	.word	0x08000e01
 8000738:	08000e01 	.word	0x08000e01
 800073c:	08000e01 	.word	0x08000e01
 8000740:	08000e01 	.word	0x08000e01
 8000744:	08000e01 	.word	0x08000e01
 8000748:	08000e01 	.word	0x08000e01
 800074c:	08000e01 	.word	0x08000e01
 8000750:	08000e01 	.word	0x08000e01
 8000754:	08000e01 	.word	0x08000e01
 8000758:	08000e01 	.word	0x08000e01
 800075c:	08000e01 	.word	0x08000e01
 8000760:	08000e01 	.word	0x08000e01
 8000764:	08000e01 	.word	0x08000e01
 8000768:	08000e01 	.word	0x08000e01
 800076c:	08000e01 	.word	0x08000e01
 8000770:	08000e01 	.word	0x08000e01
 8000774:	08000e01 	.word	0x08000e01
 8000778:	08000e01 	.word	0x08000e01
 800077c:	08000e01 	.word	0x08000e01
 8000780:	08000e01 	.word	0x08000e01
 8000784:	08000e01 	.word	0x08000e01
 8000788:	08000e01 	.word	0x08000e01
 800078c:	08000e01 	.word	0x08000e01
 8000790:	08000e01 	.word	0x08000e01
 8000794:	08000e01 	.word	0x08000e01
 8000798:	08000e01 	.word	0x08000e01
 800079c:	08000e01 	.word	0x08000e01
 80007a0:	08000e01 	.word	0x08000e01
 80007a4:	08000e01 	.word	0x08000e01
 80007a8:	08000e01 	.word	0x08000e01
 80007ac:	08000e01 	.word	0x08000e01
 80007b0:	08000e01 	.word	0x08000e01
 80007b4:	08000e01 	.word	0x08000e01
 80007b8:	08000e01 	.word	0x08000e01
 80007bc:	08000e01 	.word	0x08000e01
 80007c0:	08000e01 	.word	0x08000e01
 80007c4:	08000e01 	.word	0x08000e01
 80007c8:	08000e01 	.word	0x08000e01
 80007cc:	08000e01 	.word	0x08000e01
 80007d0:	08000e01 	.word	0x08000e01
 80007d4:	08000e01 	.word	0x08000e01
 80007d8:	08000e01 	.word	0x08000e01
 80007dc:	08000e01 	.word	0x08000e01
 80007e0:	08000e01 	.word	0x08000e01
 80007e4:	08000e01 	.word	0x08000e01
 80007e8:	08000e01 	.word	0x08000e01
 80007ec:	08000e01 	.word	0x08000e01
 80007f0:	08000e01 	.word	0x08000e01
 80007f4:	08000e01 	.word	0x08000e01
 80007f8:	08000e01 	.word	0x08000e01
 80007fc:	08000e01 	.word	0x08000e01
 8000800:	08000e01 	.word	0x08000e01
 8000804:	08000e01 	.word	0x08000e01
 8000808:	08000e01 	.word	0x08000e01
 800080c:	08000e01 	.word	0x08000e01
 8000810:	08000e01 	.word	0x08000e01
 8000814:	08000e01 	.word	0x08000e01
 8000818:	08000e01 	.word	0x08000e01
 800081c:	08000e01 	.word	0x08000e01
 8000820:	08000e01 	.word	0x08000e01
 8000824:	08000e01 	.word	0x08000e01
 8000828:	08000e01 	.word	0x08000e01
 800082c:	08000e01 	.word	0x08000e01
 8000830:	08000e01 	.word	0x08000e01
 8000834:	08000e01 	.word	0x08000e01
 8000838:	08000e01 	.word	0x08000e01
 800083c:	08000e01 	.word	0x08000e01
 8000840:	08000e01 	.word	0x08000e01
 8000844:	08000e01 	.word	0x08000e01
 8000848:	08000e01 	.word	0x08000e01
 800084c:	08000e01 	.word	0x08000e01
 8000850:	08000e01 	.word	0x08000e01
 8000854:	08000e01 	.word	0x08000e01
 8000858:	08000e01 	.word	0x08000e01
 800085c:	08000e01 	.word	0x08000e01
 8000860:	08000e01 	.word	0x08000e01
 8000864:	08000e01 	.word	0x08000e01
 8000868:	08000e01 	.word	0x08000e01
 800086c:	08000e01 	.word	0x08000e01
 8000870:	08000e01 	.word	0x08000e01
 8000874:	08000e01 	.word	0x08000e01
 8000878:	08000e01 	.word	0x08000e01
 800087c:	08000e01 	.word	0x08000e01
 8000880:	08000e01 	.word	0x08000e01
 8000884:	08000e01 	.word	0x08000e01
 8000888:	08000e01 	.word	0x08000e01
 800088c:	08000e01 	.word	0x08000e01
 8000890:	08000e01 	.word	0x08000e01
 8000894:	08000e01 	.word	0x08000e01
 8000898:	08000e01 	.word	0x08000e01
 800089c:	08000e01 	.word	0x08000e01
 80008a0:	08000e01 	.word	0x08000e01
 80008a4:	08000e01 	.word	0x08000e01
 80008a8:	08000e01 	.word	0x08000e01
 80008ac:	08000e01 	.word	0x08000e01
 80008b0:	08000e01 	.word	0x08000e01
 80008b4:	08000e01 	.word	0x08000e01
 80008b8:	08000e01 	.word	0x08000e01
 80008bc:	08000e01 	.word	0x08000e01
 80008c0:	08000e01 	.word	0x08000e01
 80008c4:	08000e01 	.word	0x08000e01
 80008c8:	08000e01 	.word	0x08000e01
 80008cc:	08000e01 	.word	0x08000e01
 80008d0:	08000e01 	.word	0x08000e01
 80008d4:	08000e01 	.word	0x08000e01
 80008d8:	08000e01 	.word	0x08000e01
 80008dc:	08000e01 	.word	0x08000e01
 80008e0:	08000e01 	.word	0x08000e01
 80008e4:	08000e01 	.word	0x08000e01
 80008e8:	08000e01 	.word	0x08000e01
 80008ec:	08000e01 	.word	0x08000e01
 80008f0:	08000e01 	.word	0x08000e01
 80008f4:	08000e01 	.word	0x08000e01
 80008f8:	08000e01 	.word	0x08000e01
 80008fc:	08000e01 	.word	0x08000e01
 8000900:	08000e01 	.word	0x08000e01
 8000904:	08000e01 	.word	0x08000e01
 8000908:	08000e01 	.word	0x08000e01
 800090c:	08000e01 	.word	0x08000e01
 8000910:	08000e01 	.word	0x08000e01
 8000914:	08000e01 	.word	0x08000e01
 8000918:	08000e01 	.word	0x08000e01
 800091c:	08000e01 	.word	0x08000e01
 8000920:	08000e01 	.word	0x08000e01
 8000924:	08000e01 	.word	0x08000e01
 8000928:	08000e01 	.word	0x08000e01
 800092c:	08000e01 	.word	0x08000e01
 8000930:	08000e01 	.word	0x08000e01
 8000934:	08000e01 	.word	0x08000e01
 8000938:	08000e01 	.word	0x08000e01
 800093c:	08000e01 	.word	0x08000e01
 8000940:	08000e01 	.word	0x08000e01
 8000944:	08000e01 	.word	0x08000e01
 8000948:	08000e01 	.word	0x08000e01
 800094c:	08000e01 	.word	0x08000e01
 8000950:	08000e01 	.word	0x08000e01
 8000954:	08000e01 	.word	0x08000e01
 8000958:	08000e01 	.word	0x08000e01
 800095c:	08000e01 	.word	0x08000e01
 8000960:	08000e01 	.word	0x08000e01
 8000964:	08000e01 	.word	0x08000e01
 8000968:	08000e01 	.word	0x08000e01
 800096c:	08000e01 	.word	0x08000e01
 8000970:	08000e01 	.word	0x08000e01
 8000974:	08000e01 	.word	0x08000e01
 8000978:	08000e01 	.word	0x08000e01
 800097c:	08000e01 	.word	0x08000e01
 8000980:	08000e01 	.word	0x08000e01
 8000984:	08000e01 	.word	0x08000e01
 8000988:	08000e01 	.word	0x08000e01
 800098c:	08000e01 	.word	0x08000e01
 8000990:	08000e01 	.word	0x08000e01
 8000994:	08000e01 	.word	0x08000e01
 8000998:	08000e01 	.word	0x08000e01
 800099c:	08000e01 	.word	0x08000e01
 80009a0:	08000e01 	.word	0x08000e01
 80009a4:	08000e01 	.word	0x08000e01
 80009a8:	08000e01 	.word	0x08000e01
 80009ac:	08000e01 	.word	0x08000e01
 80009b0:	08000e01 	.word	0x08000e01
 80009b4:	08000e01 	.word	0x08000e01
 80009b8:	08000def 	.word	0x08000def
 80009bc:	08000e01 	.word	0x08000e01
 80009c0:	08000e01 	.word	0x08000e01
 80009c4:	08000e01 	.word	0x08000e01
 80009c8:	08000e01 	.word	0x08000e01
 80009cc:	08000e01 	.word	0x08000e01
 80009d0:	08000e01 	.word	0x08000e01
 80009d4:	08000e01 	.word	0x08000e01
 80009d8:	08000e01 	.word	0x08000e01
 80009dc:	08000e01 	.word	0x08000e01
 80009e0:	08000e01 	.word	0x08000e01
 80009e4:	08000e01 	.word	0x08000e01
 80009e8:	08000e01 	.word	0x08000e01
 80009ec:	08000e01 	.word	0x08000e01
 80009f0:	08000e01 	.word	0x08000e01
 80009f4:	08000e01 	.word	0x08000e01
 80009f8:	08000ddd 	.word	0x08000ddd
	case 0x10: {
		printf("SDN1 ON\n");
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <HAL_UART_RxCpltCallback+0x3dc>)
 80009fe:	f015 fd4b 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a04:	2104      	movs	r1, #4
 8000a06:	2201      	movs	r2, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f008 f909 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000a0e:	e202      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a12:	f015 fd41 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a18:	2104      	movs	r1, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 f8ff 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000a22:	e1f8      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
 8000a24:	24000bec 	.word	0x24000bec
 8000a28:	240005ec 	.word	0x240005ec
 8000a2c:	08016c88 	.word	0x08016c88
 8000a30:	58020400 	.word	0x58020400
 8000a34:	08016c90 	.word	0x08016c90
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a38:	48b5      	ldr	r0, [pc, #724]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a3a:	f015 fd2d 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a3e:	4bb5      	ldr	r3, [pc, #724]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	2201      	movs	r2, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 f8eb 	bl	8008c20 <HAL_GPIO_WritePin>

		break;
 8000a4a:	e1e4      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a4c:	48b2      	ldr	r0, [pc, #712]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a4e:	f015 fd23 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a52:	4bb0      	ldr	r3, [pc, #704]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a54:	2120      	movs	r1, #32
 8000a56:	2200      	movs	r2, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f008 f8e1 	bl	8008c20 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a5e:	4bad      	ldr	r3, [pc, #692]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	2200      	movs	r2, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f008 f8db 	bl	8008c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a6a:	4bac      	ldr	r3, [pc, #688]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	2200      	movs	r2, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f008 f8d4 	bl	8008c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a78:	4ba8      	ldr	r3, [pc, #672]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 f8cd 	bl	8008c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a86:	4ba5      	ldr	r3, [pc, #660]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f008 f8c6 	bl	8008c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000a94:	4ba1      	ldr	r3, [pc, #644]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f008 f8c0 	bl	8008c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000aa0:	4b9e      	ldr	r3, [pc, #632]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f008 f8ba 	bl	8008c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aac:	4b9b      	ldr	r3, [pc, #620]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f008 f8b3 	bl	8008c20 <HAL_GPIO_WritePin>

		break;
 8000aba:	e1ac      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000abc:	4898      	ldr	r0, [pc, #608]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000abe:	f015 fceb 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ac2:	4b96      	ldr	r3, [pc, #600]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f008 f8a8 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000ad0:	e1a1      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ad2:	4894      	ldr	r0, [pc, #592]	; (8000d24 <HAL_UART_RxCpltCallback+0x6d4>)
 8000ad4:	f015 fce0 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ad8:	4b90      	ldr	r3, [pc, #576]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f008 f89d 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000ae6:	e196      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000ae8:	488f      	ldr	r0, [pc, #572]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aea:	f015 fcd5 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000aee:	4b8b      	ldr	r3, [pc, #556]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f008 f893 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000afa:	e18c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000afc:	488b      	ldr	r0, [pc, #556]	; (8000d2c <HAL_UART_RxCpltCallback+0x6dc>)
 8000afe:	f015 fccb 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b02:	4b86      	ldr	r3, [pc, #536]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	2200      	movs	r2, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f008 f889 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000b0e:	e182      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b10:	4887      	ldr	r0, [pc, #540]	; (8000d30 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b12:	f015 fcc1 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b16:	4b81      	ldr	r3, [pc, #516]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f008 f87f 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000b22:	e178      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b24:	4883      	ldr	r0, [pc, #524]	; (8000d34 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b26:	f015 fcb7 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b2a:	4b7c      	ldr	r3, [pc, #496]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f008 f875 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000b36:	e16e      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b38:	487f      	ldr	r0, [pc, #508]	; (8000d38 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b3a:	f015 fcad 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b3e:	4b77      	ldr	r3, [pc, #476]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	2201      	movs	r2, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f008 f86a 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000b4c:	e163      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b4e:	487b      	ldr	r0, [pc, #492]	; (8000d3c <HAL_UART_RxCpltCallback+0x6ec>)
 8000b50:	f015 fca2 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b54:	4b71      	ldr	r3, [pc, #452]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f008 f85f 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000b62:	e158      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b64:	4876      	ldr	r0, [pc, #472]	; (8000d40 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b66:	f015 fc97 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b6a:	4b6c      	ldr	r3, [pc, #432]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	2201      	movs	r2, #1
 8000b72:	4618      	mov	r0, r3
 8000b74:	f008 f854 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000b78:	e14d      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b7a:	4872      	ldr	r0, [pc, #456]	; (8000d44 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b7c:	f015 fc8c 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b80:	4b66      	ldr	r3, [pc, #408]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	2200      	movs	r2, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f008 f849 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000b8e:	e142      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000b90:	486d      	ldr	r0, [pc, #436]	; (8000d48 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b92:	f015 fc81 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b96:	4b61      	ldr	r3, [pc, #388]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f008 f83e 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000ba4:	e137      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000ba6:	4869      	ldr	r0, [pc, #420]	; (8000d4c <HAL_UART_RxCpltCallback+0x6fc>)
 8000ba8:	f015 fc76 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bac:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f008 f833 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000bba:	e12c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bbc:	4864      	ldr	r0, [pc, #400]	; (8000d50 <HAL_UART_RxCpltCallback+0x700>)
 8000bbe:	f015 fc6b 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bc2:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f008 f829 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000bce:	e122      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bd0:	4860      	ldr	r0, [pc, #384]	; (8000d54 <HAL_UART_RxCpltCallback+0x704>)
 8000bd2:	f015 fc61 	bl	8016498 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bd6:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f008 f81f 	bl	8008c20 <HAL_GPIO_WritePin>
		break;
 8000be2:	e118      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000be4:	485c      	ldr	r0, [pc, #368]	; (8000d58 <HAL_UART_RxCpltCallback+0x708>)
 8000be6:	f015 fc57 	bl	8016498 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000bea:	485c      	ldr	r0, [pc, #368]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000bec:	f00d fb68 	bl	800e2c0 <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	485a      	ldr	r0, [pc, #360]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000bfc:	f004 fc80 	bl	8005500 <HAL_DAC_Start_DMA>
		break;
 8000c00:	e109      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c02:	4859      	ldr	r0, [pc, #356]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000c04:	f015 fc48 	bl	8016498 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000c08:	4854      	ldr	r0, [pc, #336]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000c0a:	f00d fbc9 	bl	800e3a0 <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4854      	ldr	r0, [pc, #336]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000c12:	f004 fd35 	bl	8005680 <HAL_DAC_Stop_DMA>
		break;
 8000c16:	e0fe      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c18:	4854      	ldr	r0, [pc, #336]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000c1a:	f015 fc3d 	bl	8016498 <puts>
		ERPA_ON = 1;
 8000c1e:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
		break;
 8000c24:	e0f7      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c26:	4853      	ldr	r0, [pc, #332]	; (8000d74 <HAL_UART_RxCpltCallback+0x724>)
 8000c28:	f015 fc36 	bl	8016498 <puts>
		ERPA_ON = 0;
 8000c2c:	4b50      	ldr	r3, [pc, #320]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
		break;
 8000c32:	e0f0      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c34:	4850      	ldr	r0, [pc, #320]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c36:	f015 fc2f 	bl	8016498 <puts>
		PMT_ON = 1;
 8000c3a:	4b50      	ldr	r3, [pc, #320]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
		break;
 8000c40:	e0e9      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c42:	484f      	ldr	r0, [pc, #316]	; (8000d80 <HAL_UART_RxCpltCallback+0x730>)
 8000c44:	f015 fc28 	bl	8016498 <puts>
		PMT_ON = 0;
 8000c48:	4b4c      	ldr	r3, [pc, #304]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		break;
 8000c4e:	e0e2      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c50:	484c      	ldr	r0, [pc, #304]	; (8000d84 <HAL_UART_RxCpltCallback+0x734>)
 8000c52:	f015 fc21 	bl	8016498 <puts>
		HK_ON = 1;
 8000c56:	4b4c      	ldr	r3, [pc, #304]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
		break;
 8000c5c:	e0db      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c5e:	484b      	ldr	r0, [pc, #300]	; (8000d8c <HAL_UART_RxCpltCallback+0x73c>)
 8000c60:	f015 fc1a 	bl	8016498 <puts>
		HK_ON = 0;
 8000c64:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
		break;
 8000c6a:	e0d4      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000c6c:	4848      	ldr	r0, [pc, #288]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c6e:	f015 fc13 	bl	8016498 <puts>
		if (step < 17) {
 8000c72:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b10      	cmp	r3, #16
 8000c78:	f200 80c6 	bhi.w	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
			step+=2;
 8000c7c:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3302      	adds	r3, #2
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b43      	ldr	r3, [pc, #268]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c86:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000c88:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	4832      	ldr	r0, [pc, #200]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000c9a:	f004 fd94 	bl	80057c6 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4830      	ldr	r0, [pc, #192]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000ca2:	f004 fbd5 	bl	8005450 <HAL_DAC_Start>
		}
		break;
 8000ca6:	e0af      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000ca8:	483b      	ldr	r0, [pc, #236]	; (8000d98 <HAL_UART_RxCpltCallback+0x748>)
 8000caa:	f015 fbf5 	bl	8016498 <puts>
		if (step > 3) {
 8000cae:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	f240 80aa 	bls.w	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
			step-=2;
 8000cb8:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cc2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cc4:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4823      	ldr	r0, [pc, #140]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000cd6:	f004 fd76 	bl	80057c6 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4821      	ldr	r0, [pc, #132]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000cde:	f004 fbb7 	bl	8005450 <HAL_DAC_Start>
		}
		break;
 8000ce2:	e093      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ce4:	482d      	ldr	r0, [pc, #180]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000ce6:	f015 fbd7 	bl	8016498 <puts>
		if (cadence <= 50000){
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	f200 808c 	bhi.w	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
			cadence *= 2;
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000d00:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000d0c:	e080      	b.n	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
 8000d0e:	bf00      	nop
 8000d10:	08016c9c 	.word	0x08016c9c
 8000d14:	58020400 	.word	0x58020400
 8000d18:	08016ca8 	.word	0x08016ca8
 8000d1c:	58020800 	.word	0x58020800
 8000d20:	08016cb4 	.word	0x08016cb4
 8000d24:	08016cc0 	.word	0x08016cc0
 8000d28:	08016cd0 	.word	0x08016cd0
 8000d2c:	08016cdc 	.word	0x08016cdc
 8000d30:	08016ce8 	.word	0x08016ce8
 8000d34:	08016cf4 	.word	0x08016cf4
 8000d38:	08016d04 	.word	0x08016d04
 8000d3c:	08016d10 	.word	0x08016d10
 8000d40:	08016d1c 	.word	0x08016d1c
 8000d44:	08016d28 	.word	0x08016d28
 8000d48:	08016d34 	.word	0x08016d34
 8000d4c:	08016d44 	.word	0x08016d44
 8000d50:	08016d54 	.word	0x08016d54
 8000d54:	08016d60 	.word	0x08016d60
 8000d58:	08016d70 	.word	0x08016d70
 8000d5c:	24000554 	.word	0x24000554
 8000d60:	24000010 	.word	0x24000010
 8000d64:	240002f4 	.word	0x240002f4
 8000d68:	08016d80 	.word	0x08016d80
 8000d6c:	08016d90 	.word	0x08016d90
 8000d70:	24000be3 	.word	0x24000be3
 8000d74:	08016d98 	.word	0x08016d98
 8000d78:	08016da4 	.word	0x08016da4
 8000d7c:	24000be2 	.word	0x24000be2
 8000d80:	08016dac 	.word	0x08016dac
 8000d84:	08016db4 	.word	0x08016db4
 8000d88:	24000be4 	.word	0x24000be4
 8000d8c:	08016dbc 	.word	0x08016dbc
 8000d90:	08016dc4 	.word	0x08016dc4
 8000d94:	2400000c 	.word	0x2400000c
 8000d98:	08016dcc 	.word	0x08016dcc
 8000d9c:	08016dd8 	.word	0x08016dd8
 8000da0:	24000008 	.word	0x24000008
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000da4:	481e      	ldr	r0, [pc, #120]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000da6:	f015 fb77 	bl	8016498 <puts>
		if (cadence >= 6250){
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f641 0269 	movw	r2, #6249	; 0x1869
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d92e      	bls.n	8000e14 <HAL_UART_RxCpltCallback+0x7c4>
			cadence /= 2;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dbe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000dc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dca:	e023      	b.n	8000e14 <HAL_UART_RxCpltCallback+0x7c4>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000dcc:	4816      	ldr	r0, [pc, #88]	; (8000e28 <HAL_UART_RxCpltCallback+0x7d8>)
 8000dce:	f015 fb63 	bl	8016498 <puts>
		// TODO: Exit stop mode
		break;
 8000dd2:	e020      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <HAL_UART_RxCpltCallback+0x7dc>)
 8000dd6:	f015 fb5f 	bl	8016498 <puts>
		// TODO: Enter stop mode
		break;
 8000dda:	e01c      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000ddc:	4814      	ldr	r0, [pc, #80]	; (8000e30 <HAL_UART_RxCpltCallback+0x7e0>)
 8000dde:	f015 fb5b 	bl	8016498 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_UART_RxCpltCallback+0x7e4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f013 fbc2 	bl	8014570 <xTaskResumeFromISR>
		break;
 8000dec:	e013      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <HAL_UART_RxCpltCallback+0x7e8>)
 8000df0:	f015 fb52 	bl	8016498 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_UART_RxCpltCallback+0x7ec>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f013 fbb9 	bl	8014570 <xTaskResumeFromISR>
		break;
 8000dfe:	e00a      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
	}
	default:{
		printf("Unknown Command\n");
 8000e00:	480f      	ldr	r0, [pc, #60]	; (8000e40 <HAL_UART_RxCpltCallback+0x7f0>)
 8000e02:	f015 fb49 	bl	8016498 <puts>
		break;
 8000e06:	e006      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e08:	bf00      	nop
 8000e0a:	e004      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e0c:	bf00      	nop
 8000e0e:	e002      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e10:	bf00      	nop
 8000e12:	e000      	b.n	8000e16 <HAL_UART_RxCpltCallback+0x7c6>
		break;
 8000e14:	bf00      	nop
	}
	}
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	08016de4 	.word	0x08016de4
 8000e24:	24000008 	.word	0x24000008
 8000e28:	08016df0 	.word	0x08016df0
 8000e2c:	08016e00 	.word	0x08016e00
 8000e30:	08016e10 	.word	0x08016e10
 8000e34:	24000708 	.word	0x24000708
 8000e38:	08016e1c 	.word	0x08016e1c
 8000e3c:	24000968 	.word	0x24000968
 8000e40:	08016e28 	.word	0x08016e28

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f002 fd6e 	bl	8003928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f8b6 	bl	8000fbc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e50:	f000 f932 	bl	80010b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e54:	f000 fe8c 	bl	8001b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e58:	f000 fe52 	bl	8001b00 <MX_DMA_Init>
  MX_TIM3_Init();
 8000e5c:	f000 fdb6 	bl	80019cc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e60:	f000 fe02 	bl	8001a68 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e64:	f000 fb3e 	bl	80014e4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e68:	f000 fc34 	bl	80016d4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e6c:	f000 fd38 	bl	80018e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e70:	f000 fc88 	bl	8001784 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000e74:	f000 fa72 	bl	800135c <MX_ADC3_Init>
  MX_ADC1_Init();
 8000e78:	f000 f94e 	bl	8001118 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e7c:	f000 fb00 	bl	8001480 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000e80:	f000 fbd0 	bl	8001624 <MX_SPI1_Init>
  MX_RTC_Init();
 8000e84:	f000 fb70 	bl	8001568 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000e88:	f001 f866 	bl	8001f58 <handshake>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <main+0x52>
	{
		Error_Handler();
 8000e92:	f001 fe33 	bl	8002afc <Error_Handler>
	}


	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e96:	2100      	movs	r1, #0
 8000e98:	482d      	ldr	r0, [pc, #180]	; (8000f50 <main+0x10c>)
 8000e9a:	f00d fb21 	bl	800e4e0 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	482c      	ldr	r0, [pc, #176]	; (8000f54 <main+0x110>)
 8000ea2:	f00d fb1d 	bl	800e4e0 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	482b      	ldr	r0, [pc, #172]	; (8000f58 <main+0x114>)
 8000eaa:	f00d fb19 	bl	800e4e0 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eae:	f011 fd11 	bl	80128d4 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	2010      	movs	r0, #16
 8000eb8:	f011 ff2e 	bl	8012d18 <osMessageQueueNew>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <main+0x118>)
 8000ec0:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000ec2:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <main+0x11c>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4827      	ldr	r0, [pc, #156]	; (8000f64 <main+0x120>)
 8000ec8:	f011 fd4e 	bl	8012968 <osThreadNew>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a26      	ldr	r2, [pc, #152]	; (8000f68 <main+0x124>)
 8000ed0:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ed2:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <main+0x128>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4826      	ldr	r0, [pc, #152]	; (8000f70 <main+0x12c>)
 8000ed8:	f011 fd46 	bl	8012968 <osThreadNew>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <main+0x130>)
 8000ee0:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000ee2:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <main+0x134>)
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4825      	ldr	r0, [pc, #148]	; (8000f7c <main+0x138>)
 8000ee8:	f011 fd3e 	bl	8012968 <osThreadNew>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <main+0x13c>)
 8000ef0:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <main+0x140>)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4824      	ldr	r0, [pc, #144]	; (8000f88 <main+0x144>)
 8000ef8:	f011 fd36 	bl	8012968 <osThreadNew>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <main+0x148>)
 8000f00:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f02:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <main+0x14c>)
 8000f04:	2100      	movs	r1, #0
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <main+0x150>)
 8000f08:	f011 fd2e 	bl	8012968 <osThreadNew>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <main+0x154>)
 8000f10:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <main+0x158>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4822      	ldr	r0, [pc, #136]	; (8000fa0 <main+0x15c>)
 8000f18:	f011 fd26 	bl	8012968 <osThreadNew>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <main+0x160>)
 8000f20:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f22:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <main+0x164>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4821      	ldr	r0, [pc, #132]	; (8000fac <main+0x168>)
 8000f28:	f011 fd1e 	bl	8012968 <osThreadNew>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <main+0x16c>)
 8000f30:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f011 fe06 	bl	8012b44 <osEventFlagsNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <main+0x170>)
 8000f3c:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f3e:	f001 f899 	bl	8002074 <system_setup>
	printf("Starting kernal...\n");
 8000f42:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <main+0x174>)
 8000f44:	f015 faa8 	bl	8016498 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f48:	f011 fce8 	bl	801291c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f4c:	e7fe      	b.n	8000f4c <main+0x108>
 8000f4e:	bf00      	nop
 8000f50:	24000508 	.word	0x24000508
 8000f54:	24000554 	.word	0x24000554
 8000f58:	240005a0 	.word	0x240005a0
 8000f5c:	24000bcc 	.word	0x24000bcc
 8000f60:	08016e84 	.word	0x08016e84
 8000f64:	080027e9 	.word	0x080027e9
 8000f68:	240006f8 	.word	0x240006f8
 8000f6c:	08016ea8 	.word	0x08016ea8
 8000f70:	0800282d 	.word	0x0800282d
 8000f74:	240006fc 	.word	0x240006fc
 8000f78:	08016ecc 	.word	0x08016ecc
 8000f7c:	08002871 	.word	0x08002871
 8000f80:	24000700 	.word	0x24000700
 8000f84:	08016ef0 	.word	0x08016ef0
 8000f88:	080028b5 	.word	0x080028b5
 8000f8c:	24000704 	.word	0x24000704
 8000f90:	08016f14 	.word	0x08016f14
 8000f94:	080028d9 	.word	0x080028d9
 8000f98:	24000708 	.word	0x24000708
 8000f9c:	08016f38 	.word	0x08016f38
 8000fa0:	08002981 	.word	0x08002981
 8000fa4:	24000968 	.word	0x24000968
 8000fa8:	08016f5c 	.word	0x08016f5c
 8000fac:	08002a29 	.word	0x08002a29
 8000fb0:	24000bc8 	.word	0x24000bc8
 8000fb4:	24000be8 	.word	0x24000be8
 8000fb8:	08016e38 	.word	0x08016e38

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b09c      	sub	sp, #112	; 0x70
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	224c      	movs	r2, #76	; 0x4c
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f015 f90e 	bl	80161ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f015 f908 	bl	80161ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f008 fc45 	bl	800986c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <SystemClock_Config+0xf4>)
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	4a31      	ldr	r2, [pc, #196]	; (80010b0 <SystemClock_Config+0xf4>)
 8000fec:	f023 0301 	bic.w	r3, r3, #1
 8000ff0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <SystemClock_Config+0xf4>)
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <SystemClock_Config+0xf8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <SystemClock_Config+0xf8>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <SystemClock_Config+0xf8>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001018:	bf00      	nop
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <SystemClock_Config+0xf8>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001026:	d1f8      	bne.n	800101a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001028:	2309      	movs	r3, #9
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800102c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	2302      	movs	r3, #2
 800103c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800103e:	2304      	movs	r3, #4
 8001040:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001042:	2320      	movs	r3, #32
 8001044:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001046:	2304      	movs	r3, #4
 8001048:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104a:	2304      	movs	r3, #4
 800104c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800104e:	2302      	movs	r3, #2
 8001050:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001052:	2308      	movs	r3, #8
 8001054:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001056:	2300      	movs	r3, #0
 8001058:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4618      	mov	r0, r3
 8001064:	f008 fc3c 	bl	80098e0 <HAL_RCC_OscConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800106e:	f001 fd45 	bl	8002afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	233f      	movs	r3, #63	; 0x3f
 8001074:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001076:	2303      	movs	r3, #3
 8001078:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001086:	2340      	movs	r3, #64	; 0x40
 8001088:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800108a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2101      	movs	r1, #1
 8001098:	4618      	mov	r0, r3
 800109a:	f009 f87b 	bl	800a194 <HAL_RCC_ClockConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80010a4:	f001 fd2a 	bl	8002afc <Error_Handler>
  }
}
 80010a8:	bf00      	nop
 80010aa:	3770      	adds	r7, #112	; 0x70
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	58000400 	.word	0x58000400
 80010b4:	58024800 	.word	0x58024800

080010b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0b0      	sub	sp, #192	; 0xc0
 80010bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	22c0      	movs	r2, #192	; 0xc0
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f015 f891 	bl	80161ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80010d6:	2304      	movs	r3, #4
 80010d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 80010da:	2320      	movs	r3, #32
 80010dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80010de:	2308      	movs	r3, #8
 80010e0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fc16 	bl	800a930 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800110a:	f001 fcf7 	bl	8002afc <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	37c0      	adds	r7, #192	; 0xc0
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800113c:	4b7a      	ldr	r3, [pc, #488]	; (8001328 <MX_ADC1_Init+0x210>)
 800113e:	4a7b      	ldr	r2, [pc, #492]	; (800132c <MX_ADC1_Init+0x214>)
 8001140:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001142:	4b79      	ldr	r3, [pc, #484]	; (8001328 <MX_ADC1_Init+0x210>)
 8001144:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001148:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114a:	4b77      	ldr	r3, [pc, #476]	; (8001328 <MX_ADC1_Init+0x210>)
 800114c:	2208      	movs	r2, #8
 800114e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001150:	4b75      	ldr	r3, [pc, #468]	; (8001328 <MX_ADC1_Init+0x210>)
 8001152:	2201      	movs	r2, #1
 8001154:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001156:	4b74      	ldr	r3, [pc, #464]	; (8001328 <MX_ADC1_Init+0x210>)
 8001158:	2204      	movs	r2, #4
 800115a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800115c:	4b72      	ldr	r3, [pc, #456]	; (8001328 <MX_ADC1_Init+0x210>)
 800115e:	2200      	movs	r2, #0
 8001160:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001162:	4b71      	ldr	r3, [pc, #452]	; (8001328 <MX_ADC1_Init+0x210>)
 8001164:	2201      	movs	r2, #1
 8001166:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001168:	4b6f      	ldr	r3, [pc, #444]	; (8001328 <MX_ADC1_Init+0x210>)
 800116a:	220b      	movs	r2, #11
 800116c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116e:	4b6e      	ldr	r3, [pc, #440]	; (8001328 <MX_ADC1_Init+0x210>)
 8001170:	2200      	movs	r2, #0
 8001172:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001174:	4b6c      	ldr	r3, [pc, #432]	; (8001328 <MX_ADC1_Init+0x210>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117a:	4b6b      	ldr	r3, [pc, #428]	; (8001328 <MX_ADC1_Init+0x210>)
 800117c:	2200      	movs	r2, #0
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001180:	4b69      	ldr	r3, [pc, #420]	; (8001328 <MX_ADC1_Init+0x210>)
 8001182:	2203      	movs	r2, #3
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001186:	4b68      	ldr	r3, [pc, #416]	; (8001328 <MX_ADC1_Init+0x210>)
 8001188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800118e:	4b66      	ldr	r3, [pc, #408]	; (8001328 <MX_ADC1_Init+0x210>)
 8001190:	2200      	movs	r2, #0
 8001192:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001194:	4b64      	ldr	r3, [pc, #400]	; (8001328 <MX_ADC1_Init+0x210>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119c:	4862      	ldr	r0, [pc, #392]	; (8001328 <MX_ADC1_Init+0x210>)
 800119e:	f002 fe4f 	bl	8003e40 <HAL_ADC_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011a8:	f001 fca8 	bl	8002afc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	485c      	ldr	r0, [pc, #368]	; (8001328 <MX_ADC1_Init+0x210>)
 80011b8:	f003 ff6a 	bl	8005090 <HAL_ADCEx_MultiModeConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011c2:	f001 fc9b 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011c6:	4b5a      	ldr	r3, [pc, #360]	; (8001330 <MX_ADC1_Init+0x218>)
 80011c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ca:	2306      	movs	r3, #6
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80011ce:	2307      	movs	r3, #7
 80011d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011d6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d8:	2304      	movs	r3, #4
 80011da:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	484f      	ldr	r0, [pc, #316]	; (8001328 <MX_ADC1_Init+0x210>)
 80011ea:	f003 f8ad 	bl	8004348 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80011f4:	f001 fc82 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011f8:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <MX_ADC1_Init+0x21c>)
 80011fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011fc:	230c      	movs	r3, #12
 80011fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	4848      	ldr	r0, [pc, #288]	; (8001328 <MX_ADC1_Init+0x210>)
 8001206:	f003 f89f 	bl	8004348 <HAL_ADC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001210:	f001 fc74 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001214:	4b48      	ldr	r3, [pc, #288]	; (8001338 <MX_ADC1_Init+0x220>)
 8001216:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001218:	2312      	movs	r3, #18
 800121a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4841      	ldr	r0, [pc, #260]	; (8001328 <MX_ADC1_Init+0x210>)
 8001222:	f003 f891 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800122c:	f001 fc66 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001230:	4b42      	ldr	r3, [pc, #264]	; (800133c <MX_ADC1_Init+0x224>)
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001234:	2318      	movs	r3, #24
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	483a      	ldr	r0, [pc, #232]	; (8001328 <MX_ADC1_Init+0x210>)
 800123e:	f003 f883 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001248:	f001 fc58 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800124c:	4b3c      	ldr	r3, [pc, #240]	; (8001340 <MX_ADC1_Init+0x228>)
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001254:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	4833      	ldr	r0, [pc, #204]	; (8001328 <MX_ADC1_Init+0x210>)
 800125c:	f003 f874 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001266:	f001 fc49 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <MX_ADC1_Init+0x22c>)
 800126c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800126e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	482b      	ldr	r0, [pc, #172]	; (8001328 <MX_ADC1_Init+0x210>)
 800127a:	f003 f865 	bl	8004348 <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001284:	f001 fc3a 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <MX_ADC1_Init+0x230>)
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800128c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001290:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4824      	ldr	r0, [pc, #144]	; (8001328 <MX_ADC1_Init+0x210>)
 8001298:	f003 f856 	bl	8004348 <HAL_ADC_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012a2:	f001 fc2b 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_ADC1_Init+0x234>)
 80012a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012aa:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	481c      	ldr	r0, [pc, #112]	; (8001328 <MX_ADC1_Init+0x210>)
 80012b6:	f003 f847 	bl	8004348 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80012c0:	f001 fc1c 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <MX_ADC1_Init+0x238>)
 80012c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012c8:	f44f 738c 	mov.w	r3, #280	; 0x118
 80012cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ce:	463b      	mov	r3, r7
 80012d0:	4619      	mov	r1, r3
 80012d2:	4815      	ldr	r0, [pc, #84]	; (8001328 <MX_ADC1_Init+0x210>)
 80012d4:	f003 f838 	bl	8004348 <HAL_ADC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80012de:	f001 fc0d 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_ADC1_Init+0x23c>)
 80012e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80012e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_ADC1_Init+0x210>)
 80012f2:	f003 f829 	bl	8004348 <HAL_ADC_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80012fc:	f001 fbfe 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_ADC1_Init+0x240>)
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001304:	f240 2306 	movw	r3, #518	; 0x206
 8001308:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_ADC1_Init+0x210>)
 8001310:	f003 f81a 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800131a:	f001 fbef 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2400013c 	.word	0x2400013c
 800132c:	40022000 	.word	0x40022000
 8001330:	0c900008 	.word	0x0c900008
 8001334:	10c00010 	.word	0x10c00010
 8001338:	14f00020 	.word	0x14f00020
 800133c:	1d500080 	.word	0x1d500080
 8001340:	21800100 	.word	0x21800100
 8001344:	25b00200 	.word	0x25b00200
 8001348:	2a000400 	.word	0x2a000400
 800134c:	2e300800 	.word	0x2e300800
 8001350:	3ac04000 	.word	0x3ac04000
 8001354:	3ef08000 	.word	0x3ef08000
 8001358:	47520000 	.word	0x47520000

0800135c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <MX_ADC3_Init+0x110>)
 8001376:	4a3e      	ldr	r2, [pc, #248]	; (8001470 <MX_ADC3_Init+0x114>)
 8001378:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <MX_ADC3_Init+0x110>)
 800137c:	2208      	movs	r2, #8
 800137e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001380:	4b3a      	ldr	r3, [pc, #232]	; (800146c <MX_ADC3_Init+0x110>)
 8001382:	2201      	movs	r2, #1
 8001384:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001386:	4b39      	ldr	r3, [pc, #228]	; (800146c <MX_ADC3_Init+0x110>)
 8001388:	2204      	movs	r2, #4
 800138a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <MX_ADC3_Init+0x110>)
 800138e:	2200      	movs	r2, #0
 8001390:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001392:	4b36      	ldr	r3, [pc, #216]	; (800146c <MX_ADC3_Init+0x110>)
 8001394:	2201      	movs	r2, #1
 8001396:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <MX_ADC3_Init+0x110>)
 800139a:	2204      	movs	r2, #4
 800139c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800139e:	4b33      	ldr	r3, [pc, #204]	; (800146c <MX_ADC3_Init+0x110>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <MX_ADC3_Init+0x110>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <MX_ADC3_Init+0x110>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <MX_ADC3_Init+0x110>)
 80013b2:	2203      	movs	r2, #3
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <MX_ADC3_Init+0x110>)
 80013b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <MX_ADC3_Init+0x110>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <MX_ADC3_Init+0x110>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013cc:	4827      	ldr	r0, [pc, #156]	; (800146c <MX_ADC3_Init+0x110>)
 80013ce:	f002 fd37 	bl	8003e40 <HAL_ADC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80013d8:	f001 fb90 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <MX_ADC3_Init+0x118>)
 80013de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e0:	2306      	movs	r3, #6
 80013e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80013e4:	2307      	movs	r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ee:	2304      	movs	r3, #4
 80013f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	481b      	ldr	r0, [pc, #108]	; (800146c <MX_ADC3_Init+0x110>)
 8001400:	f002 ffa2 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800140a:	f001 fb77 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_ADC3_Init+0x11c>)
 8001410:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001412:	230c      	movs	r3, #12
 8001414:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4814      	ldr	r0, [pc, #80]	; (800146c <MX_ADC3_Init+0x110>)
 800141c:	f002 ff94 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001426:	f001 fb69 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800142a:	2301      	movs	r3, #1
 800142c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800142e:	2312      	movs	r3, #18
 8001430:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_ADC3_Init+0x110>)
 8001438:	f002 ff86 	bl	8004348 <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001442:	f001 fb5b 	bl	8002afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <MX_ADC3_Init+0x120>)
 8001448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800144a:	2318      	movs	r3, #24
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_ADC3_Init+0x110>)
 8001454:	f002 ff78 	bl	8004348 <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800145e:	f001 fb4d 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	240001a0 	.word	0x240001a0
 8001470:	58026000 	.word	0x58026000
 8001474:	cb840000 	.word	0xcb840000
 8001478:	cfb80000 	.word	0xcfb80000
 800147c:	04300002 	.word	0x04300002

08001480 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2224      	movs	r2, #36	; 0x24
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f014 fead 	bl	80161ec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_DAC1_Init+0x5c>)
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <MX_DAC1_Init+0x60>)
 8001496:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001498:	4810      	ldr	r0, [pc, #64]	; (80014dc <MX_DAC1_Init+0x5c>)
 800149a:	f003 ffb7 	bl	800540c <HAL_DAC_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014a4:	f001 fb2a 	bl	8002afc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014ac:	230a      	movs	r3, #10
 80014ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014b4:	2301      	movs	r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_DAC1_Init+0x5c>)
 80014c4:	f004 f9d2 	bl	800586c <HAL_DAC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80014ce:	f001 fb15 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	240002f4 	.word	0x240002f4
 80014e0:	40007400 	.word	0x40007400

080014e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_I2C1_Init+0x78>)
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <MX_I2C1_Init+0x7c>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010030E;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_I2C1_Init+0x78>)
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <MX_I2C1_Init+0x80>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_I2C1_Init+0x78>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_I2C1_Init+0x78>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_I2C1_Init+0x78>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_I2C1_Init+0x78>)
 8001508:	2200      	movs	r2, #0
 800150a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_I2C1_Init+0x78>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_I2C1_Init+0x78>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_I2C1_Init+0x78>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800151e:	480f      	ldr	r0, [pc, #60]	; (800155c <MX_I2C1_Init+0x78>)
 8001520:	f007 fb98 	bl	8008c54 <HAL_I2C_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800152a:	f001 fae7 	bl	8002afc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800152e:	2100      	movs	r1, #0
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <MX_I2C1_Init+0x78>)
 8001532:	f008 f8df 	bl	80096f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800153c:	f001 fade 	bl	8002afc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001540:	2100      	movs	r1, #0
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_I2C1_Init+0x78>)
 8001544:	f008 f921 	bl	800978a <HAL_I2CEx_ConfigDigitalFilter>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800154e:	f001 fad5 	bl	8002afc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001552:	2001      	movs	r0, #1
 8001554:	f008 f966 	bl	8009824 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	24000380 	.word	0x24000380
 8001560:	40005400 	.word	0x40005400
 8001564:	0010030e 	.word	0x0010030e

08001568 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800157c:	2300      	movs	r3, #0
 800157e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <MX_RTC_Init+0xb4>)
 8001582:	4a27      	ldr	r2, [pc, #156]	; (8001620 <MX_RTC_Init+0xb8>)
 8001584:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <MX_RTC_Init+0xb4>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <MX_RTC_Init+0xb4>)
 800158e:	2220      	movs	r2, #32
 8001590:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1000;
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_RTC_Init+0xb4>)
 8001594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001598:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_RTC_Init+0xb4>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_RTC_Init+0xb4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_RTC_Init+0xb4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_RTC_Init+0xb4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015b2:	481a      	ldr	r0, [pc, #104]	; (800161c <MX_RTC_Init+0xb4>)
 80015b4:	f00b feba 	bl	800d32c <HAL_RTC_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80015be:	f001 fa9d 	bl	8002afc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2201      	movs	r2, #1
 80015da:	4619      	mov	r1, r3
 80015dc:	480f      	ldr	r0, [pc, #60]	; (800161c <MX_RTC_Init+0xb4>)
 80015de:	f00b ff27 	bl	800d430 <HAL_RTC_SetTime>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80015e8:	f001 fa88 	bl	8002afc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80015ec:	2305      	movs	r3, #5
 80015ee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80015f0:	2305      	movs	r3, #5
 80015f2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 80015f4:	2331      	movs	r3, #49	; 0x31
 80015f6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80015f8:	2324      	movs	r3, #36	; 0x24
 80015fa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015fc:	463b      	mov	r3, r7
 80015fe:	2201      	movs	r2, #1
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <MX_RTC_Init+0xb4>)
 8001604:	f00c f80e 	bl	800d624 <HAL_RTC_SetDate>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800160e:	f001 fa75 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	240003d4 	.word	0x240003d4
 8001620:	58004000 	.word	0x58004000

08001624 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <MX_SPI1_Init+0xa8>)
 800162a:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <MX_SPI1_Init+0xac>)
 800162c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800162e:	4b27      	ldr	r3, [pc, #156]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001630:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001638:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800163c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800163e:	4b23      	ldr	r3, [pc, #140]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001640:	220f      	movs	r2, #15
 8001642:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <MX_SPI1_Init+0xa8>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001652:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001656:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_SPI1_Init+0xa8>)
 800165a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800165e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_SPI1_Init+0xa8>)
 800166e:	2200      	movs	r2, #0
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_SPI1_Init+0xa8>)
 800167a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001682:	2200      	movs	r2, #0
 8001684:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001688:	2200      	movs	r2, #0
 800168a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_SPI1_Init+0xa8>)
 800168e:	2200      	movs	r2, #0
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_SPI1_Init+0xa8>)
 8001694:	2200      	movs	r2, #0
 8001696:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_SPI1_Init+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_SPI1_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_SPI1_Init+0xa8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_SPI1_Init+0xa8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_SPI1_Init+0xa8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_SPI1_Init+0xa8>)
 80016b8:	f00c f95a 	bl	800d970 <HAL_SPI_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80016c2:	f001 fa1b 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	240003f8 	.word	0x240003f8
 80016d0:	40013000 	.word	0x40013000

080016d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <MX_SPI2_Init+0xa8>)
 80016da:	4a29      	ldr	r2, [pc, #164]	; (8001780 <MX_SPI2_Init+0xac>)
 80016dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <MX_SPI2_Init+0xa8>)
 80016e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016e6:	4b25      	ldr	r3, [pc, #148]	; (800177c <MX_SPI2_Init+0xa8>)
 80016e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016ec:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <MX_SPI2_Init+0xa8>)
 80016f0:	220f      	movs	r2, #15
 80016f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <MX_SPI2_Init+0xa8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <MX_SPI2_Init+0xa8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_SPI2_Init+0xa8>)
 8001702:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001706:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <MX_SPI2_Init+0xa8>)
 800170a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800170e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_SPI2_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <MX_SPI2_Init+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_SPI2_Init+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_SPI2_Init+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_SPI2_Init+0xa8>)
 800172a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_SPI2_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_SPI2_Init+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_SPI2_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_SPI2_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_SPI2_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_SPI2_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_SPI2_Init+0xa8>)
 8001756:	2200      	movs	r2, #0
 8001758:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_SPI2_Init+0xa8>)
 800175c:	2200      	movs	r2, #0
 800175e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_SPI2_Init+0xa8>)
 8001762:	2200      	movs	r2, #0
 8001764:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_SPI2_Init+0xa8>)
 8001768:	f00c f902 	bl	800d970 <HAL_SPI_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001772:	f001 f9c3 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	24000480 	.word	0x24000480
 8001780:	40003800 	.word	0x40003800

08001784 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b09a      	sub	sp, #104	; 0x68
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	615a      	str	r2, [r3, #20]
 80017b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	222c      	movs	r2, #44	; 0x2c
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f014 fd14 	bl	80161ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c4:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <MX_TIM1_Init+0x154>)
 80017c6:	4a45      	ldr	r2, [pc, #276]	; (80018dc <MX_TIM1_Init+0x158>)
 80017c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80017ca:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <MX_TIM1_Init+0x154>)
 80017cc:	2231      	movs	r2, #49	; 0x31
 80017ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <MX_TIM1_Init+0x154>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80017d6:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <MX_TIM1_Init+0x154>)
 80017d8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80017dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017de:	4b3e      	ldr	r3, [pc, #248]	; (80018d8 <MX_TIM1_Init+0x154>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e4:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <MX_TIM1_Init+0x154>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <MX_TIM1_Init+0x154>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017f0:	4839      	ldr	r0, [pc, #228]	; (80018d8 <MX_TIM1_Init+0x154>)
 80017f2:	f00c fd0e 	bl	800e212 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80017fc:	f001 f97e 	bl	8002afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800180a:	4619      	mov	r1, r3
 800180c:	4832      	ldr	r0, [pc, #200]	; (80018d8 <MX_TIM1_Init+0x154>)
 800180e:	f00d fb4d 	bl	800eeac <HAL_TIM_ConfigClockSource>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001818:	f001 f970 	bl	8002afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800181c:	482e      	ldr	r0, [pc, #184]	; (80018d8 <MX_TIM1_Init+0x154>)
 800181e:	f00c ffb9 	bl	800e794 <HAL_TIM_PWM_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001828:	f001 f968 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001838:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800183c:	4619      	mov	r1, r3
 800183e:	4826      	ldr	r0, [pc, #152]	; (80018d8 <MX_TIM1_Init+0x154>)
 8001840:	f00e f88a 	bl	800f958 <HAL_TIMEx_MasterConfigSynchronization>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800184a:	f001 f957 	bl	8002afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184e:	2360      	movs	r3, #96	; 0x60
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001852:	f240 13df 	movw	r3, #479	; 0x1df
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001858:	2300      	movs	r3, #0
 800185a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800185c:	2300      	movs	r3, #0
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4818      	ldr	r0, [pc, #96]	; (80018d8 <MX_TIM1_Init+0x154>)
 8001876:	f00d fa05 	bl	800ec84 <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001880:	f001 f93c 	bl	8002afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <MX_TIM1_Init+0x154>)
 80018ba:	f00e f8db 	bl	800fa74 <HAL_TIMEx_ConfigBreakDeadTime>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80018c4:	f001 f91a 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <MX_TIM1_Init+0x154>)
 80018ca:	f001 fca5 	bl	8003218 <HAL_TIM_MspPostInit>

}
 80018ce:	bf00      	nop
 80018d0:	3768      	adds	r7, #104	; 0x68
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	24000508 	.word	0x24000508
 80018dc:	40010000 	.word	0x40010000

080018e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08e      	sub	sp, #56	; 0x38
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <MX_TIM2_Init+0xe8>)
 8001914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001918:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <MX_TIM2_Init+0xe8>)
 800191c:	2231      	movs	r2, #49	; 0x31
 800191e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <MX_TIM2_Init+0xe8>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001926:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <MX_TIM2_Init+0xe8>)
 8001928:	f640 4234 	movw	r2, #3124	; 0xc34
 800192c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <MX_TIM2_Init+0xe8>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <MX_TIM2_Init+0xe8>)
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800193a:	4823      	ldr	r0, [pc, #140]	; (80019c8 <MX_TIM2_Init+0xe8>)
 800193c:	f00c fc69 	bl	800e212 <HAL_TIM_Base_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001946:	f001 f8d9 	bl	8002afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001954:	4619      	mov	r1, r3
 8001956:	481c      	ldr	r0, [pc, #112]	; (80019c8 <MX_TIM2_Init+0xe8>)
 8001958:	f00d faa8 	bl	800eeac <HAL_TIM_ConfigClockSource>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001962:	f001 f8cb 	bl	8002afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001966:	4818      	ldr	r0, [pc, #96]	; (80019c8 <MX_TIM2_Init+0xe8>)
 8001968:	f00c ff14 	bl	800e794 <HAL_TIM_PWM_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001972:	f001 f8c3 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001976:	2320      	movs	r3, #32
 8001978:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4810      	ldr	r0, [pc, #64]	; (80019c8 <MX_TIM2_Init+0xe8>)
 8001986:	f00d ffe7 	bl	800f958 <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001990:	f001 f8b4 	bl	8002afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001994:	2360      	movs	r3, #96	; 0x60
 8001996:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019a4:	463b      	mov	r3, r7
 80019a6:	220c      	movs	r2, #12
 80019a8:	4619      	mov	r1, r3
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <MX_TIM2_Init+0xe8>)
 80019ac:	f00d f96a 	bl	800ec84 <HAL_TIM_PWM_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019b6:	f001 f8a1 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <MX_TIM2_Init+0xe8>)
 80019bc:	f001 fc2c 	bl	8003218 <HAL_TIM_MspPostInit>

}
 80019c0:	bf00      	nop
 80019c2:	3738      	adds	r7, #56	; 0x38
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	24000554 	.word	0x24000554

080019cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_TIM3_Init+0x94>)
 80019ec:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <MX_TIM3_Init+0x98>)
 80019ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <MX_TIM3_Init+0x94>)
 80019f2:	2231      	movs	r2, #49	; 0x31
 80019f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_TIM3_Init+0x94>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <MX_TIM3_Init+0x94>)
 80019fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_TIM3_Init+0x94>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <MX_TIM3_Init+0x94>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a10:	4813      	ldr	r0, [pc, #76]	; (8001a60 <MX_TIM3_Init+0x94>)
 8001a12:	f00c fbfe 	bl	800e212 <HAL_TIM_Base_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a1c:	f001 f86e 	bl	8002afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <MX_TIM3_Init+0x94>)
 8001a2e:	f00d fa3d 	bl	800eeac <HAL_TIM_ConfigClockSource>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a38:	f001 f860 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_TIM3_Init+0x94>)
 8001a4a:	f00d ff85 	bl	800f958 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a54:	f001 f852 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	240005a0 	.word	0x240005a0
 8001a64:	40000400 	.word	0x40000400

08001a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a6e:	4a23      	ldr	r2, [pc, #140]	; (8001afc <MX_USART1_UART_Init+0x94>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a74:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001ab2:	f00e f87b 	bl	800fbac <HAL_UART_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001abc:	f001 f81e 	bl	8002afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	480d      	ldr	r0, [pc, #52]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001ac4:	f010 fdf7 	bl	80126b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ace:	f001 f815 	bl	8002afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4808      	ldr	r0, [pc, #32]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001ad6:	f010 fe2c 	bl	8012732 <HAL_UARTEx_SetRxFifoThreshold>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ae0:	f001 f80c 	bl	8002afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001ae6:	f010 fdad 	bl	8012644 <HAL_UARTEx_DisableFifoMode>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001af0:	f001 f804 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	240005ec 	.word	0x240005ec
 8001afc:	40011000 	.word	0x40011000

08001b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <MX_DMA_Init+0x6c>)
 8001b08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b0c:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <MX_DMA_Init+0x6c>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_DMA_Init+0x6c>)
 8001b18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2105      	movs	r1, #5
 8001b28:	200b      	movs	r0, #11
 8001b2a:	f003 fc47 	bl	80053bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b2e:	200b      	movs	r0, #11
 8001b30:	f003 fc5e 	bl	80053f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2105      	movs	r1, #5
 8001b38:	200c      	movs	r0, #12
 8001b3a:	f003 fc3f 	bl	80053bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b3e:	200c      	movs	r0, #12
 8001b40:	f003 fc56 	bl	80053f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2105      	movs	r1, #5
 8001b48:	200d      	movs	r0, #13
 8001b4a:	f003 fc37 	bl	80053bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b4e:	200d      	movs	r0, #13
 8001b50:	f003 fc4e 	bl	80053f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2105      	movs	r1, #5
 8001b58:	2010      	movs	r0, #16
 8001b5a:	f003 fc2f 	bl	80053bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b5e:	2010      	movs	r0, #16
 8001b60:	f003 fc46 	bl	80053f0 <HAL_NVIC_EnableIRQ>

}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	58024400 	.word	0x58024400

08001b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	4a2b      	ldr	r2, [pc, #172]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb4:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <MX_GPIO_Init+0xe8>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c04:	4815      	ldr	r0, [pc, #84]	; (8001c5c <MX_GPIO_Init+0xec>)
 8001c06:	f007 f80b 	bl	8008c20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2164      	movs	r1, #100	; 0x64
 8001c0e:	4814      	ldr	r0, [pc, #80]	; (8001c60 <MX_GPIO_Init+0xf0>)
 8001c10:	f007 f806 	bl	8008c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c14:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <MX_GPIO_Init+0xec>)
 8001c2e:	f006 fe2f 	bl	8008890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c32:	2364      	movs	r3, #100	; 0x64
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_GPIO_Init+0xf0>)
 8001c4a:	f006 fe21 	bl	8008890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	; 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	58020800 	.word	0x58020800
 8001c60:	58020400 	.word	0x58020400

08001c64 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	b299      	uxth	r1, r3
 8001c76:	f107 0208 	add.w	r2, r7, #8
 8001c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2301      	movs	r3, #1
 8001c82:	4817      	ldr	r0, [pc, #92]	; (8001ce0 <poll_i2c_sensor+0x7c>)
 8001c84:	f007 f882 	bl	8008d8c <HAL_I2C_Master_Transmit>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001c8c:	7b7b      	ldrb	r3, [r7, #13]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001c92:	4814      	ldr	r0, [pc, #80]	; (8001ce4 <poll_i2c_sensor+0x80>)
 8001c94:	f014 fc00 	bl	8016498 <puts>
 8001c98:	e01c      	b.n	8001cd4 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	b299      	uxth	r1, r3
 8001c9e:	f107 0208 	add.w	r2, r7, #8
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2302      	movs	r3, #2
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <poll_i2c_sensor+0x7c>)
 8001cac:	f007 f986 	bl	8008fbc <HAL_I2C_Master_Receive>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001cb4:	7b7b      	ldrb	r3, [r7, #13]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <poll_i2c_sensor+0x84>)
 8001cbc:	f014 fbec 	bl	8016498 <puts>
 8001cc0:	e008      	b.n	8001cd4 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001cc2:	7a3b      	ldrb	r3, [r7, #8]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001cc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ccc:	7a7a      	ldrb	r2, [r7, #9]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	10db      	asrs	r3, r3, #3
 8001cd2:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001cd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	24000380 	.word	0x24000380
 8001ce4:	08016e4c 	.word	0x08016e4c
 8001ce8:	08016e5c 	.word	0x08016e5c

08001cec <receive_pmt_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001cf4:	f107 010c 	add.w	r1, r7, #12
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <receive_pmt_spi+0x44>)
 8001cfe:	f00b ff5b 	bl	800dbb8 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d06:	7b7b      	ldrb	r3, [r7, #13]
 8001d08:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <receive_pmt_spi+0x44>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <receive_pmt_spi+0x44>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d18:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7bba      	ldrb	r2, [r7, #14]
 8001d1e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3301      	adds	r3, #1
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	701a      	strb	r2, [r3, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	240003f8 	.word	0x240003f8

08001d34 <receive_erpa_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001d3c:	f107 010c 	add.w	r1, r7, #12
 8001d40:	2364      	movs	r3, #100	; 0x64
 8001d42:	2201      	movs	r2, #1
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <receive_erpa_spi+0x44>)
 8001d46:	f00b ff37 	bl	800dbb8 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d4e:	7b7b      	ldrb	r3, [r7, #13]
 8001d50:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <receive_erpa_spi+0x44>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <receive_erpa_spi+0x44>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d60:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7bba      	ldrb	r2, [r7, #14]
 8001d66:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	701a      	strb	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	24000480 	.word	0x24000480

08001d7c <receive_erpa_adc>:
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];	// SWPmon --
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <receive_erpa_adc+0x30>)
 8001d86:	885b      	ldrh	r3, [r3, #2]
 8001d88:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5]; 	// TEMP1 -- verified doesn't need to change
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <receive_erpa_adc+0x30>)
 8001d8c:	895b      	ldrh	r3, [r3, #10]
 8001d8e:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	89fa      	ldrh	r2, [r7, #14]
 8001d94:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3302      	adds	r3, #2
 8001d9a:	89ba      	ldrh	r2, [r7, #12]
 8001d9c:	801a      	strh	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	24000c60 	.word	0x24000c60

08001db0 <receive_hk_i2c>:
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001db8:	2390      	movs	r3, #144	; 0x90
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ff52 	bl	8001c64 <poll_i2c_sensor>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001dc4:	2394      	movs	r3, #148	; 0x94
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff4c 	bl	8001c64 <poll_i2c_sensor>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001dd0:	2392      	movs	r3, #146	; 0x92
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff46 	bl	8001c64 <poll_i2c_sensor>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001ddc:	2396      	movs	r3, #150	; 0x96
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff40 	bl	8001c64 <poll_i2c_sensor>
 8001de4:	4603      	mov	r3, r0
 8001de6:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	89fa      	ldrh	r2, [r7, #14]
 8001dec:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3302      	adds	r3, #2
 8001df2:	89ba      	ldrh	r2, [r7, #12]
 8001df4:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	897a      	ldrh	r2, [r7, #10]
 8001dfc:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3306      	adds	r3, #6
 8001e02:	893a      	ldrh	r2, [r7, #8]
 8001e04:	801a      	strh	r2, [r3, #0]
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <receive_hk_adc1>:
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];	// BUSVmon -- verified doesn't need to change
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <receive_hk_adc1+0x90>)
 8001e1a:	8a9b      	ldrh	r3, [r3, #20]
 8001e1c:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];	// BUSImon -- verified doesn't need to change
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <receive_hk_adc1+0x90>)
 8001e20:	8a1b      	ldrh	r3, [r3, #16]
 8001e22:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];	// 2v5mon -- verified doesn't need to change
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <receive_hk_adc1+0x90>)
 8001e26:	899b      	ldrh	r3, [r3, #12]
 8001e28:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];	// n3v3mon --
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <receive_hk_adc1+0x90>)
 8001e2c:	8a5b      	ldrh	r3, [r3, #18]
 8001e2e:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];	// n200v -- verified doesn't need to change
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <receive_hk_adc1+0x90>)
 8001e32:	889b      	ldrh	r3, [r3, #4]
 8001e34:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];	// n800v --
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <receive_hk_adc1+0x90>)
 8001e38:	88db      	ldrh	r3, [r3, #6]
 8001e3a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];	// 5vmon --
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <receive_hk_adc1+0x90>)
 8001e3e:	89db      	ldrh	r3, [r3, #14]
 8001e40:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];	// 15vmon -- verified doesn't need to change
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <receive_hk_adc1+0x90>)
 8001e44:	891b      	ldrh	r3, [r3, #8]
 8001e46:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];	// 5vrefmon --
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <receive_hk_adc1+0x90>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8bfa      	ldrh	r2, [r7, #30]
 8001e52:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3302      	adds	r3, #2
 8001e58:	8bba      	ldrh	r2, [r7, #28]
 8001e5a:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	8b7a      	ldrh	r2, [r7, #26]
 8001e62:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3306      	adds	r3, #6
 8001e68:	8b3a      	ldrh	r2, [r7, #24]
 8001e6a:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3308      	adds	r3, #8
 8001e70:	8afa      	ldrh	r2, [r7, #22]
 8001e72:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	330a      	adds	r3, #10
 8001e78:	8aba      	ldrh	r2, [r7, #20]
 8001e7a:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	330c      	adds	r3, #12
 8001e80:	8a7a      	ldrh	r2, [r7, #18]
 8001e82:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	330e      	adds	r3, #14
 8001e88:	8a3a      	ldrh	r2, [r7, #16]
 8001e8a:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3310      	adds	r3, #16
 8001e90:	89fa      	ldrh	r2, [r7, #14]
 8001e92:	801a      	strh	r2, [r3, #0]
}
 8001e94:	bf00      	nop
 8001e96:	3724      	adds	r7, #36	; 0x24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	24000c60 	.word	0x24000c60

08001ea4 <receive_hk_adc3>:
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001eac:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <receive_hk_adc3+0x4c>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <receive_hk_adc3+0x4c>)
 8001eb4:	885b      	ldrh	r3, [r3, #2]
 8001eb6:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2]; 		// n5vmon --
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <receive_hk_adc3+0x4c>)
 8001eba:	889b      	ldrh	r3, [r3, #4]
 8001ebc:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];		// 3v3mon --
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <receive_hk_adc3+0x4c>)
 8001ec0:	88db      	ldrh	r3, [r3, #6]
 8001ec2:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	89fa      	ldrh	r2, [r7, #14]
 8001ec8:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3302      	adds	r3, #2
 8001ece:	89ba      	ldrh	r2, [r7, #12]
 8001ed0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	897a      	ldrh	r2, [r7, #10]
 8001ed8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3306      	adds	r3, #6
 8001ede:	893a      	ldrh	r2, [r7, #8]
 8001ee0:	801a      	strh	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	24000c80 	.word	0x24000c80

08001ef4 <HAL_UART_TxCpltCallback>:

// *********************************************************************************************************** HELPER FUNCTIONS
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <HAL_UART_TxCpltCallback+0x1c>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	24000000 	.word	0x24000000

08001f14 <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f014 f943 	bl	80161b0 <malloc>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	88fa      	ldrh	r2, [r7, #6]
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f014 f94b 	bl	80161d0 <memcpy>
    packet.size = size;
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	461a      	mov	r2, r3
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f4a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <handshake>:

int handshake()
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b090      	sub	sp, #64	; 0x40
 8001f5c:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001f5e:	230a      	movs	r3, #10
 8001f60:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001f62:	f107 011c 	add.w	r1, r7, #28
 8001f66:	2364      	movs	r3, #100	; 0x64
 8001f68:	2209      	movs	r2, #9
 8001f6a:	4840      	ldr	r0, [pc, #256]	; (800206c <handshake+0x114>)
 8001f6c:	f00d fefc 	bl	800fd68 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001f70:	7f3b      	ldrb	r3, [r7, #28]
 8001f72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001f76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f7a:	2bff      	cmp	r3, #255	; 0xff
 8001f7c:	d1f1      	bne.n	8001f62 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001f7e:	7f7b      	ldrb	r3, [r7, #29]
 8001f80:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001f84:	7fbb      	ldrb	r3, [r7, #30]
 8001f86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001f8a:	7ffb      	ldrb	r3, [r7, #31]
 8001f8c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001f98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001f9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001fa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fa4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001fbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001fc0:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001fc2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fc6:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001fc8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fcc:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001fce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fd2:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001fd4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001fd8:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001fda:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001fde:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8001fe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fe2:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001fe4:	f107 0318 	add.w	r3, r7, #24
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4619      	mov	r1, r3
 8001fec:	4820      	ldr	r0, [pc, #128]	; (8002070 <handshake+0x118>)
 8001fee:	f00b fb19 	bl	800d624 <HAL_RTC_SetDate>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001ff8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <handshake+0xac>
	{
		Error_Handler();
 8002000:	f000 fd7c 	bl	8002afc <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	2200      	movs	r2, #0
 8002008:	4619      	mov	r1, r3
 800200a:	4819      	ldr	r0, [pc, #100]	; (8002070 <handshake+0x118>)
 800200c:	f00b fa10 	bl	800d430 <HAL_RTC_SetTime>
 8002010:	4603      	mov	r3, r0
 8002012:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8002016:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <handshake+0xca>
	{
		Error_Handler();
 800201e:	f000 fd6d 	bl	8002afc <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8002022:	23fa      	movs	r3, #250	; 0xfa
 8002024:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 800203a:	2302      	movs	r3, #2
 800203c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8002040:	2300      	movs	r3, #0
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002044:	e009      	b.n	800205a <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8002046:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800204a:	2364      	movs	r3, #100	; 0x64
 800204c:	2205      	movs	r2, #5
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <handshake+0x114>)
 8002050:	f00d fdfc 	bl	800fc4c <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8002054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002056:	3301      	adds	r3, #1
 8002058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800205a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205e:	429a      	cmp	r2, r3
 8002060:	dbf1      	blt.n	8002046 <handshake+0xee>
	}

	return 1;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3740      	adds	r7, #64	; 0x40
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	240005ec 	.word	0x240005ec
 8002070:	240003d4 	.word	0x240003d4

08002074 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 8002078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800207c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002082:	210c      	movs	r1, #12
 8002084:	4818      	ldr	r0, [pc, #96]	; (80020e8 <system_setup+0x74>)
 8002086:	f00c fbe7 	bl	800e858 <HAL_TIM_PWM_Start>

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800208a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800208e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002092:	4816      	ldr	r0, [pc, #88]	; (80020ec <system_setup+0x78>)
 8002094:	f002 ff98 	bl	8004fc8 <HAL_ADCEx_Calibration_Start>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <system_setup+0x2e>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 800209e:	f000 fd2d 	bl	8002afc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80020a2:	220b      	movs	r2, #11
 80020a4:	4912      	ldr	r1, [pc, #72]	; (80020f0 <system_setup+0x7c>)
 80020a6:	4811      	ldr	r0, [pc, #68]	; (80020ec <system_setup+0x78>)
 80020a8:	f002 f86c 	bl	8004184 <HAL_ADC_Start_DMA>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <system_setup+0x42>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020b2:	f000 fd23 	bl	8002afc <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80020b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020be:	480d      	ldr	r0, [pc, #52]	; (80020f4 <system_setup+0x80>)
 80020c0:	f002 ff82 	bl	8004fc8 <HAL_ADCEx_Calibration_Start>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <system_setup+0x5a>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 80020ca:	f000 fd17 	bl	8002afc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80020ce:	2204      	movs	r2, #4
 80020d0:	4909      	ldr	r1, [pc, #36]	; (80020f8 <system_setup+0x84>)
 80020d2:	4808      	ldr	r0, [pc, #32]	; (80020f4 <system_setup+0x80>)
 80020d4:	f002 f856 	bl	8004184 <HAL_ADC_Start_DMA>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <system_setup+0x6e>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020de:	f000 fd0d 	bl	8002afc <Error_Handler>
	}
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	24000554 	.word	0x24000554
 80020ec:	2400013c 	.word	0x2400013c
 80020f0:	24000c60 	.word	0x24000c60
 80020f4:	240001a0 	.word	0x240001a0
 80020f8:	24000c80 	.word	0x24000c80

080020fc <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	2200      	movs	r2, #0
 800210a:	4619      	mov	r1, r3
 800210c:	481d      	ldr	r0, [pc, #116]	; (8002184 <getTimestamp+0x88>)
 800210e:	f00b fa2d 	bl	800d56c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	2200      	movs	r2, #0
 8002118:	4619      	mov	r1, r3
 800211a:	481a      	ldr	r0, [pc, #104]	; (8002184 <getTimestamp+0x88>)
 800211c:	f00b fb0a 	bl	800d734 <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002126:	fb03 f202 	mul.w	r2, r3, r2
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <getTimestamp+0x88>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8002136:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3301      	adds	r3, #1
 8002142:	7b7a      	ldrb	r2, [r7, #13]
 8002144:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3302      	adds	r3, #2
 800214a:	7bba      	ldrb	r2, [r7, #14]
 800214c:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3303      	adds	r3, #3
 8002152:	7c3a      	ldrb	r2, [r7, #16]
 8002154:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	7c7a      	ldrb	r2, [r7, #17]
 800215c:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3305      	adds	r3, #5
 8002162:	7cba      	ldrb	r2, [r7, #18]
 8002164:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	0a1a      	lsrs	r2, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3306      	adds	r3, #6
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3307      	adds	r3, #7
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	240003d4 	.word	0x240003d4

08002188 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800218e:	bf00      	nop
 8002190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002194:	4840      	ldr	r0, [pc, #256]	; (8002298 <sample_pmt+0x110>)
 8002196:	f006 fd2b 	bl	8008bf0 <HAL_GPIO_ReadPin>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f7      	bne.n	8002190 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80021a0:	200e      	movs	r0, #14
 80021a2:	f014 f805 	bl	80161b0 <malloc>
 80021a6:	4603      	mov	r3, r0
 80021a8:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80021aa:	2002      	movs	r0, #2
 80021ac:	f014 f800 	bl	80161b0 <malloc>
 80021b0:	4603      	mov	r3, r0
 80021b2:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 80021b4:	2008      	movs	r0, #8
 80021b6:	f013 fffb 	bl	80161b0 <malloc>
 80021ba:	4603      	mov	r3, r0
 80021bc:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff ff9c 	bl	80020fc <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80021c4:	6938      	ldr	r0, [r7, #16]
 80021c6:	f7ff fd91 	bl	8001cec <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	22bb      	movs	r2, #187	; 0xbb
 80021ce:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3301      	adds	r3, #1
 80021d4:	22bb      	movs	r2, #187	; 0xbb
 80021d6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <sample_pmt+0x114>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	b29a      	uxth	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3302      	adds	r3, #2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80021e8:	4b2c      	ldr	r3, [pc, #176]	; (800229c <sample_pmt+0x114>)
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3303      	adds	r3, #3
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3304      	adds	r3, #4
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	7812      	ldrb	r2, [r2, #0]
 80021fc:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3305      	adds	r3, #5
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	7852      	ldrb	r2, [r2, #1]
 8002206:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3306      	adds	r3, #6
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	7812      	ldrb	r2, [r2, #0]
 8002210:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3307      	adds	r3, #7
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	7852      	ldrb	r2, [r2, #1]
 800221a:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3308      	adds	r3, #8
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	7892      	ldrb	r2, [r2, #2]
 8002224:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3309      	adds	r3, #9
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	78d2      	ldrb	r2, [r2, #3]
 800222e:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	330a      	adds	r3, #10
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	7912      	ldrb	r2, [r2, #4]
 8002238:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	330b      	adds	r3, #11
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	7952      	ldrb	r2, [r2, #5]
 8002242:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	330c      	adds	r3, #12
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	7992      	ldrb	r2, [r2, #6]
 800224c:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	330d      	adds	r3, #13
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	79d2      	ldrb	r2, [r2, #7]
 8002256:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	220e      	movs	r2, #14
 800225c:	6979      	ldr	r1, [r7, #20]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fe58 	bl	8001f14 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <sample_pmt+0x118>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	1d39      	adds	r1, r7, #4
 800226a:	2300      	movs	r3, #0
 800226c:	2200      	movs	r2, #0
 800226e:	f010 fdc7 	bl	8012e00 <osMessageQueuePut>
	available_msgs++;
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <sample_pmt+0x11c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <sample_pmt+0x11c>)
 800227a:	6013      	str	r3, [r2, #0]
	free(buffer);
 800227c:	6978      	ldr	r0, [r7, #20]
 800227e:	f013 ff9f 	bl	80161c0 <free>
	free(pmt_spi);
 8002282:	6938      	ldr	r0, [r7, #16]
 8002284:	f013 ff9c 	bl	80161c0 <free>
	free(timestamp);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f013 ff99 	bl	80161c0 <free>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	58020000 	.word	0x58020000
 800229c:	24000bdc 	.word	0x24000bdc
 80022a0:	24000bcc 	.word	0x24000bcc
 80022a4:	24000bd8 	.word	0x24000bd8

080022a8 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80022ae:	bf00      	nop
 80022b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b4:	4854      	ldr	r0, [pc, #336]	; (8002408 <sample_erpa+0x160>)
 80022b6:	f006 fc9b 	bl	8008bf0 <HAL_GPIO_ReadPin>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f7      	bne.n	80022b0 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80022c0:	2012      	movs	r0, #18
 80022c2:	f013 ff75 	bl	80161b0 <malloc>
 80022c6:	4603      	mov	r3, r0
 80022c8:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80022ca:	2002      	movs	r0, #2
 80022cc:	f013 ff70 	bl	80161b0 <malloc>
 80022d0:	4603      	mov	r3, r0
 80022d2:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 80022d4:	2004      	movs	r0, #4
 80022d6:	f013 ff6b 	bl	80161b0 <malloc>
 80022da:	4603      	mov	r3, r0
 80022dc:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 80022de:	2008      	movs	r0, #8
 80022e0:	f013 ff66 	bl	80161b0 <malloc>
 80022e4:	4603      	mov	r3, r0
 80022e6:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 80022e8:	68b8      	ldr	r0, [r7, #8]
 80022ea:	f7ff ff07 	bl	80020fc <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 80022ee:	6938      	ldr	r0, [r7, #16]
 80022f0:	f7ff fd20 	bl	8001d34 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7ff fd41 	bl	8001d7c <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	22aa      	movs	r2, #170	; 0xaa
 80022fe:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	3301      	adds	r3, #1
 8002304:	22aa      	movs	r2, #170	; 0xaa
 8002306:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002308:	4b40      	ldr	r3, [pc, #256]	; (800240c <sample_erpa+0x164>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	b29a      	uxth	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3302      	adds	r3, #2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <sample_erpa+0x164>)
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3303      	adds	r3, #3
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	b29a      	uxth	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3304      	adds	r3, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	881a      	ldrh	r2, [r3, #0]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3305      	adds	r3, #5
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3302      	adds	r3, #2
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29a      	uxth	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3306      	adds	r3, #6
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3302      	adds	r3, #2
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3307      	adds	r3, #7
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3308      	adds	r3, #8
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3309      	adds	r3, #9
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	7852      	ldrb	r2, [r2, #1]
 8002372:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	330a      	adds	r3, #10
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	330b      	adds	r3, #11
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	7852      	ldrb	r2, [r2, #1]
 8002386:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	330c      	adds	r3, #12
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	7892      	ldrb	r2, [r2, #2]
 8002390:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	330d      	adds	r3, #13
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	78d2      	ldrb	r2, [r2, #3]
 800239a:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	330e      	adds	r3, #14
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	7912      	ldrb	r2, [r2, #4]
 80023a4:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	330f      	adds	r3, #15
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	7952      	ldrb	r2, [r2, #5]
 80023ae:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3310      	adds	r3, #16
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	7992      	ldrb	r2, [r2, #6]
 80023b8:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3311      	adds	r3, #17
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	79d2      	ldrb	r2, [r2, #7]
 80023c2:	701a      	strb	r2, [r3, #0]



	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80023c4:	463b      	mov	r3, r7
 80023c6:	2212      	movs	r2, #18
 80023c8:	6979      	ldr	r1, [r7, #20]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fda2 	bl	8001f14 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <sample_erpa+0x168>)
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	4639      	mov	r1, r7
 80023d6:	2300      	movs	r3, #0
 80023d8:	2200      	movs	r2, #0
 80023da:	f010 fd11 	bl	8012e00 <osMessageQueuePut>
	available_msgs++;
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <sample_erpa+0x16c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <sample_erpa+0x16c>)
 80023e6:	6013      	str	r3, [r2, #0]
	free(buffer);
 80023e8:	6978      	ldr	r0, [r7, #20]
 80023ea:	f013 fee9 	bl	80161c0 <free>
	free(erpa_spi);
 80023ee:	6938      	ldr	r0, [r7, #16]
 80023f0:	f013 fee6 	bl	80161c0 <free>
	free(erpa_adc);
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f013 fee3 	bl	80161c0 <free>
	free(timestamp);
 80023fa:	68b8      	ldr	r0, [r7, #8]
 80023fc:	f013 fee0 	bl	80161c0 <free>
}
 8002400:	bf00      	nop
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	58020400 	.word	0x58020400
 800240c:	24000bde 	.word	0x24000bde
 8002410:	24000bcc 	.word	0x24000bcc
 8002414:	24000bd8 	.word	0x24000bd8

08002418 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800241e:	202e      	movs	r0, #46	; 0x2e
 8002420:	f013 fec6 	bl	80161b0 <malloc>
 8002424:	4603      	mov	r3, r0
 8002426:	61fb      	str	r3, [r7, #28]

	static uint16_t last_i2c_reading[4];
	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002428:	2008      	movs	r0, #8
 800242a:	f013 fec1 	bl	80161b0 <malloc>
 800242e:	4603      	mov	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8002432:	2012      	movs	r0, #18
 8002434:	f013 febc 	bl	80161b0 <malloc>
 8002438:	4603      	mov	r3, r0
 800243a:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 800243c:	2008      	movs	r0, #8
 800243e:	f013 feb7 	bl	80161b0 <malloc>
 8002442:	4603      	mov	r3, r0
 8002444:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002446:	2008      	movs	r0, #8
 8002448:	f013 feb2 	bl	80161b0 <malloc>
 800244c:	4603      	mov	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff fe53 	bl	80020fc <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999){
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <sample_hk+0x8c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800245e:	db25      	blt.n	80024ac <sample_hk+0x94>
		receive_hk_i2c(hk_i2c);
 8002460:	69b8      	ldr	r0, [r7, #24]
 8002462:	f7ff fca5 	bl	8001db0 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246c:	b29a      	uxth	r2, r3
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <sample_hk+0x90>)
 8002470:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	3302      	adds	r3, #2
 8002476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247a:	b29a      	uxth	r2, r3
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <sample_hk+0x90>)
 800247e:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	3304      	adds	r3, #4
 8002484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002488:	b29a      	uxth	r2, r3
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <sample_hk+0x90>)
 800248c:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3306      	adds	r3, #6
 8002492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002496:	b29a      	uxth	r2, r3
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <sample_hk+0x90>)
 800249a:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 800249c:	4b01      	ldr	r3, [pc, #4]	; (80024a4 <sample_hk+0x8c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e01f      	b.n	80024e4 <sample_hk+0xcc>
 80024a4:	24000004 	.word	0x24000004
 80024a8:	24000c88 	.word	0x24000c88
	}
	else{
		TEMPERATURE_COUNTER++;
 80024ac:	4ba4      	ldr	r3, [pc, #656]	; (8002740 <sample_hk+0x328>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4aa3      	ldr	r2, [pc, #652]	; (8002740 <sample_hk+0x328>)
 80024b4:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80024b6:	4ba3      	ldr	r3, [pc, #652]	; (8002744 <sample_hk+0x32c>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b21a      	sxth	r2, r3
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80024c0:	4ba0      	ldr	r3, [pc, #640]	; (8002744 <sample_hk+0x32c>)
 80024c2:	885a      	ldrh	r2, [r3, #2]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	3302      	adds	r3, #2
 80024c8:	b212      	sxth	r2, r2
 80024ca:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80024cc:	4b9d      	ldr	r3, [pc, #628]	; (8002744 <sample_hk+0x32c>)
 80024ce:	889a      	ldrh	r2, [r3, #4]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	3304      	adds	r3, #4
 80024d4:	b212      	sxth	r2, r2
 80024d6:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80024d8:	4b9a      	ldr	r3, [pc, #616]	; (8002744 <sample_hk+0x32c>)
 80024da:	88da      	ldrh	r2, [r3, #6]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	3306      	adds	r3, #6
 80024e0:	b212      	sxth	r2, r2
 80024e2:	801a      	strh	r2, [r3, #0]
	}
	receive_hk_adc1(hk_adc1);
 80024e4:	6978      	ldr	r0, [r7, #20]
 80024e6:	f7ff fc93 	bl	8001e10 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 80024ea:	6938      	ldr	r0, [r7, #16]
 80024ec:	f7ff fcda 	bl	8001ea4 <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	22cc      	movs	r2, #204	; 0xcc
 80024f4:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	22cc      	movs	r2, #204	; 0xcc
 80024fc:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80024fe:	4b92      	ldr	r3, [pc, #584]	; (8002748 <sample_hk+0x330>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	b29a      	uxth	r2, r3
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3302      	adds	r3, #2
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800250e:	4b8e      	ldr	r3, [pc, #568]	; (8002748 <sample_hk+0x330>)
 8002510:	881a      	ldrh	r2, [r3, #0]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3303      	adds	r3, #3
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	3302      	adds	r3, #2
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	b29a      	uxth	r2, r3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3304      	adds	r3, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	3302      	adds	r3, #2
 8002530:	881a      	ldrh	r2, [r3, #0]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3305      	adds	r3, #5
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	b29a      	uxth	r2, r3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3306      	adds	r3, #6
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	881a      	ldrh	r2, [r3, #0]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3307      	adds	r3, #7
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255c:	121a      	asrs	r2, r3, #8
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3308      	adds	r3, #8
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f9b3 2000 	ldrsh.w	r2, [r3]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	3309      	adds	r3, #9
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	3302      	adds	r3, #2
 8002578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800257c:	121a      	asrs	r2, r3, #8
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	330a      	adds	r3, #10
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	3302      	adds	r3, #2
 800258a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	330b      	adds	r3, #11
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	3304      	adds	r3, #4
 800259a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259e:	121a      	asrs	r2, r3, #8
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	330c      	adds	r3, #12
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	3304      	adds	r3, #4
 80025ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	330d      	adds	r3, #13
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	3306      	adds	r3, #6
 80025bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c0:	121a      	asrs	r2, r3, #8
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	330e      	adds	r3, #14
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3306      	adds	r3, #6
 80025ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	330f      	adds	r3, #15
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3310      	adds	r3, #16
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	881a      	ldrh	r2, [r3, #0]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3311      	adds	r3, #17
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3302      	adds	r3, #2
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	b29a      	uxth	r2, r3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	3312      	adds	r3, #18
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3302      	adds	r3, #2
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3313      	adds	r3, #19
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3304      	adds	r3, #4
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	b29a      	uxth	r2, r3
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3314      	adds	r3, #20
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3304      	adds	r3, #4
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3315      	adds	r3, #21
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	3306      	adds	r3, #6
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	b29a      	uxth	r2, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3316      	adds	r3, #22
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	3306      	adds	r3, #6
 800264c:	881a      	ldrh	r2, [r3, #0]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3317      	adds	r3, #23
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	330c      	adds	r3, #12
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	b29a      	uxth	r2, r3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	3318      	adds	r3, #24
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	330c      	adds	r3, #12
 800266c:	881a      	ldrh	r2, [r3, #0]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3319      	adds	r3, #25
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3306      	adds	r3, #6
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	b29a      	uxth	r2, r3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	331a      	adds	r3, #26
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3306      	adds	r3, #6
 800268c:	881a      	ldrh	r2, [r3, #0]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	331b      	adds	r3, #27
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	3304      	adds	r3, #4
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	b29a      	uxth	r2, r3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	331c      	adds	r3, #28
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	3304      	adds	r3, #4
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	331d      	adds	r3, #29
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	330e      	adds	r3, #14
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	b29a      	uxth	r2, r3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	331e      	adds	r3, #30
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	330e      	adds	r3, #14
 80026cc:	881a      	ldrh	r2, [r3, #0]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	331f      	adds	r3, #31
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3310      	adds	r3, #16
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	b29a      	uxth	r2, r3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	3320      	adds	r3, #32
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3310      	adds	r3, #16
 80026ec:	881a      	ldrh	r2, [r3, #0]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3321      	adds	r3, #33	; 0x21
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3308      	adds	r3, #8
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	b29a      	uxth	r2, r3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	3322      	adds	r3, #34	; 0x22
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3308      	adds	r3, #8
 800270c:	881a      	ldrh	r2, [r3, #0]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3323      	adds	r3, #35	; 0x23
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	330a      	adds	r3, #10
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29a      	uxth	r2, r3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3324      	adds	r3, #36	; 0x24
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	330a      	adds	r3, #10
 800272c:	881a      	ldrh	r2, [r3, #0]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3325      	adds	r3, #37	; 0x25
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3326      	adds	r3, #38	; 0x26
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	e006      	b.n	800274c <sample_hk+0x334>
 800273e:	bf00      	nop
 8002740:	24000004 	.word	0x24000004
 8002744:	24000c88 	.word	0x24000c88
 8002748:	24000be0 	.word	0x24000be0
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3327      	adds	r3, #39	; 0x27
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	7852      	ldrb	r2, [r2, #1]
 8002758:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3328      	adds	r3, #40	; 0x28
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	7892      	ldrb	r2, [r2, #2]
 8002762:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3329      	adds	r3, #41	; 0x29
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	78d2      	ldrb	r2, [r2, #3]
 800276c:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	332a      	adds	r3, #42	; 0x2a
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	7912      	ldrb	r2, [r2, #4]
 8002776:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	332b      	adds	r3, #43	; 0x2b
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	7952      	ldrb	r2, [r2, #5]
 8002780:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	332c      	adds	r3, #44	; 0x2c
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	7992      	ldrb	r2, [r2, #6]
 800278a:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	332d      	adds	r3, #45	; 0x2d
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	79d2      	ldrb	r2, [r2, #7]
 8002794:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	222e      	movs	r2, #46	; 0x2e
 800279a:	69f9      	ldr	r1, [r7, #28]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fbb9 	bl	8001f14 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <sample_hk+0x3c8>)
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	1d39      	adds	r1, r7, #4
 80027a8:	2300      	movs	r3, #0
 80027aa:	2200      	movs	r2, #0
 80027ac:	f010 fb28 	bl	8012e00 <osMessageQueuePut>
	available_msgs++;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <sample_hk+0x3cc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <sample_hk+0x3cc>)
 80027b8:	6013      	str	r3, [r2, #0]

	free(buffer);
 80027ba:	69f8      	ldr	r0, [r7, #28]
 80027bc:	f013 fd00 	bl	80161c0 <free>
	free(hk_i2c);
 80027c0:	69b8      	ldr	r0, [r7, #24]
 80027c2:	f013 fcfd 	bl	80161c0 <free>
	free(hk_adc1);
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f013 fcfa 	bl	80161c0 <free>
	free(hk_adc3);
 80027cc:	6938      	ldr	r0, [r7, #16]
 80027ce:	f013 fcf7 	bl	80161c0 <free>
	free(timestamp);
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f013 fcf4 	bl	80161c0 <free>
}
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	24000bcc 	.word	0x24000bcc
 80027e4:	24000bd8 	.word	0x24000bd8

080027e8 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <PMT_init+0x38>)
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f8:	2200      	movs	r2, #0
 80027fa:	2101      	movs	r1, #1
 80027fc:	f010 fa26 	bl	8012c4c <osEventFlagsWait>
		if(PMT_ON){
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <PMT_init+0x3c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <PMT_init+0x30>
			sample_pmt();
 8002808:	f7ff fcbe 	bl	8002188 <sample_pmt>
			pmt_seq++;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <PMT_init+0x40>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <PMT_init+0x40>)
 8002816:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002818:	f010 f938 	bl	8012a8c <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800281c:	e7e8      	b.n	80027f0 <PMT_init+0x8>
 800281e:	bf00      	nop
 8002820:	24000be8 	.word	0x24000be8
 8002824:	24000be2 	.word	0x24000be2
 8002828:	24000bdc 	.word	0x24000bdc

0800282c <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <ERPA_init+0x38>)
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800283c:	2200      	movs	r2, #0
 800283e:	2102      	movs	r1, #2
 8002840:	f010 fa04 	bl	8012c4c <osEventFlagsWait>
		if (ERPA_ON)
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <ERPA_init+0x3c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <ERPA_init+0x30>
		{
			sample_erpa();
 800284c:	f7ff fd2c 	bl	80022a8 <sample_erpa>
			erpa_seq++;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <ERPA_init+0x40>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <ERPA_init+0x40>)
 800285a:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 800285c:	f010 f916 	bl	8012a8c <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002860:	e7e8      	b.n	8002834 <ERPA_init+0x8>
 8002862:	bf00      	nop
 8002864:	24000be8 	.word	0x24000be8
 8002868:	24000be3 	.word	0x24000be3
 800286c:	24000bde 	.word	0x24000bde

08002870 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HK_init+0x38>)
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002880:	2200      	movs	r2, #0
 8002882:	2104      	movs	r1, #4
 8002884:	f010 f9e2 	bl	8012c4c <osEventFlagsWait>
		if(HK_ON)
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HK_init+0x3c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HK_init+0x30>
		{
			sample_hk();
 8002890:	f7ff fdc2 	bl	8002418 <sample_hk>
			hk_seq++;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HK_init+0x40>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <HK_init+0x40>)
 800289e:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 80028a0:	f010 f8f4 	bl	8012a8c <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80028a4:	e7e8      	b.n	8002878 <HK_init+0x8>
 80028a6:	bf00      	nop
 80028a8:	24000be8 	.word	0x24000be8
 80028ac:	24000be4 	.word	0x24000be4
 80028b0:	24000be0 	.word	0x24000be0

080028b4 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80028bc:	2201      	movs	r2, #1
 80028be:	4904      	ldr	r1, [pc, #16]	; (80028d0 <UART_RX_init+0x1c>)
 80028c0:	4804      	ldr	r0, [pc, #16]	; (80028d4 <UART_RX_init+0x20>)
 80028c2:	f00d fb19 	bl	800fef8 <HAL_UART_Receive_IT>
		osDelay(5);
 80028c6:	2005      	movs	r0, #5
 80028c8:	f010 f921 	bl	8012b0e <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80028cc:	e7f6      	b.n	80028bc <UART_RX_init+0x8>
 80028ce:	bf00      	nop
 80028d0:	24000bec 	.word	0x24000bec
 80028d4:	240005ec 	.word	0x240005ec

080028d8 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <GPIO_on_init+0x9c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f010 f8f1 	bl	8012acc <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <GPIO_on_init+0xa0>)
 80028ec:	2104      	movs	r1, #4
 80028ee:	2201      	movs	r2, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f006 f995 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 80028f6:	2064      	movs	r0, #100	; 0x64
 80028f8:	f010 f909 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 80028fc:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <GPIO_on_init+0xa0>)
 80028fe:	2120      	movs	r1, #32
 8002900:	2201      	movs	r2, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f006 f98c 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 8002908:	2064      	movs	r0, #100	; 0x64
 800290a:	f010 f900 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <GPIO_on_init+0xa4>)
 8002910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002914:	2201      	movs	r2, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f006 f982 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 800291c:	2064      	movs	r0, #100	; 0x64
 800291e:	f010 f8f6 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <GPIO_on_init+0xa4>)
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	2201      	movs	r2, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f006 f979 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 800292e:	2064      	movs	r0, #100	; 0x64
 8002930:	f010 f8ed 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <GPIO_on_init+0xa4>)
 8002936:	2140      	movs	r1, #64	; 0x40
 8002938:	2201      	movs	r2, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f006 f970 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 8002940:	2064      	movs	r0, #100	; 0x64
 8002942:	f010 f8e4 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <GPIO_on_init+0xa4>)
 8002948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800294c:	2201      	movs	r2, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f006 f966 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 8002954:	2064      	movs	r0, #100	; 0x64
 8002956:	f010 f8da 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <GPIO_on_init+0xa4>)
 800295c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002960:	2201      	movs	r2, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f006 f95c 	bl	8008c20 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002968:	4b02      	ldr	r3, [pc, #8]	; (8002974 <GPIO_on_init+0x9c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f010 f8ad 	bl	8012acc <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002972:	e7ba      	b.n	80028ea <GPIO_on_init+0x12>
 8002974:	24000708 	.word	0x24000708
 8002978:	58020400 	.word	0x58020400
 800297c:	58020800 	.word	0x58020800

08002980 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002988:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <GPIO_off_init+0x9c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f010 f89d 	bl	8012acc <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002992:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <GPIO_off_init+0xa0>)
 8002994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002998:	2200      	movs	r2, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f006 f940 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 80029a0:	2064      	movs	r0, #100	; 0x64
 80029a2:	f010 f8b4 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <GPIO_off_init+0xa0>)
 80029a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ac:	2200      	movs	r2, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f006 f936 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 80029b4:	2064      	movs	r0, #100	; 0x64
 80029b6:	f010 f8aa 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 80029ba:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <GPIO_off_init+0xa0>)
 80029bc:	2140      	movs	r1, #64	; 0x40
 80029be:	2200      	movs	r2, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f006 f92d 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 80029c6:	2064      	movs	r0, #100	; 0x64
 80029c8:	f010 f8a1 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <GPIO_off_init+0xa0>)
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	2200      	movs	r2, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f006 f924 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 80029d8:	2064      	movs	r0, #100	; 0x64
 80029da:	f010 f898 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <GPIO_off_init+0xa0>)
 80029e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029e4:	2200      	movs	r2, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f006 f91a 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 80029ec:	2064      	movs	r0, #100	; 0x64
 80029ee:	f010 f88e 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <GPIO_off_init+0xa4>)
 80029f4:	2120      	movs	r1, #32
 80029f6:	2200      	movs	r2, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f006 f911 	bl	8008c20 <HAL_GPIO_WritePin>
		osDelay(100);
 80029fe:	2064      	movs	r0, #100	; 0x64
 8002a00:	f010 f885 	bl	8012b0e <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <GPIO_off_init+0xa4>)
 8002a06:	2104      	movs	r1, #4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f006 f908 	bl	8008c20 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <GPIO_off_init+0x9c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f010 f859 	bl	8012acc <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002a1a:	e7ba      	b.n	8002992 <GPIO_off_init+0x12>
 8002a1c:	24000968 	.word	0x24000968
 8002a20:	58020800 	.word	0x58020800
 8002a24:	58020400 	.word	0x58020400

08002a28 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
  static uint8_t tx_buffer[1000];
  uint32_t total_size = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
  osStatus_t status;

  while (1) {
    total_size = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

    // Retrieve all messages from the queue and store them in tx_buffer
    do {
      status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002a38:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <UART_TX_init+0x9c>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a40:	2200      	movs	r2, #0
 8002a42:	4921      	ldr	r1, [pc, #132]	; (8002ac8 <UART_TX_init+0xa0>)
 8002a44:	f010 fa3c 	bl	8012ec0 <osMessageQueueGet>
 8002a48:	60b8      	str	r0, [r7, #8]
      if (status == osOK) {
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d11c      	bne.n	8002a8a <UART_TX_init+0x62>
        if (total_size + msg.size <= 1000) {
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <UART_TX_init+0xa0>)
 8002a52:	889b      	ldrh	r3, [r3, #4]
 8002a54:	461a      	mov	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a5e:	d818      	bhi.n	8002a92 <UART_TX_init+0x6a>
          memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <UART_TX_init+0xa4>)
 8002a64:	4413      	add	r3, r2
 8002a66:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <UART_TX_init+0xa0>)
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <UART_TX_init+0xa0>)
 8002a6c:	8892      	ldrh	r2, [r2, #4]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f013 fbae 	bl	80161d0 <memcpy>
          free(msg.array);
 8002a74:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <UART_TX_init+0xa0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f013 fba1 	bl	80161c0 <free>
          total_size += msg.size;
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <UART_TX_init+0xa0>)
 8002a80:	889b      	ldrh	r3, [r3, #4]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
        } else {

          break;
        }
      }
    } while (status == osOK);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0d3      	beq.n	8002a38 <UART_TX_init+0x10>
 8002a90:	e000      	b.n	8002a94 <UART_TX_init+0x6c>
          break;
 8002a92:	bf00      	nop

    if (total_size > 0) {
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d010      	beq.n	8002abc <UART_TX_init+0x94>
      HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	490a      	ldr	r1, [pc, #40]	; (8002acc <UART_TX_init+0xa4>)
 8002aa2:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <UART_TX_init+0xa8>)
 8002aa4:	f00d fa74 	bl	800ff90 <HAL_UART_Transmit_DMA>

      // Wait for transmission to complete
      while (tx_flag == 0) {
 8002aa8:	e001      	b.n	8002aae <UART_TX_init+0x86>
        osThreadYield();
 8002aaa:	f00f ffef 	bl	8012a8c <osThreadYield>
      while (tx_flag == 0) {
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <UART_TX_init+0xac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f9      	beq.n	8002aaa <UART_TX_init+0x82>
      }

      // Reset the flag
      tx_flag = 0;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <UART_TX_init+0xac>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
    }

    // Yield thread control
    osThreadYield();
 8002abc:	f00f ffe6 	bl	8012a8c <osThreadYield>
    total_size = 0;
 8002ac0:	e7b8      	b.n	8002a34 <UART_TX_init+0xc>
 8002ac2:	bf00      	nop
 8002ac4:	24000bcc 	.word	0x24000bcc
 8002ac8:	24000bd0 	.word	0x24000bd0
 8002acc:	24000c90 	.word	0x24000c90
 8002ad0:	240005ec 	.word	0x240005ec
 8002ad4:	24000000 	.word	0x24000000

08002ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002aea:	f000 ff59 	bl	80039a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40001000 	.word	0x40001000

08002afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b00:	b672      	cpsid	i
}
 8002b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b04:	e7fe      	b.n	8002b04 <Error_Handler+0x8>
	...

08002b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_MspInit+0x38>)
 8002b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b14:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_MspInit+0x38>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_MspInit+0x38>)
 8002b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f06f 0001 	mvn.w	r0, #1
 8002b34:	f002 fc42 	bl	80053bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	58024400 	.word	0x58024400

08002b44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08e      	sub	sp, #56	; 0x38
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a7b      	ldr	r2, [pc, #492]	; (8002d50 <HAL_ADC_MspInit+0x20c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	f040 8091 	bne.w	8002c8a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b68:	4b7a      	ldr	r3, [pc, #488]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002b6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b6e:	4a79      	ldr	r2, [pc, #484]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002b70:	f043 0320 	orr.w	r3, r3, #32
 8002b74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b78:	4b76      	ldr	r3, [pc, #472]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b86:	4b73      	ldr	r3, [pc, #460]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8c:	4a71      	ldr	r2, [pc, #452]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b96:	4b6f      	ldr	r3, [pc, #444]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba4:	4b6b      	ldr	r3, [pc, #428]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002baa:	4a6a      	ldr	r2, [pc, #424]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb4:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc2:	4b64      	ldr	r3, [pc, #400]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc8:	4a62      	ldr	r2, [pc, #392]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bd2:	4b60      	ldr	r3, [pc, #384]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002be0:	2333      	movs	r3, #51	; 0x33
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002be4:	2303      	movs	r3, #3
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4859      	ldr	r0, [pc, #356]	; (8002d58 <HAL_ADC_MspInit+0x214>)
 8002bf4:	f005 fe4c 	bl	8008890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002bf8:	23ce      	movs	r3, #206	; 0xce
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4854      	ldr	r0, [pc, #336]	; (8002d5c <HAL_ADC_MspInit+0x218>)
 8002c0c:	f005 fe40 	bl	8008890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c10:	2303      	movs	r3, #3
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c14:	2303      	movs	r3, #3
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c20:	4619      	mov	r1, r3
 8002c22:	484f      	ldr	r0, [pc, #316]	; (8002d60 <HAL_ADC_MspInit+0x21c>)
 8002c24:	f005 fe34 	bl	8008890 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002c28:	4b4e      	ldr	r3, [pc, #312]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c2a:	4a4f      	ldr	r2, [pc, #316]	; (8002d68 <HAL_ADC_MspInit+0x224>)
 8002c2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c2e:	4b4d      	ldr	r3, [pc, #308]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c30:	2209      	movs	r2, #9
 8002c32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c34:	4b4b      	ldr	r3, [pc, #300]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c40:	4b48      	ldr	r3, [pc, #288]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c48:	4b46      	ldr	r3, [pc, #280]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c50:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c58:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c60:	4b40      	ldr	r3, [pc, #256]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c66:	4b3f      	ldr	r3, [pc, #252]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c6c:	483d      	ldr	r0, [pc, #244]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c6e:	f002 ffd3 	bl	8005c18 <HAL_DMA_Init>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002c78:	f7ff ff40 	bl	8002afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a39      	ldr	r2, [pc, #228]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c80:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c82:	4a38      	ldr	r2, [pc, #224]	; (8002d64 <HAL_ADC_MspInit+0x220>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002c88:	e05e      	b.n	8002d48 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a37      	ldr	r2, [pc, #220]	; (8002d6c <HAL_ADC_MspInit+0x228>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d159      	bne.n	8002d48 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c94:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9a:	4a2e      	ldr	r2, [pc, #184]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb8:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cc2:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_ADC_MspInit+0x210>)
 8002cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002cd0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002cd4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002cd8:	f000 fe8e 	bl	80039f8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002cdc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002ce0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002ce4:	f000 fe88 	bl	80039f8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002cea:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_ADC_MspInit+0x230>)
 8002cec:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002cf0:	2273      	movs	r2, #115	; 0x73
 8002cf2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf4:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d06:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d0e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d16:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d1e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d26:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002d2c:	4810      	ldr	r0, [pc, #64]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002d2e:	f002 ff73 	bl	8005c18 <HAL_DMA_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002d38:	f7ff fee0 	bl	8002afc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002d40:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d42:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <HAL_ADC_MspInit+0x22c>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d48:	bf00      	nop
 8002d4a:	3738      	adds	r7, #56	; 0x38
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40022000 	.word	0x40022000
 8002d54:	58024400 	.word	0x58024400
 8002d58:	58020800 	.word	0x58020800
 8002d5c:	58020000 	.word	0x58020000
 8002d60:	58020400 	.word	0x58020400
 8002d64:	24000204 	.word	0x24000204
 8002d68:	40020010 	.word	0x40020010
 8002d6c:	58026000 	.word	0x58026000
 8002d70:	2400027c 	.word	0x2400027c
 8002d74:	40020028 	.word	0x40020028

08002d78 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a34      	ldr	r2, [pc, #208]	; (8002e68 <HAL_DAC_MspInit+0xf0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d161      	bne.n	8002e5e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002d9a:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <HAL_DAC_MspInit+0xf4>)
 8002d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da0:	4a32      	ldr	r2, [pc, #200]	; (8002e6c <HAL_DAC_MspInit+0xf4>)
 8002da2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002da6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002daa:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <HAL_DAC_MspInit+0xf4>)
 8002dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db8:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <HAL_DAC_MspInit+0xf4>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dbe:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <HAL_DAC_MspInit+0xf4>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dc8:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_DAC_MspInit+0xf4>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002dd6:	2310      	movs	r3, #16
 8002dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4619      	mov	r1, r3
 8002de8:	4821      	ldr	r0, [pc, #132]	; (8002e70 <HAL_DAC_MspInit+0xf8>)
 8002dea:	f005 fd51 	bl	8008890 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002dee:	4b21      	ldr	r3, [pc, #132]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002df0:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <HAL_DAC_MspInit+0x100>)
 8002df2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002df6:	2243      	movs	r2, #67	; 0x43
 8002df8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002dfc:	2240      	movs	r2, #64	; 0x40
 8002dfe:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002e06:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e0c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002e10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e14:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e24:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002e26:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002e32:	4810      	ldr	r0, [pc, #64]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002e34:	f002 fef0 	bl	8005c18 <HAL_DMA_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002e3e:	f7ff fe5d 	bl	8002afc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <HAL_DAC_MspInit+0xfc>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2105      	movs	r1, #5
 8002e52:	2036      	movs	r0, #54	; 0x36
 8002e54:	f002 fab2 	bl	80053bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e58:	2036      	movs	r0, #54	; 0x36
 8002e5a:	f002 fac9 	bl	80053f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002e5e:	bf00      	nop
 8002e60:	3728      	adds	r7, #40	; 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40007400 	.word	0x40007400
 8002e6c:	58024400 	.word	0x58024400
 8002e70:	58020000 	.word	0x58020000
 8002e74:	24000308 	.word	0x24000308
 8002e78:	40020088 	.word	0x40020088

08002e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0ba      	sub	sp, #232	; 0xe8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	22c0      	movs	r2, #192	; 0xc0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f013 f9a5 	bl	80161ec <memset>
  if(hi2c->Instance==I2C1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_I2C_MspInit+0xc8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d146      	bne.n	8002f3a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002eac:	f04f 0208 	mov.w	r2, #8
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ebe:	f107 0310 	add.w	r3, r7, #16
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f007 fd34 	bl	800a930 <HAL_RCCEx_PeriphCLKConfig>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002ece:	f7ff fe15 	bl	8002afc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_I2C_MspInit+0xcc>)
 8002ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed8:	4a1b      	ldr	r2, [pc, #108]	; (8002f48 <HAL_I2C_MspInit+0xcc>)
 8002eda:	f043 0302 	orr.w	r3, r3, #2
 8002ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ee2:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_I2C_MspInit+0xcc>)
 8002ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef8:	2312      	movs	r3, #18
 8002efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f14:	4619      	mov	r1, r3
 8002f16:	480d      	ldr	r0, [pc, #52]	; (8002f4c <HAL_I2C_MspInit+0xd0>)
 8002f18:	f005 fcba 	bl	8008890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_I2C_MspInit+0xcc>)
 8002f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <HAL_I2C_MspInit+0xcc>)
 8002f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_I2C_MspInit+0xcc>)
 8002f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f3a:	bf00      	nop
 8002f3c:	37e8      	adds	r7, #232	; 0xe8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40005400 	.word	0x40005400
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	58020400 	.word	0x58020400

08002f50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b0b2      	sub	sp, #200	; 0xc8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f58:	f107 0308 	add.w	r3, r7, #8
 8002f5c:	22c0      	movs	r2, #192	; 0xc0
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f013 f943 	bl	80161ec <memset>
  if(hrtc->Instance==RTC)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a10      	ldr	r2, [pc, #64]	; (8002fac <HAL_RTC_MspInit+0x5c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d119      	bne.n	8002fa4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f84:	f107 0308 	add.w	r3, r7, #8
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f007 fcd1 	bl	800a930 <HAL_RCCEx_PeriphCLKConfig>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002f94:	f7ff fdb2 	bl	8002afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RTC_MspInit+0x60>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_RTC_MspInit+0x60>)
 8002f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002fa4:	bf00      	nop
 8002fa6:	37c8      	adds	r7, #200	; 0xc8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	58004000 	.word	0x58004000
 8002fb0:	58024400 	.word	0x58024400

08002fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b0bc      	sub	sp, #240	; 0xf0
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fcc:	f107 0318 	add.w	r3, r7, #24
 8002fd0:	22c0      	movs	r2, #192	; 0xc0
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f013 f909 	bl	80161ec <memset>
  if(hspi->Instance==SPI1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a4c      	ldr	r2, [pc, #304]	; (8003110 <HAL_SPI_MspInit+0x15c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d145      	bne.n	8003070 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002fe4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff4:	f107 0318 	add.w	r3, r7, #24
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f007 fc99 	bl	800a930 <HAL_RCCEx_PeriphCLKConfig>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003004:	f7ff fd7a 	bl	8002afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003008:	4b42      	ldr	r3, [pc, #264]	; (8003114 <HAL_SPI_MspInit+0x160>)
 800300a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800300e:	4a41      	ldr	r2, [pc, #260]	; (8003114 <HAL_SPI_MspInit+0x160>)
 8003010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003014:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003018:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <HAL_SPI_MspInit+0x160>)
 800301a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800301e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003026:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <HAL_SPI_MspInit+0x160>)
 8003028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800302c:	4a39      	ldr	r2, [pc, #228]	; (8003114 <HAL_SPI_MspInit+0x160>)
 800302e:	f043 0302 	orr.w	r3, r3, #2
 8003032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <HAL_SPI_MspInit+0x160>)
 8003038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003044:	2318      	movs	r3, #24
 8003046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	2300      	movs	r3, #0
 8003058:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800305c:	2305      	movs	r3, #5
 800305e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003062:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003066:	4619      	mov	r1, r3
 8003068:	482b      	ldr	r0, [pc, #172]	; (8003118 <HAL_SPI_MspInit+0x164>)
 800306a:	f005 fc11 	bl	8008890 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800306e:	e04a      	b.n	8003106 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a29      	ldr	r2, [pc, #164]	; (800311c <HAL_SPI_MspInit+0x168>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d145      	bne.n	8003106 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800307a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003086:	2300      	movs	r3, #0
 8003088:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800308a:	f107 0318 	add.w	r3, r7, #24
 800308e:	4618      	mov	r0, r3
 8003090:	f007 fc4e 	bl	800a930 <HAL_RCCEx_PeriphCLKConfig>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800309a:	f7ff fd2f 	bl	8002afc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_SPI_MspInit+0x160>)
 80030a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030a4:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <HAL_SPI_MspInit+0x160>)
 80030a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_SPI_MspInit+0x160>)
 80030b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <HAL_SPI_MspInit+0x160>)
 80030be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c2:	4a14      	ldr	r2, [pc, #80]	; (8003114 <HAL_SPI_MspInit+0x160>)
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_SPI_MspInit+0x160>)
 80030ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80030da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80030de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030f4:	2305      	movs	r3, #5
 80030f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030fe:	4619      	mov	r1, r3
 8003100:	4805      	ldr	r0, [pc, #20]	; (8003118 <HAL_SPI_MspInit+0x164>)
 8003102:	f005 fbc5 	bl	8008890 <HAL_GPIO_Init>
}
 8003106:	bf00      	nop
 8003108:	37f0      	adds	r7, #240	; 0xf0
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40013000 	.word	0x40013000
 8003114:	58024400 	.word	0x58024400
 8003118:	58020400 	.word	0x58020400
 800311c:	40003800 	.word	0x40003800

08003120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a37      	ldr	r2, [pc, #220]	; (800320c <HAL_TIM_Base_MspInit+0xec>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d12f      	bne.n	8003192 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_TIM_Base_MspInit+0xf0>)
 8003134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003138:	4a35      	ldr	r2, [pc, #212]	; (8003210 <HAL_TIM_Base_MspInit+0xf0>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003142:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_TIM_Base_MspInit+0xf0>)
 8003144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003150:	2200      	movs	r2, #0
 8003152:	2105      	movs	r1, #5
 8003154:	2018      	movs	r0, #24
 8003156:	f002 f931 	bl	80053bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800315a:	2018      	movs	r0, #24
 800315c:	f002 f948 	bl	80053f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003160:	2200      	movs	r2, #0
 8003162:	2105      	movs	r1, #5
 8003164:	2019      	movs	r0, #25
 8003166:	f002 f929 	bl	80053bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800316a:	2019      	movs	r0, #25
 800316c:	f002 f940 	bl	80053f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003170:	2200      	movs	r2, #0
 8003172:	2105      	movs	r1, #5
 8003174:	201a      	movs	r0, #26
 8003176:	f002 f921 	bl	80053bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800317a:	201a      	movs	r0, #26
 800317c:	f002 f938 	bl	80053f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003180:	2200      	movs	r2, #0
 8003182:	2105      	movs	r1, #5
 8003184:	201b      	movs	r0, #27
 8003186:	f002 f919 	bl	80053bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800318a:	201b      	movs	r0, #27
 800318c:	f002 f930 	bl	80053f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003190:	e038      	b.n	8003204 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319a:	d117      	bne.n	80031cc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_TIM_Base_MspInit+0xf0>)
 800319e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a2:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <HAL_TIM_Base_MspInit+0xf0>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031ac:	4b18      	ldr	r3, [pc, #96]	; (8003210 <HAL_TIM_Base_MspInit+0xf0>)
 80031ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2105      	movs	r1, #5
 80031be:	201c      	movs	r0, #28
 80031c0:	f002 f8fc 	bl	80053bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031c4:	201c      	movs	r0, #28
 80031c6:	f002 f913 	bl	80053f0 <HAL_NVIC_EnableIRQ>
}
 80031ca:	e01b      	b.n	8003204 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a10      	ldr	r2, [pc, #64]	; (8003214 <HAL_TIM_Base_MspInit+0xf4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d116      	bne.n	8003204 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <HAL_TIM_Base_MspInit+0xf0>)
 80031d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <HAL_TIM_Base_MspInit+0xf0>)
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_TIM_Base_MspInit+0xf0>)
 80031e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80031f4:	2200      	movs	r2, #0
 80031f6:	2105      	movs	r1, #5
 80031f8:	201d      	movs	r0, #29
 80031fa:	f002 f8df 	bl	80053bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031fe:	201d      	movs	r0, #29
 8003200:	f002 f8f6 	bl	80053f0 <HAL_NVIC_EnableIRQ>
}
 8003204:	bf00      	nop
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40010000 	.word	0x40010000
 8003210:	58024400 	.word	0x58024400
 8003214:	40000400 	.word	0x40000400

08003218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <HAL_TIM_MspPostInit+0xb8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d120      	bne.n	800327c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_TIM_MspPostInit+0xbc>)
 800323c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003240:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <HAL_TIM_MspPostInit+0xbc>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800324a:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_TIM_MspPostInit+0xbc>)
 800324c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800325c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325e:	2302      	movs	r3, #2
 8003260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800326a:	2301      	movs	r3, #1
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326e:	f107 0314 	add.w	r3, r7, #20
 8003272:	4619      	mov	r1, r3
 8003274:	4818      	ldr	r0, [pc, #96]	; (80032d8 <HAL_TIM_MspPostInit+0xc0>)
 8003276:	f005 fb0b 	bl	8008890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800327a:	e024      	b.n	80032c6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d11f      	bne.n	80032c6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <HAL_TIM_MspPostInit+0xbc>)
 8003288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328c:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <HAL_TIM_MspPostInit+0xbc>)
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_TIM_MspPostInit+0xbc>)
 8003298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80032a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032aa:	2302      	movs	r3, #2
 80032ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2300      	movs	r3, #0
 80032b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032b6:	2301      	movs	r3, #1
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	4619      	mov	r1, r3
 80032c0:	4806      	ldr	r0, [pc, #24]	; (80032dc <HAL_TIM_MspPostInit+0xc4>)
 80032c2:	f005 fae5 	bl	8008890 <HAL_GPIO_Init>
}
 80032c6:	bf00      	nop
 80032c8:	3728      	adds	r7, #40	; 0x28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40010000 	.word	0x40010000
 80032d4:	58024400 	.word	0x58024400
 80032d8:	58020000 	.word	0x58020000
 80032dc:	58020400 	.word	0x58020400

080032e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b0ba      	sub	sp, #232	; 0xe8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032f8:	f107 0310 	add.w	r3, r7, #16
 80032fc:	22c0      	movs	r2, #192	; 0xc0
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f012 ff73 	bl	80161ec <memset>
  if(huart->Instance==USART1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a41      	ldr	r2, [pc, #260]	; (8003410 <HAL_UART_MspInit+0x130>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d17b      	bne.n	8003408 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003310:	f04f 0201 	mov.w	r2, #1
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800331c:	2300      	movs	r3, #0
 800331e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003322:	f107 0310 	add.w	r3, r7, #16
 8003326:	4618      	mov	r0, r3
 8003328:	f007 fb02 	bl	800a930 <HAL_RCCEx_PeriphCLKConfig>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003332:	f7ff fbe3 	bl	8002afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_UART_MspInit+0x134>)
 8003338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800333c:	4a35      	ldr	r2, [pc, #212]	; (8003414 <HAL_UART_MspInit+0x134>)
 800333e:	f043 0310 	orr.w	r3, r3, #16
 8003342:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003346:	4b33      	ldr	r3, [pc, #204]	; (8003414 <HAL_UART_MspInit+0x134>)
 8003348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003354:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <HAL_UART_MspInit+0x134>)
 8003356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335a:	4a2e      	ldr	r2, [pc, #184]	; (8003414 <HAL_UART_MspInit+0x134>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003364:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_UART_MspInit+0x134>)
 8003366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003372:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800338c:	2307      	movs	r3, #7
 800338e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003392:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003396:	4619      	mov	r1, r3
 8003398:	481f      	ldr	r0, [pc, #124]	; (8003418 <HAL_UART_MspInit+0x138>)
 800339a:	f005 fa79 	bl	8008890 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800339e:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_UART_MspInit+0x140>)
 80033a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033a6:	222a      	movs	r2, #42	; 0x2a
 80033a8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033ac:	2240      	movs	r2, #64	; 0x40
 80033ae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b0:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033dc:	480f      	ldr	r0, [pc, #60]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033de:	f002 fc1b 	bl	8005c18 <HAL_DMA_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80033e8:	f7ff fb88 	bl	8002afc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a0b      	ldr	r2, [pc, #44]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033f0:	67da      	str	r2, [r3, #124]	; 0x7c
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_UART_MspInit+0x13c>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80033f8:	2200      	movs	r2, #0
 80033fa:	2105      	movs	r1, #5
 80033fc:	2025      	movs	r0, #37	; 0x25
 80033fe:	f001 ffdd 	bl	80053bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003402:	2025      	movs	r0, #37	; 0x25
 8003404:	f001 fff4 	bl	80053f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003408:	bf00      	nop
 800340a:	37e8      	adds	r7, #232	; 0xe8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40011000 	.word	0x40011000
 8003414:	58024400 	.word	0x58024400
 8003418:	58020000 	.word	0x58020000
 800341c:	24000680 	.word	0x24000680
 8003420:	40020040 	.word	0x40020040

08003424 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b090      	sub	sp, #64	; 0x40
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b0f      	cmp	r3, #15
 8003430:	d827      	bhi.n	8003482 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003432:	2200      	movs	r2, #0
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	2036      	movs	r0, #54	; 0x36
 8003438:	f001 ffc0 	bl	80053bc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800343c:	2036      	movs	r0, #54	; 0x36
 800343e:	f001 ffd7 	bl	80053f0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003442:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <HAL_InitTick+0xc4>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <HAL_InitTick+0xc8>)
 800344a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800344e:	4a27      	ldr	r2, [pc, #156]	; (80034ec <HAL_InitTick+0xc8>)
 8003450:	f043 0310 	orr.w	r3, r3, #16
 8003454:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003458:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_InitTick+0xc8>)
 800345a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003466:	f107 0210 	add.w	r2, r7, #16
 800346a:	f107 0314 	add.w	r3, r7, #20
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f007 fa1b 	bl	800a8ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <HAL_InitTick+0x6a>
 8003480:	e001      	b.n	8003486 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e02b      	b.n	80034de <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003486:	f007 f9e5 	bl	800a854 <HAL_RCC_GetPCLK1Freq>
 800348a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800348c:	e004      	b.n	8003498 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800348e:	f007 f9e1 	bl	800a854 <HAL_RCC_GetPCLK1Freq>
 8003492:	4603      	mov	r3, r0
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349a:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <HAL_InitTick+0xcc>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	0c9b      	lsrs	r3, r3, #18
 80034a2:	3b01      	subs	r3, #1
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80034a6:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <HAL_InitTick+0xd0>)
 80034a8:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <HAL_InitTick+0xd4>)
 80034aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_InitTick+0xd0>)
 80034ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034b4:	4a0f      	ldr	r2, [pc, #60]	; (80034f4 <HAL_InitTick+0xd0>)
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_InitTick+0xd0>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_InitTick+0xd0>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80034c6:	480b      	ldr	r0, [pc, #44]	; (80034f4 <HAL_InitTick+0xd0>)
 80034c8:	f00a fea3 	bl	800e212 <HAL_TIM_Base_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80034d2:	4808      	ldr	r0, [pc, #32]	; (80034f4 <HAL_InitTick+0xd0>)
 80034d4:	f00a ff8c 	bl	800e3f0 <HAL_TIM_Base_Start_IT>
 80034d8:	4603      	mov	r3, r0
 80034da:	e000      	b.n	80034de <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3740      	adds	r7, #64	; 0x40
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	24000098 	.word	0x24000098
 80034ec:	58024400 	.word	0x58024400
 80034f0:	431bde83 	.word	0x431bde83
 80034f4:	24001078 	.word	0x24001078
 80034f8:	40001000 	.word	0x40001000

080034fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003500:	e7fe      	b.n	8003500 <NMI_Handler+0x4>

08003502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003506:	e7fe      	b.n	8003506 <HardFault_Handler+0x4>

08003508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800350c:	e7fe      	b.n	800350c <MemManage_Handler+0x4>

0800350e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003512:	e7fe      	b.n	8003512 <BusFault_Handler+0x4>

08003514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003518:	e7fe      	b.n	8003518 <UsageFault_Handler+0x4>

0800351a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800351a:	b480      	push	{r7}
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <DMA1_Stream0_IRQHandler+0x10>)
 800352e:	f003 fe9d 	bl	800726c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	24000204 	.word	0x24000204

0800353c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <DMA1_Stream1_IRQHandler+0x10>)
 8003542:	f003 fe93 	bl	800726c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	2400027c 	.word	0x2400027c

08003550 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <DMA1_Stream2_IRQHandler+0x10>)
 8003556:	f003 fe89 	bl	800726c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	24000680 	.word	0x24000680

08003564 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <DMA1_Stream5_IRQHandler+0x10>)
 800356a:	f003 fe7f 	bl	800726c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	24000308 	.word	0x24000308

08003578 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <TIM1_BRK_IRQHandler+0x10>)
 800357e:	f00b fa79 	bl	800ea74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	24000508 	.word	0x24000508

0800358c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <TIM1_UP_IRQHandler+0x10>)
 8003592:	f00b fa6f 	bl	800ea74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	24000508 	.word	0x24000508

080035a0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80035a6:	f00b fa65 	bl	800ea74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	24000508 	.word	0x24000508

080035b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <TIM1_CC_IRQHandler+0x10>)
 80035ba:	f00b fa5b 	bl	800ea74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	24000508 	.word	0x24000508

080035c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035cc:	4802      	ldr	r0, [pc, #8]	; (80035d8 <TIM2_IRQHandler+0x10>)
 80035ce:	f00b fa51 	bl	800ea74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	24000554 	.word	0x24000554

080035dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035e0:	4802      	ldr	r0, [pc, #8]	; (80035ec <TIM3_IRQHandler+0x10>)
 80035e2:	f00b fa47 	bl	800ea74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	240005a0 	.word	0x240005a0

080035f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <USART1_IRQHandler+0x10>)
 80035f6:	f00c fd4b 	bl	8010090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	240005ec 	.word	0x240005ec

08003604 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <TIM6_DAC_IRQHandler+0x20>)
 800360a:	791b      	ldrb	r3, [r3, #4]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003612:	4804      	ldr	r0, [pc, #16]	; (8003624 <TIM6_DAC_IRQHandler+0x20>)
 8003614:	f002 f881 	bl	800571a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003618:	4803      	ldr	r0, [pc, #12]	; (8003628 <TIM6_DAC_IRQHandler+0x24>)
 800361a:	f00b fa2b 	bl	800ea74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	240002f4 	.word	0x240002f4
 8003628:	24001078 	.word	0x24001078

0800362c <ITM_SendChar>:
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <ITM_SendChar+0x48>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <ITM_SendChar+0x48>)
 800363c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <ITM_SendChar+0x4c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <ITM_SendChar+0x4c>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	bf00      	nop
 8003650:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f8      	beq.n	8003650 <ITM_SendChar+0x24>
 800365e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000edfc 	.word	0xe000edfc
 8003678:	e0000e00 	.word	0xe0000e00

0800367c <_read>:
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	e00a      	b.n	80036a4 <_read+0x28>
 800368e:	f3af 8000 	nop.w
 8003692:	4601      	mov	r1, r0
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	60ba      	str	r2, [r7, #8]
 800369a:	b2ca      	uxtb	r2, r1
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3301      	adds	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	dbf0      	blt.n	800368e <_read+0x12>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_write>:
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e009      	b.n	80036dc <_write+0x26>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	60ba      	str	r2, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ffab 	bl	800362c <ITM_SendChar>
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3301      	adds	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	dbf1      	blt.n	80036c8 <_write+0x12>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <_close>:
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <_fstat>:
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	2300      	movs	r3, #0
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <_isatty>:
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	2301      	movs	r3, #1
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <_lseek>:
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	2300      	movs	r3, #0
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <_sbrk>:
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <_sbrk+0x5c>)
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <_sbrk+0x60>)
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <_sbrk+0x64>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <_sbrk+0x22>
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <_sbrk+0x64>)
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <_sbrk+0x68>)
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <_sbrk+0x64>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	429a      	cmp	r2, r3
 8003786:	d207      	bcs.n	8003798 <_sbrk+0x40>
 8003788:	f012 fce8 	bl	801615c <__errno>
 800378c:	4603      	mov	r3, r0
 800378e:	220c      	movs	r2, #12
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003796:	e009      	b.n	80037ac <_sbrk+0x54>
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <_sbrk+0x64>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <_sbrk+0x64>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <_sbrk+0x64>)
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	24080000 	.word	0x24080000
 80037b8:	00000400 	.word	0x00000400
 80037bc:	240010c4 	.word	0x240010c4
 80037c0:	24005a30 	.word	0x24005a30

080037c4 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80037c8:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <SystemInit+0xe4>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	4a36      	ldr	r2, [pc, #216]	; (80038a8 <SystemInit+0xe4>)
 80037d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80037d8:	4b34      	ldr	r3, [pc, #208]	; (80038ac <SystemInit+0xe8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	2b06      	cmp	r3, #6
 80037e2:	d807      	bhi.n	80037f4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80037e4:	4b31      	ldr	r3, [pc, #196]	; (80038ac <SystemInit+0xe8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 030f 	bic.w	r3, r3, #15
 80037ec:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <SystemInit+0xe8>)
 80037ee:	f043 0307 	orr.w	r3, r3, #7
 80037f2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80037f4:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <SystemInit+0xec>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2d      	ldr	r2, [pc, #180]	; (80038b0 <SystemInit+0xec>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003800:	4b2b      	ldr	r3, [pc, #172]	; (80038b0 <SystemInit+0xec>)
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003806:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <SystemInit+0xec>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4929      	ldr	r1, [pc, #164]	; (80038b0 <SystemInit+0xec>)
 800380c:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <SystemInit+0xf0>)
 800380e:	4013      	ands	r3, r2
 8003810:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003812:	4b26      	ldr	r3, [pc, #152]	; (80038ac <SystemInit+0xe8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800381e:	4b23      	ldr	r3, [pc, #140]	; (80038ac <SystemInit+0xe8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 030f 	bic.w	r3, r3, #15
 8003826:	4a21      	ldr	r2, [pc, #132]	; (80038ac <SystemInit+0xe8>)
 8003828:	f043 0307 	orr.w	r3, r3, #7
 800382c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <SystemInit+0xec>)
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003834:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <SystemInit+0xec>)
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <SystemInit+0xec>)
 800383c:	2200      	movs	r2, #0
 800383e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003840:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <SystemInit+0xec>)
 8003842:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <SystemInit+0xf4>)
 8003844:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003846:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <SystemInit+0xec>)
 8003848:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <SystemInit+0xf8>)
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 800384c:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <SystemInit+0xec>)
 800384e:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <SystemInit+0xfc>)
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <SystemInit+0xec>)
 8003854:	2200      	movs	r2, #0
 8003856:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <SystemInit+0xec>)
 800385a:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <SystemInit+0xfc>)
 800385c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800385e:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <SystemInit+0xec>)
 8003860:	2200      	movs	r2, #0
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <SystemInit+0xec>)
 8003866:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <SystemInit+0xfc>)
 8003868:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <SystemInit+0xec>)
 800386c:	2200      	movs	r2, #0
 800386e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <SystemInit+0xec>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0e      	ldr	r2, [pc, #56]	; (80038b0 <SystemInit+0xec>)
 8003876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <SystemInit+0xec>)
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <SystemInit+0x100>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <SystemInit+0x104>)
 8003888:	4013      	ands	r3, r2
 800388a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388e:	d202      	bcs.n	8003896 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <SystemInit+0x108>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003896:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <SystemInit+0x10c>)
 8003898:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800389c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00
 80038ac:	52002000 	.word	0x52002000
 80038b0:	58024400 	.word	0x58024400
 80038b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80038b8:	02020200 	.word	0x02020200
 80038bc:	01ff0000 	.word	0x01ff0000
 80038c0:	01010280 	.word	0x01010280
 80038c4:	5c001000 	.word	0x5c001000
 80038c8:	ffff0000 	.word	0xffff0000
 80038cc:	51008108 	.word	0x51008108
 80038d0:	52004000 	.word	0x52004000

080038d4 <Reset_Handler>:
 80038d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800390c <LoopFillZerobss+0xe>
 80038d8:	f7ff ff74 	bl	80037c4 <SystemInit>
 80038dc:	480c      	ldr	r0, [pc, #48]	; (8003910 <LoopFillZerobss+0x12>)
 80038de:	490d      	ldr	r1, [pc, #52]	; (8003914 <LoopFillZerobss+0x16>)
 80038e0:	4a0d      	ldr	r2, [pc, #52]	; (8003918 <LoopFillZerobss+0x1a>)
 80038e2:	2300      	movs	r3, #0
 80038e4:	e002      	b.n	80038ec <LoopCopyDataInit>

080038e6 <CopyDataInit>:
 80038e6:	58d4      	ldr	r4, [r2, r3]
 80038e8:	50c4      	str	r4, [r0, r3]
 80038ea:	3304      	adds	r3, #4

080038ec <LoopCopyDataInit>:
 80038ec:	18c4      	adds	r4, r0, r3
 80038ee:	428c      	cmp	r4, r1
 80038f0:	d3f9      	bcc.n	80038e6 <CopyDataInit>
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <LoopFillZerobss+0x1e>)
 80038f4:	4c0a      	ldr	r4, [pc, #40]	; (8003920 <LoopFillZerobss+0x22>)
 80038f6:	2300      	movs	r3, #0
 80038f8:	e001      	b.n	80038fe <LoopFillZerobss>

080038fa <FillZerobss>:
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	3204      	adds	r2, #4

080038fe <LoopFillZerobss>:
 80038fe:	42a2      	cmp	r2, r4
 8003900:	d3fb      	bcc.n	80038fa <FillZerobss>
 8003902:	f012 fc31 	bl	8016168 <__libc_init_array>
 8003906:	f7fd fa9d 	bl	8000e44 <main>
 800390a:	4770      	bx	lr
 800390c:	24080000 	.word	0x24080000
 8003910:	24000000 	.word	0x24000000
 8003914:	24000108 	.word	0x24000108
 8003918:	08017034 	.word	0x08017034
 800391c:	24000120 	.word	0x24000120
 8003920:	24005a2c 	.word	0x24005a2c

08003924 <ADC3_IRQHandler>:
 8003924:	e7fe      	b.n	8003924 <ADC3_IRQHandler>
	...

08003928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392e:	2003      	movs	r0, #3
 8003930:	f001 fd39 	bl	80053a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003934:	f006 fde4 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_Init+0x68>)
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	4913      	ldr	r1, [pc, #76]	; (8003994 <HAL_Init+0x6c>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
 8003950:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003952:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <HAL_Init+0x68>)
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <HAL_Init+0x6c>)
 800395c:	5cd3      	ldrb	r3, [r2, r3]
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
 8003968:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <HAL_Init+0x70>)
 800396a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800396c:	4a0b      	ldr	r2, [pc, #44]	; (800399c <HAL_Init+0x74>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003972:	2005      	movs	r0, #5
 8003974:	f7ff fd56 	bl	8003424 <HAL_InitTick>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e002      	b.n	8003988 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003982:	f7ff f8c1 	bl	8002b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	58024400 	.word	0x58024400
 8003994:	08016f80 	.word	0x08016f80
 8003998:	24000094 	.word	0x24000094
 800399c:	24000090 	.word	0x24000090

080039a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_IncTick+0x20>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_IncTick+0x24>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_IncTick+0x24>)
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	2400009c 	.word	0x2400009c
 80039c4:	240010c8 	.word	0x240010c8

080039c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return uwTick;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_GetTick+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	240010c8 	.word	0x240010c8

080039e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_GetREVID+0x14>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	0c1b      	lsrs	r3, r3, #16
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	5c001000 	.word	0x5c001000

080039f8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	4904      	ldr	r1, [pc, #16]	; (8003a20 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	58000400 	.word	0x58000400

08003a24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	609a      	str	r2, [r3, #8]
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3360      	adds	r3, #96	; 0x60
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	611a      	str	r2, [r3, #16]
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b087      	sub	sp, #28
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3360      	adds	r3, #96	; 0x60
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]
  }
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3330      	adds	r3, #48	; 0x30
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	4413      	add	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	211f      	movs	r1, #31
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	0e9b      	lsrs	r3, r3, #26
 8003b92:	f003 011f 	and.w	r1, r3, #31
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f023 0203 	bic.w	r2, r3, #3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3314      	adds	r3, #20
 8003be8:	461a      	mov	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	0e5b      	lsrs	r3, r3, #25
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	4413      	add	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	0d1b      	lsrs	r3, r3, #20
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2107      	movs	r1, #7
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	0d1b      	lsrs	r3, r3, #20
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f003 0318 	and.w	r3, r3, #24
 8003c52:	4908      	ldr	r1, [pc, #32]	; (8003c74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c54:	40d9      	lsrs	r1, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	400b      	ands	r3, r1
 8003c5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	000fffff 	.word	0x000fffff

08003c78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 031f 	and.w	r3, r3, #31
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6093      	str	r3, [r2, #8]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	5fffffc0 	.word	0x5fffffc0

08003cb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ccc:	d101      	bne.n	8003cd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <LL_ADC_EnableInternalRegulator+0x24>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	6fffffc0 	.word	0x6fffffc0

08003d08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d1c:	d101      	bne.n	8003d22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <LL_ADC_Enable+0x24>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	7fffffc0 	.word	0x7fffffc0

08003d58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <LL_ADC_Disable+0x24>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	f043 0202 	orr.w	r2, r3, #2
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	7fffffc0 	.word	0x7fffffc0

08003d80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <LL_ADC_IsEnabled+0x18>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <LL_ADC_IsEnabled+0x1a>
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d101      	bne.n	8003dbe <LL_ADC_IsDisableOngoing+0x18>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <LL_ADC_IsDisableOngoing+0x1a>
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <LL_ADC_REG_StartConversion+0x24>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	7fffffc0 	.word	0x7fffffc0

08003df4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d101      	bne.n	8003e0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d101      	bne.n	8003e32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b089      	sub	sp, #36	; 0x24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e18f      	b.n	800417a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7fe fe6b 	bl	8002b44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff19 	bl	8003cb8 <LL_ADC_IsDeepPowerDownEnabled>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d004      	beq.n	8003e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff feff 	bl	8003c94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff ff34 	bl	8003d08 <LL_ADC_IsInternalRegulatorEnabled>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d114      	bne.n	8003ed0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ff18 	bl	8003ce0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eb0:	4b87      	ldr	r3, [pc, #540]	; (80040d0 <HAL_ADC_Init+0x290>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	4a87      	ldr	r2, [pc, #540]	; (80040d4 <HAL_ADC_Init+0x294>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ec2:	e002      	b.n	8003eca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f9      	bne.n	8003ec4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff17 	bl	8003d08 <LL_ADC_IsInternalRegulatorEnabled>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f043 0210 	orr.w	r2, r3, #16
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	f043 0201 	orr.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff77 	bl	8003df4 <LL_ADC_REG_IsConversionOngoing>
 8003f06:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f040 8129 	bne.w	8004168 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 8125 	bne.w	8004168 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f26:	f043 0202 	orr.w	r2, r3, #2
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff24 	bl	8003d80 <LL_ADC_IsEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d136      	bne.n	8003fac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a65      	ldr	r2, [pc, #404]	; (80040d8 <HAL_ADC_Init+0x298>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_ADC_Init+0x112>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a63      	ldr	r2, [pc, #396]	; (80040dc <HAL_ADC_Init+0x29c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10e      	bne.n	8003f70 <HAL_ADC_Init+0x130>
 8003f52:	4861      	ldr	r0, [pc, #388]	; (80040d8 <HAL_ADC_Init+0x298>)
 8003f54:	f7ff ff14 	bl	8003d80 <LL_ADC_IsEnabled>
 8003f58:	4604      	mov	r4, r0
 8003f5a:	4860      	ldr	r0, [pc, #384]	; (80040dc <HAL_ADC_Init+0x29c>)
 8003f5c:	f7ff ff10 	bl	8003d80 <LL_ADC_IsEnabled>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4323      	orrs	r3, r4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e008      	b.n	8003f82 <HAL_ADC_Init+0x142>
 8003f70:	485b      	ldr	r0, [pc, #364]	; (80040e0 <HAL_ADC_Init+0x2a0>)
 8003f72:	f7ff ff05 	bl	8003d80 <LL_ADC_IsEnabled>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d012      	beq.n	8003fac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a53      	ldr	r2, [pc, #332]	; (80040d8 <HAL_ADC_Init+0x298>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_ADC_Init+0x15a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a51      	ldr	r2, [pc, #324]	; (80040dc <HAL_ADC_Init+0x29c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_ADC_Init+0x15e>
 8003f9a:	4a52      	ldr	r2, [pc, #328]	; (80040e4 <HAL_ADC_Init+0x2a4>)
 8003f9c:	e000      	b.n	8003fa0 <HAL_ADC_Init+0x160>
 8003f9e:	4a52      	ldr	r2, [pc, #328]	; (80040e8 <HAL_ADC_Init+0x2a8>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f7ff fd3c 	bl	8003a24 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003fac:	f7ff fd18 	bl	80039e0 <HAL_GetREVID>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d914      	bls.n	8003fe4 <HAL_ADC_Init+0x1a4>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b10      	cmp	r3, #16
 8003fc0:	d110      	bne.n	8003fe4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7d5b      	ldrb	r3, [r3, #21]
 8003fc6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fcc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003fd2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	7f1b      	ldrb	r3, [r3, #28]
 8003fd8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003fda:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fdc:	f043 030c 	orr.w	r3, r3, #12
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	e00d      	b.n	8004000 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7d5b      	ldrb	r3, [r3, #21]
 8003fe8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ff4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7f1b      	ldrb	r3, [r3, #28]
 8003ffa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7f1b      	ldrb	r3, [r3, #28]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d106      	bne.n	8004016 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	3b01      	subs	r3, #1
 800400e:	045b      	lsls	r3, r3, #17
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <HAL_ADC_Init+0x2ac>)
 800403a:	4013      	ands	r3, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	69b9      	ldr	r1, [r7, #24]
 8004042:	430b      	orrs	r3, r1
 8004044:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fed2 	bl	8003df4 <LL_ADC_REG_IsConversionOngoing>
 8004050:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fedf 	bl	8003e1a <LL_ADC_INJ_IsConversionOngoing>
 800405c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d15f      	bne.n	8004124 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d15c      	bne.n	8004124 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7d1b      	ldrb	r3, [r3, #20]
 800406e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <HAL_ADC_Init+0x2b0>)
 8004080:	4013      	ands	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	69b9      	ldr	r1, [r7, #24]
 8004088:	430b      	orrs	r3, r1
 800408a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004092:	2b01      	cmp	r3, #1
 8004094:	d130      	bne.n	80040f8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <HAL_ADC_Init+0x2b4>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040aa:	3a01      	subs	r2, #1
 80040ac:	0411      	lsls	r1, r2, #16
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040b2:	4311      	orrs	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040b8:	4311      	orrs	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040be:	430a      	orrs	r2, r1
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	611a      	str	r2, [r3, #16]
 80040cc:	e01c      	b.n	8004108 <HAL_ADC_Init+0x2c8>
 80040ce:	bf00      	nop
 80040d0:	24000090 	.word	0x24000090
 80040d4:	053e2d63 	.word	0x053e2d63
 80040d8:	40022000 	.word	0x40022000
 80040dc:	40022100 	.word	0x40022100
 80040e0:	58026000 	.word	0x58026000
 80040e4:	40022300 	.word	0x40022300
 80040e8:	58026300 	.word	0x58026300
 80040ec:	fff0c003 	.word	0xfff0c003
 80040f0:	ffffbffc 	.word	0xffffbffc
 80040f4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fdec 	bl	8004cfc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d10c      	bne.n	8004146 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	f023 010f 	bic.w	r1, r3, #15
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	1e5a      	subs	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
 8004144:	e007      	b.n	8004156 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 020f 	bic.w	r2, r2, #15
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	f043 0201 	orr.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	655a      	str	r2, [r3, #84]	; 0x54
 8004166:	e007      	b.n	8004178 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	f043 0210 	orr.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004178:	7ffb      	ldrb	r3, [r7, #31]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3724      	adds	r7, #36	; 0x24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd90      	pop	{r4, r7, pc}
 8004182:	bf00      	nop

08004184 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a55      	ldr	r2, [pc, #340]	; (80042ec <HAL_ADC_Start_DMA+0x168>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_ADC_Start_DMA+0x20>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a54      	ldr	r2, [pc, #336]	; (80042f0 <HAL_ADC_Start_DMA+0x16c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_ADC_Start_DMA+0x24>
 80041a4:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <HAL_ADC_Start_DMA+0x170>)
 80041a6:	e000      	b.n	80041aa <HAL_ADC_Start_DMA+0x26>
 80041a8:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <HAL_ADC_Start_DMA+0x174>)
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fd64 	bl	8003c78 <LL_ADC_GetMultimode>
 80041b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fe1c 	bl	8003df4 <LL_ADC_REG_IsConversionOngoing>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 808c 	bne.w	80042dc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_Start_DMA+0x4e>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e087      	b.n	80042e2 <HAL_ADC_Start_DMA+0x15e>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	d002      	beq.n	80041ec <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b09      	cmp	r3, #9
 80041ea:	d170      	bne.n	80042ce <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fc07 	bl	8004a00 <ADC_Enable>
 80041f2:	4603      	mov	r3, r0
 80041f4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d163      	bne.n	80042c4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004200:	4b3e      	ldr	r3, [pc, #248]	; (80042fc <HAL_ADC_Start_DMA+0x178>)
 8004202:	4013      	ands	r3, r2
 8004204:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a37      	ldr	r2, [pc, #220]	; (80042f0 <HAL_ADC_Start_DMA+0x16c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d002      	beq.n	800421c <HAL_ADC_Start_DMA+0x98>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	e000      	b.n	800421e <HAL_ADC_Start_DMA+0x9a>
 800421c:	4b33      	ldr	r3, [pc, #204]	; (80042ec <HAL_ADC_Start_DMA+0x168>)
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	4293      	cmp	r3, r2
 8004224:	d002      	beq.n	800422c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004230:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d006      	beq.n	8004252 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f023 0206 	bic.w	r2, r3, #6
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	659a      	str	r2, [r3, #88]	; 0x58
 8004250:	e002      	b.n	8004258 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425c:	4a28      	ldr	r2, [pc, #160]	; (8004300 <HAL_ADC_Start_DMA+0x17c>)
 800425e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <HAL_ADC_Start_DMA+0x180>)
 8004266:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426c:	4a26      	ldr	r2, [pc, #152]	; (8004308 <HAL_ADC_Start_DMA+0x184>)
 800426e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	221c      	movs	r2, #28
 8004276:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0210 	orr.w	r2, r2, #16
 800428e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7ff fc89 	bl	8003bb2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3340      	adds	r3, #64	; 0x40
 80042aa:	4619      	mov	r1, r3
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f002 f80e 	bl	80062d0 <HAL_DMA_Start_IT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fd85 	bl	8003dcc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80042c2:	e00d      	b.n	80042e0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80042cc:	e008      	b.n	80042e0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80042da:	e001      	b.n	80042e0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
 80042de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40022000 	.word	0x40022000
 80042f0:	40022100 	.word	0x40022100
 80042f4:	40022300 	.word	0x40022300
 80042f8:	58026300 	.word	0x58026300
 80042fc:	fffff0fe 	.word	0xfffff0fe
 8004300:	08004bd3 	.word	0x08004bd3
 8004304:	08004cab 	.word	0x08004cab
 8004308:	08004cc7 	.word	0x08004cc7

0800430c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b0a1      	sub	sp, #132	; 0x84
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a65      	ldr	r2, [pc, #404]	; (80044f8 <HAL_ADC_ConfigChannel+0x1b0>)
 8004362:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x2a>
 800436e:	2302      	movs	r3, #2
 8004370:	e32e      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x688>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fd38 	bl	8003df4 <LL_ADC_REG_IsConversionOngoing>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 8313 	bne.w	80049b2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	db2c      	blt.n	80043ee <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x6a>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	0e9b      	lsrs	r3, r3, #26
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2201      	movs	r2, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	e016      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x98>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043c2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80043ca:	2320      	movs	r3, #32
 80043cc:	e003      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80043ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043d0:	fab3 f383 	clz	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2201      	movs	r2, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	69d1      	ldr	r1, [r2, #28]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	430b      	orrs	r3, r1
 80043ec:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f7ff fbad 	bl	8003b5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fcf5 	bl	8003df4 <LL_ADC_REG_IsConversionOngoing>
 800440a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fd02 	bl	8003e1a <LL_ADC_INJ_IsConversionOngoing>
 8004416:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800441a:	2b00      	cmp	r3, #0
 800441c:	f040 80b8 	bne.w	8004590 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 80b4 	bne.w	8004590 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	461a      	mov	r2, r3
 8004436:	f7ff fbcf 	bl	8003bd8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800443a:	4b30      	ldr	r3, [pc, #192]	; (80044fc <HAL_ADC_ConfigChannel+0x1b4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004446:	d10b      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x118>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	089b      	lsrs	r3, r3, #2
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	e01d      	b.n	800449c <HAL_ADC_ConfigChannel+0x154>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x13e>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	e00a      	b.n	800449c <HAL_ADC_ConfigChannel+0x154>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d02c      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6919      	ldr	r1, [r3, #16]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b4:	f7ff faea 	bl	8003a8c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6919      	ldr	r1, [r3, #16]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	7e5b      	ldrb	r3, [r3, #25]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d102      	bne.n	80044ce <HAL_ADC_ConfigChannel+0x186>
 80044c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044cc:	e000      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x188>
 80044ce:	2300      	movs	r3, #0
 80044d0:	461a      	mov	r2, r3
 80044d2:	f7ff fb14 	bl	8003afe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6919      	ldr	r1, [r3, #16]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	7e1b      	ldrb	r3, [r3, #24]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x1a4>
 80044e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044ea:	e000      	b.n	80044ee <HAL_ADC_ConfigChannel+0x1a6>
 80044ec:	2300      	movs	r3, #0
 80044ee:	461a      	mov	r2, r3
 80044f0:	f7ff faec 	bl	8003acc <LL_ADC_SetDataRightShift>
 80044f4:	e04c      	b.n	8004590 <HAL_ADC_ConfigChannel+0x248>
 80044f6:	bf00      	nop
 80044f8:	47ff0000 	.word	0x47ff0000
 80044fc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	069b      	lsls	r3, r3, #26
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004522:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	069b      	lsls	r3, r3, #26
 8004534:	429a      	cmp	r2, r3
 8004536:	d107      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004546:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	069b      	lsls	r3, r3, #26
 8004558:	429a      	cmp	r2, r3
 800455a:	d107      	bne.n	800456c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800456a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	069b      	lsls	r3, r3, #26
 800457c:	429a      	cmp	r2, r3
 800457e:	d107      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800458e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fbf3 	bl	8003d80 <LL_ADC_IsEnabled>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	f040 8211 	bne.w	80049c4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6819      	ldr	r1, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7ff fb3e 	bl	8003c30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4aa1      	ldr	r2, [pc, #644]	; (8004840 <HAL_ADC_ConfigChannel+0x4f8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	f040 812e 	bne.w	800481c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x2a0>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	0e9b      	lsrs	r3, r3, #26
 80045d6:	3301      	adds	r3, #1
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2b09      	cmp	r3, #9
 80045de:	bf94      	ite	ls
 80045e0:	2301      	movls	r3, #1
 80045e2:	2300      	movhi	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e019      	b.n	800461c <HAL_ADC_ConfigChannel+0x2d4>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80045f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80045fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004600:	2320      	movs	r3, #32
 8004602:	e003      	b.n	800460c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	3301      	adds	r3, #1
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2b09      	cmp	r3, #9
 8004614:	bf94      	ite	ls
 8004616:	2301      	movls	r3, #1
 8004618:	2300      	movhi	r3, #0
 800461a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800461c:	2b00      	cmp	r3, #0
 800461e:	d079      	beq.n	8004714 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004628:	2b00      	cmp	r3, #0
 800462a:	d107      	bne.n	800463c <HAL_ADC_ConfigChannel+0x2f4>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	0e9b      	lsrs	r3, r3, #26
 8004632:	3301      	adds	r3, #1
 8004634:	069b      	lsls	r3, r3, #26
 8004636:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800463a:	e015      	b.n	8004668 <HAL_ADC_ConfigChannel+0x320>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004644:	fa93 f3a3 	rbit	r3, r3
 8004648:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800464a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800464e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004654:	2320      	movs	r3, #32
 8004656:	e003      	b.n	8004660 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800465a:	fab3 f383 	clz	r3, r3
 800465e:	b2db      	uxtb	r3, r3
 8004660:	3301      	adds	r3, #1
 8004662:	069b      	lsls	r3, r3, #26
 8004664:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x340>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	0e9b      	lsrs	r3, r3, #26
 800467a:	3301      	adds	r3, #1
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2101      	movs	r1, #1
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	e017      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x370>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004698:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800469a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80046a0:	2320      	movs	r3, #32
 80046a2:	e003      	b.n	80046ac <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80046a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	3301      	adds	r3, #1
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	ea42 0103 	orr.w	r1, r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <HAL_ADC_ConfigChannel+0x396>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	0e9b      	lsrs	r3, r3, #26
 80046ce:	3301      	adds	r3, #1
 80046d0:	f003 021f 	and.w	r2, r3, #31
 80046d4:	4613      	mov	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4413      	add	r3, r2
 80046da:	051b      	lsls	r3, r3, #20
 80046dc:	e018      	b.n	8004710 <HAL_ADC_ConfigChannel+0x3c8>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	fa93 f3a3 	rbit	r3, r3
 80046ea:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80046f6:	2320      	movs	r3, #32
 80046f8:	e003      	b.n	8004702 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	fab3 f383 	clz	r3, r3
 8004700:	b2db      	uxtb	r3, r3
 8004702:	3301      	adds	r3, #1
 8004704:	f003 021f 	and.w	r2, r3, #31
 8004708:	4613      	mov	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004710:	430b      	orrs	r3, r1
 8004712:	e07e      	b.n	8004812 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x3e8>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0e9b      	lsrs	r3, r3, #26
 8004726:	3301      	adds	r3, #1
 8004728:	069b      	lsls	r3, r3, #26
 800472a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800472e:	e015      	b.n	800475c <HAL_ADC_ConfigChannel+0x414>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	fa93 f3a3 	rbit	r3, r3
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004748:	2320      	movs	r3, #32
 800474a:	e003      	b.n	8004754 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	3301      	adds	r3, #1
 8004756:	069b      	lsls	r3, r3, #26
 8004758:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_ADC_ConfigChannel+0x434>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0e9b      	lsrs	r3, r3, #26
 800476e:	3301      	adds	r3, #1
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2101      	movs	r1, #1
 8004776:	fa01 f303 	lsl.w	r3, r1, r3
 800477a:	e017      	b.n	80047ac <HAL_ADC_ConfigChannel+0x464>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa93 f3a3 	rbit	r3, r3
 8004788:	61bb      	str	r3, [r7, #24]
  return result;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004794:	2320      	movs	r3, #32
 8004796:	e003      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	3301      	adds	r3, #1
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2101      	movs	r1, #1
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	ea42 0103 	orr.w	r1, r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10d      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x490>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	0e9b      	lsrs	r3, r3, #26
 80047c2:	3301      	adds	r3, #1
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	4613      	mov	r3, r2
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	4413      	add	r3, r2
 80047ce:	3b1e      	subs	r3, #30
 80047d0:	051b      	lsls	r3, r3, #20
 80047d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047d6:	e01b      	b.n	8004810 <HAL_ADC_ConfigChannel+0x4c8>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	60fb      	str	r3, [r7, #12]
  return result;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80047f0:	2320      	movs	r3, #32
 80047f2:	e003      	b.n	80047fc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	fab3 f383 	clz	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	f003 021f 	and.w	r2, r3, #31
 8004802:	4613      	mov	r3, r2
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	3b1e      	subs	r3, #30
 800480a:	051b      	lsls	r3, r3, #20
 800480c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004810:	430b      	orrs	r3, r1
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	6892      	ldr	r2, [r2, #8]
 8004816:	4619      	mov	r1, r3
 8004818:	f7ff f9de 	bl	8003bd8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f280 80cf 	bge.w	80049c4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a06      	ldr	r2, [pc, #24]	; (8004844 <HAL_ADC_ConfigChannel+0x4fc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_ADC_ConfigChannel+0x4f2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a04      	ldr	r2, [pc, #16]	; (8004848 <HAL_ADC_ConfigChannel+0x500>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d10a      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x508>
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_ADC_ConfigChannel+0x504>)
 800483c:	e009      	b.n	8004852 <HAL_ADC_ConfigChannel+0x50a>
 800483e:	bf00      	nop
 8004840:	47ff0000 	.word	0x47ff0000
 8004844:	40022000 	.word	0x40022000
 8004848:	40022100 	.word	0x40022100
 800484c:	40022300 	.word	0x40022300
 8004850:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <HAL_ADC_ConfigChannel+0x690>)
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff f90c 	bl	8003a70 <LL_ADC_GetCommonPathInternalCh>
 8004858:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a5f      	ldr	r2, [pc, #380]	; (80049dc <HAL_ADC_ConfigChannel+0x694>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_ADC_ConfigChannel+0x526>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5d      	ldr	r2, [pc, #372]	; (80049e0 <HAL_ADC_ConfigChannel+0x698>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10e      	bne.n	800488c <HAL_ADC_ConfigChannel+0x544>
 800486e:	485b      	ldr	r0, [pc, #364]	; (80049dc <HAL_ADC_ConfigChannel+0x694>)
 8004870:	f7ff fa86 	bl	8003d80 <LL_ADC_IsEnabled>
 8004874:	4604      	mov	r4, r0
 8004876:	485a      	ldr	r0, [pc, #360]	; (80049e0 <HAL_ADC_ConfigChannel+0x698>)
 8004878:	f7ff fa82 	bl	8003d80 <LL_ADC_IsEnabled>
 800487c:	4603      	mov	r3, r0
 800487e:	4323      	orrs	r3, r4
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e008      	b.n	800489e <HAL_ADC_ConfigChannel+0x556>
 800488c:	4855      	ldr	r0, [pc, #340]	; (80049e4 <HAL_ADC_ConfigChannel+0x69c>)
 800488e:	f7ff fa77 	bl	8003d80 <LL_ADC_IsEnabled>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d07d      	beq.n	800499e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a50      	ldr	r2, [pc, #320]	; (80049e8 <HAL_ADC_ConfigChannel+0x6a0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d130      	bne.n	800490e <HAL_ADC_ConfigChannel+0x5c6>
 80048ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d12b      	bne.n	800490e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a4a      	ldr	r2, [pc, #296]	; (80049e4 <HAL_ADC_ConfigChannel+0x69c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	f040 8081 	bne.w	80049c4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a45      	ldr	r2, [pc, #276]	; (80049dc <HAL_ADC_ConfigChannel+0x694>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <HAL_ADC_ConfigChannel+0x58e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a43      	ldr	r2, [pc, #268]	; (80049e0 <HAL_ADC_ConfigChannel+0x698>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <HAL_ADC_ConfigChannel+0x592>
 80048d6:	4a45      	ldr	r2, [pc, #276]	; (80049ec <HAL_ADC_ConfigChannel+0x6a4>)
 80048d8:	e000      	b.n	80048dc <HAL_ADC_ConfigChannel+0x594>
 80048da:	4a3f      	ldr	r2, [pc, #252]	; (80049d8 <HAL_ADC_ConfigChannel+0x690>)
 80048dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7ff f8b0 	bl	8003a4a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048ea:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <HAL_ADC_ConfigChannel+0x6a8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	099b      	lsrs	r3, r3, #6
 80048f0:	4a40      	ldr	r2, [pc, #256]	; (80049f4 <HAL_ADC_ConfigChannel+0x6ac>)
 80048f2:	fba2 2303 	umull	r2, r3, r2, r3
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	3301      	adds	r3, #1
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80048fe:	e002      	b.n	8004906 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	3b01      	subs	r3, #1
 8004904:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f9      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800490c:	e05a      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a39      	ldr	r2, [pc, #228]	; (80049f8 <HAL_ADC_ConfigChannel+0x6b0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d11e      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x60e>
 8004918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d119      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2f      	ldr	r2, [pc, #188]	; (80049e4 <HAL_ADC_ConfigChannel+0x69c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d14b      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <HAL_ADC_ConfigChannel+0x694>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_ADC_ConfigChannel+0x5f8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <HAL_ADC_ConfigChannel+0x698>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x5fc>
 8004940:	4a2a      	ldr	r2, [pc, #168]	; (80049ec <HAL_ADC_ConfigChannel+0x6a4>)
 8004942:	e000      	b.n	8004946 <HAL_ADC_ConfigChannel+0x5fe>
 8004944:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <HAL_ADC_ConfigChannel+0x690>)
 8004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004948:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f7ff f87b 	bl	8003a4a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004954:	e036      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a28      	ldr	r2, [pc, #160]	; (80049fc <HAL_ADC_ConfigChannel+0x6b4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d131      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x67c>
 8004960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d12c      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <HAL_ADC_ConfigChannel+0x69c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d127      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a18      	ldr	r2, [pc, #96]	; (80049dc <HAL_ADC_ConfigChannel+0x694>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <HAL_ADC_ConfigChannel+0x640>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a17      	ldr	r2, [pc, #92]	; (80049e0 <HAL_ADC_ConfigChannel+0x698>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d101      	bne.n	800498c <HAL_ADC_ConfigChannel+0x644>
 8004988:	4a18      	ldr	r2, [pc, #96]	; (80049ec <HAL_ADC_ConfigChannel+0x6a4>)
 800498a:	e000      	b.n	800498e <HAL_ADC_ConfigChannel+0x646>
 800498c:	4a12      	ldr	r2, [pc, #72]	; (80049d8 <HAL_ADC_ConfigChannel+0x690>)
 800498e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f7ff f857 	bl	8003a4a <LL_ADC_SetCommonPathInternalCh>
 800499c:	e012      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80049b0:	e008      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3784      	adds	r7, #132	; 0x84
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd90      	pop	{r4, r7, pc}
 80049d8:	58026300 	.word	0x58026300
 80049dc:	40022000 	.word	0x40022000
 80049e0:	40022100 	.word	0x40022100
 80049e4:	58026000 	.word	0x58026000
 80049e8:	cb840000 	.word	0xcb840000
 80049ec:	40022300 	.word	0x40022300
 80049f0:	24000090 	.word	0x24000090
 80049f4:	053e2d63 	.word	0x053e2d63
 80049f8:	c7520000 	.word	0xc7520000
 80049fc:	cfb80000 	.word	0xcfb80000

08004a00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff f9b7 	bl	8003d80 <LL_ADC_IsEnabled>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d16e      	bne.n	8004af6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	4b38      	ldr	r3, [pc, #224]	; (8004b00 <ADC_Enable+0x100>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2a:	f043 0210 	orr.w	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	f043 0201 	orr.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e05a      	b.n	8004af8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff f972 	bl	8003d30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a4c:	f7fe ffbc 	bl	80039c8 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2b      	ldr	r2, [pc, #172]	; (8004b04 <ADC_Enable+0x104>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <ADC_Enable+0x66>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a29      	ldr	r2, [pc, #164]	; (8004b08 <ADC_Enable+0x108>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <ADC_Enable+0x6a>
 8004a66:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <ADC_Enable+0x10c>)
 8004a68:	e000      	b.n	8004a6c <ADC_Enable+0x6c>
 8004a6a:	4b29      	ldr	r3, [pc, #164]	; (8004b10 <ADC_Enable+0x110>)
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff f903 	bl	8003c78 <LL_ADC_GetMultimode>
 8004a72:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a23      	ldr	r2, [pc, #140]	; (8004b08 <ADC_Enable+0x108>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d002      	beq.n	8004a84 <ADC_Enable+0x84>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	e000      	b.n	8004a86 <ADC_Enable+0x86>
 8004a84:	4b1f      	ldr	r3, [pc, #124]	; (8004b04 <ADC_Enable+0x104>)
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d02c      	beq.n	8004ae8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d130      	bne.n	8004af6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a94:	e028      	b.n	8004ae8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff f970 	bl	8003d80 <LL_ADC_IsEnabled>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d104      	bne.n	8004ab0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff f940 	bl	8003d30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ab0:	f7fe ff8a 	bl	80039c8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d914      	bls.n	8004ae8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d00d      	beq.n	8004ae8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	f043 0210 	orr.w	r2, r3, #16
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f043 0201 	orr.w	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d1cf      	bne.n	8004a96 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	8000003f 	.word	0x8000003f
 8004b04:	40022000 	.word	0x40022000
 8004b08:	40022100 	.word	0x40022100
 8004b0c:	40022300 	.word	0x40022300
 8004b10:	58026300 	.word	0x58026300

08004b14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff f940 	bl	8003da6 <LL_ADC_IsDisableOngoing>
 8004b26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff f927 	bl	8003d80 <LL_ADC_IsEnabled>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d047      	beq.n	8004bc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d144      	bne.n	8004bc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 030d 	and.w	r3, r3, #13
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d10c      	bne.n	8004b66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff f901 	bl	8003d58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b5e:	f7fe ff33 	bl	80039c8 <HAL_GetTick>
 8004b62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b64:	e029      	b.n	8004bba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	f043 0210 	orr.w	r2, r3, #16
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b76:	f043 0201 	orr.w	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e023      	b.n	8004bca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b82:	f7fe ff21 	bl	80039c8 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d914      	bls.n	8004bba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00d      	beq.n	8004bba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba2:	f043 0210 	orr.w	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	f043 0201 	orr.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e007      	b.n	8004bca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1dc      	bne.n	8004b82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d14b      	bne.n	8004c84 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d021      	beq.n	8004c4a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe ff92 	bl	8003b34 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d032      	beq.n	8004c7c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d12b      	bne.n	8004c7c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d11f      	bne.n	8004c7c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	f043 0201 	orr.w	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
 8004c48:	e018      	b.n	8004c7c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d111      	bne.n	8004c7c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	f043 0201 	orr.w	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff fb45 	bl	800430c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c82:	e00e      	b.n	8004ca2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fb4f 	bl	8004334 <HAL_ADC_ErrorCallback>
}
 8004c96:	e004      	b.n	8004ca2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff fb31 	bl	8004320 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce4:	f043 0204 	orr.w	r2, r3, #4
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff fb21 	bl	8004334 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a7a      	ldr	r2, [pc, #488]	; (8004ef4 <ADC_ConfigureBoostMode+0x1f8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <ADC_ConfigureBoostMode+0x1c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a79      	ldr	r2, [pc, #484]	; (8004ef8 <ADC_ConfigureBoostMode+0x1fc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d109      	bne.n	8004d2c <ADC_ConfigureBoostMode+0x30>
 8004d18:	4b78      	ldr	r3, [pc, #480]	; (8004efc <ADC_ConfigureBoostMode+0x200>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	e008      	b.n	8004d3e <ADC_ConfigureBoostMode+0x42>
 8004d2c:	4b74      	ldr	r3, [pc, #464]	; (8004f00 <ADC_ConfigureBoostMode+0x204>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf14      	ite	ne
 8004d38:	2301      	movne	r3, #1
 8004d3a:	2300      	moveq	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01c      	beq.n	8004d7c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d42:	f005 fd57 	bl	800a7f4 <HAL_RCC_GetHCLKFreq>
 8004d46:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d50:	d010      	beq.n	8004d74 <ADC_ConfigureBoostMode+0x78>
 8004d52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d56:	d873      	bhi.n	8004e40 <ADC_ConfigureBoostMode+0x144>
 8004d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5c:	d002      	beq.n	8004d64 <ADC_ConfigureBoostMode+0x68>
 8004d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d62:	d16d      	bne.n	8004e40 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	0c1b      	lsrs	r3, r3, #16
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	60fb      	str	r3, [r7, #12]
        break;
 8004d72:	e068      	b.n	8004e46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	089b      	lsrs	r3, r3, #2
 8004d78:	60fb      	str	r3, [r7, #12]
        break;
 8004d7a:	e064      	b.n	8004e46 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004d7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	f006 ffde 	bl	800bd44 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d88:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d92:	d051      	beq.n	8004e38 <ADC_ConfigureBoostMode+0x13c>
 8004d94:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d98:	d854      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x148>
 8004d9a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d9e:	d047      	beq.n	8004e30 <ADC_ConfigureBoostMode+0x134>
 8004da0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004da4:	d84e      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x148>
 8004da6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004daa:	d03d      	beq.n	8004e28 <ADC_ConfigureBoostMode+0x12c>
 8004dac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004db0:	d848      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x148>
 8004db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004db6:	d033      	beq.n	8004e20 <ADC_ConfigureBoostMode+0x124>
 8004db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dbc:	d842      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x148>
 8004dbe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004dc2:	d029      	beq.n	8004e18 <ADC_ConfigureBoostMode+0x11c>
 8004dc4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004dc8:	d83c      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x148>
 8004dca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dce:	d01a      	beq.n	8004e06 <ADC_ConfigureBoostMode+0x10a>
 8004dd0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dd4:	d836      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x148>
 8004dd6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004dda:	d014      	beq.n	8004e06 <ADC_ConfigureBoostMode+0x10a>
 8004ddc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004de0:	d830      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x148>
 8004de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de6:	d00e      	beq.n	8004e06 <ADC_ConfigureBoostMode+0x10a>
 8004de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dec:	d82a      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x148>
 8004dee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004df2:	d008      	beq.n	8004e06 <ADC_ConfigureBoostMode+0x10a>
 8004df4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004df8:	d824      	bhi.n	8004e44 <ADC_ConfigureBoostMode+0x148>
 8004dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dfe:	d002      	beq.n	8004e06 <ADC_ConfigureBoostMode+0x10a>
 8004e00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e04:	d11e      	bne.n	8004e44 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	0c9b      	lsrs	r3, r3, #18
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	60fb      	str	r3, [r7, #12]
        break;
 8004e16:	e016      	b.n	8004e46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	60fb      	str	r3, [r7, #12]
        break;
 8004e1e:	e012      	b.n	8004e46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	60fb      	str	r3, [r7, #12]
        break;
 8004e26:	e00e      	b.n	8004e46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	60fb      	str	r3, [r7, #12]
        break;
 8004e2e:	e00a      	b.n	8004e46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	09db      	lsrs	r3, r3, #7
 8004e34:	60fb      	str	r3, [r7, #12]
        break;
 8004e36:	e006      	b.n	8004e46 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	60fb      	str	r3, [r7, #12]
        break;
 8004e3e:	e002      	b.n	8004e46 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004e40:	bf00      	nop
 8004e42:	e000      	b.n	8004e46 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004e44:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004e46:	f7fe fdcb 	bl	80039e0 <HAL_GetREVID>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d815      	bhi.n	8004e80 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4a2b      	ldr	r2, [pc, #172]	; (8004f04 <ADC_ConfigureBoostMode+0x208>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d908      	bls.n	8004e6e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e6a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004e6c:	e03e      	b.n	8004eec <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e7c:	609a      	str	r2, [r3, #8]
}
 8004e7e:	e035      	b.n	8004eec <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <ADC_ConfigureBoostMode+0x20c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d808      	bhi.n	8004ea0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e9c:	609a      	str	r2, [r3, #8]
}
 8004e9e:	e025      	b.n	8004eec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4a1a      	ldr	r2, [pc, #104]	; (8004f0c <ADC_ConfigureBoostMode+0x210>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d80a      	bhi.n	8004ebe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eba:	609a      	str	r2, [r3, #8]
}
 8004ebc:	e016      	b.n	8004eec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <ADC_ConfigureBoostMode+0x214>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d80a      	bhi.n	8004edc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed8:	609a      	str	r2, [r3, #8]
}
 8004eda:	e007      	b.n	8004eec <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004eea:	609a      	str	r2, [r3, #8]
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40022000 	.word	0x40022000
 8004ef8:	40022100 	.word	0x40022100
 8004efc:	40022300 	.word	0x40022300
 8004f00:	58026300 	.word	0x58026300
 8004f04:	01312d00 	.word	0x01312d00
 8004f08:	005f5e10 	.word	0x005f5e10
 8004f0c:	00bebc20 	.word	0x00bebc20
 8004f10:	017d7840 	.word	0x017d7840

08004f14 <LL_ADC_IsEnabled>:
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <LL_ADC_IsEnabled+0x18>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <LL_ADC_IsEnabled+0x1a>
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <LL_ADC_StartCalibration>:
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <LL_ADC_StartCalibration+0x38>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	609a      	str	r2, [r3, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	3ffeffc0 	.word	0x3ffeffc0

08004f78 <LL_ADC_IsCalibrationOnGoing>:
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f8c:	d101      	bne.n	8004f92 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <LL_ADC_REG_IsConversionOngoing>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d101      	bne.n	8004fb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_ADCEx_Calibration_Start+0x1e>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e04c      	b.n	8005080 <HAL_ADCEx_Calibration_Start+0xb8>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff fd90 	bl	8004b14 <ADC_Disable>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d135      	bne.n	800506a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005002:	4b21      	ldr	r3, [pc, #132]	; (8005088 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005004:	4013      	ands	r3, r2
 8005006:	f043 0202 	orr.w	r2, r3, #2
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff ff90 	bl	8004f3c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800501c:	e014      	b.n	8005048 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3301      	adds	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4a19      	ldr	r2, [pc, #100]	; (800508c <HAL_ADCEx_Calibration_Start+0xc4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d30d      	bcc.n	8005048 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f023 0312 	bic.w	r3, r3, #18
 8005034:	f043 0210 	orr.w	r2, r3, #16
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e01b      	b.n	8005080 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ff93 	bl	8004f78 <LL_ADC_IsCalibrationOnGoing>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e2      	bne.n	800501e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	f023 0303 	bic.w	r3, r3, #3
 8005060:	f043 0201 	orr.w	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
 8005068:	e005      	b.n	8005076 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506e:	f043 0210 	orr.w	r2, r3, #16
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800507e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	ffffeefd 	.word	0xffffeefd
 800508c:	25c3f800 	.word	0x25c3f800

08005090 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b09f      	sub	sp, #124	; 0x7c
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e0be      	b.n	800522c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80050b6:	2300      	movs	r3, #0
 80050b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a5c      	ldr	r2, [pc, #368]	; (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d102      	bne.n	80050ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050c8:	4b5b      	ldr	r3, [pc, #364]	; (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050ca:	60bb      	str	r3, [r7, #8]
 80050cc:	e001      	b.n	80050d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050ce:	2300      	movs	r3, #0
 80050d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e09d      	b.n	800522c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ff54 	bl	8004fa0 <LL_ADC_REG_IsConversionOngoing>
 80050f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ff4e 	bl	8004fa0 <LL_ADC_REG_IsConversionOngoing>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d17f      	bne.n	800520a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800510a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800510c:	2b00      	cmp	r3, #0
 800510e:	d17c      	bne.n	800520a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a47      	ldr	r2, [pc, #284]	; (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a46      	ldr	r2, [pc, #280]	; (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d101      	bne.n	8005128 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005124:	4b45      	ldr	r3, [pc, #276]	; (800523c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005126:	e000      	b.n	800512a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005128:	4b45      	ldr	r3, [pc, #276]	; (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800512a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d039      	beq.n	80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	431a      	orrs	r2, r3
 8005142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005144:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a3a      	ldr	r2, [pc, #232]	; (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a38      	ldr	r2, [pc, #224]	; (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10e      	bne.n	8005178 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800515a:	4836      	ldr	r0, [pc, #216]	; (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800515c:	f7ff feda 	bl	8004f14 <LL_ADC_IsEnabled>
 8005160:	4604      	mov	r4, r0
 8005162:	4835      	ldr	r0, [pc, #212]	; (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005164:	f7ff fed6 	bl	8004f14 <LL_ADC_IsEnabled>
 8005168:	4603      	mov	r3, r0
 800516a:	4323      	orrs	r3, r4
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e008      	b.n	800518a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005178:	4832      	ldr	r0, [pc, #200]	; (8005244 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800517a:	f7ff fecb 	bl	8004f14 <LL_ADC_IsEnabled>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d047      	beq.n	800521e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800518e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005194:	4013      	ands	r3, r2
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	6811      	ldr	r1, [r2, #0]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	6892      	ldr	r2, [r2, #8]
 800519e:	430a      	orrs	r2, r1
 80051a0:	431a      	orrs	r2, r3
 80051a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051a6:	e03a      	b.n	800521e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80051a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d10e      	bne.n	80051e6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80051c8:	481a      	ldr	r0, [pc, #104]	; (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051ca:	f7ff fea3 	bl	8004f14 <LL_ADC_IsEnabled>
 80051ce:	4604      	mov	r4, r0
 80051d0:	4819      	ldr	r0, [pc, #100]	; (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051d2:	f7ff fe9f 	bl	8004f14 <LL_ADC_IsEnabled>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4323      	orrs	r3, r4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	e008      	b.n	80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80051e6:	4817      	ldr	r0, [pc, #92]	; (8005244 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80051e8:	f7ff fe94 	bl	8004f14 <LL_ADC_IsEnabled>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d010      	beq.n	800521e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005202:	4013      	ands	r3, r2
 8005204:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005206:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005208:	e009      	b.n	800521e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520e:	f043 0220 	orr.w	r2, r3, #32
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800521c:	e000      	b.n	8005220 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800521e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005228:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800522c:	4618      	mov	r0, r3
 800522e:	377c      	adds	r7, #124	; 0x7c
 8005230:	46bd      	mov	sp, r7
 8005232:	bd90      	pop	{r4, r7, pc}
 8005234:	40022000 	.word	0x40022000
 8005238:	40022100 	.word	0x40022100
 800523c:	40022300 	.word	0x40022300
 8005240:	58026300 	.word	0x58026300
 8005244:	58026000 	.word	0x58026000
 8005248:	fffff0e0 	.word	0xfffff0e0

0800524c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <__NVIC_SetPriorityGrouping+0x40>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005268:	4013      	ands	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005274:	4b06      	ldr	r3, [pc, #24]	; (8005290 <__NVIC_SetPriorityGrouping+0x44>)
 8005276:	4313      	orrs	r3, r2
 8005278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800527a:	4a04      	ldr	r2, [pc, #16]	; (800528c <__NVIC_SetPriorityGrouping+0x40>)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	60d3      	str	r3, [r2, #12]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	e000ed00 	.word	0xe000ed00
 8005290:	05fa0000 	.word	0x05fa0000

08005294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <__NVIC_GetPriorityGrouping+0x18>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 0307 	and.w	r3, r3, #7
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	db0b      	blt.n	80052da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	f003 021f 	and.w	r2, r3, #31
 80052c8:	4907      	ldr	r1, [pc, #28]	; (80052e8 <__NVIC_EnableIRQ+0x38>)
 80052ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2001      	movs	r0, #1
 80052d2:	fa00 f202 	lsl.w	r2, r0, r2
 80052d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	e000e100 	.word	0xe000e100

080052ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	6039      	str	r1, [r7, #0]
 80052f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	db0a      	blt.n	8005316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	490c      	ldr	r1, [pc, #48]	; (8005338 <__NVIC_SetPriority+0x4c>)
 8005306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800530a:	0112      	lsls	r2, r2, #4
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	440b      	add	r3, r1
 8005310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005314:	e00a      	b.n	800532c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4908      	ldr	r1, [pc, #32]	; (800533c <__NVIC_SetPriority+0x50>)
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	3b04      	subs	r3, #4
 8005324:	0112      	lsls	r2, r2, #4
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	440b      	add	r3, r1
 800532a:	761a      	strb	r2, [r3, #24]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e000e100 	.word	0xe000e100
 800533c:	e000ed00 	.word	0xe000ed00

08005340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	; 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f1c3 0307 	rsb	r3, r3, #7
 800535a:	2b04      	cmp	r3, #4
 800535c:	bf28      	it	cs
 800535e:	2304      	movcs	r3, #4
 8005360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3304      	adds	r3, #4
 8005366:	2b06      	cmp	r3, #6
 8005368:	d902      	bls.n	8005370 <NVIC_EncodePriority+0x30>
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	3b03      	subs	r3, #3
 800536e:	e000      	b.n	8005372 <NVIC_EncodePriority+0x32>
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43da      	mvns	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	401a      	ands	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	43d9      	mvns	r1, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005398:	4313      	orrs	r3, r2
         );
}
 800539a:	4618      	mov	r0, r3
 800539c:	3724      	adds	r7, #36	; 0x24
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff ff4c 	bl	800524c <__NVIC_SetPriorityGrouping>
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053ca:	f7ff ff63 	bl	8005294 <__NVIC_GetPriorityGrouping>
 80053ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	6978      	ldr	r0, [r7, #20]
 80053d6:	f7ff ffb3 	bl	8005340 <NVIC_EncodePriority>
 80053da:	4602      	mov	r2, r0
 80053dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff ff82 	bl	80052ec <__NVIC_SetPriority>
}
 80053e8:	bf00      	nop
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ff56 	bl	80052b0 <__NVIC_EnableIRQ>
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e014      	b.n	8005448 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	791b      	ldrb	r3, [r3, #4]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fd fca2 	bl	8002d78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e046      	b.n	80054f2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	795b      	ldrb	r3, [r3, #5]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_DAC_Start+0x20>
 800546c:	2302      	movs	r3, #2
 800546e:	e040      	b.n	80054f2 <HAL_DAC_Start+0xa2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2201      	movs	r2, #1
 800548a:	409a      	lsls	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10f      	bne.n	80054ba <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d11d      	bne.n	80054e4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	e014      	b.n	80054e4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	2102      	movs	r1, #2
 80054cc:	fa01 f303 	lsl.w	r3, r1, r3
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d107      	bne.n	80054e4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0202 	orr.w	r2, r2, #2
 80054e2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0a2      	b.n	800565e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	795b      	ldrb	r3, [r3, #5]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_DAC_Start_DMA+0x24>
 8005520:	2302      	movs	r3, #2
 8005522:	e09c      	b.n	800565e <HAL_DAC_Start_DMA+0x15e>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2202      	movs	r2, #2
 800552e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d129      	bne.n	800558a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4a4b      	ldr	r2, [pc, #300]	; (8005668 <HAL_DAC_Start_DMA+0x168>)
 800553c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	4a4a      	ldr	r2, [pc, #296]	; (800566c <HAL_DAC_Start_DMA+0x16c>)
 8005544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	4a49      	ldr	r2, [pc, #292]	; (8005670 <HAL_DAC_Start_DMA+0x170>)
 800554c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800555c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_DAC_Start_DMA+0x6c>
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	2b04      	cmp	r3, #4
 8005568:	d005      	beq.n	8005576 <HAL_DAC_Start_DMA+0x76>
 800556a:	e009      	b.n	8005580 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	613b      	str	r3, [r7, #16]
        break;
 8005574:	e033      	b.n	80055de <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	613b      	str	r3, [r7, #16]
        break;
 800557e:	e02e      	b.n	80055de <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3310      	adds	r3, #16
 8005586:	613b      	str	r3, [r7, #16]
        break;
 8005588:	e029      	b.n	80055de <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	4a39      	ldr	r2, [pc, #228]	; (8005674 <HAL_DAC_Start_DMA+0x174>)
 8005590:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	4a38      	ldr	r2, [pc, #224]	; (8005678 <HAL_DAC_Start_DMA+0x178>)
 8005598:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	4a37      	ldr	r2, [pc, #220]	; (800567c <HAL_DAC_Start_DMA+0x17c>)
 80055a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055b0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_DAC_Start_DMA+0xc0>
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d005      	beq.n	80055ca <HAL_DAC_Start_DMA+0xca>
 80055be:	e009      	b.n	80055d4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3314      	adds	r3, #20
 80055c6:	613b      	str	r3, [r7, #16]
        break;
 80055c8:	e009      	b.n	80055de <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3318      	adds	r3, #24
 80055d0:	613b      	str	r3, [r7, #16]
        break;
 80055d2:	e004      	b.n	80055de <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	331c      	adds	r3, #28
 80055da:	613b      	str	r3, [r7, #16]
        break;
 80055dc:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d111      	bne.n	8005608 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6898      	ldr	r0, [r3, #8]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	f000 fe67 	bl	80062d0 <HAL_DMA_Start_IT>
 8005602:	4603      	mov	r3, r0
 8005604:	75fb      	strb	r3, [r7, #23]
 8005606:	e010      	b.n	800562a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005616:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	68d8      	ldr	r0, [r3, #12]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	f000 fe55 	bl	80062d0 <HAL_DMA_Start_IT>
 8005626:	4603      	mov	r3, r0
 8005628:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005630:	7dfb      	ldrb	r3, [r7, #23]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10c      	bne.n	8005650 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2201      	movs	r2, #1
 8005644:	409a      	lsls	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e005      	b.n	800565c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f043 0204 	orr.w	r2, r3, #4
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800565c:	7dfb      	ldrb	r3, [r7, #23]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	08005af1 	.word	0x08005af1
 800566c:	08005b13 	.word	0x08005b13
 8005670:	08005b2f 	.word	0x08005b2f
 8005674:	08005bad 	.word	0x08005bad
 8005678:	08005bcf 	.word	0x08005bcf
 800567c:	08005beb 	.word	0x08005beb

08005680 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e03e      	b.n	8005712 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6819      	ldr	r1, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	43da      	mvns	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	400a      	ands	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6819      	ldr	r1, [r3, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f003 0310 	and.w	r3, r3, #16
 80056be:	2201      	movs	r2, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	43da      	mvns	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	400a      	ands	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10d      	bne.n	80056f0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 f863 	bl	80067a4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	e00c      	b.n	800570a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 f855 	bl	80067a4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005708:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005730:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01d      	beq.n	8005778 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2204      	movs	r2, #4
 800574a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f043 0201 	orr.w	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005760:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005770:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f86f 	bl	8005856 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01d      	beq.n	80057be <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d018      	beq.n	80057be <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2204      	movs	r2, #4
 8005790:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f043 0202 	orr.w	r2, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80057a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80057b6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f9ed 	bl	8005b98 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b087      	sub	sp, #28
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e015      	b.n	800580e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4413      	add	r3, r2
 80057f4:	3308      	adds	r3, #8
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	e004      	b.n	8005804 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4413      	add	r3, r2
 8005800:	3314      	adds	r3, #20
 8005802:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	461a      	mov	r2, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	; 0x28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_DAC_ConfigChannel+0x1e>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e12a      	b.n	8005ae4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	795b      	ldrb	r3, [r3, #5]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_DAC_ConfigChannel+0x2e>
 8005896:	2302      	movs	r3, #2
 8005898:	e124      	b.n	8005ae4 <HAL_DAC_ConfigChannel+0x278>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2202      	movs	r2, #2
 80058a4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d17a      	bne.n	80059a4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80058ae:	f7fe f88b 	bl	80039c8 <HAL_GetTick>
 80058b2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d13d      	bne.n	8005936 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80058ba:	e018      	b.n	80058ee <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80058bc:	f7fe f884 	bl	80039c8 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d911      	bls.n	80058ee <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d0:	4b86      	ldr	r3, [pc, #536]	; (8005aec <HAL_DAC_ConfigChannel+0x280>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f043 0208 	orr.w	r2, r3, #8
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2203      	movs	r2, #3
 80058e8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e0fa      	b.n	8005ae4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f4:	4b7d      	ldr	r3, [pc, #500]	; (8005aec <HAL_DAC_ConfigChannel+0x280>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1df      	bne.n	80058bc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	6992      	ldr	r2, [r2, #24]
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
 8005906:	e020      	b.n	800594a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005908:	f7fe f85e 	bl	80039c8 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	d90f      	bls.n	8005936 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	2b00      	cmp	r3, #0
 800591e:	da0a      	bge.n	8005936 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f043 0208 	orr.w	r2, r3, #8
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2203      	movs	r2, #3
 8005930:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e0d6      	b.n	8005ae4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	2b00      	cmp	r3, #0
 800593e:	dbe3      	blt.n	8005908 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	6992      	ldr	r2, [r2, #24]
 8005948:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	43db      	mvns	r3, r3
 8005960:	ea02 0103 	and.w	r1, r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	409a      	lsls	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	21ff      	movs	r1, #255	; 0xff
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	ea02 0103 	and.w	r1, r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6a1a      	ldr	r2, [r3, #32]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	409a      	lsls	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d11d      	bne.n	80059e8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	221f      	movs	r2, #31
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	43db      	mvns	r3, r3
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4013      	ands	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4313      	orrs	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2207      	movs	r2, #7
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d102      	bne.n	8005a12 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a10:	e00f      	b.n	8005a32 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d102      	bne.n	8005a20 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1e:	e008      	b.n	8005a32 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a2c:	e001      	b.n	8005a32 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6819      	ldr	r1, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	43da      	mvns	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	400a      	ands	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6819      	ldr	r1, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	22c0      	movs	r2, #192	; 0xc0
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43da      	mvns	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005ae0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3728      	adds	r7, #40	; 0x28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	20008000 	.word	0x20008000

08005af0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff fe8b 	bl	800581a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	711a      	strb	r2, [r3, #4]
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fe84 	bl	800582e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f043 0204 	orr.w	r2, r3, #4
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7ff fe7a 	bl	8005842 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	711a      	strb	r2, [r3, #4]
}
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f7ff ffce 	bl	8005b5c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	711a      	strb	r2, [r3, #4]
}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f7ff ffc7 	bl	8005b70 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005be2:	bf00      	nop
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f043 0204 	orr.w	r2, r3, #4
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff ffbd 	bl	8005b84 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	711a      	strb	r2, [r3, #4]
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005c20:	f7fd fed2 	bl	80039c8 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e316      	b.n	800625e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a66      	ldr	r2, [pc, #408]	; (8005dd0 <HAL_DMA_Init+0x1b8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d04a      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a65      	ldr	r2, [pc, #404]	; (8005dd4 <HAL_DMA_Init+0x1bc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d045      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a63      	ldr	r2, [pc, #396]	; (8005dd8 <HAL_DMA_Init+0x1c0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d040      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a62      	ldr	r2, [pc, #392]	; (8005ddc <HAL_DMA_Init+0x1c4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d03b      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a60      	ldr	r2, [pc, #384]	; (8005de0 <HAL_DMA_Init+0x1c8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d036      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a5f      	ldr	r2, [pc, #380]	; (8005de4 <HAL_DMA_Init+0x1cc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d031      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a5d      	ldr	r2, [pc, #372]	; (8005de8 <HAL_DMA_Init+0x1d0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d02c      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a5c      	ldr	r2, [pc, #368]	; (8005dec <HAL_DMA_Init+0x1d4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d027      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a5a      	ldr	r2, [pc, #360]	; (8005df0 <HAL_DMA_Init+0x1d8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d022      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a59      	ldr	r2, [pc, #356]	; (8005df4 <HAL_DMA_Init+0x1dc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d01d      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a57      	ldr	r2, [pc, #348]	; (8005df8 <HAL_DMA_Init+0x1e0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d018      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a56      	ldr	r2, [pc, #344]	; (8005dfc <HAL_DMA_Init+0x1e4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d013      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a54      	ldr	r2, [pc, #336]	; (8005e00 <HAL_DMA_Init+0x1e8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a53      	ldr	r2, [pc, #332]	; (8005e04 <HAL_DMA_Init+0x1ec>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a51      	ldr	r2, [pc, #324]	; (8005e08 <HAL_DMA_Init+0x1f0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_DMA_Init+0xb8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a50      	ldr	r2, [pc, #320]	; (8005e0c <HAL_DMA_Init+0x1f4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d101      	bne.n	8005cd4 <HAL_DMA_Init+0xbc>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <HAL_DMA_Init+0xbe>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 813b 	beq.w	8005f52 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a37      	ldr	r2, [pc, #220]	; (8005dd0 <HAL_DMA_Init+0x1b8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d04a      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a36      	ldr	r2, [pc, #216]	; (8005dd4 <HAL_DMA_Init+0x1bc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d045      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a34      	ldr	r2, [pc, #208]	; (8005dd8 <HAL_DMA_Init+0x1c0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d040      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a33      	ldr	r2, [pc, #204]	; (8005ddc <HAL_DMA_Init+0x1c4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d03b      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a31      	ldr	r2, [pc, #196]	; (8005de0 <HAL_DMA_Init+0x1c8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d036      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a30      	ldr	r2, [pc, #192]	; (8005de4 <HAL_DMA_Init+0x1cc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d031      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2e      	ldr	r2, [pc, #184]	; (8005de8 <HAL_DMA_Init+0x1d0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d02c      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2d      	ldr	r2, [pc, #180]	; (8005dec <HAL_DMA_Init+0x1d4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d027      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a2b      	ldr	r2, [pc, #172]	; (8005df0 <HAL_DMA_Init+0x1d8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d022      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <HAL_DMA_Init+0x1dc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d01d      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a28      	ldr	r2, [pc, #160]	; (8005df8 <HAL_DMA_Init+0x1e0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d018      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <HAL_DMA_Init+0x1e4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a25      	ldr	r2, [pc, #148]	; (8005e00 <HAL_DMA_Init+0x1e8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a24      	ldr	r2, [pc, #144]	; (8005e04 <HAL_DMA_Init+0x1ec>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a22      	ldr	r2, [pc, #136]	; (8005e08 <HAL_DMA_Init+0x1f0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_DMA_Init+0x174>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a21      	ldr	r2, [pc, #132]	; (8005e0c <HAL_DMA_Init+0x1f4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d108      	bne.n	8005d9e <HAL_DMA_Init+0x186>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0201 	bic.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	e007      	b.n	8005dae <HAL_DMA_Init+0x196>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0201 	bic.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005dae:	e02f      	b.n	8005e10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005db0:	f7fd fe0a 	bl	80039c8 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d928      	bls.n	8005e10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e246      	b.n	800625e <HAL_DMA_Init+0x646>
 8005dd0:	40020010 	.word	0x40020010
 8005dd4:	40020028 	.word	0x40020028
 8005dd8:	40020040 	.word	0x40020040
 8005ddc:	40020058 	.word	0x40020058
 8005de0:	40020070 	.word	0x40020070
 8005de4:	40020088 	.word	0x40020088
 8005de8:	400200a0 	.word	0x400200a0
 8005dec:	400200b8 	.word	0x400200b8
 8005df0:	40020410 	.word	0x40020410
 8005df4:	40020428 	.word	0x40020428
 8005df8:	40020440 	.word	0x40020440
 8005dfc:	40020458 	.word	0x40020458
 8005e00:	40020470 	.word	0x40020470
 8005e04:	40020488 	.word	0x40020488
 8005e08:	400204a0 	.word	0x400204a0
 8005e0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1c8      	bne.n	8005db0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4b83      	ldr	r3, [pc, #524]	; (8006038 <HAL_DMA_Init+0x420>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005e36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d107      	bne.n	8005e74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005e74:	4b71      	ldr	r3, [pc, #452]	; (800603c <HAL_DMA_Init+0x424>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	4b71      	ldr	r3, [pc, #452]	; (8006040 <HAL_DMA_Init+0x428>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e80:	d328      	bcc.n	8005ed4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b28      	cmp	r3, #40	; 0x28
 8005e88:	d903      	bls.n	8005e92 <HAL_DMA_Init+0x27a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e90:	d917      	bls.n	8005ec2 <HAL_DMA_Init+0x2aa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b3e      	cmp	r3, #62	; 0x3e
 8005e98:	d903      	bls.n	8005ea2 <HAL_DMA_Init+0x28a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b42      	cmp	r3, #66	; 0x42
 8005ea0:	d90f      	bls.n	8005ec2 <HAL_DMA_Init+0x2aa>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b46      	cmp	r3, #70	; 0x46
 8005ea8:	d903      	bls.n	8005eb2 <HAL_DMA_Init+0x29a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b48      	cmp	r3, #72	; 0x48
 8005eb0:	d907      	bls.n	8005ec2 <HAL_DMA_Init+0x2aa>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b4e      	cmp	r3, #78	; 0x4e
 8005eb8:	d905      	bls.n	8005ec6 <HAL_DMA_Init+0x2ae>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b52      	cmp	r3, #82	; 0x52
 8005ec0:	d801      	bhi.n	8005ec6 <HAL_DMA_Init+0x2ae>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <HAL_DMA_Init+0x2b0>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ed2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d117      	bne.n	8005f2e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00e      	beq.n	8005f2e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f002 fb33 	bl	800857c <DMA_CheckFifoParam>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2240      	movs	r2, #64	; 0x40
 8005f20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e197      	b.n	800625e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f002 fa6e 	bl	8008418 <DMA_CalcBaseAndBitshift>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	223f      	movs	r2, #63	; 0x3f
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]
 8005f50:	e0cd      	b.n	80060ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a3b      	ldr	r2, [pc, #236]	; (8006044 <HAL_DMA_Init+0x42c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <HAL_DMA_Init+0x38a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a39      	ldr	r2, [pc, #228]	; (8006048 <HAL_DMA_Init+0x430>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <HAL_DMA_Init+0x38a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a38      	ldr	r2, [pc, #224]	; (800604c <HAL_DMA_Init+0x434>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <HAL_DMA_Init+0x38a>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a36      	ldr	r2, [pc, #216]	; (8006050 <HAL_DMA_Init+0x438>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_DMA_Init+0x38a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a35      	ldr	r2, [pc, #212]	; (8006054 <HAL_DMA_Init+0x43c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_DMA_Init+0x38a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a33      	ldr	r2, [pc, #204]	; (8006058 <HAL_DMA_Init+0x440>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_DMA_Init+0x38a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a32      	ldr	r2, [pc, #200]	; (800605c <HAL_DMA_Init+0x444>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_DMA_Init+0x38a>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a30      	ldr	r2, [pc, #192]	; (8006060 <HAL_DMA_Init+0x448>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <HAL_DMA_Init+0x38e>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <HAL_DMA_Init+0x390>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8097 	beq.w	80060dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a24      	ldr	r2, [pc, #144]	; (8006044 <HAL_DMA_Init+0x42c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d021      	beq.n	8005ffc <HAL_DMA_Init+0x3e4>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a22      	ldr	r2, [pc, #136]	; (8006048 <HAL_DMA_Init+0x430>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d01c      	beq.n	8005ffc <HAL_DMA_Init+0x3e4>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a21      	ldr	r2, [pc, #132]	; (800604c <HAL_DMA_Init+0x434>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d017      	beq.n	8005ffc <HAL_DMA_Init+0x3e4>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <HAL_DMA_Init+0x438>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d012      	beq.n	8005ffc <HAL_DMA_Init+0x3e4>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <HAL_DMA_Init+0x43c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00d      	beq.n	8005ffc <HAL_DMA_Init+0x3e4>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1c      	ldr	r2, [pc, #112]	; (8006058 <HAL_DMA_Init+0x440>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d008      	beq.n	8005ffc <HAL_DMA_Init+0x3e4>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1b      	ldr	r2, [pc, #108]	; (800605c <HAL_DMA_Init+0x444>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <HAL_DMA_Init+0x3e4>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a19      	ldr	r2, [pc, #100]	; (8006060 <HAL_DMA_Init+0x448>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4b12      	ldr	r3, [pc, #72]	; (8006064 <HAL_DMA_Init+0x44c>)
 800601a:	4013      	ands	r3, r2
 800601c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d020      	beq.n	8006068 <HAL_DMA_Init+0x450>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b80      	cmp	r3, #128	; 0x80
 800602c:	d102      	bne.n	8006034 <HAL_DMA_Init+0x41c>
 800602e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006032:	e01a      	b.n	800606a <HAL_DMA_Init+0x452>
 8006034:	2300      	movs	r3, #0
 8006036:	e018      	b.n	800606a <HAL_DMA_Init+0x452>
 8006038:	fe10803f 	.word	0xfe10803f
 800603c:	5c001000 	.word	0x5c001000
 8006040:	ffff0000 	.word	0xffff0000
 8006044:	58025408 	.word	0x58025408
 8006048:	5802541c 	.word	0x5802541c
 800604c:	58025430 	.word	0x58025430
 8006050:	58025444 	.word	0x58025444
 8006054:	58025458 	.word	0x58025458
 8006058:	5802546c 	.word	0x5802546c
 800605c:	58025480 	.word	0x58025480
 8006060:	58025494 	.word	0x58025494
 8006064:	fffe000f 	.word	0xfffe000f
 8006068:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	68d2      	ldr	r2, [r2, #12]
 800606e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006070:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006078:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006080:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006088:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006090:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006098:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	4b6e      	ldr	r3, [pc, #440]	; (8006268 <HAL_DMA_Init+0x650>)
 80060b0:	4413      	add	r3, r2
 80060b2:	4a6e      	ldr	r2, [pc, #440]	; (800626c <HAL_DMA_Init+0x654>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	009a      	lsls	r2, r3, #2
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f002 f9a9 	bl	8008418 <DMA_CalcBaseAndBitshift>
 80060c6:	4603      	mov	r3, r0
 80060c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	2201      	movs	r2, #1
 80060d4:	409a      	lsls	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	605a      	str	r2, [r3, #4]
 80060da:	e008      	b.n	80060ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2240      	movs	r2, #64	; 0x40
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2203      	movs	r2, #3
 80060e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0b7      	b.n	800625e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a5f      	ldr	r2, [pc, #380]	; (8006270 <HAL_DMA_Init+0x658>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d072      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a5d      	ldr	r2, [pc, #372]	; (8006274 <HAL_DMA_Init+0x65c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d06d      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a5c      	ldr	r2, [pc, #368]	; (8006278 <HAL_DMA_Init+0x660>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d068      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a5a      	ldr	r2, [pc, #360]	; (800627c <HAL_DMA_Init+0x664>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d063      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a59      	ldr	r2, [pc, #356]	; (8006280 <HAL_DMA_Init+0x668>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d05e      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a57      	ldr	r2, [pc, #348]	; (8006284 <HAL_DMA_Init+0x66c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d059      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a56      	ldr	r2, [pc, #344]	; (8006288 <HAL_DMA_Init+0x670>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d054      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a54      	ldr	r2, [pc, #336]	; (800628c <HAL_DMA_Init+0x674>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d04f      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a53      	ldr	r2, [pc, #332]	; (8006290 <HAL_DMA_Init+0x678>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d04a      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a51      	ldr	r2, [pc, #324]	; (8006294 <HAL_DMA_Init+0x67c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d045      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a50      	ldr	r2, [pc, #320]	; (8006298 <HAL_DMA_Init+0x680>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d040      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a4e      	ldr	r2, [pc, #312]	; (800629c <HAL_DMA_Init+0x684>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d03b      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a4d      	ldr	r2, [pc, #308]	; (80062a0 <HAL_DMA_Init+0x688>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d036      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a4b      	ldr	r2, [pc, #300]	; (80062a4 <HAL_DMA_Init+0x68c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d031      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a4a      	ldr	r2, [pc, #296]	; (80062a8 <HAL_DMA_Init+0x690>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d02c      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a48      	ldr	r2, [pc, #288]	; (80062ac <HAL_DMA_Init+0x694>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d027      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a47      	ldr	r2, [pc, #284]	; (80062b0 <HAL_DMA_Init+0x698>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d022      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a45      	ldr	r2, [pc, #276]	; (80062b4 <HAL_DMA_Init+0x69c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01d      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a44      	ldr	r2, [pc, #272]	; (80062b8 <HAL_DMA_Init+0x6a0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d018      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a42      	ldr	r2, [pc, #264]	; (80062bc <HAL_DMA_Init+0x6a4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d013      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a41      	ldr	r2, [pc, #260]	; (80062c0 <HAL_DMA_Init+0x6a8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00e      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a3f      	ldr	r2, [pc, #252]	; (80062c4 <HAL_DMA_Init+0x6ac>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d009      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a3e      	ldr	r2, [pc, #248]	; (80062c8 <HAL_DMA_Init+0x6b0>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d004      	beq.n	80061de <HAL_DMA_Init+0x5c6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a3c      	ldr	r2, [pc, #240]	; (80062cc <HAL_DMA_Init+0x6b4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d101      	bne.n	80061e2 <HAL_DMA_Init+0x5ca>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <HAL_DMA_Init+0x5cc>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d032      	beq.n	800624e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f002 fa43 	bl	8008674 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b80      	cmp	r3, #128	; 0x80
 80061f4:	d102      	bne.n	80061fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006210:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d010      	beq.n	800623c <HAL_DMA_Init+0x624>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b08      	cmp	r3, #8
 8006220:	d80c      	bhi.n	800623c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f002 fac0 	bl	80087a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	e008      	b.n	800624e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	a7fdabf8 	.word	0xa7fdabf8
 800626c:	cccccccd 	.word	0xcccccccd
 8006270:	40020010 	.word	0x40020010
 8006274:	40020028 	.word	0x40020028
 8006278:	40020040 	.word	0x40020040
 800627c:	40020058 	.word	0x40020058
 8006280:	40020070 	.word	0x40020070
 8006284:	40020088 	.word	0x40020088
 8006288:	400200a0 	.word	0x400200a0
 800628c:	400200b8 	.word	0x400200b8
 8006290:	40020410 	.word	0x40020410
 8006294:	40020428 	.word	0x40020428
 8006298:	40020440 	.word	0x40020440
 800629c:	40020458 	.word	0x40020458
 80062a0:	40020470 	.word	0x40020470
 80062a4:	40020488 	.word	0x40020488
 80062a8:	400204a0 	.word	0x400204a0
 80062ac:	400204b8 	.word	0x400204b8
 80062b0:	58025408 	.word	0x58025408
 80062b4:	5802541c 	.word	0x5802541c
 80062b8:	58025430 	.word	0x58025430
 80062bc:	58025444 	.word	0x58025444
 80062c0:	58025458 	.word	0x58025458
 80062c4:	5802546c 	.word	0x5802546c
 80062c8:	58025480 	.word	0x58025480
 80062cc:	58025494 	.word	0x58025494

080062d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e226      	b.n	800673a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_DMA_Start_IT+0x2a>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e21f      	b.n	800673a <HAL_DMA_Start_IT+0x46a>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b01      	cmp	r3, #1
 800630c:	f040 820a 	bne.w	8006724 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a68      	ldr	r2, [pc, #416]	; (80064c4 <HAL_DMA_Start_IT+0x1f4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d04a      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a66      	ldr	r2, [pc, #408]	; (80064c8 <HAL_DMA_Start_IT+0x1f8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d045      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a65      	ldr	r2, [pc, #404]	; (80064cc <HAL_DMA_Start_IT+0x1fc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d040      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a63      	ldr	r2, [pc, #396]	; (80064d0 <HAL_DMA_Start_IT+0x200>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d03b      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a62      	ldr	r2, [pc, #392]	; (80064d4 <HAL_DMA_Start_IT+0x204>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d036      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a60      	ldr	r2, [pc, #384]	; (80064d8 <HAL_DMA_Start_IT+0x208>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d031      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a5f      	ldr	r2, [pc, #380]	; (80064dc <HAL_DMA_Start_IT+0x20c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d02c      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a5d      	ldr	r2, [pc, #372]	; (80064e0 <HAL_DMA_Start_IT+0x210>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d027      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a5c      	ldr	r2, [pc, #368]	; (80064e4 <HAL_DMA_Start_IT+0x214>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d022      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a5a      	ldr	r2, [pc, #360]	; (80064e8 <HAL_DMA_Start_IT+0x218>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d01d      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a59      	ldr	r2, [pc, #356]	; (80064ec <HAL_DMA_Start_IT+0x21c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d018      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a57      	ldr	r2, [pc, #348]	; (80064f0 <HAL_DMA_Start_IT+0x220>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d013      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a56      	ldr	r2, [pc, #344]	; (80064f4 <HAL_DMA_Start_IT+0x224>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00e      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a54      	ldr	r2, [pc, #336]	; (80064f8 <HAL_DMA_Start_IT+0x228>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d009      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a53      	ldr	r2, [pc, #332]	; (80064fc <HAL_DMA_Start_IT+0x22c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d004      	beq.n	80063be <HAL_DMA_Start_IT+0xee>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a51      	ldr	r2, [pc, #324]	; (8006500 <HAL_DMA_Start_IT+0x230>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d108      	bne.n	80063d0 <HAL_DMA_Start_IT+0x100>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e007      	b.n	80063e0 <HAL_DMA_Start_IT+0x110>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f001 fe6a 	bl	80080c0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a34      	ldr	r2, [pc, #208]	; (80064c4 <HAL_DMA_Start_IT+0x1f4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d04a      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a33      	ldr	r2, [pc, #204]	; (80064c8 <HAL_DMA_Start_IT+0x1f8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d045      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a31      	ldr	r2, [pc, #196]	; (80064cc <HAL_DMA_Start_IT+0x1fc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d040      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a30      	ldr	r2, [pc, #192]	; (80064d0 <HAL_DMA_Start_IT+0x200>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d03b      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a2e      	ldr	r2, [pc, #184]	; (80064d4 <HAL_DMA_Start_IT+0x204>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d036      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a2d      	ldr	r2, [pc, #180]	; (80064d8 <HAL_DMA_Start_IT+0x208>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d031      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a2b      	ldr	r2, [pc, #172]	; (80064dc <HAL_DMA_Start_IT+0x20c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d02c      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a2a      	ldr	r2, [pc, #168]	; (80064e0 <HAL_DMA_Start_IT+0x210>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d027      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a28      	ldr	r2, [pc, #160]	; (80064e4 <HAL_DMA_Start_IT+0x214>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d022      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a27      	ldr	r2, [pc, #156]	; (80064e8 <HAL_DMA_Start_IT+0x218>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d01d      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a25      	ldr	r2, [pc, #148]	; (80064ec <HAL_DMA_Start_IT+0x21c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d018      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a24      	ldr	r2, [pc, #144]	; (80064f0 <HAL_DMA_Start_IT+0x220>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a22      	ldr	r2, [pc, #136]	; (80064f4 <HAL_DMA_Start_IT+0x224>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00e      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a21      	ldr	r2, [pc, #132]	; (80064f8 <HAL_DMA_Start_IT+0x228>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d009      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1f      	ldr	r2, [pc, #124]	; (80064fc <HAL_DMA_Start_IT+0x22c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_DMA_Start_IT+0x1bc>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1e      	ldr	r2, [pc, #120]	; (8006500 <HAL_DMA_Start_IT+0x230>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d101      	bne.n	8006490 <HAL_DMA_Start_IT+0x1c0>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <HAL_DMA_Start_IT+0x1c2>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d036      	beq.n	8006504 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f023 021e 	bic.w	r2, r3, #30
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0216 	orr.w	r2, r2, #22
 80064a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d03e      	beq.n	8006530 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0208 	orr.w	r2, r2, #8
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	e035      	b.n	8006530 <HAL_DMA_Start_IT+0x260>
 80064c4:	40020010 	.word	0x40020010
 80064c8:	40020028 	.word	0x40020028
 80064cc:	40020040 	.word	0x40020040
 80064d0:	40020058 	.word	0x40020058
 80064d4:	40020070 	.word	0x40020070
 80064d8:	40020088 	.word	0x40020088
 80064dc:	400200a0 	.word	0x400200a0
 80064e0:	400200b8 	.word	0x400200b8
 80064e4:	40020410 	.word	0x40020410
 80064e8:	40020428 	.word	0x40020428
 80064ec:	40020440 	.word	0x40020440
 80064f0:	40020458 	.word	0x40020458
 80064f4:	40020470 	.word	0x40020470
 80064f8:	40020488 	.word	0x40020488
 80064fc:	400204a0 	.word	0x400204a0
 8006500:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f023 020e 	bic.w	r2, r3, #14
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 020a 	orr.w	r2, r2, #10
 8006516:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0204 	orr.w	r2, r2, #4
 800652e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a83      	ldr	r2, [pc, #524]	; (8006744 <HAL_DMA_Start_IT+0x474>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d072      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a82      	ldr	r2, [pc, #520]	; (8006748 <HAL_DMA_Start_IT+0x478>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d06d      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a80      	ldr	r2, [pc, #512]	; (800674c <HAL_DMA_Start_IT+0x47c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d068      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a7f      	ldr	r2, [pc, #508]	; (8006750 <HAL_DMA_Start_IT+0x480>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d063      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a7d      	ldr	r2, [pc, #500]	; (8006754 <HAL_DMA_Start_IT+0x484>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d05e      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a7c      	ldr	r2, [pc, #496]	; (8006758 <HAL_DMA_Start_IT+0x488>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d059      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a7a      	ldr	r2, [pc, #488]	; (800675c <HAL_DMA_Start_IT+0x48c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d054      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a79      	ldr	r2, [pc, #484]	; (8006760 <HAL_DMA_Start_IT+0x490>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d04f      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a77      	ldr	r2, [pc, #476]	; (8006764 <HAL_DMA_Start_IT+0x494>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d04a      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a76      	ldr	r2, [pc, #472]	; (8006768 <HAL_DMA_Start_IT+0x498>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d045      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a74      	ldr	r2, [pc, #464]	; (800676c <HAL_DMA_Start_IT+0x49c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d040      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a73      	ldr	r2, [pc, #460]	; (8006770 <HAL_DMA_Start_IT+0x4a0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d03b      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a71      	ldr	r2, [pc, #452]	; (8006774 <HAL_DMA_Start_IT+0x4a4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d036      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a70      	ldr	r2, [pc, #448]	; (8006778 <HAL_DMA_Start_IT+0x4a8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d031      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a6e      	ldr	r2, [pc, #440]	; (800677c <HAL_DMA_Start_IT+0x4ac>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d02c      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a6d      	ldr	r2, [pc, #436]	; (8006780 <HAL_DMA_Start_IT+0x4b0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d027      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a6b      	ldr	r2, [pc, #428]	; (8006784 <HAL_DMA_Start_IT+0x4b4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d022      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a6a      	ldr	r2, [pc, #424]	; (8006788 <HAL_DMA_Start_IT+0x4b8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d01d      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a68      	ldr	r2, [pc, #416]	; (800678c <HAL_DMA_Start_IT+0x4bc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d018      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a67      	ldr	r2, [pc, #412]	; (8006790 <HAL_DMA_Start_IT+0x4c0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d013      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a65      	ldr	r2, [pc, #404]	; (8006794 <HAL_DMA_Start_IT+0x4c4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00e      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a64      	ldr	r2, [pc, #400]	; (8006798 <HAL_DMA_Start_IT+0x4c8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d009      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a62      	ldr	r2, [pc, #392]	; (800679c <HAL_DMA_Start_IT+0x4cc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_DMA_Start_IT+0x350>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a61      	ldr	r2, [pc, #388]	; (80067a0 <HAL_DMA_Start_IT+0x4d0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d101      	bne.n	8006624 <HAL_DMA_Start_IT+0x354>
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <HAL_DMA_Start_IT+0x356>
 8006624:	2300      	movs	r3, #0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01a      	beq.n	8006660 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006646:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800665e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a37      	ldr	r2, [pc, #220]	; (8006744 <HAL_DMA_Start_IT+0x474>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d04a      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a36      	ldr	r2, [pc, #216]	; (8006748 <HAL_DMA_Start_IT+0x478>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d045      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a34      	ldr	r2, [pc, #208]	; (800674c <HAL_DMA_Start_IT+0x47c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d040      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a33      	ldr	r2, [pc, #204]	; (8006750 <HAL_DMA_Start_IT+0x480>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d03b      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a31      	ldr	r2, [pc, #196]	; (8006754 <HAL_DMA_Start_IT+0x484>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d036      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a30      	ldr	r2, [pc, #192]	; (8006758 <HAL_DMA_Start_IT+0x488>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d031      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a2e      	ldr	r2, [pc, #184]	; (800675c <HAL_DMA_Start_IT+0x48c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d02c      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2d      	ldr	r2, [pc, #180]	; (8006760 <HAL_DMA_Start_IT+0x490>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d027      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2b      	ldr	r2, [pc, #172]	; (8006764 <HAL_DMA_Start_IT+0x494>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d022      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a2a      	ldr	r2, [pc, #168]	; (8006768 <HAL_DMA_Start_IT+0x498>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d01d      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a28      	ldr	r2, [pc, #160]	; (800676c <HAL_DMA_Start_IT+0x49c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d018      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a27      	ldr	r2, [pc, #156]	; (8006770 <HAL_DMA_Start_IT+0x4a0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d013      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a25      	ldr	r2, [pc, #148]	; (8006774 <HAL_DMA_Start_IT+0x4a4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00e      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a24      	ldr	r2, [pc, #144]	; (8006778 <HAL_DMA_Start_IT+0x4a8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d009      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a22      	ldr	r2, [pc, #136]	; (800677c <HAL_DMA_Start_IT+0x4ac>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d004      	beq.n	8006700 <HAL_DMA_Start_IT+0x430>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a21      	ldr	r2, [pc, #132]	; (8006780 <HAL_DMA_Start_IT+0x4b0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d108      	bne.n	8006712 <HAL_DMA_Start_IT+0x442>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	e012      	b.n	8006738 <HAL_DMA_Start_IT+0x468>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0201 	orr.w	r2, r2, #1
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	e009      	b.n	8006738 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800672a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40020010 	.word	0x40020010
 8006748:	40020028 	.word	0x40020028
 800674c:	40020040 	.word	0x40020040
 8006750:	40020058 	.word	0x40020058
 8006754:	40020070 	.word	0x40020070
 8006758:	40020088 	.word	0x40020088
 800675c:	400200a0 	.word	0x400200a0
 8006760:	400200b8 	.word	0x400200b8
 8006764:	40020410 	.word	0x40020410
 8006768:	40020428 	.word	0x40020428
 800676c:	40020440 	.word	0x40020440
 8006770:	40020458 	.word	0x40020458
 8006774:	40020470 	.word	0x40020470
 8006778:	40020488 	.word	0x40020488
 800677c:	400204a0 	.word	0x400204a0
 8006780:	400204b8 	.word	0x400204b8
 8006784:	58025408 	.word	0x58025408
 8006788:	5802541c 	.word	0x5802541c
 800678c:	58025430 	.word	0x58025430
 8006790:	58025444 	.word	0x58025444
 8006794:	58025458 	.word	0x58025458
 8006798:	5802546c 	.word	0x5802546c
 800679c:	58025480 	.word	0x58025480
 80067a0:	58025494 	.word	0x58025494

080067a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80067ac:	f7fd f90c 	bl	80039c8 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e2dc      	b.n	8006d76 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d008      	beq.n	80067da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2280      	movs	r2, #128	; 0x80
 80067cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e2cd      	b.n	8006d76 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a76      	ldr	r2, [pc, #472]	; (80069b8 <HAL_DMA_Abort+0x214>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d04a      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a74      	ldr	r2, [pc, #464]	; (80069bc <HAL_DMA_Abort+0x218>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d045      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a73      	ldr	r2, [pc, #460]	; (80069c0 <HAL_DMA_Abort+0x21c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d040      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a71      	ldr	r2, [pc, #452]	; (80069c4 <HAL_DMA_Abort+0x220>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d03b      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a70      	ldr	r2, [pc, #448]	; (80069c8 <HAL_DMA_Abort+0x224>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d036      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a6e      	ldr	r2, [pc, #440]	; (80069cc <HAL_DMA_Abort+0x228>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d031      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a6d      	ldr	r2, [pc, #436]	; (80069d0 <HAL_DMA_Abort+0x22c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d02c      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a6b      	ldr	r2, [pc, #428]	; (80069d4 <HAL_DMA_Abort+0x230>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d027      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a6a      	ldr	r2, [pc, #424]	; (80069d8 <HAL_DMA_Abort+0x234>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a68      	ldr	r2, [pc, #416]	; (80069dc <HAL_DMA_Abort+0x238>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01d      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a67      	ldr	r2, [pc, #412]	; (80069e0 <HAL_DMA_Abort+0x23c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a65      	ldr	r2, [pc, #404]	; (80069e4 <HAL_DMA_Abort+0x240>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a64      	ldr	r2, [pc, #400]	; (80069e8 <HAL_DMA_Abort+0x244>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a62      	ldr	r2, [pc, #392]	; (80069ec <HAL_DMA_Abort+0x248>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a61      	ldr	r2, [pc, #388]	; (80069f0 <HAL_DMA_Abort+0x24c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_DMA_Abort+0xd6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a5f      	ldr	r2, [pc, #380]	; (80069f4 <HAL_DMA_Abort+0x250>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d101      	bne.n	800687e <HAL_DMA_Abort+0xda>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <HAL_DMA_Abort+0xdc>
 800687e:	2300      	movs	r3, #0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d013      	beq.n	80068ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 021e 	bic.w	r2, r2, #30
 8006892:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	e00a      	b.n	80068c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 020e 	bic.w	r2, r2, #14
 80068ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a3c      	ldr	r2, [pc, #240]	; (80069b8 <HAL_DMA_Abort+0x214>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d072      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a3a      	ldr	r2, [pc, #232]	; (80069bc <HAL_DMA_Abort+0x218>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d06d      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a39      	ldr	r2, [pc, #228]	; (80069c0 <HAL_DMA_Abort+0x21c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d068      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a37      	ldr	r2, [pc, #220]	; (80069c4 <HAL_DMA_Abort+0x220>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d063      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a36      	ldr	r2, [pc, #216]	; (80069c8 <HAL_DMA_Abort+0x224>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d05e      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a34      	ldr	r2, [pc, #208]	; (80069cc <HAL_DMA_Abort+0x228>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d059      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a33      	ldr	r2, [pc, #204]	; (80069d0 <HAL_DMA_Abort+0x22c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d054      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a31      	ldr	r2, [pc, #196]	; (80069d4 <HAL_DMA_Abort+0x230>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d04f      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a30      	ldr	r2, [pc, #192]	; (80069d8 <HAL_DMA_Abort+0x234>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d04a      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a2e      	ldr	r2, [pc, #184]	; (80069dc <HAL_DMA_Abort+0x238>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d045      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a2d      	ldr	r2, [pc, #180]	; (80069e0 <HAL_DMA_Abort+0x23c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d040      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2b      	ldr	r2, [pc, #172]	; (80069e4 <HAL_DMA_Abort+0x240>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d03b      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <HAL_DMA_Abort+0x244>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d036      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a28      	ldr	r2, [pc, #160]	; (80069ec <HAL_DMA_Abort+0x248>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d031      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a27      	ldr	r2, [pc, #156]	; (80069f0 <HAL_DMA_Abort+0x24c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d02c      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a25      	ldr	r2, [pc, #148]	; (80069f4 <HAL_DMA_Abort+0x250>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d027      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a24      	ldr	r2, [pc, #144]	; (80069f8 <HAL_DMA_Abort+0x254>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d022      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a22      	ldr	r2, [pc, #136]	; (80069fc <HAL_DMA_Abort+0x258>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01d      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a21      	ldr	r2, [pc, #132]	; (8006a00 <HAL_DMA_Abort+0x25c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d018      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1f      	ldr	r2, [pc, #124]	; (8006a04 <HAL_DMA_Abort+0x260>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <HAL_DMA_Abort+0x264>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1c      	ldr	r2, [pc, #112]	; (8006a0c <HAL_DMA_Abort+0x268>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1b      	ldr	r2, [pc, #108]	; (8006a10 <HAL_DMA_Abort+0x26c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_DMA_Abort+0x20e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <HAL_DMA_Abort+0x270>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d132      	bne.n	8006a18 <HAL_DMA_Abort+0x274>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e031      	b.n	8006a1a <HAL_DMA_Abort+0x276>
 80069b6:	bf00      	nop
 80069b8:	40020010 	.word	0x40020010
 80069bc:	40020028 	.word	0x40020028
 80069c0:	40020040 	.word	0x40020040
 80069c4:	40020058 	.word	0x40020058
 80069c8:	40020070 	.word	0x40020070
 80069cc:	40020088 	.word	0x40020088
 80069d0:	400200a0 	.word	0x400200a0
 80069d4:	400200b8 	.word	0x400200b8
 80069d8:	40020410 	.word	0x40020410
 80069dc:	40020428 	.word	0x40020428
 80069e0:	40020440 	.word	0x40020440
 80069e4:	40020458 	.word	0x40020458
 80069e8:	40020470 	.word	0x40020470
 80069ec:	40020488 	.word	0x40020488
 80069f0:	400204a0 	.word	0x400204a0
 80069f4:	400204b8 	.word	0x400204b8
 80069f8:	58025408 	.word	0x58025408
 80069fc:	5802541c 	.word	0x5802541c
 8006a00:	58025430 	.word	0x58025430
 8006a04:	58025444 	.word	0x58025444
 8006a08:	58025458 	.word	0x58025458
 8006a0c:	5802546c 	.word	0x5802546c
 8006a10:	58025480 	.word	0x58025480
 8006a14:	58025494 	.word	0x58025494
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a6d      	ldr	r2, [pc, #436]	; (8006be8 <HAL_DMA_Abort+0x444>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d04a      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a6b      	ldr	r2, [pc, #428]	; (8006bec <HAL_DMA_Abort+0x448>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d045      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a6a      	ldr	r2, [pc, #424]	; (8006bf0 <HAL_DMA_Abort+0x44c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d040      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a68      	ldr	r2, [pc, #416]	; (8006bf4 <HAL_DMA_Abort+0x450>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d03b      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a67      	ldr	r2, [pc, #412]	; (8006bf8 <HAL_DMA_Abort+0x454>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d036      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a65      	ldr	r2, [pc, #404]	; (8006bfc <HAL_DMA_Abort+0x458>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d031      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a64      	ldr	r2, [pc, #400]	; (8006c00 <HAL_DMA_Abort+0x45c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d02c      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a62      	ldr	r2, [pc, #392]	; (8006c04 <HAL_DMA_Abort+0x460>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d027      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a61      	ldr	r2, [pc, #388]	; (8006c08 <HAL_DMA_Abort+0x464>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d022      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a5f      	ldr	r2, [pc, #380]	; (8006c0c <HAL_DMA_Abort+0x468>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d01d      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a5e      	ldr	r2, [pc, #376]	; (8006c10 <HAL_DMA_Abort+0x46c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d018      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a5c      	ldr	r2, [pc, #368]	; (8006c14 <HAL_DMA_Abort+0x470>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a5b      	ldr	r2, [pc, #364]	; (8006c18 <HAL_DMA_Abort+0x474>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00e      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a59      	ldr	r2, [pc, #356]	; (8006c1c <HAL_DMA_Abort+0x478>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d009      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a58      	ldr	r2, [pc, #352]	; (8006c20 <HAL_DMA_Abort+0x47c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d004      	beq.n	8006ace <HAL_DMA_Abort+0x32a>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a56      	ldr	r2, [pc, #344]	; (8006c24 <HAL_DMA_Abort+0x480>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d108      	bne.n	8006ae0 <HAL_DMA_Abort+0x33c>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e007      	b.n	8006af0 <HAL_DMA_Abort+0x34c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006af0:	e013      	b.n	8006b1a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006af2:	f7fc ff69 	bl	80039c8 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b05      	cmp	r3, #5
 8006afe:	d90c      	bls.n	8006b1a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2220      	movs	r2, #32
 8006b04:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2203      	movs	r2, #3
 8006b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e12d      	b.n	8006d76 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e5      	bne.n	8006af2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a2f      	ldr	r2, [pc, #188]	; (8006be8 <HAL_DMA_Abort+0x444>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d04a      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a2d      	ldr	r2, [pc, #180]	; (8006bec <HAL_DMA_Abort+0x448>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d045      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2c      	ldr	r2, [pc, #176]	; (8006bf0 <HAL_DMA_Abort+0x44c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d040      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2a      	ldr	r2, [pc, #168]	; (8006bf4 <HAL_DMA_Abort+0x450>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d03b      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a29      	ldr	r2, [pc, #164]	; (8006bf8 <HAL_DMA_Abort+0x454>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d036      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a27      	ldr	r2, [pc, #156]	; (8006bfc <HAL_DMA_Abort+0x458>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d031      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a26      	ldr	r2, [pc, #152]	; (8006c00 <HAL_DMA_Abort+0x45c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d02c      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a24      	ldr	r2, [pc, #144]	; (8006c04 <HAL_DMA_Abort+0x460>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d027      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a23      	ldr	r2, [pc, #140]	; (8006c08 <HAL_DMA_Abort+0x464>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d022      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a21      	ldr	r2, [pc, #132]	; (8006c0c <HAL_DMA_Abort+0x468>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01d      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a20      	ldr	r2, [pc, #128]	; (8006c10 <HAL_DMA_Abort+0x46c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d018      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1e      	ldr	r2, [pc, #120]	; (8006c14 <HAL_DMA_Abort+0x470>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1d      	ldr	r2, [pc, #116]	; (8006c18 <HAL_DMA_Abort+0x474>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00e      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1b      	ldr	r2, [pc, #108]	; (8006c1c <HAL_DMA_Abort+0x478>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d009      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a1a      	ldr	r2, [pc, #104]	; (8006c20 <HAL_DMA_Abort+0x47c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d004      	beq.n	8006bc6 <HAL_DMA_Abort+0x422>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a18      	ldr	r2, [pc, #96]	; (8006c24 <HAL_DMA_Abort+0x480>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d101      	bne.n	8006bca <HAL_DMA_Abort+0x426>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <HAL_DMA_Abort+0x428>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d02b      	beq.n	8006c28 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bda:	f003 031f 	and.w	r3, r3, #31
 8006bde:	223f      	movs	r2, #63	; 0x3f
 8006be0:	409a      	lsls	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	609a      	str	r2, [r3, #8]
 8006be6:	e02a      	b.n	8006c3e <HAL_DMA_Abort+0x49a>
 8006be8:	40020010 	.word	0x40020010
 8006bec:	40020028 	.word	0x40020028
 8006bf0:	40020040 	.word	0x40020040
 8006bf4:	40020058 	.word	0x40020058
 8006bf8:	40020070 	.word	0x40020070
 8006bfc:	40020088 	.word	0x40020088
 8006c00:	400200a0 	.word	0x400200a0
 8006c04:	400200b8 	.word	0x400200b8
 8006c08:	40020410 	.word	0x40020410
 8006c0c:	40020428 	.word	0x40020428
 8006c10:	40020440 	.word	0x40020440
 8006c14:	40020458 	.word	0x40020458
 8006c18:	40020470 	.word	0x40020470
 8006c1c:	40020488 	.word	0x40020488
 8006c20:	400204a0 	.word	0x400204a0
 8006c24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c32:	f003 031f 	and.w	r3, r3, #31
 8006c36:	2201      	movs	r2, #1
 8006c38:	409a      	lsls	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a4f      	ldr	r2, [pc, #316]	; (8006d80 <HAL_DMA_Abort+0x5dc>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d072      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a4d      	ldr	r2, [pc, #308]	; (8006d84 <HAL_DMA_Abort+0x5e0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d06d      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a4c      	ldr	r2, [pc, #304]	; (8006d88 <HAL_DMA_Abort+0x5e4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d068      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a4a      	ldr	r2, [pc, #296]	; (8006d8c <HAL_DMA_Abort+0x5e8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d063      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a49      	ldr	r2, [pc, #292]	; (8006d90 <HAL_DMA_Abort+0x5ec>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d05e      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a47      	ldr	r2, [pc, #284]	; (8006d94 <HAL_DMA_Abort+0x5f0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d059      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a46      	ldr	r2, [pc, #280]	; (8006d98 <HAL_DMA_Abort+0x5f4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d054      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a44      	ldr	r2, [pc, #272]	; (8006d9c <HAL_DMA_Abort+0x5f8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d04f      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a43      	ldr	r2, [pc, #268]	; (8006da0 <HAL_DMA_Abort+0x5fc>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d04a      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a41      	ldr	r2, [pc, #260]	; (8006da4 <HAL_DMA_Abort+0x600>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d045      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a40      	ldr	r2, [pc, #256]	; (8006da8 <HAL_DMA_Abort+0x604>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d040      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a3e      	ldr	r2, [pc, #248]	; (8006dac <HAL_DMA_Abort+0x608>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d03b      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3d      	ldr	r2, [pc, #244]	; (8006db0 <HAL_DMA_Abort+0x60c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d036      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3b      	ldr	r2, [pc, #236]	; (8006db4 <HAL_DMA_Abort+0x610>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d031      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a3a      	ldr	r2, [pc, #232]	; (8006db8 <HAL_DMA_Abort+0x614>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d02c      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a38      	ldr	r2, [pc, #224]	; (8006dbc <HAL_DMA_Abort+0x618>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d027      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a37      	ldr	r2, [pc, #220]	; (8006dc0 <HAL_DMA_Abort+0x61c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a35      	ldr	r2, [pc, #212]	; (8006dc4 <HAL_DMA_Abort+0x620>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01d      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a34      	ldr	r2, [pc, #208]	; (8006dc8 <HAL_DMA_Abort+0x624>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a32      	ldr	r2, [pc, #200]	; (8006dcc <HAL_DMA_Abort+0x628>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a31      	ldr	r2, [pc, #196]	; (8006dd0 <HAL_DMA_Abort+0x62c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a2f      	ldr	r2, [pc, #188]	; (8006dd4 <HAL_DMA_Abort+0x630>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a2e      	ldr	r2, [pc, #184]	; (8006dd8 <HAL_DMA_Abort+0x634>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_DMA_Abort+0x58a>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a2c      	ldr	r2, [pc, #176]	; (8006ddc <HAL_DMA_Abort+0x638>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d101      	bne.n	8006d32 <HAL_DMA_Abort+0x58e>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <HAL_DMA_Abort+0x590>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d015      	beq.n	8006d64 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d40:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00c      	beq.n	8006d64 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d58:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d62:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40020010 	.word	0x40020010
 8006d84:	40020028 	.word	0x40020028
 8006d88:	40020040 	.word	0x40020040
 8006d8c:	40020058 	.word	0x40020058
 8006d90:	40020070 	.word	0x40020070
 8006d94:	40020088 	.word	0x40020088
 8006d98:	400200a0 	.word	0x400200a0
 8006d9c:	400200b8 	.word	0x400200b8
 8006da0:	40020410 	.word	0x40020410
 8006da4:	40020428 	.word	0x40020428
 8006da8:	40020440 	.word	0x40020440
 8006dac:	40020458 	.word	0x40020458
 8006db0:	40020470 	.word	0x40020470
 8006db4:	40020488 	.word	0x40020488
 8006db8:	400204a0 	.word	0x400204a0
 8006dbc:	400204b8 	.word	0x400204b8
 8006dc0:	58025408 	.word	0x58025408
 8006dc4:	5802541c 	.word	0x5802541c
 8006dc8:	58025430 	.word	0x58025430
 8006dcc:	58025444 	.word	0x58025444
 8006dd0:	58025458 	.word	0x58025458
 8006dd4:	5802546c 	.word	0x5802546c
 8006dd8:	58025480 	.word	0x58025480
 8006ddc:	58025494 	.word	0x58025494

08006de0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e237      	b.n	8007262 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d004      	beq.n	8006e08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2280      	movs	r2, #128	; 0x80
 8006e02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e22c      	b.n	8007262 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a5c      	ldr	r2, [pc, #368]	; (8006f80 <HAL_DMA_Abort_IT+0x1a0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d04a      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a5b      	ldr	r2, [pc, #364]	; (8006f84 <HAL_DMA_Abort_IT+0x1a4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d045      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a59      	ldr	r2, [pc, #356]	; (8006f88 <HAL_DMA_Abort_IT+0x1a8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d040      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a58      	ldr	r2, [pc, #352]	; (8006f8c <HAL_DMA_Abort_IT+0x1ac>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d03b      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a56      	ldr	r2, [pc, #344]	; (8006f90 <HAL_DMA_Abort_IT+0x1b0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d036      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a55      	ldr	r2, [pc, #340]	; (8006f94 <HAL_DMA_Abort_IT+0x1b4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d031      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a53      	ldr	r2, [pc, #332]	; (8006f98 <HAL_DMA_Abort_IT+0x1b8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d02c      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a52      	ldr	r2, [pc, #328]	; (8006f9c <HAL_DMA_Abort_IT+0x1bc>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d027      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a50      	ldr	r2, [pc, #320]	; (8006fa0 <HAL_DMA_Abort_IT+0x1c0>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d022      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a4f      	ldr	r2, [pc, #316]	; (8006fa4 <HAL_DMA_Abort_IT+0x1c4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d01d      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a4d      	ldr	r2, [pc, #308]	; (8006fa8 <HAL_DMA_Abort_IT+0x1c8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d018      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a4c      	ldr	r2, [pc, #304]	; (8006fac <HAL_DMA_Abort_IT+0x1cc>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d013      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a4a      	ldr	r2, [pc, #296]	; (8006fb0 <HAL_DMA_Abort_IT+0x1d0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00e      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a49      	ldr	r2, [pc, #292]	; (8006fb4 <HAL_DMA_Abort_IT+0x1d4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d009      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a47      	ldr	r2, [pc, #284]	; (8006fb8 <HAL_DMA_Abort_IT+0x1d8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d004      	beq.n	8006ea8 <HAL_DMA_Abort_IT+0xc8>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a46      	ldr	r2, [pc, #280]	; (8006fbc <HAL_DMA_Abort_IT+0x1dc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d101      	bne.n	8006eac <HAL_DMA_Abort_IT+0xcc>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <HAL_DMA_Abort_IT+0xce>
 8006eac:	2300      	movs	r3, #0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8086 	beq.w	8006fc0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a2f      	ldr	r2, [pc, #188]	; (8006f80 <HAL_DMA_Abort_IT+0x1a0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d04a      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a2e      	ldr	r2, [pc, #184]	; (8006f84 <HAL_DMA_Abort_IT+0x1a4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d045      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a2c      	ldr	r2, [pc, #176]	; (8006f88 <HAL_DMA_Abort_IT+0x1a8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d040      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a2b      	ldr	r2, [pc, #172]	; (8006f8c <HAL_DMA_Abort_IT+0x1ac>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d03b      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a29      	ldr	r2, [pc, #164]	; (8006f90 <HAL_DMA_Abort_IT+0x1b0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d036      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a28      	ldr	r2, [pc, #160]	; (8006f94 <HAL_DMA_Abort_IT+0x1b4>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d031      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a26      	ldr	r2, [pc, #152]	; (8006f98 <HAL_DMA_Abort_IT+0x1b8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d02c      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a25      	ldr	r2, [pc, #148]	; (8006f9c <HAL_DMA_Abort_IT+0x1bc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d027      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a23      	ldr	r2, [pc, #140]	; (8006fa0 <HAL_DMA_Abort_IT+0x1c0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d022      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a22      	ldr	r2, [pc, #136]	; (8006fa4 <HAL_DMA_Abort_IT+0x1c4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d01d      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a20      	ldr	r2, [pc, #128]	; (8006fa8 <HAL_DMA_Abort_IT+0x1c8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d018      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <HAL_DMA_Abort_IT+0x1cc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d013      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1d      	ldr	r2, [pc, #116]	; (8006fb0 <HAL_DMA_Abort_IT+0x1d0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00e      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1c      	ldr	r2, [pc, #112]	; (8006fb4 <HAL_DMA_Abort_IT+0x1d4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d009      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1a      	ldr	r2, [pc, #104]	; (8006fb8 <HAL_DMA_Abort_IT+0x1d8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d004      	beq.n	8006f5c <HAL_DMA_Abort_IT+0x17c>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <HAL_DMA_Abort_IT+0x1dc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d108      	bne.n	8006f6e <HAL_DMA_Abort_IT+0x18e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	e178      	b.n	8007260 <HAL_DMA_Abort_IT+0x480>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0201 	bic.w	r2, r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e16f      	b.n	8007260 <HAL_DMA_Abort_IT+0x480>
 8006f80:	40020010 	.word	0x40020010
 8006f84:	40020028 	.word	0x40020028
 8006f88:	40020040 	.word	0x40020040
 8006f8c:	40020058 	.word	0x40020058
 8006f90:	40020070 	.word	0x40020070
 8006f94:	40020088 	.word	0x40020088
 8006f98:	400200a0 	.word	0x400200a0
 8006f9c:	400200b8 	.word	0x400200b8
 8006fa0:	40020410 	.word	0x40020410
 8006fa4:	40020428 	.word	0x40020428
 8006fa8:	40020440 	.word	0x40020440
 8006fac:	40020458 	.word	0x40020458
 8006fb0:	40020470 	.word	0x40020470
 8006fb4:	40020488 	.word	0x40020488
 8006fb8:	400204a0 	.word	0x400204a0
 8006fbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 020e 	bic.w	r2, r2, #14
 8006fce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a6c      	ldr	r2, [pc, #432]	; (8007188 <HAL_DMA_Abort_IT+0x3a8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d04a      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a6b      	ldr	r2, [pc, #428]	; (800718c <HAL_DMA_Abort_IT+0x3ac>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d045      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a69      	ldr	r2, [pc, #420]	; (8007190 <HAL_DMA_Abort_IT+0x3b0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d040      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a68      	ldr	r2, [pc, #416]	; (8007194 <HAL_DMA_Abort_IT+0x3b4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d03b      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a66      	ldr	r2, [pc, #408]	; (8007198 <HAL_DMA_Abort_IT+0x3b8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d036      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a65      	ldr	r2, [pc, #404]	; (800719c <HAL_DMA_Abort_IT+0x3bc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d031      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a63      	ldr	r2, [pc, #396]	; (80071a0 <HAL_DMA_Abort_IT+0x3c0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d02c      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a62      	ldr	r2, [pc, #392]	; (80071a4 <HAL_DMA_Abort_IT+0x3c4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d027      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a60      	ldr	r2, [pc, #384]	; (80071a8 <HAL_DMA_Abort_IT+0x3c8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d022      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a5f      	ldr	r2, [pc, #380]	; (80071ac <HAL_DMA_Abort_IT+0x3cc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d01d      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a5d      	ldr	r2, [pc, #372]	; (80071b0 <HAL_DMA_Abort_IT+0x3d0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d018      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a5c      	ldr	r2, [pc, #368]	; (80071b4 <HAL_DMA_Abort_IT+0x3d4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d013      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a5a      	ldr	r2, [pc, #360]	; (80071b8 <HAL_DMA_Abort_IT+0x3d8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00e      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a59      	ldr	r2, [pc, #356]	; (80071bc <HAL_DMA_Abort_IT+0x3dc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d009      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a57      	ldr	r2, [pc, #348]	; (80071c0 <HAL_DMA_Abort_IT+0x3e0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d004      	beq.n	8007070 <HAL_DMA_Abort_IT+0x290>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a56      	ldr	r2, [pc, #344]	; (80071c4 <HAL_DMA_Abort_IT+0x3e4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d108      	bne.n	8007082 <HAL_DMA_Abort_IT+0x2a2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0201 	bic.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	e007      	b.n	8007092 <HAL_DMA_Abort_IT+0x2b2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0201 	bic.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a3c      	ldr	r2, [pc, #240]	; (8007188 <HAL_DMA_Abort_IT+0x3a8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d072      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a3a      	ldr	r2, [pc, #232]	; (800718c <HAL_DMA_Abort_IT+0x3ac>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d06d      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a39      	ldr	r2, [pc, #228]	; (8007190 <HAL_DMA_Abort_IT+0x3b0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d068      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a37      	ldr	r2, [pc, #220]	; (8007194 <HAL_DMA_Abort_IT+0x3b4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d063      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a36      	ldr	r2, [pc, #216]	; (8007198 <HAL_DMA_Abort_IT+0x3b8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d05e      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a34      	ldr	r2, [pc, #208]	; (800719c <HAL_DMA_Abort_IT+0x3bc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d059      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a33      	ldr	r2, [pc, #204]	; (80071a0 <HAL_DMA_Abort_IT+0x3c0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d054      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a31      	ldr	r2, [pc, #196]	; (80071a4 <HAL_DMA_Abort_IT+0x3c4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d04f      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a30      	ldr	r2, [pc, #192]	; (80071a8 <HAL_DMA_Abort_IT+0x3c8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d04a      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a2e      	ldr	r2, [pc, #184]	; (80071ac <HAL_DMA_Abort_IT+0x3cc>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d045      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a2d      	ldr	r2, [pc, #180]	; (80071b0 <HAL_DMA_Abort_IT+0x3d0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d040      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a2b      	ldr	r2, [pc, #172]	; (80071b4 <HAL_DMA_Abort_IT+0x3d4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d03b      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a2a      	ldr	r2, [pc, #168]	; (80071b8 <HAL_DMA_Abort_IT+0x3d8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d036      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a28      	ldr	r2, [pc, #160]	; (80071bc <HAL_DMA_Abort_IT+0x3dc>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d031      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a27      	ldr	r2, [pc, #156]	; (80071c0 <HAL_DMA_Abort_IT+0x3e0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d02c      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a25      	ldr	r2, [pc, #148]	; (80071c4 <HAL_DMA_Abort_IT+0x3e4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d027      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a24      	ldr	r2, [pc, #144]	; (80071c8 <HAL_DMA_Abort_IT+0x3e8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d022      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a22      	ldr	r2, [pc, #136]	; (80071cc <HAL_DMA_Abort_IT+0x3ec>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01d      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a21      	ldr	r2, [pc, #132]	; (80071d0 <HAL_DMA_Abort_IT+0x3f0>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d018      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1f      	ldr	r2, [pc, #124]	; (80071d4 <HAL_DMA_Abort_IT+0x3f4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d013      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1e      	ldr	r2, [pc, #120]	; (80071d8 <HAL_DMA_Abort_IT+0x3f8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00e      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1c      	ldr	r2, [pc, #112]	; (80071dc <HAL_DMA_Abort_IT+0x3fc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d009      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1b      	ldr	r2, [pc, #108]	; (80071e0 <HAL_DMA_Abort_IT+0x400>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d004      	beq.n	8007182 <HAL_DMA_Abort_IT+0x3a2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a19      	ldr	r2, [pc, #100]	; (80071e4 <HAL_DMA_Abort_IT+0x404>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d132      	bne.n	80071e8 <HAL_DMA_Abort_IT+0x408>
 8007182:	2301      	movs	r3, #1
 8007184:	e031      	b.n	80071ea <HAL_DMA_Abort_IT+0x40a>
 8007186:	bf00      	nop
 8007188:	40020010 	.word	0x40020010
 800718c:	40020028 	.word	0x40020028
 8007190:	40020040 	.word	0x40020040
 8007194:	40020058 	.word	0x40020058
 8007198:	40020070 	.word	0x40020070
 800719c:	40020088 	.word	0x40020088
 80071a0:	400200a0 	.word	0x400200a0
 80071a4:	400200b8 	.word	0x400200b8
 80071a8:	40020410 	.word	0x40020410
 80071ac:	40020428 	.word	0x40020428
 80071b0:	40020440 	.word	0x40020440
 80071b4:	40020458 	.word	0x40020458
 80071b8:	40020470 	.word	0x40020470
 80071bc:	40020488 	.word	0x40020488
 80071c0:	400204a0 	.word	0x400204a0
 80071c4:	400204b8 	.word	0x400204b8
 80071c8:	58025408 	.word	0x58025408
 80071cc:	5802541c 	.word	0x5802541c
 80071d0:	58025430 	.word	0x58025430
 80071d4:	58025444 	.word	0x58025444
 80071d8:	58025458 	.word	0x58025458
 80071dc:	5802546c 	.word	0x5802546c
 80071e0:	58025480 	.word	0x58025480
 80071e4:	58025494 	.word	0x58025494
 80071e8:	2300      	movs	r3, #0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d028      	beq.n	8007240 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007202:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007208:	f003 031f 	and.w	r3, r3, #31
 800720c:	2201      	movs	r2, #1
 800720e:	409a      	lsls	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800721c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00c      	beq.n	8007240 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007234:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800723e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop

0800726c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08a      	sub	sp, #40	; 0x28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007278:	4b67      	ldr	r3, [pc, #412]	; (8007418 <HAL_DMA_IRQHandler+0x1ac>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a67      	ldr	r2, [pc, #412]	; (800741c <HAL_DMA_IRQHandler+0x1b0>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	0a9b      	lsrs	r3, r3, #10
 8007284:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007290:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a5f      	ldr	r2, [pc, #380]	; (8007420 <HAL_DMA_IRQHandler+0x1b4>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d04a      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a5d      	ldr	r2, [pc, #372]	; (8007424 <HAL_DMA_IRQHandler+0x1b8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d045      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a5c      	ldr	r2, [pc, #368]	; (8007428 <HAL_DMA_IRQHandler+0x1bc>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d040      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a5a      	ldr	r2, [pc, #360]	; (800742c <HAL_DMA_IRQHandler+0x1c0>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d03b      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a59      	ldr	r2, [pc, #356]	; (8007430 <HAL_DMA_IRQHandler+0x1c4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d036      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a57      	ldr	r2, [pc, #348]	; (8007434 <HAL_DMA_IRQHandler+0x1c8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d031      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a56      	ldr	r2, [pc, #344]	; (8007438 <HAL_DMA_IRQHandler+0x1cc>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d02c      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a54      	ldr	r2, [pc, #336]	; (800743c <HAL_DMA_IRQHandler+0x1d0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d027      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a53      	ldr	r2, [pc, #332]	; (8007440 <HAL_DMA_IRQHandler+0x1d4>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d022      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a51      	ldr	r2, [pc, #324]	; (8007444 <HAL_DMA_IRQHandler+0x1d8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d01d      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a50      	ldr	r2, [pc, #320]	; (8007448 <HAL_DMA_IRQHandler+0x1dc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d018      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a4e      	ldr	r2, [pc, #312]	; (800744c <HAL_DMA_IRQHandler+0x1e0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d013      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a4d      	ldr	r2, [pc, #308]	; (8007450 <HAL_DMA_IRQHandler+0x1e4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00e      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a4b      	ldr	r2, [pc, #300]	; (8007454 <HAL_DMA_IRQHandler+0x1e8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d009      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a4a      	ldr	r2, [pc, #296]	; (8007458 <HAL_DMA_IRQHandler+0x1ec>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d004      	beq.n	800733e <HAL_DMA_IRQHandler+0xd2>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a48      	ldr	r2, [pc, #288]	; (800745c <HAL_DMA_IRQHandler+0x1f0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d101      	bne.n	8007342 <HAL_DMA_IRQHandler+0xd6>
 800733e:	2301      	movs	r3, #1
 8007340:	e000      	b.n	8007344 <HAL_DMA_IRQHandler+0xd8>
 8007342:	2300      	movs	r3, #0
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 842b 	beq.w	8007ba0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734e:	f003 031f 	and.w	r3, r3, #31
 8007352:	2208      	movs	r2, #8
 8007354:	409a      	lsls	r2, r3
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	4013      	ands	r3, r2
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 80a2 	beq.w	80074a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a2e      	ldr	r2, [pc, #184]	; (8007420 <HAL_DMA_IRQHandler+0x1b4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d04a      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <HAL_DMA_IRQHandler+0x1b8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d045      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2b      	ldr	r2, [pc, #172]	; (8007428 <HAL_DMA_IRQHandler+0x1bc>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d040      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2a      	ldr	r2, [pc, #168]	; (800742c <HAL_DMA_IRQHandler+0x1c0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d03b      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a28      	ldr	r2, [pc, #160]	; (8007430 <HAL_DMA_IRQHandler+0x1c4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d036      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a27      	ldr	r2, [pc, #156]	; (8007434 <HAL_DMA_IRQHandler+0x1c8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d031      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a25      	ldr	r2, [pc, #148]	; (8007438 <HAL_DMA_IRQHandler+0x1cc>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d02c      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a24      	ldr	r2, [pc, #144]	; (800743c <HAL_DMA_IRQHandler+0x1d0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d027      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a22      	ldr	r2, [pc, #136]	; (8007440 <HAL_DMA_IRQHandler+0x1d4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d022      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a21      	ldr	r2, [pc, #132]	; (8007444 <HAL_DMA_IRQHandler+0x1d8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d01d      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a1f      	ldr	r2, [pc, #124]	; (8007448 <HAL_DMA_IRQHandler+0x1dc>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d018      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a1e      	ldr	r2, [pc, #120]	; (800744c <HAL_DMA_IRQHandler+0x1e0>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d013      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1c      	ldr	r2, [pc, #112]	; (8007450 <HAL_DMA_IRQHandler+0x1e4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00e      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1b      	ldr	r2, [pc, #108]	; (8007454 <HAL_DMA_IRQHandler+0x1e8>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d009      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a19      	ldr	r2, [pc, #100]	; (8007458 <HAL_DMA_IRQHandler+0x1ec>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d004      	beq.n	8007400 <HAL_DMA_IRQHandler+0x194>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a18      	ldr	r2, [pc, #96]	; (800745c <HAL_DMA_IRQHandler+0x1f0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d12f      	bne.n	8007460 <HAL_DMA_IRQHandler+0x1f4>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	bf14      	ite	ne
 800740e:	2301      	movne	r3, #1
 8007410:	2300      	moveq	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	e02e      	b.n	8007474 <HAL_DMA_IRQHandler+0x208>
 8007416:	bf00      	nop
 8007418:	24000090 	.word	0x24000090
 800741c:	1b4e81b5 	.word	0x1b4e81b5
 8007420:	40020010 	.word	0x40020010
 8007424:	40020028 	.word	0x40020028
 8007428:	40020040 	.word	0x40020040
 800742c:	40020058 	.word	0x40020058
 8007430:	40020070 	.word	0x40020070
 8007434:	40020088 	.word	0x40020088
 8007438:	400200a0 	.word	0x400200a0
 800743c:	400200b8 	.word	0x400200b8
 8007440:	40020410 	.word	0x40020410
 8007444:	40020428 	.word	0x40020428
 8007448:	40020440 	.word	0x40020440
 800744c:	40020458 	.word	0x40020458
 8007450:	40020470 	.word	0x40020470
 8007454:	40020488 	.word	0x40020488
 8007458:	400204a0 	.word	0x400204a0
 800745c:	400204b8 	.word	0x400204b8
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0308 	and.w	r3, r3, #8
 800746a:	2b00      	cmp	r3, #0
 800746c:	bf14      	ite	ne
 800746e:	2301      	movne	r3, #1
 8007470:	2300      	moveq	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d015      	beq.n	80074a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0204 	bic.w	r2, r2, #4
 8007486:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748c:	f003 031f 	and.w	r3, r3, #31
 8007490:	2208      	movs	r2, #8
 8007492:	409a      	lsls	r2, r3
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749c:	f043 0201 	orr.w	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	fa22 f303 	lsr.w	r3, r2, r3
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d06e      	beq.n	8007598 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a69      	ldr	r2, [pc, #420]	; (8007664 <HAL_DMA_IRQHandler+0x3f8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d04a      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a67      	ldr	r2, [pc, #412]	; (8007668 <HAL_DMA_IRQHandler+0x3fc>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d045      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a66      	ldr	r2, [pc, #408]	; (800766c <HAL_DMA_IRQHandler+0x400>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d040      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a64      	ldr	r2, [pc, #400]	; (8007670 <HAL_DMA_IRQHandler+0x404>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d03b      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a63      	ldr	r2, [pc, #396]	; (8007674 <HAL_DMA_IRQHandler+0x408>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d036      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a61      	ldr	r2, [pc, #388]	; (8007678 <HAL_DMA_IRQHandler+0x40c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d031      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a60      	ldr	r2, [pc, #384]	; (800767c <HAL_DMA_IRQHandler+0x410>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d02c      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a5e      	ldr	r2, [pc, #376]	; (8007680 <HAL_DMA_IRQHandler+0x414>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d027      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a5d      	ldr	r2, [pc, #372]	; (8007684 <HAL_DMA_IRQHandler+0x418>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d022      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a5b      	ldr	r2, [pc, #364]	; (8007688 <HAL_DMA_IRQHandler+0x41c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d01d      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a5a      	ldr	r2, [pc, #360]	; (800768c <HAL_DMA_IRQHandler+0x420>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d018      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a58      	ldr	r2, [pc, #352]	; (8007690 <HAL_DMA_IRQHandler+0x424>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a57      	ldr	r2, [pc, #348]	; (8007694 <HAL_DMA_IRQHandler+0x428>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d00e      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a55      	ldr	r2, [pc, #340]	; (8007698 <HAL_DMA_IRQHandler+0x42c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d009      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a54      	ldr	r2, [pc, #336]	; (800769c <HAL_DMA_IRQHandler+0x430>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d004      	beq.n	800755a <HAL_DMA_IRQHandler+0x2ee>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a52      	ldr	r2, [pc, #328]	; (80076a0 <HAL_DMA_IRQHandler+0x434>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d10a      	bne.n	8007570 <HAL_DMA_IRQHandler+0x304>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007564:	2b00      	cmp	r3, #0
 8007566:	bf14      	ite	ne
 8007568:	2301      	movne	r3, #1
 800756a:	2300      	moveq	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	e003      	b.n	8007578 <HAL_DMA_IRQHandler+0x30c>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2300      	movs	r3, #0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00d      	beq.n	8007598 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007580:	f003 031f 	and.w	r3, r3, #31
 8007584:	2201      	movs	r2, #1
 8007586:	409a      	lsls	r2, r3
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	f043 0202 	orr.w	r2, r3, #2
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	2204      	movs	r2, #4
 80075a2:	409a      	lsls	r2, r3
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	4013      	ands	r3, r2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 808f 	beq.w	80076cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a2c      	ldr	r2, [pc, #176]	; (8007664 <HAL_DMA_IRQHandler+0x3f8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d04a      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2a      	ldr	r2, [pc, #168]	; (8007668 <HAL_DMA_IRQHandler+0x3fc>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d045      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a29      	ldr	r2, [pc, #164]	; (800766c <HAL_DMA_IRQHandler+0x400>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d040      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a27      	ldr	r2, [pc, #156]	; (8007670 <HAL_DMA_IRQHandler+0x404>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d03b      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a26      	ldr	r2, [pc, #152]	; (8007674 <HAL_DMA_IRQHandler+0x408>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d036      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a24      	ldr	r2, [pc, #144]	; (8007678 <HAL_DMA_IRQHandler+0x40c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d031      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a23      	ldr	r2, [pc, #140]	; (800767c <HAL_DMA_IRQHandler+0x410>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d02c      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a21      	ldr	r2, [pc, #132]	; (8007680 <HAL_DMA_IRQHandler+0x414>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d027      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a20      	ldr	r2, [pc, #128]	; (8007684 <HAL_DMA_IRQHandler+0x418>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d022      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <HAL_DMA_IRQHandler+0x41c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01d      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1d      	ldr	r2, [pc, #116]	; (800768c <HAL_DMA_IRQHandler+0x420>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d018      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1b      	ldr	r2, [pc, #108]	; (8007690 <HAL_DMA_IRQHandler+0x424>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1a      	ldr	r2, [pc, #104]	; (8007694 <HAL_DMA_IRQHandler+0x428>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00e      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a18      	ldr	r2, [pc, #96]	; (8007698 <HAL_DMA_IRQHandler+0x42c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d009      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a17      	ldr	r2, [pc, #92]	; (800769c <HAL_DMA_IRQHandler+0x430>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d004      	beq.n	800764e <HAL_DMA_IRQHandler+0x3e2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <HAL_DMA_IRQHandler+0x434>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d12a      	bne.n	80076a4 <HAL_DMA_IRQHandler+0x438>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	bf14      	ite	ne
 800765c:	2301      	movne	r3, #1
 800765e:	2300      	moveq	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	e023      	b.n	80076ac <HAL_DMA_IRQHandler+0x440>
 8007664:	40020010 	.word	0x40020010
 8007668:	40020028 	.word	0x40020028
 800766c:	40020040 	.word	0x40020040
 8007670:	40020058 	.word	0x40020058
 8007674:	40020070 	.word	0x40020070
 8007678:	40020088 	.word	0x40020088
 800767c:	400200a0 	.word	0x400200a0
 8007680:	400200b8 	.word	0x400200b8
 8007684:	40020410 	.word	0x40020410
 8007688:	40020428 	.word	0x40020428
 800768c:	40020440 	.word	0x40020440
 8007690:	40020458 	.word	0x40020458
 8007694:	40020470 	.word	0x40020470
 8007698:	40020488 	.word	0x40020488
 800769c:	400204a0 	.word	0x400204a0
 80076a0:	400204b8 	.word	0x400204b8
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2300      	movs	r3, #0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00d      	beq.n	80076cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	2204      	movs	r2, #4
 80076ba:	409a      	lsls	r2, r3
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c4:	f043 0204 	orr.w	r2, r3, #4
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d0:	f003 031f 	and.w	r3, r3, #31
 80076d4:	2210      	movs	r2, #16
 80076d6:	409a      	lsls	r2, r3
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 80a6 	beq.w	800782e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a85      	ldr	r2, [pc, #532]	; (80078fc <HAL_DMA_IRQHandler+0x690>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d04a      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a83      	ldr	r2, [pc, #524]	; (8007900 <HAL_DMA_IRQHandler+0x694>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d045      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a82      	ldr	r2, [pc, #520]	; (8007904 <HAL_DMA_IRQHandler+0x698>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d040      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a80      	ldr	r2, [pc, #512]	; (8007908 <HAL_DMA_IRQHandler+0x69c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d03b      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a7f      	ldr	r2, [pc, #508]	; (800790c <HAL_DMA_IRQHandler+0x6a0>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d036      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a7d      	ldr	r2, [pc, #500]	; (8007910 <HAL_DMA_IRQHandler+0x6a4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d031      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a7c      	ldr	r2, [pc, #496]	; (8007914 <HAL_DMA_IRQHandler+0x6a8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d02c      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a7a      	ldr	r2, [pc, #488]	; (8007918 <HAL_DMA_IRQHandler+0x6ac>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d027      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a79      	ldr	r2, [pc, #484]	; (800791c <HAL_DMA_IRQHandler+0x6b0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d022      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a77      	ldr	r2, [pc, #476]	; (8007920 <HAL_DMA_IRQHandler+0x6b4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d01d      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a76      	ldr	r2, [pc, #472]	; (8007924 <HAL_DMA_IRQHandler+0x6b8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d018      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a74      	ldr	r2, [pc, #464]	; (8007928 <HAL_DMA_IRQHandler+0x6bc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d013      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a73      	ldr	r2, [pc, #460]	; (800792c <HAL_DMA_IRQHandler+0x6c0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00e      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a71      	ldr	r2, [pc, #452]	; (8007930 <HAL_DMA_IRQHandler+0x6c4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d009      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a70      	ldr	r2, [pc, #448]	; (8007934 <HAL_DMA_IRQHandler+0x6c8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d004      	beq.n	8007782 <HAL_DMA_IRQHandler+0x516>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a6e      	ldr	r2, [pc, #440]	; (8007938 <HAL_DMA_IRQHandler+0x6cc>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d10a      	bne.n	8007798 <HAL_DMA_IRQHandler+0x52c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	bf14      	ite	ne
 8007790:	2301      	movne	r3, #1
 8007792:	2300      	moveq	r3, #0
 8007794:	b2db      	uxtb	r3, r3
 8007796:	e009      	b.n	80077ac <HAL_DMA_IRQHandler+0x540>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0304 	and.w	r3, r3, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d03e      	beq.n	800782e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b4:	f003 031f 	and.w	r3, r3, #31
 80077b8:	2210      	movs	r2, #16
 80077ba:	409a      	lsls	r2, r3
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d018      	beq.n	8007800 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d108      	bne.n	80077ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d024      	beq.n	800782e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4798      	blx	r3
 80077ec:	e01f      	b.n	800782e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d01b      	beq.n	800782e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	4798      	blx	r3
 80077fe:	e016      	b.n	800782e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780a:	2b00      	cmp	r3, #0
 800780c:	d107      	bne.n	800781e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0208 	bic.w	r2, r2, #8
 800781c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2220      	movs	r2, #32
 8007838:	409a      	lsls	r2, r3
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	4013      	ands	r3, r2
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 8110 	beq.w	8007a64 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a2c      	ldr	r2, [pc, #176]	; (80078fc <HAL_DMA_IRQHandler+0x690>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d04a      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a2b      	ldr	r2, [pc, #172]	; (8007900 <HAL_DMA_IRQHandler+0x694>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d045      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a29      	ldr	r2, [pc, #164]	; (8007904 <HAL_DMA_IRQHandler+0x698>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d040      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a28      	ldr	r2, [pc, #160]	; (8007908 <HAL_DMA_IRQHandler+0x69c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d03b      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a26      	ldr	r2, [pc, #152]	; (800790c <HAL_DMA_IRQHandler+0x6a0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d036      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a25      	ldr	r2, [pc, #148]	; (8007910 <HAL_DMA_IRQHandler+0x6a4>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d031      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a23      	ldr	r2, [pc, #140]	; (8007914 <HAL_DMA_IRQHandler+0x6a8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d02c      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a22      	ldr	r2, [pc, #136]	; (8007918 <HAL_DMA_IRQHandler+0x6ac>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d027      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a20      	ldr	r2, [pc, #128]	; (800791c <HAL_DMA_IRQHandler+0x6b0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d022      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a1f      	ldr	r2, [pc, #124]	; (8007920 <HAL_DMA_IRQHandler+0x6b4>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d01d      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <HAL_DMA_IRQHandler+0x6b8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d018      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a1c      	ldr	r2, [pc, #112]	; (8007928 <HAL_DMA_IRQHandler+0x6bc>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d013      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1a      	ldr	r2, [pc, #104]	; (800792c <HAL_DMA_IRQHandler+0x6c0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d00e      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a19      	ldr	r2, [pc, #100]	; (8007930 <HAL_DMA_IRQHandler+0x6c4>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d009      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a17      	ldr	r2, [pc, #92]	; (8007934 <HAL_DMA_IRQHandler+0x6c8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d004      	beq.n	80078e4 <HAL_DMA_IRQHandler+0x678>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a16      	ldr	r2, [pc, #88]	; (8007938 <HAL_DMA_IRQHandler+0x6cc>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d12b      	bne.n	800793c <HAL_DMA_IRQHandler+0x6d0>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf14      	ite	ne
 80078f2:	2301      	movne	r3, #1
 80078f4:	2300      	moveq	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	e02a      	b.n	8007950 <HAL_DMA_IRQHandler+0x6e4>
 80078fa:	bf00      	nop
 80078fc:	40020010 	.word	0x40020010
 8007900:	40020028 	.word	0x40020028
 8007904:	40020040 	.word	0x40020040
 8007908:	40020058 	.word	0x40020058
 800790c:	40020070 	.word	0x40020070
 8007910:	40020088 	.word	0x40020088
 8007914:	400200a0 	.word	0x400200a0
 8007918:	400200b8 	.word	0x400200b8
 800791c:	40020410 	.word	0x40020410
 8007920:	40020428 	.word	0x40020428
 8007924:	40020440 	.word	0x40020440
 8007928:	40020458 	.word	0x40020458
 800792c:	40020470 	.word	0x40020470
 8007930:	40020488 	.word	0x40020488
 8007934:	400204a0 	.word	0x400204a0
 8007938:	400204b8 	.word	0x400204b8
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	bf14      	ite	ne
 800794a:	2301      	movne	r3, #1
 800794c:	2300      	moveq	r3, #0
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8087 	beq.w	8007a64 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	2220      	movs	r2, #32
 8007960:	409a      	lsls	r2, r3
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b04      	cmp	r3, #4
 8007970:	d139      	bne.n	80079e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0216 	bic.w	r2, r2, #22
 8007980:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695a      	ldr	r2, [r3, #20]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007990:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d103      	bne.n	80079a2 <HAL_DMA_IRQHandler+0x736>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d007      	beq.n	80079b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0208 	bic.w	r2, r2, #8
 80079b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b6:	f003 031f 	and.w	r3, r3, #31
 80079ba:	223f      	movs	r2, #63	; 0x3f
 80079bc:	409a      	lsls	r2, r3
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 834a 	beq.w	8008070 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
          }
          return;
 80079e4:	e344      	b.n	8008070 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d018      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d108      	bne.n	8007a14 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d02c      	beq.n	8007a64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
 8007a12:	e027      	b.n	8007a64 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d023      	beq.n	8007a64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	4798      	blx	r3
 8007a24:	e01e      	b.n	8007a64 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10f      	bne.n	8007a54 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0210 	bic.w	r2, r2, #16
 8007a42:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8306 	beq.w	800807a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8088 	beq.w	8007b8c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2204      	movs	r2, #4
 8007a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a7a      	ldr	r2, [pc, #488]	; (8007c74 <HAL_DMA_IRQHandler+0xa08>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d04a      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a79      	ldr	r2, [pc, #484]	; (8007c78 <HAL_DMA_IRQHandler+0xa0c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d045      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a77      	ldr	r2, [pc, #476]	; (8007c7c <HAL_DMA_IRQHandler+0xa10>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d040      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a76      	ldr	r2, [pc, #472]	; (8007c80 <HAL_DMA_IRQHandler+0xa14>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d03b      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a74      	ldr	r2, [pc, #464]	; (8007c84 <HAL_DMA_IRQHandler+0xa18>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d036      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a73      	ldr	r2, [pc, #460]	; (8007c88 <HAL_DMA_IRQHandler+0xa1c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d031      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a71      	ldr	r2, [pc, #452]	; (8007c8c <HAL_DMA_IRQHandler+0xa20>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d02c      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a70      	ldr	r2, [pc, #448]	; (8007c90 <HAL_DMA_IRQHandler+0xa24>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d027      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a6e      	ldr	r2, [pc, #440]	; (8007c94 <HAL_DMA_IRQHandler+0xa28>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d022      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a6d      	ldr	r2, [pc, #436]	; (8007c98 <HAL_DMA_IRQHandler+0xa2c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d01d      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a6b      	ldr	r2, [pc, #428]	; (8007c9c <HAL_DMA_IRQHandler+0xa30>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d018      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a6a      	ldr	r2, [pc, #424]	; (8007ca0 <HAL_DMA_IRQHandler+0xa34>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d013      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a68      	ldr	r2, [pc, #416]	; (8007ca4 <HAL_DMA_IRQHandler+0xa38>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00e      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a67      	ldr	r2, [pc, #412]	; (8007ca8 <HAL_DMA_IRQHandler+0xa3c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d009      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a65      	ldr	r2, [pc, #404]	; (8007cac <HAL_DMA_IRQHandler+0xa40>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d004      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x8b8>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a64      	ldr	r2, [pc, #400]	; (8007cb0 <HAL_DMA_IRQHandler+0xa44>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d108      	bne.n	8007b36 <HAL_DMA_IRQHandler+0x8ca>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	e007      	b.n	8007b46 <HAL_DMA_IRQHandler+0x8da>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d307      	bcc.n	8007b62 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f2      	bne.n	8007b46 <HAL_DMA_IRQHandler+0x8da>
 8007b60:	e000      	b.n	8007b64 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007b62:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2203      	movs	r2, #3
 8007b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007b7a:	e003      	b.n	8007b84 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 8272 	beq.w	800807a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	4798      	blx	r3
 8007b9e:	e26c      	b.n	800807a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a43      	ldr	r2, [pc, #268]	; (8007cb4 <HAL_DMA_IRQHandler+0xa48>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d022      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x984>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a42      	ldr	r2, [pc, #264]	; (8007cb8 <HAL_DMA_IRQHandler+0xa4c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d01d      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x984>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a40      	ldr	r2, [pc, #256]	; (8007cbc <HAL_DMA_IRQHandler+0xa50>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d018      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x984>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a3f      	ldr	r2, [pc, #252]	; (8007cc0 <HAL_DMA_IRQHandler+0xa54>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d013      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x984>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a3d      	ldr	r2, [pc, #244]	; (8007cc4 <HAL_DMA_IRQHandler+0xa58>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00e      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x984>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a3c      	ldr	r2, [pc, #240]	; (8007cc8 <HAL_DMA_IRQHandler+0xa5c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d009      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x984>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a3a      	ldr	r2, [pc, #232]	; (8007ccc <HAL_DMA_IRQHandler+0xa60>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x984>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a39      	ldr	r2, [pc, #228]	; (8007cd0 <HAL_DMA_IRQHandler+0xa64>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d101      	bne.n	8007bf4 <HAL_DMA_IRQHandler+0x988>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e000      	b.n	8007bf6 <HAL_DMA_IRQHandler+0x98a>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 823f 	beq.w	800807a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c08:	f003 031f 	and.w	r3, r3, #31
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80cd 	beq.w	8007db4 <HAL_DMA_IRQHandler+0xb48>
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 80c7 	beq.w	8007db4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2a:	f003 031f 	and.w	r3, r3, #31
 8007c2e:	2204      	movs	r2, #4
 8007c30:	409a      	lsls	r2, r3
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d049      	beq.n	8007cd4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d109      	bne.n	8007c5e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 8210 	beq.w	8008074 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c5c:	e20a      	b.n	8008074 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 8206 	beq.w	8008074 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c70:	e200      	b.n	8008074 <HAL_DMA_IRQHandler+0xe08>
 8007c72:	bf00      	nop
 8007c74:	40020010 	.word	0x40020010
 8007c78:	40020028 	.word	0x40020028
 8007c7c:	40020040 	.word	0x40020040
 8007c80:	40020058 	.word	0x40020058
 8007c84:	40020070 	.word	0x40020070
 8007c88:	40020088 	.word	0x40020088
 8007c8c:	400200a0 	.word	0x400200a0
 8007c90:	400200b8 	.word	0x400200b8
 8007c94:	40020410 	.word	0x40020410
 8007c98:	40020428 	.word	0x40020428
 8007c9c:	40020440 	.word	0x40020440
 8007ca0:	40020458 	.word	0x40020458
 8007ca4:	40020470 	.word	0x40020470
 8007ca8:	40020488 	.word	0x40020488
 8007cac:	400204a0 	.word	0x400204a0
 8007cb0:	400204b8 	.word	0x400204b8
 8007cb4:	58025408 	.word	0x58025408
 8007cb8:	5802541c 	.word	0x5802541c
 8007cbc:	58025430 	.word	0x58025430
 8007cc0:	58025444 	.word	0x58025444
 8007cc4:	58025458 	.word	0x58025458
 8007cc8:	5802546c 	.word	0x5802546c
 8007ccc:	58025480 	.word	0x58025480
 8007cd0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d160      	bne.n	8007da0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a7f      	ldr	r2, [pc, #508]	; (8007ee0 <HAL_DMA_IRQHandler+0xc74>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d04a      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a7d      	ldr	r2, [pc, #500]	; (8007ee4 <HAL_DMA_IRQHandler+0xc78>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d045      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a7c      	ldr	r2, [pc, #496]	; (8007ee8 <HAL_DMA_IRQHandler+0xc7c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d040      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a7a      	ldr	r2, [pc, #488]	; (8007eec <HAL_DMA_IRQHandler+0xc80>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d03b      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a79      	ldr	r2, [pc, #484]	; (8007ef0 <HAL_DMA_IRQHandler+0xc84>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d036      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a77      	ldr	r2, [pc, #476]	; (8007ef4 <HAL_DMA_IRQHandler+0xc88>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d031      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a76      	ldr	r2, [pc, #472]	; (8007ef8 <HAL_DMA_IRQHandler+0xc8c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d02c      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a74      	ldr	r2, [pc, #464]	; (8007efc <HAL_DMA_IRQHandler+0xc90>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d027      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a73      	ldr	r2, [pc, #460]	; (8007f00 <HAL_DMA_IRQHandler+0xc94>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d022      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a71      	ldr	r2, [pc, #452]	; (8007f04 <HAL_DMA_IRQHandler+0xc98>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d01d      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a70      	ldr	r2, [pc, #448]	; (8007f08 <HAL_DMA_IRQHandler+0xc9c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d018      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a6e      	ldr	r2, [pc, #440]	; (8007f0c <HAL_DMA_IRQHandler+0xca0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d013      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a6d      	ldr	r2, [pc, #436]	; (8007f10 <HAL_DMA_IRQHandler+0xca4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00e      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a6b      	ldr	r2, [pc, #428]	; (8007f14 <HAL_DMA_IRQHandler+0xca8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d009      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a6a      	ldr	r2, [pc, #424]	; (8007f18 <HAL_DMA_IRQHandler+0xcac>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d004      	beq.n	8007d7e <HAL_DMA_IRQHandler+0xb12>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a68      	ldr	r2, [pc, #416]	; (8007f1c <HAL_DMA_IRQHandler+0xcb0>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d108      	bne.n	8007d90 <HAL_DMA_IRQHandler+0xb24>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0208 	bic.w	r2, r2, #8
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	e007      	b.n	8007da0 <HAL_DMA_IRQHandler+0xb34>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0204 	bic.w	r2, r2, #4
 8007d9e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 8165 	beq.w	8008074 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007db2:	e15f      	b.n	8008074 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db8:	f003 031f 	and.w	r3, r3, #31
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	409a      	lsls	r2, r3
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 80c5 	beq.w	8007f54 <HAL_DMA_IRQHandler+0xce8>
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 80bf 	beq.w	8007f54 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dda:	f003 031f 	and.w	r3, r3, #31
 8007dde:	2202      	movs	r2, #2
 8007de0:	409a      	lsls	r2, r3
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d018      	beq.n	8007e22 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 813a 	beq.w	8008078 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e0c:	e134      	b.n	8008078 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 8130 	beq.w	8008078 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e20:	e12a      	b.n	8008078 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f040 8089 	bne.w	8007f40 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a2b      	ldr	r2, [pc, #172]	; (8007ee0 <HAL_DMA_IRQHandler+0xc74>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d04a      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a29      	ldr	r2, [pc, #164]	; (8007ee4 <HAL_DMA_IRQHandler+0xc78>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d045      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a28      	ldr	r2, [pc, #160]	; (8007ee8 <HAL_DMA_IRQHandler+0xc7c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d040      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a26      	ldr	r2, [pc, #152]	; (8007eec <HAL_DMA_IRQHandler+0xc80>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d03b      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a25      	ldr	r2, [pc, #148]	; (8007ef0 <HAL_DMA_IRQHandler+0xc84>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d036      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a23      	ldr	r2, [pc, #140]	; (8007ef4 <HAL_DMA_IRQHandler+0xc88>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d031      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a22      	ldr	r2, [pc, #136]	; (8007ef8 <HAL_DMA_IRQHandler+0xc8c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d02c      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a20      	ldr	r2, [pc, #128]	; (8007efc <HAL_DMA_IRQHandler+0xc90>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d027      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1f      	ldr	r2, [pc, #124]	; (8007f00 <HAL_DMA_IRQHandler+0xc94>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d022      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <HAL_DMA_IRQHandler+0xc98>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d01d      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a1c      	ldr	r2, [pc, #112]	; (8007f08 <HAL_DMA_IRQHandler+0xc9c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d018      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a1a      	ldr	r2, [pc, #104]	; (8007f0c <HAL_DMA_IRQHandler+0xca0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d013      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a19      	ldr	r2, [pc, #100]	; (8007f10 <HAL_DMA_IRQHandler+0xca4>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d00e      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a17      	ldr	r2, [pc, #92]	; (8007f14 <HAL_DMA_IRQHandler+0xca8>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d009      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a16      	ldr	r2, [pc, #88]	; (8007f18 <HAL_DMA_IRQHandler+0xcac>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d004      	beq.n	8007ece <HAL_DMA_IRQHandler+0xc62>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a14      	ldr	r2, [pc, #80]	; (8007f1c <HAL_DMA_IRQHandler+0xcb0>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d128      	bne.n	8007f20 <HAL_DMA_IRQHandler+0xcb4>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 0214 	bic.w	r2, r2, #20
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e027      	b.n	8007f30 <HAL_DMA_IRQHandler+0xcc4>
 8007ee0:	40020010 	.word	0x40020010
 8007ee4:	40020028 	.word	0x40020028
 8007ee8:	40020040 	.word	0x40020040
 8007eec:	40020058 	.word	0x40020058
 8007ef0:	40020070 	.word	0x40020070
 8007ef4:	40020088 	.word	0x40020088
 8007ef8:	400200a0 	.word	0x400200a0
 8007efc:	400200b8 	.word	0x400200b8
 8007f00:	40020410 	.word	0x40020410
 8007f04:	40020428 	.word	0x40020428
 8007f08:	40020440 	.word	0x40020440
 8007f0c:	40020458 	.word	0x40020458
 8007f10:	40020470 	.word	0x40020470
 8007f14:	40020488 	.word	0x40020488
 8007f18:	400204a0 	.word	0x400204a0
 8007f1c:	400204b8 	.word	0x400204b8
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 020a 	bic.w	r2, r2, #10
 8007f2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 8097 	beq.w	8008078 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f52:	e091      	b.n	8008078 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f58:	f003 031f 	and.w	r3, r3, #31
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	409a      	lsls	r2, r3
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	4013      	ands	r3, r2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 8088 	beq.w	800807a <HAL_DMA_IRQHandler+0xe0e>
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8082 	beq.w	800807a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a41      	ldr	r2, [pc, #260]	; (8008080 <HAL_DMA_IRQHandler+0xe14>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d04a      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a3f      	ldr	r2, [pc, #252]	; (8008084 <HAL_DMA_IRQHandler+0xe18>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d045      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a3e      	ldr	r2, [pc, #248]	; (8008088 <HAL_DMA_IRQHandler+0xe1c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d040      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a3c      	ldr	r2, [pc, #240]	; (800808c <HAL_DMA_IRQHandler+0xe20>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d03b      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a3b      	ldr	r2, [pc, #236]	; (8008090 <HAL_DMA_IRQHandler+0xe24>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d036      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a39      	ldr	r2, [pc, #228]	; (8008094 <HAL_DMA_IRQHandler+0xe28>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d031      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a38      	ldr	r2, [pc, #224]	; (8008098 <HAL_DMA_IRQHandler+0xe2c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d02c      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a36      	ldr	r2, [pc, #216]	; (800809c <HAL_DMA_IRQHandler+0xe30>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d027      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a35      	ldr	r2, [pc, #212]	; (80080a0 <HAL_DMA_IRQHandler+0xe34>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d022      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a33      	ldr	r2, [pc, #204]	; (80080a4 <HAL_DMA_IRQHandler+0xe38>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d01d      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a32      	ldr	r2, [pc, #200]	; (80080a8 <HAL_DMA_IRQHandler+0xe3c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d018      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a30      	ldr	r2, [pc, #192]	; (80080ac <HAL_DMA_IRQHandler+0xe40>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d013      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a2f      	ldr	r2, [pc, #188]	; (80080b0 <HAL_DMA_IRQHandler+0xe44>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00e      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a2d      	ldr	r2, [pc, #180]	; (80080b4 <HAL_DMA_IRQHandler+0xe48>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d009      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a2c      	ldr	r2, [pc, #176]	; (80080b8 <HAL_DMA_IRQHandler+0xe4c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d004      	beq.n	8008016 <HAL_DMA_IRQHandler+0xdaa>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a2a      	ldr	r2, [pc, #168]	; (80080bc <HAL_DMA_IRQHandler+0xe50>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d108      	bne.n	8008028 <HAL_DMA_IRQHandler+0xdbc>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 021c 	bic.w	r2, r2, #28
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e007      	b.n	8008038 <HAL_DMA_IRQHandler+0xdcc>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 020e 	bic.w	r2, r2, #14
 8008036:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803c:	f003 031f 	and.w	r3, r3, #31
 8008040:	2201      	movs	r2, #1
 8008042:	409a      	lsls	r2, r3
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d009      	beq.n	800807a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
 800806e:	e004      	b.n	800807a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008070:	bf00      	nop
 8008072:	e002      	b.n	800807a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008074:	bf00      	nop
 8008076:	e000      	b.n	800807a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008078:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800807a:	3728      	adds	r7, #40	; 0x28
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	40020010 	.word	0x40020010
 8008084:	40020028 	.word	0x40020028
 8008088:	40020040 	.word	0x40020040
 800808c:	40020058 	.word	0x40020058
 8008090:	40020070 	.word	0x40020070
 8008094:	40020088 	.word	0x40020088
 8008098:	400200a0 	.word	0x400200a0
 800809c:	400200b8 	.word	0x400200b8
 80080a0:	40020410 	.word	0x40020410
 80080a4:	40020428 	.word	0x40020428
 80080a8:	40020440 	.word	0x40020440
 80080ac:	40020458 	.word	0x40020458
 80080b0:	40020470 	.word	0x40020470
 80080b4:	40020488 	.word	0x40020488
 80080b8:	400204a0 	.word	0x400204a0
 80080bc:	400204b8 	.word	0x400204b8

080080c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a7f      	ldr	r2, [pc, #508]	; (80082dc <DMA_SetConfig+0x21c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d072      	beq.n	80081ca <DMA_SetConfig+0x10a>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a7d      	ldr	r2, [pc, #500]	; (80082e0 <DMA_SetConfig+0x220>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d06d      	beq.n	80081ca <DMA_SetConfig+0x10a>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a7c      	ldr	r2, [pc, #496]	; (80082e4 <DMA_SetConfig+0x224>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d068      	beq.n	80081ca <DMA_SetConfig+0x10a>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a7a      	ldr	r2, [pc, #488]	; (80082e8 <DMA_SetConfig+0x228>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d063      	beq.n	80081ca <DMA_SetConfig+0x10a>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a79      	ldr	r2, [pc, #484]	; (80082ec <DMA_SetConfig+0x22c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d05e      	beq.n	80081ca <DMA_SetConfig+0x10a>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a77      	ldr	r2, [pc, #476]	; (80082f0 <DMA_SetConfig+0x230>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d059      	beq.n	80081ca <DMA_SetConfig+0x10a>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a76      	ldr	r2, [pc, #472]	; (80082f4 <DMA_SetConfig+0x234>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d054      	beq.n	80081ca <DMA_SetConfig+0x10a>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a74      	ldr	r2, [pc, #464]	; (80082f8 <DMA_SetConfig+0x238>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d04f      	beq.n	80081ca <DMA_SetConfig+0x10a>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a73      	ldr	r2, [pc, #460]	; (80082fc <DMA_SetConfig+0x23c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d04a      	beq.n	80081ca <DMA_SetConfig+0x10a>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a71      	ldr	r2, [pc, #452]	; (8008300 <DMA_SetConfig+0x240>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d045      	beq.n	80081ca <DMA_SetConfig+0x10a>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a70      	ldr	r2, [pc, #448]	; (8008304 <DMA_SetConfig+0x244>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d040      	beq.n	80081ca <DMA_SetConfig+0x10a>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a6e      	ldr	r2, [pc, #440]	; (8008308 <DMA_SetConfig+0x248>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d03b      	beq.n	80081ca <DMA_SetConfig+0x10a>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a6d      	ldr	r2, [pc, #436]	; (800830c <DMA_SetConfig+0x24c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d036      	beq.n	80081ca <DMA_SetConfig+0x10a>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a6b      	ldr	r2, [pc, #428]	; (8008310 <DMA_SetConfig+0x250>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d031      	beq.n	80081ca <DMA_SetConfig+0x10a>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a6a      	ldr	r2, [pc, #424]	; (8008314 <DMA_SetConfig+0x254>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d02c      	beq.n	80081ca <DMA_SetConfig+0x10a>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a68      	ldr	r2, [pc, #416]	; (8008318 <DMA_SetConfig+0x258>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d027      	beq.n	80081ca <DMA_SetConfig+0x10a>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a67      	ldr	r2, [pc, #412]	; (800831c <DMA_SetConfig+0x25c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d022      	beq.n	80081ca <DMA_SetConfig+0x10a>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a65      	ldr	r2, [pc, #404]	; (8008320 <DMA_SetConfig+0x260>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d01d      	beq.n	80081ca <DMA_SetConfig+0x10a>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a64      	ldr	r2, [pc, #400]	; (8008324 <DMA_SetConfig+0x264>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d018      	beq.n	80081ca <DMA_SetConfig+0x10a>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a62      	ldr	r2, [pc, #392]	; (8008328 <DMA_SetConfig+0x268>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d013      	beq.n	80081ca <DMA_SetConfig+0x10a>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a61      	ldr	r2, [pc, #388]	; (800832c <DMA_SetConfig+0x26c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d00e      	beq.n	80081ca <DMA_SetConfig+0x10a>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a5f      	ldr	r2, [pc, #380]	; (8008330 <DMA_SetConfig+0x270>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d009      	beq.n	80081ca <DMA_SetConfig+0x10a>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a5e      	ldr	r2, [pc, #376]	; (8008334 <DMA_SetConfig+0x274>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d004      	beq.n	80081ca <DMA_SetConfig+0x10a>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a5c      	ldr	r2, [pc, #368]	; (8008338 <DMA_SetConfig+0x278>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d101      	bne.n	80081ce <DMA_SetConfig+0x10e>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e000      	b.n	80081d0 <DMA_SetConfig+0x110>
 80081ce:	2300      	movs	r3, #0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00d      	beq.n	80081f0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80081dc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d004      	beq.n	80081f0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80081ee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a39      	ldr	r2, [pc, #228]	; (80082dc <DMA_SetConfig+0x21c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d04a      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a38      	ldr	r2, [pc, #224]	; (80082e0 <DMA_SetConfig+0x220>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d045      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a36      	ldr	r2, [pc, #216]	; (80082e4 <DMA_SetConfig+0x224>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d040      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a35      	ldr	r2, [pc, #212]	; (80082e8 <DMA_SetConfig+0x228>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d03b      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a33      	ldr	r2, [pc, #204]	; (80082ec <DMA_SetConfig+0x22c>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d036      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a32      	ldr	r2, [pc, #200]	; (80082f0 <DMA_SetConfig+0x230>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d031      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a30      	ldr	r2, [pc, #192]	; (80082f4 <DMA_SetConfig+0x234>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d02c      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a2f      	ldr	r2, [pc, #188]	; (80082f8 <DMA_SetConfig+0x238>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d027      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a2d      	ldr	r2, [pc, #180]	; (80082fc <DMA_SetConfig+0x23c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d022      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a2c      	ldr	r2, [pc, #176]	; (8008300 <DMA_SetConfig+0x240>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d01d      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a2a      	ldr	r2, [pc, #168]	; (8008304 <DMA_SetConfig+0x244>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d018      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a29      	ldr	r2, [pc, #164]	; (8008308 <DMA_SetConfig+0x248>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d013      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a27      	ldr	r2, [pc, #156]	; (800830c <DMA_SetConfig+0x24c>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00e      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a26      	ldr	r2, [pc, #152]	; (8008310 <DMA_SetConfig+0x250>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d009      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a24      	ldr	r2, [pc, #144]	; (8008314 <DMA_SetConfig+0x254>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d004      	beq.n	8008290 <DMA_SetConfig+0x1d0>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a23      	ldr	r2, [pc, #140]	; (8008318 <DMA_SetConfig+0x258>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d101      	bne.n	8008294 <DMA_SetConfig+0x1d4>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <DMA_SetConfig+0x1d6>
 8008294:	2300      	movs	r3, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d059      	beq.n	800834e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	223f      	movs	r2, #63	; 0x3f
 80082a4:	409a      	lsls	r2, r3
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082b8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d138      	bne.n	800833c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80082da:	e086      	b.n	80083ea <DMA_SetConfig+0x32a>
 80082dc:	40020010 	.word	0x40020010
 80082e0:	40020028 	.word	0x40020028
 80082e4:	40020040 	.word	0x40020040
 80082e8:	40020058 	.word	0x40020058
 80082ec:	40020070 	.word	0x40020070
 80082f0:	40020088 	.word	0x40020088
 80082f4:	400200a0 	.word	0x400200a0
 80082f8:	400200b8 	.word	0x400200b8
 80082fc:	40020410 	.word	0x40020410
 8008300:	40020428 	.word	0x40020428
 8008304:	40020440 	.word	0x40020440
 8008308:	40020458 	.word	0x40020458
 800830c:	40020470 	.word	0x40020470
 8008310:	40020488 	.word	0x40020488
 8008314:	400204a0 	.word	0x400204a0
 8008318:	400204b8 	.word	0x400204b8
 800831c:	58025408 	.word	0x58025408
 8008320:	5802541c 	.word	0x5802541c
 8008324:	58025430 	.word	0x58025430
 8008328:	58025444 	.word	0x58025444
 800832c:	58025458 	.word	0x58025458
 8008330:	5802546c 	.word	0x5802546c
 8008334:	58025480 	.word	0x58025480
 8008338:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	60da      	str	r2, [r3, #12]
}
 800834c:	e04d      	b.n	80083ea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a29      	ldr	r2, [pc, #164]	; (80083f8 <DMA_SetConfig+0x338>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d022      	beq.n	800839e <DMA_SetConfig+0x2de>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a27      	ldr	r2, [pc, #156]	; (80083fc <DMA_SetConfig+0x33c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d01d      	beq.n	800839e <DMA_SetConfig+0x2de>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a26      	ldr	r2, [pc, #152]	; (8008400 <DMA_SetConfig+0x340>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d018      	beq.n	800839e <DMA_SetConfig+0x2de>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a24      	ldr	r2, [pc, #144]	; (8008404 <DMA_SetConfig+0x344>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d013      	beq.n	800839e <DMA_SetConfig+0x2de>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a23      	ldr	r2, [pc, #140]	; (8008408 <DMA_SetConfig+0x348>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00e      	beq.n	800839e <DMA_SetConfig+0x2de>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a21      	ldr	r2, [pc, #132]	; (800840c <DMA_SetConfig+0x34c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d009      	beq.n	800839e <DMA_SetConfig+0x2de>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a20      	ldr	r2, [pc, #128]	; (8008410 <DMA_SetConfig+0x350>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d004      	beq.n	800839e <DMA_SetConfig+0x2de>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a1e      	ldr	r2, [pc, #120]	; (8008414 <DMA_SetConfig+0x354>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d101      	bne.n	80083a2 <DMA_SetConfig+0x2e2>
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <DMA_SetConfig+0x2e4>
 80083a2:	2300      	movs	r3, #0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d020      	beq.n	80083ea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ac:	f003 031f 	and.w	r3, r3, #31
 80083b0:	2201      	movs	r2, #1
 80083b2:	409a      	lsls	r2, r3
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	2b40      	cmp	r3, #64	; 0x40
 80083c6:	d108      	bne.n	80083da <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	60da      	str	r2, [r3, #12]
}
 80083d8:	e007      	b.n	80083ea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	60da      	str	r2, [r3, #12]
}
 80083ea:	bf00      	nop
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	58025408 	.word	0x58025408
 80083fc:	5802541c 	.word	0x5802541c
 8008400:	58025430 	.word	0x58025430
 8008404:	58025444 	.word	0x58025444
 8008408:	58025458 	.word	0x58025458
 800840c:	5802546c 	.word	0x5802546c
 8008410:	58025480 	.word	0x58025480
 8008414:	58025494 	.word	0x58025494

08008418 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a42      	ldr	r2, [pc, #264]	; (8008530 <DMA_CalcBaseAndBitshift+0x118>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d04a      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a41      	ldr	r2, [pc, #260]	; (8008534 <DMA_CalcBaseAndBitshift+0x11c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d045      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a3f      	ldr	r2, [pc, #252]	; (8008538 <DMA_CalcBaseAndBitshift+0x120>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d040      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a3e      	ldr	r2, [pc, #248]	; (800853c <DMA_CalcBaseAndBitshift+0x124>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d03b      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a3c      	ldr	r2, [pc, #240]	; (8008540 <DMA_CalcBaseAndBitshift+0x128>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d036      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a3b      	ldr	r2, [pc, #236]	; (8008544 <DMA_CalcBaseAndBitshift+0x12c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d031      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a39      	ldr	r2, [pc, #228]	; (8008548 <DMA_CalcBaseAndBitshift+0x130>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d02c      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a38      	ldr	r2, [pc, #224]	; (800854c <DMA_CalcBaseAndBitshift+0x134>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d027      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a36      	ldr	r2, [pc, #216]	; (8008550 <DMA_CalcBaseAndBitshift+0x138>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d022      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a35      	ldr	r2, [pc, #212]	; (8008554 <DMA_CalcBaseAndBitshift+0x13c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d01d      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a33      	ldr	r2, [pc, #204]	; (8008558 <DMA_CalcBaseAndBitshift+0x140>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d018      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a32      	ldr	r2, [pc, #200]	; (800855c <DMA_CalcBaseAndBitshift+0x144>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d013      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a30      	ldr	r2, [pc, #192]	; (8008560 <DMA_CalcBaseAndBitshift+0x148>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d00e      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a2f      	ldr	r2, [pc, #188]	; (8008564 <DMA_CalcBaseAndBitshift+0x14c>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d009      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a2d      	ldr	r2, [pc, #180]	; (8008568 <DMA_CalcBaseAndBitshift+0x150>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d004      	beq.n	80084c0 <DMA_CalcBaseAndBitshift+0xa8>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a2c      	ldr	r2, [pc, #176]	; (800856c <DMA_CalcBaseAndBitshift+0x154>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d101      	bne.n	80084c4 <DMA_CalcBaseAndBitshift+0xac>
 80084c0:	2301      	movs	r3, #1
 80084c2:	e000      	b.n	80084c6 <DMA_CalcBaseAndBitshift+0xae>
 80084c4:	2300      	movs	r3, #0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d024      	beq.n	8008514 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	3b10      	subs	r3, #16
 80084d2:	4a27      	ldr	r2, [pc, #156]	; (8008570 <DMA_CalcBaseAndBitshift+0x158>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	091b      	lsrs	r3, r3, #4
 80084da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	4a24      	ldr	r2, [pc, #144]	; (8008574 <DMA_CalcBaseAndBitshift+0x15c>)
 80084e4:	5cd3      	ldrb	r3, [r2, r3]
 80084e6:	461a      	mov	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d908      	bls.n	8008504 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	4b1f      	ldr	r3, [pc, #124]	; (8008578 <DMA_CalcBaseAndBitshift+0x160>)
 80084fa:	4013      	ands	r3, r2
 80084fc:	1d1a      	adds	r2, r3, #4
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	659a      	str	r2, [r3, #88]	; 0x58
 8008502:	e00d      	b.n	8008520 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <DMA_CalcBaseAndBitshift+0x160>)
 800850c:	4013      	ands	r3, r2
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6593      	str	r3, [r2, #88]	; 0x58
 8008512:	e005      	b.n	8008520 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	40020010 	.word	0x40020010
 8008534:	40020028 	.word	0x40020028
 8008538:	40020040 	.word	0x40020040
 800853c:	40020058 	.word	0x40020058
 8008540:	40020070 	.word	0x40020070
 8008544:	40020088 	.word	0x40020088
 8008548:	400200a0 	.word	0x400200a0
 800854c:	400200b8 	.word	0x400200b8
 8008550:	40020410 	.word	0x40020410
 8008554:	40020428 	.word	0x40020428
 8008558:	40020440 	.word	0x40020440
 800855c:	40020458 	.word	0x40020458
 8008560:	40020470 	.word	0x40020470
 8008564:	40020488 	.word	0x40020488
 8008568:	400204a0 	.word	0x400204a0
 800856c:	400204b8 	.word	0x400204b8
 8008570:	aaaaaaab 	.word	0xaaaaaaab
 8008574:	08016f90 	.word	0x08016f90
 8008578:	fffffc00 	.word	0xfffffc00

0800857c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d120      	bne.n	80085d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	2b03      	cmp	r3, #3
 8008596:	d858      	bhi.n	800864a <DMA_CheckFifoParam+0xce>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <DMA_CheckFifoParam+0x24>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	080085c3 	.word	0x080085c3
 80085a8:	080085b1 	.word	0x080085b1
 80085ac:	0800864b 	.word	0x0800864b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d048      	beq.n	800864e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085c0:	e045      	b.n	800864e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085ca:	d142      	bne.n	8008652 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085d0:	e03f      	b.n	8008652 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085da:	d123      	bne.n	8008624 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d838      	bhi.n	8008656 <DMA_CheckFifoParam+0xda>
 80085e4:	a201      	add	r2, pc, #4	; (adr r2, 80085ec <DMA_CheckFifoParam+0x70>)
 80085e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ea:	bf00      	nop
 80085ec:	080085fd 	.word	0x080085fd
 80085f0:	08008603 	.word	0x08008603
 80085f4:	080085fd 	.word	0x080085fd
 80085f8:	08008615 	.word	0x08008615
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	73fb      	strb	r3, [r7, #15]
        break;
 8008600:	e030      	b.n	8008664 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d025      	beq.n	800865a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008612:	e022      	b.n	800865a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800861c:	d11f      	bne.n	800865e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008622:	e01c      	b.n	800865e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008628:	2b02      	cmp	r3, #2
 800862a:	d902      	bls.n	8008632 <DMA_CheckFifoParam+0xb6>
 800862c:	2b03      	cmp	r3, #3
 800862e:	d003      	beq.n	8008638 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008630:	e018      	b.n	8008664 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	73fb      	strb	r3, [r7, #15]
        break;
 8008636:	e015      	b.n	8008664 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00e      	beq.n	8008662 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	73fb      	strb	r3, [r7, #15]
    break;
 8008648:	e00b      	b.n	8008662 <DMA_CheckFifoParam+0xe6>
        break;
 800864a:	bf00      	nop
 800864c:	e00a      	b.n	8008664 <DMA_CheckFifoParam+0xe8>
        break;
 800864e:	bf00      	nop
 8008650:	e008      	b.n	8008664 <DMA_CheckFifoParam+0xe8>
        break;
 8008652:	bf00      	nop
 8008654:	e006      	b.n	8008664 <DMA_CheckFifoParam+0xe8>
        break;
 8008656:	bf00      	nop
 8008658:	e004      	b.n	8008664 <DMA_CheckFifoParam+0xe8>
        break;
 800865a:	bf00      	nop
 800865c:	e002      	b.n	8008664 <DMA_CheckFifoParam+0xe8>
        break;
 800865e:	bf00      	nop
 8008660:	e000      	b.n	8008664 <DMA_CheckFifoParam+0xe8>
    break;
 8008662:	bf00      	nop
    }
  }

  return status;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop

08008674 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a38      	ldr	r2, [pc, #224]	; (8008768 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d022      	beq.n	80086d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a36      	ldr	r2, [pc, #216]	; (800876c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d01d      	beq.n	80086d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a35      	ldr	r2, [pc, #212]	; (8008770 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d018      	beq.n	80086d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a33      	ldr	r2, [pc, #204]	; (8008774 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d013      	beq.n	80086d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a32      	ldr	r2, [pc, #200]	; (8008778 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00e      	beq.n	80086d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a30      	ldr	r2, [pc, #192]	; (800877c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d009      	beq.n	80086d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a2f      	ldr	r2, [pc, #188]	; (8008780 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d004      	beq.n	80086d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a2d      	ldr	r2, [pc, #180]	; (8008784 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d101      	bne.n	80086d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80086d6:	2300      	movs	r3, #0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01a      	beq.n	8008712 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	3b08      	subs	r3, #8
 80086e4:	4a28      	ldr	r2, [pc, #160]	; (8008788 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80086e6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ea:	091b      	lsrs	r3, r3, #4
 80086ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4b26      	ldr	r3, [pc, #152]	; (800878c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	461a      	mov	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a24      	ldr	r2, [pc, #144]	; (8008790 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008700:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f003 031f 	and.w	r3, r3, #31
 8008708:	2201      	movs	r2, #1
 800870a:	409a      	lsls	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008710:	e024      	b.n	800875c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	3b10      	subs	r3, #16
 800871a:	4a1e      	ldr	r2, [pc, #120]	; (8008794 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800871c:	fba2 2303 	umull	r2, r3, r2, r3
 8008720:	091b      	lsrs	r3, r3, #4
 8008722:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	4a1c      	ldr	r2, [pc, #112]	; (8008798 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d806      	bhi.n	800873a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	4a1b      	ldr	r2, [pc, #108]	; (800879c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d902      	bls.n	800873a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3308      	adds	r3, #8
 8008738:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4b18      	ldr	r3, [pc, #96]	; (80087a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	461a      	mov	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a16      	ldr	r2, [pc, #88]	; (80087a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800874c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f003 031f 	and.w	r3, r3, #31
 8008754:	2201      	movs	r2, #1
 8008756:	409a      	lsls	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800875c:	bf00      	nop
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	58025408 	.word	0x58025408
 800876c:	5802541c 	.word	0x5802541c
 8008770:	58025430 	.word	0x58025430
 8008774:	58025444 	.word	0x58025444
 8008778:	58025458 	.word	0x58025458
 800877c:	5802546c 	.word	0x5802546c
 8008780:	58025480 	.word	0x58025480
 8008784:	58025494 	.word	0x58025494
 8008788:	cccccccd 	.word	0xcccccccd
 800878c:	16009600 	.word	0x16009600
 8008790:	58025880 	.word	0x58025880
 8008794:	aaaaaaab 	.word	0xaaaaaaab
 8008798:	400204b8 	.word	0x400204b8
 800879c:	4002040f 	.word	0x4002040f
 80087a0:	10008200 	.word	0x10008200
 80087a4:	40020880 	.word	0x40020880

080087a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d04a      	beq.n	8008854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b08      	cmp	r3, #8
 80087c2:	d847      	bhi.n	8008854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a25      	ldr	r2, [pc, #148]	; (8008860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d022      	beq.n	8008814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a24      	ldr	r2, [pc, #144]	; (8008864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d01d      	beq.n	8008814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a22      	ldr	r2, [pc, #136]	; (8008868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d018      	beq.n	8008814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a21      	ldr	r2, [pc, #132]	; (800886c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d013      	beq.n	8008814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00e      	beq.n	8008814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a1e      	ldr	r2, [pc, #120]	; (8008874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d009      	beq.n	8008814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a1c      	ldr	r2, [pc, #112]	; (8008878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d004      	beq.n	8008814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a1b      	ldr	r2, [pc, #108]	; (800887c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d101      	bne.n	8008818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008818:	2300      	movs	r3, #0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4b17      	ldr	r3, [pc, #92]	; (8008880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008822:	4413      	add	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	461a      	mov	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a15      	ldr	r2, [pc, #84]	; (8008884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008830:	671a      	str	r2, [r3, #112]	; 0x70
 8008832:	e009      	b.n	8008848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	461a      	mov	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a11      	ldr	r2, [pc, #68]	; (800888c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008846:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3b01      	subs	r3, #1
 800884c:	2201      	movs	r2, #1
 800884e:	409a      	lsls	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008854:	bf00      	nop
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	58025408 	.word	0x58025408
 8008864:	5802541c 	.word	0x5802541c
 8008868:	58025430 	.word	0x58025430
 800886c:	58025444 	.word	0x58025444
 8008870:	58025458 	.word	0x58025458
 8008874:	5802546c 	.word	0x5802546c
 8008878:	58025480 	.word	0x58025480
 800887c:	58025494 	.word	0x58025494
 8008880:	1600963f 	.word	0x1600963f
 8008884:	58025940 	.word	0x58025940
 8008888:	1000823f 	.word	0x1000823f
 800888c:	40020940 	.word	0x40020940

08008890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008890:	b480      	push	{r7}
 8008892:	b089      	sub	sp, #36	; 0x24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800889a:	2300      	movs	r3, #0
 800889c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800889e:	4b89      	ldr	r3, [pc, #548]	; (8008ac4 <HAL_GPIO_Init+0x234>)
 80088a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088a2:	e194      	b.n	8008bce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	2101      	movs	r1, #1
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	fa01 f303 	lsl.w	r3, r1, r3
 80088b0:	4013      	ands	r3, r2
 80088b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 8186 	beq.w	8008bc8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f003 0303 	and.w	r3, r3, #3
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d005      	beq.n	80088d4 <HAL_GPIO_Init+0x44>
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d130      	bne.n	8008936 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	2203      	movs	r2, #3
 80088e0:	fa02 f303 	lsl.w	r3, r2, r3
 80088e4:	43db      	mvns	r3, r3
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	4013      	ands	r3, r2
 80088ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	68da      	ldr	r2, [r3, #12]
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800890a:	2201      	movs	r2, #1
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	fa02 f303 	lsl.w	r3, r2, r3
 8008912:	43db      	mvns	r3, r3
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	4013      	ands	r3, r2
 8008918:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	091b      	lsrs	r3, r3, #4
 8008920:	f003 0201 	and.w	r2, r3, #1
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	fa02 f303 	lsl.w	r3, r2, r3
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	4313      	orrs	r3, r2
 800892e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	2b03      	cmp	r3, #3
 8008940:	d017      	beq.n	8008972 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	2203      	movs	r2, #3
 800894e:	fa02 f303 	lsl.w	r3, r2, r3
 8008952:	43db      	mvns	r3, r3
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	4013      	ands	r3, r2
 8008958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	fa02 f303 	lsl.w	r3, r2, r3
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	4313      	orrs	r3, r2
 800896a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	2b02      	cmp	r3, #2
 800897c:	d123      	bne.n	80089c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	08da      	lsrs	r2, r3, #3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	3208      	adds	r2, #8
 8008986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	220f      	movs	r2, #15
 8008996:	fa02 f303 	lsl.w	r3, r2, r3
 800899a:	43db      	mvns	r3, r3
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	4013      	ands	r3, r2
 80089a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	691a      	ldr	r2, [r3, #16]
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	fa02 f303 	lsl.w	r3, r2, r3
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	08da      	lsrs	r2, r3, #3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3208      	adds	r2, #8
 80089c0:	69b9      	ldr	r1, [r7, #24]
 80089c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	2203      	movs	r2, #3
 80089d2:	fa02 f303 	lsl.w	r3, r2, r3
 80089d6:	43db      	mvns	r3, r3
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	4013      	ands	r3, r2
 80089dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f003 0203 	and.w	r2, r3, #3
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	fa02 f303 	lsl.w	r3, r2, r3
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80e0 	beq.w	8008bc8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a08:	4b2f      	ldr	r3, [pc, #188]	; (8008ac8 <HAL_GPIO_Init+0x238>)
 8008a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a0e:	4a2e      	ldr	r2, [pc, #184]	; (8008ac8 <HAL_GPIO_Init+0x238>)
 8008a10:	f043 0302 	orr.w	r3, r3, #2
 8008a14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008a18:	4b2b      	ldr	r3, [pc, #172]	; (8008ac8 <HAL_GPIO_Init+0x238>)
 8008a1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a26:	4a29      	ldr	r2, [pc, #164]	; (8008acc <HAL_GPIO_Init+0x23c>)
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	089b      	lsrs	r3, r3, #2
 8008a2c:	3302      	adds	r3, #2
 8008a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	220f      	movs	r2, #15
 8008a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a42:	43db      	mvns	r3, r3
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	4013      	ands	r3, r2
 8008a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a20      	ldr	r2, [pc, #128]	; (8008ad0 <HAL_GPIO_Init+0x240>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d052      	beq.n	8008af8 <HAL_GPIO_Init+0x268>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a1f      	ldr	r2, [pc, #124]	; (8008ad4 <HAL_GPIO_Init+0x244>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d031      	beq.n	8008abe <HAL_GPIO_Init+0x22e>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a1e      	ldr	r2, [pc, #120]	; (8008ad8 <HAL_GPIO_Init+0x248>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d02b      	beq.n	8008aba <HAL_GPIO_Init+0x22a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a1d      	ldr	r2, [pc, #116]	; (8008adc <HAL_GPIO_Init+0x24c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d025      	beq.n	8008ab6 <HAL_GPIO_Init+0x226>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ae0 <HAL_GPIO_Init+0x250>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d01f      	beq.n	8008ab2 <HAL_GPIO_Init+0x222>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a1b      	ldr	r2, [pc, #108]	; (8008ae4 <HAL_GPIO_Init+0x254>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d019      	beq.n	8008aae <HAL_GPIO_Init+0x21e>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a1a      	ldr	r2, [pc, #104]	; (8008ae8 <HAL_GPIO_Init+0x258>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d013      	beq.n	8008aaa <HAL_GPIO_Init+0x21a>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a19      	ldr	r2, [pc, #100]	; (8008aec <HAL_GPIO_Init+0x25c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d00d      	beq.n	8008aa6 <HAL_GPIO_Init+0x216>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a18      	ldr	r2, [pc, #96]	; (8008af0 <HAL_GPIO_Init+0x260>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d007      	beq.n	8008aa2 <HAL_GPIO_Init+0x212>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a17      	ldr	r2, [pc, #92]	; (8008af4 <HAL_GPIO_Init+0x264>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d101      	bne.n	8008a9e <HAL_GPIO_Init+0x20e>
 8008a9a:	2309      	movs	r3, #9
 8008a9c:	e02d      	b.n	8008afa <HAL_GPIO_Init+0x26a>
 8008a9e:	230a      	movs	r3, #10
 8008aa0:	e02b      	b.n	8008afa <HAL_GPIO_Init+0x26a>
 8008aa2:	2308      	movs	r3, #8
 8008aa4:	e029      	b.n	8008afa <HAL_GPIO_Init+0x26a>
 8008aa6:	2307      	movs	r3, #7
 8008aa8:	e027      	b.n	8008afa <HAL_GPIO_Init+0x26a>
 8008aaa:	2306      	movs	r3, #6
 8008aac:	e025      	b.n	8008afa <HAL_GPIO_Init+0x26a>
 8008aae:	2305      	movs	r3, #5
 8008ab0:	e023      	b.n	8008afa <HAL_GPIO_Init+0x26a>
 8008ab2:	2304      	movs	r3, #4
 8008ab4:	e021      	b.n	8008afa <HAL_GPIO_Init+0x26a>
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e01f      	b.n	8008afa <HAL_GPIO_Init+0x26a>
 8008aba:	2302      	movs	r3, #2
 8008abc:	e01d      	b.n	8008afa <HAL_GPIO_Init+0x26a>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e01b      	b.n	8008afa <HAL_GPIO_Init+0x26a>
 8008ac2:	bf00      	nop
 8008ac4:	58000080 	.word	0x58000080
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	58000400 	.word	0x58000400
 8008ad0:	58020000 	.word	0x58020000
 8008ad4:	58020400 	.word	0x58020400
 8008ad8:	58020800 	.word	0x58020800
 8008adc:	58020c00 	.word	0x58020c00
 8008ae0:	58021000 	.word	0x58021000
 8008ae4:	58021400 	.word	0x58021400
 8008ae8:	58021800 	.word	0x58021800
 8008aec:	58021c00 	.word	0x58021c00
 8008af0:	58022000 	.word	0x58022000
 8008af4:	58022400 	.word	0x58022400
 8008af8:	2300      	movs	r3, #0
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	f002 0203 	and.w	r2, r2, #3
 8008b00:	0092      	lsls	r2, r2, #2
 8008b02:	4093      	lsls	r3, r2
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b0a:	4938      	ldr	r1, [pc, #224]	; (8008bec <HAL_GPIO_Init+0x35c>)
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	089b      	lsrs	r3, r3, #2
 8008b10:	3302      	adds	r3, #2
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	43db      	mvns	r3, r3
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	4013      	ands	r3, r2
 8008b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	43db      	mvns	r3, r3
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	4013      	ands	r3, r2
 8008b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	43db      	mvns	r3, r3
 8008b7e:	69ba      	ldr	r2, [r7, #24]
 8008b80:	4013      	ands	r3, r2
 8008b82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d003      	beq.n	8008b98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	43db      	mvns	r3, r3
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	4013      	ands	r3, r2
 8008bac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f47f ae63 	bne.w	80088a4 <HAL_GPIO_Init+0x14>
  }
}
 8008bde:	bf00      	nop
 8008be0:	bf00      	nop
 8008be2:	3724      	adds	r7, #36	; 0x24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	58000400 	.word	0x58000400

08008bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	887b      	ldrh	r3, [r7, #2]
 8008c02:	4013      	ands	r3, r2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	73fb      	strb	r3, [r7, #15]
 8008c0c:	e001      	b.n	8008c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	807b      	strh	r3, [r7, #2]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c30:	787b      	ldrb	r3, [r7, #1]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c36:	887a      	ldrh	r2, [r7, #2]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008c3c:	e003      	b.n	8008c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c3e:	887b      	ldrh	r3, [r7, #2]
 8008c40:	041a      	lsls	r2, r3, #16
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	619a      	str	r2, [r3, #24]
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
	...

08008c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e08b      	b.n	8008d7e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d106      	bne.n	8008c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fa f8fe 	bl	8002e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2224      	movs	r2, #36	; 0x24
 8008c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0201 	bic.w	r2, r2, #1
 8008c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d107      	bne.n	8008cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	689a      	ldr	r2, [r3, #8]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cca:	609a      	str	r2, [r3, #8]
 8008ccc:	e006      	b.n	8008cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d108      	bne.n	8008cf6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cf2:	605a      	str	r2, [r3, #4]
 8008cf4:	e007      	b.n	8008d06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6859      	ldr	r1, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	4b1d      	ldr	r3, [pc, #116]	; (8008d88 <HAL_I2C_Init+0x134>)
 8008d12:	430b      	orrs	r3, r1
 8008d14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	691a      	ldr	r2, [r3, #16]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	69d9      	ldr	r1, [r3, #28]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1a      	ldr	r2, [r3, #32]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	02008000 	.word	0x02008000

08008d8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	607a      	str	r2, [r7, #4]
 8008d96:	461a      	mov	r2, r3
 8008d98:	460b      	mov	r3, r1
 8008d9a:	817b      	strh	r3, [r7, #10]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b20      	cmp	r3, #32
 8008daa:	f040 80fd 	bne.w	8008fa8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d101      	bne.n	8008dbc <HAL_I2C_Master_Transmit+0x30>
 8008db8:	2302      	movs	r3, #2
 8008dba:	e0f6      	b.n	8008faa <HAL_I2C_Master_Transmit+0x21e>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008dc4:	f7fa fe00 	bl	80039c8 <HAL_GetTick>
 8008dc8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	2319      	movs	r3, #25
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 fa0a 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e0e1      	b.n	8008faa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2221      	movs	r2, #33	; 0x21
 8008dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2210      	movs	r2, #16
 8008df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	893a      	ldrh	r2, [r7, #8]
 8008e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	2bff      	cmp	r3, #255	; 0xff
 8008e16:	d906      	bls.n	8008e26 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	22ff      	movs	r2, #255	; 0xff
 8008e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008e1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	e007      	b.n	8008e36 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e34:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d024      	beq.n	8008e88 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	781a      	ldrb	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e66:	3b01      	subs	r3, #1
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	3301      	adds	r3, #1
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	8979      	ldrh	r1, [r7, #10]
 8008e7a:	4b4e      	ldr	r3, [pc, #312]	; (8008fb4 <HAL_I2C_Master_Transmit+0x228>)
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 fc05 	bl	8009690 <I2C_TransferConfig>
 8008e86:	e066      	b.n	8008f56 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	8979      	ldrh	r1, [r7, #10]
 8008e90:	4b48      	ldr	r3, [pc, #288]	; (8008fb4 <HAL_I2C_Master_Transmit+0x228>)
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 fbfa 	bl	8009690 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008e9c:	e05b      	b.n	8008f56 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	6a39      	ldr	r1, [r7, #32]
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f9fd 	bl	80092a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e07b      	b.n	8008faa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	781a      	ldrb	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eda:	3b01      	subs	r3, #1
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d034      	beq.n	8008f56 <HAL_I2C_Master_Transmit+0x1ca>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d130      	bne.n	8008f56 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	2200      	movs	r2, #0
 8008efc:	2180      	movs	r1, #128	; 0x80
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 f976 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e04d      	b.n	8008faa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	2bff      	cmp	r3, #255	; 0xff
 8008f16:	d90e      	bls.n	8008f36 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	22ff      	movs	r2, #255	; 0xff
 8008f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	8979      	ldrh	r1, [r7, #10]
 8008f26:	2300      	movs	r3, #0
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 fbae 	bl	8009690 <I2C_TransferConfig>
 8008f34:	e00f      	b.n	8008f56 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	8979      	ldrh	r1, [r7, #10]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 fb9d 	bl	8009690 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d19e      	bne.n	8008e9e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	6a39      	ldr	r1, [r7, #32]
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f9e3 	bl	8009330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e01a      	b.n	8008faa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2220      	movs	r2, #32
 8008f7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6859      	ldr	r1, [r3, #4]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <HAL_I2C_Master_Transmit+0x22c>)
 8008f88:	400b      	ands	r3, r1
 8008f8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	e000      	b.n	8008faa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008fa8:	2302      	movs	r3, #2
  }
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	80002000 	.word	0x80002000
 8008fb8:	fe00e800 	.word	0xfe00e800

08008fbc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	607a      	str	r2, [r7, #4]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	460b      	mov	r3, r1
 8008fca:	817b      	strh	r3, [r7, #10]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	f040 80db 	bne.w	8009194 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_I2C_Master_Receive+0x30>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e0d4      	b.n	8009196 <HAL_I2C_Master_Receive+0x1da>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ff4:	f7fa fce8 	bl	80039c8 <HAL_GetTick>
 8008ff8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	2319      	movs	r3, #25
 8009000:	2201      	movs	r2, #1
 8009002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 f8f2 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e0bf      	b.n	8009196 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2222      	movs	r2, #34	; 0x22
 800901a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2210      	movs	r2, #16
 8009022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	893a      	ldrh	r2, [r7, #8]
 8009036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009042:	b29b      	uxth	r3, r3
 8009044:	2bff      	cmp	r3, #255	; 0xff
 8009046:	d90e      	bls.n	8009066 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	22ff      	movs	r2, #255	; 0xff
 800904c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009052:	b2da      	uxtb	r2, r3
 8009054:	8979      	ldrh	r1, [r7, #10]
 8009056:	4b52      	ldr	r3, [pc, #328]	; (80091a0 <HAL_I2C_Master_Receive+0x1e4>)
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fb16 	bl	8009690 <I2C_TransferConfig>
 8009064:	e06d      	b.n	8009142 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009074:	b2da      	uxtb	r2, r3
 8009076:	8979      	ldrh	r1, [r7, #10]
 8009078:	4b49      	ldr	r3, [pc, #292]	; (80091a0 <HAL_I2C_Master_Receive+0x1e4>)
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 fb05 	bl	8009690 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009086:	e05c      	b.n	8009142 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	6a39      	ldr	r1, [r7, #32]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 f993 	bl	80093b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e07c      	b.n	8009196 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b01      	subs	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d034      	beq.n	8009142 <HAL_I2C_Master_Receive+0x186>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d130      	bne.n	8009142 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	2200      	movs	r2, #0
 80090e8:	2180      	movs	r1, #128	; 0x80
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 f880 	bl	80091f0 <I2C_WaitOnFlagUntilTimeout>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e04d      	b.n	8009196 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fe:	b29b      	uxth	r3, r3
 8009100:	2bff      	cmp	r3, #255	; 0xff
 8009102:	d90e      	bls.n	8009122 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	22ff      	movs	r2, #255	; 0xff
 8009108:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910e:	b2da      	uxtb	r2, r3
 8009110:	8979      	ldrh	r1, [r7, #10]
 8009112:	2300      	movs	r3, #0
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 fab8 	bl	8009690 <I2C_TransferConfig>
 8009120:	e00f      	b.n	8009142 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009126:	b29a      	uxth	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009130:	b2da      	uxtb	r2, r3
 8009132:	8979      	ldrh	r1, [r7, #10]
 8009134:	2300      	movs	r3, #0
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 faa7 	bl	8009690 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009146:	b29b      	uxth	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d19d      	bne.n	8009088 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	6a39      	ldr	r1, [r7, #32]
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 f8ed 	bl	8009330 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e01a      	b.n	8009196 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2220      	movs	r2, #32
 8009166:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6859      	ldr	r1, [r3, #4]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <HAL_I2C_Master_Receive+0x1e8>)
 8009174:	400b      	ands	r3, r1
 8009176:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2220      	movs	r2, #32
 800917c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	e000      	b.n	8009196 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009194:	2302      	movs	r3, #2
  }
}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	80002400 	.word	0x80002400
 80091a4:	fe00e800 	.word	0xfe00e800

080091a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d103      	bne.n	80091c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2200      	movs	r2, #0
 80091c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d007      	beq.n	80091e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0201 	orr.w	r2, r2, #1
 80091e2:	619a      	str	r2, [r3, #24]
  }
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	603b      	str	r3, [r7, #0]
 80091fc:	4613      	mov	r3, r2
 80091fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009200:	e03b      	b.n	800927a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 f962 	bl	80094d0 <I2C_IsErrorOccurred>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e041      	b.n	800929a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800921c:	d02d      	beq.n	800927a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800921e:	f7fa fbd3 	bl	80039c8 <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d302      	bcc.n	8009234 <I2C_WaitOnFlagUntilTimeout+0x44>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d122      	bne.n	800927a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	699a      	ldr	r2, [r3, #24]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	4013      	ands	r3, r2
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	429a      	cmp	r2, r3
 8009242:	bf0c      	ite	eq
 8009244:	2301      	moveq	r3, #1
 8009246:	2300      	movne	r3, #0
 8009248:	b2db      	uxtb	r3, r3
 800924a:	461a      	mov	r2, r3
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	429a      	cmp	r2, r3
 8009250:	d113      	bne.n	800927a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009256:	f043 0220 	orr.w	r2, r3, #32
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2220      	movs	r2, #32
 8009262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e00f      	b.n	800929a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	699a      	ldr	r2, [r3, #24]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	4013      	ands	r3, r2
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	429a      	cmp	r2, r3
 8009288:	bf0c      	ite	eq
 800928a:	2301      	moveq	r3, #1
 800928c:	2300      	movne	r3, #0
 800928e:	b2db      	uxtb	r3, r3
 8009290:	461a      	mov	r2, r3
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	429a      	cmp	r2, r3
 8009296:	d0b4      	beq.n	8009202 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80092ae:	e033      	b.n	8009318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f90b 	bl	80094d0 <I2C_IsErrorOccurred>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e031      	b.n	8009328 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092ca:	d025      	beq.n	8009318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092cc:	f7fa fb7c 	bl	80039c8 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d302      	bcc.n	80092e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d11a      	bne.n	8009318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d013      	beq.n	8009318 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f4:	f043 0220 	orr.w	r2, r3, #32
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e007      	b.n	8009328 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b02      	cmp	r3, #2
 8009324:	d1c4      	bne.n	80092b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800933c:	e02f      	b.n	800939e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 f8c4 	bl	80094d0 <I2C_IsErrorOccurred>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e02d      	b.n	80093ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009352:	f7fa fb39 	bl	80039c8 <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	429a      	cmp	r2, r3
 8009360:	d302      	bcc.n	8009368 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d11a      	bne.n	800939e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	f003 0320 	and.w	r3, r3, #32
 8009372:	2b20      	cmp	r3, #32
 8009374:	d013      	beq.n	800939e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937a:	f043 0220 	orr.w	r2, r3, #32
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2220      	movs	r2, #32
 8009386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e007      	b.n	80093ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	f003 0320 	and.w	r3, r3, #32
 80093a8:	2b20      	cmp	r3, #32
 80093aa:	d1c8      	bne.n	800933e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80093c8:	e071      	b.n	80094ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 f87e 	bl	80094d0 <I2C_IsErrorOccurred>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	f003 0320 	and.w	r3, r3, #32
 80093e8:	2b20      	cmp	r3, #32
 80093ea:	d13b      	bne.n	8009464 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80093ec:	7dfb      	ldrb	r3, [r7, #23]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d138      	bne.n	8009464 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	f003 0304 	and.w	r3, r3, #4
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d105      	bne.n	800940c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	f003 0310 	and.w	r3, r3, #16
 8009416:	2b10      	cmp	r3, #16
 8009418:	d121      	bne.n	800945e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2210      	movs	r2, #16
 8009420:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2204      	movs	r2, #4
 8009426:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2220      	movs	r2, #32
 800942e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6859      	ldr	r1, [r3, #4]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b24      	ldr	r3, [pc, #144]	; (80094cc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800943c:	400b      	ands	r3, r1
 800943e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2220      	movs	r2, #32
 8009444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	75fb      	strb	r3, [r7, #23]
 800945c:	e002      	b.n	8009464 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009464:	f7fa fab0 	bl	80039c8 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	429a      	cmp	r2, r3
 8009472:	d302      	bcc.n	800947a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d119      	bne.n	80094ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d116      	bne.n	80094ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	f003 0304 	and.w	r3, r3, #4
 800948a:	2b04      	cmp	r3, #4
 800948c:	d00f      	beq.n	80094ae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009492:	f043 0220 	orr.w	r2, r3, #32
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2220      	movs	r2, #32
 800949e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b04      	cmp	r3, #4
 80094ba:	d002      	beq.n	80094c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d083      	beq.n	80093ca <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3718      	adds	r7, #24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	fe00e800 	.word	0xfe00e800

080094d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08a      	sub	sp, #40	; 0x28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	f003 0310 	and.w	r3, r3, #16
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d068      	beq.n	80095ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2210      	movs	r2, #16
 8009502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009504:	e049      	b.n	800959a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800950c:	d045      	beq.n	800959a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800950e:	f7fa fa5b 	bl	80039c8 <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	429a      	cmp	r2, r3
 800951c:	d302      	bcc.n	8009524 <I2C_IsErrorOccurred+0x54>
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d13a      	bne.n	800959a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800952e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009546:	d121      	bne.n	800958c <I2C_IsErrorOccurred+0xbc>
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800954e:	d01d      	beq.n	800958c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009550:	7cfb      	ldrb	r3, [r7, #19]
 8009552:	2b20      	cmp	r3, #32
 8009554:	d01a      	beq.n	800958c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009564:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009566:	f7fa fa2f 	bl	80039c8 <HAL_GetTick>
 800956a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800956c:	e00e      	b.n	800958c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800956e:	f7fa fa2b 	bl	80039c8 <HAL_GetTick>
 8009572:	4602      	mov	r2, r0
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	2b19      	cmp	r3, #25
 800957a:	d907      	bls.n	800958c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	f043 0320 	orr.w	r3, r3, #32
 8009582:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800958a:	e006      	b.n	800959a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b20      	cmp	r3, #32
 8009598:	d1e9      	bne.n	800956e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	d003      	beq.n	80095b0 <I2C_IsErrorOccurred+0xe0>
 80095a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0aa      	beq.n	8009506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80095b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d103      	bne.n	80095c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2220      	movs	r2, #32
 80095be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	f043 0304 	orr.w	r3, r3, #4
 80095c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00b      	beq.n	80095f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	f043 0301 	orr.w	r3, r3, #1
 80095e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00b      	beq.n	800961a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	f043 0308 	orr.w	r3, r3, #8
 8009608:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00b      	beq.n	800963c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	f043 0302 	orr.w	r3, r3, #2
 800962a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800963c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01c      	beq.n	800967e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff fdaf 	bl	80091a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6859      	ldr	r1, [r3, #4]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	4b0d      	ldr	r3, [pc, #52]	; (800968c <I2C_IsErrorOccurred+0x1bc>)
 8009656:	400b      	ands	r3, r1
 8009658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	431a      	orrs	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2220      	movs	r2, #32
 800966a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800967e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009682:	4618      	mov	r0, r3
 8009684:	3728      	adds	r7, #40	; 0x28
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	fe00e800 	.word	0xfe00e800

08009690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009690:	b480      	push	{r7}
 8009692:	b087      	sub	sp, #28
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	607b      	str	r3, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	817b      	strh	r3, [r7, #10]
 800969e:	4613      	mov	r3, r2
 80096a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096a2:	897b      	ldrh	r3, [r7, #10]
 80096a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096a8:	7a7b      	ldrb	r3, [r7, #9]
 80096aa:	041b      	lsls	r3, r3, #16
 80096ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	0d5b      	lsrs	r3, r3, #21
 80096ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80096ce:	4b08      	ldr	r3, [pc, #32]	; (80096f0 <I2C_TransferConfig+0x60>)
 80096d0:	430b      	orrs	r3, r1
 80096d2:	43db      	mvns	r3, r3
 80096d4:	ea02 0103 	and.w	r1, r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	430a      	orrs	r2, r1
 80096e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80096e2:	bf00      	nop
 80096e4:	371c      	adds	r7, #28
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	03ff63ff 	.word	0x03ff63ff

080096f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b20      	cmp	r3, #32
 8009708:	d138      	bne.n	800977c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009710:	2b01      	cmp	r3, #1
 8009712:	d101      	bne.n	8009718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009714:	2302      	movs	r3, #2
 8009716:	e032      	b.n	800977e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2224      	movs	r2, #36	; 0x24
 8009724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0201 	bic.w	r2, r2, #1
 8009736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6819      	ldr	r1, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0201 	orr.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2220      	movs	r2, #32
 800976c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	e000      	b.n	800977e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800977c:	2302      	movs	r3, #2
  }
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800978a:	b480      	push	{r7}
 800978c:	b085      	sub	sp, #20
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b20      	cmp	r3, #32
 800979e:	d139      	bne.n	8009814 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097aa:	2302      	movs	r3, #2
 80097ac:	e033      	b.n	8009816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2224      	movs	r2, #36	; 0x24
 80097ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0201 	bic.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80097dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	021b      	lsls	r3, r3, #8
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f042 0201 	orr.w	r2, r2, #1
 80097fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2220      	movs	r2, #32
 8009804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	e000      	b.n	8009816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009814:	2302      	movs	r3, #2
  }
}
 8009816:	4618      	mov	r0, r3
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
	...

08009824 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800982c:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800982e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009832:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009834:	f043 0302 	orr.w	r3, r3, #2
 8009838:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800983e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800984a:	4b07      	ldr	r3, [pc, #28]	; (8009868 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	4906      	ldr	r1, [pc, #24]	; (8009868 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4313      	orrs	r3, r2
 8009854:	604b      	str	r3, [r1, #4]
}
 8009856:	bf00      	nop
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	58024400 	.word	0x58024400
 8009868:	58000400 	.word	0x58000400

0800986c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009874:	4b19      	ldr	r3, [pc, #100]	; (80098dc <HAL_PWREx_ConfigSupply+0x70>)
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	f003 0304 	and.w	r3, r3, #4
 800987c:	2b04      	cmp	r3, #4
 800987e:	d00a      	beq.n	8009896 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009880:	4b16      	ldr	r3, [pc, #88]	; (80098dc <HAL_PWREx_ConfigSupply+0x70>)
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f003 0307 	and.w	r3, r3, #7
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	429a      	cmp	r2, r3
 800988c:	d001      	beq.n	8009892 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e01f      	b.n	80098d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	e01d      	b.n	80098d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009896:	4b11      	ldr	r3, [pc, #68]	; (80098dc <HAL_PWREx_ConfigSupply+0x70>)
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	f023 0207 	bic.w	r2, r3, #7
 800989e:	490f      	ldr	r1, [pc, #60]	; (80098dc <HAL_PWREx_ConfigSupply+0x70>)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80098a6:	f7fa f88f 	bl	80039c8 <HAL_GetTick>
 80098aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80098ac:	e009      	b.n	80098c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80098ae:	f7fa f88b 	bl	80039c8 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098bc:	d901      	bls.n	80098c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e007      	b.n	80098d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80098c2:	4b06      	ldr	r3, [pc, #24]	; (80098dc <HAL_PWREx_ConfigSupply+0x70>)
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ce:	d1ee      	bne.n	80098ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	58024800 	.word	0x58024800

080098e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08c      	sub	sp, #48	; 0x30
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d102      	bne.n	80098f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f000 bc48 	b.w	800a184 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 8088 	beq.w	8009a12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009902:	4b99      	ldr	r3, [pc, #612]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800990a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800990c:	4b96      	ldr	r3, [pc, #600]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 800990e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009910:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009914:	2b10      	cmp	r3, #16
 8009916:	d007      	beq.n	8009928 <HAL_RCC_OscConfig+0x48>
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	2b18      	cmp	r3, #24
 800991c:	d111      	bne.n	8009942 <HAL_RCC_OscConfig+0x62>
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	f003 0303 	and.w	r3, r3, #3
 8009924:	2b02      	cmp	r3, #2
 8009926:	d10c      	bne.n	8009942 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009928:	4b8f      	ldr	r3, [pc, #572]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d06d      	beq.n	8009a10 <HAL_RCC_OscConfig+0x130>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d169      	bne.n	8009a10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	f000 bc21 	b.w	800a184 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800994a:	d106      	bne.n	800995a <HAL_RCC_OscConfig+0x7a>
 800994c:	4b86      	ldr	r3, [pc, #536]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a85      	ldr	r2, [pc, #532]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	e02e      	b.n	80099b8 <HAL_RCC_OscConfig+0xd8>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10c      	bne.n	800997c <HAL_RCC_OscConfig+0x9c>
 8009962:	4b81      	ldr	r3, [pc, #516]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a80      	ldr	r2, [pc, #512]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	4b7e      	ldr	r3, [pc, #504]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a7d      	ldr	r2, [pc, #500]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	e01d      	b.n	80099b8 <HAL_RCC_OscConfig+0xd8>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009984:	d10c      	bne.n	80099a0 <HAL_RCC_OscConfig+0xc0>
 8009986:	4b78      	ldr	r3, [pc, #480]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a77      	ldr	r2, [pc, #476]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 800998c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	4b75      	ldr	r3, [pc, #468]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a74      	ldr	r2, [pc, #464]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	e00b      	b.n	80099b8 <HAL_RCC_OscConfig+0xd8>
 80099a0:	4b71      	ldr	r3, [pc, #452]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a70      	ldr	r2, [pc, #448]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 80099a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	4b6e      	ldr	r3, [pc, #440]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a6d      	ldr	r2, [pc, #436]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 80099b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d013      	beq.n	80099e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c0:	f7fa f802 	bl	80039c8 <HAL_GetTick>
 80099c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099c6:	e008      	b.n	80099da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099c8:	f7f9 fffe 	bl	80039c8 <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	2b64      	cmp	r3, #100	; 0x64
 80099d4:	d901      	bls.n	80099da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e3d4      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099da:	4b63      	ldr	r3, [pc, #396]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0f0      	beq.n	80099c8 <HAL_RCC_OscConfig+0xe8>
 80099e6:	e014      	b.n	8009a12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e8:	f7f9 ffee 	bl	80039c8 <HAL_GetTick>
 80099ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099f0:	f7f9 ffea 	bl	80039c8 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b64      	cmp	r3, #100	; 0x64
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e3c0      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a02:	4b59      	ldr	r3, [pc, #356]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f0      	bne.n	80099f0 <HAL_RCC_OscConfig+0x110>
 8009a0e:	e000      	b.n	8009a12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 80ca 	beq.w	8009bb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a20:	4b51      	ldr	r3, [pc, #324]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a2a:	4b4f      	ldr	r3, [pc, #316]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <HAL_RCC_OscConfig+0x166>
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	2b18      	cmp	r3, #24
 8009a3a:	d156      	bne.n	8009aea <HAL_RCC_OscConfig+0x20a>
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d151      	bne.n	8009aea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a46:	4b48      	ldr	r3, [pc, #288]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0304 	and.w	r3, r3, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <HAL_RCC_OscConfig+0x17e>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e392      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a5e:	4b42      	ldr	r3, [pc, #264]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f023 0219 	bic.w	r2, r3, #25
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	493f      	ldr	r1, [pc, #252]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a70:	f7f9 ffaa 	bl	80039c8 <HAL_GetTick>
 8009a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a76:	e008      	b.n	8009a8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a78:	f7f9 ffa6 	bl	80039c8 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d901      	bls.n	8009a8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009a86:	2303      	movs	r3, #3
 8009a88:	e37c      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a8a:	4b37      	ldr	r3, [pc, #220]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d0f0      	beq.n	8009a78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a96:	f7f9 ffa3 	bl	80039e0 <HAL_GetREVID>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d817      	bhi.n	8009ad4 <HAL_RCC_OscConfig+0x1f4>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	2b40      	cmp	r3, #64	; 0x40
 8009aaa:	d108      	bne.n	8009abe <HAL_RCC_OscConfig+0x1de>
 8009aac:	4b2e      	ldr	r3, [pc, #184]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009ab4:	4a2c      	ldr	r2, [pc, #176]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009abc:	e07a      	b.n	8009bb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009abe:	4b2a      	ldr	r3, [pc, #168]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	031b      	lsls	r3, r3, #12
 8009acc:	4926      	ldr	r1, [pc, #152]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ad2:	e06f      	b.n	8009bb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ad4:	4b24      	ldr	r3, [pc, #144]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	061b      	lsls	r3, r3, #24
 8009ae2:	4921      	ldr	r1, [pc, #132]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ae8:	e064      	b.n	8009bb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d047      	beq.n	8009b82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009af2:	4b1d      	ldr	r3, [pc, #116]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f023 0219 	bic.w	r2, r3, #25
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	491a      	ldr	r1, [pc, #104]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009b00:	4313      	orrs	r3, r2
 8009b02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b04:	f7f9 ff60 	bl	80039c8 <HAL_GetTick>
 8009b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b0a:	e008      	b.n	8009b1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b0c:	f7f9 ff5c 	bl	80039c8 <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d901      	bls.n	8009b1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e332      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b1e:	4b12      	ldr	r3, [pc, #72]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0304 	and.w	r3, r3, #4
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0f0      	beq.n	8009b0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b2a:	f7f9 ff59 	bl	80039e0 <HAL_GetREVID>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d819      	bhi.n	8009b6c <HAL_RCC_OscConfig+0x28c>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	2b40      	cmp	r3, #64	; 0x40
 8009b3e:	d108      	bne.n	8009b52 <HAL_RCC_OscConfig+0x272>
 8009b40:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009b48:	4a07      	ldr	r2, [pc, #28]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b4e:	6053      	str	r3, [r2, #4]
 8009b50:	e030      	b.n	8009bb4 <HAL_RCC_OscConfig+0x2d4>
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	031b      	lsls	r3, r3, #12
 8009b60:	4901      	ldr	r1, [pc, #4]	; (8009b68 <HAL_RCC_OscConfig+0x288>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	604b      	str	r3, [r1, #4]
 8009b66:	e025      	b.n	8009bb4 <HAL_RCC_OscConfig+0x2d4>
 8009b68:	58024400 	.word	0x58024400
 8009b6c:	4b9a      	ldr	r3, [pc, #616]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	061b      	lsls	r3, r3, #24
 8009b7a:	4997      	ldr	r1, [pc, #604]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	604b      	str	r3, [r1, #4]
 8009b80:	e018      	b.n	8009bb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b82:	4b95      	ldr	r3, [pc, #596]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a94      	ldr	r2, [pc, #592]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009b88:	f023 0301 	bic.w	r3, r3, #1
 8009b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b8e:	f7f9 ff1b 	bl	80039c8 <HAL_GetTick>
 8009b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b94:	e008      	b.n	8009ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b96:	f7f9 ff17 	bl	80039c8 <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d901      	bls.n	8009ba8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e2ed      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ba8:	4b8b      	ldr	r3, [pc, #556]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1f0      	bne.n	8009b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 0310 	and.w	r3, r3, #16
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 80a9 	beq.w	8009d14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bc2:	4b85      	ldr	r3, [pc, #532]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bcc:	4b82      	ldr	r3, [pc, #520]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d007      	beq.n	8009be8 <HAL_RCC_OscConfig+0x308>
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	2b18      	cmp	r3, #24
 8009bdc:	d13a      	bne.n	8009c54 <HAL_RCC_OscConfig+0x374>
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f003 0303 	and.w	r3, r3, #3
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d135      	bne.n	8009c54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009be8:	4b7b      	ldr	r3, [pc, #492]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d005      	beq.n	8009c00 <HAL_RCC_OscConfig+0x320>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	2b80      	cmp	r3, #128	; 0x80
 8009bfa:	d001      	beq.n	8009c00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e2c1      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c00:	f7f9 feee 	bl	80039e0 <HAL_GetREVID>
 8009c04:	4603      	mov	r3, r0
 8009c06:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d817      	bhi.n	8009c3e <HAL_RCC_OscConfig+0x35e>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	d108      	bne.n	8009c28 <HAL_RCC_OscConfig+0x348>
 8009c16:	4b70      	ldr	r3, [pc, #448]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c1e:	4a6e      	ldr	r2, [pc, #440]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c26:	e075      	b.n	8009d14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c28:	4b6b      	ldr	r3, [pc, #428]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a1b      	ldr	r3, [r3, #32]
 8009c34:	069b      	lsls	r3, r3, #26
 8009c36:	4968      	ldr	r1, [pc, #416]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c3c:	e06a      	b.n	8009d14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c3e:	4b66      	ldr	r3, [pc, #408]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	061b      	lsls	r3, r3, #24
 8009c4c:	4962      	ldr	r1, [pc, #392]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c52:	e05f      	b.n	8009d14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d042      	beq.n	8009ce2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009c5c:	4b5e      	ldr	r3, [pc, #376]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a5d      	ldr	r2, [pc, #372]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c68:	f7f9 feae 	bl	80039c8 <HAL_GetTick>
 8009c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c6e:	e008      	b.n	8009c82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c70:	f7f9 feaa 	bl	80039c8 <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d901      	bls.n	8009c82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e280      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c82:	4b55      	ldr	r3, [pc, #340]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0f0      	beq.n	8009c70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c8e:	f7f9 fea7 	bl	80039e0 <HAL_GetREVID>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d817      	bhi.n	8009ccc <HAL_RCC_OscConfig+0x3ec>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	2b20      	cmp	r3, #32
 8009ca2:	d108      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x3d6>
 8009ca4:	4b4c      	ldr	r3, [pc, #304]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009cac:	4a4a      	ldr	r2, [pc, #296]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cb2:	6053      	str	r3, [r2, #4]
 8009cb4:	e02e      	b.n	8009d14 <HAL_RCC_OscConfig+0x434>
 8009cb6:	4b48      	ldr	r3, [pc, #288]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	069b      	lsls	r3, r3, #26
 8009cc4:	4944      	ldr	r1, [pc, #272]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	604b      	str	r3, [r1, #4]
 8009cca:	e023      	b.n	8009d14 <HAL_RCC_OscConfig+0x434>
 8009ccc:	4b42      	ldr	r3, [pc, #264]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a1b      	ldr	r3, [r3, #32]
 8009cd8:	061b      	lsls	r3, r3, #24
 8009cda:	493f      	ldr	r1, [pc, #252]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	60cb      	str	r3, [r1, #12]
 8009ce0:	e018      	b.n	8009d14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009ce2:	4b3d      	ldr	r3, [pc, #244]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a3c      	ldr	r2, [pc, #240]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cee:	f7f9 fe6b 	bl	80039c8 <HAL_GetTick>
 8009cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009cf4:	e008      	b.n	8009d08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cf6:	f7f9 fe67 	bl	80039c8 <HAL_GetTick>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d901      	bls.n	8009d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e23d      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d08:	4b33      	ldr	r3, [pc, #204]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1f0      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0308 	and.w	r3, r3, #8
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d036      	beq.n	8009d8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	695b      	ldr	r3, [r3, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d019      	beq.n	8009d5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d28:	4b2b      	ldr	r3, [pc, #172]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d2c:	4a2a      	ldr	r2, [pc, #168]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009d2e:	f043 0301 	orr.w	r3, r3, #1
 8009d32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d34:	f7f9 fe48 	bl	80039c8 <HAL_GetTick>
 8009d38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d3a:	e008      	b.n	8009d4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d3c:	f7f9 fe44 	bl	80039c8 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d901      	bls.n	8009d4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e21a      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d4e:	4b22      	ldr	r3, [pc, #136]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d0f0      	beq.n	8009d3c <HAL_RCC_OscConfig+0x45c>
 8009d5a:	e018      	b.n	8009d8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d5c:	4b1e      	ldr	r3, [pc, #120]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d60:	4a1d      	ldr	r2, [pc, #116]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009d62:	f023 0301 	bic.w	r3, r3, #1
 8009d66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d68:	f7f9 fe2e 	bl	80039c8 <HAL_GetTick>
 8009d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d6e:	e008      	b.n	8009d82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d70:	f7f9 fe2a 	bl	80039c8 <HAL_GetTick>
 8009d74:	4602      	mov	r2, r0
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d901      	bls.n	8009d82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e200      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d82:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d86:	f003 0302 	and.w	r3, r3, #2
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1f0      	bne.n	8009d70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d039      	beq.n	8009e0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d01c      	beq.n	8009ddc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009da2:	4b0d      	ldr	r3, [pc, #52]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a0c      	ldr	r2, [pc, #48]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009dac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009dae:	f7f9 fe0b 	bl	80039c8 <HAL_GetTick>
 8009db2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009db4:	e008      	b.n	8009dc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009db6:	f7f9 fe07 	bl	80039c8 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d901      	bls.n	8009dc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e1dd      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009dc8:	4b03      	ldr	r3, [pc, #12]	; (8009dd8 <HAL_RCC_OscConfig+0x4f8>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d0f0      	beq.n	8009db6 <HAL_RCC_OscConfig+0x4d6>
 8009dd4:	e01b      	b.n	8009e0e <HAL_RCC_OscConfig+0x52e>
 8009dd6:	bf00      	nop
 8009dd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009ddc:	4b9b      	ldr	r3, [pc, #620]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a9a      	ldr	r2, [pc, #616]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009de6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009de8:	f7f9 fdee 	bl	80039c8 <HAL_GetTick>
 8009dec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009dee:	e008      	b.n	8009e02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009df0:	f7f9 fdea 	bl	80039c8 <HAL_GetTick>
 8009df4:	4602      	mov	r2, r0
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d901      	bls.n	8009e02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e1c0      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e02:	4b92      	ldr	r3, [pc, #584]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1f0      	bne.n	8009df0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 8081 	beq.w	8009f1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e1c:	4b8c      	ldr	r3, [pc, #560]	; (800a050 <HAL_RCC_OscConfig+0x770>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a8b      	ldr	r2, [pc, #556]	; (800a050 <HAL_RCC_OscConfig+0x770>)
 8009e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e28:	f7f9 fdce 	bl	80039c8 <HAL_GetTick>
 8009e2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e2e:	e008      	b.n	8009e42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e30:	f7f9 fdca 	bl	80039c8 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b64      	cmp	r3, #100	; 0x64
 8009e3c:	d901      	bls.n	8009e42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e1a0      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e42:	4b83      	ldr	r3, [pc, #524]	; (800a050 <HAL_RCC_OscConfig+0x770>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0f0      	beq.n	8009e30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d106      	bne.n	8009e64 <HAL_RCC_OscConfig+0x584>
 8009e56:	4b7d      	ldr	r3, [pc, #500]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e5a:	4a7c      	ldr	r2, [pc, #496]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009e5c:	f043 0301 	orr.w	r3, r3, #1
 8009e60:	6713      	str	r3, [r2, #112]	; 0x70
 8009e62:	e02d      	b.n	8009ec0 <HAL_RCC_OscConfig+0x5e0>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10c      	bne.n	8009e86 <HAL_RCC_OscConfig+0x5a6>
 8009e6c:	4b77      	ldr	r3, [pc, #476]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e70:	4a76      	ldr	r2, [pc, #472]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009e72:	f023 0301 	bic.w	r3, r3, #1
 8009e76:	6713      	str	r3, [r2, #112]	; 0x70
 8009e78:	4b74      	ldr	r3, [pc, #464]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e7c:	4a73      	ldr	r2, [pc, #460]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009e7e:	f023 0304 	bic.w	r3, r3, #4
 8009e82:	6713      	str	r3, [r2, #112]	; 0x70
 8009e84:	e01c      	b.n	8009ec0 <HAL_RCC_OscConfig+0x5e0>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	2b05      	cmp	r3, #5
 8009e8c:	d10c      	bne.n	8009ea8 <HAL_RCC_OscConfig+0x5c8>
 8009e8e:	4b6f      	ldr	r3, [pc, #444]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e92:	4a6e      	ldr	r2, [pc, #440]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009e94:	f043 0304 	orr.w	r3, r3, #4
 8009e98:	6713      	str	r3, [r2, #112]	; 0x70
 8009e9a:	4b6c      	ldr	r3, [pc, #432]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e9e:	4a6b      	ldr	r2, [pc, #428]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009ea0:	f043 0301 	orr.w	r3, r3, #1
 8009ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ea6:	e00b      	b.n	8009ec0 <HAL_RCC_OscConfig+0x5e0>
 8009ea8:	4b68      	ldr	r3, [pc, #416]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eac:	4a67      	ldr	r2, [pc, #412]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009eae:	f023 0301 	bic.w	r3, r3, #1
 8009eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8009eb4:	4b65      	ldr	r3, [pc, #404]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb8:	4a64      	ldr	r2, [pc, #400]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009eba:	f023 0304 	bic.w	r3, r3, #4
 8009ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d015      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ec8:	f7f9 fd7e 	bl	80039c8 <HAL_GetTick>
 8009ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ece:	e00a      	b.n	8009ee6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ed0:	f7f9 fd7a 	bl	80039c8 <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d901      	bls.n	8009ee6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e14e      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ee6:	4b59      	ldr	r3, [pc, #356]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eea:	f003 0302 	and.w	r3, r3, #2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0ee      	beq.n	8009ed0 <HAL_RCC_OscConfig+0x5f0>
 8009ef2:	e014      	b.n	8009f1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ef4:	f7f9 fd68 	bl	80039c8 <HAL_GetTick>
 8009ef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009efa:	e00a      	b.n	8009f12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009efc:	f7f9 fd64 	bl	80039c8 <HAL_GetTick>
 8009f00:	4602      	mov	r2, r0
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d901      	bls.n	8009f12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e138      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f12:	4b4e      	ldr	r3, [pc, #312]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1ee      	bne.n	8009efc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 812d 	beq.w	800a182 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009f28:	4b48      	ldr	r3, [pc, #288]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f30:	2b18      	cmp	r3, #24
 8009f32:	f000 80bd 	beq.w	800a0b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	f040 809e 	bne.w	800a07c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f40:	4b42      	ldr	r3, [pc, #264]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a41      	ldr	r2, [pc, #260]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4c:	f7f9 fd3c 	bl	80039c8 <HAL_GetTick>
 8009f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f52:	e008      	b.n	8009f66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f54:	f7f9 fd38 	bl	80039c8 <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d901      	bls.n	8009f66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e10e      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f66:	4b39      	ldr	r3, [pc, #228]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1f0      	bne.n	8009f54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f72:	4b36      	ldr	r3, [pc, #216]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f76:	4b37      	ldr	r3, [pc, #220]	; (800a054 <HAL_RCC_OscConfig+0x774>)
 8009f78:	4013      	ands	r3, r2
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009f82:	0112      	lsls	r2, r2, #4
 8009f84:	430a      	orrs	r2, r1
 8009f86:	4931      	ldr	r1, [pc, #196]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	628b      	str	r3, [r1, #40]	; 0x28
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f90:	3b01      	subs	r3, #1
 8009f92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	025b      	lsls	r3, r3, #9
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	431a      	orrs	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	041b      	lsls	r3, r3, #16
 8009faa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fae:	431a      	orrs	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	061b      	lsls	r3, r3, #24
 8009fb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fbc:	4923      	ldr	r1, [pc, #140]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009fc2:	4b22      	ldr	r3, [pc, #136]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	4a21      	ldr	r2, [pc, #132]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009fc8:	f023 0301 	bic.w	r3, r3, #1
 8009fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009fce:	4b1f      	ldr	r3, [pc, #124]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fd2:	4b21      	ldr	r3, [pc, #132]	; (800a058 <HAL_RCC_OscConfig+0x778>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009fda:	00d2      	lsls	r2, r2, #3
 8009fdc:	491b      	ldr	r1, [pc, #108]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009fe2:	4b1a      	ldr	r3, [pc, #104]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	f023 020c 	bic.w	r2, r3, #12
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fee:	4917      	ldr	r1, [pc, #92]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ff4:	4b15      	ldr	r3, [pc, #84]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	f023 0202 	bic.w	r2, r3, #2
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a000:	4912      	ldr	r1, [pc, #72]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a002:	4313      	orrs	r3, r2
 800a004:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a006:	4b11      	ldr	r3, [pc, #68]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	4a10      	ldr	r2, [pc, #64]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a00c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a012:	4b0e      	ldr	r3, [pc, #56]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a016:	4a0d      	ldr	r2, [pc, #52]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a01c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a01e:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a022:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a02a:	4b08      	ldr	r3, [pc, #32]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02e:	4a07      	ldr	r2, [pc, #28]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a030:	f043 0301 	orr.w	r3, r3, #1
 800a034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a036:	4b05      	ldr	r3, [pc, #20]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a04      	ldr	r2, [pc, #16]	; (800a04c <HAL_RCC_OscConfig+0x76c>)
 800a03c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a042:	f7f9 fcc1 	bl	80039c8 <HAL_GetTick>
 800a046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a048:	e011      	b.n	800a06e <HAL_RCC_OscConfig+0x78e>
 800a04a:	bf00      	nop
 800a04c:	58024400 	.word	0x58024400
 800a050:	58024800 	.word	0x58024800
 800a054:	fffffc0c 	.word	0xfffffc0c
 800a058:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a05c:	f7f9 fcb4 	bl	80039c8 <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	2b02      	cmp	r3, #2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e08a      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a06e:	4b47      	ldr	r3, [pc, #284]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0f0      	beq.n	800a05c <HAL_RCC_OscConfig+0x77c>
 800a07a:	e082      	b.n	800a182 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a07c:	4b43      	ldr	r3, [pc, #268]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a42      	ldr	r2, [pc, #264]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a088:	f7f9 fc9e 	bl	80039c8 <HAL_GetTick>
 800a08c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a08e:	e008      	b.n	800a0a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a090:	f7f9 fc9a 	bl	80039c8 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d901      	bls.n	800a0a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e070      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0a2:	4b3a      	ldr	r3, [pc, #232]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1f0      	bne.n	800a090 <HAL_RCC_OscConfig+0x7b0>
 800a0ae:	e068      	b.n	800a182 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a0b0:	4b36      	ldr	r3, [pc, #216]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a0b6:	4b35      	ldr	r3, [pc, #212]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d031      	beq.n	800a128 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f003 0203 	and.w	r2, r3, #3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d12a      	bne.n	800a128 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	091b      	lsrs	r3, r3, #4
 800a0d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d122      	bne.n	800a128 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d11a      	bne.n	800a128 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	0a5b      	lsrs	r3, r3, #9
 800a0f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a100:	429a      	cmp	r2, r3
 800a102:	d111      	bne.n	800a128 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	0c1b      	lsrs	r3, r3, #16
 800a108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a110:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a112:	429a      	cmp	r2, r3
 800a114:	d108      	bne.n	800a128 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	0e1b      	lsrs	r3, r3, #24
 800a11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a122:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a124:	429a      	cmp	r2, r3
 800a126:	d001      	beq.n	800a12c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e02b      	b.n	800a184 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a12c:	4b17      	ldr	r3, [pc, #92]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a130:	08db      	lsrs	r3, r3, #3
 800a132:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a136:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d01f      	beq.n	800a182 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a142:	4b12      	ldr	r3, [pc, #72]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	4a11      	ldr	r2, [pc, #68]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a148:	f023 0301 	bic.w	r3, r3, #1
 800a14c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a14e:	f7f9 fc3b 	bl	80039c8 <HAL_GetTick>
 800a152:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a154:	bf00      	nop
 800a156:	f7f9 fc37 	bl	80039c8 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	4293      	cmp	r3, r2
 800a160:	d0f9      	beq.n	800a156 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a162:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a166:	4b0a      	ldr	r3, [pc, #40]	; (800a190 <HAL_RCC_OscConfig+0x8b0>)
 800a168:	4013      	ands	r3, r2
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a16e:	00d2      	lsls	r2, r2, #3
 800a170:	4906      	ldr	r1, [pc, #24]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a172:	4313      	orrs	r3, r2
 800a174:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	4a04      	ldr	r2, [pc, #16]	; (800a18c <HAL_RCC_OscConfig+0x8ac>)
 800a17c:	f043 0301 	orr.w	r3, r3, #1
 800a180:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3730      	adds	r7, #48	; 0x30
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	58024400 	.word	0x58024400
 800a190:	ffff0007 	.word	0xffff0007

0800a194 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e19c      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a1a8:	4b8a      	ldr	r3, [pc, #552]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 030f 	and.w	r3, r3, #15
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d910      	bls.n	800a1d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1b6:	4b87      	ldr	r3, [pc, #540]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f023 020f 	bic.w	r2, r3, #15
 800a1be:	4985      	ldr	r1, [pc, #532]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1c6:	4b83      	ldr	r3, [pc, #524]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 030f 	and.w	r3, r3, #15
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d001      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e184      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d010      	beq.n	800a206 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	691a      	ldr	r2, [r3, #16]
 800a1e8:	4b7b      	ldr	r3, [pc, #492]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d908      	bls.n	800a206 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1f4:	4b78      	ldr	r3, [pc, #480]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	4975      	ldr	r1, [pc, #468]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a202:	4313      	orrs	r3, r2
 800a204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0308 	and.w	r3, r3, #8
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d010      	beq.n	800a234 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	695a      	ldr	r2, [r3, #20]
 800a216:	4b70      	ldr	r3, [pc, #448]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a21e:	429a      	cmp	r2, r3
 800a220:	d908      	bls.n	800a234 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a222:	4b6d      	ldr	r3, [pc, #436]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	496a      	ldr	r1, [pc, #424]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a230:	4313      	orrs	r3, r2
 800a232:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0310 	and.w	r3, r3, #16
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d010      	beq.n	800a262 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	699a      	ldr	r2, [r3, #24]
 800a244:	4b64      	ldr	r3, [pc, #400]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a246:	69db      	ldr	r3, [r3, #28]
 800a248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d908      	bls.n	800a262 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a250:	4b61      	ldr	r3, [pc, #388]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	495e      	ldr	r1, [pc, #376]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0320 	and.w	r3, r3, #32
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d010      	beq.n	800a290 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	69da      	ldr	r2, [r3, #28]
 800a272:	4b59      	ldr	r3, [pc, #356]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d908      	bls.n	800a290 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a27e:	4b56      	ldr	r3, [pc, #344]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	4953      	ldr	r1, [pc, #332]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a28c:	4313      	orrs	r3, r2
 800a28e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0302 	and.w	r3, r3, #2
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d010      	beq.n	800a2be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68da      	ldr	r2, [r3, #12]
 800a2a0:	4b4d      	ldr	r3, [pc, #308]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d908      	bls.n	800a2be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2ac:	4b4a      	ldr	r3, [pc, #296]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	f023 020f 	bic.w	r2, r3, #15
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	4947      	ldr	r1, [pc, #284]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d055      	beq.n	800a376 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a2ca:	4b43      	ldr	r3, [pc, #268]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	4940      	ldr	r1, [pc, #256]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d107      	bne.n	800a2f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2e4:	4b3c      	ldr	r3, [pc, #240]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d121      	bne.n	800a334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e0f6      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d107      	bne.n	800a30c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a2fc:	4b36      	ldr	r3, [pc, #216]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d115      	bne.n	800a334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e0ea      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d107      	bne.n	800a324 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a314:	4b30      	ldr	r3, [pc, #192]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d109      	bne.n	800a334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e0de      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a324:	4b2c      	ldr	r3, [pc, #176]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0304 	and.w	r3, r3, #4
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e0d6      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a334:	4b28      	ldr	r3, [pc, #160]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	f023 0207 	bic.w	r2, r3, #7
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	4925      	ldr	r1, [pc, #148]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a342:	4313      	orrs	r3, r2
 800a344:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a346:	f7f9 fb3f 	bl	80039c8 <HAL_GetTick>
 800a34a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a34c:	e00a      	b.n	800a364 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a34e:	f7f9 fb3b 	bl	80039c8 <HAL_GetTick>
 800a352:	4602      	mov	r2, r0
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	1ad3      	subs	r3, r2, r3
 800a358:	f241 3288 	movw	r2, #5000	; 0x1388
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d901      	bls.n	800a364 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	e0be      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a364:	4b1c      	ldr	r3, [pc, #112]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	429a      	cmp	r2, r3
 800a374:	d1eb      	bne.n	800a34e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d010      	beq.n	800a3a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	4b14      	ldr	r3, [pc, #80]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	f003 030f 	and.w	r3, r3, #15
 800a38e:	429a      	cmp	r2, r3
 800a390:	d208      	bcs.n	800a3a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a392:	4b11      	ldr	r3, [pc, #68]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	f023 020f 	bic.w	r2, r3, #15
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	490e      	ldr	r1, [pc, #56]	; (800a3d8 <HAL_RCC_ClockConfig+0x244>)
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3a4:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 030f 	and.w	r3, r3, #15
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d214      	bcs.n	800a3dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3b2:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f023 020f 	bic.w	r2, r3, #15
 800a3ba:	4906      	ldr	r1, [pc, #24]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3c2:	4b04      	ldr	r3, [pc, #16]	; (800a3d4 <HAL_RCC_ClockConfig+0x240>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 030f 	and.w	r3, r3, #15
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d005      	beq.n	800a3dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e086      	b.n	800a4e2 <HAL_RCC_ClockConfig+0x34e>
 800a3d4:	52002000 	.word	0x52002000
 800a3d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0304 	and.w	r3, r3, #4
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d010      	beq.n	800a40a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	4b3f      	ldr	r3, [pc, #252]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d208      	bcs.n	800a40a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3f8:	4b3c      	ldr	r3, [pc, #240]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	4939      	ldr	r1, [pc, #228]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a406:	4313      	orrs	r3, r2
 800a408:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0308 	and.w	r3, r3, #8
 800a412:	2b00      	cmp	r3, #0
 800a414:	d010      	beq.n	800a438 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695a      	ldr	r2, [r3, #20]
 800a41a:	4b34      	ldr	r3, [pc, #208]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a422:	429a      	cmp	r2, r3
 800a424:	d208      	bcs.n	800a438 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a426:	4b31      	ldr	r3, [pc, #196]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	492e      	ldr	r1, [pc, #184]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a434:	4313      	orrs	r3, r2
 800a436:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0310 	and.w	r3, r3, #16
 800a440:	2b00      	cmp	r3, #0
 800a442:	d010      	beq.n	800a466 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	699a      	ldr	r2, [r3, #24]
 800a448:	4b28      	ldr	r3, [pc, #160]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a450:	429a      	cmp	r2, r3
 800a452:	d208      	bcs.n	800a466 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a454:	4b25      	ldr	r3, [pc, #148]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	4922      	ldr	r1, [pc, #136]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a462:	4313      	orrs	r3, r2
 800a464:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0320 	and.w	r3, r3, #32
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d010      	beq.n	800a494 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69da      	ldr	r2, [r3, #28]
 800a476:	4b1d      	ldr	r3, [pc, #116]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a47e:	429a      	cmp	r2, r3
 800a480:	d208      	bcs.n	800a494 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a482:	4b1a      	ldr	r3, [pc, #104]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	4917      	ldr	r1, [pc, #92]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a490:	4313      	orrs	r3, r2
 800a492:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a494:	f000 f834 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800a498:	4602      	mov	r2, r0
 800a49a:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	0a1b      	lsrs	r3, r3, #8
 800a4a0:	f003 030f 	and.w	r3, r3, #15
 800a4a4:	4912      	ldr	r1, [pc, #72]	; (800a4f0 <HAL_RCC_ClockConfig+0x35c>)
 800a4a6:	5ccb      	ldrb	r3, [r1, r3]
 800a4a8:	f003 031f 	and.w	r3, r3, #31
 800a4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4b2:	4b0e      	ldr	r3, [pc, #56]	; (800a4ec <HAL_RCC_ClockConfig+0x358>)
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	f003 030f 	and.w	r3, r3, #15
 800a4ba:	4a0d      	ldr	r2, [pc, #52]	; (800a4f0 <HAL_RCC_ClockConfig+0x35c>)
 800a4bc:	5cd3      	ldrb	r3, [r2, r3]
 800a4be:	f003 031f 	and.w	r3, r3, #31
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c8:	4a0a      	ldr	r2, [pc, #40]	; (800a4f4 <HAL_RCC_ClockConfig+0x360>)
 800a4ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a4cc:	4a0a      	ldr	r2, [pc, #40]	; (800a4f8 <HAL_RCC_ClockConfig+0x364>)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <HAL_RCC_ClockConfig+0x368>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7f8 ffa4 	bl	8003424 <HAL_InitTick>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3718      	adds	r7, #24
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	58024400 	.word	0x58024400
 800a4f0:	08016f80 	.word	0x08016f80
 800a4f4:	24000094 	.word	0x24000094
 800a4f8:	24000090 	.word	0x24000090
 800a4fc:	24000098 	.word	0x24000098

0800a500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a500:	b480      	push	{r7}
 800a502:	b089      	sub	sp, #36	; 0x24
 800a504:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a506:	4bb3      	ldr	r3, [pc, #716]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a50e:	2b18      	cmp	r3, #24
 800a510:	f200 8155 	bhi.w	800a7be <HAL_RCC_GetSysClockFreq+0x2be>
 800a514:	a201      	add	r2, pc, #4	; (adr r2, 800a51c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51a:	bf00      	nop
 800a51c:	0800a581 	.word	0x0800a581
 800a520:	0800a7bf 	.word	0x0800a7bf
 800a524:	0800a7bf 	.word	0x0800a7bf
 800a528:	0800a7bf 	.word	0x0800a7bf
 800a52c:	0800a7bf 	.word	0x0800a7bf
 800a530:	0800a7bf 	.word	0x0800a7bf
 800a534:	0800a7bf 	.word	0x0800a7bf
 800a538:	0800a7bf 	.word	0x0800a7bf
 800a53c:	0800a5a7 	.word	0x0800a5a7
 800a540:	0800a7bf 	.word	0x0800a7bf
 800a544:	0800a7bf 	.word	0x0800a7bf
 800a548:	0800a7bf 	.word	0x0800a7bf
 800a54c:	0800a7bf 	.word	0x0800a7bf
 800a550:	0800a7bf 	.word	0x0800a7bf
 800a554:	0800a7bf 	.word	0x0800a7bf
 800a558:	0800a7bf 	.word	0x0800a7bf
 800a55c:	0800a5ad 	.word	0x0800a5ad
 800a560:	0800a7bf 	.word	0x0800a7bf
 800a564:	0800a7bf 	.word	0x0800a7bf
 800a568:	0800a7bf 	.word	0x0800a7bf
 800a56c:	0800a7bf 	.word	0x0800a7bf
 800a570:	0800a7bf 	.word	0x0800a7bf
 800a574:	0800a7bf 	.word	0x0800a7bf
 800a578:	0800a7bf 	.word	0x0800a7bf
 800a57c:	0800a5b3 	.word	0x0800a5b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a580:	4b94      	ldr	r3, [pc, #592]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 0320 	and.w	r3, r3, #32
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d009      	beq.n	800a5a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a58c:	4b91      	ldr	r3, [pc, #580]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	08db      	lsrs	r3, r3, #3
 800a592:	f003 0303 	and.w	r3, r3, #3
 800a596:	4a90      	ldr	r2, [pc, #576]	; (800a7d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a598:	fa22 f303 	lsr.w	r3, r2, r3
 800a59c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a59e:	e111      	b.n	800a7c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a5a0:	4b8d      	ldr	r3, [pc, #564]	; (800a7d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5a2:	61bb      	str	r3, [r7, #24]
      break;
 800a5a4:	e10e      	b.n	800a7c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a5a6:	4b8d      	ldr	r3, [pc, #564]	; (800a7dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a5a8:	61bb      	str	r3, [r7, #24]
      break;
 800a5aa:	e10b      	b.n	800a7c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a5ac:	4b8c      	ldr	r3, [pc, #560]	; (800a7e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a5ae:	61bb      	str	r3, [r7, #24]
      break;
 800a5b0:	e108      	b.n	800a7c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5b2:	4b88      	ldr	r3, [pc, #544]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b6:	f003 0303 	and.w	r3, r3, #3
 800a5ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a5bc:	4b85      	ldr	r3, [pc, #532]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c0:	091b      	lsrs	r3, r3, #4
 800a5c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a5c8:	4b82      	ldr	r3, [pc, #520]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	f003 0301 	and.w	r3, r3, #1
 800a5d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a5d2:	4b80      	ldr	r3, [pc, #512]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d6:	08db      	lsrs	r3, r3, #3
 800a5d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	fb02 f303 	mul.w	r3, r2, r3
 800a5e2:	ee07 3a90 	vmov	s15, r3
 800a5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 80e1 	beq.w	800a7b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	f000 8083 	beq.w	800a704 <HAL_RCC_GetSysClockFreq+0x204>
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2b02      	cmp	r3, #2
 800a602:	f200 80a1 	bhi.w	800a748 <HAL_RCC_GetSysClockFreq+0x248>
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d003      	beq.n	800a614 <HAL_RCC_GetSysClockFreq+0x114>
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d056      	beq.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a612:	e099      	b.n	800a748 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a614:	4b6f      	ldr	r3, [pc, #444]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0320 	and.w	r3, r3, #32
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d02d      	beq.n	800a67c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a620:	4b6c      	ldr	r3, [pc, #432]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	08db      	lsrs	r3, r3, #3
 800a626:	f003 0303 	and.w	r3, r3, #3
 800a62a:	4a6b      	ldr	r2, [pc, #428]	; (800a7d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a62c:	fa22 f303 	lsr.w	r3, r2, r3
 800a630:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	ee07 3a90 	vmov	s15, r3
 800a638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	ee07 3a90 	vmov	s15, r3
 800a642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a64a:	4b62      	ldr	r3, [pc, #392]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a652:	ee07 3a90 	vmov	s15, r3
 800a656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a65a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a65e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a66a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a676:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a67a:	e087      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a686:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a7e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a68e:	4b51      	ldr	r3, [pc, #324]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a696:	ee07 3a90 	vmov	s15, r3
 800a69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a69e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6be:	e065      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a7ec <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6d2:	4b40      	ldr	r3, [pc, #256]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6da:	ee07 3a90 	vmov	s15, r3
 800a6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a702:	e043      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	ee07 3a90 	vmov	s15, r3
 800a70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a70e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a7f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a716:	4b2f      	ldr	r3, [pc, #188]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a71e:	ee07 3a90 	vmov	s15, r3
 800a722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a726:	ed97 6a02 	vldr	s12, [r7, #8]
 800a72a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a746:	e021      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	ee07 3a90 	vmov	s15, r3
 800a74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a752:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a7ec <HAL_RCC_GetSysClockFreq+0x2ec>
 800a756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a75a:	4b1e      	ldr	r3, [pc, #120]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a762:	ee07 3a90 	vmov	s15, r3
 800a766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a76a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a76e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a77a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a786:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a78a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a78c:	4b11      	ldr	r3, [pc, #68]	; (800a7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a790:	0a5b      	lsrs	r3, r3, #9
 800a792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a796:	3301      	adds	r3, #1
 800a798:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	ee07 3a90 	vmov	s15, r3
 800a7a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a7a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7b0:	ee17 3a90 	vmov	r3, s15
 800a7b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a7b6:	e005      	b.n	800a7c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	61bb      	str	r3, [r7, #24]
      break;
 800a7bc:	e002      	b.n	800a7c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a7be:	4b07      	ldr	r3, [pc, #28]	; (800a7dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a7c0:	61bb      	str	r3, [r7, #24]
      break;
 800a7c2:	bf00      	nop
  }

  return sysclockfreq;
 800a7c4:	69bb      	ldr	r3, [r7, #24]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3724      	adds	r7, #36	; 0x24
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	58024400 	.word	0x58024400
 800a7d8:	03d09000 	.word	0x03d09000
 800a7dc:	003d0900 	.word	0x003d0900
 800a7e0:	017d7840 	.word	0x017d7840
 800a7e4:	46000000 	.word	0x46000000
 800a7e8:	4c742400 	.word	0x4c742400
 800a7ec:	4a742400 	.word	0x4a742400
 800a7f0:	4bbebc20 	.word	0x4bbebc20

0800a7f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a7fa:	f7ff fe81 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800a7fe:	4602      	mov	r2, r0
 800a800:	4b10      	ldr	r3, [pc, #64]	; (800a844 <HAL_RCC_GetHCLKFreq+0x50>)
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	0a1b      	lsrs	r3, r3, #8
 800a806:	f003 030f 	and.w	r3, r3, #15
 800a80a:	490f      	ldr	r1, [pc, #60]	; (800a848 <HAL_RCC_GetHCLKFreq+0x54>)
 800a80c:	5ccb      	ldrb	r3, [r1, r3]
 800a80e:	f003 031f 	and.w	r3, r3, #31
 800a812:	fa22 f303 	lsr.w	r3, r2, r3
 800a816:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a818:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <HAL_RCC_GetHCLKFreq+0x50>)
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	f003 030f 	and.w	r3, r3, #15
 800a820:	4a09      	ldr	r2, [pc, #36]	; (800a848 <HAL_RCC_GetHCLKFreq+0x54>)
 800a822:	5cd3      	ldrb	r3, [r2, r3]
 800a824:	f003 031f 	and.w	r3, r3, #31
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	fa22 f303 	lsr.w	r3, r2, r3
 800a82e:	4a07      	ldr	r2, [pc, #28]	; (800a84c <HAL_RCC_GetHCLKFreq+0x58>)
 800a830:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a832:	4a07      	ldr	r2, [pc, #28]	; (800a850 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a838:	4b04      	ldr	r3, [pc, #16]	; (800a84c <HAL_RCC_GetHCLKFreq+0x58>)
 800a83a:	681b      	ldr	r3, [r3, #0]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	58024400 	.word	0x58024400
 800a848:	08016f80 	.word	0x08016f80
 800a84c:	24000094 	.word	0x24000094
 800a850:	24000090 	.word	0x24000090

0800a854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a858:	f7ff ffcc 	bl	800a7f4 <HAL_RCC_GetHCLKFreq>
 800a85c:	4602      	mov	r2, r0
 800a85e:	4b06      	ldr	r3, [pc, #24]	; (800a878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	091b      	lsrs	r3, r3, #4
 800a864:	f003 0307 	and.w	r3, r3, #7
 800a868:	4904      	ldr	r1, [pc, #16]	; (800a87c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a86a:	5ccb      	ldrb	r3, [r1, r3]
 800a86c:	f003 031f 	and.w	r3, r3, #31
 800a870:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a874:	4618      	mov	r0, r3
 800a876:	bd80      	pop	{r7, pc}
 800a878:	58024400 	.word	0x58024400
 800a87c:	08016f80 	.word	0x08016f80

0800a880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a884:	f7ff ffb6 	bl	800a7f4 <HAL_RCC_GetHCLKFreq>
 800a888:	4602      	mov	r2, r0
 800a88a:	4b06      	ldr	r3, [pc, #24]	; (800a8a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	0a1b      	lsrs	r3, r3, #8
 800a890:	f003 0307 	and.w	r3, r3, #7
 800a894:	4904      	ldr	r1, [pc, #16]	; (800a8a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a896:	5ccb      	ldrb	r3, [r1, r3]
 800a898:	f003 031f 	and.w	r3, r3, #31
 800a89c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	58024400 	.word	0x58024400
 800a8a8:	08016f80 	.word	0x08016f80

0800a8ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	223f      	movs	r2, #63	; 0x3f
 800a8ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a8bc:	4b1a      	ldr	r3, [pc, #104]	; (800a928 <HAL_RCC_GetClockConfig+0x7c>)
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f003 0207 	and.w	r2, r3, #7
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a8c8:	4b17      	ldr	r3, [pc, #92]	; (800a928 <HAL_RCC_GetClockConfig+0x7c>)
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a8d4:	4b14      	ldr	r3, [pc, #80]	; (800a928 <HAL_RCC_GetClockConfig+0x7c>)
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	f003 020f 	and.w	r2, r3, #15
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a8e0:	4b11      	ldr	r3, [pc, #68]	; (800a928 <HAL_RCC_GetClockConfig+0x7c>)
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a8ec:	4b0e      	ldr	r3, [pc, #56]	; (800a928 <HAL_RCC_GetClockConfig+0x7c>)
 800a8ee:	69db      	ldr	r3, [r3, #28]
 800a8f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a8f8:	4b0b      	ldr	r3, [pc, #44]	; (800a928 <HAL_RCC_GetClockConfig+0x7c>)
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a904:	4b08      	ldr	r3, [pc, #32]	; (800a928 <HAL_RCC_GetClockConfig+0x7c>)
 800a906:	6a1b      	ldr	r3, [r3, #32]
 800a908:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a910:	4b06      	ldr	r3, [pc, #24]	; (800a92c <HAL_RCC_GetClockConfig+0x80>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 020f 	and.w	r2, r3, #15
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	601a      	str	r2, [r3, #0]
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	58024400 	.word	0x58024400
 800a92c:	52002000 	.word	0x52002000

0800a930 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a934:	b0ca      	sub	sp, #296	; 0x128
 800a936:	af00      	add	r7, sp, #0
 800a938:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a93c:	2300      	movs	r3, #0
 800a93e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a942:	2300      	movs	r3, #0
 800a944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a954:	2500      	movs	r5, #0
 800a956:	ea54 0305 	orrs.w	r3, r4, r5
 800a95a:	d049      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a962:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a966:	d02f      	beq.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a968:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a96c:	d828      	bhi.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a96e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a972:	d01a      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a978:	d822      	bhi.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a97e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a982:	d007      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a984:	e01c      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a986:	4bb8      	ldr	r3, [pc, #736]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98a:	4ab7      	ldr	r2, [pc, #732]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a98c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a990:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a992:	e01a      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a998:	3308      	adds	r3, #8
 800a99a:	2102      	movs	r1, #2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f002 fb61 	bl	800d064 <RCCEx_PLL2_Config>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9a8:	e00f      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ae:	3328      	adds	r3, #40	; 0x28
 800a9b0:	2102      	movs	r1, #2
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f002 fc08 	bl	800d1c8 <RCCEx_PLL3_Config>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9be:	e004      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9c6:	e000      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a9c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10a      	bne.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a9d2:	4ba5      	ldr	r3, [pc, #660]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9e0:	4aa1      	ldr	r2, [pc, #644]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	6513      	str	r3, [r2, #80]	; 0x50
 800a9e6:	e003      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a9fc:	f04f 0900 	mov.w	r9, #0
 800aa00:	ea58 0309 	orrs.w	r3, r8, r9
 800aa04:	d047      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aa06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0c:	2b04      	cmp	r3, #4
 800aa0e:	d82a      	bhi.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aa10:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aa12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa16:	bf00      	nop
 800aa18:	0800aa2d 	.word	0x0800aa2d
 800aa1c:	0800aa3b 	.word	0x0800aa3b
 800aa20:	0800aa51 	.word	0x0800aa51
 800aa24:	0800aa6f 	.word	0x0800aa6f
 800aa28:	0800aa6f 	.word	0x0800aa6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa2c:	4b8e      	ldr	r3, [pc, #568]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	4a8d      	ldr	r2, [pc, #564]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa38:	e01a      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3e:	3308      	adds	r3, #8
 800aa40:	2100      	movs	r1, #0
 800aa42:	4618      	mov	r0, r3
 800aa44:	f002 fb0e 	bl	800d064 <RCCEx_PLL2_Config>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa4e:	e00f      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa54:	3328      	adds	r3, #40	; 0x28
 800aa56:	2100      	movs	r1, #0
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f002 fbb5 	bl	800d1c8 <RCCEx_PLL3_Config>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa64:	e004      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa6c:	e000      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aa6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10a      	bne.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa78:	4b7b      	ldr	r3, [pc, #492]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa7c:	f023 0107 	bic.w	r1, r3, #7
 800aa80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa86:	4a78      	ldr	r2, [pc, #480]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa88:	430b      	orrs	r3, r1
 800aa8a:	6513      	str	r3, [r2, #80]	; 0x50
 800aa8c:	e003      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aa96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800aaa2:	f04f 0b00 	mov.w	fp, #0
 800aaa6:	ea5a 030b 	orrs.w	r3, sl, fp
 800aaaa:	d04c      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800aaac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aab6:	d030      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800aab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aabc:	d829      	bhi.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aabe:	2bc0      	cmp	r3, #192	; 0xc0
 800aac0:	d02d      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800aac2:	2bc0      	cmp	r3, #192	; 0xc0
 800aac4:	d825      	bhi.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aac6:	2b80      	cmp	r3, #128	; 0x80
 800aac8:	d018      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800aaca:	2b80      	cmp	r3, #128	; 0x80
 800aacc:	d821      	bhi.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d002      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800aad2:	2b40      	cmp	r3, #64	; 0x40
 800aad4:	d007      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800aad6:	e01c      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad8:	4b63      	ldr	r3, [pc, #396]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aadc:	4a62      	ldr	r2, [pc, #392]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aae4:	e01c      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaea:	3308      	adds	r3, #8
 800aaec:	2100      	movs	r1, #0
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f002 fab8 	bl	800d064 <RCCEx_PLL2_Config>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aafa:	e011      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab00:	3328      	adds	r3, #40	; 0x28
 800ab02:	2100      	movs	r1, #0
 800ab04:	4618      	mov	r0, r3
 800ab06:	f002 fb5f 	bl	800d1c8 <RCCEx_PLL3_Config>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab10:	e006      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab18:	e002      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ab1a:	bf00      	nop
 800ab1c:	e000      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ab1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10a      	bne.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ab28:	4b4f      	ldr	r3, [pc, #316]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab2c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ab30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab36:	4a4c      	ldr	r2, [pc, #304]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab38:	430b      	orrs	r3, r1
 800ab3a:	6513      	str	r3, [r2, #80]	; 0x50
 800ab3c:	e003      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ab46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ab52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ab56:	2300      	movs	r3, #0
 800ab58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ab5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ab60:	460b      	mov	r3, r1
 800ab62:	4313      	orrs	r3, r2
 800ab64:	d053      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ab66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab72:	d035      	beq.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ab74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab78:	d82e      	bhi.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab7e:	d031      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ab80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab84:	d828      	bhi.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab8a:	d01a      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ab8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab90:	d822      	bhi.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d003      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ab96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab9a:	d007      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ab9c:	e01c      	b.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab9e:	4b32      	ldr	r3, [pc, #200]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba2:	4a31      	ldr	r2, [pc, #196]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aba8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abaa:	e01c      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abb0:	3308      	adds	r3, #8
 800abb2:	2100      	movs	r1, #0
 800abb4:	4618      	mov	r0, r3
 800abb6:	f002 fa55 	bl	800d064 <RCCEx_PLL2_Config>
 800abba:	4603      	mov	r3, r0
 800abbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800abc0:	e011      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc6:	3328      	adds	r3, #40	; 0x28
 800abc8:	2100      	movs	r1, #0
 800abca:	4618      	mov	r0, r3
 800abcc:	f002 fafc 	bl	800d1c8 <RCCEx_PLL3_Config>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abd6:	e006      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abde:	e002      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800abe0:	bf00      	nop
 800abe2:	e000      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800abe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10b      	bne.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800abee:	4b1e      	ldr	r3, [pc, #120]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abf2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800abf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abfe:	4a1a      	ldr	r2, [pc, #104]	; (800ac68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac00:	430b      	orrs	r3, r1
 800ac02:	6593      	str	r3, [r2, #88]	; 0x58
 800ac04:	e003      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ac0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ac1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ac24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	d056      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ac2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac3a:	d038      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ac3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac40:	d831      	bhi.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac46:	d034      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ac48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac4c:	d82b      	bhi.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac52:	d01d      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ac54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac58:	d825      	bhi.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d006      	beq.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ac5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac62:	d00a      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ac64:	e01f      	b.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac66:	bf00      	nop
 800ac68:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac6c:	4ba2      	ldr	r3, [pc, #648]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac70:	4aa1      	ldr	r2, [pc, #644]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac78:	e01c      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac7e:	3308      	adds	r3, #8
 800ac80:	2100      	movs	r1, #0
 800ac82:	4618      	mov	r0, r3
 800ac84:	f002 f9ee 	bl	800d064 <RCCEx_PLL2_Config>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ac8e:	e011      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac94:	3328      	adds	r3, #40	; 0x28
 800ac96:	2100      	movs	r1, #0
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f002 fa95 	bl	800d1c8 <RCCEx_PLL3_Config>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aca4:	e006      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acac:	e002      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800acae:	bf00      	nop
 800acb0:	e000      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800acb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10b      	bne.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800acbc:	4b8e      	ldr	r3, [pc, #568]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acc0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800acc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800accc:	4a8a      	ldr	r2, [pc, #552]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acce:	430b      	orrs	r3, r1
 800acd0:	6593      	str	r3, [r2, #88]	; 0x58
 800acd2:	e003      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ace8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800acec:	2300      	movs	r3, #0
 800acee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800acf2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800acf6:	460b      	mov	r3, r1
 800acf8:	4313      	orrs	r3, r2
 800acfa:	d03a      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800acfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad02:	2b30      	cmp	r3, #48	; 0x30
 800ad04:	d01f      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ad06:	2b30      	cmp	r3, #48	; 0x30
 800ad08:	d819      	bhi.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ad0a:	2b20      	cmp	r3, #32
 800ad0c:	d00c      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	d815      	bhi.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d019      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ad16:	2b10      	cmp	r3, #16
 800ad18:	d111      	bne.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad1a:	4b77      	ldr	r3, [pc, #476]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1e:	4a76      	ldr	r2, [pc, #472]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ad26:	e011      	b.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	2102      	movs	r1, #2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f002 f997 	bl	800d064 <RCCEx_PLL2_Config>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ad3c:	e006      	b.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad44:	e002      	b.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ad46:	bf00      	nop
 800ad48:	e000      	b.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ad4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10a      	bne.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ad54:	4b68      	ldr	r3, [pc, #416]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad58:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ad5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad62:	4a65      	ldr	r2, [pc, #404]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad64:	430b      	orrs	r3, r1
 800ad66:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad68:	e003      	b.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ad72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ad7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ad82:	2300      	movs	r3, #0
 800ad84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ad88:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	d051      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ad92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad9c:	d035      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ad9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ada2:	d82e      	bhi.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ada4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ada8:	d031      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800adaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adae:	d828      	bhi.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800adb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adb4:	d01a      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800adb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adba:	d822      	bhi.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d003      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800adc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adc4:	d007      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800adc6:	e01c      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adc8:	4b4b      	ldr	r3, [pc, #300]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	4a4a      	ldr	r2, [pc, #296]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800add2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800add4:	e01c      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800add6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adda:	3308      	adds	r3, #8
 800addc:	2100      	movs	r1, #0
 800adde:	4618      	mov	r0, r3
 800ade0:	f002 f940 	bl	800d064 <RCCEx_PLL2_Config>
 800ade4:	4603      	mov	r3, r0
 800ade6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800adea:	e011      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf0:	3328      	adds	r3, #40	; 0x28
 800adf2:	2100      	movs	r1, #0
 800adf4:	4618      	mov	r0, r3
 800adf6:	f002 f9e7 	bl	800d1c8 <RCCEx_PLL3_Config>
 800adfa:	4603      	mov	r3, r0
 800adfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae00:	e006      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae08:	e002      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ae0a:	bf00      	nop
 800ae0c:	e000      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ae0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10a      	bne.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ae18:	4b37      	ldr	r3, [pc, #220]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae1c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ae20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae26:	4a34      	ldr	r2, [pc, #208]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae28:	430b      	orrs	r3, r1
 800ae2a:	6513      	str	r3, [r2, #80]	; 0x50
 800ae2c:	e003      	b.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ae36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ae42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae46:	2300      	movs	r3, #0
 800ae48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ae50:	460b      	mov	r3, r1
 800ae52:	4313      	orrs	r3, r2
 800ae54:	d056      	beq.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ae56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae60:	d033      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ae62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae66:	d82c      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae6c:	d02f      	beq.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ae6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae72:	d826      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae78:	d02b      	beq.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ae7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae7e:	d820      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae84:	d012      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ae86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae8a:	d81a      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d022      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ae90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae94:	d115      	bne.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f002 f8e0 	bl	800d064 <RCCEx_PLL2_Config>
 800aea4:	4603      	mov	r3, r0
 800aea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aeaa:	e015      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aeac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb0:	3328      	adds	r3, #40	; 0x28
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f002 f987 	bl	800d1c8 <RCCEx_PLL3_Config>
 800aeba:	4603      	mov	r3, r0
 800aebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aec0:	e00a      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aec8:	e006      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aeca:	bf00      	nop
 800aecc:	e004      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aece:	bf00      	nop
 800aed0:	e002      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aed2:	bf00      	nop
 800aed4:	e000      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10d      	bne.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aee0:	4b05      	ldr	r3, [pc, #20]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800aee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aeee:	4a02      	ldr	r2, [pc, #8]	; (800aef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aef0:	430b      	orrs	r3, r1
 800aef2:	6513      	str	r3, [r2, #80]	; 0x50
 800aef4:	e006      	b.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aef6:	bf00      	nop
 800aef8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aefc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800af04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800af10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af14:	2300      	movs	r3, #0
 800af16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af1a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800af1e:	460b      	mov	r3, r1
 800af20:	4313      	orrs	r3, r2
 800af22:	d055      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800af24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af30:	d033      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800af32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af36:	d82c      	bhi.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af3c:	d02f      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800af3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af42:	d826      	bhi.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af48:	d02b      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800af4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af4e:	d820      	bhi.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af54:	d012      	beq.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800af56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af5a:	d81a      	bhi.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d022      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800af60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af64:	d115      	bne.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6a:	3308      	adds	r3, #8
 800af6c:	2101      	movs	r1, #1
 800af6e:	4618      	mov	r0, r3
 800af70:	f002 f878 	bl	800d064 <RCCEx_PLL2_Config>
 800af74:	4603      	mov	r3, r0
 800af76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800af7a:	e015      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af80:	3328      	adds	r3, #40	; 0x28
 800af82:	2101      	movs	r1, #1
 800af84:	4618      	mov	r0, r3
 800af86:	f002 f91f 	bl	800d1c8 <RCCEx_PLL3_Config>
 800af8a:	4603      	mov	r3, r0
 800af8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800af90:	e00a      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af98:	e006      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af9a:	bf00      	nop
 800af9c:	e004      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af9e:	bf00      	nop
 800afa0:	e002      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800afa2:	bf00      	nop
 800afa4:	e000      	b.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800afa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10b      	bne.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800afb0:	4ba3      	ldr	r3, [pc, #652]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afb4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800afb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afc0:	4a9f      	ldr	r2, [pc, #636]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afc2:	430b      	orrs	r3, r1
 800afc4:	6593      	str	r3, [r2, #88]	; 0x58
 800afc6:	e003      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800afd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800afdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800afe0:	2300      	movs	r3, #0
 800afe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800afe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800afea:	460b      	mov	r3, r1
 800afec:	4313      	orrs	r3, r2
 800afee:	d037      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800affa:	d00e      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800affc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b000:	d816      	bhi.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b002:	2b00      	cmp	r3, #0
 800b004:	d018      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b00a:	d111      	bne.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b00c:	4b8c      	ldr	r3, [pc, #560]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b010:	4a8b      	ldr	r2, [pc, #556]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b018:	e00f      	b.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01e:	3308      	adds	r3, #8
 800b020:	2101      	movs	r1, #1
 800b022:	4618      	mov	r0, r3
 800b024:	f002 f81e 	bl	800d064 <RCCEx_PLL2_Config>
 800b028:	4603      	mov	r3, r0
 800b02a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b02e:	e004      	b.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b036:	e000      	b.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b03a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10a      	bne.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b042:	4b7f      	ldr	r3, [pc, #508]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b046:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b050:	4a7b      	ldr	r2, [pc, #492]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b052:	430b      	orrs	r3, r1
 800b054:	6513      	str	r3, [r2, #80]	; 0x50
 800b056:	e003      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b05c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b06c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b070:	2300      	movs	r3, #0
 800b072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b076:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4313      	orrs	r3, r2
 800b07e:	d039      	beq.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b086:	2b03      	cmp	r3, #3
 800b088:	d81c      	bhi.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b08a:	a201      	add	r2, pc, #4	; (adr r2, 800b090 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b0cd 	.word	0x0800b0cd
 800b094:	0800b0a1 	.word	0x0800b0a1
 800b098:	0800b0af 	.word	0x0800b0af
 800b09c:	0800b0cd 	.word	0x0800b0cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0a0:	4b67      	ldr	r3, [pc, #412]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	4a66      	ldr	r2, [pc, #408]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b0ac:	e00f      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	2102      	movs	r1, #2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f001 ffd4 	bl	800d064 <RCCEx_PLL2_Config>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b0c2:	e004      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0ca:	e000      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b0cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10a      	bne.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b0d6:	4b5a      	ldr	r3, [pc, #360]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0da:	f023 0103 	bic.w	r1, r3, #3
 800b0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0e4:	4a56      	ldr	r2, [pc, #344]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0e6:	430b      	orrs	r3, r1
 800b0e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0ea:	e003      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b100:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b104:	2300      	movs	r3, #0
 800b106:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b10a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b10e:	460b      	mov	r3, r1
 800b110:	4313      	orrs	r3, r2
 800b112:	f000 809f 	beq.w	800b254 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b116:	4b4b      	ldr	r3, [pc, #300]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a4a      	ldr	r2, [pc, #296]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b11c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b120:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b122:	f7f8 fc51 	bl	80039c8 <HAL_GetTick>
 800b126:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b12a:	e00b      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b12c:	f7f8 fc4c 	bl	80039c8 <HAL_GetTick>
 800b130:	4602      	mov	r2, r0
 800b132:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	2b64      	cmp	r3, #100	; 0x64
 800b13a:	d903      	bls.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b142:	e005      	b.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b144:	4b3f      	ldr	r3, [pc, #252]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d0ed      	beq.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b154:	2b00      	cmp	r3, #0
 800b156:	d179      	bne.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b158:	4b39      	ldr	r3, [pc, #228]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b15a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b160:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b164:	4053      	eors	r3, r2
 800b166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d015      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b16e:	4b34      	ldr	r3, [pc, #208]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b176:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b17a:	4b31      	ldr	r3, [pc, #196]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b17e:	4a30      	ldr	r2, [pc, #192]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b184:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b186:	4b2e      	ldr	r3, [pc, #184]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b18a:	4a2d      	ldr	r2, [pc, #180]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b18c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b190:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b192:	4a2b      	ldr	r2, [pc, #172]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b194:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b198:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1a6:	d118      	bne.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a8:	f7f8 fc0e 	bl	80039c8 <HAL_GetTick>
 800b1ac:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1b0:	e00d      	b.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1b2:	f7f8 fc09 	bl	80039c8 <HAL_GetTick>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b1bc:	1ad2      	subs	r2, r2, r3
 800b1be:	f241 3388 	movw	r3, #5000	; 0x1388
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d903      	bls.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b1cc:	e005      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1ce:	4b1c      	ldr	r3, [pc, #112]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d2:	f003 0302 	and.w	r3, r3, #2
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d0eb      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b1da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d129      	bne.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1f2:	d10e      	bne.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b1f4:	4b12      	ldr	r3, [pc, #72]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b200:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b204:	091a      	lsrs	r2, r3, #4
 800b206:	4b10      	ldr	r3, [pc, #64]	; (800b248 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b208:	4013      	ands	r3, r2
 800b20a:	4a0d      	ldr	r2, [pc, #52]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b20c:	430b      	orrs	r3, r1
 800b20e:	6113      	str	r3, [r2, #16]
 800b210:	e005      	b.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b212:	4b0b      	ldr	r3, [pc, #44]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	4a0a      	ldr	r2, [pc, #40]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b218:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b21c:	6113      	str	r3, [r2, #16]
 800b21e:	4b08      	ldr	r3, [pc, #32]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b220:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b226:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b22a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b22e:	4a04      	ldr	r2, [pc, #16]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b230:	430b      	orrs	r3, r1
 800b232:	6713      	str	r3, [r2, #112]	; 0x70
 800b234:	e00e      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b23a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b23e:	e009      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b240:	58024400 	.word	0x58024400
 800b244:	58024800 	.word	0x58024800
 800b248:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b24c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b250:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25c:	f002 0301 	and.w	r3, r2, #1
 800b260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b264:	2300      	movs	r3, #0
 800b266:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b26a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b26e:	460b      	mov	r3, r1
 800b270:	4313      	orrs	r3, r2
 800b272:	f000 8089 	beq.w	800b388 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b27c:	2b28      	cmp	r3, #40	; 0x28
 800b27e:	d86b      	bhi.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b280:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b286:	bf00      	nop
 800b288:	0800b361 	.word	0x0800b361
 800b28c:	0800b359 	.word	0x0800b359
 800b290:	0800b359 	.word	0x0800b359
 800b294:	0800b359 	.word	0x0800b359
 800b298:	0800b359 	.word	0x0800b359
 800b29c:	0800b359 	.word	0x0800b359
 800b2a0:	0800b359 	.word	0x0800b359
 800b2a4:	0800b359 	.word	0x0800b359
 800b2a8:	0800b32d 	.word	0x0800b32d
 800b2ac:	0800b359 	.word	0x0800b359
 800b2b0:	0800b359 	.word	0x0800b359
 800b2b4:	0800b359 	.word	0x0800b359
 800b2b8:	0800b359 	.word	0x0800b359
 800b2bc:	0800b359 	.word	0x0800b359
 800b2c0:	0800b359 	.word	0x0800b359
 800b2c4:	0800b359 	.word	0x0800b359
 800b2c8:	0800b343 	.word	0x0800b343
 800b2cc:	0800b359 	.word	0x0800b359
 800b2d0:	0800b359 	.word	0x0800b359
 800b2d4:	0800b359 	.word	0x0800b359
 800b2d8:	0800b359 	.word	0x0800b359
 800b2dc:	0800b359 	.word	0x0800b359
 800b2e0:	0800b359 	.word	0x0800b359
 800b2e4:	0800b359 	.word	0x0800b359
 800b2e8:	0800b361 	.word	0x0800b361
 800b2ec:	0800b359 	.word	0x0800b359
 800b2f0:	0800b359 	.word	0x0800b359
 800b2f4:	0800b359 	.word	0x0800b359
 800b2f8:	0800b359 	.word	0x0800b359
 800b2fc:	0800b359 	.word	0x0800b359
 800b300:	0800b359 	.word	0x0800b359
 800b304:	0800b359 	.word	0x0800b359
 800b308:	0800b361 	.word	0x0800b361
 800b30c:	0800b359 	.word	0x0800b359
 800b310:	0800b359 	.word	0x0800b359
 800b314:	0800b359 	.word	0x0800b359
 800b318:	0800b359 	.word	0x0800b359
 800b31c:	0800b359 	.word	0x0800b359
 800b320:	0800b359 	.word	0x0800b359
 800b324:	0800b359 	.word	0x0800b359
 800b328:	0800b361 	.word	0x0800b361
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b330:	3308      	adds	r3, #8
 800b332:	2101      	movs	r1, #1
 800b334:	4618      	mov	r0, r3
 800b336:	f001 fe95 	bl	800d064 <RCCEx_PLL2_Config>
 800b33a:	4603      	mov	r3, r0
 800b33c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b340:	e00f      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b346:	3328      	adds	r3, #40	; 0x28
 800b348:	2101      	movs	r1, #1
 800b34a:	4618      	mov	r0, r3
 800b34c:	f001 ff3c 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b350:	4603      	mov	r3, r0
 800b352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b356:	e004      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b35e:	e000      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b360:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b36a:	4bbf      	ldr	r3, [pc, #764]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b36e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b378:	4abb      	ldr	r2, [pc, #748]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b37a:	430b      	orrs	r3, r1
 800b37c:	6553      	str	r3, [r2, #84]	; 0x54
 800b37e:	e003      	b.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	f002 0302 	and.w	r3, r2, #2
 800b394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b398:	2300      	movs	r3, #0
 800b39a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b39e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	d041      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3ae:	2b05      	cmp	r3, #5
 800b3b0:	d824      	bhi.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b3b2:	a201      	add	r2, pc, #4	; (adr r2, 800b3b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b8:	0800b405 	.word	0x0800b405
 800b3bc:	0800b3d1 	.word	0x0800b3d1
 800b3c0:	0800b3e7 	.word	0x0800b3e7
 800b3c4:	0800b405 	.word	0x0800b405
 800b3c8:	0800b405 	.word	0x0800b405
 800b3cc:	0800b405 	.word	0x0800b405
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f001 fe43 	bl	800d064 <RCCEx_PLL2_Config>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b3e4:	e00f      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ea:	3328      	adds	r3, #40	; 0x28
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f001 feea 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b3fa:	e004      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b402:	e000      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b404:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d10a      	bne.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b40e:	4b96      	ldr	r3, [pc, #600]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b412:	f023 0107 	bic.w	r1, r3, #7
 800b416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b41a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b41c:	4a92      	ldr	r2, [pc, #584]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b41e:	430b      	orrs	r3, r1
 800b420:	6553      	str	r3, [r2, #84]	; 0x54
 800b422:	e003      	b.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b428:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	f002 0304 	and.w	r3, r2, #4
 800b438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b43c:	2300      	movs	r3, #0
 800b43e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b442:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b446:	460b      	mov	r3, r1
 800b448:	4313      	orrs	r3, r2
 800b44a:	d044      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b454:	2b05      	cmp	r3, #5
 800b456:	d825      	bhi.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b458:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45e:	bf00      	nop
 800b460:	0800b4ad 	.word	0x0800b4ad
 800b464:	0800b479 	.word	0x0800b479
 800b468:	0800b48f 	.word	0x0800b48f
 800b46c:	0800b4ad 	.word	0x0800b4ad
 800b470:	0800b4ad 	.word	0x0800b4ad
 800b474:	0800b4ad 	.word	0x0800b4ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b47c:	3308      	adds	r3, #8
 800b47e:	2101      	movs	r1, #1
 800b480:	4618      	mov	r0, r3
 800b482:	f001 fdef 	bl	800d064 <RCCEx_PLL2_Config>
 800b486:	4603      	mov	r3, r0
 800b488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b48c:	e00f      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b492:	3328      	adds	r3, #40	; 0x28
 800b494:	2101      	movs	r1, #1
 800b496:	4618      	mov	r0, r3
 800b498:	f001 fe96 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b49c:	4603      	mov	r3, r0
 800b49e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b4a2:	e004      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4aa:	e000      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b4ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10b      	bne.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b4b6:	4b6c      	ldr	r3, [pc, #432]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ba:	f023 0107 	bic.w	r1, r3, #7
 800b4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4c6:	4a68      	ldr	r2, [pc, #416]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4c8:	430b      	orrs	r3, r1
 800b4ca:	6593      	str	r3, [r2, #88]	; 0x58
 800b4cc:	e003      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	f002 0320 	and.w	r3, r2, #32
 800b4e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	d055      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b502:	d033      	beq.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b508:	d82c      	bhi.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b50a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b50e:	d02f      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b514:	d826      	bhi.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b516:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b51a:	d02b      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b51c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b520:	d820      	bhi.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b526:	d012      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b52c:	d81a      	bhi.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d022      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b536:	d115      	bne.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53c:	3308      	adds	r3, #8
 800b53e:	2100      	movs	r1, #0
 800b540:	4618      	mov	r0, r3
 800b542:	f001 fd8f 	bl	800d064 <RCCEx_PLL2_Config>
 800b546:	4603      	mov	r3, r0
 800b548:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b54c:	e015      	b.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b552:	3328      	adds	r3, #40	; 0x28
 800b554:	2102      	movs	r1, #2
 800b556:	4618      	mov	r0, r3
 800b558:	f001 fe36 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b55c:	4603      	mov	r3, r0
 800b55e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b562:	e00a      	b.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b56a:	e006      	b.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b56c:	bf00      	nop
 800b56e:	e004      	b.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b570:	bf00      	nop
 800b572:	e002      	b.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b574:	bf00      	nop
 800b576:	e000      	b.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b57a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10b      	bne.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b582:	4b39      	ldr	r3, [pc, #228]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b586:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b592:	4a35      	ldr	r2, [pc, #212]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b594:	430b      	orrs	r3, r1
 800b596:	6553      	str	r3, [r2, #84]	; 0x54
 800b598:	e003      	b.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b59a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b59e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b5ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b5b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b5bc:	460b      	mov	r3, r1
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	d058      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b5ce:	d033      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b5d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b5d4:	d82c      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5da:	d02f      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b5dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5e0:	d826      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5e6:	d02b      	beq.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b5e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5ec:	d820      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5f2:	d012      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b5f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5f8:	d81a      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d022      	beq.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b5fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b602:	d115      	bne.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b608:	3308      	adds	r3, #8
 800b60a:	2100      	movs	r1, #0
 800b60c:	4618      	mov	r0, r3
 800b60e:	f001 fd29 	bl	800d064 <RCCEx_PLL2_Config>
 800b612:	4603      	mov	r3, r0
 800b614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b618:	e015      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61e:	3328      	adds	r3, #40	; 0x28
 800b620:	2102      	movs	r1, #2
 800b622:	4618      	mov	r0, r3
 800b624:	f001 fdd0 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b628:	4603      	mov	r3, r0
 800b62a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b62e:	e00a      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b636:	e006      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b638:	bf00      	nop
 800b63a:	e004      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b63c:	bf00      	nop
 800b63e:	e002      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b640:	bf00      	nop
 800b642:	e000      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b644:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10e      	bne.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b64e:	4b06      	ldr	r3, [pc, #24]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b652:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b65a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b65e:	4a02      	ldr	r2, [pc, #8]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b660:	430b      	orrs	r3, r1
 800b662:	6593      	str	r3, [r2, #88]	; 0x58
 800b664:	e006      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b666:	bf00      	nop
 800b668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b66c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b670:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b684:	2300      	movs	r3, #0
 800b686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b68a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b68e:	460b      	mov	r3, r1
 800b690:	4313      	orrs	r3, r2
 800b692:	d055      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b698:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b69c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b6a0:	d033      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b6a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b6a6:	d82c      	bhi.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b6a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6ac:	d02f      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6b2:	d826      	bhi.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b6b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b6b8:	d02b      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b6ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b6be:	d820      	bhi.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b6c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6c4:	d012      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b6c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6ca:	d81a      	bhi.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d022      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b6d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6d4:	d115      	bne.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6da:	3308      	adds	r3, #8
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f001 fcc0 	bl	800d064 <RCCEx_PLL2_Config>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b6ea:	e015      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f0:	3328      	adds	r3, #40	; 0x28
 800b6f2:	2102      	movs	r1, #2
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f001 fd67 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b700:	e00a      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b708:	e006      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b70a:	bf00      	nop
 800b70c:	e004      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b70e:	bf00      	nop
 800b710:	e002      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b712:	bf00      	nop
 800b714:	e000      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b716:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b718:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10b      	bne.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b720:	4ba1      	ldr	r3, [pc, #644]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b724:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b72c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b730:	4a9d      	ldr	r2, [pc, #628]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b732:	430b      	orrs	r3, r1
 800b734:	6593      	str	r3, [r2, #88]	; 0x58
 800b736:	e003      	b.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b73c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	f002 0308 	and.w	r3, r2, #8
 800b74c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b750:	2300      	movs	r3, #0
 800b752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b756:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b75a:	460b      	mov	r3, r1
 800b75c:	4313      	orrs	r3, r2
 800b75e:	d01e      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b76c:	d10c      	bne.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b772:	3328      	adds	r3, #40	; 0x28
 800b774:	2102      	movs	r1, #2
 800b776:	4618      	mov	r0, r3
 800b778:	f001 fd26 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b788:	4b87      	ldr	r3, [pc, #540]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b78a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b78c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b798:	4a83      	ldr	r2, [pc, #524]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b79a:	430b      	orrs	r3, r1
 800b79c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f002 0310 	and.w	r3, r2, #16
 800b7aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b7b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	d01e      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ca:	d10c      	bne.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d0:	3328      	adds	r3, #40	; 0x28
 800b7d2:	2102      	movs	r1, #2
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f001 fcf7 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b7e6:	4b70      	ldr	r3, [pc, #448]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7f6:	4a6c      	ldr	r2, [pc, #432]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7f8:	430b      	orrs	r3, r1
 800b7fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b80c:	2300      	movs	r3, #0
 800b80e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b812:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b816:	460b      	mov	r3, r1
 800b818:	4313      	orrs	r3, r2
 800b81a:	d03e      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b820:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b828:	d022      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b82a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b82e:	d81b      	bhi.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b830:	2b00      	cmp	r3, #0
 800b832:	d003      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b838:	d00b      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b83a:	e015      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b840:	3308      	adds	r3, #8
 800b842:	2100      	movs	r1, #0
 800b844:	4618      	mov	r0, r3
 800b846:	f001 fc0d 	bl	800d064 <RCCEx_PLL2_Config>
 800b84a:	4603      	mov	r3, r0
 800b84c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b850:	e00f      	b.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b856:	3328      	adds	r3, #40	; 0x28
 800b858:	2102      	movs	r1, #2
 800b85a:	4618      	mov	r0, r3
 800b85c:	f001 fcb4 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b860:	4603      	mov	r3, r0
 800b862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b866:	e004      	b.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b86e:	e000      	b.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b870:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10b      	bne.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b87a:	4b4b      	ldr	r3, [pc, #300]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b87e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b886:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b88a:	4a47      	ldr	r2, [pc, #284]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b88c:	430b      	orrs	r3, r1
 800b88e:	6593      	str	r3, [r2, #88]	; 0x58
 800b890:	e003      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b896:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b8a6:	67bb      	str	r3, [r7, #120]	; 0x78
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b8ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	d03b      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8c2:	d01f      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b8c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8c8:	d818      	bhi.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b8ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8ce:	d003      	beq.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b8d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8d4:	d007      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b8d6:	e011      	b.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8d8:	4b33      	ldr	r3, [pc, #204]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	4a32      	ldr	r2, [pc, #200]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b8e4:	e00f      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ea:	3328      	adds	r3, #40	; 0x28
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f001 fc6a 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b8fa:	e004      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b902:	e000      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b904:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10b      	bne.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b90e:	4b26      	ldr	r3, [pc, #152]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b912:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b91e:	4a22      	ldr	r2, [pc, #136]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b920:	430b      	orrs	r3, r1
 800b922:	6553      	str	r3, [r2, #84]	; 0x54
 800b924:	e003      	b.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b92a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b93a:	673b      	str	r3, [r7, #112]	; 0x70
 800b93c:	2300      	movs	r3, #0
 800b93e:	677b      	str	r3, [r7, #116]	; 0x74
 800b940:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b944:	460b      	mov	r3, r1
 800b946:	4313      	orrs	r3, r2
 800b948:	d034      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b950:	2b00      	cmp	r3, #0
 800b952:	d003      	beq.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b958:	d007      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b95a:	e011      	b.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b95c:	4b12      	ldr	r3, [pc, #72]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	4a11      	ldr	r2, [pc, #68]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b968:	e00e      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96e:	3308      	adds	r3, #8
 800b970:	2102      	movs	r1, #2
 800b972:	4618      	mov	r0, r3
 800b974:	f001 fb76 	bl	800d064 <RCCEx_PLL2_Config>
 800b978:	4603      	mov	r3, r0
 800b97a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b97e:	e003      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b986:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10d      	bne.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b990:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b99e:	4a02      	ldr	r2, [pc, #8]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9a4:	e006      	b.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b9a6:	bf00      	nop
 800b9a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b9c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b9c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	d00c      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d4:	3328      	adds	r3, #40	; 0x28
 800b9d6:	2102      	movs	r1, #2
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f001 fbf5 	bl	800d1c8 <RCCEx_PLL3_Config>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b9f6:	663b      	str	r3, [r7, #96]	; 0x60
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	667b      	str	r3, [r7, #100]	; 0x64
 800b9fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ba00:	460b      	mov	r3, r1
 800ba02:	4313      	orrs	r3, r2
 800ba04:	d038      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ba06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba12:	d018      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ba14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba18:	d811      	bhi.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ba1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba1e:	d014      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ba20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba24:	d80b      	bhi.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d011      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ba2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba2e:	d106      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba30:	4bc3      	ldr	r3, [pc, #780]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba34:	4ac2      	ldr	r2, [pc, #776]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ba3c:	e008      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba44:	e004      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ba46:	bf00      	nop
 800ba48:	e002      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ba4a:	bf00      	nop
 800ba4c:	e000      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ba4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10b      	bne.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba58:	4bb9      	ldr	r3, [pc, #740]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ba60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba68:	4ab5      	ldr	r2, [pc, #724]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba6a:	430b      	orrs	r3, r1
 800ba6c:	6553      	str	r3, [r2, #84]	; 0x54
 800ba6e:	e003      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ba78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ba84:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba86:	2300      	movs	r3, #0
 800ba88:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ba8e:	460b      	mov	r3, r1
 800ba90:	4313      	orrs	r3, r2
 800ba92:	d009      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba94:	4baa      	ldr	r3, [pc, #680]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baa2:	4aa7      	ldr	r2, [pc, #668]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baa4:	430b      	orrs	r3, r1
 800baa6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800baa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bab4:	653b      	str	r3, [r7, #80]	; 0x50
 800bab6:	2300      	movs	r3, #0
 800bab8:	657b      	str	r3, [r7, #84]	; 0x54
 800baba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800babe:	460b      	mov	r3, r1
 800bac0:	4313      	orrs	r3, r2
 800bac2:	d00a      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bac4:	4b9e      	ldr	r3, [pc, #632]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bad4:	4a9a      	ldr	r2, [pc, #616]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bad6:	430b      	orrs	r3, r1
 800bad8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bae6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bae8:	2300      	movs	r3, #0
 800baea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800baec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800baf0:	460b      	mov	r3, r1
 800baf2:	4313      	orrs	r3, r2
 800baf4:	d009      	beq.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800baf6:	4b92      	ldr	r3, [pc, #584]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb04:	4a8e      	ldr	r2, [pc, #568]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb06:	430b      	orrs	r3, r1
 800bb08:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bb0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb12:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bb16:	643b      	str	r3, [r7, #64]	; 0x40
 800bb18:	2300      	movs	r3, #0
 800bb1a:	647b      	str	r3, [r7, #68]	; 0x44
 800bb1c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bb20:	460b      	mov	r3, r1
 800bb22:	4313      	orrs	r3, r2
 800bb24:	d00e      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb26:	4b86      	ldr	r3, [pc, #536]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	4a85      	ldr	r2, [pc, #532]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb30:	6113      	str	r3, [r2, #16]
 800bb32:	4b83      	ldr	r3, [pc, #524]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb34:	6919      	ldr	r1, [r3, #16]
 800bb36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bb3e:	4a80      	ldr	r2, [pc, #512]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb40:	430b      	orrs	r3, r1
 800bb42:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bb44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bb50:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb52:	2300      	movs	r3, #0
 800bb54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb56:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	d009      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bb60:	4b77      	ldr	r3, [pc, #476]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb64:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb6e:	4a74      	ldr	r2, [pc, #464]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb70:	430b      	orrs	r3, r1
 800bb72:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bb74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bb80:	633b      	str	r3, [r7, #48]	; 0x30
 800bb82:	2300      	movs	r3, #0
 800bb84:	637b      	str	r3, [r7, #52]	; 0x34
 800bb86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	d00a      	beq.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bb90:	4b6b      	ldr	r3, [pc, #428]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb94:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bb98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bba0:	4a67      	ldr	r2, [pc, #412]	; (800bd40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bba2:	430b      	orrs	r3, r1
 800bba4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	2100      	movs	r1, #0
 800bbb0:	62b9      	str	r1, [r7, #40]	; 0x28
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbb8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	d011      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	2100      	movs	r1, #0
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 fa4a 	bl	800d064 <RCCEx_PLL2_Config>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bbd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bbe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	2100      	movs	r1, #0
 800bbf0:	6239      	str	r1, [r7, #32]
 800bbf2:	f003 0302 	and.w	r3, r3, #2
 800bbf6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbf8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	d011      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc06:	3308      	adds	r3, #8
 800bc08:	2101      	movs	r1, #1
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 fa2a 	bl	800d064 <RCCEx_PLL2_Config>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	2100      	movs	r1, #0
 800bc30:	61b9      	str	r1, [r7, #24]
 800bc32:	f003 0304 	and.w	r3, r3, #4
 800bc36:	61fb      	str	r3, [r7, #28]
 800bc38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	d011      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc46:	3308      	adds	r3, #8
 800bc48:	2102      	movs	r1, #2
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f001 fa0a 	bl	800d064 <RCCEx_PLL2_Config>
 800bc50:	4603      	mov	r3, r0
 800bc52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6e:	2100      	movs	r1, #0
 800bc70:	6139      	str	r1, [r7, #16]
 800bc72:	f003 0308 	and.w	r3, r3, #8
 800bc76:	617b      	str	r3, [r7, #20]
 800bc78:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	d011      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc86:	3328      	adds	r3, #40	; 0x28
 800bc88:	2100      	movs	r1, #0
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f001 fa9c 	bl	800d1c8 <RCCEx_PLL3_Config>
 800bc90:	4603      	mov	r3, r0
 800bc92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bc96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d003      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	2100      	movs	r1, #0
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	f003 0310 	and.w	r3, r3, #16
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	d011      	beq.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc6:	3328      	adds	r3, #40	; 0x28
 800bcc8:	2101      	movs	r1, #1
 800bcca:	4618      	mov	r0, r3
 800bccc:	f001 fa7c 	bl	800d1c8 <RCCEx_PLL3_Config>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bcd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d003      	beq.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bce2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcee:	2100      	movs	r1, #0
 800bcf0:	6039      	str	r1, [r7, #0]
 800bcf2:	f003 0320 	and.w	r3, r3, #32
 800bcf6:	607b      	str	r3, [r7, #4]
 800bcf8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	d011      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd06:	3328      	adds	r3, #40	; 0x28
 800bd08:	2102      	movs	r1, #2
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f001 fa5c 	bl	800d1c8 <RCCEx_PLL3_Config>
 800bd10:	4603      	mov	r3, r0
 800bd12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bd26:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	e000      	b.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd40:	58024400 	.word	0x58024400

0800bd44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b090      	sub	sp, #64	; 0x40
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bd4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd52:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bd56:	430b      	orrs	r3, r1
 800bd58:	f040 8094 	bne.w	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bd5c:	4b9e      	ldr	r3, [pc, #632]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd60:	f003 0307 	and.w	r3, r3, #7
 800bd64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd68:	2b04      	cmp	r3, #4
 800bd6a:	f200 8087 	bhi.w	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bd6e:	a201      	add	r2, pc, #4	; (adr r2, 800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd74:	0800bd89 	.word	0x0800bd89
 800bd78:	0800bdb1 	.word	0x0800bdb1
 800bd7c:	0800bdd9 	.word	0x0800bdd9
 800bd80:	0800be75 	.word	0x0800be75
 800bd84:	0800be01 	.word	0x0800be01
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd88:	4b93      	ldr	r3, [pc, #588]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd94:	d108      	bne.n	800bda8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f001 f810 	bl	800cdc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bda4:	f000 bd45 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdac:	f000 bd41 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdb0:	4b89      	ldr	r3, [pc, #548]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdbc:	d108      	bne.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdbe:	f107 0318 	add.w	r3, r7, #24
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 fd54 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdcc:	f000 bd31 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdd4:	f000 bd2d 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdd8:	4b7f      	ldr	r3, [pc, #508]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bde0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bde4:	d108      	bne.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bde6:	f107 030c 	add.w	r3, r7, #12
 800bdea:	4618      	mov	r0, r3
 800bdec:	f000 fe94 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdf4:	f000 bd1d 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdfc:	f000 bd19 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be00:	4b75      	ldr	r3, [pc, #468]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be08:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be0a:	4b73      	ldr	r3, [pc, #460]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f003 0304 	and.w	r3, r3, #4
 800be12:	2b04      	cmp	r3, #4
 800be14:	d10c      	bne.n	800be30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800be16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d109      	bne.n	800be30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be1c:	4b6e      	ldr	r3, [pc, #440]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	08db      	lsrs	r3, r3, #3
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	4a6d      	ldr	r2, [pc, #436]	; (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be28:	fa22 f303 	lsr.w	r3, r2, r3
 800be2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be2e:	e01f      	b.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be30:	4b69      	ldr	r3, [pc, #420]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be3c:	d106      	bne.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800be3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be44:	d102      	bne.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be46:	4b66      	ldr	r3, [pc, #408]	; (800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800be48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be4a:	e011      	b.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be4c:	4b62      	ldr	r3, [pc, #392]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be58:	d106      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800be5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be60:	d102      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be62:	4b60      	ldr	r3, [pc, #384]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800be64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be66:	e003      	b.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be6c:	f000 bce1 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800be70:	f000 bcdf 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be74:	4b5c      	ldr	r3, [pc, #368]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800be76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be78:	f000 bcdb 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be80:	f000 bcd7 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800be84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be88:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800be8c:	430b      	orrs	r3, r1
 800be8e:	f040 80ad 	bne.w	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800be92:	4b51      	ldr	r3, [pc, #324]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800be9a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea2:	d056      	beq.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beaa:	f200 8090 	bhi.w	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb0:	2bc0      	cmp	r3, #192	; 0xc0
 800beb2:	f000 8088 	beq.w	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	2bc0      	cmp	r3, #192	; 0xc0
 800beba:	f200 8088 	bhi.w	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	2b80      	cmp	r3, #128	; 0x80
 800bec2:	d032      	beq.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	2b80      	cmp	r3, #128	; 0x80
 800bec8:	f200 8081 	bhi.w	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d003      	beq.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed4:	2b40      	cmp	r3, #64	; 0x40
 800bed6:	d014      	beq.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bed8:	e079      	b.n	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800beda:	4b3f      	ldr	r3, [pc, #252]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bee6:	d108      	bne.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beec:	4618      	mov	r0, r3
 800beee:	f000 ff67 	bl	800cdc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bef6:	f000 bc9c 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800befa:	2300      	movs	r3, #0
 800befc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800befe:	f000 bc98 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf02:	4b35      	ldr	r3, [pc, #212]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf0e:	d108      	bne.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf10:	f107 0318 	add.w	r3, r7, #24
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 fcab 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf1e:	f000 bc88 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf22:	2300      	movs	r3, #0
 800bf24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf26:	f000 bc84 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf2a:	4b2b      	ldr	r3, [pc, #172]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf36:	d108      	bne.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf38:	f107 030c 	add.w	r3, r7, #12
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f000 fdeb 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf46:	f000 bc74 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf4e:	f000 bc70 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf52:	4b21      	ldr	r3, [pc, #132]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf5c:	4b1e      	ldr	r3, [pc, #120]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	d10c      	bne.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf6e:	4b1a      	ldr	r3, [pc, #104]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	08db      	lsrs	r3, r3, #3
 800bf74:	f003 0303 	and.w	r3, r3, #3
 800bf78:	4a18      	ldr	r2, [pc, #96]	; (800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf7a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf80:	e01f      	b.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf82:	4b15      	ldr	r3, [pc, #84]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf8e:	d106      	bne.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf96:	d102      	bne.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf98:	4b11      	ldr	r3, [pc, #68]	; (800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf9c:	e011      	b.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf9e:	4b0e      	ldr	r3, [pc, #56]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfaa:	d106      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfb2:	d102      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfb4:	4b0b      	ldr	r3, [pc, #44]	; (800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb8:	e003      	b.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfbe:	f000 bc38 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bfc2:	f000 bc36 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfc6:	4b08      	ldr	r3, [pc, #32]	; (800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfca:	f000 bc32 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfd2:	f000 bc2e 	b.w	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bfd6:	bf00      	nop
 800bfd8:	58024400 	.word	0x58024400
 800bfdc:	03d09000 	.word	0x03d09000
 800bfe0:	003d0900 	.word	0x003d0900
 800bfe4:	017d7840 	.word	0x017d7840
 800bfe8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bfec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bff0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bff4:	430b      	orrs	r3, r1
 800bff6:	f040 809c 	bne.w	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bffa:	4b9e      	ldr	r3, [pc, #632]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bffe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c002:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c006:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c00a:	d054      	beq.n	800c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c012:	f200 808b 	bhi.w	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c01c:	f000 8083 	beq.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c022:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c026:	f200 8081 	bhi.w	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c030:	d02f      	beq.n	800c092 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c038:	d878      	bhi.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d004      	beq.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c046:	d012      	beq.n	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c048:	e070      	b.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c04a:	4b8a      	ldr	r3, [pc, #552]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c056:	d107      	bne.n	800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 feaf 	bl	800cdc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c066:	e3e4      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c068:	2300      	movs	r3, #0
 800c06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c06c:	e3e1      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c06e:	4b81      	ldr	r3, [pc, #516]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c07a:	d107      	bne.n	800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c07c:	f107 0318 	add.w	r3, r7, #24
 800c080:	4618      	mov	r0, r3
 800c082:	f000 fbf5 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c08a:	e3d2      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c090:	e3cf      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c092:	4b78      	ldr	r3, [pc, #480]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c09a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c09e:	d107      	bne.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0a0:	f107 030c 	add.w	r3, r7, #12
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 fd37 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0ae:	e3c0      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b4:	e3bd      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0b6:	4b6f      	ldr	r3, [pc, #444]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0c0:	4b6c      	ldr	r3, [pc, #432]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 0304 	and.w	r3, r3, #4
 800c0c8:	2b04      	cmp	r3, #4
 800c0ca:	d10c      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d109      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0d2:	4b68      	ldr	r3, [pc, #416]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	08db      	lsrs	r3, r3, #3
 800c0d8:	f003 0303 	and.w	r3, r3, #3
 800c0dc:	4a66      	ldr	r2, [pc, #408]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c0de:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0e4:	e01e      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0e6:	4b63      	ldr	r3, [pc, #396]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f2:	d106      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0fa:	d102      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0fc:	4b5f      	ldr	r3, [pc, #380]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c100:	e010      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c102:	4b5c      	ldr	r3, [pc, #368]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c10a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c10e:	d106      	bne.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c116:	d102      	bne.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c118:	4b59      	ldr	r3, [pc, #356]	; (800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c11a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c11c:	e002      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c11e:	2300      	movs	r3, #0
 800c120:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c122:	e386      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c124:	e385      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c126:	4b57      	ldr	r3, [pc, #348]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c12a:	e382      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c12c:	2300      	movs	r3, #0
 800c12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c130:	e37f      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c132:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c136:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c13a:	430b      	orrs	r3, r1
 800c13c:	f040 80a7 	bne.w	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c140:	4b4c      	ldr	r3, [pc, #304]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c144:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c148:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c150:	d055      	beq.n	800c1fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c158:	f200 8096 	bhi.w	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c162:	f000 8084 	beq.w	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c16c:	f200 808c 	bhi.w	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c176:	d030      	beq.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c17e:	f200 8083 	bhi.w	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	2b00      	cmp	r3, #0
 800c186:	d004      	beq.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c18e:	d012      	beq.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c190:	e07a      	b.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c192:	4b38      	ldr	r3, [pc, #224]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c19a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c19e:	d107      	bne.n	800c1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f000 fe0b 	bl	800cdc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ae:	e340      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b4:	e33d      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1b6:	4b2f      	ldr	r3, [pc, #188]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1c2:	d107      	bne.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1c4:	f107 0318 	add.w	r3, r7, #24
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f000 fb51 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d2:	e32e      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d8:	e32b      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1da:	4b26      	ldr	r3, [pc, #152]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1e6:	d107      	bne.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1e8:	f107 030c 	add.w	r3, r7, #12
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f000 fc93 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1f6:	e31c      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1fc:	e319      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1fe:	4b1d      	ldr	r3, [pc, #116]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c202:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c206:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c208:	4b1a      	ldr	r3, [pc, #104]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f003 0304 	and.w	r3, r3, #4
 800c210:	2b04      	cmp	r3, #4
 800c212:	d10c      	bne.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c216:	2b00      	cmp	r3, #0
 800c218:	d109      	bne.n	800c22e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c21a:	4b16      	ldr	r3, [pc, #88]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	08db      	lsrs	r3, r3, #3
 800c220:	f003 0303 	and.w	r3, r3, #3
 800c224:	4a14      	ldr	r2, [pc, #80]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c226:	fa22 f303 	lsr.w	r3, r2, r3
 800c22a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c22c:	e01e      	b.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c22e:	4b11      	ldr	r3, [pc, #68]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c23a:	d106      	bne.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c242:	d102      	bne.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c244:	4b0d      	ldr	r3, [pc, #52]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c246:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c248:	e010      	b.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c24a:	4b0a      	ldr	r3, [pc, #40]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c256:	d106      	bne.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c25e:	d102      	bne.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c260:	4b07      	ldr	r3, [pc, #28]	; (800c280 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c262:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c264:	e002      	b.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c26a:	e2e2      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c26c:	e2e1      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c26e:	4b05      	ldr	r3, [pc, #20]	; (800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c272:	e2de      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c274:	58024400 	.word	0x58024400
 800c278:	03d09000 	.word	0x03d09000
 800c27c:	003d0900 	.word	0x003d0900
 800c280:	017d7840 	.word	0x017d7840
 800c284:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c288:	2300      	movs	r3, #0
 800c28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c28c:	e2d1      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c28e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c292:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c296:	430b      	orrs	r3, r1
 800c298:	f040 809c 	bne.w	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c29c:	4b93      	ldr	r3, [pc, #588]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c2a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2ac:	d054      	beq.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2b4:	f200 808b 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c2be:	f000 8083 	beq.w	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c2c8:	f200 8081 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2d2:	d02f      	beq.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2da:	d878      	bhi.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d004      	beq.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e8:	d012      	beq.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c2ea:	e070      	b.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2ec:	4b7f      	ldr	r3, [pc, #508]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2f8:	d107      	bne.n	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 fd5e 	bl	800cdc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c308:	e293      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c30e:	e290      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c310:	4b76      	ldr	r3, [pc, #472]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c31c:	d107      	bne.n	800c32e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c31e:	f107 0318 	add.w	r3, r7, #24
 800c322:	4618      	mov	r0, r3
 800c324:	f000 faa4 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c32c:	e281      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c32e:	2300      	movs	r3, #0
 800c330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c332:	e27e      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c334:	4b6d      	ldr	r3, [pc, #436]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c33c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c340:	d107      	bne.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c342:	f107 030c 	add.w	r3, r7, #12
 800c346:	4618      	mov	r0, r3
 800c348:	f000 fbe6 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c350:	e26f      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c356:	e26c      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c358:	4b64      	ldr	r3, [pc, #400]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c35a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c35c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c360:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c362:	4b62      	ldr	r3, [pc, #392]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 0304 	and.w	r3, r3, #4
 800c36a:	2b04      	cmp	r3, #4
 800c36c:	d10c      	bne.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c370:	2b00      	cmp	r3, #0
 800c372:	d109      	bne.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c374:	4b5d      	ldr	r3, [pc, #372]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	08db      	lsrs	r3, r3, #3
 800c37a:	f003 0303 	and.w	r3, r3, #3
 800c37e:	4a5c      	ldr	r2, [pc, #368]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c380:	fa22 f303 	lsr.w	r3, r2, r3
 800c384:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c386:	e01e      	b.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c388:	4b58      	ldr	r3, [pc, #352]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c394:	d106      	bne.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c39c:	d102      	bne.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c39e:	4b55      	ldr	r3, [pc, #340]	; (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a2:	e010      	b.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3a4:	4b51      	ldr	r3, [pc, #324]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3b0:	d106      	bne.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3b8:	d102      	bne.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c3ba:	4b4f      	ldr	r3, [pc, #316]	; (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3be:	e002      	b.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3c4:	e235      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3c6:	e234      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3c8:	4b4c      	ldr	r3, [pc, #304]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3cc:	e231      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3d2:	e22e      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c3d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3d8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c3dc:	430b      	orrs	r3, r1
 800c3de:	f040 808f 	bne.w	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c3e2:	4b42      	ldr	r3, [pc, #264]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c3ea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3f2:	d06b      	beq.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3fa:	d874      	bhi.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c402:	d056      	beq.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c40a:	d86c      	bhi.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c412:	d03b      	beq.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c416:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c41a:	d864      	bhi.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c422:	d021      	beq.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c42a:	d85c      	bhi.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d004      	beq.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c438:	d004      	beq.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c43a:	e054      	b.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c43c:	f7fe fa0a 	bl	800a854 <HAL_RCC_GetPCLK1Freq>
 800c440:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c442:	e1f6      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c444:	4b29      	ldr	r3, [pc, #164]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c44c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c450:	d107      	bne.n	800c462 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c452:	f107 0318 	add.w	r3, r7, #24
 800c456:	4618      	mov	r0, r3
 800c458:	f000 fa0a 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c460:	e1e7      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c462:	2300      	movs	r3, #0
 800c464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c466:	e1e4      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c468:	4b20      	ldr	r3, [pc, #128]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c474:	d107      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c476:	f107 030c 	add.w	r3, r7, #12
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 fb4c 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c484:	e1d5      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48a:	e1d2      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c48c:	4b17      	ldr	r3, [pc, #92]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b04      	cmp	r3, #4
 800c496:	d109      	bne.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c498:	4b14      	ldr	r3, [pc, #80]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	08db      	lsrs	r3, r3, #3
 800c49e:	f003 0303 	and.w	r3, r3, #3
 800c4a2:	4a13      	ldr	r2, [pc, #76]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c4a4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4aa:	e1c2      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b0:	e1bf      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c4b2:	4b0e      	ldr	r3, [pc, #56]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4be:	d102      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c4c0:	4b0c      	ldr	r3, [pc, #48]	; (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4c4:	e1b5      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ca:	e1b2      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4cc:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4d8:	d102      	bne.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4de:	e1a8      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e4:	e1a5      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ea:	e1a2      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4ec:	58024400 	.word	0x58024400
 800c4f0:	03d09000 	.word	0x03d09000
 800c4f4:	003d0900 	.word	0x003d0900
 800c4f8:	017d7840 	.word	0x017d7840
 800c4fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c500:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c504:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c508:	430b      	orrs	r3, r1
 800c50a:	d173      	bne.n	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c50c:	4b9c      	ldr	r3, [pc, #624]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c514:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c51c:	d02f      	beq.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c524:	d863      	bhi.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d004      	beq.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c532:	d012      	beq.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c534:	e05b      	b.n	800c5ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c536:	4b92      	ldr	r3, [pc, #584]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c53e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c542:	d107      	bne.n	800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c544:	f107 0318 	add.w	r3, r7, #24
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 f991 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c552:	e16e      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c554:	2300      	movs	r3, #0
 800c556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c558:	e16b      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c55a:	4b89      	ldr	r3, [pc, #548]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c566:	d107      	bne.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c568:	f107 030c 	add.w	r3, r7, #12
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 fad3 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c576:	e15c      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c578:	2300      	movs	r3, #0
 800c57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c57c:	e159      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c57e:	4b80      	ldr	r3, [pc, #512]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c582:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c586:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c588:	4b7d      	ldr	r3, [pc, #500]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 0304 	and.w	r3, r3, #4
 800c590:	2b04      	cmp	r3, #4
 800c592:	d10c      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c596:	2b00      	cmp	r3, #0
 800c598:	d109      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c59a:	4b79      	ldr	r3, [pc, #484]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	08db      	lsrs	r3, r3, #3
 800c5a0:	f003 0303 	and.w	r3, r3, #3
 800c5a4:	4a77      	ldr	r2, [pc, #476]	; (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c5a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ac:	e01e      	b.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5ae:	4b74      	ldr	r3, [pc, #464]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5ba:	d106      	bne.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5c2:	d102      	bne.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5c4:	4b70      	ldr	r3, [pc, #448]	; (800c788 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5c8:	e010      	b.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5ca:	4b6d      	ldr	r3, [pc, #436]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5d6:	d106      	bne.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5de:	d102      	bne.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5e0:	4b6a      	ldr	r3, [pc, #424]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e4:	e002      	b.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5ea:	e122      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5ec:	e121      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f2:	e11e      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c5f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5f8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	d133      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c600:	4b5f      	ldr	r3, [pc, #380]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c608:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d004      	beq.n	800c61a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c616:	d012      	beq.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c618:	e023      	b.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c61a:	4b59      	ldr	r3, [pc, #356]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c626:	d107      	bne.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 fbc7 	bl	800cdc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c636:	e0fc      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c63c:	e0f9      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c63e:	4b50      	ldr	r3, [pc, #320]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c64a:	d107      	bne.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c64c:	f107 0318 	add.w	r3, r7, #24
 800c650:	4618      	mov	r0, r3
 800c652:	f000 f90d 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c656:	6a3b      	ldr	r3, [r7, #32]
 800c658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c65a:	e0ea      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c65c:	2300      	movs	r3, #0
 800c65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c660:	e0e7      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c666:	e0e4      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c66c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c670:	430b      	orrs	r3, r1
 800c672:	f040 808d 	bne.w	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c676:	4b42      	ldr	r3, [pc, #264]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c67a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c67e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c686:	d06b      	beq.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c68e:	d874      	bhi.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c696:	d056      	beq.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c69e:	d86c      	bhi.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6a6:	d03b      	beq.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6ae:	d864      	bhi.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6b6:	d021      	beq.n	800c6fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6be:	d85c      	bhi.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d004      	beq.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6cc:	d004      	beq.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c6ce:	e054      	b.n	800c77a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c6d0:	f000 f8b8 	bl	800c844 <HAL_RCCEx_GetD3PCLK1Freq>
 800c6d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6d6:	e0ac      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6d8:	4b29      	ldr	r3, [pc, #164]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6e4:	d107      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6e6:	f107 0318 	add.w	r3, r7, #24
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 f8c0 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6f4:	e09d      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6fa:	e09a      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6fc:	4b20      	ldr	r3, [pc, #128]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c708:	d107      	bne.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c70a:	f107 030c 	add.w	r3, r7, #12
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 fa02 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c718:	e08b      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c71e:	e088      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c720:	4b17      	ldr	r3, [pc, #92]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 0304 	and.w	r3, r3, #4
 800c728:	2b04      	cmp	r3, #4
 800c72a:	d109      	bne.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c72c:	4b14      	ldr	r3, [pc, #80]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	08db      	lsrs	r3, r3, #3
 800c732:	f003 0303 	and.w	r3, r3, #3
 800c736:	4a13      	ldr	r2, [pc, #76]	; (800c784 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c738:	fa22 f303 	lsr.w	r3, r2, r3
 800c73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c73e:	e078      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c744:	e075      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c746:	4b0e      	ldr	r3, [pc, #56]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c752:	d102      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c754:	4b0c      	ldr	r3, [pc, #48]	; (800c788 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c758:	e06b      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75e:	e068      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c760:	4b07      	ldr	r3, [pc, #28]	; (800c780 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c76c:	d102      	bne.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c76e:	4b07      	ldr	r3, [pc, #28]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c772:	e05e      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c778:	e05b      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c77a:	2300      	movs	r3, #0
 800c77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c77e:	e058      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c780:	58024400 	.word	0x58024400
 800c784:	03d09000 	.word	0x03d09000
 800c788:	003d0900 	.word	0x003d0900
 800c78c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c794:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c798:	430b      	orrs	r3, r1
 800c79a:	d148      	bne.n	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c79c:	4b27      	ldr	r3, [pc, #156]	; (800c83c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c79e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ac:	d02a      	beq.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7b4:	d838      	bhi.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d004      	beq.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7c2:	d00d      	beq.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c7c4:	e030      	b.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c7c6:	4b1d      	ldr	r3, [pc, #116]	; (800c83c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7d2:	d102      	bne.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c7d4:	4b1a      	ldr	r3, [pc, #104]	; (800c840 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7d8:	e02b      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7de:	e028      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7e0:	4b16      	ldr	r3, [pc, #88]	; (800c83c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7ec:	d107      	bne.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f000 fae4 	bl	800cdc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7fc:	e019      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c802:	e016      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c804:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c80c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c810:	d107      	bne.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c812:	f107 0318 	add.w	r3, r7, #24
 800c816:	4618      	mov	r0, r3
 800c818:	f000 f82a 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c820:	e007      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c822:	2300      	movs	r3, #0
 800c824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c826:	e004      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c82c:	e001      	b.n	800c832 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c834:	4618      	mov	r0, r3
 800c836:	3740      	adds	r7, #64	; 0x40
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	58024400 	.word	0x58024400
 800c840:	017d7840 	.word	0x017d7840

0800c844 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c848:	f7fd ffd4 	bl	800a7f4 <HAL_RCC_GetHCLKFreq>
 800c84c:	4602      	mov	r2, r0
 800c84e:	4b06      	ldr	r3, [pc, #24]	; (800c868 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c850:	6a1b      	ldr	r3, [r3, #32]
 800c852:	091b      	lsrs	r3, r3, #4
 800c854:	f003 0307 	and.w	r3, r3, #7
 800c858:	4904      	ldr	r1, [pc, #16]	; (800c86c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c85a:	5ccb      	ldrb	r3, [r1, r3]
 800c85c:	f003 031f 	and.w	r3, r3, #31
 800c860:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c864:	4618      	mov	r0, r3
 800c866:	bd80      	pop	{r7, pc}
 800c868:	58024400 	.word	0x58024400
 800c86c:	08016f80 	.word	0x08016f80

0800c870 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c870:	b480      	push	{r7}
 800c872:	b089      	sub	sp, #36	; 0x24
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c878:	4ba1      	ldr	r3, [pc, #644]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87c:	f003 0303 	and.w	r3, r3, #3
 800c880:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c882:	4b9f      	ldr	r3, [pc, #636]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c886:	0b1b      	lsrs	r3, r3, #12
 800c888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c88c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c88e:	4b9c      	ldr	r3, [pc, #624]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c892:	091b      	lsrs	r3, r3, #4
 800c894:	f003 0301 	and.w	r3, r3, #1
 800c898:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c89a:	4b99      	ldr	r3, [pc, #612]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89e:	08db      	lsrs	r3, r3, #3
 800c8a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8a4:	693a      	ldr	r2, [r7, #16]
 800c8a6:	fb02 f303 	mul.w	r3, r2, r3
 800c8aa:	ee07 3a90 	vmov	s15, r3
 800c8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 8111 	beq.w	800cae0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	f000 8083 	beq.w	800c9cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	f200 80a1 	bhi.w	800ca10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d003      	beq.n	800c8dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d056      	beq.n	800c988 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c8da:	e099      	b.n	800ca10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8dc:	4b88      	ldr	r3, [pc, #544]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 0320 	and.w	r3, r3, #32
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d02d      	beq.n	800c944 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8e8:	4b85      	ldr	r3, [pc, #532]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	08db      	lsrs	r3, r3, #3
 800c8ee:	f003 0303 	and.w	r3, r3, #3
 800c8f2:	4a84      	ldr	r2, [pc, #528]	; (800cb04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c8f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c8f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	ee07 3a90 	vmov	s15, r3
 800c900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	ee07 3a90 	vmov	s15, r3
 800c90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c912:	4b7b      	ldr	r3, [pc, #492]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c91a:	ee07 3a90 	vmov	s15, r3
 800c91e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c922:	ed97 6a03 	vldr	s12, [r7, #12]
 800c926:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c92a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c92e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c93a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c93e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c942:	e087      	b.n	800ca54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	ee07 3a90 	vmov	s15, r3
 800c94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c94e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c956:	4b6a      	ldr	r3, [pc, #424]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c95e:	ee07 3a90 	vmov	s15, r3
 800c962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c966:	ed97 6a03 	vldr	s12, [r7, #12]
 800c96a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c986:	e065      	b.n	800ca54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	ee07 3a90 	vmov	s15, r3
 800c98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c992:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c99a:	4b59      	ldr	r3, [pc, #356]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9a2:	ee07 3a90 	vmov	s15, r3
 800c9a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ca:	e043      	b.n	800ca54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9de:	4b48      	ldr	r3, [pc, #288]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca0e:	e021      	b.n	800ca54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	ee07 3a90 	vmov	s15, r3
 800ca16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca22:	4b37      	ldr	r3, [pc, #220]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca2a:	ee07 3a90 	vmov	s15, r3
 800ca2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca36:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ca54:	4b2a      	ldr	r3, [pc, #168]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca58:	0a5b      	lsrs	r3, r3, #9
 800ca5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca7a:	ee17 2a90 	vmov	r2, s15
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ca82:	4b1f      	ldr	r3, [pc, #124]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	0c1b      	lsrs	r3, r3, #16
 800ca88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca8c:	ee07 3a90 	vmov	s15, r3
 800ca90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800caa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caa8:	ee17 2a90 	vmov	r2, s15
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cab0:	4b13      	ldr	r3, [pc, #76]	; (800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab4:	0e1b      	lsrs	r3, r3, #24
 800cab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caba:	ee07 3a90 	vmov	s15, r3
 800cabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caca:	edd7 6a07 	vldr	s13, [r7, #28]
 800cace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cad6:	ee17 2a90 	vmov	r2, s15
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cade:	e008      	b.n	800caf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	609a      	str	r2, [r3, #8]
}
 800caf2:	bf00      	nop
 800caf4:	3724      	adds	r7, #36	; 0x24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	58024400 	.word	0x58024400
 800cb04:	03d09000 	.word	0x03d09000
 800cb08:	46000000 	.word	0x46000000
 800cb0c:	4c742400 	.word	0x4c742400
 800cb10:	4a742400 	.word	0x4a742400
 800cb14:	4bbebc20 	.word	0x4bbebc20

0800cb18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b089      	sub	sp, #36	; 0x24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb20:	4ba1      	ldr	r3, [pc, #644]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb24:	f003 0303 	and.w	r3, r3, #3
 800cb28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cb2a:	4b9f      	ldr	r3, [pc, #636]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2e:	0d1b      	lsrs	r3, r3, #20
 800cb30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cb36:	4b9c      	ldr	r3, [pc, #624]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3a:	0a1b      	lsrs	r3, r3, #8
 800cb3c:	f003 0301 	and.w	r3, r3, #1
 800cb40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cb42:	4b99      	ldr	r3, [pc, #612]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb46:	08db      	lsrs	r3, r3, #3
 800cb48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb4c:	693a      	ldr	r2, [r7, #16]
 800cb4e:	fb02 f303 	mul.w	r3, r2, r3
 800cb52:	ee07 3a90 	vmov	s15, r3
 800cb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 8111 	beq.w	800cd88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	f000 8083 	beq.w	800cc74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	f200 80a1 	bhi.w	800ccb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d003      	beq.n	800cb84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d056      	beq.n	800cc30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cb82:	e099      	b.n	800ccb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb84:	4b88      	ldr	r3, [pc, #544]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 0320 	and.w	r3, r3, #32
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d02d      	beq.n	800cbec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb90:	4b85      	ldr	r3, [pc, #532]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	08db      	lsrs	r3, r3, #3
 800cb96:	f003 0303 	and.w	r3, r3, #3
 800cb9a:	4a84      	ldr	r2, [pc, #528]	; (800cdac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cba0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	ee07 3a90 	vmov	s15, r3
 800cba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	ee07 3a90 	vmov	s15, r3
 800cbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbba:	4b7b      	ldr	r3, [pc, #492]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc2:	ee07 3a90 	vmov	s15, r3
 800cbc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbe6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cbea:	e087      	b.n	800ccfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	ee07 3a90 	vmov	s15, r3
 800cbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cbfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbfe:	4b6a      	ldr	r3, [pc, #424]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc06:	ee07 3a90 	vmov	s15, r3
 800cc0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc2e:	e065      	b.n	800ccfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	ee07 3a90 	vmov	s15, r3
 800cc36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cdb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc42:	4b59      	ldr	r3, [pc, #356]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc4a:	ee07 3a90 	vmov	s15, r3
 800cc4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc52:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc72:	e043      	b.n	800ccfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cdbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cc82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc86:	4b48      	ldr	r3, [pc, #288]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc8e:	ee07 3a90 	vmov	s15, r3
 800cc92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc96:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccb6:	e021      	b.n	800ccfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	ee07 3a90 	vmov	s15, r3
 800ccbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cdb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ccc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccca:	4b37      	ldr	r3, [pc, #220]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccd2:	ee07 3a90 	vmov	s15, r3
 800ccd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccda:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ccfc:	4b2a      	ldr	r3, [pc, #168]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd00:	0a5b      	lsrs	r3, r3, #9
 800cd02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd16:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd22:	ee17 2a90 	vmov	r2, s15
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cd2a:	4b1f      	ldr	r3, [pc, #124]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2e:	0c1b      	lsrs	r3, r3, #16
 800cd30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd34:	ee07 3a90 	vmov	s15, r3
 800cd38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd44:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd50:	ee17 2a90 	vmov	r2, s15
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cd58:	4b13      	ldr	r3, [pc, #76]	; (800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5c:	0e1b      	lsrs	r3, r3, #24
 800cd5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd72:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd7e:	ee17 2a90 	vmov	r2, s15
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cd86:	e008      	b.n	800cd9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	609a      	str	r2, [r3, #8]
}
 800cd9a:	bf00      	nop
 800cd9c:	3724      	adds	r7, #36	; 0x24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr
 800cda6:	bf00      	nop
 800cda8:	58024400 	.word	0x58024400
 800cdac:	03d09000 	.word	0x03d09000
 800cdb0:	46000000 	.word	0x46000000
 800cdb4:	4c742400 	.word	0x4c742400
 800cdb8:	4a742400 	.word	0x4a742400
 800cdbc:	4bbebc20 	.word	0x4bbebc20

0800cdc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b089      	sub	sp, #36	; 0x24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cdc8:	4ba0      	ldr	r3, [pc, #640]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdcc:	f003 0303 	and.w	r3, r3, #3
 800cdd0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cdd2:	4b9e      	ldr	r3, [pc, #632]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd6:	091b      	lsrs	r3, r3, #4
 800cdd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cddc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cdde:	4b9b      	ldr	r3, [pc, #620]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cde8:	4b98      	ldr	r3, [pc, #608]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdec:	08db      	lsrs	r3, r3, #3
 800cdee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	fb02 f303 	mul.w	r3, r2, r3
 800cdf8:	ee07 3a90 	vmov	s15, r3
 800cdfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f000 8111 	beq.w	800d02e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	f000 8083 	beq.w	800cf1a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	f200 80a1 	bhi.w	800cf5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d003      	beq.n	800ce2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d056      	beq.n	800ced6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ce28:	e099      	b.n	800cf5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce2a:	4b88      	ldr	r3, [pc, #544]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f003 0320 	and.w	r3, r3, #32
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d02d      	beq.n	800ce92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce36:	4b85      	ldr	r3, [pc, #532]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	08db      	lsrs	r3, r3, #3
 800ce3c:	f003 0303 	and.w	r3, r3, #3
 800ce40:	4a83      	ldr	r2, [pc, #524]	; (800d050 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ce42:	fa22 f303 	lsr.w	r3, r2, r3
 800ce46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	ee07 3a90 	vmov	s15, r3
 800ce4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	ee07 3a90 	vmov	s15, r3
 800ce58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce60:	4b7a      	ldr	r3, [pc, #488]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce68:	ee07 3a90 	vmov	s15, r3
 800ce6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce70:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce74:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce90:	e087      	b.n	800cfa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	ee07 3a90 	vmov	s15, r3
 800ce98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d058 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cea4:	4b69      	ldr	r3, [pc, #420]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceac:	ee07 3a90 	vmov	s15, r3
 800ceb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceb8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ced0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ced4:	e065      	b.n	800cfa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	ee07 3a90 	vmov	s15, r3
 800cedc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cee0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d05c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cee8:	4b58      	ldr	r3, [pc, #352]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cef0:	ee07 3a90 	vmov	s15, r3
 800cef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cef8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cefc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf18:	e043      	b.n	800cfa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	ee07 3a90 	vmov	s15, r3
 800cf20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf24:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d060 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cf28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf2c:	4b47      	ldr	r3, [pc, #284]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf34:	ee07 3a90 	vmov	s15, r3
 800cf38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf40:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf5c:	e021      	b.n	800cfa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	ee07 3a90 	vmov	s15, r3
 800cf64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf68:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d058 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf70:	4b36      	ldr	r3, [pc, #216]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf78:	ee07 3a90 	vmov	s15, r3
 800cf7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf80:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf84:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d054 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfa0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cfa2:	4b2a      	ldr	r3, [pc, #168]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa6:	0a5b      	lsrs	r3, r3, #9
 800cfa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfac:	ee07 3a90 	vmov	s15, r3
 800cfb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfc8:	ee17 2a90 	vmov	r2, s15
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cfd0:	4b1e      	ldr	r3, [pc, #120]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd4:	0c1b      	lsrs	r3, r3, #16
 800cfd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfda:	ee07 3a90 	vmov	s15, r3
 800cfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfea:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cff6:	ee17 2a90 	vmov	r2, s15
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cffe:	4b13      	ldr	r3, [pc, #76]	; (800d04c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d002:	0e1b      	lsrs	r3, r3, #24
 800d004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d008:	ee07 3a90 	vmov	s15, r3
 800d00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d014:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d018:	edd7 6a07 	vldr	s13, [r7, #28]
 800d01c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d024:	ee17 2a90 	vmov	r2, s15
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d02c:	e008      	b.n	800d040 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	609a      	str	r2, [r3, #8]
}
 800d040:	bf00      	nop
 800d042:	3724      	adds	r7, #36	; 0x24
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr
 800d04c:	58024400 	.word	0x58024400
 800d050:	03d09000 	.word	0x03d09000
 800d054:	46000000 	.word	0x46000000
 800d058:	4c742400 	.word	0x4c742400
 800d05c:	4a742400 	.word	0x4a742400
 800d060:	4bbebc20 	.word	0x4bbebc20

0800d064 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d072:	4b53      	ldr	r3, [pc, #332]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d076:	f003 0303 	and.w	r3, r3, #3
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	d101      	bne.n	800d082 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	e099      	b.n	800d1b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d082:	4b4f      	ldr	r3, [pc, #316]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a4e      	ldr	r2, [pc, #312]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d088:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d08c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d08e:	f7f6 fc9b 	bl	80039c8 <HAL_GetTick>
 800d092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d094:	e008      	b.n	800d0a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d096:	f7f6 fc97 	bl	80039c8 <HAL_GetTick>
 800d09a:	4602      	mov	r2, r0
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	1ad3      	subs	r3, r2, r3
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d901      	bls.n	800d0a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	e086      	b.n	800d1b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d0a8:	4b45      	ldr	r3, [pc, #276]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d1f0      	bne.n	800d096 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d0b4:	4b42      	ldr	r3, [pc, #264]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	031b      	lsls	r3, r3, #12
 800d0c2:	493f      	ldr	r1, [pc, #252]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	628b      	str	r3, [r1, #40]	; 0x28
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	025b      	lsls	r3, r3, #9
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	431a      	orrs	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	041b      	lsls	r3, r3, #16
 800d0e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d0ea:	431a      	orrs	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	061b      	lsls	r3, r3, #24
 800d0f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d0f8:	4931      	ldr	r1, [pc, #196]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d0fe:	4b30      	ldr	r3, [pc, #192]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d102:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	492d      	ldr	r1, [pc, #180]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d10c:	4313      	orrs	r3, r2
 800d10e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d110:	4b2b      	ldr	r3, [pc, #172]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d114:	f023 0220 	bic.w	r2, r3, #32
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	699b      	ldr	r3, [r3, #24]
 800d11c:	4928      	ldr	r1, [pc, #160]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d11e:	4313      	orrs	r3, r2
 800d120:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d122:	4b27      	ldr	r3, [pc, #156]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d126:	4a26      	ldr	r2, [pc, #152]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d128:	f023 0310 	bic.w	r3, r3, #16
 800d12c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d12e:	4b24      	ldr	r3, [pc, #144]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d132:	4b24      	ldr	r3, [pc, #144]	; (800d1c4 <RCCEx_PLL2_Config+0x160>)
 800d134:	4013      	ands	r3, r2
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	69d2      	ldr	r2, [r2, #28]
 800d13a:	00d2      	lsls	r2, r2, #3
 800d13c:	4920      	ldr	r1, [pc, #128]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d13e:	4313      	orrs	r3, r2
 800d140:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d142:	4b1f      	ldr	r3, [pc, #124]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d146:	4a1e      	ldr	r2, [pc, #120]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d148:	f043 0310 	orr.w	r3, r3, #16
 800d14c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d106      	bne.n	800d162 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d154:	4b1a      	ldr	r3, [pc, #104]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d158:	4a19      	ldr	r2, [pc, #100]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d15a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d15e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d160:	e00f      	b.n	800d182 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d106      	bne.n	800d176 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d168:	4b15      	ldr	r3, [pc, #84]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16c:	4a14      	ldr	r2, [pc, #80]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d16e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d172:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d174:	e005      	b.n	800d182 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d176:	4b12      	ldr	r3, [pc, #72]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17a:	4a11      	ldr	r2, [pc, #68]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d17c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d180:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d182:	4b0f      	ldr	r3, [pc, #60]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a0e      	ldr	r2, [pc, #56]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d188:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d18c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d18e:	f7f6 fc1b 	bl	80039c8 <HAL_GetTick>
 800d192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d194:	e008      	b.n	800d1a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d196:	f7f6 fc17 	bl	80039c8 <HAL_GetTick>
 800d19a:	4602      	mov	r2, r0
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	1ad3      	subs	r3, r2, r3
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d901      	bls.n	800d1a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	e006      	b.n	800d1b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d1a8:	4b05      	ldr	r3, [pc, #20]	; (800d1c0 <RCCEx_PLL2_Config+0x15c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d0f0      	beq.n	800d196 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	58024400 	.word	0x58024400
 800d1c4:	ffff0007 	.word	0xffff0007

0800d1c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d1d6:	4b53      	ldr	r3, [pc, #332]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1da:	f003 0303 	and.w	r3, r3, #3
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d101      	bne.n	800d1e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e099      	b.n	800d31a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d1e6:	4b4f      	ldr	r3, [pc, #316]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a4e      	ldr	r2, [pc, #312]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d1ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1f2:	f7f6 fbe9 	bl	80039c8 <HAL_GetTick>
 800d1f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d1f8:	e008      	b.n	800d20c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d1fa:	f7f6 fbe5 	bl	80039c8 <HAL_GetTick>
 800d1fe:	4602      	mov	r2, r0
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	1ad3      	subs	r3, r2, r3
 800d204:	2b02      	cmp	r3, #2
 800d206:	d901      	bls.n	800d20c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d208:	2303      	movs	r3, #3
 800d20a:	e086      	b.n	800d31a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d20c:	4b45      	ldr	r3, [pc, #276]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1f0      	bne.n	800d1fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d218:	4b42      	ldr	r3, [pc, #264]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	051b      	lsls	r3, r3, #20
 800d226:	493f      	ldr	r1, [pc, #252]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	628b      	str	r3, [r1, #40]	; 0x28
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	3b01      	subs	r3, #1
 800d232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	3b01      	subs	r3, #1
 800d23c:	025b      	lsls	r3, r3, #9
 800d23e:	b29b      	uxth	r3, r3
 800d240:	431a      	orrs	r2, r3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	3b01      	subs	r3, #1
 800d248:	041b      	lsls	r3, r3, #16
 800d24a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d24e:	431a      	orrs	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	3b01      	subs	r3, #1
 800d256:	061b      	lsls	r3, r3, #24
 800d258:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d25c:	4931      	ldr	r1, [pc, #196]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d25e:	4313      	orrs	r3, r2
 800d260:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d262:	4b30      	ldr	r3, [pc, #192]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	695b      	ldr	r3, [r3, #20]
 800d26e:	492d      	ldr	r1, [pc, #180]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d270:	4313      	orrs	r3, r2
 800d272:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d274:	4b2b      	ldr	r3, [pc, #172]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d278:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	699b      	ldr	r3, [r3, #24]
 800d280:	4928      	ldr	r1, [pc, #160]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d282:	4313      	orrs	r3, r2
 800d284:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d286:	4b27      	ldr	r3, [pc, #156]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28a:	4a26      	ldr	r2, [pc, #152]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d28c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d290:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d292:	4b24      	ldr	r3, [pc, #144]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d296:	4b24      	ldr	r3, [pc, #144]	; (800d328 <RCCEx_PLL3_Config+0x160>)
 800d298:	4013      	ands	r3, r2
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	69d2      	ldr	r2, [r2, #28]
 800d29e:	00d2      	lsls	r2, r2, #3
 800d2a0:	4920      	ldr	r1, [pc, #128]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d2a6:	4b1f      	ldr	r3, [pc, #124]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2aa:	4a1e      	ldr	r2, [pc, #120]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d106      	bne.n	800d2c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d2b8:	4b1a      	ldr	r3, [pc, #104]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2bc:	4a19      	ldr	r2, [pc, #100]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d2c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d2c4:	e00f      	b.n	800d2e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d106      	bne.n	800d2da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d2cc:	4b15      	ldr	r3, [pc, #84]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d0:	4a14      	ldr	r2, [pc, #80]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d2d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d2d8:	e005      	b.n	800d2e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d2da:	4b12      	ldr	r3, [pc, #72]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	4a11      	ldr	r2, [pc, #68]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d2e6:	4b0f      	ldr	r3, [pc, #60]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a0e      	ldr	r2, [pc, #56]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d2ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2f2:	f7f6 fb69 	bl	80039c8 <HAL_GetTick>
 800d2f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d2f8:	e008      	b.n	800d30c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d2fa:	f7f6 fb65 	bl	80039c8 <HAL_GetTick>
 800d2fe:	4602      	mov	r2, r0
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	1ad3      	subs	r3, r2, r3
 800d304:	2b02      	cmp	r3, #2
 800d306:	d901      	bls.n	800d30c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d308:	2303      	movs	r3, #3
 800d30a:	e006      	b.n	800d31a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d30c:	4b05      	ldr	r3, [pc, #20]	; (800d324 <RCCEx_PLL3_Config+0x15c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d314:	2b00      	cmp	r3, #0
 800d316:	d0f0      	beq.n	800d2fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d318:	7bfb      	ldrb	r3, [r7, #15]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	58024400 	.word	0x58024400
 800d328:	ffff0007 	.word	0xffff0007

0800d32c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d071      	beq.n	800d422 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d344:	b2db      	uxtb	r3, r3
 800d346:	2b00      	cmp	r3, #0
 800d348:	d106      	bne.n	800d358 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f7f5 fdfc 	bl	8002f50 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2202      	movs	r2, #2
 800d35c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	f003 0310 	and.w	r3, r3, #16
 800d36a:	2b10      	cmp	r3, #16
 800d36c:	d050      	beq.n	800d410 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	22ca      	movs	r2, #202	; 0xca
 800d374:	625a      	str	r2, [r3, #36]	; 0x24
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2253      	movs	r2, #83	; 0x53
 800d37c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 fa4a 	bl	800d818 <RTC_EnterInitMode>
 800d384:	4603      	mov	r3, r0
 800d386:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d388:	7bfb      	ldrb	r3, [r7, #15]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d124      	bne.n	800d3d8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	6899      	ldr	r1, [r3, #8]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	4b24      	ldr	r3, [pc, #144]	; (800d42c <HAL_RTC_Init+0x100>)
 800d39a:	400b      	ands	r3, r1
 800d39c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	6899      	ldr	r1, [r3, #8]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	685a      	ldr	r2, [r3, #4]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	431a      	orrs	r2, r3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	431a      	orrs	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	430a      	orrs	r2, r1
 800d3ba:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	0419      	lsls	r1, r3, #16
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68da      	ldr	r2, [r3, #12]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	430a      	orrs	r2, r1
 800d3cc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 fa56 	bl	800d880 <RTC_ExitInitMode>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d3d8:	7bfb      	ldrb	r3, [r7, #15]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d113      	bne.n	800d406 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f022 0203 	bic.w	r2, r2, #3
 800d3ec:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	69da      	ldr	r2, [r3, #28]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	431a      	orrs	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	430a      	orrs	r2, r1
 800d404:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	22ff      	movs	r2, #255	; 0xff
 800d40c:	625a      	str	r2, [r3, #36]	; 0x24
 800d40e:	e001      	b.n	800d414 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d410:	2300      	movs	r3, #0
 800d412:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d103      	bne.n	800d422 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d422:	7bfb      	ldrb	r3, [r7, #15]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	ff8fffbf 	.word	0xff8fffbf

0800d430 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d430:	b590      	push	{r4, r7, lr}
 800d432:	b087      	sub	sp, #28
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d442:	2b01      	cmp	r3, #1
 800d444:	d101      	bne.n	800d44a <HAL_RTC_SetTime+0x1a>
 800d446:	2302      	movs	r3, #2
 800d448:	e089      	b.n	800d55e <HAL_RTC_SetTime+0x12e>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2201      	movs	r2, #1
 800d44e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2202      	movs	r2, #2
 800d456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	22ca      	movs	r2, #202	; 0xca
 800d460:	625a      	str	r2, [r3, #36]	; 0x24
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2253      	movs	r2, #83	; 0x53
 800d468:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f000 f9d4 	bl	800d818 <RTC_EnterInitMode>
 800d470:	4603      	mov	r3, r0
 800d472:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d474:	7cfb      	ldrb	r3, [r7, #19]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d161      	bne.n	800d53e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d126      	bne.n	800d4ce <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d102      	bne.n	800d494 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	2200      	movs	r2, #0
 800d492:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	4618      	mov	r0, r3
 800d49a:	f000 fa2f 	bl	800d8fc <RTC_ByteToBcd2>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	785b      	ldrb	r3, [r3, #1]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f000 fa28 	bl	800d8fc <RTC_ByteToBcd2>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d4b0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	789b      	ldrb	r3, [r3, #2]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f000 fa20 	bl	800d8fc <RTC_ByteToBcd2>
 800d4bc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d4be:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	78db      	ldrb	r3, [r3, #3]
 800d4c6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	617b      	str	r3, [r7, #20]
 800d4cc:	e018      	b.n	800d500 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d102      	bne.n	800d4e2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	785b      	ldrb	r3, [r3, #1]
 800d4ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d4ee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d4f4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	78db      	ldrb	r3, [r3, #3]
 800d4fa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	6979      	ldr	r1, [r7, #20]
 800d506:	4b18      	ldr	r3, [pc, #96]	; (800d568 <HAL_RTC_SetTime+0x138>)
 800d508:	400b      	ands	r3, r1
 800d50a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	689a      	ldr	r2, [r3, #8]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d51a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	6899      	ldr	r1, [r3, #8]
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	68da      	ldr	r2, [r3, #12]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	431a      	orrs	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	430a      	orrs	r2, r1
 800d532:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f000 f9a3 	bl	800d880 <RTC_ExitInitMode>
 800d53a:	4603      	mov	r3, r0
 800d53c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	22ff      	movs	r2, #255	; 0xff
 800d544:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d546:	7cfb      	ldrb	r3, [r7, #19]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d103      	bne.n	800d554 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d55c:	7cfb      	ldrb	r3, [r7, #19]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	371c      	adds	r7, #28
 800d562:	46bd      	mov	sp, r7
 800d564:	bd90      	pop	{r4, r7, pc}
 800d566:	bf00      	nop
 800d568:	007f7f7f 	.word	0x007f7f7f

0800d56c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	691b      	ldr	r3, [r3, #16]
 800d588:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	4b22      	ldr	r3, [pc, #136]	; (800d620 <HAL_RTC_GetTime+0xb4>)
 800d598:	4013      	ands	r3, r2
 800d59a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	0c1b      	lsrs	r3, r3, #16
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5a6:	b2da      	uxtb	r2, r3
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	0a1b      	lsrs	r3, r3, #8
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5c4:	b2da      	uxtb	r2, r3
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	0d9b      	lsrs	r3, r3, #22
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	f003 0301 	and.w	r3, r3, #1
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d11a      	bne.n	800d616 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f000 f9a9 	bl	800d93c <RTC_Bcd2ToByte>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	785b      	ldrb	r3, [r3, #1]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 f9a0 	bl	800d93c <RTC_Bcd2ToByte>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	461a      	mov	r2, r3
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	789b      	ldrb	r3, [r3, #2]
 800d608:	4618      	mov	r0, r3
 800d60a:	f000 f997 	bl	800d93c <RTC_Bcd2ToByte>
 800d60e:	4603      	mov	r3, r0
 800d610:	461a      	mov	r2, r3
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3718      	adds	r7, #24
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	007f7f7f 	.word	0x007f7f7f

0800d624 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d624:	b590      	push	{r4, r7, lr}
 800d626:	b087      	sub	sp, #28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d101      	bne.n	800d63e <HAL_RTC_SetDate+0x1a>
 800d63a:	2302      	movs	r3, #2
 800d63c:	e073      	b.n	800d726 <HAL_RTC_SetDate+0x102>
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2201      	movs	r2, #1
 800d642:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2202      	movs	r2, #2
 800d64a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d10e      	bne.n	800d672 <HAL_RTC_SetDate+0x4e>
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	785b      	ldrb	r3, [r3, #1]
 800d658:	f003 0310 	and.w	r3, r3, #16
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d008      	beq.n	800d672 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	785b      	ldrb	r3, [r3, #1]
 800d664:	f023 0310 	bic.w	r3, r3, #16
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	330a      	adds	r3, #10
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d11c      	bne.n	800d6b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	78db      	ldrb	r3, [r3, #3]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f000 f93d 	bl	800d8fc <RTC_ByteToBcd2>
 800d682:	4603      	mov	r3, r0
 800d684:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	785b      	ldrb	r3, [r3, #1]
 800d68a:	4618      	mov	r0, r3
 800d68c:	f000 f936 	bl	800d8fc <RTC_ByteToBcd2>
 800d690:	4603      	mov	r3, r0
 800d692:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d694:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	789b      	ldrb	r3, [r3, #2]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 f92e 	bl	800d8fc <RTC_ByteToBcd2>
 800d6a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d6a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	617b      	str	r3, [r7, #20]
 800d6b0:	e00e      	b.n	800d6d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	78db      	ldrb	r3, [r3, #3]
 800d6b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	785b      	ldrb	r3, [r3, #1]
 800d6bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d6be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d6c0:	68ba      	ldr	r2, [r7, #8]
 800d6c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d6c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	22ca      	movs	r2, #202	; 0xca
 800d6d6:	625a      	str	r2, [r3, #36]	; 0x24
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2253      	movs	r2, #83	; 0x53
 800d6de:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 f899 	bl	800d818 <RTC_EnterInitMode>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d6ea:	7cfb      	ldrb	r3, [r7, #19]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10a      	bne.n	800d706 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	6979      	ldr	r1, [r7, #20]
 800d6f6:	4b0e      	ldr	r3, [pc, #56]	; (800d730 <HAL_RTC_SetDate+0x10c>)
 800d6f8:	400b      	ands	r3, r1
 800d6fa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f000 f8bf 	bl	800d880 <RTC_ExitInitMode>
 800d702:	4603      	mov	r3, r0
 800d704:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	22ff      	movs	r2, #255	; 0xff
 800d70c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d70e:	7cfb      	ldrb	r3, [r7, #19]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d103      	bne.n	800d71c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2200      	movs	r2, #0
 800d720:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d724:	7cfb      	ldrb	r3, [r7, #19]


}
 800d726:	4618      	mov	r0, r3
 800d728:	371c      	adds	r7, #28
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd90      	pop	{r4, r7, pc}
 800d72e:	bf00      	nop
 800d730:	00ffff3f 	.word	0x00ffff3f

0800d734 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b086      	sub	sp, #24
 800d738:	af00      	add	r7, sp, #0
 800d73a:	60f8      	str	r0, [r7, #12]
 800d73c:	60b9      	str	r1, [r7, #8]
 800d73e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	4b21      	ldr	r3, [pc, #132]	; (800d7cc <HAL_RTC_GetDate+0x98>)
 800d748:	4013      	ands	r3, r2
 800d74a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	0c1b      	lsrs	r3, r3, #16
 800d750:	b2da      	uxtb	r2, r3
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	0a1b      	lsrs	r3, r3, #8
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	f003 031f 	and.w	r3, r3, #31
 800d760:	b2da      	uxtb	r2, r3
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d76e:	b2da      	uxtb	r2, r3
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	0b5b      	lsrs	r3, r3, #13
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	f003 0307 	and.w	r3, r3, #7
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d11a      	bne.n	800d7c0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	78db      	ldrb	r3, [r3, #3]
 800d78e:	4618      	mov	r0, r3
 800d790:	f000 f8d4 	bl	800d93c <RTC_Bcd2ToByte>
 800d794:	4603      	mov	r3, r0
 800d796:	461a      	mov	r2, r3
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	785b      	ldrb	r3, [r3, #1]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 f8cb 	bl	800d93c <RTC_Bcd2ToByte>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	789b      	ldrb	r3, [r3, #2]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 f8c2 	bl	800d93c <RTC_Bcd2ToByte>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d7c0:	2300      	movs	r3, #0
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3718      	adds	r7, #24
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	00ffff3f 	.word	0x00ffff3f

0800d7d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4a0d      	ldr	r2, [pc, #52]	; (800d814 <HAL_RTC_WaitForSynchro+0x44>)
 800d7de:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d7e0:	f7f6 f8f2 	bl	80039c8 <HAL_GetTick>
 800d7e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d7e6:	e009      	b.n	800d7fc <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d7e8:	f7f6 f8ee 	bl	80039c8 <HAL_GetTick>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	1ad3      	subs	r3, r2, r3
 800d7f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7f6:	d901      	bls.n	800d7fc <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	e007      	b.n	800d80c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	f003 0320 	and.w	r3, r3, #32
 800d806:	2b00      	cmp	r3, #0
 800d808:	d0ee      	beq.n	800d7e8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	0003ff5f 	.word	0x0003ff5f

0800d818 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d120      	bne.n	800d874 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d83a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d83c:	f7f6 f8c4 	bl	80039c8 <HAL_GetTick>
 800d840:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d842:	e00d      	b.n	800d860 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d844:	f7f6 f8c0 	bl	80039c8 <HAL_GetTick>
 800d848:	4602      	mov	r2, r0
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	1ad3      	subs	r3, r2, r3
 800d84e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d852:	d905      	bls.n	800d860 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d854:	2303      	movs	r3, #3
 800d856:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2203      	movs	r2, #3
 800d85c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d102      	bne.n	800d874 <RTC_EnterInitMode+0x5c>
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
 800d870:	2b03      	cmp	r3, #3
 800d872:	d1e7      	bne.n	800d844 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d874:	7bfb      	ldrb	r3, [r7, #15]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d888:	2300      	movs	r3, #0
 800d88a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d88c:	4b1a      	ldr	r3, [pc, #104]	; (800d8f8 <RTC_ExitInitMode+0x78>)
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	4a19      	ldr	r2, [pc, #100]	; (800d8f8 <RTC_ExitInitMode+0x78>)
 800d892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d896:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d898:	4b17      	ldr	r3, [pc, #92]	; (800d8f8 <RTC_ExitInitMode+0x78>)
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	f003 0320 	and.w	r3, r3, #32
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10c      	bne.n	800d8be <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff ff93 	bl	800d7d0 <HAL_RTC_WaitForSynchro>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d01e      	beq.n	800d8ee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2203      	movs	r2, #3
 800d8b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	73fb      	strb	r3, [r7, #15]
 800d8bc:	e017      	b.n	800d8ee <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d8be:	4b0e      	ldr	r3, [pc, #56]	; (800d8f8 <RTC_ExitInitMode+0x78>)
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	4a0d      	ldr	r2, [pc, #52]	; (800d8f8 <RTC_ExitInitMode+0x78>)
 800d8c4:	f023 0320 	bic.w	r3, r3, #32
 800d8c8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7ff ff80 	bl	800d7d0 <HAL_RTC_WaitForSynchro>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d005      	beq.n	800d8e2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2203      	movs	r2, #3
 800d8da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d8e2:	4b05      	ldr	r3, [pc, #20]	; (800d8f8 <RTC_ExitInitMode+0x78>)
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	4a04      	ldr	r2, [pc, #16]	; (800d8f8 <RTC_ExitInitMode+0x78>)
 800d8e8:	f043 0320 	orr.w	r3, r3, #32
 800d8ec:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	58004000 	.word	0x58004000

0800d8fc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	4603      	mov	r3, r0
 800d904:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d906:	2300      	movs	r3, #0
 800d908:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d90a:	79fb      	ldrb	r3, [r7, #7]
 800d90c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d90e:	e005      	b.n	800d91c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	3301      	adds	r3, #1
 800d914:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d916:	7afb      	ldrb	r3, [r7, #11]
 800d918:	3b0a      	subs	r3, #10
 800d91a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d91c:	7afb      	ldrb	r3, [r7, #11]
 800d91e:	2b09      	cmp	r3, #9
 800d920:	d8f6      	bhi.n	800d910 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	b2db      	uxtb	r3, r3
 800d926:	011b      	lsls	r3, r3, #4
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	7afb      	ldrb	r3, [r7, #11]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	b2db      	uxtb	r3, r3
}
 800d930:	4618      	mov	r0, r3
 800d932:	3714      	adds	r7, #20
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b085      	sub	sp, #20
 800d940:	af00      	add	r7, sp, #0
 800d942:	4603      	mov	r3, r0
 800d944:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d946:	79fb      	ldrb	r3, [r7, #7]
 800d948:	091b      	lsrs	r3, r3, #4
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	461a      	mov	r2, r3
 800d94e:	0092      	lsls	r2, r2, #2
 800d950:	4413      	add	r3, r2
 800d952:	005b      	lsls	r3, r3, #1
 800d954:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d956:	79fb      	ldrb	r3, [r7, #7]
 800d958:	f003 030f 	and.w	r3, r3, #15
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	7bfb      	ldrb	r3, [r7, #15]
 800d960:	4413      	add	r3, r2
 800d962:	b2db      	uxtb	r3, r3
}
 800d964:	4618      	mov	r0, r3
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d101      	bne.n	800d982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d97e:	2301      	movs	r3, #1
 800d980:	e10f      	b.n	800dba2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a87      	ldr	r2, [pc, #540]	; (800dbac <HAL_SPI_Init+0x23c>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d00f      	beq.n	800d9b2 <HAL_SPI_Init+0x42>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a86      	ldr	r2, [pc, #536]	; (800dbb0 <HAL_SPI_Init+0x240>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d00a      	beq.n	800d9b2 <HAL_SPI_Init+0x42>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a84      	ldr	r2, [pc, #528]	; (800dbb4 <HAL_SPI_Init+0x244>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d005      	beq.n	800d9b2 <HAL_SPI_Init+0x42>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	2b0f      	cmp	r3, #15
 800d9ac:	d901      	bls.n	800d9b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e0f7      	b.n	800dba2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 fc12 	bl	800e1dc <SPI_GetPacketSize>
 800d9b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a7b      	ldr	r2, [pc, #492]	; (800dbac <HAL_SPI_Init+0x23c>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d00c      	beq.n	800d9de <HAL_SPI_Init+0x6e>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a79      	ldr	r2, [pc, #484]	; (800dbb0 <HAL_SPI_Init+0x240>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d007      	beq.n	800d9de <HAL_SPI_Init+0x6e>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4a78      	ldr	r2, [pc, #480]	; (800dbb4 <HAL_SPI_Init+0x244>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d002      	beq.n	800d9de <HAL_SPI_Init+0x6e>
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b08      	cmp	r3, #8
 800d9dc:	d811      	bhi.n	800da02 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d9e2:	4a72      	ldr	r2, [pc, #456]	; (800dbac <HAL_SPI_Init+0x23c>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d009      	beq.n	800d9fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a70      	ldr	r2, [pc, #448]	; (800dbb0 <HAL_SPI_Init+0x240>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d004      	beq.n	800d9fc <HAL_SPI_Init+0x8c>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a6f      	ldr	r2, [pc, #444]	; (800dbb4 <HAL_SPI_Init+0x244>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d104      	bne.n	800da06 <HAL_SPI_Init+0x96>
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2b10      	cmp	r3, #16
 800da00:	d901      	bls.n	800da06 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	e0cd      	b.n	800dba2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d106      	bne.n	800da20 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7f5 faca 	bl	8002fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2202      	movs	r2, #2
 800da24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f022 0201 	bic.w	r2, r2, #1
 800da36:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800da42:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	699b      	ldr	r3, [r3, #24]
 800da48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da4c:	d119      	bne.n	800da82 <HAL_SPI_Init+0x112>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da56:	d103      	bne.n	800da60 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d008      	beq.n	800da72 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10c      	bne.n	800da82 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800da6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da70:	d107      	bne.n	800da82 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800da80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d00f      	beq.n	800daae <HAL_SPI_Init+0x13e>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	2b06      	cmp	r3, #6
 800da94:	d90b      	bls.n	800daae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	430a      	orrs	r2, r1
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	e007      	b.n	800dabe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dabc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	69da      	ldr	r2, [r3, #28]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac6:	431a      	orrs	r2, r3
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	431a      	orrs	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad0:	ea42 0103 	orr.w	r1, r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	68da      	ldr	r2, [r3, #12]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	430a      	orrs	r2, r1
 800dade:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae8:	431a      	orrs	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daee:	431a      	orrs	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	699b      	ldr	r3, [r3, #24]
 800daf4:	431a      	orrs	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	691b      	ldr	r3, [r3, #16]
 800dafa:	431a      	orrs	r2, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	431a      	orrs	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a1b      	ldr	r3, [r3, #32]
 800db06:	431a      	orrs	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	431a      	orrs	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db12:	431a      	orrs	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	431a      	orrs	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db1e:	ea42 0103 	orr.w	r1, r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	430a      	orrs	r2, r1
 800db2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d113      	bne.n	800db5e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db48:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db5c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f022 0201 	bic.w	r2, r2, #1
 800db6c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00a      	beq.n	800db90 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	430a      	orrs	r2, r1
 800db8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2201      	movs	r2, #1
 800db9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	40013000 	.word	0x40013000
 800dbb0:	40003800 	.word	0x40003800
 800dbb4:	40003c00 	.word	0x40003c00

0800dbb8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b088      	sub	sp, #32
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	603b      	str	r3, [r7, #0]
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbcc:	095b      	lsrs	r3, r3, #5
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3330      	adds	r3, #48	; 0x30
 800dbda:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dbdc:	f7f5 fef4 	bl	80039c8 <HAL_GetTick>
 800dbe0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d001      	beq.n	800dbf2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800dbee:	2302      	movs	r3, #2
 800dbf0:	e250      	b.n	800e094 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <HAL_SPI_Receive+0x46>
 800dbf8:	88fb      	ldrh	r3, [r7, #6]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d101      	bne.n	800dc02 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e248      	b.n	800e094 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d101      	bne.n	800dc10 <HAL_SPI_Receive+0x58>
 800dc0c:	2302      	movs	r3, #2
 800dc0e:	e241      	b.n	800e094 <HAL_SPI_Receive+0x4dc>
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2201      	movs	r2, #1
 800dc14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2204      	movs	r2, #4
 800dc1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2200      	movs	r2, #0
 800dc24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	88fa      	ldrh	r2, [r7, #6]
 800dc32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	88fa      	ldrh	r2, [r7, #6]
 800dc3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2200      	movs	r2, #0
 800dc42:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2200      	movs	r2, #0
 800dc58:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dc68:	d108      	bne.n	800dc7c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dc78:	601a      	str	r2, [r3, #0]
 800dc7a:	e009      	b.n	800dc90 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dc8e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	685a      	ldr	r2, [r3, #4]
 800dc96:	4b95      	ldr	r3, [pc, #596]	; (800deec <HAL_SPI_Receive+0x334>)
 800dc98:	4013      	ands	r3, r2
 800dc9a:	88f9      	ldrh	r1, [r7, #6]
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	6812      	ldr	r2, [r2, #0]
 800dca0:	430b      	orrs	r3, r1
 800dca2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f042 0201 	orr.w	r2, r2, #1
 800dcb2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dcbc:	d107      	bne.n	800dcce <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dccc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	2b0f      	cmp	r3, #15
 800dcd4:	d96c      	bls.n	800ddb0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dcd6:	e064      	b.n	800dda2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	695b      	ldr	r3, [r3, #20]
 800dcde:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	695b      	ldr	r3, [r3, #20]
 800dce6:	f003 0301 	and.w	r3, r3, #1
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d114      	bne.n	800dd18 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dcf8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcfe:	1d1a      	adds	r2, r3, #4
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd16:	e044      	b.n	800dda2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	8bfa      	ldrh	r2, [r7, #30]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d919      	bls.n	800dd5a <HAL_SPI_Receive+0x1a2>
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d014      	beq.n	800dd5a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd3a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd40:	1d1a      	adds	r2, r3, #4
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	3b01      	subs	r3, #1
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd58:	e023      	b.n	800dda2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd5a:	f7f5 fe35 	bl	80039c8 <HAL_GetTick>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d803      	bhi.n	800dd72 <HAL_SPI_Receive+0x1ba>
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd70:	d102      	bne.n	800dd78 <HAL_SPI_Receive+0x1c0>
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d114      	bne.n	800dda2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f000 f98f 	bl	800e09c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dd9e:	2303      	movs	r3, #3
 800dda0:	e178      	b.n	800e094 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d194      	bne.n	800dcd8 <HAL_SPI_Receive+0x120>
 800ddae:	e15e      	b.n	800e06e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	2b07      	cmp	r3, #7
 800ddb6:	f240 8153 	bls.w	800e060 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ddba:	e08f      	b.n	800dedc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	f003 0301 	and.w	r3, r3, #1
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d114      	bne.n	800ddfc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddd6:	69ba      	ldr	r2, [r7, #24]
 800ddd8:	8812      	ldrh	r2, [r2, #0]
 800ddda:	b292      	uxth	r2, r2
 800dddc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dde2:	1c9a      	adds	r2, r3, #2
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddfa:	e06f      	b.n	800dedc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de02:	b29b      	uxth	r3, r3
 800de04:	8bfa      	ldrh	r2, [r7, #30]
 800de06:	429a      	cmp	r2, r3
 800de08:	d924      	bls.n	800de54 <HAL_SPI_Receive+0x29c>
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de10:	2b00      	cmp	r3, #0
 800de12:	d01f      	beq.n	800de54 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de18:	69ba      	ldr	r2, [r7, #24]
 800de1a:	8812      	ldrh	r2, [r2, #0]
 800de1c:	b292      	uxth	r2, r2
 800de1e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de24:	1c9a      	adds	r2, r3, #2
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de2e:	69ba      	ldr	r2, [r7, #24]
 800de30:	8812      	ldrh	r2, [r2, #0]
 800de32:	b292      	uxth	r2, r2
 800de34:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de3a:	1c9a      	adds	r2, r3, #2
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de46:	b29b      	uxth	r3, r3
 800de48:	3b02      	subs	r3, #2
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de52:	e043      	b.n	800dedc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d119      	bne.n	800de94 <HAL_SPI_Receive+0x2dc>
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de66:	2b00      	cmp	r3, #0
 800de68:	d014      	beq.n	800de94 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de6e:	69ba      	ldr	r2, [r7, #24]
 800de70:	8812      	ldrh	r2, [r2, #0]
 800de72:	b292      	uxth	r2, r2
 800de74:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de7a:	1c9a      	adds	r2, r3, #2
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de86:	b29b      	uxth	r3, r3
 800de88:	3b01      	subs	r3, #1
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de92:	e023      	b.n	800dedc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de94:	f7f5 fd98 	bl	80039c8 <HAL_GetTick>
 800de98:	4602      	mov	r2, r0
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	1ad3      	subs	r3, r2, r3
 800de9e:	683a      	ldr	r2, [r7, #0]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d803      	bhi.n	800deac <HAL_SPI_Receive+0x2f4>
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800deaa:	d102      	bne.n	800deb2 <HAL_SPI_Receive+0x2fa>
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d114      	bne.n	800dedc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f000 f8f2 	bl	800e09c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800debe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2200      	movs	r2, #0
 800ded4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ded8:	2303      	movs	r3, #3
 800deda:	e0db      	b.n	800e094 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f47f af69 	bne.w	800ddbc <HAL_SPI_Receive+0x204>
 800deea:	e0c0      	b.n	800e06e <HAL_SPI_Receive+0x4b6>
 800deec:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	f003 0301 	and.w	r3, r3, #1
 800df02:	2b01      	cmp	r3, #1
 800df04:	d117      	bne.n	800df36 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df12:	7812      	ldrb	r2, [r2, #0]
 800df14:	b2d2      	uxtb	r2, r2
 800df16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df1c:	1c5a      	adds	r2, r3, #1
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df28:	b29b      	uxth	r3, r3
 800df2a:	3b01      	subs	r3, #1
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df34:	e094      	b.n	800e060 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	8bfa      	ldrh	r2, [r7, #30]
 800df40:	429a      	cmp	r2, r3
 800df42:	d946      	bls.n	800dfd2 <HAL_SPI_Receive+0x41a>
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d041      	beq.n	800dfd2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df5a:	7812      	ldrb	r2, [r2, #0]
 800df5c:	b2d2      	uxtb	r2, r2
 800df5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df76:	7812      	ldrb	r2, [r2, #0]
 800df78:	b2d2      	uxtb	r2, r2
 800df7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df80:	1c5a      	adds	r2, r3, #1
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df92:	7812      	ldrb	r2, [r2, #0]
 800df94:	b2d2      	uxtb	r2, r2
 800df96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df9c:	1c5a      	adds	r2, r3, #1
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfae:	7812      	ldrb	r2, [r2, #0]
 800dfb0:	b2d2      	uxtb	r2, r2
 800dfb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfb8:	1c5a      	adds	r2, r3, #1
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	3b04      	subs	r3, #4
 800dfc8:	b29a      	uxth	r2, r3
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfd0:	e046      	b.n	800e060 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	2b03      	cmp	r3, #3
 800dfdc:	d81c      	bhi.n	800e018 <HAL_SPI_Receive+0x460>
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d017      	beq.n	800e018 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dff4:	7812      	ldrb	r2, [r2, #0]
 800dff6:	b2d2      	uxtb	r2, r2
 800dff8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	3b01      	subs	r3, #1
 800e00e:	b29a      	uxth	r2, r3
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e016:	e023      	b.n	800e060 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e018:	f7f5 fcd6 	bl	80039c8 <HAL_GetTick>
 800e01c:	4602      	mov	r2, r0
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	1ad3      	subs	r3, r2, r3
 800e022:	683a      	ldr	r2, [r7, #0]
 800e024:	429a      	cmp	r2, r3
 800e026:	d803      	bhi.n	800e030 <HAL_SPI_Receive+0x478>
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e02e:	d102      	bne.n	800e036 <HAL_SPI_Receive+0x47e>
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d114      	bne.n	800e060 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f000 f830 	bl	800e09c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e042:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2200      	movs	r2, #0
 800e058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e019      	b.n	800e094 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e066:	b29b      	uxth	r3, r3
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f47f af41 	bne.w	800def0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f000 f814 	bl	800e09c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2201      	movs	r2, #1
 800e078:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2200      	movs	r2, #0
 800e080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	e000      	b.n	800e094 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e092:	2300      	movs	r3, #0
  }
}
 800e094:	4618      	mov	r0, r3
 800e096:	3720      	adds	r7, #32
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	699a      	ldr	r2, [r3, #24]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f042 0208 	orr.w	r2, r2, #8
 800e0ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	699a      	ldr	r2, [r3, #24]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f042 0210 	orr.w	r2, r2, #16
 800e0ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f022 0201 	bic.w	r2, r2, #1
 800e0da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	6919      	ldr	r1, [r3, #16]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	4b3c      	ldr	r3, [pc, #240]	; (800e1d8 <SPI_CloseTransfer+0x13c>)
 800e0e8:	400b      	ands	r3, r1
 800e0ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	689a      	ldr	r2, [r3, #8]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e0fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b04      	cmp	r3, #4
 800e106:	d014      	beq.n	800e132 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f003 0320 	and.w	r3, r3, #32
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00f      	beq.n	800e132 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e118:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	699a      	ldr	r2, [r3, #24]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f042 0220 	orr.w	r2, r2, #32
 800e130:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	2b03      	cmp	r3, #3
 800e13c:	d014      	beq.n	800e168 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00f      	beq.n	800e168 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e14e:	f043 0204 	orr.w	r2, r3, #4
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	699a      	ldr	r2, [r3, #24]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e166:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00f      	beq.n	800e192 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e178:	f043 0201 	orr.w	r2, r3, #1
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	699a      	ldr	r2, [r3, #24]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e190:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00f      	beq.n	800e1bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1a2:	f043 0208 	orr.w	r2, r3, #8
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	699a      	ldr	r2, [r3, #24]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e1cc:	bf00      	nop
 800e1ce:	3714      	adds	r7, #20
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr
 800e1d8:	fffffc90 	.word	0xfffffc90

0800e1dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b085      	sub	sp, #20
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1e8:	095b      	lsrs	r3, r3, #5
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	3307      	adds	r3, #7
 800e1fa:	08db      	lsrs	r3, r3, #3
 800e1fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	fb02 f303 	mul.w	r3, r2, r3
}
 800e206:	4618      	mov	r0, r3
 800e208:	3714      	adds	r7, #20
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b082      	sub	sp, #8
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d101      	bne.n	800e224 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	e049      	b.n	800e2b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d106      	bne.n	800e23e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f7f4 ff71 	bl	8003120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2202      	movs	r2, #2
 800e242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	3304      	adds	r3, #4
 800e24e:	4619      	mov	r1, r3
 800e250:	4610      	mov	r0, r2
 800e252:	f000 ff41 	bl	800f0d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2201      	movs	r2, #1
 800e262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2201      	movs	r2, #1
 800e272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2201      	movs	r2, #1
 800e28a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2201      	movs	r2, #1
 800e292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2201      	movs	r2, #1
 800e29a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b085      	sub	sp, #20
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d001      	beq.n	800e2d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	e04c      	b.n	800e372 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2202      	movs	r2, #2
 800e2dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4a26      	ldr	r2, [pc, #152]	; (800e380 <HAL_TIM_Base_Start+0xc0>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d022      	beq.n	800e330 <HAL_TIM_Base_Start+0x70>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2f2:	d01d      	beq.n	800e330 <HAL_TIM_Base_Start+0x70>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4a22      	ldr	r2, [pc, #136]	; (800e384 <HAL_TIM_Base_Start+0xc4>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d018      	beq.n	800e330 <HAL_TIM_Base_Start+0x70>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4a21      	ldr	r2, [pc, #132]	; (800e388 <HAL_TIM_Base_Start+0xc8>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d013      	beq.n	800e330 <HAL_TIM_Base_Start+0x70>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a1f      	ldr	r2, [pc, #124]	; (800e38c <HAL_TIM_Base_Start+0xcc>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d00e      	beq.n	800e330 <HAL_TIM_Base_Start+0x70>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	4a1e      	ldr	r2, [pc, #120]	; (800e390 <HAL_TIM_Base_Start+0xd0>)
 800e318:	4293      	cmp	r3, r2
 800e31a:	d009      	beq.n	800e330 <HAL_TIM_Base_Start+0x70>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a1c      	ldr	r2, [pc, #112]	; (800e394 <HAL_TIM_Base_Start+0xd4>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d004      	beq.n	800e330 <HAL_TIM_Base_Start+0x70>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4a1b      	ldr	r2, [pc, #108]	; (800e398 <HAL_TIM_Base_Start+0xd8>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d115      	bne.n	800e35c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	689a      	ldr	r2, [r3, #8]
 800e336:	4b19      	ldr	r3, [pc, #100]	; (800e39c <HAL_TIM_Base_Start+0xdc>)
 800e338:	4013      	ands	r3, r2
 800e33a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2b06      	cmp	r3, #6
 800e340:	d015      	beq.n	800e36e <HAL_TIM_Base_Start+0xae>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e348:	d011      	beq.n	800e36e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f042 0201 	orr.w	r2, r2, #1
 800e358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e35a:	e008      	b.n	800e36e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f042 0201 	orr.w	r2, r2, #1
 800e36a:	601a      	str	r2, [r3, #0]
 800e36c:	e000      	b.n	800e370 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e36e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e370:	2300      	movs	r3, #0
}
 800e372:	4618      	mov	r0, r3
 800e374:	3714      	adds	r7, #20
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr
 800e37e:	bf00      	nop
 800e380:	40010000 	.word	0x40010000
 800e384:	40000400 	.word	0x40000400
 800e388:	40000800 	.word	0x40000800
 800e38c:	40000c00 	.word	0x40000c00
 800e390:	40010400 	.word	0x40010400
 800e394:	40001800 	.word	0x40001800
 800e398:	40014000 	.word	0x40014000
 800e39c:	00010007 	.word	0x00010007

0800e3a0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6a1a      	ldr	r2, [r3, #32]
 800e3ae:	f241 1311 	movw	r3, #4369	; 0x1111
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10f      	bne.n	800e3d8 <HAL_TIM_Base_Stop+0x38>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	6a1a      	ldr	r2, [r3, #32]
 800e3be:	f240 4344 	movw	r3, #1092	; 0x444
 800e3c2:	4013      	ands	r3, r2
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d107      	bne.n	800e3d8 <HAL_TIM_Base_Stop+0x38>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f022 0201 	bic.w	r2, r2, #1
 800e3d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e3e0:	2300      	movs	r3, #0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	370c      	adds	r7, #12
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ec:	4770      	bx	lr
	...

0800e3f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	2b01      	cmp	r3, #1
 800e402:	d001      	beq.n	800e408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	e054      	b.n	800e4b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2202      	movs	r2, #2
 800e40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	68da      	ldr	r2, [r3, #12]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f042 0201 	orr.w	r2, r2, #1
 800e41e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a26      	ldr	r2, [pc, #152]	; (800e4c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d022      	beq.n	800e470 <HAL_TIM_Base_Start_IT+0x80>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e432:	d01d      	beq.n	800e470 <HAL_TIM_Base_Start_IT+0x80>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4a22      	ldr	r2, [pc, #136]	; (800e4c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d018      	beq.n	800e470 <HAL_TIM_Base_Start_IT+0x80>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4a21      	ldr	r2, [pc, #132]	; (800e4c8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d013      	beq.n	800e470 <HAL_TIM_Base_Start_IT+0x80>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a1f      	ldr	r2, [pc, #124]	; (800e4cc <HAL_TIM_Base_Start_IT+0xdc>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d00e      	beq.n	800e470 <HAL_TIM_Base_Start_IT+0x80>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4a1e      	ldr	r2, [pc, #120]	; (800e4d0 <HAL_TIM_Base_Start_IT+0xe0>)
 800e458:	4293      	cmp	r3, r2
 800e45a:	d009      	beq.n	800e470 <HAL_TIM_Base_Start_IT+0x80>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4a1c      	ldr	r2, [pc, #112]	; (800e4d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d004      	beq.n	800e470 <HAL_TIM_Base_Start_IT+0x80>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4a1b      	ldr	r2, [pc, #108]	; (800e4d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d115      	bne.n	800e49c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	689a      	ldr	r2, [r3, #8]
 800e476:	4b19      	ldr	r3, [pc, #100]	; (800e4dc <HAL_TIM_Base_Start_IT+0xec>)
 800e478:	4013      	ands	r3, r2
 800e47a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2b06      	cmp	r3, #6
 800e480:	d015      	beq.n	800e4ae <HAL_TIM_Base_Start_IT+0xbe>
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e488:	d011      	beq.n	800e4ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f042 0201 	orr.w	r2, r2, #1
 800e498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e49a:	e008      	b.n	800e4ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f042 0201 	orr.w	r2, r2, #1
 800e4aa:	601a      	str	r2, [r3, #0]
 800e4ac:	e000      	b.n	800e4b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3714      	adds	r7, #20
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	40010000 	.word	0x40010000
 800e4c4:	40000400 	.word	0x40000400
 800e4c8:	40000800 	.word	0x40000800
 800e4cc:	40000c00 	.word	0x40000c00
 800e4d0:	40010400 	.word	0x40010400
 800e4d4:	40001800 	.word	0x40001800
 800e4d8:	40014000 	.word	0x40014000
 800e4dc:	00010007 	.word	0x00010007

0800e4e0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d109      	bne.n	800e508 <HAL_TIM_OC_Start_IT+0x28>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	bf14      	ite	ne
 800e500:	2301      	movne	r3, #1
 800e502:	2300      	moveq	r3, #0
 800e504:	b2db      	uxtb	r3, r3
 800e506:	e03c      	b.n	800e582 <HAL_TIM_OC_Start_IT+0xa2>
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	2b04      	cmp	r3, #4
 800e50c:	d109      	bne.n	800e522 <HAL_TIM_OC_Start_IT+0x42>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b01      	cmp	r3, #1
 800e518:	bf14      	ite	ne
 800e51a:	2301      	movne	r3, #1
 800e51c:	2300      	moveq	r3, #0
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	e02f      	b.n	800e582 <HAL_TIM_OC_Start_IT+0xa2>
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2b08      	cmp	r3, #8
 800e526:	d109      	bne.n	800e53c <HAL_TIM_OC_Start_IT+0x5c>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	2b01      	cmp	r3, #1
 800e532:	bf14      	ite	ne
 800e534:	2301      	movne	r3, #1
 800e536:	2300      	moveq	r3, #0
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	e022      	b.n	800e582 <HAL_TIM_OC_Start_IT+0xa2>
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	2b0c      	cmp	r3, #12
 800e540:	d109      	bne.n	800e556 <HAL_TIM_OC_Start_IT+0x76>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	bf14      	ite	ne
 800e54e:	2301      	movne	r3, #1
 800e550:	2300      	moveq	r3, #0
 800e552:	b2db      	uxtb	r3, r3
 800e554:	e015      	b.n	800e582 <HAL_TIM_OC_Start_IT+0xa2>
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	2b10      	cmp	r3, #16
 800e55a:	d109      	bne.n	800e570 <HAL_TIM_OC_Start_IT+0x90>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e562:	b2db      	uxtb	r3, r3
 800e564:	2b01      	cmp	r3, #1
 800e566:	bf14      	ite	ne
 800e568:	2301      	movne	r3, #1
 800e56a:	2300      	moveq	r3, #0
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	e008      	b.n	800e582 <HAL_TIM_OC_Start_IT+0xa2>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e576:	b2db      	uxtb	r3, r3
 800e578:	2b01      	cmp	r3, #1
 800e57a:	bf14      	ite	ne
 800e57c:	2301      	movne	r3, #1
 800e57e:	2300      	moveq	r3, #0
 800e580:	b2db      	uxtb	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	d001      	beq.n	800e58a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e0ec      	b.n	800e764 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d104      	bne.n	800e59a <HAL_TIM_OC_Start_IT+0xba>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2202      	movs	r2, #2
 800e594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e598:	e023      	b.n	800e5e2 <HAL_TIM_OC_Start_IT+0x102>
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	2b04      	cmp	r3, #4
 800e59e:	d104      	bne.n	800e5aa <HAL_TIM_OC_Start_IT+0xca>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2202      	movs	r2, #2
 800e5a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5a8:	e01b      	b.n	800e5e2 <HAL_TIM_OC_Start_IT+0x102>
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	2b08      	cmp	r3, #8
 800e5ae:	d104      	bne.n	800e5ba <HAL_TIM_OC_Start_IT+0xda>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2202      	movs	r2, #2
 800e5b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5b8:	e013      	b.n	800e5e2 <HAL_TIM_OC_Start_IT+0x102>
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	2b0c      	cmp	r3, #12
 800e5be:	d104      	bne.n	800e5ca <HAL_TIM_OC_Start_IT+0xea>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2202      	movs	r2, #2
 800e5c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5c8:	e00b      	b.n	800e5e2 <HAL_TIM_OC_Start_IT+0x102>
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	2b10      	cmp	r3, #16
 800e5ce:	d104      	bne.n	800e5da <HAL_TIM_OC_Start_IT+0xfa>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2202      	movs	r2, #2
 800e5d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5d8:	e003      	b.n	800e5e2 <HAL_TIM_OC_Start_IT+0x102>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2202      	movs	r2, #2
 800e5de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	2b0c      	cmp	r3, #12
 800e5e6:	d841      	bhi.n	800e66c <HAL_TIM_OC_Start_IT+0x18c>
 800e5e8:	a201      	add	r2, pc, #4	; (adr r2, 800e5f0 <HAL_TIM_OC_Start_IT+0x110>)
 800e5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ee:	bf00      	nop
 800e5f0:	0800e625 	.word	0x0800e625
 800e5f4:	0800e66d 	.word	0x0800e66d
 800e5f8:	0800e66d 	.word	0x0800e66d
 800e5fc:	0800e66d 	.word	0x0800e66d
 800e600:	0800e637 	.word	0x0800e637
 800e604:	0800e66d 	.word	0x0800e66d
 800e608:	0800e66d 	.word	0x0800e66d
 800e60c:	0800e66d 	.word	0x0800e66d
 800e610:	0800e649 	.word	0x0800e649
 800e614:	0800e66d 	.word	0x0800e66d
 800e618:	0800e66d 	.word	0x0800e66d
 800e61c:	0800e66d 	.word	0x0800e66d
 800e620:	0800e65b 	.word	0x0800e65b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	68da      	ldr	r2, [r3, #12]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f042 0202 	orr.w	r2, r2, #2
 800e632:	60da      	str	r2, [r3, #12]
      break;
 800e634:	e01d      	b.n	800e672 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	68da      	ldr	r2, [r3, #12]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f042 0204 	orr.w	r2, r2, #4
 800e644:	60da      	str	r2, [r3, #12]
      break;
 800e646:	e014      	b.n	800e672 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	68da      	ldr	r2, [r3, #12]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f042 0208 	orr.w	r2, r2, #8
 800e656:	60da      	str	r2, [r3, #12]
      break;
 800e658:	e00b      	b.n	800e672 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68da      	ldr	r2, [r3, #12]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f042 0210 	orr.w	r2, r2, #16
 800e668:	60da      	str	r2, [r3, #12]
      break;
 800e66a:	e002      	b.n	800e672 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e66c:	2301      	movs	r3, #1
 800e66e:	73fb      	strb	r3, [r7, #15]
      break;
 800e670:	bf00      	nop
  }

  if (status == HAL_OK)
 800e672:	7bfb      	ldrb	r3, [r7, #15]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d174      	bne.n	800e762 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2201      	movs	r2, #1
 800e67e:	6839      	ldr	r1, [r7, #0]
 800e680:	4618      	mov	r0, r3
 800e682:	f001 f943 	bl	800f90c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a38      	ldr	r2, [pc, #224]	; (800e76c <HAL_TIM_OC_Start_IT+0x28c>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d013      	beq.n	800e6b8 <HAL_TIM_OC_Start_IT+0x1d8>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a36      	ldr	r2, [pc, #216]	; (800e770 <HAL_TIM_OC_Start_IT+0x290>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d00e      	beq.n	800e6b8 <HAL_TIM_OC_Start_IT+0x1d8>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a35      	ldr	r2, [pc, #212]	; (800e774 <HAL_TIM_OC_Start_IT+0x294>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d009      	beq.n	800e6b8 <HAL_TIM_OC_Start_IT+0x1d8>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a33      	ldr	r2, [pc, #204]	; (800e778 <HAL_TIM_OC_Start_IT+0x298>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d004      	beq.n	800e6b8 <HAL_TIM_OC_Start_IT+0x1d8>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4a32      	ldr	r2, [pc, #200]	; (800e77c <HAL_TIM_OC_Start_IT+0x29c>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d101      	bne.n	800e6bc <HAL_TIM_OC_Start_IT+0x1dc>
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	e000      	b.n	800e6be <HAL_TIM_OC_Start_IT+0x1de>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d007      	beq.n	800e6d2 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e6d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a25      	ldr	r2, [pc, #148]	; (800e76c <HAL_TIM_OC_Start_IT+0x28c>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d022      	beq.n	800e722 <HAL_TIM_OC_Start_IT+0x242>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6e4:	d01d      	beq.n	800e722 <HAL_TIM_OC_Start_IT+0x242>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a25      	ldr	r2, [pc, #148]	; (800e780 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d018      	beq.n	800e722 <HAL_TIM_OC_Start_IT+0x242>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a23      	ldr	r2, [pc, #140]	; (800e784 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d013      	beq.n	800e722 <HAL_TIM_OC_Start_IT+0x242>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4a22      	ldr	r2, [pc, #136]	; (800e788 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d00e      	beq.n	800e722 <HAL_TIM_OC_Start_IT+0x242>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4a19      	ldr	r2, [pc, #100]	; (800e770 <HAL_TIM_OC_Start_IT+0x290>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d009      	beq.n	800e722 <HAL_TIM_OC_Start_IT+0x242>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4a1e      	ldr	r2, [pc, #120]	; (800e78c <HAL_TIM_OC_Start_IT+0x2ac>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d004      	beq.n	800e722 <HAL_TIM_OC_Start_IT+0x242>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a15      	ldr	r2, [pc, #84]	; (800e774 <HAL_TIM_OC_Start_IT+0x294>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d115      	bne.n	800e74e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	689a      	ldr	r2, [r3, #8]
 800e728:	4b19      	ldr	r3, [pc, #100]	; (800e790 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e72a:	4013      	ands	r3, r2
 800e72c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	2b06      	cmp	r3, #6
 800e732:	d015      	beq.n	800e760 <HAL_TIM_OC_Start_IT+0x280>
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e73a:	d011      	beq.n	800e760 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f042 0201 	orr.w	r2, r2, #1
 800e74a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e74c:	e008      	b.n	800e760 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f042 0201 	orr.w	r2, r2, #1
 800e75c:	601a      	str	r2, [r3, #0]
 800e75e:	e000      	b.n	800e762 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e760:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e762:	7bfb      	ldrb	r3, [r7, #15]
}
 800e764:	4618      	mov	r0, r3
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	40010000 	.word	0x40010000
 800e770:	40010400 	.word	0x40010400
 800e774:	40014000 	.word	0x40014000
 800e778:	40014400 	.word	0x40014400
 800e77c:	40014800 	.word	0x40014800
 800e780:	40000400 	.word	0x40000400
 800e784:	40000800 	.word	0x40000800
 800e788:	40000c00 	.word	0x40000c00
 800e78c:	40001800 	.word	0x40001800
 800e790:	00010007 	.word	0x00010007

0800e794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e049      	b.n	800e83a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d106      	bne.n	800e7c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 f841 	bl	800e842 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	3304      	adds	r3, #4
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	4610      	mov	r0, r2
 800e7d4:	f000 fc80 	bl	800f0d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e838:	2300      	movs	r3, #0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3708      	adds	r7, #8
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e842:	b480      	push	{r7}
 800e844:	b083      	sub	sp, #12
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e84a:	bf00      	nop
 800e84c:	370c      	adds	r7, #12
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
	...

0800e858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d109      	bne.n	800e87c <HAL_TIM_PWM_Start+0x24>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	2b01      	cmp	r3, #1
 800e872:	bf14      	ite	ne
 800e874:	2301      	movne	r3, #1
 800e876:	2300      	moveq	r3, #0
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	e03c      	b.n	800e8f6 <HAL_TIM_PWM_Start+0x9e>
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	2b04      	cmp	r3, #4
 800e880:	d109      	bne.n	800e896 <HAL_TIM_PWM_Start+0x3e>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e888:	b2db      	uxtb	r3, r3
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	bf14      	ite	ne
 800e88e:	2301      	movne	r3, #1
 800e890:	2300      	moveq	r3, #0
 800e892:	b2db      	uxtb	r3, r3
 800e894:	e02f      	b.n	800e8f6 <HAL_TIM_PWM_Start+0x9e>
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b08      	cmp	r3, #8
 800e89a:	d109      	bne.n	800e8b0 <HAL_TIM_PWM_Start+0x58>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	bf14      	ite	ne
 800e8a8:	2301      	movne	r3, #1
 800e8aa:	2300      	moveq	r3, #0
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	e022      	b.n	800e8f6 <HAL_TIM_PWM_Start+0x9e>
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b0c      	cmp	r3, #12
 800e8b4:	d109      	bne.n	800e8ca <HAL_TIM_PWM_Start+0x72>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	bf14      	ite	ne
 800e8c2:	2301      	movne	r3, #1
 800e8c4:	2300      	moveq	r3, #0
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	e015      	b.n	800e8f6 <HAL_TIM_PWM_Start+0x9e>
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	2b10      	cmp	r3, #16
 800e8ce:	d109      	bne.n	800e8e4 <HAL_TIM_PWM_Start+0x8c>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	bf14      	ite	ne
 800e8dc:	2301      	movne	r3, #1
 800e8de:	2300      	moveq	r3, #0
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	e008      	b.n	800e8f6 <HAL_TIM_PWM_Start+0x9e>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	bf14      	ite	ne
 800e8f0:	2301      	movne	r3, #1
 800e8f2:	2300      	moveq	r3, #0
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d001      	beq.n	800e8fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e0a1      	b.n	800ea42 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d104      	bne.n	800e90e <HAL_TIM_PWM_Start+0xb6>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2202      	movs	r2, #2
 800e908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e90c:	e023      	b.n	800e956 <HAL_TIM_PWM_Start+0xfe>
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	2b04      	cmp	r3, #4
 800e912:	d104      	bne.n	800e91e <HAL_TIM_PWM_Start+0xc6>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2202      	movs	r2, #2
 800e918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e91c:	e01b      	b.n	800e956 <HAL_TIM_PWM_Start+0xfe>
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	2b08      	cmp	r3, #8
 800e922:	d104      	bne.n	800e92e <HAL_TIM_PWM_Start+0xd6>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2202      	movs	r2, #2
 800e928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e92c:	e013      	b.n	800e956 <HAL_TIM_PWM_Start+0xfe>
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	2b0c      	cmp	r3, #12
 800e932:	d104      	bne.n	800e93e <HAL_TIM_PWM_Start+0xe6>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2202      	movs	r2, #2
 800e938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e93c:	e00b      	b.n	800e956 <HAL_TIM_PWM_Start+0xfe>
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2b10      	cmp	r3, #16
 800e942:	d104      	bne.n	800e94e <HAL_TIM_PWM_Start+0xf6>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2202      	movs	r2, #2
 800e948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e94c:	e003      	b.n	800e956 <HAL_TIM_PWM_Start+0xfe>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2202      	movs	r2, #2
 800e952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2201      	movs	r2, #1
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	4618      	mov	r0, r3
 800e960:	f000 ffd4 	bl	800f90c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a38      	ldr	r2, [pc, #224]	; (800ea4c <HAL_TIM_PWM_Start+0x1f4>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d013      	beq.n	800e996 <HAL_TIM_PWM_Start+0x13e>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4a37      	ldr	r2, [pc, #220]	; (800ea50 <HAL_TIM_PWM_Start+0x1f8>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d00e      	beq.n	800e996 <HAL_TIM_PWM_Start+0x13e>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4a35      	ldr	r2, [pc, #212]	; (800ea54 <HAL_TIM_PWM_Start+0x1fc>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d009      	beq.n	800e996 <HAL_TIM_PWM_Start+0x13e>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a34      	ldr	r2, [pc, #208]	; (800ea58 <HAL_TIM_PWM_Start+0x200>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d004      	beq.n	800e996 <HAL_TIM_PWM_Start+0x13e>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a32      	ldr	r2, [pc, #200]	; (800ea5c <HAL_TIM_PWM_Start+0x204>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d101      	bne.n	800e99a <HAL_TIM_PWM_Start+0x142>
 800e996:	2301      	movs	r3, #1
 800e998:	e000      	b.n	800e99c <HAL_TIM_PWM_Start+0x144>
 800e99a:	2300      	movs	r3, #0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d007      	beq.n	800e9b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e9ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a25      	ldr	r2, [pc, #148]	; (800ea4c <HAL_TIM_PWM_Start+0x1f4>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d022      	beq.n	800ea00 <HAL_TIM_PWM_Start+0x1a8>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9c2:	d01d      	beq.n	800ea00 <HAL_TIM_PWM_Start+0x1a8>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a25      	ldr	r2, [pc, #148]	; (800ea60 <HAL_TIM_PWM_Start+0x208>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d018      	beq.n	800ea00 <HAL_TIM_PWM_Start+0x1a8>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a24      	ldr	r2, [pc, #144]	; (800ea64 <HAL_TIM_PWM_Start+0x20c>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d013      	beq.n	800ea00 <HAL_TIM_PWM_Start+0x1a8>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a22      	ldr	r2, [pc, #136]	; (800ea68 <HAL_TIM_PWM_Start+0x210>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d00e      	beq.n	800ea00 <HAL_TIM_PWM_Start+0x1a8>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4a1a      	ldr	r2, [pc, #104]	; (800ea50 <HAL_TIM_PWM_Start+0x1f8>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d009      	beq.n	800ea00 <HAL_TIM_PWM_Start+0x1a8>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a1e      	ldr	r2, [pc, #120]	; (800ea6c <HAL_TIM_PWM_Start+0x214>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d004      	beq.n	800ea00 <HAL_TIM_PWM_Start+0x1a8>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a16      	ldr	r2, [pc, #88]	; (800ea54 <HAL_TIM_PWM_Start+0x1fc>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d115      	bne.n	800ea2c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	689a      	ldr	r2, [r3, #8]
 800ea06:	4b1a      	ldr	r3, [pc, #104]	; (800ea70 <HAL_TIM_PWM_Start+0x218>)
 800ea08:	4013      	ands	r3, r2
 800ea0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2b06      	cmp	r3, #6
 800ea10:	d015      	beq.n	800ea3e <HAL_TIM_PWM_Start+0x1e6>
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea18:	d011      	beq.n	800ea3e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f042 0201 	orr.w	r2, r2, #1
 800ea28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea2a:	e008      	b.n	800ea3e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f042 0201 	orr.w	r2, r2, #1
 800ea3a:	601a      	str	r2, [r3, #0]
 800ea3c:	e000      	b.n	800ea40 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	40010000 	.word	0x40010000
 800ea50:	40010400 	.word	0x40010400
 800ea54:	40014000 	.word	0x40014000
 800ea58:	40014400 	.word	0x40014400
 800ea5c:	40014800 	.word	0x40014800
 800ea60:	40000400 	.word	0x40000400
 800ea64:	40000800 	.word	0x40000800
 800ea68:	40000c00 	.word	0x40000c00
 800ea6c:	40001800 	.word	0x40001800
 800ea70:	00010007 	.word	0x00010007

0800ea74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	691b      	ldr	r3, [r3, #16]
 800ea8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	f003 0302 	and.w	r3, r3, #2
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d020      	beq.n	800ead8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f003 0302 	and.w	r3, r3, #2
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d01b      	beq.n	800ead8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f06f 0202 	mvn.w	r2, #2
 800eaa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2201      	movs	r2, #1
 800eaae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	699b      	ldr	r3, [r3, #24]
 800eab6:	f003 0303 	and.w	r3, r3, #3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d003      	beq.n	800eac6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f000 faec 	bl	800f09c <HAL_TIM_IC_CaptureCallback>
 800eac4:	e005      	b.n	800ead2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f7f1 fd8c 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 faef 	bl	800f0b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	f003 0304 	and.w	r3, r3, #4
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d020      	beq.n	800eb24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f003 0304 	and.w	r3, r3, #4
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01b      	beq.n	800eb24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f06f 0204 	mvn.w	r2, #4
 800eaf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2202      	movs	r2, #2
 800eafa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	699b      	ldr	r3, [r3, #24]
 800eb02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d003      	beq.n	800eb12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f000 fac6 	bl	800f09c <HAL_TIM_IC_CaptureCallback>
 800eb10:	e005      	b.n	800eb1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7f1 fd66 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 fac9 	bl	800f0b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	f003 0308 	and.w	r3, r3, #8
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d020      	beq.n	800eb70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f003 0308 	and.w	r3, r3, #8
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d01b      	beq.n	800eb70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f06f 0208 	mvn.w	r2, #8
 800eb40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2204      	movs	r2, #4
 800eb46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	69db      	ldr	r3, [r3, #28]
 800eb4e:	f003 0303 	and.w	r3, r3, #3
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d003      	beq.n	800eb5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 faa0 	bl	800f09c <HAL_TIM_IC_CaptureCallback>
 800eb5c:	e005      	b.n	800eb6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7f1 fd40 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 faa3 	bl	800f0b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	f003 0310 	and.w	r3, r3, #16
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d020      	beq.n	800ebbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f003 0310 	and.w	r3, r3, #16
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d01b      	beq.n	800ebbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f06f 0210 	mvn.w	r2, #16
 800eb8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2208      	movs	r2, #8
 800eb92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	69db      	ldr	r3, [r3, #28]
 800eb9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d003      	beq.n	800ebaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 fa7a 	bl	800f09c <HAL_TIM_IC_CaptureCallback>
 800eba8:	e005      	b.n	800ebb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f7f1 fd1a 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 fa7d 	bl	800f0b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	f003 0301 	and.w	r3, r3, #1
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00c      	beq.n	800ebe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f003 0301 	and.w	r3, r3, #1
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d007      	beq.n	800ebe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f06f 0201 	mvn.w	r2, #1
 800ebd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7f3 ff7c 	bl	8002ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d104      	bne.n	800ebf4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d00c      	beq.n	800ec0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d007      	beq.n	800ec0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ec06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 ffbb 	bl	800fb84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00c      	beq.n	800ec32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d007      	beq.n	800ec32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ec2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 ffb3 	bl	800fb98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00c      	beq.n	800ec56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d007      	beq.n	800ec56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 fa37 	bl	800f0c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	f003 0320 	and.w	r3, r3, #32
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00c      	beq.n	800ec7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f003 0320 	and.w	r3, r3, #32
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d007      	beq.n	800ec7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f06f 0220 	mvn.w	r2, #32
 800ec72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 ff7b 	bl	800fb70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ec7a:	bf00      	nop
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
	...

0800ec84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b086      	sub	sp, #24
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec90:	2300      	movs	r3, #0
 800ec92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d101      	bne.n	800eca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ec9e:	2302      	movs	r3, #2
 800eca0:	e0ff      	b.n	800eea2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2201      	movs	r2, #1
 800eca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b14      	cmp	r3, #20
 800ecae:	f200 80f0 	bhi.w	800ee92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ecb2:	a201      	add	r2, pc, #4	; (adr r2, 800ecb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ecb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb8:	0800ed0d 	.word	0x0800ed0d
 800ecbc:	0800ee93 	.word	0x0800ee93
 800ecc0:	0800ee93 	.word	0x0800ee93
 800ecc4:	0800ee93 	.word	0x0800ee93
 800ecc8:	0800ed4d 	.word	0x0800ed4d
 800eccc:	0800ee93 	.word	0x0800ee93
 800ecd0:	0800ee93 	.word	0x0800ee93
 800ecd4:	0800ee93 	.word	0x0800ee93
 800ecd8:	0800ed8f 	.word	0x0800ed8f
 800ecdc:	0800ee93 	.word	0x0800ee93
 800ece0:	0800ee93 	.word	0x0800ee93
 800ece4:	0800ee93 	.word	0x0800ee93
 800ece8:	0800edcf 	.word	0x0800edcf
 800ecec:	0800ee93 	.word	0x0800ee93
 800ecf0:	0800ee93 	.word	0x0800ee93
 800ecf4:	0800ee93 	.word	0x0800ee93
 800ecf8:	0800ee11 	.word	0x0800ee11
 800ecfc:	0800ee93 	.word	0x0800ee93
 800ed00:	0800ee93 	.word	0x0800ee93
 800ed04:	0800ee93 	.word	0x0800ee93
 800ed08:	0800ee51 	.word	0x0800ee51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68b9      	ldr	r1, [r7, #8]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f000 fa86 	bl	800f224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	699a      	ldr	r2, [r3, #24]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f042 0208 	orr.w	r2, r2, #8
 800ed26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	699a      	ldr	r2, [r3, #24]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f022 0204 	bic.w	r2, r2, #4
 800ed36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	6999      	ldr	r1, [r3, #24]
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	691a      	ldr	r2, [r3, #16]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	430a      	orrs	r2, r1
 800ed48:	619a      	str	r2, [r3, #24]
      break;
 800ed4a:	e0a5      	b.n	800ee98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	68b9      	ldr	r1, [r7, #8]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f000 faf6 	bl	800f344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	699a      	ldr	r2, [r3, #24]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	699a      	ldr	r2, [r3, #24]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	6999      	ldr	r1, [r3, #24]
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	021a      	lsls	r2, r3, #8
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	430a      	orrs	r2, r1
 800ed8a:	619a      	str	r2, [r3, #24]
      break;
 800ed8c:	e084      	b.n	800ee98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	68b9      	ldr	r1, [r7, #8]
 800ed94:	4618      	mov	r0, r3
 800ed96:	f000 fb5f 	bl	800f458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	69da      	ldr	r2, [r3, #28]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f042 0208 	orr.w	r2, r2, #8
 800eda8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	69da      	ldr	r2, [r3, #28]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f022 0204 	bic.w	r2, r2, #4
 800edb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	69d9      	ldr	r1, [r3, #28]
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	691a      	ldr	r2, [r3, #16]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	430a      	orrs	r2, r1
 800edca:	61da      	str	r2, [r3, #28]
      break;
 800edcc:	e064      	b.n	800ee98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	68b9      	ldr	r1, [r7, #8]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 fbc7 	bl	800f568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	69da      	ldr	r2, [r3, #28]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ede8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	69da      	ldr	r2, [r3, #28]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800edf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	69d9      	ldr	r1, [r3, #28]
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	691b      	ldr	r3, [r3, #16]
 800ee04:	021a      	lsls	r2, r3, #8
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	430a      	orrs	r2, r1
 800ee0c:	61da      	str	r2, [r3, #28]
      break;
 800ee0e:	e043      	b.n	800ee98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68b9      	ldr	r1, [r7, #8]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f000 fc10 	bl	800f63c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f042 0208 	orr.w	r2, r2, #8
 800ee2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f022 0204 	bic.w	r2, r2, #4
 800ee3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	691a      	ldr	r2, [r3, #16]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	430a      	orrs	r2, r1
 800ee4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ee4e:	e023      	b.n	800ee98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	68b9      	ldr	r1, [r7, #8]
 800ee56:	4618      	mov	r0, r3
 800ee58:	f000 fc54 	bl	800f704 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	691b      	ldr	r3, [r3, #16]
 800ee86:	021a      	lsls	r2, r3, #8
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	430a      	orrs	r2, r1
 800ee8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ee90:	e002      	b.n	800ee98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ee92:	2301      	movs	r3, #1
 800ee94:	75fb      	strb	r3, [r7, #23]
      break;
 800ee96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eea0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3718      	adds	r7, #24
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop

0800eeac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d101      	bne.n	800eec8 <HAL_TIM_ConfigClockSource+0x1c>
 800eec4:	2302      	movs	r3, #2
 800eec6:	e0dc      	b.n	800f082 <HAL_TIM_ConfigClockSource+0x1d6>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2202      	movs	r2, #2
 800eed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eee0:	68ba      	ldr	r2, [r7, #8]
 800eee2:	4b6a      	ldr	r3, [pc, #424]	; (800f08c <HAL_TIM_ConfigClockSource+0x1e0>)
 800eee4:	4013      	ands	r3, r2
 800eee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eeee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	68ba      	ldr	r2, [r7, #8]
 800eef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4a64      	ldr	r2, [pc, #400]	; (800f090 <HAL_TIM_ConfigClockSource+0x1e4>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	f000 80a9 	beq.w	800f056 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef04:	4a62      	ldr	r2, [pc, #392]	; (800f090 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	f200 80ae 	bhi.w	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef0c:	4a61      	ldr	r2, [pc, #388]	; (800f094 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	f000 80a1 	beq.w	800f056 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef14:	4a5f      	ldr	r2, [pc, #380]	; (800f094 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	f200 80a6 	bhi.w	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef1c:	4a5e      	ldr	r2, [pc, #376]	; (800f098 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	f000 8099 	beq.w	800f056 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef24:	4a5c      	ldr	r2, [pc, #368]	; (800f098 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	f200 809e 	bhi.w	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ef30:	f000 8091 	beq.w	800f056 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ef38:	f200 8096 	bhi.w	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef40:	f000 8089 	beq.w	800f056 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef48:	f200 808e 	bhi.w	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef50:	d03e      	beq.n	800efd0 <HAL_TIM_ConfigClockSource+0x124>
 800ef52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef56:	f200 8087 	bhi.w	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef5e:	f000 8086 	beq.w	800f06e <HAL_TIM_ConfigClockSource+0x1c2>
 800ef62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef66:	d87f      	bhi.n	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef68:	2b70      	cmp	r3, #112	; 0x70
 800ef6a:	d01a      	beq.n	800efa2 <HAL_TIM_ConfigClockSource+0xf6>
 800ef6c:	2b70      	cmp	r3, #112	; 0x70
 800ef6e:	d87b      	bhi.n	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef70:	2b60      	cmp	r3, #96	; 0x60
 800ef72:	d050      	beq.n	800f016 <HAL_TIM_ConfigClockSource+0x16a>
 800ef74:	2b60      	cmp	r3, #96	; 0x60
 800ef76:	d877      	bhi.n	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef78:	2b50      	cmp	r3, #80	; 0x50
 800ef7a:	d03c      	beq.n	800eff6 <HAL_TIM_ConfigClockSource+0x14a>
 800ef7c:	2b50      	cmp	r3, #80	; 0x50
 800ef7e:	d873      	bhi.n	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef80:	2b40      	cmp	r3, #64	; 0x40
 800ef82:	d058      	beq.n	800f036 <HAL_TIM_ConfigClockSource+0x18a>
 800ef84:	2b40      	cmp	r3, #64	; 0x40
 800ef86:	d86f      	bhi.n	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef88:	2b30      	cmp	r3, #48	; 0x30
 800ef8a:	d064      	beq.n	800f056 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef8c:	2b30      	cmp	r3, #48	; 0x30
 800ef8e:	d86b      	bhi.n	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef90:	2b20      	cmp	r3, #32
 800ef92:	d060      	beq.n	800f056 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef94:	2b20      	cmp	r3, #32
 800ef96:	d867      	bhi.n	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d05c      	beq.n	800f056 <HAL_TIM_ConfigClockSource+0x1aa>
 800ef9c:	2b10      	cmp	r3, #16
 800ef9e:	d05a      	beq.n	800f056 <HAL_TIM_ConfigClockSource+0x1aa>
 800efa0:	e062      	b.n	800f068 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6818      	ldr	r0, [r3, #0]
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	6899      	ldr	r1, [r3, #8]
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	685a      	ldr	r2, [r3, #4]
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	f000 fc8b 	bl	800f8cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800efc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	68ba      	ldr	r2, [r7, #8]
 800efcc:	609a      	str	r2, [r3, #8]
      break;
 800efce:	e04f      	b.n	800f070 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6818      	ldr	r0, [r3, #0]
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	6899      	ldr	r1, [r3, #8]
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	685a      	ldr	r2, [r3, #4]
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	68db      	ldr	r3, [r3, #12]
 800efe0:	f000 fc74 	bl	800f8cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	689a      	ldr	r2, [r3, #8]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eff2:	609a      	str	r2, [r3, #8]
      break;
 800eff4:	e03c      	b.n	800f070 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6818      	ldr	r0, [r3, #0]
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	6859      	ldr	r1, [r3, #4]
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	461a      	mov	r2, r3
 800f004:	f000 fbe4 	bl	800f7d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	2150      	movs	r1, #80	; 0x50
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 fc3e 	bl	800f890 <TIM_ITRx_SetConfig>
      break;
 800f014:	e02c      	b.n	800f070 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6818      	ldr	r0, [r3, #0]
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	6859      	ldr	r1, [r3, #4]
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	68db      	ldr	r3, [r3, #12]
 800f022:	461a      	mov	r2, r3
 800f024:	f000 fc03 	bl	800f82e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	2160      	movs	r1, #96	; 0x60
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 fc2e 	bl	800f890 <TIM_ITRx_SetConfig>
      break;
 800f034:	e01c      	b.n	800f070 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	6859      	ldr	r1, [r3, #4]
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	461a      	mov	r2, r3
 800f044:	f000 fbc4 	bl	800f7d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2140      	movs	r1, #64	; 0x40
 800f04e:	4618      	mov	r0, r3
 800f050:	f000 fc1e 	bl	800f890 <TIM_ITRx_SetConfig>
      break;
 800f054:	e00c      	b.n	800f070 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	4619      	mov	r1, r3
 800f060:	4610      	mov	r0, r2
 800f062:	f000 fc15 	bl	800f890 <TIM_ITRx_SetConfig>
      break;
 800f066:	e003      	b.n	800f070 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f068:	2301      	movs	r3, #1
 800f06a:	73fb      	strb	r3, [r7, #15]
      break;
 800f06c:	e000      	b.n	800f070 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f06e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f080:	7bfb      	ldrb	r3, [r7, #15]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	ffceff88 	.word	0xffceff88
 800f090:	00100040 	.word	0x00100040
 800f094:	00100030 	.word	0x00100030
 800f098:	00100020 	.word	0x00100020

0800f09c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f0a4:	bf00      	nop
 800f0a6:	370c      	adds	r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f0b8:	bf00      	nop
 800f0ba:	370c      	adds	r7, #12
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f0cc:	bf00      	nop
 800f0ce:	370c      	adds	r7, #12
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr

0800f0d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4a46      	ldr	r2, [pc, #280]	; (800f204 <TIM_Base_SetConfig+0x12c>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d013      	beq.n	800f118 <TIM_Base_SetConfig+0x40>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0f6:	d00f      	beq.n	800f118 <TIM_Base_SetConfig+0x40>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	4a43      	ldr	r2, [pc, #268]	; (800f208 <TIM_Base_SetConfig+0x130>)
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d00b      	beq.n	800f118 <TIM_Base_SetConfig+0x40>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	4a42      	ldr	r2, [pc, #264]	; (800f20c <TIM_Base_SetConfig+0x134>)
 800f104:	4293      	cmp	r3, r2
 800f106:	d007      	beq.n	800f118 <TIM_Base_SetConfig+0x40>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	4a41      	ldr	r2, [pc, #260]	; (800f210 <TIM_Base_SetConfig+0x138>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d003      	beq.n	800f118 <TIM_Base_SetConfig+0x40>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4a40      	ldr	r2, [pc, #256]	; (800f214 <TIM_Base_SetConfig+0x13c>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d108      	bne.n	800f12a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f11e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	4313      	orrs	r3, r2
 800f128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	4a35      	ldr	r2, [pc, #212]	; (800f204 <TIM_Base_SetConfig+0x12c>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d01f      	beq.n	800f172 <TIM_Base_SetConfig+0x9a>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f138:	d01b      	beq.n	800f172 <TIM_Base_SetConfig+0x9a>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a32      	ldr	r2, [pc, #200]	; (800f208 <TIM_Base_SetConfig+0x130>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d017      	beq.n	800f172 <TIM_Base_SetConfig+0x9a>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a31      	ldr	r2, [pc, #196]	; (800f20c <TIM_Base_SetConfig+0x134>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d013      	beq.n	800f172 <TIM_Base_SetConfig+0x9a>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4a30      	ldr	r2, [pc, #192]	; (800f210 <TIM_Base_SetConfig+0x138>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d00f      	beq.n	800f172 <TIM_Base_SetConfig+0x9a>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4a2f      	ldr	r2, [pc, #188]	; (800f214 <TIM_Base_SetConfig+0x13c>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d00b      	beq.n	800f172 <TIM_Base_SetConfig+0x9a>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4a2e      	ldr	r2, [pc, #184]	; (800f218 <TIM_Base_SetConfig+0x140>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d007      	beq.n	800f172 <TIM_Base_SetConfig+0x9a>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	4a2d      	ldr	r2, [pc, #180]	; (800f21c <TIM_Base_SetConfig+0x144>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d003      	beq.n	800f172 <TIM_Base_SetConfig+0x9a>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	4a2c      	ldr	r2, [pc, #176]	; (800f220 <TIM_Base_SetConfig+0x148>)
 800f16e:	4293      	cmp	r3, r2
 800f170:	d108      	bne.n	800f184 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	68fa      	ldr	r2, [r7, #12]
 800f180:	4313      	orrs	r3, r2
 800f182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	695b      	ldr	r3, [r3, #20]
 800f18e:	4313      	orrs	r3, r2
 800f190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	689a      	ldr	r2, [r3, #8]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a16      	ldr	r2, [pc, #88]	; (800f204 <TIM_Base_SetConfig+0x12c>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d00f      	beq.n	800f1d0 <TIM_Base_SetConfig+0xf8>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a18      	ldr	r2, [pc, #96]	; (800f214 <TIM_Base_SetConfig+0x13c>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d00b      	beq.n	800f1d0 <TIM_Base_SetConfig+0xf8>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a17      	ldr	r2, [pc, #92]	; (800f218 <TIM_Base_SetConfig+0x140>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d007      	beq.n	800f1d0 <TIM_Base_SetConfig+0xf8>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a16      	ldr	r2, [pc, #88]	; (800f21c <TIM_Base_SetConfig+0x144>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d003      	beq.n	800f1d0 <TIM_Base_SetConfig+0xf8>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a15      	ldr	r2, [pc, #84]	; (800f220 <TIM_Base_SetConfig+0x148>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d103      	bne.n	800f1d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	691a      	ldr	r2, [r3, #16]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	691b      	ldr	r3, [r3, #16]
 800f1e2:	f003 0301 	and.w	r3, r3, #1
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d105      	bne.n	800f1f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	f023 0201 	bic.w	r2, r3, #1
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	611a      	str	r2, [r3, #16]
  }
}
 800f1f6:	bf00      	nop
 800f1f8:	3714      	adds	r7, #20
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr
 800f202:	bf00      	nop
 800f204:	40010000 	.word	0x40010000
 800f208:	40000400 	.word	0x40000400
 800f20c:	40000800 	.word	0x40000800
 800f210:	40000c00 	.word	0x40000c00
 800f214:	40010400 	.word	0x40010400
 800f218:	40014000 	.word	0x40014000
 800f21c:	40014400 	.word	0x40014400
 800f220:	40014800 	.word	0x40014800

0800f224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f224:	b480      	push	{r7}
 800f226:	b087      	sub	sp, #28
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6a1b      	ldr	r3, [r3, #32]
 800f232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6a1b      	ldr	r3, [r3, #32]
 800f238:	f023 0201 	bic.w	r2, r3, #1
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	699b      	ldr	r3, [r3, #24]
 800f24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	4b37      	ldr	r3, [pc, #220]	; (800f32c <TIM_OC1_SetConfig+0x108>)
 800f250:	4013      	ands	r3, r2
 800f252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f023 0303 	bic.w	r3, r3, #3
 800f25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	4313      	orrs	r3, r2
 800f264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f023 0302 	bic.w	r3, r3, #2
 800f26c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	697a      	ldr	r2, [r7, #20]
 800f274:	4313      	orrs	r3, r2
 800f276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	4a2d      	ldr	r2, [pc, #180]	; (800f330 <TIM_OC1_SetConfig+0x10c>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d00f      	beq.n	800f2a0 <TIM_OC1_SetConfig+0x7c>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4a2c      	ldr	r2, [pc, #176]	; (800f334 <TIM_OC1_SetConfig+0x110>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d00b      	beq.n	800f2a0 <TIM_OC1_SetConfig+0x7c>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4a2b      	ldr	r2, [pc, #172]	; (800f338 <TIM_OC1_SetConfig+0x114>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d007      	beq.n	800f2a0 <TIM_OC1_SetConfig+0x7c>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4a2a      	ldr	r2, [pc, #168]	; (800f33c <TIM_OC1_SetConfig+0x118>)
 800f294:	4293      	cmp	r3, r2
 800f296:	d003      	beq.n	800f2a0 <TIM_OC1_SetConfig+0x7c>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	4a29      	ldr	r2, [pc, #164]	; (800f340 <TIM_OC1_SetConfig+0x11c>)
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d10c      	bne.n	800f2ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	f023 0308 	bic.w	r3, r3, #8
 800f2a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	68db      	ldr	r3, [r3, #12]
 800f2ac:	697a      	ldr	r2, [r7, #20]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f023 0304 	bic.w	r3, r3, #4
 800f2b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4a1c      	ldr	r2, [pc, #112]	; (800f330 <TIM_OC1_SetConfig+0x10c>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d00f      	beq.n	800f2e2 <TIM_OC1_SetConfig+0xbe>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	4a1b      	ldr	r2, [pc, #108]	; (800f334 <TIM_OC1_SetConfig+0x110>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d00b      	beq.n	800f2e2 <TIM_OC1_SetConfig+0xbe>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4a1a      	ldr	r2, [pc, #104]	; (800f338 <TIM_OC1_SetConfig+0x114>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d007      	beq.n	800f2e2 <TIM_OC1_SetConfig+0xbe>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4a19      	ldr	r2, [pc, #100]	; (800f33c <TIM_OC1_SetConfig+0x118>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d003      	beq.n	800f2e2 <TIM_OC1_SetConfig+0xbe>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a18      	ldr	r2, [pc, #96]	; (800f340 <TIM_OC1_SetConfig+0x11c>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d111      	bne.n	800f306 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	695b      	ldr	r3, [r3, #20]
 800f2f6:	693a      	ldr	r2, [r7, #16]
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	699b      	ldr	r3, [r3, #24]
 800f300:	693a      	ldr	r2, [r7, #16]
 800f302:	4313      	orrs	r3, r2
 800f304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	693a      	ldr	r2, [r7, #16]
 800f30a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	68fa      	ldr	r2, [r7, #12]
 800f310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	685a      	ldr	r2, [r3, #4]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	621a      	str	r2, [r3, #32]
}
 800f320:	bf00      	nop
 800f322:	371c      	adds	r7, #28
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr
 800f32c:	fffeff8f 	.word	0xfffeff8f
 800f330:	40010000 	.word	0x40010000
 800f334:	40010400 	.word	0x40010400
 800f338:	40014000 	.word	0x40014000
 800f33c:	40014400 	.word	0x40014400
 800f340:	40014800 	.word	0x40014800

0800f344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f344:	b480      	push	{r7}
 800f346:	b087      	sub	sp, #28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a1b      	ldr	r3, [r3, #32]
 800f352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6a1b      	ldr	r3, [r3, #32]
 800f358:	f023 0210 	bic.w	r2, r3, #16
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	699b      	ldr	r3, [r3, #24]
 800f36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	4b34      	ldr	r3, [pc, #208]	; (800f440 <TIM_OC2_SetConfig+0xfc>)
 800f370:	4013      	ands	r3, r2
 800f372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f37a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	021b      	lsls	r3, r3, #8
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	4313      	orrs	r3, r2
 800f386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	f023 0320 	bic.w	r3, r3, #32
 800f38e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	011b      	lsls	r3, r3, #4
 800f396:	697a      	ldr	r2, [r7, #20]
 800f398:	4313      	orrs	r3, r2
 800f39a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a29      	ldr	r2, [pc, #164]	; (800f444 <TIM_OC2_SetConfig+0x100>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d003      	beq.n	800f3ac <TIM_OC2_SetConfig+0x68>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a28      	ldr	r2, [pc, #160]	; (800f448 <TIM_OC2_SetConfig+0x104>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d10d      	bne.n	800f3c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	011b      	lsls	r3, r3, #4
 800f3ba:	697a      	ldr	r2, [r7, #20]
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4a1e      	ldr	r2, [pc, #120]	; (800f444 <TIM_OC2_SetConfig+0x100>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d00f      	beq.n	800f3f0 <TIM_OC2_SetConfig+0xac>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4a1d      	ldr	r2, [pc, #116]	; (800f448 <TIM_OC2_SetConfig+0x104>)
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d00b      	beq.n	800f3f0 <TIM_OC2_SetConfig+0xac>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a1c      	ldr	r2, [pc, #112]	; (800f44c <TIM_OC2_SetConfig+0x108>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d007      	beq.n	800f3f0 <TIM_OC2_SetConfig+0xac>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4a1b      	ldr	r2, [pc, #108]	; (800f450 <TIM_OC2_SetConfig+0x10c>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d003      	beq.n	800f3f0 <TIM_OC2_SetConfig+0xac>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a1a      	ldr	r2, [pc, #104]	; (800f454 <TIM_OC2_SetConfig+0x110>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d113      	bne.n	800f418 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	695b      	ldr	r3, [r3, #20]
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	693a      	ldr	r2, [r7, #16]
 800f408:	4313      	orrs	r3, r2
 800f40a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	699b      	ldr	r3, [r3, #24]
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	693a      	ldr	r2, [r7, #16]
 800f414:	4313      	orrs	r3, r2
 800f416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	693a      	ldr	r2, [r7, #16]
 800f41c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	685a      	ldr	r2, [r3, #4]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	697a      	ldr	r2, [r7, #20]
 800f430:	621a      	str	r2, [r3, #32]
}
 800f432:	bf00      	nop
 800f434:	371c      	adds	r7, #28
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr
 800f43e:	bf00      	nop
 800f440:	feff8fff 	.word	0xfeff8fff
 800f444:	40010000 	.word	0x40010000
 800f448:	40010400 	.word	0x40010400
 800f44c:	40014000 	.word	0x40014000
 800f450:	40014400 	.word	0x40014400
 800f454:	40014800 	.word	0x40014800

0800f458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f458:	b480      	push	{r7}
 800f45a:	b087      	sub	sp, #28
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6a1b      	ldr	r3, [r3, #32]
 800f466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6a1b      	ldr	r3, [r3, #32]
 800f46c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	69db      	ldr	r3, [r3, #28]
 800f47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f480:	68fa      	ldr	r2, [r7, #12]
 800f482:	4b33      	ldr	r3, [pc, #204]	; (800f550 <TIM_OC3_SetConfig+0xf8>)
 800f484:	4013      	ands	r3, r2
 800f486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f023 0303 	bic.w	r3, r3, #3
 800f48e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	68fa      	ldr	r2, [r7, #12]
 800f496:	4313      	orrs	r3, r2
 800f498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f4a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	689b      	ldr	r3, [r3, #8]
 800f4a6:	021b      	lsls	r3, r3, #8
 800f4a8:	697a      	ldr	r2, [r7, #20]
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4a28      	ldr	r2, [pc, #160]	; (800f554 <TIM_OC3_SetConfig+0xfc>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d003      	beq.n	800f4be <TIM_OC3_SetConfig+0x66>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	4a27      	ldr	r2, [pc, #156]	; (800f558 <TIM_OC3_SetConfig+0x100>)
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d10d      	bne.n	800f4da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f4c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	021b      	lsls	r3, r3, #8
 800f4cc:	697a      	ldr	r2, [r7, #20]
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f4d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a1d      	ldr	r2, [pc, #116]	; (800f554 <TIM_OC3_SetConfig+0xfc>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d00f      	beq.n	800f502 <TIM_OC3_SetConfig+0xaa>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4a1c      	ldr	r2, [pc, #112]	; (800f558 <TIM_OC3_SetConfig+0x100>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d00b      	beq.n	800f502 <TIM_OC3_SetConfig+0xaa>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a1b      	ldr	r2, [pc, #108]	; (800f55c <TIM_OC3_SetConfig+0x104>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d007      	beq.n	800f502 <TIM_OC3_SetConfig+0xaa>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	4a1a      	ldr	r2, [pc, #104]	; (800f560 <TIM_OC3_SetConfig+0x108>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d003      	beq.n	800f502 <TIM_OC3_SetConfig+0xaa>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a19      	ldr	r2, [pc, #100]	; (800f564 <TIM_OC3_SetConfig+0x10c>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d113      	bne.n	800f52a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	695b      	ldr	r3, [r3, #20]
 800f516:	011b      	lsls	r3, r3, #4
 800f518:	693a      	ldr	r2, [r7, #16]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	699b      	ldr	r3, [r3, #24]
 800f522:	011b      	lsls	r3, r3, #4
 800f524:	693a      	ldr	r2, [r7, #16]
 800f526:	4313      	orrs	r3, r2
 800f528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	693a      	ldr	r2, [r7, #16]
 800f52e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	685a      	ldr	r2, [r3, #4]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	697a      	ldr	r2, [r7, #20]
 800f542:	621a      	str	r2, [r3, #32]
}
 800f544:	bf00      	nop
 800f546:	371c      	adds	r7, #28
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr
 800f550:	fffeff8f 	.word	0xfffeff8f
 800f554:	40010000 	.word	0x40010000
 800f558:	40010400 	.word	0x40010400
 800f55c:	40014000 	.word	0x40014000
 800f560:	40014400 	.word	0x40014400
 800f564:	40014800 	.word	0x40014800

0800f568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f568:	b480      	push	{r7}
 800f56a:	b087      	sub	sp, #28
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6a1b      	ldr	r3, [r3, #32]
 800f576:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a1b      	ldr	r3, [r3, #32]
 800f57c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	69db      	ldr	r3, [r3, #28]
 800f58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f590:	68fa      	ldr	r2, [r7, #12]
 800f592:	4b24      	ldr	r3, [pc, #144]	; (800f624 <TIM_OC4_SetConfig+0xbc>)
 800f594:	4013      	ands	r3, r2
 800f596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f59e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	021b      	lsls	r3, r3, #8
 800f5a6:	68fa      	ldr	r2, [r7, #12]
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f5b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	031b      	lsls	r3, r3, #12
 800f5ba:	693a      	ldr	r2, [r7, #16]
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a19      	ldr	r2, [pc, #100]	; (800f628 <TIM_OC4_SetConfig+0xc0>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d00f      	beq.n	800f5e8 <TIM_OC4_SetConfig+0x80>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a18      	ldr	r2, [pc, #96]	; (800f62c <TIM_OC4_SetConfig+0xc4>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d00b      	beq.n	800f5e8 <TIM_OC4_SetConfig+0x80>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a17      	ldr	r2, [pc, #92]	; (800f630 <TIM_OC4_SetConfig+0xc8>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d007      	beq.n	800f5e8 <TIM_OC4_SetConfig+0x80>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a16      	ldr	r2, [pc, #88]	; (800f634 <TIM_OC4_SetConfig+0xcc>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d003      	beq.n	800f5e8 <TIM_OC4_SetConfig+0x80>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a15      	ldr	r2, [pc, #84]	; (800f638 <TIM_OC4_SetConfig+0xd0>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d109      	bne.n	800f5fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f5ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	695b      	ldr	r3, [r3, #20]
 800f5f4:	019b      	lsls	r3, r3, #6
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	697a      	ldr	r2, [r7, #20]
 800f600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	685a      	ldr	r2, [r3, #4]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	621a      	str	r2, [r3, #32]
}
 800f616:	bf00      	nop
 800f618:	371c      	adds	r7, #28
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	feff8fff 	.word	0xfeff8fff
 800f628:	40010000 	.word	0x40010000
 800f62c:	40010400 	.word	0x40010400
 800f630:	40014000 	.word	0x40014000
 800f634:	40014400 	.word	0x40014400
 800f638:	40014800 	.word	0x40014800

0800f63c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b087      	sub	sp, #28
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a1b      	ldr	r3, [r3, #32]
 800f64a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a1b      	ldr	r3, [r3, #32]
 800f650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	4b21      	ldr	r3, [pc, #132]	; (800f6ec <TIM_OC5_SetConfig+0xb0>)
 800f668:	4013      	ands	r3, r2
 800f66a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	4313      	orrs	r3, r2
 800f674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f67c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	689b      	ldr	r3, [r3, #8]
 800f682:	041b      	lsls	r3, r3, #16
 800f684:	693a      	ldr	r2, [r7, #16]
 800f686:	4313      	orrs	r3, r2
 800f688:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4a18      	ldr	r2, [pc, #96]	; (800f6f0 <TIM_OC5_SetConfig+0xb4>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d00f      	beq.n	800f6b2 <TIM_OC5_SetConfig+0x76>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4a17      	ldr	r2, [pc, #92]	; (800f6f4 <TIM_OC5_SetConfig+0xb8>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d00b      	beq.n	800f6b2 <TIM_OC5_SetConfig+0x76>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4a16      	ldr	r2, [pc, #88]	; (800f6f8 <TIM_OC5_SetConfig+0xbc>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d007      	beq.n	800f6b2 <TIM_OC5_SetConfig+0x76>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	4a15      	ldr	r2, [pc, #84]	; (800f6fc <TIM_OC5_SetConfig+0xc0>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d003      	beq.n	800f6b2 <TIM_OC5_SetConfig+0x76>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4a14      	ldr	r2, [pc, #80]	; (800f700 <TIM_OC5_SetConfig+0xc4>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d109      	bne.n	800f6c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f6b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	695b      	ldr	r3, [r3, #20]
 800f6be:	021b      	lsls	r3, r3, #8
 800f6c0:	697a      	ldr	r2, [r7, #20]
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	697a      	ldr	r2, [r7, #20]
 800f6ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	68fa      	ldr	r2, [r7, #12]
 800f6d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	685a      	ldr	r2, [r3, #4]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	693a      	ldr	r2, [r7, #16]
 800f6de:	621a      	str	r2, [r3, #32]
}
 800f6e0:	bf00      	nop
 800f6e2:	371c      	adds	r7, #28
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr
 800f6ec:	fffeff8f 	.word	0xfffeff8f
 800f6f0:	40010000 	.word	0x40010000
 800f6f4:	40010400 	.word	0x40010400
 800f6f8:	40014000 	.word	0x40014000
 800f6fc:	40014400 	.word	0x40014400
 800f700:	40014800 	.word	0x40014800

0800f704 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f704:	b480      	push	{r7}
 800f706:	b087      	sub	sp, #28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6a1b      	ldr	r3, [r3, #32]
 800f718:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f72c:	68fa      	ldr	r2, [r7, #12]
 800f72e:	4b22      	ldr	r3, [pc, #136]	; (800f7b8 <TIM_OC6_SetConfig+0xb4>)
 800f730:	4013      	ands	r3, r2
 800f732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	021b      	lsls	r3, r3, #8
 800f73a:	68fa      	ldr	r2, [r7, #12]
 800f73c:	4313      	orrs	r3, r2
 800f73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	051b      	lsls	r3, r3, #20
 800f74e:	693a      	ldr	r2, [r7, #16]
 800f750:	4313      	orrs	r3, r2
 800f752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4a19      	ldr	r2, [pc, #100]	; (800f7bc <TIM_OC6_SetConfig+0xb8>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d00f      	beq.n	800f77c <TIM_OC6_SetConfig+0x78>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4a18      	ldr	r2, [pc, #96]	; (800f7c0 <TIM_OC6_SetConfig+0xbc>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d00b      	beq.n	800f77c <TIM_OC6_SetConfig+0x78>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4a17      	ldr	r2, [pc, #92]	; (800f7c4 <TIM_OC6_SetConfig+0xc0>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	d007      	beq.n	800f77c <TIM_OC6_SetConfig+0x78>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	4a16      	ldr	r2, [pc, #88]	; (800f7c8 <TIM_OC6_SetConfig+0xc4>)
 800f770:	4293      	cmp	r3, r2
 800f772:	d003      	beq.n	800f77c <TIM_OC6_SetConfig+0x78>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	4a15      	ldr	r2, [pc, #84]	; (800f7cc <TIM_OC6_SetConfig+0xc8>)
 800f778:	4293      	cmp	r3, r2
 800f77a:	d109      	bne.n	800f790 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f782:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	695b      	ldr	r3, [r3, #20]
 800f788:	029b      	lsls	r3, r3, #10
 800f78a:	697a      	ldr	r2, [r7, #20]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	697a      	ldr	r2, [r7, #20]
 800f794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	685a      	ldr	r2, [r3, #4]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	693a      	ldr	r2, [r7, #16]
 800f7a8:	621a      	str	r2, [r3, #32]
}
 800f7aa:	bf00      	nop
 800f7ac:	371c      	adds	r7, #28
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop
 800f7b8:	feff8fff 	.word	0xfeff8fff
 800f7bc:	40010000 	.word	0x40010000
 800f7c0:	40010400 	.word	0x40010400
 800f7c4:	40014000 	.word	0x40014000
 800f7c8:	40014400 	.word	0x40014400
 800f7cc:	40014800 	.word	0x40014800

0800f7d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b087      	sub	sp, #28
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	6a1b      	ldr	r3, [r3, #32]
 800f7e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	6a1b      	ldr	r3, [r3, #32]
 800f7e6:	f023 0201 	bic.w	r2, r3, #1
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	699b      	ldr	r3, [r3, #24]
 800f7f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f7fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	011b      	lsls	r3, r3, #4
 800f800:	693a      	ldr	r2, [r7, #16]
 800f802:	4313      	orrs	r3, r2
 800f804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	f023 030a 	bic.w	r3, r3, #10
 800f80c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f80e:	697a      	ldr	r2, [r7, #20]
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	4313      	orrs	r3, r2
 800f814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	693a      	ldr	r2, [r7, #16]
 800f81a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	697a      	ldr	r2, [r7, #20]
 800f820:	621a      	str	r2, [r3, #32]
}
 800f822:	bf00      	nop
 800f824:	371c      	adds	r7, #28
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr

0800f82e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f82e:	b480      	push	{r7}
 800f830:	b087      	sub	sp, #28
 800f832:	af00      	add	r7, sp, #0
 800f834:	60f8      	str	r0, [r7, #12]
 800f836:	60b9      	str	r1, [r7, #8]
 800f838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	6a1b      	ldr	r3, [r3, #32]
 800f83e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6a1b      	ldr	r3, [r3, #32]
 800f844:	f023 0210 	bic.w	r2, r3, #16
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	699b      	ldr	r3, [r3, #24]
 800f850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	031b      	lsls	r3, r3, #12
 800f85e:	693a      	ldr	r2, [r7, #16]
 800f860:	4313      	orrs	r3, r2
 800f862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f86a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	011b      	lsls	r3, r3, #4
 800f870:	697a      	ldr	r2, [r7, #20]
 800f872:	4313      	orrs	r3, r2
 800f874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	697a      	ldr	r2, [r7, #20]
 800f880:	621a      	str	r2, [r3, #32]
}
 800f882:	bf00      	nop
 800f884:	371c      	adds	r7, #28
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr
	...

0800f890 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	689b      	ldr	r3, [r3, #8]
 800f89e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	4b09      	ldr	r3, [pc, #36]	; (800f8c8 <TIM_ITRx_SetConfig+0x38>)
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f8a8:	683a      	ldr	r2, [r7, #0]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	f043 0307 	orr.w	r3, r3, #7
 800f8b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	609a      	str	r2, [r3, #8]
}
 800f8ba:	bf00      	nop
 800f8bc:	3714      	adds	r7, #20
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	ffcfff8f 	.word	0xffcfff8f

0800f8cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b087      	sub	sp, #28
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
 800f8d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f8e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	021a      	lsls	r2, r3, #8
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	431a      	orrs	r2, r3
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	697a      	ldr	r2, [r7, #20]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	697a      	ldr	r2, [r7, #20]
 800f8fe:	609a      	str	r2, [r3, #8]
}
 800f900:	bf00      	nop
 800f902:	371c      	adds	r7, #28
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b087      	sub	sp, #28
 800f910:	af00      	add	r7, sp, #0
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	f003 031f 	and.w	r3, r3, #31
 800f91e:	2201      	movs	r2, #1
 800f920:	fa02 f303 	lsl.w	r3, r2, r3
 800f924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	6a1a      	ldr	r2, [r3, #32]
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	43db      	mvns	r3, r3
 800f92e:	401a      	ands	r2, r3
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	6a1a      	ldr	r2, [r3, #32]
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	f003 031f 	and.w	r3, r3, #31
 800f93e:	6879      	ldr	r1, [r7, #4]
 800f940:	fa01 f303 	lsl.w	r3, r1, r3
 800f944:	431a      	orrs	r2, r3
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	621a      	str	r2, [r3, #32]
}
 800f94a:	bf00      	nop
 800f94c:	371c      	adds	r7, #28
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr
	...

0800f958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f958:	b480      	push	{r7}
 800f95a:	b085      	sub	sp, #20
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d101      	bne.n	800f970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f96c:	2302      	movs	r3, #2
 800f96e:	e06d      	b.n	800fa4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2201      	movs	r2, #1
 800f974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2202      	movs	r2, #2
 800f97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	689b      	ldr	r3, [r3, #8]
 800f98e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a30      	ldr	r2, [pc, #192]	; (800fa58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d004      	beq.n	800f9a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4a2f      	ldr	r2, [pc, #188]	; (800fa5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d108      	bne.n	800f9b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f9aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	68fa      	ldr	r2, [r7, #12]
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	68fa      	ldr	r2, [r7, #12]
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	68fa      	ldr	r2, [r7, #12]
 800f9ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a20      	ldr	r2, [pc, #128]	; (800fa58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d022      	beq.n	800fa20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9e2:	d01d      	beq.n	800fa20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a1d      	ldr	r2, [pc, #116]	; (800fa60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d018      	beq.n	800fa20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4a1c      	ldr	r2, [pc, #112]	; (800fa64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d013      	beq.n	800fa20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a1a      	ldr	r2, [pc, #104]	; (800fa68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d00e      	beq.n	800fa20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	4a15      	ldr	r2, [pc, #84]	; (800fa5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d009      	beq.n	800fa20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4a16      	ldr	r2, [pc, #88]	; (800fa6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d004      	beq.n	800fa20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	4a15      	ldr	r2, [pc, #84]	; (800fa70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d10c      	bne.n	800fa3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	68ba      	ldr	r2, [r7, #8]
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	68ba      	ldr	r2, [r7, #8]
 800fa38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3714      	adds	r7, #20
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr
 800fa58:	40010000 	.word	0x40010000
 800fa5c:	40010400 	.word	0x40010400
 800fa60:	40000400 	.word	0x40000400
 800fa64:	40000800 	.word	0x40000800
 800fa68:	40000c00 	.word	0x40000c00
 800fa6c:	40001800 	.word	0x40001800
 800fa70:	40014000 	.word	0x40014000

0800fa74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d101      	bne.n	800fa90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fa8c:	2302      	movs	r3, #2
 800fa8e:	e065      	b.n	800fb5c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2201      	movs	r2, #1
 800fa94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	4313      	orrs	r3, r2
 800faa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	4313      	orrs	r3, r2
 800fab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	4313      	orrs	r3, r2
 800fac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4313      	orrs	r3, r2
 800face:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	691b      	ldr	r3, [r3, #16]
 800fada:	4313      	orrs	r3, r2
 800fadc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	695b      	ldr	r3, [r3, #20]
 800fae8:	4313      	orrs	r3, r2
 800faea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faf6:	4313      	orrs	r3, r2
 800faf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	699b      	ldr	r3, [r3, #24]
 800fb04:	041b      	lsls	r3, r3, #16
 800fb06:	4313      	orrs	r3, r2
 800fb08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4a16      	ldr	r2, [pc, #88]	; (800fb68 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d004      	beq.n	800fb1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a14      	ldr	r2, [pc, #80]	; (800fb6c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d115      	bne.n	800fb4a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb28:	051b      	lsls	r3, r3, #20
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	69db      	ldr	r3, [r3, #28]
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	6a1b      	ldr	r3, [r3, #32]
 800fb46:	4313      	orrs	r3, r2
 800fb48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	68fa      	ldr	r2, [r7, #12]
 800fb50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb5a:	2300      	movs	r3, #0
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3714      	adds	r7, #20
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr
 800fb68:	40010000 	.word	0x40010000
 800fb6c:	40010400 	.word	0x40010400

0800fb70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fb78:	bf00      	nop
 800fb7a:	370c      	adds	r7, #12
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr

0800fb84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fb8c:	bf00      	nop
 800fb8e:	370c      	adds	r7, #12
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr

0800fb98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fba0:	bf00      	nop
 800fba2:	370c      	adds	r7, #12
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr

0800fbac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d101      	bne.n	800fbbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	e042      	b.n	800fc44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d106      	bne.n	800fbd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f7f3 fb85 	bl	80032e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2224      	movs	r2, #36	; 0x24
 800fbda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f022 0201 	bic.w	r2, r2, #1
 800fbec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d002      	beq.n	800fbfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f001 fb8c 	bl	8011314 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 fe21 	bl	8010844 <UART_SetConfig>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d101      	bne.n	800fc0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	e01b      	b.n	800fc44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	685a      	ldr	r2, [r3, #4]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fc1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	689a      	ldr	r2, [r3, #8]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fc2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f042 0201 	orr.w	r2, r2, #1
 800fc3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f001 fc0b 	bl	8011458 <UART_CheckIdleState>
 800fc42:	4603      	mov	r3, r0
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b08a      	sub	sp, #40	; 0x28
 800fc50:	af02      	add	r7, sp, #8
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	603b      	str	r3, [r7, #0]
 800fc58:	4613      	mov	r3, r2
 800fc5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc62:	2b20      	cmp	r3, #32
 800fc64:	d17b      	bne.n	800fd5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <HAL_UART_Transmit+0x26>
 800fc6c:	88fb      	ldrh	r3, [r7, #6]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d101      	bne.n	800fc76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fc72:	2301      	movs	r3, #1
 800fc74:	e074      	b.n	800fd60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2221      	movs	r2, #33	; 0x21
 800fc82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fc86:	f7f3 fe9f 	bl	80039c8 <HAL_GetTick>
 800fc8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	88fa      	ldrh	r2, [r7, #6]
 800fc90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	88fa      	ldrh	r2, [r7, #6]
 800fc98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fca4:	d108      	bne.n	800fcb8 <HAL_UART_Transmit+0x6c>
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d104      	bne.n	800fcb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	61bb      	str	r3, [r7, #24]
 800fcb6:	e003      	b.n	800fcc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fcc0:	e030      	b.n	800fd24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	2180      	movs	r1, #128	; 0x80
 800fccc:	68f8      	ldr	r0, [r7, #12]
 800fcce:	f001 fc6d 	bl	80115ac <UART_WaitOnFlagUntilTimeout>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d005      	beq.n	800fce4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2220      	movs	r2, #32
 800fcdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fce0:	2303      	movs	r3, #3
 800fce2:	e03d      	b.n	800fd60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d10b      	bne.n	800fd02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	881b      	ldrh	r3, [r3, #0]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fcf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	3302      	adds	r3, #2
 800fcfe:	61bb      	str	r3, [r7, #24]
 800fd00:	e007      	b.n	800fd12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	781a      	ldrb	r2, [r3, #0]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d1c8      	bne.n	800fcc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	2200      	movs	r2, #0
 800fd38:	2140      	movs	r1, #64	; 0x40
 800fd3a:	68f8      	ldr	r0, [r7, #12]
 800fd3c:	f001 fc36 	bl	80115ac <UART_WaitOnFlagUntilTimeout>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d005      	beq.n	800fd52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	2220      	movs	r2, #32
 800fd4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fd4e:	2303      	movs	r3, #3
 800fd50:	e006      	b.n	800fd60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2220      	movs	r2, #32
 800fd56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	e000      	b.n	800fd60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fd5e:	2302      	movs	r3, #2
  }
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3720      	adds	r7, #32
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b08a      	sub	sp, #40	; 0x28
 800fd6c:	af02      	add	r7, sp, #8
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	603b      	str	r3, [r7, #0]
 800fd74:	4613      	mov	r3, r2
 800fd76:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd7e:	2b20      	cmp	r3, #32
 800fd80:	f040 80b5 	bne.w	800feee <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d002      	beq.n	800fd90 <HAL_UART_Receive+0x28>
 800fd8a:	88fb      	ldrh	r3, [r7, #6]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fd90:	2301      	movs	r3, #1
 800fd92:	e0ad      	b.n	800fef0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2200      	movs	r2, #0
 800fd98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2222      	movs	r2, #34	; 0x22
 800fda0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2200      	movs	r2, #0
 800fda8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fdaa:	f7f3 fe0d 	bl	80039c8 <HAL_GetTick>
 800fdae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	88fa      	ldrh	r2, [r7, #6]
 800fdb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	88fa      	ldrh	r2, [r7, #6]
 800fdbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	689b      	ldr	r3, [r3, #8]
 800fdc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdc8:	d10e      	bne.n	800fde8 <HAL_UART_Receive+0x80>
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	691b      	ldr	r3, [r3, #16]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d105      	bne.n	800fdde <HAL_UART_Receive+0x76>
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fdd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fddc:	e02d      	b.n	800fe3a <HAL_UART_Receive+0xd2>
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	22ff      	movs	r2, #255	; 0xff
 800fde2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fde6:	e028      	b.n	800fe3a <HAL_UART_Receive+0xd2>
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d10d      	bne.n	800fe0c <HAL_UART_Receive+0xa4>
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	691b      	ldr	r3, [r3, #16]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d104      	bne.n	800fe02 <HAL_UART_Receive+0x9a>
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	22ff      	movs	r2, #255	; 0xff
 800fdfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe00:	e01b      	b.n	800fe3a <HAL_UART_Receive+0xd2>
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	227f      	movs	r2, #127	; 0x7f
 800fe06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe0a:	e016      	b.n	800fe3a <HAL_UART_Receive+0xd2>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe14:	d10d      	bne.n	800fe32 <HAL_UART_Receive+0xca>
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	691b      	ldr	r3, [r3, #16]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d104      	bne.n	800fe28 <HAL_UART_Receive+0xc0>
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	227f      	movs	r2, #127	; 0x7f
 800fe22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe26:	e008      	b.n	800fe3a <HAL_UART_Receive+0xd2>
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	223f      	movs	r2, #63	; 0x3f
 800fe2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fe30:	e003      	b.n	800fe3a <HAL_UART_Receive+0xd2>
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2200      	movs	r2, #0
 800fe36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe40:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	689b      	ldr	r3, [r3, #8]
 800fe46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe4a:	d108      	bne.n	800fe5e <HAL_UART_Receive+0xf6>
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	691b      	ldr	r3, [r3, #16]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d104      	bne.n	800fe5e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fe54:	2300      	movs	r3, #0
 800fe56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	61bb      	str	r3, [r7, #24]
 800fe5c:	e003      	b.n	800fe66 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe62:	2300      	movs	r3, #0
 800fe64:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fe66:	e036      	b.n	800fed6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	9300      	str	r3, [sp, #0]
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	2120      	movs	r1, #32
 800fe72:	68f8      	ldr	r0, [r7, #12]
 800fe74:	f001 fb9a 	bl	80115ac <UART_WaitOnFlagUntilTimeout>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d005      	beq.n	800fe8a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2220      	movs	r2, #32
 800fe82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fe86:	2303      	movs	r3, #3
 800fe88:	e032      	b.n	800fef0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fe8a:	69fb      	ldr	r3, [r7, #28]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d10c      	bne.n	800feaa <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	8a7b      	ldrh	r3, [r7, #18]
 800fe9a:	4013      	ands	r3, r2
 800fe9c:	b29a      	uxth	r2, r3
 800fe9e:	69bb      	ldr	r3, [r7, #24]
 800fea0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fea2:	69bb      	ldr	r3, [r7, #24]
 800fea4:	3302      	adds	r3, #2
 800fea6:	61bb      	str	r3, [r7, #24]
 800fea8:	e00c      	b.n	800fec4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb0:	b2da      	uxtb	r2, r3
 800feb2:	8a7b      	ldrh	r3, [r7, #18]
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	4013      	ands	r3, r2
 800feb8:	b2da      	uxtb	r2, r3
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	3301      	adds	r3, #1
 800fec2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800feca:	b29b      	uxth	r3, r3
 800fecc:	3b01      	subs	r3, #1
 800fece:	b29a      	uxth	r2, r3
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fedc:	b29b      	uxth	r3, r3
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1c2      	bne.n	800fe68 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2220      	movs	r2, #32
 800fee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800feea:	2300      	movs	r3, #0
 800feec:	e000      	b.n	800fef0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800feee:	2302      	movs	r3, #2
  }
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3720      	adds	r7, #32
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b08a      	sub	sp, #40	; 0x28
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	4613      	mov	r3, r2
 800ff04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff0c:	2b20      	cmp	r3, #32
 800ff0e:	d137      	bne.n	800ff80 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d002      	beq.n	800ff1c <HAL_UART_Receive_IT+0x24>
 800ff16:	88fb      	ldrh	r3, [r7, #6]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d101      	bne.n	800ff20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e030      	b.n	800ff82 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	2200      	movs	r2, #0
 800ff24:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	4a18      	ldr	r2, [pc, #96]	; (800ff8c <HAL_UART_Receive_IT+0x94>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d01f      	beq.n	800ff70 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d018      	beq.n	800ff70 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	e853 3f00 	ldrex	r3, [r3]
 800ff4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ff52:	627b      	str	r3, [r7, #36]	; 0x24
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	461a      	mov	r2, r3
 800ff5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5c:	623b      	str	r3, [r7, #32]
 800ff5e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff60:	69f9      	ldr	r1, [r7, #28]
 800ff62:	6a3a      	ldr	r2, [r7, #32]
 800ff64:	e841 2300 	strex	r3, r2, [r1]
 800ff68:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff6a:	69bb      	ldr	r3, [r7, #24]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d1e6      	bne.n	800ff3e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ff70:	88fb      	ldrh	r3, [r7, #6]
 800ff72:	461a      	mov	r2, r3
 800ff74:	68b9      	ldr	r1, [r7, #8]
 800ff76:	68f8      	ldr	r0, [r7, #12]
 800ff78:	f001 fb86 	bl	8011688 <UART_Start_Receive_IT>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	e000      	b.n	800ff82 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ff80:	2302      	movs	r3, #2
  }
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3728      	adds	r7, #40	; 0x28
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	58000c00 	.word	0x58000c00

0800ff90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b08a      	sub	sp, #40	; 0x28
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffa4:	2b20      	cmp	r3, #32
 800ffa6:	d167      	bne.n	8010078 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d002      	beq.n	800ffb4 <HAL_UART_Transmit_DMA+0x24>
 800ffae:	88fb      	ldrh	r3, [r7, #6]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d101      	bne.n	800ffb8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e060      	b.n	801007a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	88fa      	ldrh	r2, [r7, #6]
 800ffc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	88fa      	ldrh	r2, [r7, #6]
 800ffca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2221      	movs	r2, #33	; 0x21
 800ffda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d028      	beq.n	8010038 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffea:	4a26      	ldr	r2, [pc, #152]	; (8010084 <HAL_UART_Transmit_DMA+0xf4>)
 800ffec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fff2:	4a25      	ldr	r2, [pc, #148]	; (8010088 <HAL_UART_Transmit_DMA+0xf8>)
 800fff4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fffa:	4a24      	ldr	r2, [pc, #144]	; (801008c <HAL_UART_Transmit_DMA+0xfc>)
 800fffc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010002:	2200      	movs	r2, #0
 8010004:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801000e:	4619      	mov	r1, r3
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	3328      	adds	r3, #40	; 0x28
 8010016:	461a      	mov	r2, r3
 8010018:	88fb      	ldrh	r3, [r7, #6]
 801001a:	f7f6 f959 	bl	80062d0 <HAL_DMA_Start_IT>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d009      	beq.n	8010038 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2210      	movs	r2, #16
 8010028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2220      	movs	r2, #32
 8010030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010034:	2301      	movs	r3, #1
 8010036:	e020      	b.n	801007a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	2240      	movs	r2, #64	; 0x40
 801003e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	3308      	adds	r3, #8
 8010046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	e853 3f00 	ldrex	r3, [r3]
 801004e:	613b      	str	r3, [r7, #16]
   return(result);
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010056:	627b      	str	r3, [r7, #36]	; 0x24
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	3308      	adds	r3, #8
 801005e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010060:	623a      	str	r2, [r7, #32]
 8010062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010064:	69f9      	ldr	r1, [r7, #28]
 8010066:	6a3a      	ldr	r2, [r7, #32]
 8010068:	e841 2300 	strex	r3, r2, [r1]
 801006c:	61bb      	str	r3, [r7, #24]
   return(result);
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d1e5      	bne.n	8010040 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010074:	2300      	movs	r3, #0
 8010076:	e000      	b.n	801007a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010078:	2302      	movs	r3, #2
  }
}
 801007a:	4618      	mov	r0, r3
 801007c:	3728      	adds	r7, #40	; 0x28
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	08011a1d 	.word	0x08011a1d
 8010088:	08011ab3 	.word	0x08011ab3
 801008c:	08011acf 	.word	0x08011acf

08010090 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b0ba      	sub	sp, #232	; 0xe8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	69db      	ldr	r3, [r3, #28]
 801009e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	689b      	ldr	r3, [r3, #8]
 80100b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80100b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80100ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80100be:	4013      	ands	r3, r2
 80100c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80100c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d11b      	bne.n	8010104 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80100cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100d0:	f003 0320 	and.w	r3, r3, #32
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d015      	beq.n	8010104 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80100d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100dc:	f003 0320 	and.w	r3, r3, #32
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d105      	bne.n	80100f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80100e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80100e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d009      	beq.n	8010104 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	f000 8377 	beq.w	80107e8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	4798      	blx	r3
      }
      return;
 8010102:	e371      	b.n	80107e8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010108:	2b00      	cmp	r3, #0
 801010a:	f000 8123 	beq.w	8010354 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801010e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010112:	4b8d      	ldr	r3, [pc, #564]	; (8010348 <HAL_UART_IRQHandler+0x2b8>)
 8010114:	4013      	ands	r3, r2
 8010116:	2b00      	cmp	r3, #0
 8010118:	d106      	bne.n	8010128 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801011a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801011e:	4b8b      	ldr	r3, [pc, #556]	; (801034c <HAL_UART_IRQHandler+0x2bc>)
 8010120:	4013      	ands	r3, r2
 8010122:	2b00      	cmp	r3, #0
 8010124:	f000 8116 	beq.w	8010354 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801012c:	f003 0301 	and.w	r3, r3, #1
 8010130:	2b00      	cmp	r3, #0
 8010132:	d011      	beq.n	8010158 <HAL_UART_IRQHandler+0xc8>
 8010134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801013c:	2b00      	cmp	r3, #0
 801013e:	d00b      	beq.n	8010158 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	2201      	movs	r2, #1
 8010146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801014e:	f043 0201 	orr.w	r2, r3, #1
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801015c:	f003 0302 	and.w	r3, r3, #2
 8010160:	2b00      	cmp	r3, #0
 8010162:	d011      	beq.n	8010188 <HAL_UART_IRQHandler+0xf8>
 8010164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010168:	f003 0301 	and.w	r3, r3, #1
 801016c:	2b00      	cmp	r3, #0
 801016e:	d00b      	beq.n	8010188 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2202      	movs	r2, #2
 8010176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801017e:	f043 0204 	orr.w	r2, r3, #4
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801018c:	f003 0304 	and.w	r3, r3, #4
 8010190:	2b00      	cmp	r3, #0
 8010192:	d011      	beq.n	80101b8 <HAL_UART_IRQHandler+0x128>
 8010194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010198:	f003 0301 	and.w	r3, r3, #1
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00b      	beq.n	80101b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2204      	movs	r2, #4
 80101a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101ae:	f043 0202 	orr.w	r2, r3, #2
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80101b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101bc:	f003 0308 	and.w	r3, r3, #8
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d017      	beq.n	80101f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80101c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101c8:	f003 0320 	and.w	r3, r3, #32
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d105      	bne.n	80101dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80101d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80101d4:	4b5c      	ldr	r3, [pc, #368]	; (8010348 <HAL_UART_IRQHandler+0x2b8>)
 80101d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00b      	beq.n	80101f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2208      	movs	r2, #8
 80101e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101ea:	f043 0208 	orr.w	r2, r3, #8
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80101f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d012      	beq.n	8010226 <HAL_UART_IRQHandler+0x196>
 8010200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00c      	beq.n	8010226 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801021c:	f043 0220 	orr.w	r2, r3, #32
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 82dd 	beq.w	80107ec <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010236:	f003 0320 	and.w	r3, r3, #32
 801023a:	2b00      	cmp	r3, #0
 801023c:	d013      	beq.n	8010266 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801023e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010242:	f003 0320 	and.w	r3, r3, #32
 8010246:	2b00      	cmp	r3, #0
 8010248:	d105      	bne.n	8010256 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801024a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801024e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010252:	2b00      	cmp	r3, #0
 8010254:	d007      	beq.n	8010266 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801025a:	2b00      	cmp	r3, #0
 801025c:	d003      	beq.n	8010266 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801026c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	689b      	ldr	r3, [r3, #8]
 8010276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801027a:	2b40      	cmp	r3, #64	; 0x40
 801027c:	d005      	beq.n	801028a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801027e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010282:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010286:	2b00      	cmp	r3, #0
 8010288:	d054      	beq.n	8010334 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f001 fb60 	bl	8011950 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801029a:	2b40      	cmp	r3, #64	; 0x40
 801029c:	d146      	bne.n	801032c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3308      	adds	r3, #8
 80102a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80102ac:	e853 3f00 	ldrex	r3, [r3]
 80102b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80102b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80102b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	3308      	adds	r3, #8
 80102c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80102ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80102ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80102d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80102da:	e841 2300 	strex	r3, r2, [r1]
 80102de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80102e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d1d9      	bne.n	801029e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d017      	beq.n	8010324 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102fa:	4a15      	ldr	r2, [pc, #84]	; (8010350 <HAL_UART_IRQHandler+0x2c0>)
 80102fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010304:	4618      	mov	r0, r3
 8010306:	f7f6 fd6b 	bl	8006de0 <HAL_DMA_Abort_IT>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d019      	beq.n	8010344 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801031e:	4610      	mov	r0, r2
 8010320:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010322:	e00f      	b.n	8010344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 fa77 	bl	8010818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801032a:	e00b      	b.n	8010344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 fa73 	bl	8010818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010332:	e007      	b.n	8010344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 fa6f 	bl	8010818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010342:	e253      	b.n	80107ec <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010344:	bf00      	nop
    return;
 8010346:	e251      	b.n	80107ec <HAL_UART_IRQHandler+0x75c>
 8010348:	10000001 	.word	0x10000001
 801034c:	04000120 	.word	0x04000120
 8010350:	08011b4f 	.word	0x08011b4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010358:	2b01      	cmp	r3, #1
 801035a:	f040 81e7 	bne.w	801072c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801035e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010362:	f003 0310 	and.w	r3, r3, #16
 8010366:	2b00      	cmp	r3, #0
 8010368:	f000 81e0 	beq.w	801072c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801036c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010370:	f003 0310 	and.w	r3, r3, #16
 8010374:	2b00      	cmp	r3, #0
 8010376:	f000 81d9 	beq.w	801072c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2210      	movs	r2, #16
 8010380:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801038c:	2b40      	cmp	r3, #64	; 0x40
 801038e:	f040 8151 	bne.w	8010634 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4a96      	ldr	r2, [pc, #600]	; (80105f4 <HAL_UART_IRQHandler+0x564>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d068      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4a93      	ldr	r2, [pc, #588]	; (80105f8 <HAL_UART_IRQHandler+0x568>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d061      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a91      	ldr	r2, [pc, #580]	; (80105fc <HAL_UART_IRQHandler+0x56c>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d05a      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	4a8e      	ldr	r2, [pc, #568]	; (8010600 <HAL_UART_IRQHandler+0x570>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d053      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	4a8c      	ldr	r2, [pc, #560]	; (8010604 <HAL_UART_IRQHandler+0x574>)
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d04c      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4a89      	ldr	r2, [pc, #548]	; (8010608 <HAL_UART_IRQHandler+0x578>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d045      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	4a87      	ldr	r2, [pc, #540]	; (801060c <HAL_UART_IRQHandler+0x57c>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d03e      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4a84      	ldr	r2, [pc, #528]	; (8010610 <HAL_UART_IRQHandler+0x580>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d037      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4a82      	ldr	r2, [pc, #520]	; (8010614 <HAL_UART_IRQHandler+0x584>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d030      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a7f      	ldr	r2, [pc, #508]	; (8010618 <HAL_UART_IRQHandler+0x588>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d029      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	4a7d      	ldr	r2, [pc, #500]	; (801061c <HAL_UART_IRQHandler+0x58c>)
 8010428:	4293      	cmp	r3, r2
 801042a:	d022      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a7a      	ldr	r2, [pc, #488]	; (8010620 <HAL_UART_IRQHandler+0x590>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d01b      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	4a78      	ldr	r2, [pc, #480]	; (8010624 <HAL_UART_IRQHandler+0x594>)
 8010444:	4293      	cmp	r3, r2
 8010446:	d014      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	4a75      	ldr	r2, [pc, #468]	; (8010628 <HAL_UART_IRQHandler+0x598>)
 8010452:	4293      	cmp	r3, r2
 8010454:	d00d      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	4a73      	ldr	r2, [pc, #460]	; (801062c <HAL_UART_IRQHandler+0x59c>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d006      	beq.n	8010472 <HAL_UART_IRQHandler+0x3e2>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4a70      	ldr	r2, [pc, #448]	; (8010630 <HAL_UART_IRQHandler+0x5a0>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d106      	bne.n	8010480 <HAL_UART_IRQHandler+0x3f0>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	b29b      	uxth	r3, r3
 801047e:	e005      	b.n	801048c <HAL_UART_IRQHandler+0x3fc>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	b29b      	uxth	r3, r3
 801048c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010494:	2b00      	cmp	r3, #0
 8010496:	f000 81ab 	beq.w	80107f0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80104a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80104a4:	429a      	cmp	r2, r3
 80104a6:	f080 81a3 	bcs.w	80107f0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80104b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104ba:	69db      	ldr	r3, [r3, #28]
 80104bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104c0:	f000 8087 	beq.w	80105d2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80104d0:	e853 3f00 	ldrex	r3, [r3]
 80104d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80104d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80104dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	461a      	mov	r2, r3
 80104ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80104ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80104f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80104fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80104fe:	e841 2300 	strex	r3, r2, [r1]
 8010502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801050a:	2b00      	cmp	r3, #0
 801050c:	d1da      	bne.n	80104c4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	3308      	adds	r3, #8
 8010514:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010518:	e853 3f00 	ldrex	r3, [r3]
 801051c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801051e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010520:	f023 0301 	bic.w	r3, r3, #1
 8010524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	3308      	adds	r3, #8
 801052e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010532:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010536:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010538:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801053a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801053e:	e841 2300 	strex	r3, r2, [r1]
 8010542:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010546:	2b00      	cmp	r3, #0
 8010548:	d1e1      	bne.n	801050e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	3308      	adds	r3, #8
 8010550:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010554:	e853 3f00 	ldrex	r3, [r3]
 8010558:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801055a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801055c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	3308      	adds	r3, #8
 801056a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801056e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010570:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010572:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010576:	e841 2300 	strex	r3, r2, [r1]
 801057a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801057c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1e3      	bne.n	801054a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2220      	movs	r2, #32
 8010586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2200      	movs	r2, #0
 801058e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010598:	e853 3f00 	ldrex	r3, [r3]
 801059c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801059e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105a0:	f023 0310 	bic.w	r3, r3, #16
 80105a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	461a      	mov	r2, r3
 80105ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80105b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80105b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105ba:	e841 2300 	strex	r3, r2, [r1]
 80105be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80105c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d1e4      	bne.n	8010590 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7f6 f8e9 	bl	80067a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2202      	movs	r2, #2
 80105d6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	1ad3      	subs	r3, r2, r3
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	4619      	mov	r1, r3
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 f91d 	bl	801082c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80105f2:	e0fd      	b.n	80107f0 <HAL_UART_IRQHandler+0x760>
 80105f4:	40020010 	.word	0x40020010
 80105f8:	40020028 	.word	0x40020028
 80105fc:	40020040 	.word	0x40020040
 8010600:	40020058 	.word	0x40020058
 8010604:	40020070 	.word	0x40020070
 8010608:	40020088 	.word	0x40020088
 801060c:	400200a0 	.word	0x400200a0
 8010610:	400200b8 	.word	0x400200b8
 8010614:	40020410 	.word	0x40020410
 8010618:	40020428 	.word	0x40020428
 801061c:	40020440 	.word	0x40020440
 8010620:	40020458 	.word	0x40020458
 8010624:	40020470 	.word	0x40020470
 8010628:	40020488 	.word	0x40020488
 801062c:	400204a0 	.word	0x400204a0
 8010630:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010640:	b29b      	uxth	r3, r3
 8010642:	1ad3      	subs	r3, r2, r3
 8010644:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801064e:	b29b      	uxth	r3, r3
 8010650:	2b00      	cmp	r3, #0
 8010652:	f000 80cf 	beq.w	80107f4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801065a:	2b00      	cmp	r3, #0
 801065c:	f000 80ca 	beq.w	80107f4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010668:	e853 3f00 	ldrex	r3, [r3]
 801066c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801066e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	461a      	mov	r2, r3
 801067e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010682:	647b      	str	r3, [r7, #68]	; 0x44
 8010684:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801068a:	e841 2300 	strex	r3, r2, [r1]
 801068e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010692:	2b00      	cmp	r3, #0
 8010694:	d1e4      	bne.n	8010660 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	3308      	adds	r3, #8
 801069c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a0:	e853 3f00 	ldrex	r3, [r3]
 80106a4:	623b      	str	r3, [r7, #32]
   return(result);
 80106a6:	6a3a      	ldr	r2, [r7, #32]
 80106a8:	4b55      	ldr	r3, [pc, #340]	; (8010800 <HAL_UART_IRQHandler+0x770>)
 80106aa:	4013      	ands	r3, r2
 80106ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	3308      	adds	r3, #8
 80106b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80106ba:	633a      	str	r2, [r7, #48]	; 0x30
 80106bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106c2:	e841 2300 	strex	r3, r2, [r1]
 80106c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80106c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d1e3      	bne.n	8010696 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2220      	movs	r2, #32
 80106d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2200      	movs	r2, #0
 80106da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	e853 3f00 	ldrex	r3, [r3]
 80106ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	f023 0310 	bic.w	r3, r3, #16
 80106f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	461a      	mov	r2, r3
 8010700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010704:	61fb      	str	r3, [r7, #28]
 8010706:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010708:	69b9      	ldr	r1, [r7, #24]
 801070a:	69fa      	ldr	r2, [r7, #28]
 801070c:	e841 2300 	strex	r3, r2, [r1]
 8010710:	617b      	str	r3, [r7, #20]
   return(result);
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d1e4      	bne.n	80106e2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2202      	movs	r2, #2
 801071c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801071e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010722:	4619      	mov	r1, r3
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 f881 	bl	801082c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801072a:	e063      	b.n	80107f4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801072c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010734:	2b00      	cmp	r3, #0
 8010736:	d00e      	beq.n	8010756 <HAL_UART_IRQHandler+0x6c6>
 8010738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801073c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010740:	2b00      	cmp	r3, #0
 8010742:	d008      	beq.n	8010756 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801074c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f001 ff5a 	bl	8012608 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010754:	e051      	b.n	80107fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801075e:	2b00      	cmp	r3, #0
 8010760:	d014      	beq.n	801078c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801076a:	2b00      	cmp	r3, #0
 801076c:	d105      	bne.n	801077a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801076e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010776:	2b00      	cmp	r3, #0
 8010778:	d008      	beq.n	801078c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801077e:	2b00      	cmp	r3, #0
 8010780:	d03a      	beq.n	80107f8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	4798      	blx	r3
    }
    return;
 801078a:	e035      	b.n	80107f8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801078c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010794:	2b00      	cmp	r3, #0
 8010796:	d009      	beq.n	80107ac <HAL_UART_IRQHandler+0x71c>
 8010798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801079c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d003      	beq.n	80107ac <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f001 f9e8 	bl	8011b7a <UART_EndTransmit_IT>
    return;
 80107aa:	e026      	b.n	80107fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80107ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d009      	beq.n	80107cc <HAL_UART_IRQHandler+0x73c>
 80107b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d003      	beq.n	80107cc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f001 ff33 	bl	8012630 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80107ca:	e016      	b.n	80107fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80107cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d010      	beq.n	80107fa <HAL_UART_IRQHandler+0x76a>
 80107d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	da0c      	bge.n	80107fa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f001 ff1b 	bl	801261c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80107e6:	e008      	b.n	80107fa <HAL_UART_IRQHandler+0x76a>
      return;
 80107e8:	bf00      	nop
 80107ea:	e006      	b.n	80107fa <HAL_UART_IRQHandler+0x76a>
    return;
 80107ec:	bf00      	nop
 80107ee:	e004      	b.n	80107fa <HAL_UART_IRQHandler+0x76a>
      return;
 80107f0:	bf00      	nop
 80107f2:	e002      	b.n	80107fa <HAL_UART_IRQHandler+0x76a>
      return;
 80107f4:	bf00      	nop
 80107f6:	e000      	b.n	80107fa <HAL_UART_IRQHandler+0x76a>
    return;
 80107f8:	bf00      	nop
  }
}
 80107fa:	37e8      	adds	r7, #232	; 0xe8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	effffffe 	.word	0xeffffffe

08010804 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801080c:	bf00      	nop
 801080e:	370c      	adds	r7, #12
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010820:	bf00      	nop
 8010822:	370c      	adds	r7, #12
 8010824:	46bd      	mov	sp, r7
 8010826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082a:	4770      	bx	lr

0801082c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	460b      	mov	r3, r1
 8010836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010838:	bf00      	nop
 801083a:	370c      	adds	r7, #12
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010848:	b092      	sub	sp, #72	; 0x48
 801084a:	af00      	add	r7, sp, #0
 801084c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801084e:	2300      	movs	r3, #0
 8010850:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	689a      	ldr	r2, [r3, #8]
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	691b      	ldr	r3, [r3, #16]
 801085c:	431a      	orrs	r2, r3
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	695b      	ldr	r3, [r3, #20]
 8010862:	431a      	orrs	r2, r3
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	69db      	ldr	r3, [r3, #28]
 8010868:	4313      	orrs	r3, r2
 801086a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	681a      	ldr	r2, [r3, #0]
 8010872:	4bbe      	ldr	r3, [pc, #760]	; (8010b6c <UART_SetConfig+0x328>)
 8010874:	4013      	ands	r3, r2
 8010876:	697a      	ldr	r2, [r7, #20]
 8010878:	6812      	ldr	r2, [r2, #0]
 801087a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801087c:	430b      	orrs	r3, r1
 801087e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	68da      	ldr	r2, [r3, #12]
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	430a      	orrs	r2, r1
 8010894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	699b      	ldr	r3, [r3, #24]
 801089a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4ab3      	ldr	r2, [pc, #716]	; (8010b70 <UART_SetConfig+0x32c>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d004      	beq.n	80108b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	6a1b      	ldr	r3, [r3, #32]
 80108aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108ac:	4313      	orrs	r3, r2
 80108ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	689a      	ldr	r2, [r3, #8]
 80108b6:	4baf      	ldr	r3, [pc, #700]	; (8010b74 <UART_SetConfig+0x330>)
 80108b8:	4013      	ands	r3, r2
 80108ba:	697a      	ldr	r2, [r7, #20]
 80108bc:	6812      	ldr	r2, [r2, #0]
 80108be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108c0:	430b      	orrs	r3, r1
 80108c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ca:	f023 010f 	bic.w	r1, r3, #15
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	430a      	orrs	r2, r1
 80108d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	4aa6      	ldr	r2, [pc, #664]	; (8010b78 <UART_SetConfig+0x334>)
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d177      	bne.n	80109d4 <UART_SetConfig+0x190>
 80108e4:	4ba5      	ldr	r3, [pc, #660]	; (8010b7c <UART_SetConfig+0x338>)
 80108e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80108ec:	2b28      	cmp	r3, #40	; 0x28
 80108ee:	d86d      	bhi.n	80109cc <UART_SetConfig+0x188>
 80108f0:	a201      	add	r2, pc, #4	; (adr r2, 80108f8 <UART_SetConfig+0xb4>)
 80108f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f6:	bf00      	nop
 80108f8:	0801099d 	.word	0x0801099d
 80108fc:	080109cd 	.word	0x080109cd
 8010900:	080109cd 	.word	0x080109cd
 8010904:	080109cd 	.word	0x080109cd
 8010908:	080109cd 	.word	0x080109cd
 801090c:	080109cd 	.word	0x080109cd
 8010910:	080109cd 	.word	0x080109cd
 8010914:	080109cd 	.word	0x080109cd
 8010918:	080109a5 	.word	0x080109a5
 801091c:	080109cd 	.word	0x080109cd
 8010920:	080109cd 	.word	0x080109cd
 8010924:	080109cd 	.word	0x080109cd
 8010928:	080109cd 	.word	0x080109cd
 801092c:	080109cd 	.word	0x080109cd
 8010930:	080109cd 	.word	0x080109cd
 8010934:	080109cd 	.word	0x080109cd
 8010938:	080109ad 	.word	0x080109ad
 801093c:	080109cd 	.word	0x080109cd
 8010940:	080109cd 	.word	0x080109cd
 8010944:	080109cd 	.word	0x080109cd
 8010948:	080109cd 	.word	0x080109cd
 801094c:	080109cd 	.word	0x080109cd
 8010950:	080109cd 	.word	0x080109cd
 8010954:	080109cd 	.word	0x080109cd
 8010958:	080109b5 	.word	0x080109b5
 801095c:	080109cd 	.word	0x080109cd
 8010960:	080109cd 	.word	0x080109cd
 8010964:	080109cd 	.word	0x080109cd
 8010968:	080109cd 	.word	0x080109cd
 801096c:	080109cd 	.word	0x080109cd
 8010970:	080109cd 	.word	0x080109cd
 8010974:	080109cd 	.word	0x080109cd
 8010978:	080109bd 	.word	0x080109bd
 801097c:	080109cd 	.word	0x080109cd
 8010980:	080109cd 	.word	0x080109cd
 8010984:	080109cd 	.word	0x080109cd
 8010988:	080109cd 	.word	0x080109cd
 801098c:	080109cd 	.word	0x080109cd
 8010990:	080109cd 	.word	0x080109cd
 8010994:	080109cd 	.word	0x080109cd
 8010998:	080109c5 	.word	0x080109c5
 801099c:	2301      	movs	r3, #1
 801099e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109a2:	e222      	b.n	8010dea <UART_SetConfig+0x5a6>
 80109a4:	2304      	movs	r3, #4
 80109a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109aa:	e21e      	b.n	8010dea <UART_SetConfig+0x5a6>
 80109ac:	2308      	movs	r3, #8
 80109ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109b2:	e21a      	b.n	8010dea <UART_SetConfig+0x5a6>
 80109b4:	2310      	movs	r3, #16
 80109b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ba:	e216      	b.n	8010dea <UART_SetConfig+0x5a6>
 80109bc:	2320      	movs	r3, #32
 80109be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c2:	e212      	b.n	8010dea <UART_SetConfig+0x5a6>
 80109c4:	2340      	movs	r3, #64	; 0x40
 80109c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ca:	e20e      	b.n	8010dea <UART_SetConfig+0x5a6>
 80109cc:	2380      	movs	r3, #128	; 0x80
 80109ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109d2:	e20a      	b.n	8010dea <UART_SetConfig+0x5a6>
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4a69      	ldr	r2, [pc, #420]	; (8010b80 <UART_SetConfig+0x33c>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	d130      	bne.n	8010a40 <UART_SetConfig+0x1fc>
 80109de:	4b67      	ldr	r3, [pc, #412]	; (8010b7c <UART_SetConfig+0x338>)
 80109e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109e2:	f003 0307 	and.w	r3, r3, #7
 80109e6:	2b05      	cmp	r3, #5
 80109e8:	d826      	bhi.n	8010a38 <UART_SetConfig+0x1f4>
 80109ea:	a201      	add	r2, pc, #4	; (adr r2, 80109f0 <UART_SetConfig+0x1ac>)
 80109ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f0:	08010a09 	.word	0x08010a09
 80109f4:	08010a11 	.word	0x08010a11
 80109f8:	08010a19 	.word	0x08010a19
 80109fc:	08010a21 	.word	0x08010a21
 8010a00:	08010a29 	.word	0x08010a29
 8010a04:	08010a31 	.word	0x08010a31
 8010a08:	2300      	movs	r3, #0
 8010a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0e:	e1ec      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a10:	2304      	movs	r3, #4
 8010a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a16:	e1e8      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a18:	2308      	movs	r3, #8
 8010a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1e:	e1e4      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a20:	2310      	movs	r3, #16
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a26:	e1e0      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a28:	2320      	movs	r3, #32
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2e:	e1dc      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a30:	2340      	movs	r3, #64	; 0x40
 8010a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a36:	e1d8      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a38:	2380      	movs	r3, #128	; 0x80
 8010a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3e:	e1d4      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4a4f      	ldr	r2, [pc, #316]	; (8010b84 <UART_SetConfig+0x340>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d130      	bne.n	8010aac <UART_SetConfig+0x268>
 8010a4a:	4b4c      	ldr	r3, [pc, #304]	; (8010b7c <UART_SetConfig+0x338>)
 8010a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a4e:	f003 0307 	and.w	r3, r3, #7
 8010a52:	2b05      	cmp	r3, #5
 8010a54:	d826      	bhi.n	8010aa4 <UART_SetConfig+0x260>
 8010a56:	a201      	add	r2, pc, #4	; (adr r2, 8010a5c <UART_SetConfig+0x218>)
 8010a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a5c:	08010a75 	.word	0x08010a75
 8010a60:	08010a7d 	.word	0x08010a7d
 8010a64:	08010a85 	.word	0x08010a85
 8010a68:	08010a8d 	.word	0x08010a8d
 8010a6c:	08010a95 	.word	0x08010a95
 8010a70:	08010a9d 	.word	0x08010a9d
 8010a74:	2300      	movs	r3, #0
 8010a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7a:	e1b6      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a7c:	2304      	movs	r3, #4
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a82:	e1b2      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a84:	2308      	movs	r3, #8
 8010a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8a:	e1ae      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a8c:	2310      	movs	r3, #16
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a92:	e1aa      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a94:	2320      	movs	r3, #32
 8010a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9a:	e1a6      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010a9c:	2340      	movs	r3, #64	; 0x40
 8010a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aa2:	e1a2      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010aa4:	2380      	movs	r3, #128	; 0x80
 8010aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aaa:	e19e      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4a35      	ldr	r2, [pc, #212]	; (8010b88 <UART_SetConfig+0x344>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d130      	bne.n	8010b18 <UART_SetConfig+0x2d4>
 8010ab6:	4b31      	ldr	r3, [pc, #196]	; (8010b7c <UART_SetConfig+0x338>)
 8010ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aba:	f003 0307 	and.w	r3, r3, #7
 8010abe:	2b05      	cmp	r3, #5
 8010ac0:	d826      	bhi.n	8010b10 <UART_SetConfig+0x2cc>
 8010ac2:	a201      	add	r2, pc, #4	; (adr r2, 8010ac8 <UART_SetConfig+0x284>)
 8010ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac8:	08010ae1 	.word	0x08010ae1
 8010acc:	08010ae9 	.word	0x08010ae9
 8010ad0:	08010af1 	.word	0x08010af1
 8010ad4:	08010af9 	.word	0x08010af9
 8010ad8:	08010b01 	.word	0x08010b01
 8010adc:	08010b09 	.word	0x08010b09
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ae6:	e180      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010ae8:	2304      	movs	r3, #4
 8010aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aee:	e17c      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010af0:	2308      	movs	r3, #8
 8010af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010af6:	e178      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010af8:	2310      	movs	r3, #16
 8010afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010afe:	e174      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010b00:	2320      	movs	r3, #32
 8010b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b06:	e170      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010b08:	2340      	movs	r3, #64	; 0x40
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0e:	e16c      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010b10:	2380      	movs	r3, #128	; 0x80
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b16:	e168      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4a1b      	ldr	r2, [pc, #108]	; (8010b8c <UART_SetConfig+0x348>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d142      	bne.n	8010ba8 <UART_SetConfig+0x364>
 8010b22:	4b16      	ldr	r3, [pc, #88]	; (8010b7c <UART_SetConfig+0x338>)
 8010b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b26:	f003 0307 	and.w	r3, r3, #7
 8010b2a:	2b05      	cmp	r3, #5
 8010b2c:	d838      	bhi.n	8010ba0 <UART_SetConfig+0x35c>
 8010b2e:	a201      	add	r2, pc, #4	; (adr r2, 8010b34 <UART_SetConfig+0x2f0>)
 8010b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b34:	08010b4d 	.word	0x08010b4d
 8010b38:	08010b55 	.word	0x08010b55
 8010b3c:	08010b5d 	.word	0x08010b5d
 8010b40:	08010b65 	.word	0x08010b65
 8010b44:	08010b91 	.word	0x08010b91
 8010b48:	08010b99 	.word	0x08010b99
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b52:	e14a      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010b54:	2304      	movs	r3, #4
 8010b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5a:	e146      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010b5c:	2308      	movs	r3, #8
 8010b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b62:	e142      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010b64:	2310      	movs	r3, #16
 8010b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b6a:	e13e      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010b6c:	cfff69f3 	.word	0xcfff69f3
 8010b70:	58000c00 	.word	0x58000c00
 8010b74:	11fff4ff 	.word	0x11fff4ff
 8010b78:	40011000 	.word	0x40011000
 8010b7c:	58024400 	.word	0x58024400
 8010b80:	40004400 	.word	0x40004400
 8010b84:	40004800 	.word	0x40004800
 8010b88:	40004c00 	.word	0x40004c00
 8010b8c:	40005000 	.word	0x40005000
 8010b90:	2320      	movs	r3, #32
 8010b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b96:	e128      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010b98:	2340      	movs	r3, #64	; 0x40
 8010b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9e:	e124      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010ba0:	2380      	movs	r3, #128	; 0x80
 8010ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba6:	e120      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	4acb      	ldr	r2, [pc, #812]	; (8010edc <UART_SetConfig+0x698>)
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d176      	bne.n	8010ca0 <UART_SetConfig+0x45c>
 8010bb2:	4bcb      	ldr	r3, [pc, #812]	; (8010ee0 <UART_SetConfig+0x69c>)
 8010bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010bba:	2b28      	cmp	r3, #40	; 0x28
 8010bbc:	d86c      	bhi.n	8010c98 <UART_SetConfig+0x454>
 8010bbe:	a201      	add	r2, pc, #4	; (adr r2, 8010bc4 <UART_SetConfig+0x380>)
 8010bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bc4:	08010c69 	.word	0x08010c69
 8010bc8:	08010c99 	.word	0x08010c99
 8010bcc:	08010c99 	.word	0x08010c99
 8010bd0:	08010c99 	.word	0x08010c99
 8010bd4:	08010c99 	.word	0x08010c99
 8010bd8:	08010c99 	.word	0x08010c99
 8010bdc:	08010c99 	.word	0x08010c99
 8010be0:	08010c99 	.word	0x08010c99
 8010be4:	08010c71 	.word	0x08010c71
 8010be8:	08010c99 	.word	0x08010c99
 8010bec:	08010c99 	.word	0x08010c99
 8010bf0:	08010c99 	.word	0x08010c99
 8010bf4:	08010c99 	.word	0x08010c99
 8010bf8:	08010c99 	.word	0x08010c99
 8010bfc:	08010c99 	.word	0x08010c99
 8010c00:	08010c99 	.word	0x08010c99
 8010c04:	08010c79 	.word	0x08010c79
 8010c08:	08010c99 	.word	0x08010c99
 8010c0c:	08010c99 	.word	0x08010c99
 8010c10:	08010c99 	.word	0x08010c99
 8010c14:	08010c99 	.word	0x08010c99
 8010c18:	08010c99 	.word	0x08010c99
 8010c1c:	08010c99 	.word	0x08010c99
 8010c20:	08010c99 	.word	0x08010c99
 8010c24:	08010c81 	.word	0x08010c81
 8010c28:	08010c99 	.word	0x08010c99
 8010c2c:	08010c99 	.word	0x08010c99
 8010c30:	08010c99 	.word	0x08010c99
 8010c34:	08010c99 	.word	0x08010c99
 8010c38:	08010c99 	.word	0x08010c99
 8010c3c:	08010c99 	.word	0x08010c99
 8010c40:	08010c99 	.word	0x08010c99
 8010c44:	08010c89 	.word	0x08010c89
 8010c48:	08010c99 	.word	0x08010c99
 8010c4c:	08010c99 	.word	0x08010c99
 8010c50:	08010c99 	.word	0x08010c99
 8010c54:	08010c99 	.word	0x08010c99
 8010c58:	08010c99 	.word	0x08010c99
 8010c5c:	08010c99 	.word	0x08010c99
 8010c60:	08010c99 	.word	0x08010c99
 8010c64:	08010c91 	.word	0x08010c91
 8010c68:	2301      	movs	r3, #1
 8010c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6e:	e0bc      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010c70:	2304      	movs	r3, #4
 8010c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c76:	e0b8      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010c78:	2308      	movs	r3, #8
 8010c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7e:	e0b4      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010c80:	2310      	movs	r3, #16
 8010c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c86:	e0b0      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010c88:	2320      	movs	r3, #32
 8010c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8e:	e0ac      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010c90:	2340      	movs	r3, #64	; 0x40
 8010c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c96:	e0a8      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010c98:	2380      	movs	r3, #128	; 0x80
 8010c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9e:	e0a4      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a8f      	ldr	r2, [pc, #572]	; (8010ee4 <UART_SetConfig+0x6a0>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d130      	bne.n	8010d0c <UART_SetConfig+0x4c8>
 8010caa:	4b8d      	ldr	r3, [pc, #564]	; (8010ee0 <UART_SetConfig+0x69c>)
 8010cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cae:	f003 0307 	and.w	r3, r3, #7
 8010cb2:	2b05      	cmp	r3, #5
 8010cb4:	d826      	bhi.n	8010d04 <UART_SetConfig+0x4c0>
 8010cb6:	a201      	add	r2, pc, #4	; (adr r2, 8010cbc <UART_SetConfig+0x478>)
 8010cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cbc:	08010cd5 	.word	0x08010cd5
 8010cc0:	08010cdd 	.word	0x08010cdd
 8010cc4:	08010ce5 	.word	0x08010ce5
 8010cc8:	08010ced 	.word	0x08010ced
 8010ccc:	08010cf5 	.word	0x08010cf5
 8010cd0:	08010cfd 	.word	0x08010cfd
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cda:	e086      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010cdc:	2304      	movs	r3, #4
 8010cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce2:	e082      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010ce4:	2308      	movs	r3, #8
 8010ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cea:	e07e      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010cec:	2310      	movs	r3, #16
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf2:	e07a      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010cf4:	2320      	movs	r3, #32
 8010cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfa:	e076      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010cfc:	2340      	movs	r3, #64	; 0x40
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d02:	e072      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010d04:	2380      	movs	r3, #128	; 0x80
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0a:	e06e      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4a75      	ldr	r2, [pc, #468]	; (8010ee8 <UART_SetConfig+0x6a4>)
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d130      	bne.n	8010d78 <UART_SetConfig+0x534>
 8010d16:	4b72      	ldr	r3, [pc, #456]	; (8010ee0 <UART_SetConfig+0x69c>)
 8010d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d1a:	f003 0307 	and.w	r3, r3, #7
 8010d1e:	2b05      	cmp	r3, #5
 8010d20:	d826      	bhi.n	8010d70 <UART_SetConfig+0x52c>
 8010d22:	a201      	add	r2, pc, #4	; (adr r2, 8010d28 <UART_SetConfig+0x4e4>)
 8010d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d28:	08010d41 	.word	0x08010d41
 8010d2c:	08010d49 	.word	0x08010d49
 8010d30:	08010d51 	.word	0x08010d51
 8010d34:	08010d59 	.word	0x08010d59
 8010d38:	08010d61 	.word	0x08010d61
 8010d3c:	08010d69 	.word	0x08010d69
 8010d40:	2300      	movs	r3, #0
 8010d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d46:	e050      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010d48:	2304      	movs	r3, #4
 8010d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d4e:	e04c      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010d50:	2308      	movs	r3, #8
 8010d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d56:	e048      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010d58:	2310      	movs	r3, #16
 8010d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5e:	e044      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010d60:	2320      	movs	r3, #32
 8010d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d66:	e040      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010d68:	2340      	movs	r3, #64	; 0x40
 8010d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6e:	e03c      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010d70:	2380      	movs	r3, #128	; 0x80
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d76:	e038      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a5b      	ldr	r2, [pc, #364]	; (8010eec <UART_SetConfig+0x6a8>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d130      	bne.n	8010de4 <UART_SetConfig+0x5a0>
 8010d82:	4b57      	ldr	r3, [pc, #348]	; (8010ee0 <UART_SetConfig+0x69c>)
 8010d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d86:	f003 0307 	and.w	r3, r3, #7
 8010d8a:	2b05      	cmp	r3, #5
 8010d8c:	d826      	bhi.n	8010ddc <UART_SetConfig+0x598>
 8010d8e:	a201      	add	r2, pc, #4	; (adr r2, 8010d94 <UART_SetConfig+0x550>)
 8010d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d94:	08010dad 	.word	0x08010dad
 8010d98:	08010db5 	.word	0x08010db5
 8010d9c:	08010dbd 	.word	0x08010dbd
 8010da0:	08010dc5 	.word	0x08010dc5
 8010da4:	08010dcd 	.word	0x08010dcd
 8010da8:	08010dd5 	.word	0x08010dd5
 8010dac:	2302      	movs	r3, #2
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db2:	e01a      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010db4:	2304      	movs	r3, #4
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dba:	e016      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010dbc:	2308      	movs	r3, #8
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc2:	e012      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010dc4:	2310      	movs	r3, #16
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dca:	e00e      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010dcc:	2320      	movs	r3, #32
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd2:	e00a      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010dd4:	2340      	movs	r3, #64	; 0x40
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dda:	e006      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010ddc:	2380      	movs	r3, #128	; 0x80
 8010dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de2:	e002      	b.n	8010dea <UART_SetConfig+0x5a6>
 8010de4:	2380      	movs	r3, #128	; 0x80
 8010de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	4a3f      	ldr	r2, [pc, #252]	; (8010eec <UART_SetConfig+0x6a8>)
 8010df0:	4293      	cmp	r3, r2
 8010df2:	f040 80f8 	bne.w	8010fe6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010df6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010dfa:	2b20      	cmp	r3, #32
 8010dfc:	dc46      	bgt.n	8010e8c <UART_SetConfig+0x648>
 8010dfe:	2b02      	cmp	r3, #2
 8010e00:	f2c0 8082 	blt.w	8010f08 <UART_SetConfig+0x6c4>
 8010e04:	3b02      	subs	r3, #2
 8010e06:	2b1e      	cmp	r3, #30
 8010e08:	d87e      	bhi.n	8010f08 <UART_SetConfig+0x6c4>
 8010e0a:	a201      	add	r2, pc, #4	; (adr r2, 8010e10 <UART_SetConfig+0x5cc>)
 8010e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e10:	08010e93 	.word	0x08010e93
 8010e14:	08010f09 	.word	0x08010f09
 8010e18:	08010e9b 	.word	0x08010e9b
 8010e1c:	08010f09 	.word	0x08010f09
 8010e20:	08010f09 	.word	0x08010f09
 8010e24:	08010f09 	.word	0x08010f09
 8010e28:	08010eab 	.word	0x08010eab
 8010e2c:	08010f09 	.word	0x08010f09
 8010e30:	08010f09 	.word	0x08010f09
 8010e34:	08010f09 	.word	0x08010f09
 8010e38:	08010f09 	.word	0x08010f09
 8010e3c:	08010f09 	.word	0x08010f09
 8010e40:	08010f09 	.word	0x08010f09
 8010e44:	08010f09 	.word	0x08010f09
 8010e48:	08010ebb 	.word	0x08010ebb
 8010e4c:	08010f09 	.word	0x08010f09
 8010e50:	08010f09 	.word	0x08010f09
 8010e54:	08010f09 	.word	0x08010f09
 8010e58:	08010f09 	.word	0x08010f09
 8010e5c:	08010f09 	.word	0x08010f09
 8010e60:	08010f09 	.word	0x08010f09
 8010e64:	08010f09 	.word	0x08010f09
 8010e68:	08010f09 	.word	0x08010f09
 8010e6c:	08010f09 	.word	0x08010f09
 8010e70:	08010f09 	.word	0x08010f09
 8010e74:	08010f09 	.word	0x08010f09
 8010e78:	08010f09 	.word	0x08010f09
 8010e7c:	08010f09 	.word	0x08010f09
 8010e80:	08010f09 	.word	0x08010f09
 8010e84:	08010f09 	.word	0x08010f09
 8010e88:	08010efb 	.word	0x08010efb
 8010e8c:	2b40      	cmp	r3, #64	; 0x40
 8010e8e:	d037      	beq.n	8010f00 <UART_SetConfig+0x6bc>
 8010e90:	e03a      	b.n	8010f08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010e92:	f7fb fcd7 	bl	800c844 <HAL_RCCEx_GetD3PCLK1Freq>
 8010e96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010e98:	e03c      	b.n	8010f14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fb fce6 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ea8:	e034      	b.n	8010f14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010eaa:	f107 0318 	add.w	r3, r7, #24
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fb fe32 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010eb8:	e02c      	b.n	8010f14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010eba:	4b09      	ldr	r3, [pc, #36]	; (8010ee0 <UART_SetConfig+0x69c>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f003 0320 	and.w	r3, r3, #32
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d016      	beq.n	8010ef4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010ec6:	4b06      	ldr	r3, [pc, #24]	; (8010ee0 <UART_SetConfig+0x69c>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	08db      	lsrs	r3, r3, #3
 8010ecc:	f003 0303 	and.w	r3, r3, #3
 8010ed0:	4a07      	ldr	r2, [pc, #28]	; (8010ef0 <UART_SetConfig+0x6ac>)
 8010ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8010ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ed8:	e01c      	b.n	8010f14 <UART_SetConfig+0x6d0>
 8010eda:	bf00      	nop
 8010edc:	40011400 	.word	0x40011400
 8010ee0:	58024400 	.word	0x58024400
 8010ee4:	40007800 	.word	0x40007800
 8010ee8:	40007c00 	.word	0x40007c00
 8010eec:	58000c00 	.word	0x58000c00
 8010ef0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010ef4:	4b9d      	ldr	r3, [pc, #628]	; (801116c <UART_SetConfig+0x928>)
 8010ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ef8:	e00c      	b.n	8010f14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010efa:	4b9d      	ldr	r3, [pc, #628]	; (8011170 <UART_SetConfig+0x92c>)
 8010efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010efe:	e009      	b.n	8010f14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f06:	e005      	b.n	8010f14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010f12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	f000 81de 	beq.w	80112d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f20:	4a94      	ldr	r2, [pc, #592]	; (8011174 <UART_SetConfig+0x930>)
 8010f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f26:	461a      	mov	r2, r3
 8010f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f2e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	685a      	ldr	r2, [r3, #4]
 8010f34:	4613      	mov	r3, r2
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	4413      	add	r3, r2
 8010f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d305      	bcc.n	8010f4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d903      	bls.n	8010f54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010f52:	e1c1      	b.n	80112d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f56:	2200      	movs	r2, #0
 8010f58:	60bb      	str	r3, [r7, #8]
 8010f5a:	60fa      	str	r2, [r7, #12]
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f60:	4a84      	ldr	r2, [pc, #528]	; (8011174 <UART_SetConfig+0x930>)
 8010f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	2200      	movs	r2, #0
 8010f6a:	603b      	str	r3, [r7, #0]
 8010f6c:	607a      	str	r2, [r7, #4]
 8010f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010f76:	f7ef f9b3 	bl	80002e0 <__aeabi_uldivmod>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	4610      	mov	r0, r2
 8010f80:	4619      	mov	r1, r3
 8010f82:	f04f 0200 	mov.w	r2, #0
 8010f86:	f04f 0300 	mov.w	r3, #0
 8010f8a:	020b      	lsls	r3, r1, #8
 8010f8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010f90:	0202      	lsls	r2, r0, #8
 8010f92:	6979      	ldr	r1, [r7, #20]
 8010f94:	6849      	ldr	r1, [r1, #4]
 8010f96:	0849      	lsrs	r1, r1, #1
 8010f98:	2000      	movs	r0, #0
 8010f9a:	460c      	mov	r4, r1
 8010f9c:	4605      	mov	r5, r0
 8010f9e:	eb12 0804 	adds.w	r8, r2, r4
 8010fa2:	eb43 0905 	adc.w	r9, r3, r5
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	2200      	movs	r2, #0
 8010fac:	469a      	mov	sl, r3
 8010fae:	4693      	mov	fp, r2
 8010fb0:	4652      	mov	r2, sl
 8010fb2:	465b      	mov	r3, fp
 8010fb4:	4640      	mov	r0, r8
 8010fb6:	4649      	mov	r1, r9
 8010fb8:	f7ef f992 	bl	80002e0 <__aeabi_uldivmod>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010fca:	d308      	bcc.n	8010fde <UART_SetConfig+0x79a>
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010fd2:	d204      	bcs.n	8010fde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fda:	60da      	str	r2, [r3, #12]
 8010fdc:	e17c      	b.n	80112d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010fe4:	e178      	b.n	80112d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	69db      	ldr	r3, [r3, #28]
 8010fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010fee:	f040 80c5 	bne.w	801117c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010ff2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ff6:	2b20      	cmp	r3, #32
 8010ff8:	dc48      	bgt.n	801108c <UART_SetConfig+0x848>
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	db7b      	blt.n	80110f6 <UART_SetConfig+0x8b2>
 8010ffe:	2b20      	cmp	r3, #32
 8011000:	d879      	bhi.n	80110f6 <UART_SetConfig+0x8b2>
 8011002:	a201      	add	r2, pc, #4	; (adr r2, 8011008 <UART_SetConfig+0x7c4>)
 8011004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011008:	08011093 	.word	0x08011093
 801100c:	0801109b 	.word	0x0801109b
 8011010:	080110f7 	.word	0x080110f7
 8011014:	080110f7 	.word	0x080110f7
 8011018:	080110a3 	.word	0x080110a3
 801101c:	080110f7 	.word	0x080110f7
 8011020:	080110f7 	.word	0x080110f7
 8011024:	080110f7 	.word	0x080110f7
 8011028:	080110b3 	.word	0x080110b3
 801102c:	080110f7 	.word	0x080110f7
 8011030:	080110f7 	.word	0x080110f7
 8011034:	080110f7 	.word	0x080110f7
 8011038:	080110f7 	.word	0x080110f7
 801103c:	080110f7 	.word	0x080110f7
 8011040:	080110f7 	.word	0x080110f7
 8011044:	080110f7 	.word	0x080110f7
 8011048:	080110c3 	.word	0x080110c3
 801104c:	080110f7 	.word	0x080110f7
 8011050:	080110f7 	.word	0x080110f7
 8011054:	080110f7 	.word	0x080110f7
 8011058:	080110f7 	.word	0x080110f7
 801105c:	080110f7 	.word	0x080110f7
 8011060:	080110f7 	.word	0x080110f7
 8011064:	080110f7 	.word	0x080110f7
 8011068:	080110f7 	.word	0x080110f7
 801106c:	080110f7 	.word	0x080110f7
 8011070:	080110f7 	.word	0x080110f7
 8011074:	080110f7 	.word	0x080110f7
 8011078:	080110f7 	.word	0x080110f7
 801107c:	080110f7 	.word	0x080110f7
 8011080:	080110f7 	.word	0x080110f7
 8011084:	080110f7 	.word	0x080110f7
 8011088:	080110e9 	.word	0x080110e9
 801108c:	2b40      	cmp	r3, #64	; 0x40
 801108e:	d02e      	beq.n	80110ee <UART_SetConfig+0x8aa>
 8011090:	e031      	b.n	80110f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011092:	f7f9 fbdf 	bl	800a854 <HAL_RCC_GetPCLK1Freq>
 8011096:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011098:	e033      	b.n	8011102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801109a:	f7f9 fbf1 	bl	800a880 <HAL_RCC_GetPCLK2Freq>
 801109e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110a0:	e02f      	b.n	8011102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fb fbe2 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80110ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110b0:	e027      	b.n	8011102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110b2:	f107 0318 	add.w	r3, r7, #24
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7fb fd2e 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110c0:	e01f      	b.n	8011102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110c2:	4b2d      	ldr	r3, [pc, #180]	; (8011178 <UART_SetConfig+0x934>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f003 0320 	and.w	r3, r3, #32
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d009      	beq.n	80110e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80110ce:	4b2a      	ldr	r3, [pc, #168]	; (8011178 <UART_SetConfig+0x934>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	08db      	lsrs	r3, r3, #3
 80110d4:	f003 0303 	and.w	r3, r3, #3
 80110d8:	4a24      	ldr	r2, [pc, #144]	; (801116c <UART_SetConfig+0x928>)
 80110da:	fa22 f303 	lsr.w	r3, r2, r3
 80110de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80110e0:	e00f      	b.n	8011102 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80110e2:	4b22      	ldr	r3, [pc, #136]	; (801116c <UART_SetConfig+0x928>)
 80110e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110e6:	e00c      	b.n	8011102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80110e8:	4b21      	ldr	r3, [pc, #132]	; (8011170 <UART_SetConfig+0x92c>)
 80110ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110ec:	e009      	b.n	8011102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80110ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110f4:	e005      	b.n	8011102 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80110f6:	2300      	movs	r3, #0
 80110f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80110fa:	2301      	movs	r3, #1
 80110fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011104:	2b00      	cmp	r3, #0
 8011106:	f000 80e7 	beq.w	80112d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801110e:	4a19      	ldr	r2, [pc, #100]	; (8011174 <UART_SetConfig+0x930>)
 8011110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011114:	461a      	mov	r2, r3
 8011116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011118:	fbb3 f3f2 	udiv	r3, r3, r2
 801111c:	005a      	lsls	r2, r3, #1
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	085b      	lsrs	r3, r3, #1
 8011124:	441a      	add	r2, r3
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	fbb2 f3f3 	udiv	r3, r2, r3
 801112e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011132:	2b0f      	cmp	r3, #15
 8011134:	d916      	bls.n	8011164 <UART_SetConfig+0x920>
 8011136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801113c:	d212      	bcs.n	8011164 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801113e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011140:	b29b      	uxth	r3, r3
 8011142:	f023 030f 	bic.w	r3, r3, #15
 8011146:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114a:	085b      	lsrs	r3, r3, #1
 801114c:	b29b      	uxth	r3, r3
 801114e:	f003 0307 	and.w	r3, r3, #7
 8011152:	b29a      	uxth	r2, r3
 8011154:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011156:	4313      	orrs	r3, r2
 8011158:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011160:	60da      	str	r2, [r3, #12]
 8011162:	e0b9      	b.n	80112d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011164:	2301      	movs	r3, #1
 8011166:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801116a:	e0b5      	b.n	80112d8 <UART_SetConfig+0xa94>
 801116c:	03d09000 	.word	0x03d09000
 8011170:	003d0900 	.word	0x003d0900
 8011174:	08016f98 	.word	0x08016f98
 8011178:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801117c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011180:	2b20      	cmp	r3, #32
 8011182:	dc49      	bgt.n	8011218 <UART_SetConfig+0x9d4>
 8011184:	2b00      	cmp	r3, #0
 8011186:	db7c      	blt.n	8011282 <UART_SetConfig+0xa3e>
 8011188:	2b20      	cmp	r3, #32
 801118a:	d87a      	bhi.n	8011282 <UART_SetConfig+0xa3e>
 801118c:	a201      	add	r2, pc, #4	; (adr r2, 8011194 <UART_SetConfig+0x950>)
 801118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011192:	bf00      	nop
 8011194:	0801121f 	.word	0x0801121f
 8011198:	08011227 	.word	0x08011227
 801119c:	08011283 	.word	0x08011283
 80111a0:	08011283 	.word	0x08011283
 80111a4:	0801122f 	.word	0x0801122f
 80111a8:	08011283 	.word	0x08011283
 80111ac:	08011283 	.word	0x08011283
 80111b0:	08011283 	.word	0x08011283
 80111b4:	0801123f 	.word	0x0801123f
 80111b8:	08011283 	.word	0x08011283
 80111bc:	08011283 	.word	0x08011283
 80111c0:	08011283 	.word	0x08011283
 80111c4:	08011283 	.word	0x08011283
 80111c8:	08011283 	.word	0x08011283
 80111cc:	08011283 	.word	0x08011283
 80111d0:	08011283 	.word	0x08011283
 80111d4:	0801124f 	.word	0x0801124f
 80111d8:	08011283 	.word	0x08011283
 80111dc:	08011283 	.word	0x08011283
 80111e0:	08011283 	.word	0x08011283
 80111e4:	08011283 	.word	0x08011283
 80111e8:	08011283 	.word	0x08011283
 80111ec:	08011283 	.word	0x08011283
 80111f0:	08011283 	.word	0x08011283
 80111f4:	08011283 	.word	0x08011283
 80111f8:	08011283 	.word	0x08011283
 80111fc:	08011283 	.word	0x08011283
 8011200:	08011283 	.word	0x08011283
 8011204:	08011283 	.word	0x08011283
 8011208:	08011283 	.word	0x08011283
 801120c:	08011283 	.word	0x08011283
 8011210:	08011283 	.word	0x08011283
 8011214:	08011275 	.word	0x08011275
 8011218:	2b40      	cmp	r3, #64	; 0x40
 801121a:	d02e      	beq.n	801127a <UART_SetConfig+0xa36>
 801121c:	e031      	b.n	8011282 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801121e:	f7f9 fb19 	bl	800a854 <HAL_RCC_GetPCLK1Freq>
 8011222:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011224:	e033      	b.n	801128e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011226:	f7f9 fb2b 	bl	800a880 <HAL_RCC_GetPCLK2Freq>
 801122a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801122c:	e02f      	b.n	801128e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011232:	4618      	mov	r0, r3
 8011234:	f7fb fb1c 	bl	800c870 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801123c:	e027      	b.n	801128e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801123e:	f107 0318 	add.w	r3, r7, #24
 8011242:	4618      	mov	r0, r3
 8011244:	f7fb fc68 	bl	800cb18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011248:	69fb      	ldr	r3, [r7, #28]
 801124a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801124c:	e01f      	b.n	801128e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801124e:	4b2d      	ldr	r3, [pc, #180]	; (8011304 <UART_SetConfig+0xac0>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f003 0320 	and.w	r3, r3, #32
 8011256:	2b00      	cmp	r3, #0
 8011258:	d009      	beq.n	801126e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801125a:	4b2a      	ldr	r3, [pc, #168]	; (8011304 <UART_SetConfig+0xac0>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	08db      	lsrs	r3, r3, #3
 8011260:	f003 0303 	and.w	r3, r3, #3
 8011264:	4a28      	ldr	r2, [pc, #160]	; (8011308 <UART_SetConfig+0xac4>)
 8011266:	fa22 f303 	lsr.w	r3, r2, r3
 801126a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801126c:	e00f      	b.n	801128e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801126e:	4b26      	ldr	r3, [pc, #152]	; (8011308 <UART_SetConfig+0xac4>)
 8011270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011272:	e00c      	b.n	801128e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011274:	4b25      	ldr	r3, [pc, #148]	; (801130c <UART_SetConfig+0xac8>)
 8011276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011278:	e009      	b.n	801128e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801127a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801127e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011280:	e005      	b.n	801128e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011282:	2300      	movs	r3, #0
 8011284:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011286:	2301      	movs	r3, #1
 8011288:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801128c:	bf00      	nop
    }

    if (pclk != 0U)
 801128e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011290:	2b00      	cmp	r3, #0
 8011292:	d021      	beq.n	80112d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011298:	4a1d      	ldr	r2, [pc, #116]	; (8011310 <UART_SetConfig+0xacc>)
 801129a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801129e:	461a      	mov	r2, r3
 80112a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	085b      	lsrs	r3, r3, #1
 80112ac:	441a      	add	r2, r3
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80112b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ba:	2b0f      	cmp	r3, #15
 80112bc:	d909      	bls.n	80112d2 <UART_SetConfig+0xa8e>
 80112be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112c4:	d205      	bcs.n	80112d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80112c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c8:	b29a      	uxth	r2, r3
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	60da      	str	r2, [r3, #12]
 80112d0:	e002      	b.n	80112d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80112d2:	2301      	movs	r3, #1
 80112d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	2201      	movs	r2, #1
 80112dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	2201      	movs	r2, #1
 80112e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	2200      	movs	r2, #0
 80112ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	2200      	movs	r2, #0
 80112f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80112f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3748      	adds	r7, #72	; 0x48
 80112fc:	46bd      	mov	sp, r7
 80112fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011302:	bf00      	nop
 8011304:	58024400 	.word	0x58024400
 8011308:	03d09000 	.word	0x03d09000
 801130c:	003d0900 	.word	0x003d0900
 8011310:	08016f98 	.word	0x08016f98

08011314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011314:	b480      	push	{r7}
 8011316:	b083      	sub	sp, #12
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011320:	f003 0308 	and.w	r3, r3, #8
 8011324:	2b00      	cmp	r3, #0
 8011326:	d00a      	beq.n	801133e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	430a      	orrs	r2, r1
 801133c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011342:	f003 0301 	and.w	r3, r3, #1
 8011346:	2b00      	cmp	r3, #0
 8011348:	d00a      	beq.n	8011360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	430a      	orrs	r2, r1
 801135e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011364:	f003 0302 	and.w	r3, r3, #2
 8011368:	2b00      	cmp	r3, #0
 801136a:	d00a      	beq.n	8011382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	430a      	orrs	r2, r1
 8011380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011386:	f003 0304 	and.w	r3, r3, #4
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00a      	beq.n	80113a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	430a      	orrs	r2, r1
 80113a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113a8:	f003 0310 	and.w	r3, r3, #16
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d00a      	beq.n	80113c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	689b      	ldr	r3, [r3, #8]
 80113b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	430a      	orrs	r2, r1
 80113c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ca:	f003 0320 	and.w	r3, r3, #32
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00a      	beq.n	80113e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	430a      	orrs	r2, r1
 80113e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d01a      	beq.n	801142a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	430a      	orrs	r2, r1
 8011408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801140e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011412:	d10a      	bne.n	801142a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	430a      	orrs	r2, r1
 8011428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011432:	2b00      	cmp	r3, #0
 8011434:	d00a      	beq.n	801144c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	430a      	orrs	r2, r1
 801144a:	605a      	str	r2, [r3, #4]
  }
}
 801144c:	bf00      	nop
 801144e:	370c      	adds	r7, #12
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr

08011458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b098      	sub	sp, #96	; 0x60
 801145c:	af02      	add	r7, sp, #8
 801145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2200      	movs	r2, #0
 8011464:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011468:	f7f2 faae 	bl	80039c8 <HAL_GetTick>
 801146c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f003 0308 	and.w	r3, r3, #8
 8011478:	2b08      	cmp	r3, #8
 801147a:	d12f      	bne.n	80114dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801147c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011480:	9300      	str	r3, [sp, #0]
 8011482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011484:	2200      	movs	r2, #0
 8011486:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 f88e 	bl	80115ac <UART_WaitOnFlagUntilTimeout>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	d022      	beq.n	80114dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149e:	e853 3f00 	ldrex	r3, [r3]
 80114a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80114a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114aa:	653b      	str	r3, [r7, #80]	; 0x50
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	461a      	mov	r2, r3
 80114b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114b4:	647b      	str	r3, [r7, #68]	; 0x44
 80114b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80114ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114bc:	e841 2300 	strex	r3, r2, [r1]
 80114c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80114c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d1e6      	bne.n	8011496 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2220      	movs	r2, #32
 80114cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2200      	movs	r2, #0
 80114d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114d8:	2303      	movs	r3, #3
 80114da:	e063      	b.n	80115a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f003 0304 	and.w	r3, r3, #4
 80114e6:	2b04      	cmp	r3, #4
 80114e8:	d149      	bne.n	801157e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80114ee:	9300      	str	r3, [sp, #0]
 80114f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114f2:	2200      	movs	r2, #0
 80114f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 f857 	bl	80115ac <UART_WaitOnFlagUntilTimeout>
 80114fe:	4603      	mov	r3, r0
 8011500:	2b00      	cmp	r3, #0
 8011502:	d03c      	beq.n	801157e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150c:	e853 3f00 	ldrex	r3, [r3]
 8011510:	623b      	str	r3, [r7, #32]
   return(result);
 8011512:	6a3b      	ldr	r3, [r7, #32]
 8011514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011518:	64fb      	str	r3, [r7, #76]	; 0x4c
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	461a      	mov	r2, r3
 8011520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011522:	633b      	str	r3, [r7, #48]	; 0x30
 8011524:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801152a:	e841 2300 	strex	r3, r2, [r1]
 801152e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011532:	2b00      	cmp	r3, #0
 8011534:	d1e6      	bne.n	8011504 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	3308      	adds	r3, #8
 801153c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	e853 3f00 	ldrex	r3, [r3]
 8011544:	60fb      	str	r3, [r7, #12]
   return(result);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	f023 0301 	bic.w	r3, r3, #1
 801154c:	64bb      	str	r3, [r7, #72]	; 0x48
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	3308      	adds	r3, #8
 8011554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011556:	61fa      	str	r2, [r7, #28]
 8011558:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801155a:	69b9      	ldr	r1, [r7, #24]
 801155c:	69fa      	ldr	r2, [r7, #28]
 801155e:	e841 2300 	strex	r3, r2, [r1]
 8011562:	617b      	str	r3, [r7, #20]
   return(result);
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1e5      	bne.n	8011536 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2220      	movs	r2, #32
 801156e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801157a:	2303      	movs	r3, #3
 801157c:	e012      	b.n	80115a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2220      	movs	r2, #32
 8011582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2220      	movs	r2, #32
 801158a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2200      	movs	r2, #0
 8011592:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2200      	movs	r2, #0
 8011598:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80115a2:	2300      	movs	r3, #0
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	3758      	adds	r7, #88	; 0x58
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}

080115ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b084      	sub	sp, #16
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	60b9      	str	r1, [r7, #8]
 80115b6:	603b      	str	r3, [r7, #0]
 80115b8:	4613      	mov	r3, r2
 80115ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80115bc:	e04f      	b.n	801165e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115c4:	d04b      	beq.n	801165e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80115c6:	f7f2 f9ff 	bl	80039c8 <HAL_GetTick>
 80115ca:	4602      	mov	r2, r0
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	1ad3      	subs	r3, r2, r3
 80115d0:	69ba      	ldr	r2, [r7, #24]
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d302      	bcc.n	80115dc <UART_WaitOnFlagUntilTimeout+0x30>
 80115d6:	69bb      	ldr	r3, [r7, #24]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d101      	bne.n	80115e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80115dc:	2303      	movs	r3, #3
 80115de:	e04e      	b.n	801167e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	f003 0304 	and.w	r3, r3, #4
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d037      	beq.n	801165e <UART_WaitOnFlagUntilTimeout+0xb2>
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	2b80      	cmp	r3, #128	; 0x80
 80115f2:	d034      	beq.n	801165e <UART_WaitOnFlagUntilTimeout+0xb2>
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	2b40      	cmp	r3, #64	; 0x40
 80115f8:	d031      	beq.n	801165e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	69db      	ldr	r3, [r3, #28]
 8011600:	f003 0308 	and.w	r3, r3, #8
 8011604:	2b08      	cmp	r3, #8
 8011606:	d110      	bne.n	801162a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2208      	movs	r2, #8
 801160e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	f000 f99d 	bl	8011950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2208      	movs	r2, #8
 801161a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2200      	movs	r2, #0
 8011622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011626:	2301      	movs	r3, #1
 8011628:	e029      	b.n	801167e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	69db      	ldr	r3, [r3, #28]
 8011630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011638:	d111      	bne.n	801165e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011644:	68f8      	ldr	r0, [r7, #12]
 8011646:	f000 f983 	bl	8011950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2220      	movs	r2, #32
 801164e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2200      	movs	r2, #0
 8011656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801165a:	2303      	movs	r3, #3
 801165c:	e00f      	b.n	801167e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	69da      	ldr	r2, [r3, #28]
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	4013      	ands	r3, r2
 8011668:	68ba      	ldr	r2, [r7, #8]
 801166a:	429a      	cmp	r2, r3
 801166c:	bf0c      	ite	eq
 801166e:	2301      	moveq	r3, #1
 8011670:	2300      	movne	r3, #0
 8011672:	b2db      	uxtb	r3, r3
 8011674:	461a      	mov	r2, r3
 8011676:	79fb      	ldrb	r3, [r7, #7]
 8011678:	429a      	cmp	r2, r3
 801167a:	d0a0      	beq.n	80115be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801167c:	2300      	movs	r3, #0
}
 801167e:	4618      	mov	r0, r3
 8011680:	3710      	adds	r7, #16
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
	...

08011688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011688:	b480      	push	{r7}
 801168a:	b0a3      	sub	sp, #140	; 0x8c
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	4613      	mov	r3, r2
 8011694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	68ba      	ldr	r2, [r7, #8]
 801169a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	88fa      	ldrh	r2, [r7, #6]
 80116a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	88fa      	ldrh	r2, [r7, #6]
 80116a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2200      	movs	r2, #0
 80116b0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	689b      	ldr	r3, [r3, #8]
 80116b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116ba:	d10e      	bne.n	80116da <UART_Start_Receive_IT+0x52>
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	691b      	ldr	r3, [r3, #16]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d105      	bne.n	80116d0 <UART_Start_Receive_IT+0x48>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80116ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80116ce:	e02d      	b.n	801172c <UART_Start_Receive_IT+0xa4>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	22ff      	movs	r2, #255	; 0xff
 80116d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80116d8:	e028      	b.n	801172c <UART_Start_Receive_IT+0xa4>
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	689b      	ldr	r3, [r3, #8]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d10d      	bne.n	80116fe <UART_Start_Receive_IT+0x76>
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	691b      	ldr	r3, [r3, #16]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d104      	bne.n	80116f4 <UART_Start_Receive_IT+0x6c>
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	22ff      	movs	r2, #255	; 0xff
 80116ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80116f2:	e01b      	b.n	801172c <UART_Start_Receive_IT+0xa4>
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	227f      	movs	r2, #127	; 0x7f
 80116f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80116fc:	e016      	b.n	801172c <UART_Start_Receive_IT+0xa4>
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	689b      	ldr	r3, [r3, #8]
 8011702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011706:	d10d      	bne.n	8011724 <UART_Start_Receive_IT+0x9c>
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	691b      	ldr	r3, [r3, #16]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d104      	bne.n	801171a <UART_Start_Receive_IT+0x92>
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	227f      	movs	r2, #127	; 0x7f
 8011714:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011718:	e008      	b.n	801172c <UART_Start_Receive_IT+0xa4>
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	223f      	movs	r2, #63	; 0x3f
 801171e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011722:	e003      	b.n	801172c <UART_Start_Receive_IT+0xa4>
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2200      	movs	r2, #0
 8011728:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	2200      	movs	r2, #0
 8011730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	2222      	movs	r2, #34	; 0x22
 8011738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	3308      	adds	r3, #8
 8011742:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011746:	e853 3f00 	ldrex	r3, [r3]
 801174a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801174c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801174e:	f043 0301 	orr.w	r3, r3, #1
 8011752:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	3308      	adds	r3, #8
 801175c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011760:	673a      	str	r2, [r7, #112]	; 0x70
 8011762:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011764:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011766:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011768:	e841 2300 	strex	r3, r2, [r1]
 801176c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801176e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011770:	2b00      	cmp	r3, #0
 8011772:	d1e3      	bne.n	801173c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801177c:	d14f      	bne.n	801181e <UART_Start_Receive_IT+0x196>
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011784:	88fa      	ldrh	r2, [r7, #6]
 8011786:	429a      	cmp	r2, r3
 8011788:	d349      	bcc.n	801181e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	689b      	ldr	r3, [r3, #8]
 801178e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011792:	d107      	bne.n	80117a4 <UART_Start_Receive_IT+0x11c>
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	691b      	ldr	r3, [r3, #16]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d103      	bne.n	80117a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	4a47      	ldr	r2, [pc, #284]	; (80118bc <UART_Start_Receive_IT+0x234>)
 80117a0:	675a      	str	r2, [r3, #116]	; 0x74
 80117a2:	e002      	b.n	80117aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	4a46      	ldr	r2, [pc, #280]	; (80118c0 <UART_Start_Receive_IT+0x238>)
 80117a8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	691b      	ldr	r3, [r3, #16]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d01a      	beq.n	80117e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ba:	e853 3f00 	ldrex	r3, [r3]
 80117be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80117c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80117c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	461a      	mov	r2, r3
 80117d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80117d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80117d6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80117da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117dc:	e841 2300 	strex	r3, r2, [r1]
 80117e0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80117e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d1e4      	bne.n	80117b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	3308      	adds	r3, #8
 80117ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f2:	e853 3f00 	ldrex	r3, [r3]
 80117f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80117f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3308      	adds	r3, #8
 8011806:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011808:	64ba      	str	r2, [r7, #72]	; 0x48
 801180a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801180c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801180e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011810:	e841 2300 	strex	r3, r2, [r1]
 8011814:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011818:	2b00      	cmp	r3, #0
 801181a:	d1e5      	bne.n	80117e8 <UART_Start_Receive_IT+0x160>
 801181c:	e046      	b.n	80118ac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	689b      	ldr	r3, [r3, #8]
 8011822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011826:	d107      	bne.n	8011838 <UART_Start_Receive_IT+0x1b0>
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	691b      	ldr	r3, [r3, #16]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d103      	bne.n	8011838 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	4a24      	ldr	r2, [pc, #144]	; (80118c4 <UART_Start_Receive_IT+0x23c>)
 8011834:	675a      	str	r2, [r3, #116]	; 0x74
 8011836:	e002      	b.n	801183e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	4a23      	ldr	r2, [pc, #140]	; (80118c8 <UART_Start_Receive_IT+0x240>)
 801183c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	691b      	ldr	r3, [r3, #16]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d019      	beq.n	801187a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184e:	e853 3f00 	ldrex	r3, [r3]
 8011852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011856:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801185a:	677b      	str	r3, [r7, #116]	; 0x74
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	461a      	mov	r2, r3
 8011862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011864:	637b      	str	r3, [r7, #52]	; 0x34
 8011866:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801186a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801186c:	e841 2300 	strex	r3, r2, [r1]
 8011870:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011874:	2b00      	cmp	r3, #0
 8011876:	d1e6      	bne.n	8011846 <UART_Start_Receive_IT+0x1be>
 8011878:	e018      	b.n	80118ac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	e853 3f00 	ldrex	r3, [r3]
 8011886:	613b      	str	r3, [r7, #16]
   return(result);
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	f043 0320 	orr.w	r3, r3, #32
 801188e:	67bb      	str	r3, [r7, #120]	; 0x78
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	461a      	mov	r2, r3
 8011896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011898:	623b      	str	r3, [r7, #32]
 801189a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801189c:	69f9      	ldr	r1, [r7, #28]
 801189e:	6a3a      	ldr	r2, [r7, #32]
 80118a0:	e841 2300 	strex	r3, r2, [r1]
 80118a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80118a6:	69bb      	ldr	r3, [r7, #24]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d1e6      	bne.n	801187a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80118ac:	2300      	movs	r3, #0
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	378c      	adds	r7, #140	; 0x8c
 80118b2:	46bd      	mov	sp, r7
 80118b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	080122a1 	.word	0x080122a1
 80118c0:	08011f41 	.word	0x08011f41
 80118c4:	08011d89 	.word	0x08011d89
 80118c8:	08011bd1 	.word	0x08011bd1

080118cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b08f      	sub	sp, #60	; 0x3c
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118da:	6a3b      	ldr	r3, [r7, #32]
 80118dc:	e853 3f00 	ldrex	r3, [r3]
 80118e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80118e8:	637b      	str	r3, [r7, #52]	; 0x34
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	461a      	mov	r2, r3
 80118f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80118f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118fa:	e841 2300 	strex	r3, r2, [r1]
 80118fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011902:	2b00      	cmp	r3, #0
 8011904:	d1e6      	bne.n	80118d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	3308      	adds	r3, #8
 801190c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	e853 3f00 	ldrex	r3, [r3]
 8011914:	60bb      	str	r3, [r7, #8]
   return(result);
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801191c:	633b      	str	r3, [r7, #48]	; 0x30
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	3308      	adds	r3, #8
 8011924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011926:	61ba      	str	r2, [r7, #24]
 8011928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801192a:	6979      	ldr	r1, [r7, #20]
 801192c:	69ba      	ldr	r2, [r7, #24]
 801192e:	e841 2300 	strex	r3, r2, [r1]
 8011932:	613b      	str	r3, [r7, #16]
   return(result);
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d1e5      	bne.n	8011906 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2220      	movs	r2, #32
 801193e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011942:	bf00      	nop
 8011944:	373c      	adds	r7, #60	; 0x3c
 8011946:	46bd      	mov	sp, r7
 8011948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194c:	4770      	bx	lr
	...

08011950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011950:	b480      	push	{r7}
 8011952:	b095      	sub	sp, #84	; 0x54
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011960:	e853 3f00 	ldrex	r3, [r3]
 8011964:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801196c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	461a      	mov	r2, r3
 8011974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011976:	643b      	str	r3, [r7, #64]	; 0x40
 8011978:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801197a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801197c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801197e:	e841 2300 	strex	r3, r2, [r1]
 8011982:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011986:	2b00      	cmp	r3, #0
 8011988:	d1e6      	bne.n	8011958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	3308      	adds	r3, #8
 8011990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011992:	6a3b      	ldr	r3, [r7, #32]
 8011994:	e853 3f00 	ldrex	r3, [r3]
 8011998:	61fb      	str	r3, [r7, #28]
   return(result);
 801199a:	69fa      	ldr	r2, [r7, #28]
 801199c:	4b1e      	ldr	r3, [pc, #120]	; (8011a18 <UART_EndRxTransfer+0xc8>)
 801199e:	4013      	ands	r3, r2
 80119a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	3308      	adds	r3, #8
 80119a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80119aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80119ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119b2:	e841 2300 	strex	r3, r2, [r1]
 80119b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80119b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d1e5      	bne.n	801198a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d118      	bne.n	80119f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	e853 3f00 	ldrex	r3, [r3]
 80119d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	f023 0310 	bic.w	r3, r3, #16
 80119da:	647b      	str	r3, [r7, #68]	; 0x44
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	461a      	mov	r2, r3
 80119e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119e4:	61bb      	str	r3, [r7, #24]
 80119e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e8:	6979      	ldr	r1, [r7, #20]
 80119ea:	69ba      	ldr	r2, [r7, #24]
 80119ec:	e841 2300 	strex	r3, r2, [r1]
 80119f0:	613b      	str	r3, [r7, #16]
   return(result);
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d1e6      	bne.n	80119c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2220      	movs	r2, #32
 80119fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2200      	movs	r2, #0
 8011a04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011a0c:	bf00      	nop
 8011a0e:	3754      	adds	r7, #84	; 0x54
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr
 8011a18:	effffffe 	.word	0xeffffffe

08011a1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b090      	sub	sp, #64	; 0x40
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a28:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	69db      	ldr	r3, [r3, #28]
 8011a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a32:	d037      	beq.n	8011aa4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a36:	2200      	movs	r2, #0
 8011a38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	3308      	adds	r3, #8
 8011a42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a46:	e853 3f00 	ldrex	r3, [r3]
 8011a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8011a4c:	6a3b      	ldr	r3, [r7, #32]
 8011a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	3308      	adds	r3, #8
 8011a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a5c:	633a      	str	r2, [r7, #48]	; 0x30
 8011a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a64:	e841 2300 	strex	r3, r2, [r1]
 8011a68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d1e5      	bne.n	8011a3c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	e853 3f00 	ldrex	r3, [r3]
 8011a7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a84:	637b      	str	r3, [r7, #52]	; 0x34
 8011a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a8e:	61fb      	str	r3, [r7, #28]
 8011a90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a92:	69b9      	ldr	r1, [r7, #24]
 8011a94:	69fa      	ldr	r2, [r7, #28]
 8011a96:	e841 2300 	strex	r3, r2, [r1]
 8011a9a:	617b      	str	r3, [r7, #20]
   return(result);
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d1e6      	bne.n	8011a70 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011aa2:	e002      	b.n	8011aaa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011aa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011aa6:	f7f0 fa25 	bl	8001ef4 <HAL_UART_TxCpltCallback>
}
 8011aaa:	bf00      	nop
 8011aac:	3740      	adds	r7, #64	; 0x40
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}

08011ab2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011ab2:	b580      	push	{r7, lr}
 8011ab4:	b084      	sub	sp, #16
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011abe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011ac0:	68f8      	ldr	r0, [r7, #12]
 8011ac2:	f7fe fe9f 	bl	8010804 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ac6:	bf00      	nop
 8011ac8:	3710      	adds	r7, #16
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}

08011ace <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011ace:	b580      	push	{r7, lr}
 8011ad0:	b086      	sub	sp, #24
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ada:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ae2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011aea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	689b      	ldr	r3, [r3, #8]
 8011af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011af6:	2b80      	cmp	r3, #128	; 0x80
 8011af8:	d109      	bne.n	8011b0e <UART_DMAError+0x40>
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	2b21      	cmp	r3, #33	; 0x21
 8011afe:	d106      	bne.n	8011b0e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	2200      	movs	r2, #0
 8011b04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011b08:	6978      	ldr	r0, [r7, #20]
 8011b0a:	f7ff fedf 	bl	80118cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	689b      	ldr	r3, [r3, #8]
 8011b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b18:	2b40      	cmp	r3, #64	; 0x40
 8011b1a:	d109      	bne.n	8011b30 <UART_DMAError+0x62>
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2b22      	cmp	r3, #34	; 0x22
 8011b20:	d106      	bne.n	8011b30 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	2200      	movs	r2, #0
 8011b26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011b2a:	6978      	ldr	r0, [r7, #20]
 8011b2c:	f7ff ff10 	bl	8011950 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011b30:	697b      	ldr	r3, [r7, #20]
 8011b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b36:	f043 0210 	orr.w	r2, r3, #16
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011b40:	6978      	ldr	r0, [r7, #20]
 8011b42:	f7fe fe69 	bl	8010818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b46:	bf00      	nop
 8011b48:	3718      	adds	r7, #24
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}

08011b4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b4e:	b580      	push	{r7, lr}
 8011b50:	b084      	sub	sp, #16
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	2200      	movs	r2, #0
 8011b68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011b6c:	68f8      	ldr	r0, [r7, #12]
 8011b6e:	f7fe fe53 	bl	8010818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b72:	bf00      	nop
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}

08011b7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011b7a:	b580      	push	{r7, lr}
 8011b7c:	b088      	sub	sp, #32
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	e853 3f00 	ldrex	r3, [r3]
 8011b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b96:	61fb      	str	r3, [r7, #28]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	61bb      	str	r3, [r7, #24]
 8011ba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba4:	6979      	ldr	r1, [r7, #20]
 8011ba6:	69ba      	ldr	r2, [r7, #24]
 8011ba8:	e841 2300 	strex	r3, r2, [r1]
 8011bac:	613b      	str	r3, [r7, #16]
   return(result);
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d1e6      	bne.n	8011b82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2220      	movs	r2, #32
 8011bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7f0 f996 	bl	8001ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011bc8:	bf00      	nop
 8011bca:	3720      	adds	r7, #32
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b09c      	sub	sp, #112	; 0x70
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011bde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011be8:	2b22      	cmp	r3, #34	; 0x22
 8011bea:	f040 80be 	bne.w	8011d6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011bf8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011bfc:	b2d9      	uxtb	r1, r3
 8011bfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011c02:	b2da      	uxtb	r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c08:	400a      	ands	r2, r1
 8011c0a:	b2d2      	uxtb	r2, r2
 8011c0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c12:	1c5a      	adds	r2, r3, #1
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	3b01      	subs	r3, #1
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f040 80a1 	bne.w	8011d7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c40:	e853 3f00 	ldrex	r3, [r3]
 8011c44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	461a      	mov	r2, r3
 8011c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c56:	65bb      	str	r3, [r7, #88]	; 0x58
 8011c58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011c5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c5e:	e841 2300 	strex	r3, r2, [r1]
 8011c62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d1e6      	bne.n	8011c38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	3308      	adds	r3, #8
 8011c70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c74:	e853 3f00 	ldrex	r3, [r3]
 8011c78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c7c:	f023 0301 	bic.w	r3, r3, #1
 8011c80:	667b      	str	r3, [r7, #100]	; 0x64
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	3308      	adds	r3, #8
 8011c88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011c8a:	647a      	str	r2, [r7, #68]	; 0x44
 8011c8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c92:	e841 2300 	strex	r3, r2, [r1]
 8011c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d1e5      	bne.n	8011c6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2220      	movs	r2, #32
 8011ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	4a33      	ldr	r2, [pc, #204]	; (8011d84 <UART_RxISR_8BIT+0x1b4>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d01f      	beq.n	8011cfc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d018      	beq.n	8011cfc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd2:	e853 3f00 	ldrex	r3, [r3]
 8011cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8011cd8:	6a3b      	ldr	r3, [r7, #32]
 8011cda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011cde:	663b      	str	r3, [r7, #96]	; 0x60
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8011cea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cf0:	e841 2300 	strex	r3, r2, [r1]
 8011cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d1e6      	bne.n	8011cca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	d12e      	bne.n	8011d62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2200      	movs	r2, #0
 8011d08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	e853 3f00 	ldrex	r3, [r3]
 8011d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f023 0310 	bic.w	r3, r3, #16
 8011d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	461a      	mov	r2, r3
 8011d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d28:	61fb      	str	r3, [r7, #28]
 8011d2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d2c:	69b9      	ldr	r1, [r7, #24]
 8011d2e:	69fa      	ldr	r2, [r7, #28]
 8011d30:	e841 2300 	strex	r3, r2, [r1]
 8011d34:	617b      	str	r3, [r7, #20]
   return(result);
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d1e6      	bne.n	8011d0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	69db      	ldr	r3, [r3, #28]
 8011d42:	f003 0310 	and.w	r3, r3, #16
 8011d46:	2b10      	cmp	r3, #16
 8011d48:	d103      	bne.n	8011d52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	2210      	movs	r2, #16
 8011d50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011d58:	4619      	mov	r1, r3
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f7fe fd66 	bl	801082c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011d60:	e00b      	b.n	8011d7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f7ee fc74 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8011d68:	e007      	b.n	8011d7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	699a      	ldr	r2, [r3, #24]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f042 0208 	orr.w	r2, r2, #8
 8011d78:	619a      	str	r2, [r3, #24]
}
 8011d7a:	bf00      	nop
 8011d7c:	3770      	adds	r7, #112	; 0x70
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	58000c00 	.word	0x58000c00

08011d88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b09c      	sub	sp, #112	; 0x70
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011da0:	2b22      	cmp	r3, #34	; 0x22
 8011da2:	f040 80be 	bne.w	8011f22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011db4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011db6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011dba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	b29a      	uxth	r2, r3
 8011dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011dc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011dca:	1c9a      	adds	r2, r3, #2
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	3b01      	subs	r3, #1
 8011dda:	b29a      	uxth	r2, r3
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	f040 80a1 	bne.w	8011f32 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011df8:	e853 3f00 	ldrex	r3, [r3]
 8011dfc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e04:	667b      	str	r3, [r7, #100]	; 0x64
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e0e:	657b      	str	r3, [r7, #84]	; 0x54
 8011e10:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e16:	e841 2300 	strex	r3, r2, [r1]
 8011e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d1e6      	bne.n	8011df0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	3308      	adds	r3, #8
 8011e28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e2c:	e853 3f00 	ldrex	r3, [r3]
 8011e30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e34:	f023 0301 	bic.w	r3, r3, #1
 8011e38:	663b      	str	r3, [r7, #96]	; 0x60
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	3308      	adds	r3, #8
 8011e40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011e42:	643a      	str	r2, [r7, #64]	; 0x40
 8011e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e4a:	e841 2300 	strex	r3, r2, [r1]
 8011e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1e5      	bne.n	8011e22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2220      	movs	r2, #32
 8011e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2200      	movs	r2, #0
 8011e62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2200      	movs	r2, #0
 8011e68:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	4a33      	ldr	r2, [pc, #204]	; (8011f3c <UART_RxISR_16BIT+0x1b4>)
 8011e70:	4293      	cmp	r3, r2
 8011e72:	d01f      	beq.n	8011eb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d018      	beq.n	8011eb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e88:	6a3b      	ldr	r3, [r7, #32]
 8011e8a:	e853 3f00 	ldrex	r3, [r3]
 8011e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e90:	69fb      	ldr	r3, [r7, #28]
 8011e92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ea2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ea8:	e841 2300 	strex	r3, r2, [r1]
 8011eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d1e6      	bne.n	8011e82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	d12e      	bne.n	8011f1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	e853 3f00 	ldrex	r3, [r3]
 8011ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	f023 0310 	bic.w	r3, r3, #16
 8011ed6:	65bb      	str	r3, [r7, #88]	; 0x58
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	461a      	mov	r2, r3
 8011ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ee0:	61bb      	str	r3, [r7, #24]
 8011ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ee4:	6979      	ldr	r1, [r7, #20]
 8011ee6:	69ba      	ldr	r2, [r7, #24]
 8011ee8:	e841 2300 	strex	r3, r2, [r1]
 8011eec:	613b      	str	r3, [r7, #16]
   return(result);
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d1e6      	bne.n	8011ec2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	69db      	ldr	r3, [r3, #28]
 8011efa:	f003 0310 	and.w	r3, r3, #16
 8011efe:	2b10      	cmp	r3, #16
 8011f00:	d103      	bne.n	8011f0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	2210      	movs	r2, #16
 8011f08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f10:	4619      	mov	r1, r3
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f7fe fc8a 	bl	801082c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011f18:	e00b      	b.n	8011f32 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f7ee fb98 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8011f20:	e007      	b.n	8011f32 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	699a      	ldr	r2, [r3, #24]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	f042 0208 	orr.w	r2, r2, #8
 8011f30:	619a      	str	r2, [r3, #24]
}
 8011f32:	bf00      	nop
 8011f34:	3770      	adds	r7, #112	; 0x70
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	58000c00 	.word	0x58000c00

08011f40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b0ac      	sub	sp, #176	; 0xb0
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	69db      	ldr	r3, [r3, #28]
 8011f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f76:	2b22      	cmp	r3, #34	; 0x22
 8011f78:	f040 8180 	bne.w	801227c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011f82:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011f86:	e123      	b.n	80121d0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f8e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011f92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011f96:	b2d9      	uxtb	r1, r3
 8011f98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011f9c:	b2da      	uxtb	r2, r3
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fa2:	400a      	ands	r2, r1
 8011fa4:	b2d2      	uxtb	r2, r2
 8011fa6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fac:	1c5a      	adds	r2, r3, #1
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	3b01      	subs	r3, #1
 8011fbc:	b29a      	uxth	r2, r3
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	69db      	ldr	r3, [r3, #28]
 8011fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011fd2:	f003 0307 	and.w	r3, r3, #7
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d053      	beq.n	8012082 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011fde:	f003 0301 	and.w	r3, r3, #1
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d011      	beq.n	801200a <UART_RxISR_8BIT_FIFOEN+0xca>
 8011fe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00b      	beq.n	801200a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012000:	f043 0201 	orr.w	r2, r3, #1
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801200a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801200e:	f003 0302 	and.w	r3, r3, #2
 8012012:	2b00      	cmp	r3, #0
 8012014:	d011      	beq.n	801203a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801201a:	f003 0301 	and.w	r3, r3, #1
 801201e:	2b00      	cmp	r3, #0
 8012020:	d00b      	beq.n	801203a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	2202      	movs	r2, #2
 8012028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012030:	f043 0204 	orr.w	r2, r3, #4
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801203a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801203e:	f003 0304 	and.w	r3, r3, #4
 8012042:	2b00      	cmp	r3, #0
 8012044:	d011      	beq.n	801206a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801204a:	f003 0301 	and.w	r3, r3, #1
 801204e:	2b00      	cmp	r3, #0
 8012050:	d00b      	beq.n	801206a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	2204      	movs	r2, #4
 8012058:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012060:	f043 0202 	orr.w	r2, r3, #2
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012070:	2b00      	cmp	r3, #0
 8012072:	d006      	beq.n	8012082 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7fe fbcf 	bl	8010818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2200      	movs	r2, #0
 801207e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012088:	b29b      	uxth	r3, r3
 801208a:	2b00      	cmp	r3, #0
 801208c:	f040 80a0 	bne.w	80121d0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012098:	e853 3f00 	ldrex	r3, [r3]
 801209c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801209e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	461a      	mov	r2, r3
 80120ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80120b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80120b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80120b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80120ba:	e841 2300 	strex	r3, r2, [r1]
 80120be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80120c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d1e4      	bne.n	8012090 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	3308      	adds	r3, #8
 80120cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120d0:	e853 3f00 	ldrex	r3, [r3]
 80120d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80120d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120d8:	4b6e      	ldr	r3, [pc, #440]	; (8012294 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80120da:	4013      	ands	r3, r2
 80120dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	3308      	adds	r3, #8
 80120e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80120ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80120ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80120f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80120f2:	e841 2300 	strex	r3, r2, [r1]
 80120f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80120f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d1e3      	bne.n	80120c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2220      	movs	r2, #32
 8012102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2200      	movs	r2, #0
 801210a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2200      	movs	r2, #0
 8012110:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	4a60      	ldr	r2, [pc, #384]	; (8012298 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012118:	4293      	cmp	r3, r2
 801211a:	d021      	beq.n	8012160 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012126:	2b00      	cmp	r3, #0
 8012128:	d01a      	beq.n	8012160 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012132:	e853 3f00 	ldrex	r3, [r3]
 8012136:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801213a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801213e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	461a      	mov	r2, r3
 8012148:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801214c:	657b      	str	r3, [r7, #84]	; 0x54
 801214e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012150:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012152:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012154:	e841 2300 	strex	r3, r2, [r1]
 8012158:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801215a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801215c:	2b00      	cmp	r3, #0
 801215e:	d1e4      	bne.n	801212a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012164:	2b01      	cmp	r3, #1
 8012166:	d130      	bne.n	80121ca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2200      	movs	r2, #0
 801216c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012176:	e853 3f00 	ldrex	r3, [r3]
 801217a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217e:	f023 0310 	bic.w	r3, r3, #16
 8012182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	461a      	mov	r2, r3
 801218c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012190:	643b      	str	r3, [r7, #64]	; 0x40
 8012192:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012194:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012198:	e841 2300 	strex	r3, r2, [r1]
 801219c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d1e4      	bne.n	801216e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	69db      	ldr	r3, [r3, #28]
 80121aa:	f003 0310 	and.w	r3, r3, #16
 80121ae:	2b10      	cmp	r3, #16
 80121b0:	d103      	bne.n	80121ba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	2210      	movs	r2, #16
 80121b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80121c0:	4619      	mov	r1, r3
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f7fe fb32 	bl	801082c <HAL_UARTEx_RxEventCallback>
 80121c8:	e002      	b.n	80121d0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7ee fa40 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d006      	beq.n	80121e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80121d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80121dc:	f003 0320 	and.w	r3, r3, #32
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	f47f aed1 	bne.w	8011f88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80121f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d049      	beq.n	801228c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80121fe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012202:	429a      	cmp	r2, r3
 8012204:	d242      	bcs.n	801228c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	3308      	adds	r3, #8
 801220c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801220e:	6a3b      	ldr	r3, [r7, #32]
 8012210:	e853 3f00 	ldrex	r3, [r3]
 8012214:	61fb      	str	r3, [r7, #28]
   return(result);
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801221c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	3308      	adds	r3, #8
 8012226:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801222a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801222c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801222e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012232:	e841 2300 	strex	r3, r2, [r1]
 8012236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223a:	2b00      	cmp	r3, #0
 801223c:	d1e3      	bne.n	8012206 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	4a16      	ldr	r2, [pc, #88]	; (801229c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012242:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	e853 3f00 	ldrex	r3, [r3]
 8012250:	60bb      	str	r3, [r7, #8]
   return(result);
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	f043 0320 	orr.w	r3, r3, #32
 8012258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	461a      	mov	r2, r3
 8012262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012266:	61bb      	str	r3, [r7, #24]
 8012268:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801226a:	6979      	ldr	r1, [r7, #20]
 801226c:	69ba      	ldr	r2, [r7, #24]
 801226e:	e841 2300 	strex	r3, r2, [r1]
 8012272:	613b      	str	r3, [r7, #16]
   return(result);
 8012274:	693b      	ldr	r3, [r7, #16]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d1e4      	bne.n	8012244 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801227a:	e007      	b.n	801228c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	699a      	ldr	r2, [r3, #24]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f042 0208 	orr.w	r2, r2, #8
 801228a:	619a      	str	r2, [r3, #24]
}
 801228c:	bf00      	nop
 801228e:	37b0      	adds	r7, #176	; 0xb0
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}
 8012294:	effffffe 	.word	0xeffffffe
 8012298:	58000c00 	.word	0x58000c00
 801229c:	08011bd1 	.word	0x08011bd1

080122a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b0ae      	sub	sp, #184	; 0xb8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	69db      	ldr	r3, [r3, #28]
 80122b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	689b      	ldr	r3, [r3, #8]
 80122cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80122d6:	2b22      	cmp	r3, #34	; 0x22
 80122d8:	f040 8184 	bne.w	80125e4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80122e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80122e6:	e127      	b.n	8012538 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80122fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80122fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012302:	4013      	ands	r3, r2
 8012304:	b29a      	uxth	r2, r3
 8012306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801230a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012310:	1c9a      	adds	r2, r3, #2
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801231c:	b29b      	uxth	r3, r3
 801231e:	3b01      	subs	r3, #1
 8012320:	b29a      	uxth	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	69db      	ldr	r3, [r3, #28]
 801232e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012336:	f003 0307 	and.w	r3, r3, #7
 801233a:	2b00      	cmp	r3, #0
 801233c:	d053      	beq.n	80123e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801233e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012342:	f003 0301 	and.w	r3, r3, #1
 8012346:	2b00      	cmp	r3, #0
 8012348:	d011      	beq.n	801236e <UART_RxISR_16BIT_FIFOEN+0xce>
 801234a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012352:	2b00      	cmp	r3, #0
 8012354:	d00b      	beq.n	801236e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	2201      	movs	r2, #1
 801235c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012364:	f043 0201 	orr.w	r2, r3, #1
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801236e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012372:	f003 0302 	and.w	r3, r3, #2
 8012376:	2b00      	cmp	r3, #0
 8012378:	d011      	beq.n	801239e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801237a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801237e:	f003 0301 	and.w	r3, r3, #1
 8012382:	2b00      	cmp	r3, #0
 8012384:	d00b      	beq.n	801239e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	2202      	movs	r2, #2
 801238c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012394:	f043 0204 	orr.w	r2, r3, #4
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801239e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80123a2:	f003 0304 	and.w	r3, r3, #4
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d011      	beq.n	80123ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80123aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80123ae:	f003 0301 	and.w	r3, r3, #1
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d00b      	beq.n	80123ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	2204      	movs	r2, #4
 80123bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123c4:	f043 0202 	orr.w	r2, r3, #2
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d006      	beq.n	80123e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f7fe fa1d 	bl	8010818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2200      	movs	r2, #0
 80123e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	f040 80a2 	bne.w	8012538 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80123fc:	e853 3f00 	ldrex	r3, [r3]
 8012400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	461a      	mov	r2, r3
 8012412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801241a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801241c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801241e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012422:	e841 2300 	strex	r3, r2, [r1]
 8012426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801242a:	2b00      	cmp	r3, #0
 801242c:	d1e2      	bne.n	80123f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	3308      	adds	r3, #8
 8012434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012438:	e853 3f00 	ldrex	r3, [r3]
 801243c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801243e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012440:	4b6e      	ldr	r3, [pc, #440]	; (80125fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012442:	4013      	ands	r3, r2
 8012444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	3308      	adds	r3, #8
 801244e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801245a:	e841 2300 	strex	r3, r2, [r1]
 801245e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012462:	2b00      	cmp	r3, #0
 8012464:	d1e3      	bne.n	801242e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2220      	movs	r2, #32
 801246a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2200      	movs	r2, #0
 8012472:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	4a60      	ldr	r2, [pc, #384]	; (8012600 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012480:	4293      	cmp	r3, r2
 8012482:	d021      	beq.n	80124c8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801248e:	2b00      	cmp	r3, #0
 8012490:	d01a      	beq.n	80124c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801249a:	e853 3f00 	ldrex	r3, [r3]
 801249e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80124a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80124a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	461a      	mov	r2, r3
 80124b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80124b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80124b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80124ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80124bc:	e841 2300 	strex	r3, r2, [r1]
 80124c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80124c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d1e4      	bne.n	8012492 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	d130      	bne.n	8012532 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2200      	movs	r2, #0
 80124d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124de:	e853 3f00 	ldrex	r3, [r3]
 80124e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80124e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124e6:	f023 0310 	bic.w	r3, r3, #16
 80124ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	461a      	mov	r2, r3
 80124f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80124f8:	647b      	str	r3, [r7, #68]	; 0x44
 80124fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80124fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012500:	e841 2300 	strex	r3, r2, [r1]
 8012504:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012508:	2b00      	cmp	r3, #0
 801250a:	d1e4      	bne.n	80124d6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	69db      	ldr	r3, [r3, #28]
 8012512:	f003 0310 	and.w	r3, r3, #16
 8012516:	2b10      	cmp	r3, #16
 8012518:	d103      	bne.n	8012522 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2210      	movs	r2, #16
 8012520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012528:	4619      	mov	r1, r3
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7fe f97e 	bl	801082c <HAL_UARTEx_RxEventCallback>
 8012530:	e002      	b.n	8012538 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f7ee f88c 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012538:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801253c:	2b00      	cmp	r3, #0
 801253e:	d006      	beq.n	801254e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012544:	f003 0320 	and.w	r3, r3, #32
 8012548:	2b00      	cmp	r3, #0
 801254a:	f47f aecd 	bne.w	80122e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012554:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012558:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801255c:	2b00      	cmp	r3, #0
 801255e:	d049      	beq.n	80125f4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012566:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801256a:	429a      	cmp	r2, r3
 801256c:	d242      	bcs.n	80125f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	3308      	adds	r3, #8
 8012574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012578:	e853 3f00 	ldrex	r3, [r3]
 801257c:	623b      	str	r3, [r7, #32]
   return(result);
 801257e:	6a3b      	ldr	r3, [r7, #32]
 8012580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	3308      	adds	r3, #8
 801258e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012592:	633a      	str	r2, [r7, #48]	; 0x30
 8012594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801259a:	e841 2300 	strex	r3, r2, [r1]
 801259e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80125a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d1e3      	bne.n	801256e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	4a16      	ldr	r2, [pc, #88]	; (8012604 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80125aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	e853 3f00 	ldrex	r3, [r3]
 80125b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f043 0320 	orr.w	r3, r3, #32
 80125c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	461a      	mov	r2, r3
 80125ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80125ce:	61fb      	str	r3, [r7, #28]
 80125d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125d2:	69b9      	ldr	r1, [r7, #24]
 80125d4:	69fa      	ldr	r2, [r7, #28]
 80125d6:	e841 2300 	strex	r3, r2, [r1]
 80125da:	617b      	str	r3, [r7, #20]
   return(result);
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1e4      	bne.n	80125ac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80125e2:	e007      	b.n	80125f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	699a      	ldr	r2, [r3, #24]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	f042 0208 	orr.w	r2, r2, #8
 80125f2:	619a      	str	r2, [r3, #24]
}
 80125f4:	bf00      	nop
 80125f6:	37b8      	adds	r7, #184	; 0xb8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}
 80125fc:	effffffe 	.word	0xeffffffe
 8012600:	58000c00 	.word	0x58000c00
 8012604:	08011d89 	.word	0x08011d89

08012608 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012608:	b480      	push	{r7}
 801260a:	b083      	sub	sp, #12
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012610:	bf00      	nop
 8012612:	370c      	adds	r7, #12
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr

0801261c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012624:	bf00      	nop
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr

08012630 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012638:	bf00      	nop
 801263a:	370c      	adds	r7, #12
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr

08012644 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012644:	b480      	push	{r7}
 8012646:	b085      	sub	sp, #20
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012652:	2b01      	cmp	r3, #1
 8012654:	d101      	bne.n	801265a <HAL_UARTEx_DisableFifoMode+0x16>
 8012656:	2302      	movs	r3, #2
 8012658:	e027      	b.n	80126aa <HAL_UARTEx_DisableFifoMode+0x66>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	2201      	movs	r2, #1
 801265e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2224      	movs	r2, #36	; 0x24
 8012666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f022 0201 	bic.w	r2, r2, #1
 8012680:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012688:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2200      	movs	r2, #0
 801268e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	68fa      	ldr	r2, [r7, #12]
 8012696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2220      	movs	r2, #32
 801269c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2200      	movs	r2, #0
 80126a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80126a8:	2300      	movs	r3, #0
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3714      	adds	r7, #20
 80126ae:	46bd      	mov	sp, r7
 80126b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b4:	4770      	bx	lr

080126b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80126b6:	b580      	push	{r7, lr}
 80126b8:	b084      	sub	sp, #16
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]
 80126be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80126c6:	2b01      	cmp	r3, #1
 80126c8:	d101      	bne.n	80126ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80126ca:	2302      	movs	r3, #2
 80126cc:	e02d      	b.n	801272a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2201      	movs	r2, #1
 80126d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2224      	movs	r2, #36	; 0x24
 80126da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	f022 0201 	bic.w	r2, r2, #1
 80126f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	689b      	ldr	r3, [r3, #8]
 80126fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	683a      	ldr	r2, [r7, #0]
 8012706:	430a      	orrs	r2, r1
 8012708:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 f850 	bl	80127b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	68fa      	ldr	r2, [r7, #12]
 8012716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2220      	movs	r2, #32
 801271c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2200      	movs	r2, #0
 8012724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012728:	2300      	movs	r3, #0
}
 801272a:	4618      	mov	r0, r3
 801272c:	3710      	adds	r7, #16
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}

08012732 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012732:	b580      	push	{r7, lr}
 8012734:	b084      	sub	sp, #16
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
 801273a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012742:	2b01      	cmp	r3, #1
 8012744:	d101      	bne.n	801274a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012746:	2302      	movs	r3, #2
 8012748:	e02d      	b.n	80127a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2201      	movs	r2, #1
 801274e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2224      	movs	r2, #36	; 0x24
 8012756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f022 0201 	bic.w	r2, r2, #1
 8012770:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	689b      	ldr	r3, [r3, #8]
 8012778:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	683a      	ldr	r2, [r7, #0]
 8012782:	430a      	orrs	r2, r1
 8012784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f000 f812 	bl	80127b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	68fa      	ldr	r2, [r7, #12]
 8012792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2220      	movs	r2, #32
 8012798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2200      	movs	r2, #0
 80127a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80127a4:	2300      	movs	r3, #0
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3710      	adds	r7, #16
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
	...

080127b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80127b0:	b480      	push	{r7}
 80127b2:	b085      	sub	sp, #20
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d108      	bne.n	80127d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2201      	movs	r2, #1
 80127c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2201      	movs	r2, #1
 80127cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80127d0:	e031      	b.n	8012836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80127d2:	2310      	movs	r3, #16
 80127d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80127d6:	2310      	movs	r3, #16
 80127d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	689b      	ldr	r3, [r3, #8]
 80127e0:	0e5b      	lsrs	r3, r3, #25
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	f003 0307 	and.w	r3, r3, #7
 80127e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	689b      	ldr	r3, [r3, #8]
 80127f0:	0f5b      	lsrs	r3, r3, #29
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	f003 0307 	and.w	r3, r3, #7
 80127f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80127fa:	7bbb      	ldrb	r3, [r7, #14]
 80127fc:	7b3a      	ldrb	r2, [r7, #12]
 80127fe:	4911      	ldr	r1, [pc, #68]	; (8012844 <UARTEx_SetNbDataToProcess+0x94>)
 8012800:	5c8a      	ldrb	r2, [r1, r2]
 8012802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012806:	7b3a      	ldrb	r2, [r7, #12]
 8012808:	490f      	ldr	r1, [pc, #60]	; (8012848 <UARTEx_SetNbDataToProcess+0x98>)
 801280a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801280c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012810:	b29a      	uxth	r2, r3
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012818:	7bfb      	ldrb	r3, [r7, #15]
 801281a:	7b7a      	ldrb	r2, [r7, #13]
 801281c:	4909      	ldr	r1, [pc, #36]	; (8012844 <UARTEx_SetNbDataToProcess+0x94>)
 801281e:	5c8a      	ldrb	r2, [r1, r2]
 8012820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012824:	7b7a      	ldrb	r2, [r7, #13]
 8012826:	4908      	ldr	r1, [pc, #32]	; (8012848 <UARTEx_SetNbDataToProcess+0x98>)
 8012828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801282a:	fb93 f3f2 	sdiv	r3, r3, r2
 801282e:	b29a      	uxth	r2, r3
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012836:	bf00      	nop
 8012838:	3714      	adds	r7, #20
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr
 8012842:	bf00      	nop
 8012844:	08016fb0 	.word	0x08016fb0
 8012848:	08016fb8 	.word	0x08016fb8

0801284c <__NVIC_SetPriority>:
{
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	4603      	mov	r3, r0
 8012854:	6039      	str	r1, [r7, #0]
 8012856:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801285c:	2b00      	cmp	r3, #0
 801285e:	db0a      	blt.n	8012876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	b2da      	uxtb	r2, r3
 8012864:	490c      	ldr	r1, [pc, #48]	; (8012898 <__NVIC_SetPriority+0x4c>)
 8012866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801286a:	0112      	lsls	r2, r2, #4
 801286c:	b2d2      	uxtb	r2, r2
 801286e:	440b      	add	r3, r1
 8012870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012874:	e00a      	b.n	801288c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	b2da      	uxtb	r2, r3
 801287a:	4908      	ldr	r1, [pc, #32]	; (801289c <__NVIC_SetPriority+0x50>)
 801287c:	88fb      	ldrh	r3, [r7, #6]
 801287e:	f003 030f 	and.w	r3, r3, #15
 8012882:	3b04      	subs	r3, #4
 8012884:	0112      	lsls	r2, r2, #4
 8012886:	b2d2      	uxtb	r2, r2
 8012888:	440b      	add	r3, r1
 801288a:	761a      	strb	r2, [r3, #24]
}
 801288c:	bf00      	nop
 801288e:	370c      	adds	r7, #12
 8012890:	46bd      	mov	sp, r7
 8012892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012896:	4770      	bx	lr
 8012898:	e000e100 	.word	0xe000e100
 801289c:	e000ed00 	.word	0xe000ed00

080128a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80128a0:	b580      	push	{r7, lr}
 80128a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80128a4:	4b05      	ldr	r3, [pc, #20]	; (80128bc <SysTick_Handler+0x1c>)
 80128a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80128a8:	f002 fbba 	bl	8015020 <xTaskGetSchedulerState>
 80128ac:	4603      	mov	r3, r0
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	d001      	beq.n	80128b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80128b2:	f003 f9d9 	bl	8015c68 <xPortSysTickHandler>
  }
}
 80128b6:	bf00      	nop
 80128b8:	bd80      	pop	{r7, pc}
 80128ba:	bf00      	nop
 80128bc:	e000e010 	.word	0xe000e010

080128c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80128c0:	b580      	push	{r7, lr}
 80128c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80128c4:	2100      	movs	r1, #0
 80128c6:	f06f 0004 	mvn.w	r0, #4
 80128ca:	f7ff ffbf 	bl	801284c <__NVIC_SetPriority>
#endif
}
 80128ce:	bf00      	nop
 80128d0:	bd80      	pop	{r7, pc}
	...

080128d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128da:	f3ef 8305 	mrs	r3, IPSR
 80128de:	603b      	str	r3, [r7, #0]
  return(result);
 80128e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d003      	beq.n	80128ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80128e6:	f06f 0305 	mvn.w	r3, #5
 80128ea:	607b      	str	r3, [r7, #4]
 80128ec:	e00c      	b.n	8012908 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80128ee:	4b0a      	ldr	r3, [pc, #40]	; (8012918 <osKernelInitialize+0x44>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d105      	bne.n	8012902 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80128f6:	4b08      	ldr	r3, [pc, #32]	; (8012918 <osKernelInitialize+0x44>)
 80128f8:	2201      	movs	r2, #1
 80128fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80128fc:	2300      	movs	r3, #0
 80128fe:	607b      	str	r3, [r7, #4]
 8012900:	e002      	b.n	8012908 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012908:	687b      	ldr	r3, [r7, #4]
}
 801290a:	4618      	mov	r0, r3
 801290c:	370c      	adds	r7, #12
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	240010cc 	.word	0x240010cc

0801291c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012922:	f3ef 8305 	mrs	r3, IPSR
 8012926:	603b      	str	r3, [r7, #0]
  return(result);
 8012928:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801292a:	2b00      	cmp	r3, #0
 801292c:	d003      	beq.n	8012936 <osKernelStart+0x1a>
    stat = osErrorISR;
 801292e:	f06f 0305 	mvn.w	r3, #5
 8012932:	607b      	str	r3, [r7, #4]
 8012934:	e010      	b.n	8012958 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012936:	4b0b      	ldr	r3, [pc, #44]	; (8012964 <osKernelStart+0x48>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	2b01      	cmp	r3, #1
 801293c:	d109      	bne.n	8012952 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801293e:	f7ff ffbf 	bl	80128c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012942:	4b08      	ldr	r3, [pc, #32]	; (8012964 <osKernelStart+0x48>)
 8012944:	2202      	movs	r2, #2
 8012946:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012948:	f001 fe84 	bl	8014654 <vTaskStartScheduler>
      stat = osOK;
 801294c:	2300      	movs	r3, #0
 801294e:	607b      	str	r3, [r7, #4]
 8012950:	e002      	b.n	8012958 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012956:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012958:	687b      	ldr	r3, [r7, #4]
}
 801295a:	4618      	mov	r0, r3
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	240010cc 	.word	0x240010cc

08012968 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012968:	b580      	push	{r7, lr}
 801296a:	b08e      	sub	sp, #56	; 0x38
 801296c:	af04      	add	r7, sp, #16
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012974:	2300      	movs	r3, #0
 8012976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012978:	f3ef 8305 	mrs	r3, IPSR
 801297c:	617b      	str	r3, [r7, #20]
  return(result);
 801297e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012980:	2b00      	cmp	r3, #0
 8012982:	d17e      	bne.n	8012a82 <osThreadNew+0x11a>
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d07b      	beq.n	8012a82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801298a:	2380      	movs	r3, #128	; 0x80
 801298c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801298e:	2318      	movs	r3, #24
 8012990:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012992:	2300      	movs	r3, #0
 8012994:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801299a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d045      	beq.n	8012a2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d002      	beq.n	80129b0 <osThreadNew+0x48>
        name = attr->name;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	699b      	ldr	r3, [r3, #24]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d002      	beq.n	80129be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	699b      	ldr	r3, [r3, #24]
 80129bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80129be:	69fb      	ldr	r3, [r7, #28]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d008      	beq.n	80129d6 <osThreadNew+0x6e>
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	2b38      	cmp	r3, #56	; 0x38
 80129c8:	d805      	bhi.n	80129d6 <osThreadNew+0x6e>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	f003 0301 	and.w	r3, r3, #1
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d001      	beq.n	80129da <osThreadNew+0x72>
        return (NULL);
 80129d6:	2300      	movs	r3, #0
 80129d8:	e054      	b.n	8012a84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	695b      	ldr	r3, [r3, #20]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d003      	beq.n	80129ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	695b      	ldr	r3, [r3, #20]
 80129e6:	089b      	lsrs	r3, r3, #2
 80129e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	689b      	ldr	r3, [r3, #8]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d00e      	beq.n	8012a10 <osThreadNew+0xa8>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	68db      	ldr	r3, [r3, #12]
 80129f6:	2b5b      	cmp	r3, #91	; 0x5b
 80129f8:	d90a      	bls.n	8012a10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d006      	beq.n	8012a10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	695b      	ldr	r3, [r3, #20]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d002      	beq.n	8012a10 <osThreadNew+0xa8>
        mem = 1;
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	61bb      	str	r3, [r7, #24]
 8012a0e:	e010      	b.n	8012a32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	689b      	ldr	r3, [r3, #8]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d10c      	bne.n	8012a32 <osThreadNew+0xca>
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d108      	bne.n	8012a32 <osThreadNew+0xca>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	691b      	ldr	r3, [r3, #16]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d104      	bne.n	8012a32 <osThreadNew+0xca>
          mem = 0;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	61bb      	str	r3, [r7, #24]
 8012a2c:	e001      	b.n	8012a32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012a32:	69bb      	ldr	r3, [r7, #24]
 8012a34:	2b01      	cmp	r3, #1
 8012a36:	d110      	bne.n	8012a5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012a3c:	687a      	ldr	r2, [r7, #4]
 8012a3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012a40:	9202      	str	r2, [sp, #8]
 8012a42:	9301      	str	r3, [sp, #4]
 8012a44:	69fb      	ldr	r3, [r7, #28]
 8012a46:	9300      	str	r3, [sp, #0]
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	6a3a      	ldr	r2, [r7, #32]
 8012a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a4e:	68f8      	ldr	r0, [r7, #12]
 8012a50:	f001 fb10 	bl	8014074 <xTaskCreateStatic>
 8012a54:	4603      	mov	r3, r0
 8012a56:	613b      	str	r3, [r7, #16]
 8012a58:	e013      	b.n	8012a82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012a5a:	69bb      	ldr	r3, [r7, #24]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d110      	bne.n	8012a82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012a60:	6a3b      	ldr	r3, [r7, #32]
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	f107 0310 	add.w	r3, r7, #16
 8012a68:	9301      	str	r3, [sp, #4]
 8012a6a:	69fb      	ldr	r3, [r7, #28]
 8012a6c:	9300      	str	r3, [sp, #0]
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a72:	68f8      	ldr	r0, [r7, #12]
 8012a74:	f001 fb5b 	bl	801412e <xTaskCreate>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	2b01      	cmp	r3, #1
 8012a7c:	d001      	beq.n	8012a82 <osThreadNew+0x11a>
            hTask = NULL;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012a82:	693b      	ldr	r3, [r7, #16]
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	3728      	adds	r7, #40	; 0x28
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a92:	f3ef 8305 	mrs	r3, IPSR
 8012a96:	603b      	str	r3, [r7, #0]
  return(result);
 8012a98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d003      	beq.n	8012aa6 <osThreadYield+0x1a>
    stat = osErrorISR;
 8012a9e:	f06f 0305 	mvn.w	r3, #5
 8012aa2:	607b      	str	r3, [r7, #4]
 8012aa4:	e009      	b.n	8012aba <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012aaa:	4b07      	ldr	r3, [pc, #28]	; (8012ac8 <osThreadYield+0x3c>)
 8012aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ab0:	601a      	str	r2, [r3, #0]
 8012ab2:	f3bf 8f4f 	dsb	sy
 8012ab6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012aba:	687b      	ldr	r3, [r7, #4]
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	370c      	adds	r7, #12
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr
 8012ac8:	e000ed04 	.word	0xe000ed04

08012acc <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b086      	sub	sp, #24
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ad8:	f3ef 8305 	mrs	r3, IPSR
 8012adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ade:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d003      	beq.n	8012aec <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012ae4:	f06f 0305 	mvn.w	r3, #5
 8012ae8:	617b      	str	r3, [r7, #20]
 8012aea:	e00b      	b.n	8012b04 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d103      	bne.n	8012afa <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012af2:	f06f 0303 	mvn.w	r3, #3
 8012af6:	617b      	str	r3, [r7, #20]
 8012af8:	e004      	b.n	8012b04 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012afa:	2300      	movs	r3, #0
 8012afc:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012afe:	6938      	ldr	r0, [r7, #16]
 8012b00:	f001 fc8e 	bl	8014420 <vTaskSuspend>
  }

  return (stat);
 8012b04:	697b      	ldr	r3, [r7, #20]
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	3718      	adds	r7, #24
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bd80      	pop	{r7, pc}

08012b0e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012b0e:	b580      	push	{r7, lr}
 8012b10:	b084      	sub	sp, #16
 8012b12:	af00      	add	r7, sp, #0
 8012b14:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b16:	f3ef 8305 	mrs	r3, IPSR
 8012b1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8012b1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d003      	beq.n	8012b2a <osDelay+0x1c>
    stat = osErrorISR;
 8012b22:	f06f 0305 	mvn.w	r3, #5
 8012b26:	60fb      	str	r3, [r7, #12]
 8012b28:	e007      	b.n	8012b3a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d002      	beq.n	8012b3a <osDelay+0x2c>
      vTaskDelay(ticks);
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f001 fc3f 	bl	80143b8 <vTaskDelay>
    }
  }

  return (stat);
 8012b3a:	68fb      	ldr	r3, [r7, #12]
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3710      	adds	r7, #16
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b086      	sub	sp, #24
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b50:	f3ef 8305 	mrs	r3, IPSR
 8012b54:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b56:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d12d      	bne.n	8012bb8 <osEventFlagsNew+0x74>
    mem = -1;
 8012b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b60:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d015      	beq.n	8012b94 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	689b      	ldr	r3, [r3, #8]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d006      	beq.n	8012b7e <osEventFlagsNew+0x3a>
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	2b1f      	cmp	r3, #31
 8012b76:	d902      	bls.n	8012b7e <osEventFlagsNew+0x3a>
        mem = 1;
 8012b78:	2301      	movs	r3, #1
 8012b7a:	613b      	str	r3, [r7, #16]
 8012b7c:	e00c      	b.n	8012b98 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	689b      	ldr	r3, [r3, #8]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d108      	bne.n	8012b98 <osEventFlagsNew+0x54>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	68db      	ldr	r3, [r3, #12]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d104      	bne.n	8012b98 <osEventFlagsNew+0x54>
          mem = 0;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	613b      	str	r3, [r7, #16]
 8012b92:	e001      	b.n	8012b98 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012b94:	2300      	movs	r3, #0
 8012b96:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	2b01      	cmp	r3, #1
 8012b9c:	d106      	bne.n	8012bac <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	689b      	ldr	r3, [r3, #8]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f000 fa1e 	bl	8012fe4 <xEventGroupCreateStatic>
 8012ba8:	6178      	str	r0, [r7, #20]
 8012baa:	e005      	b.n	8012bb8 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d102      	bne.n	8012bb8 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012bb2:	f000 fa4e 	bl	8013052 <xEventGroupCreate>
 8012bb6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012bb8:	697b      	ldr	r3, [r7, #20]
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3718      	adds	r7, #24
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
	...

08012bc4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012bd2:	693b      	ldr	r3, [r7, #16]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d004      	beq.n	8012be2 <osEventFlagsSet+0x1e>
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d003      	beq.n	8012bea <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012be2:	f06f 0303 	mvn.w	r3, #3
 8012be6:	617b      	str	r3, [r7, #20]
 8012be8:	e028      	b.n	8012c3c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bea:	f3ef 8305 	mrs	r3, IPSR
 8012bee:	60fb      	str	r3, [r7, #12]
  return(result);
 8012bf0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d01d      	beq.n	8012c32 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012bfa:	f107 0308 	add.w	r3, r7, #8
 8012bfe:	461a      	mov	r2, r3
 8012c00:	6839      	ldr	r1, [r7, #0]
 8012c02:	6938      	ldr	r0, [r7, #16]
 8012c04:	f000 fbc8 	bl	8013398 <xEventGroupSetBitsFromISR>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d103      	bne.n	8012c16 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012c0e:	f06f 0302 	mvn.w	r3, #2
 8012c12:	617b      	str	r3, [r7, #20]
 8012c14:	e012      	b.n	8012c3c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d00d      	beq.n	8012c3c <osEventFlagsSet+0x78>
 8012c20:	4b09      	ldr	r3, [pc, #36]	; (8012c48 <osEventFlagsSet+0x84>)
 8012c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c26:	601a      	str	r2, [r3, #0]
 8012c28:	f3bf 8f4f 	dsb	sy
 8012c2c:	f3bf 8f6f 	isb	sy
 8012c30:	e004      	b.n	8012c3c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012c32:	6839      	ldr	r1, [r7, #0]
 8012c34:	6938      	ldr	r0, [r7, #16]
 8012c36:	f000 faf5 	bl	8013224 <xEventGroupSetBits>
 8012c3a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012c3c:	697b      	ldr	r3, [r7, #20]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3718      	adds	r7, #24
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
 8012c46:	bf00      	nop
 8012c48:	e000ed04 	.word	0xe000ed04

08012c4c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b08c      	sub	sp, #48	; 0x30
 8012c50:	af02      	add	r7, sp, #8
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	607a      	str	r2, [r7, #4]
 8012c58:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012c5e:	69bb      	ldr	r3, [r7, #24]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d004      	beq.n	8012c6e <osEventFlagsWait+0x22>
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d003      	beq.n	8012c76 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012c6e:	f06f 0303 	mvn.w	r3, #3
 8012c72:	61fb      	str	r3, [r7, #28]
 8012c74:	e04b      	b.n	8012d0e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c76:	f3ef 8305 	mrs	r3, IPSR
 8012c7a:	617b      	str	r3, [r7, #20]
  return(result);
 8012c7c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d003      	beq.n	8012c8a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012c82:	f06f 0305 	mvn.w	r3, #5
 8012c86:	61fb      	str	r3, [r7, #28]
 8012c88:	e041      	b.n	8012d0e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f003 0301 	and.w	r3, r3, #1
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d002      	beq.n	8012c9a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012c94:	2301      	movs	r3, #1
 8012c96:	627b      	str	r3, [r7, #36]	; 0x24
 8012c98:	e001      	b.n	8012c9e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f003 0302 	and.w	r3, r3, #2
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d002      	beq.n	8012cae <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	623b      	str	r3, [r7, #32]
 8012cac:	e001      	b.n	8012cb2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012cae:	2301      	movs	r3, #1
 8012cb0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	9300      	str	r3, [sp, #0]
 8012cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb8:	6a3a      	ldr	r2, [r7, #32]
 8012cba:	68b9      	ldr	r1, [r7, #8]
 8012cbc:	69b8      	ldr	r0, [r7, #24]
 8012cbe:	f000 f9e3 	bl	8013088 <xEventGroupWaitBits>
 8012cc2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f003 0301 	and.w	r3, r3, #1
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d010      	beq.n	8012cf0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012cce:	68ba      	ldr	r2, [r7, #8]
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	4013      	ands	r3, r2
 8012cd4:	68ba      	ldr	r2, [r7, #8]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d019      	beq.n	8012d0e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d003      	beq.n	8012ce8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012ce0:	f06f 0301 	mvn.w	r3, #1
 8012ce4:	61fb      	str	r3, [r7, #28]
 8012ce6:	e012      	b.n	8012d0e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012ce8:	f06f 0302 	mvn.w	r3, #2
 8012cec:	61fb      	str	r3, [r7, #28]
 8012cee:	e00e      	b.n	8012d0e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012cf0:	68ba      	ldr	r2, [r7, #8]
 8012cf2:	69fb      	ldr	r3, [r7, #28]
 8012cf4:	4013      	ands	r3, r2
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d109      	bne.n	8012d0e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d003      	beq.n	8012d08 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012d00:	f06f 0301 	mvn.w	r3, #1
 8012d04:	61fb      	str	r3, [r7, #28]
 8012d06:	e002      	b.n	8012d0e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012d08:	f06f 0302 	mvn.w	r3, #2
 8012d0c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012d0e:	69fb      	ldr	r3, [r7, #28]
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	3728      	adds	r7, #40	; 0x28
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}

08012d18 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b08a      	sub	sp, #40	; 0x28
 8012d1c:	af02      	add	r7, sp, #8
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012d24:	2300      	movs	r3, #0
 8012d26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d28:	f3ef 8305 	mrs	r3, IPSR
 8012d2c:	613b      	str	r3, [r7, #16]
  return(result);
 8012d2e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d15f      	bne.n	8012df4 <osMessageQueueNew+0xdc>
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d05c      	beq.n	8012df4 <osMessageQueueNew+0xdc>
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d059      	beq.n	8012df4 <osMessageQueueNew+0xdc>
    mem = -1;
 8012d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d029      	beq.n	8012da0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d012      	beq.n	8012d7a <osMessageQueueNew+0x62>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	2b4f      	cmp	r3, #79	; 0x4f
 8012d5a:	d90e      	bls.n	8012d7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d00a      	beq.n	8012d7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	695a      	ldr	r2, [r3, #20]
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	68b9      	ldr	r1, [r7, #8]
 8012d6c:	fb01 f303 	mul.w	r3, r1, r3
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d302      	bcc.n	8012d7a <osMessageQueueNew+0x62>
        mem = 1;
 8012d74:	2301      	movs	r3, #1
 8012d76:	61bb      	str	r3, [r7, #24]
 8012d78:	e014      	b.n	8012da4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	689b      	ldr	r3, [r3, #8]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d110      	bne.n	8012da4 <osMessageQueueNew+0x8c>
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	68db      	ldr	r3, [r3, #12]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d10c      	bne.n	8012da4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d108      	bne.n	8012da4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	695b      	ldr	r3, [r3, #20]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d104      	bne.n	8012da4 <osMessageQueueNew+0x8c>
          mem = 0;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	61bb      	str	r3, [r7, #24]
 8012d9e:	e001      	b.n	8012da4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012da0:	2300      	movs	r3, #0
 8012da2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	2b01      	cmp	r3, #1
 8012da8:	d10b      	bne.n	8012dc2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	691a      	ldr	r2, [r3, #16]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	689b      	ldr	r3, [r3, #8]
 8012db2:	2100      	movs	r1, #0
 8012db4:	9100      	str	r1, [sp, #0]
 8012db6:	68b9      	ldr	r1, [r7, #8]
 8012db8:	68f8      	ldr	r0, [r7, #12]
 8012dba:	f000 fc1d 	bl	80135f8 <xQueueGenericCreateStatic>
 8012dbe:	61f8      	str	r0, [r7, #28]
 8012dc0:	e008      	b.n	8012dd4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d105      	bne.n	8012dd4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012dc8:	2200      	movs	r2, #0
 8012dca:	68b9      	ldr	r1, [r7, #8]
 8012dcc:	68f8      	ldr	r0, [r7, #12]
 8012dce:	f000 fc8b 	bl	80136e8 <xQueueGenericCreate>
 8012dd2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012dd4:	69fb      	ldr	r3, [r7, #28]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00c      	beq.n	8012df4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d003      	beq.n	8012de8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	617b      	str	r3, [r7, #20]
 8012de6:	e001      	b.n	8012dec <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012de8:	2300      	movs	r3, #0
 8012dea:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012dec:	6979      	ldr	r1, [r7, #20]
 8012dee:	69f8      	ldr	r0, [r7, #28]
 8012df0:	f001 f8e2 	bl	8013fb8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012df4:	69fb      	ldr	r3, [r7, #28]
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3720      	adds	r7, #32
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
	...

08012e00 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b088      	sub	sp, #32
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	603b      	str	r3, [r7, #0]
 8012e0c:	4613      	mov	r3, r2
 8012e0e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012e14:	2300      	movs	r3, #0
 8012e16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e18:	f3ef 8305 	mrs	r3, IPSR
 8012e1c:	617b      	str	r3, [r7, #20]
  return(result);
 8012e1e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d028      	beq.n	8012e76 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d005      	beq.n	8012e36 <osMessageQueuePut+0x36>
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d002      	beq.n	8012e36 <osMessageQueuePut+0x36>
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d003      	beq.n	8012e3e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012e36:	f06f 0303 	mvn.w	r3, #3
 8012e3a:	61fb      	str	r3, [r7, #28]
 8012e3c:	e038      	b.n	8012eb0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012e42:	f107 0210 	add.w	r2, r7, #16
 8012e46:	2300      	movs	r3, #0
 8012e48:	68b9      	ldr	r1, [r7, #8]
 8012e4a:	69b8      	ldr	r0, [r7, #24]
 8012e4c:	f000 fda8 	bl	80139a0 <xQueueGenericSendFromISR>
 8012e50:	4603      	mov	r3, r0
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	d003      	beq.n	8012e5e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012e56:	f06f 0302 	mvn.w	r3, #2
 8012e5a:	61fb      	str	r3, [r7, #28]
 8012e5c:	e028      	b.n	8012eb0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d025      	beq.n	8012eb0 <osMessageQueuePut+0xb0>
 8012e64:	4b15      	ldr	r3, [pc, #84]	; (8012ebc <osMessageQueuePut+0xbc>)
 8012e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e6a:	601a      	str	r2, [r3, #0]
 8012e6c:	f3bf 8f4f 	dsb	sy
 8012e70:	f3bf 8f6f 	isb	sy
 8012e74:	e01c      	b.n	8012eb0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012e76:	69bb      	ldr	r3, [r7, #24]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d002      	beq.n	8012e82 <osMessageQueuePut+0x82>
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d103      	bne.n	8012e8a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012e82:	f06f 0303 	mvn.w	r3, #3
 8012e86:	61fb      	str	r3, [r7, #28]
 8012e88:	e012      	b.n	8012eb0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	683a      	ldr	r2, [r7, #0]
 8012e8e:	68b9      	ldr	r1, [r7, #8]
 8012e90:	69b8      	ldr	r0, [r7, #24]
 8012e92:	f000 fc87 	bl	80137a4 <xQueueGenericSend>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d009      	beq.n	8012eb0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d003      	beq.n	8012eaa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012ea2:	f06f 0301 	mvn.w	r3, #1
 8012ea6:	61fb      	str	r3, [r7, #28]
 8012ea8:	e002      	b.n	8012eb0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012eaa:	f06f 0302 	mvn.w	r3, #2
 8012eae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012eb0:	69fb      	ldr	r3, [r7, #28]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3720      	adds	r7, #32
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	e000ed04 	.word	0xe000ed04

08012ec0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b088      	sub	sp, #32
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	607a      	str	r2, [r7, #4]
 8012ecc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ed6:	f3ef 8305 	mrs	r3, IPSR
 8012eda:	617b      	str	r3, [r7, #20]
  return(result);
 8012edc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d028      	beq.n	8012f34 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d005      	beq.n	8012ef4 <osMessageQueueGet+0x34>
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d002      	beq.n	8012ef4 <osMessageQueueGet+0x34>
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d003      	beq.n	8012efc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012ef4:	f06f 0303 	mvn.w	r3, #3
 8012ef8:	61fb      	str	r3, [r7, #28]
 8012efa:	e037      	b.n	8012f6c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012efc:	2300      	movs	r3, #0
 8012efe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012f00:	f107 0310 	add.w	r3, r7, #16
 8012f04:	461a      	mov	r2, r3
 8012f06:	68b9      	ldr	r1, [r7, #8]
 8012f08:	69b8      	ldr	r0, [r7, #24]
 8012f0a:	f000 fec5 	bl	8013c98 <xQueueReceiveFromISR>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	2b01      	cmp	r3, #1
 8012f12:	d003      	beq.n	8012f1c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012f14:	f06f 0302 	mvn.w	r3, #2
 8012f18:	61fb      	str	r3, [r7, #28]
 8012f1a:	e027      	b.n	8012f6c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d024      	beq.n	8012f6c <osMessageQueueGet+0xac>
 8012f22:	4b15      	ldr	r3, [pc, #84]	; (8012f78 <osMessageQueueGet+0xb8>)
 8012f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f28:	601a      	str	r2, [r3, #0]
 8012f2a:	f3bf 8f4f 	dsb	sy
 8012f2e:	f3bf 8f6f 	isb	sy
 8012f32:	e01b      	b.n	8012f6c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012f34:	69bb      	ldr	r3, [r7, #24]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d002      	beq.n	8012f40 <osMessageQueueGet+0x80>
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d103      	bne.n	8012f48 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012f40:	f06f 0303 	mvn.w	r3, #3
 8012f44:	61fb      	str	r3, [r7, #28]
 8012f46:	e011      	b.n	8012f6c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012f48:	683a      	ldr	r2, [r7, #0]
 8012f4a:	68b9      	ldr	r1, [r7, #8]
 8012f4c:	69b8      	ldr	r0, [r7, #24]
 8012f4e:	f000 fdc3 	bl	8013ad8 <xQueueReceive>
 8012f52:	4603      	mov	r3, r0
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	d009      	beq.n	8012f6c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d003      	beq.n	8012f66 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012f5e:	f06f 0301 	mvn.w	r3, #1
 8012f62:	61fb      	str	r3, [r7, #28]
 8012f64:	e002      	b.n	8012f6c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012f66:	f06f 0302 	mvn.w	r3, #2
 8012f6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012f6c:	69fb      	ldr	r3, [r7, #28]
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3720      	adds	r7, #32
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
 8012f76:	bf00      	nop
 8012f78:	e000ed04 	.word	0xe000ed04

08012f7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012f7c:	b480      	push	{r7}
 8012f7e:	b085      	sub	sp, #20
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	4a07      	ldr	r2, [pc, #28]	; (8012fa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8012f8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	4a06      	ldr	r2, [pc, #24]	; (8012fac <vApplicationGetIdleTaskMemory+0x30>)
 8012f92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2280      	movs	r2, #128	; 0x80
 8012f98:	601a      	str	r2, [r3, #0]
}
 8012f9a:	bf00      	nop
 8012f9c:	3714      	adds	r7, #20
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr
 8012fa6:	bf00      	nop
 8012fa8:	240010d0 	.word	0x240010d0
 8012fac:	2400112c 	.word	0x2400112c

08012fb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012fb0:	b480      	push	{r7}
 8012fb2:	b085      	sub	sp, #20
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	60f8      	str	r0, [r7, #12]
 8012fb8:	60b9      	str	r1, [r7, #8]
 8012fba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	4a07      	ldr	r2, [pc, #28]	; (8012fdc <vApplicationGetTimerTaskMemory+0x2c>)
 8012fc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	4a06      	ldr	r2, [pc, #24]	; (8012fe0 <vApplicationGetTimerTaskMemory+0x30>)
 8012fc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012fce:	601a      	str	r2, [r3, #0]
}
 8012fd0:	bf00      	nop
 8012fd2:	3714      	adds	r7, #20
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fda:	4770      	bx	lr
 8012fdc:	2400132c 	.word	0x2400132c
 8012fe0:	24001388 	.word	0x24001388

08012fe4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b086      	sub	sp, #24
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d10a      	bne.n	8013008 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff6:	f383 8811 	msr	BASEPRI, r3
 8012ffa:	f3bf 8f6f 	isb	sy
 8012ffe:	f3bf 8f4f 	dsb	sy
 8013002:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013004:	bf00      	nop
 8013006:	e7fe      	b.n	8013006 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013008:	2320      	movs	r3, #32
 801300a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	2b20      	cmp	r3, #32
 8013010:	d00a      	beq.n	8013028 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013016:	f383 8811 	msr	BASEPRI, r3
 801301a:	f3bf 8f6f 	isb	sy
 801301e:	f3bf 8f4f 	dsb	sy
 8013022:	60fb      	str	r3, [r7, #12]
}
 8013024:	bf00      	nop
 8013026:	e7fe      	b.n	8013026 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d00a      	beq.n	8013048 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	2200      	movs	r2, #0
 8013036:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	3304      	adds	r3, #4
 801303c:	4618      	mov	r0, r3
 801303e:	f000 f9bf 	bl	80133c0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	2201      	movs	r2, #1
 8013046:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013048:	697b      	ldr	r3, [r7, #20]
	}
 801304a:	4618      	mov	r0, r3
 801304c:	3718      	adds	r7, #24
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}

08013052 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013052:	b580      	push	{r7, lr}
 8013054:	b082      	sub	sp, #8
 8013056:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013058:	2020      	movs	r0, #32
 801305a:	f002 fe95 	bl	8015d88 <pvPortMalloc>
 801305e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d00a      	beq.n	801307c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2200      	movs	r2, #0
 801306a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	3304      	adds	r3, #4
 8013070:	4618      	mov	r0, r3
 8013072:	f000 f9a5 	bl	80133c0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2200      	movs	r2, #0
 801307a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801307c:	687b      	ldr	r3, [r7, #4]
	}
 801307e:	4618      	mov	r0, r3
 8013080:	3708      	adds	r7, #8
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
	...

08013088 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b090      	sub	sp, #64	; 0x40
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
 8013094:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801309a:	2300      	movs	r3, #0
 801309c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801309e:	2300      	movs	r3, #0
 80130a0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d10a      	bne.n	80130be <xEventGroupWaitBits+0x36>
	__asm volatile
 80130a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ac:	f383 8811 	msr	BASEPRI, r3
 80130b0:	f3bf 8f6f 	isb	sy
 80130b4:	f3bf 8f4f 	dsb	sy
 80130b8:	623b      	str	r3, [r7, #32]
}
 80130ba:	bf00      	nop
 80130bc:	e7fe      	b.n	80130bc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d00a      	beq.n	80130de <xEventGroupWaitBits+0x56>
	__asm volatile
 80130c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130cc:	f383 8811 	msr	BASEPRI, r3
 80130d0:	f3bf 8f6f 	isb	sy
 80130d4:	f3bf 8f4f 	dsb	sy
 80130d8:	61fb      	str	r3, [r7, #28]
}
 80130da:	bf00      	nop
 80130dc:	e7fe      	b.n	80130dc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d10a      	bne.n	80130fa <xEventGroupWaitBits+0x72>
	__asm volatile
 80130e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e8:	f383 8811 	msr	BASEPRI, r3
 80130ec:	f3bf 8f6f 	isb	sy
 80130f0:	f3bf 8f4f 	dsb	sy
 80130f4:	61bb      	str	r3, [r7, #24]
}
 80130f6:	bf00      	nop
 80130f8:	e7fe      	b.n	80130f8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80130fa:	f001 ff91 	bl	8015020 <xTaskGetSchedulerState>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d102      	bne.n	801310a <xEventGroupWaitBits+0x82>
 8013104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013106:	2b00      	cmp	r3, #0
 8013108:	d101      	bne.n	801310e <xEventGroupWaitBits+0x86>
 801310a:	2301      	movs	r3, #1
 801310c:	e000      	b.n	8013110 <xEventGroupWaitBits+0x88>
 801310e:	2300      	movs	r3, #0
 8013110:	2b00      	cmp	r3, #0
 8013112:	d10a      	bne.n	801312a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013118:	f383 8811 	msr	BASEPRI, r3
 801311c:	f3bf 8f6f 	isb	sy
 8013120:	f3bf 8f4f 	dsb	sy
 8013124:	617b      	str	r3, [r7, #20]
}
 8013126:	bf00      	nop
 8013128:	e7fe      	b.n	8013128 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801312a:	f001 faf9 	bl	8014720 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013134:	683a      	ldr	r2, [r7, #0]
 8013136:	68b9      	ldr	r1, [r7, #8]
 8013138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801313a:	f000 f90b 	bl	8013354 <prvTestWaitCondition>
 801313e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013142:	2b00      	cmp	r3, #0
 8013144:	d00e      	beq.n	8013164 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013148:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 801314a:	2300      	movs	r3, #0
 801314c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d028      	beq.n	80131a6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	43db      	mvns	r3, r3
 801315c:	401a      	ands	r2, r3
 801315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013160:	601a      	str	r2, [r3, #0]
 8013162:	e020      	b.n	80131a6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013166:	2b00      	cmp	r3, #0
 8013168:	d104      	bne.n	8013174 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801316c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801316e:	2301      	movs	r3, #1
 8013170:	633b      	str	r3, [r7, #48]	; 0x30
 8013172:	e018      	b.n	80131a6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d003      	beq.n	8013182 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801317c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013180:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d003      	beq.n	8013190 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801318e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013192:	1d18      	adds	r0, r3, #4
 8013194:	68ba      	ldr	r2, [r7, #8]
 8013196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013198:	4313      	orrs	r3, r2
 801319a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801319c:	4619      	mov	r1, r3
 801319e:	f001 fcb7 	bl	8014b10 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80131a2:	2300      	movs	r3, #0
 80131a4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80131a6:	f001 fac9 	bl	801473c <xTaskResumeAll>
 80131aa:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80131ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d031      	beq.n	8013216 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80131b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d107      	bne.n	80131c8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80131b8:	4b19      	ldr	r3, [pc, #100]	; (8013220 <xEventGroupWaitBits+0x198>)
 80131ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131be:	601a      	str	r2, [r3, #0]
 80131c0:	f3bf 8f4f 	dsb	sy
 80131c4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80131c8:	f001 ffb6 	bl	8015138 <uxTaskResetEventItemValue>
 80131cc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80131ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d11a      	bne.n	801320e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80131d8:	f002 fcb4 	bl	8015b44 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80131dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80131e2:	683a      	ldr	r2, [r7, #0]
 80131e4:	68b9      	ldr	r1, [r7, #8]
 80131e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80131e8:	f000 f8b4 	bl	8013354 <prvTestWaitCondition>
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d009      	beq.n	8013206 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d006      	beq.n	8013206 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80131f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	43db      	mvns	r3, r3
 8013200:	401a      	ands	r2, r3
 8013202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013204:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013206:	2301      	movs	r3, #1
 8013208:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801320a:	f002 fccb 	bl	8015ba4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013210:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013214:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013218:	4618      	mov	r0, r3
 801321a:	3740      	adds	r7, #64	; 0x40
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}
 8013220:	e000ed04 	.word	0xe000ed04

08013224 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b08e      	sub	sp, #56	; 0x38
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801322e:	2300      	movs	r3, #0
 8013230:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013236:	2300      	movs	r3, #0
 8013238:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d10a      	bne.n	8013256 <xEventGroupSetBits+0x32>
	__asm volatile
 8013240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013244:	f383 8811 	msr	BASEPRI, r3
 8013248:	f3bf 8f6f 	isb	sy
 801324c:	f3bf 8f4f 	dsb	sy
 8013250:	613b      	str	r3, [r7, #16]
}
 8013252:	bf00      	nop
 8013254:	e7fe      	b.n	8013254 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801325c:	2b00      	cmp	r3, #0
 801325e:	d00a      	beq.n	8013276 <xEventGroupSetBits+0x52>
	__asm volatile
 8013260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013264:	f383 8811 	msr	BASEPRI, r3
 8013268:	f3bf 8f6f 	isb	sy
 801326c:	f3bf 8f4f 	dsb	sy
 8013270:	60fb      	str	r3, [r7, #12]
}
 8013272:	bf00      	nop
 8013274:	e7fe      	b.n	8013274 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013278:	3304      	adds	r3, #4
 801327a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327e:	3308      	adds	r3, #8
 8013280:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013282:	f001 fa4d 	bl	8014720 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013288:	68db      	ldr	r3, [r3, #12]
 801328a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801328e:	681a      	ldr	r2, [r3, #0]
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	431a      	orrs	r2, r3
 8013294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013296:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013298:	e03c      	b.n	8013314 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801329c:	685b      	ldr	r3, [r3, #4]
 801329e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80132a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80132a6:	2300      	movs	r3, #0
 80132a8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80132aa:	69bb      	ldr	r3, [r7, #24]
 80132ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80132b0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80132b2:	69bb      	ldr	r3, [r7, #24]
 80132b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80132b8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d108      	bne.n	80132d6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80132c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	69bb      	ldr	r3, [r7, #24]
 80132ca:	4013      	ands	r3, r2
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d00b      	beq.n	80132e8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80132d0:	2301      	movs	r3, #1
 80132d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80132d4:	e008      	b.n	80132e8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80132d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d8:	681a      	ldr	r2, [r3, #0]
 80132da:	69bb      	ldr	r3, [r7, #24]
 80132dc:	4013      	ands	r3, r2
 80132de:	69ba      	ldr	r2, [r7, #24]
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d101      	bne.n	80132e8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80132e4:	2301      	movs	r3, #1
 80132e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80132e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d010      	beq.n	8013310 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d003      	beq.n	8013300 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80132f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132fa:	69bb      	ldr	r3, [r7, #24]
 80132fc:	4313      	orrs	r3, r2
 80132fe:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013308:	4619      	mov	r1, r3
 801330a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801330c:	f001 fccc 	bl	8014ca8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013316:	6a3b      	ldr	r3, [r7, #32]
 8013318:	429a      	cmp	r2, r3
 801331a:	d1be      	bne.n	801329a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331e:	681a      	ldr	r2, [r3, #0]
 8013320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013322:	43db      	mvns	r3, r3
 8013324:	401a      	ands	r2, r3
 8013326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013328:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801332a:	f001 fa07 	bl	801473c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013330:	681b      	ldr	r3, [r3, #0]
}
 8013332:	4618      	mov	r0, r3
 8013334:	3738      	adds	r7, #56	; 0x38
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801333a:	b580      	push	{r7, lr}
 801333c:	b082      	sub	sp, #8
 801333e:	af00      	add	r7, sp, #0
 8013340:	6078      	str	r0, [r7, #4]
 8013342:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013344:	6839      	ldr	r1, [r7, #0]
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	f7ff ff6c 	bl	8013224 <xEventGroupSetBits>
}
 801334c:	bf00      	nop
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013354:	b480      	push	{r7}
 8013356:	b087      	sub	sp, #28
 8013358:	af00      	add	r7, sp, #0
 801335a:	60f8      	str	r0, [r7, #12]
 801335c:	60b9      	str	r1, [r7, #8]
 801335e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013360:	2300      	movs	r3, #0
 8013362:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d107      	bne.n	801337a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801336a:	68fa      	ldr	r2, [r7, #12]
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	4013      	ands	r3, r2
 8013370:	2b00      	cmp	r3, #0
 8013372:	d00a      	beq.n	801338a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013374:	2301      	movs	r3, #1
 8013376:	617b      	str	r3, [r7, #20]
 8013378:	e007      	b.n	801338a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801337a:	68fa      	ldr	r2, [r7, #12]
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	4013      	ands	r3, r2
 8013380:	68ba      	ldr	r2, [r7, #8]
 8013382:	429a      	cmp	r2, r3
 8013384:	d101      	bne.n	801338a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013386:	2301      	movs	r3, #1
 8013388:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801338a:	697b      	ldr	r3, [r7, #20]
}
 801338c:	4618      	mov	r0, r3
 801338e:	371c      	adds	r7, #28
 8013390:	46bd      	mov	sp, r7
 8013392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013396:	4770      	bx	lr

08013398 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013398:	b580      	push	{r7, lr}
 801339a:	b086      	sub	sp, #24
 801339c:	af00      	add	r7, sp, #0
 801339e:	60f8      	str	r0, [r7, #12]
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	68ba      	ldr	r2, [r7, #8]
 80133a8:	68f9      	ldr	r1, [r7, #12]
 80133aa:	4804      	ldr	r0, [pc, #16]	; (80133bc <xEventGroupSetBitsFromISR+0x24>)
 80133ac:	f002 fa7e 	bl	80158ac <xTimerPendFunctionCallFromISR>
 80133b0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80133b2:	697b      	ldr	r3, [r7, #20]
	}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3718      	adds	r7, #24
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	0801333b 	.word	0x0801333b

080133c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f103 0208 	add.w	r2, r3, #8
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80133d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f103 0208 	add.w	r2, r3, #8
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f103 0208 	add.w	r2, r3, #8
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2200      	movs	r2, #0
 80133f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80133f4:	bf00      	nop
 80133f6:	370c      	adds	r7, #12
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2200      	movs	r2, #0
 801340c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801340e:	bf00      	nop
 8013410:	370c      	adds	r7, #12
 8013412:	46bd      	mov	sp, r7
 8013414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013418:	4770      	bx	lr

0801341a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801341a:	b480      	push	{r7}
 801341c:	b085      	sub	sp, #20
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
 8013422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	68fa      	ldr	r2, [r7, #12]
 801342e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	689a      	ldr	r2, [r3, #8]
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	689b      	ldr	r3, [r3, #8]
 801343c:	683a      	ldr	r2, [r7, #0]
 801343e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	683a      	ldr	r2, [r7, #0]
 8013444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	687a      	ldr	r2, [r7, #4]
 801344a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	1c5a      	adds	r2, r3, #1
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	601a      	str	r2, [r3, #0]
}
 8013456:	bf00      	nop
 8013458:	3714      	adds	r7, #20
 801345a:	46bd      	mov	sp, r7
 801345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013460:	4770      	bx	lr

08013462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013462:	b480      	push	{r7}
 8013464:	b085      	sub	sp, #20
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
 801346a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013478:	d103      	bne.n	8013482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	691b      	ldr	r3, [r3, #16]
 801347e:	60fb      	str	r3, [r7, #12]
 8013480:	e00c      	b.n	801349c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	3308      	adds	r3, #8
 8013486:	60fb      	str	r3, [r7, #12]
 8013488:	e002      	b.n	8013490 <vListInsert+0x2e>
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	68ba      	ldr	r2, [r7, #8]
 8013498:	429a      	cmp	r2, r3
 801349a:	d2f6      	bcs.n	801348a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	685a      	ldr	r2, [r3, #4]
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	683a      	ldr	r2, [r7, #0]
 80134aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	68fa      	ldr	r2, [r7, #12]
 80134b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	683a      	ldr	r2, [r7, #0]
 80134b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	687a      	ldr	r2, [r7, #4]
 80134bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	1c5a      	adds	r2, r3, #1
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	601a      	str	r2, [r3, #0]
}
 80134c8:	bf00      	nop
 80134ca:	3714      	adds	r7, #20
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr

080134d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80134d4:	b480      	push	{r7}
 80134d6:	b085      	sub	sp, #20
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	691b      	ldr	r3, [r3, #16]
 80134e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	6892      	ldr	r2, [r2, #8]
 80134ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	689b      	ldr	r3, [r3, #8]
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	6852      	ldr	r2, [r2, #4]
 80134f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d103      	bne.n	8013508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	689a      	ldr	r2, [r3, #8]
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	2200      	movs	r2, #0
 801350c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	1e5a      	subs	r2, r3, #1
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	681b      	ldr	r3, [r3, #0]
}
 801351c:	4618      	mov	r0, r3
 801351e:	3714      	adds	r7, #20
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr

08013528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b084      	sub	sp, #16
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d10a      	bne.n	8013552 <xQueueGenericReset+0x2a>
	__asm volatile
 801353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013540:	f383 8811 	msr	BASEPRI, r3
 8013544:	f3bf 8f6f 	isb	sy
 8013548:	f3bf 8f4f 	dsb	sy
 801354c:	60bb      	str	r3, [r7, #8]
}
 801354e:	bf00      	nop
 8013550:	e7fe      	b.n	8013550 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013552:	f002 faf7 	bl	8015b44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	681a      	ldr	r2, [r3, #0]
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801355e:	68f9      	ldr	r1, [r7, #12]
 8013560:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013562:	fb01 f303 	mul.w	r3, r1, r3
 8013566:	441a      	add	r2, r3
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2200      	movs	r2, #0
 8013570:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	681a      	ldr	r2, [r3, #0]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	681a      	ldr	r2, [r3, #0]
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013582:	3b01      	subs	r3, #1
 8013584:	68f9      	ldr	r1, [r7, #12]
 8013586:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013588:	fb01 f303 	mul.w	r3, r1, r3
 801358c:	441a      	add	r2, r3
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	22ff      	movs	r2, #255	; 0xff
 8013596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	22ff      	movs	r2, #255	; 0xff
 801359e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d114      	bne.n	80135d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	691b      	ldr	r3, [r3, #16]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d01a      	beq.n	80135e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	3310      	adds	r3, #16
 80135b4:	4618      	mov	r0, r3
 80135b6:	f001 fb13 	bl	8014be0 <xTaskRemoveFromEventList>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d012      	beq.n	80135e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80135c0:	4b0c      	ldr	r3, [pc, #48]	; (80135f4 <xQueueGenericReset+0xcc>)
 80135c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135c6:	601a      	str	r2, [r3, #0]
 80135c8:	f3bf 8f4f 	dsb	sy
 80135cc:	f3bf 8f6f 	isb	sy
 80135d0:	e009      	b.n	80135e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	3310      	adds	r3, #16
 80135d6:	4618      	mov	r0, r3
 80135d8:	f7ff fef2 	bl	80133c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	3324      	adds	r3, #36	; 0x24
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7ff feed 	bl	80133c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80135e6:	f002 fadd 	bl	8015ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80135ea:	2301      	movs	r3, #1
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3710      	adds	r7, #16
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}
 80135f4:	e000ed04 	.word	0xe000ed04

080135f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b08e      	sub	sp, #56	; 0x38
 80135fc:	af02      	add	r7, sp, #8
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	60b9      	str	r1, [r7, #8]
 8013602:	607a      	str	r2, [r7, #4]
 8013604:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d10a      	bne.n	8013622 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013610:	f383 8811 	msr	BASEPRI, r3
 8013614:	f3bf 8f6f 	isb	sy
 8013618:	f3bf 8f4f 	dsb	sy
 801361c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801361e:	bf00      	nop
 8013620:	e7fe      	b.n	8013620 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d10a      	bne.n	801363e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801362c:	f383 8811 	msr	BASEPRI, r3
 8013630:	f3bf 8f6f 	isb	sy
 8013634:	f3bf 8f4f 	dsb	sy
 8013638:	627b      	str	r3, [r7, #36]	; 0x24
}
 801363a:	bf00      	nop
 801363c:	e7fe      	b.n	801363c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d002      	beq.n	801364a <xQueueGenericCreateStatic+0x52>
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d001      	beq.n	801364e <xQueueGenericCreateStatic+0x56>
 801364a:	2301      	movs	r3, #1
 801364c:	e000      	b.n	8013650 <xQueueGenericCreateStatic+0x58>
 801364e:	2300      	movs	r3, #0
 8013650:	2b00      	cmp	r3, #0
 8013652:	d10a      	bne.n	801366a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013658:	f383 8811 	msr	BASEPRI, r3
 801365c:	f3bf 8f6f 	isb	sy
 8013660:	f3bf 8f4f 	dsb	sy
 8013664:	623b      	str	r3, [r7, #32]
}
 8013666:	bf00      	nop
 8013668:	e7fe      	b.n	8013668 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d102      	bne.n	8013676 <xQueueGenericCreateStatic+0x7e>
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d101      	bne.n	801367a <xQueueGenericCreateStatic+0x82>
 8013676:	2301      	movs	r3, #1
 8013678:	e000      	b.n	801367c <xQueueGenericCreateStatic+0x84>
 801367a:	2300      	movs	r3, #0
 801367c:	2b00      	cmp	r3, #0
 801367e:	d10a      	bne.n	8013696 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013684:	f383 8811 	msr	BASEPRI, r3
 8013688:	f3bf 8f6f 	isb	sy
 801368c:	f3bf 8f4f 	dsb	sy
 8013690:	61fb      	str	r3, [r7, #28]
}
 8013692:	bf00      	nop
 8013694:	e7fe      	b.n	8013694 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013696:	2350      	movs	r3, #80	; 0x50
 8013698:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	2b50      	cmp	r3, #80	; 0x50
 801369e:	d00a      	beq.n	80136b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80136a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a4:	f383 8811 	msr	BASEPRI, r3
 80136a8:	f3bf 8f6f 	isb	sy
 80136ac:	f3bf 8f4f 	dsb	sy
 80136b0:	61bb      	str	r3, [r7, #24]
}
 80136b2:	bf00      	nop
 80136b4:	e7fe      	b.n	80136b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80136b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80136bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d00d      	beq.n	80136de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80136c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c4:	2201      	movs	r2, #1
 80136c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80136ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80136ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d0:	9300      	str	r3, [sp, #0]
 80136d2:	4613      	mov	r3, r2
 80136d4:	687a      	ldr	r2, [r7, #4]
 80136d6:	68b9      	ldr	r1, [r7, #8]
 80136d8:	68f8      	ldr	r0, [r7, #12]
 80136da:	f000 f83f 	bl	801375c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80136de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80136e0:	4618      	mov	r0, r3
 80136e2:	3730      	adds	r7, #48	; 0x30
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b08a      	sub	sp, #40	; 0x28
 80136ec:	af02      	add	r7, sp, #8
 80136ee:	60f8      	str	r0, [r7, #12]
 80136f0:	60b9      	str	r1, [r7, #8]
 80136f2:	4613      	mov	r3, r2
 80136f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d10a      	bne.n	8013712 <xQueueGenericCreate+0x2a>
	__asm volatile
 80136fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013700:	f383 8811 	msr	BASEPRI, r3
 8013704:	f3bf 8f6f 	isb	sy
 8013708:	f3bf 8f4f 	dsb	sy
 801370c:	613b      	str	r3, [r7, #16]
}
 801370e:	bf00      	nop
 8013710:	e7fe      	b.n	8013710 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	68ba      	ldr	r2, [r7, #8]
 8013716:	fb02 f303 	mul.w	r3, r2, r3
 801371a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	3350      	adds	r3, #80	; 0x50
 8013720:	4618      	mov	r0, r3
 8013722:	f002 fb31 	bl	8015d88 <pvPortMalloc>
 8013726:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013728:	69bb      	ldr	r3, [r7, #24]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d011      	beq.n	8013752 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013732:	697b      	ldr	r3, [r7, #20]
 8013734:	3350      	adds	r3, #80	; 0x50
 8013736:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013738:	69bb      	ldr	r3, [r7, #24]
 801373a:	2200      	movs	r2, #0
 801373c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013740:	79fa      	ldrb	r2, [r7, #7]
 8013742:	69bb      	ldr	r3, [r7, #24]
 8013744:	9300      	str	r3, [sp, #0]
 8013746:	4613      	mov	r3, r2
 8013748:	697a      	ldr	r2, [r7, #20]
 801374a:	68b9      	ldr	r1, [r7, #8]
 801374c:	68f8      	ldr	r0, [r7, #12]
 801374e:	f000 f805 	bl	801375c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013752:	69bb      	ldr	r3, [r7, #24]
	}
 8013754:	4618      	mov	r0, r3
 8013756:	3720      	adds	r7, #32
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}

0801375c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b084      	sub	sp, #16
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
 8013768:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d103      	bne.n	8013778 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	69ba      	ldr	r2, [r7, #24]
 8013774:	601a      	str	r2, [r3, #0]
 8013776:	e002      	b.n	801377e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	687a      	ldr	r2, [r7, #4]
 801377c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	68fa      	ldr	r2, [r7, #12]
 8013782:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013784:	69bb      	ldr	r3, [r7, #24]
 8013786:	68ba      	ldr	r2, [r7, #8]
 8013788:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801378a:	2101      	movs	r1, #1
 801378c:	69b8      	ldr	r0, [r7, #24]
 801378e:	f7ff fecb 	bl	8013528 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	78fa      	ldrb	r2, [r7, #3]
 8013796:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801379a:	bf00      	nop
 801379c:	3710      	adds	r7, #16
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
	...

080137a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b08e      	sub	sp, #56	; 0x38
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	607a      	str	r2, [r7, #4]
 80137b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80137b2:	2300      	movs	r3, #0
 80137b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80137ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d10a      	bne.n	80137d6 <xQueueGenericSend+0x32>
	__asm volatile
 80137c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c4:	f383 8811 	msr	BASEPRI, r3
 80137c8:	f3bf 8f6f 	isb	sy
 80137cc:	f3bf 8f4f 	dsb	sy
 80137d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80137d2:	bf00      	nop
 80137d4:	e7fe      	b.n	80137d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d103      	bne.n	80137e4 <xQueueGenericSend+0x40>
 80137dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d101      	bne.n	80137e8 <xQueueGenericSend+0x44>
 80137e4:	2301      	movs	r3, #1
 80137e6:	e000      	b.n	80137ea <xQueueGenericSend+0x46>
 80137e8:	2300      	movs	r3, #0
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d10a      	bne.n	8013804 <xQueueGenericSend+0x60>
	__asm volatile
 80137ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f2:	f383 8811 	msr	BASEPRI, r3
 80137f6:	f3bf 8f6f 	isb	sy
 80137fa:	f3bf 8f4f 	dsb	sy
 80137fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013800:	bf00      	nop
 8013802:	e7fe      	b.n	8013802 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	2b02      	cmp	r3, #2
 8013808:	d103      	bne.n	8013812 <xQueueGenericSend+0x6e>
 801380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801380e:	2b01      	cmp	r3, #1
 8013810:	d101      	bne.n	8013816 <xQueueGenericSend+0x72>
 8013812:	2301      	movs	r3, #1
 8013814:	e000      	b.n	8013818 <xQueueGenericSend+0x74>
 8013816:	2300      	movs	r3, #0
 8013818:	2b00      	cmp	r3, #0
 801381a:	d10a      	bne.n	8013832 <xQueueGenericSend+0x8e>
	__asm volatile
 801381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013820:	f383 8811 	msr	BASEPRI, r3
 8013824:	f3bf 8f6f 	isb	sy
 8013828:	f3bf 8f4f 	dsb	sy
 801382c:	623b      	str	r3, [r7, #32]
}
 801382e:	bf00      	nop
 8013830:	e7fe      	b.n	8013830 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013832:	f001 fbf5 	bl	8015020 <xTaskGetSchedulerState>
 8013836:	4603      	mov	r3, r0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d102      	bne.n	8013842 <xQueueGenericSend+0x9e>
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d101      	bne.n	8013846 <xQueueGenericSend+0xa2>
 8013842:	2301      	movs	r3, #1
 8013844:	e000      	b.n	8013848 <xQueueGenericSend+0xa4>
 8013846:	2300      	movs	r3, #0
 8013848:	2b00      	cmp	r3, #0
 801384a:	d10a      	bne.n	8013862 <xQueueGenericSend+0xbe>
	__asm volatile
 801384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013850:	f383 8811 	msr	BASEPRI, r3
 8013854:	f3bf 8f6f 	isb	sy
 8013858:	f3bf 8f4f 	dsb	sy
 801385c:	61fb      	str	r3, [r7, #28]
}
 801385e:	bf00      	nop
 8013860:	e7fe      	b.n	8013860 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013862:	f002 f96f 	bl	8015b44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801386e:	429a      	cmp	r2, r3
 8013870:	d302      	bcc.n	8013878 <xQueueGenericSend+0xd4>
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	2b02      	cmp	r3, #2
 8013876:	d129      	bne.n	80138cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013878:	683a      	ldr	r2, [r7, #0]
 801387a:	68b9      	ldr	r1, [r7, #8]
 801387c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801387e:	f000 fa8b 	bl	8013d98 <prvCopyDataToQueue>
 8013882:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013888:	2b00      	cmp	r3, #0
 801388a:	d010      	beq.n	80138ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388e:	3324      	adds	r3, #36	; 0x24
 8013890:	4618      	mov	r0, r3
 8013892:	f001 f9a5 	bl	8014be0 <xTaskRemoveFromEventList>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d013      	beq.n	80138c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801389c:	4b3f      	ldr	r3, [pc, #252]	; (801399c <xQueueGenericSend+0x1f8>)
 801389e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138a2:	601a      	str	r2, [r3, #0]
 80138a4:	f3bf 8f4f 	dsb	sy
 80138a8:	f3bf 8f6f 	isb	sy
 80138ac:	e00a      	b.n	80138c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80138ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d007      	beq.n	80138c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80138b4:	4b39      	ldr	r3, [pc, #228]	; (801399c <xQueueGenericSend+0x1f8>)
 80138b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138ba:	601a      	str	r2, [r3, #0]
 80138bc:	f3bf 8f4f 	dsb	sy
 80138c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80138c4:	f002 f96e 	bl	8015ba4 <vPortExitCritical>
				return pdPASS;
 80138c8:	2301      	movs	r3, #1
 80138ca:	e063      	b.n	8013994 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d103      	bne.n	80138da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80138d2:	f002 f967 	bl	8015ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80138d6:	2300      	movs	r3, #0
 80138d8:	e05c      	b.n	8013994 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80138da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d106      	bne.n	80138ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80138e0:	f107 0314 	add.w	r3, r7, #20
 80138e4:	4618      	mov	r0, r3
 80138e6:	f001 fa41 	bl	8014d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80138ea:	2301      	movs	r3, #1
 80138ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80138ee:	f002 f959 	bl	8015ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80138f2:	f000 ff15 	bl	8014720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80138f6:	f002 f925 	bl	8015b44 <vPortEnterCritical>
 80138fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013900:	b25b      	sxtb	r3, r3
 8013902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013906:	d103      	bne.n	8013910 <xQueueGenericSend+0x16c>
 8013908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801390a:	2200      	movs	r2, #0
 801390c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013916:	b25b      	sxtb	r3, r3
 8013918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801391c:	d103      	bne.n	8013926 <xQueueGenericSend+0x182>
 801391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013920:	2200      	movs	r2, #0
 8013922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013926:	f002 f93d 	bl	8015ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801392a:	1d3a      	adds	r2, r7, #4
 801392c:	f107 0314 	add.w	r3, r7, #20
 8013930:	4611      	mov	r1, r2
 8013932:	4618      	mov	r0, r3
 8013934:	f001 fa30 	bl	8014d98 <xTaskCheckForTimeOut>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d124      	bne.n	8013988 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801393e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013940:	f000 fb22 	bl	8013f88 <prvIsQueueFull>
 8013944:	4603      	mov	r3, r0
 8013946:	2b00      	cmp	r3, #0
 8013948:	d018      	beq.n	801397c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394c:	3310      	adds	r3, #16
 801394e:	687a      	ldr	r2, [r7, #4]
 8013950:	4611      	mov	r1, r2
 8013952:	4618      	mov	r0, r3
 8013954:	f001 f8b8 	bl	8014ac8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801395a:	f000 faad 	bl	8013eb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801395e:	f000 feed 	bl	801473c <xTaskResumeAll>
 8013962:	4603      	mov	r3, r0
 8013964:	2b00      	cmp	r3, #0
 8013966:	f47f af7c 	bne.w	8013862 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801396a:	4b0c      	ldr	r3, [pc, #48]	; (801399c <xQueueGenericSend+0x1f8>)
 801396c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013970:	601a      	str	r2, [r3, #0]
 8013972:	f3bf 8f4f 	dsb	sy
 8013976:	f3bf 8f6f 	isb	sy
 801397a:	e772      	b.n	8013862 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801397c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801397e:	f000 fa9b 	bl	8013eb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013982:	f000 fedb 	bl	801473c <xTaskResumeAll>
 8013986:	e76c      	b.n	8013862 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801398a:	f000 fa95 	bl	8013eb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801398e:	f000 fed5 	bl	801473c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013992:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013994:	4618      	mov	r0, r3
 8013996:	3738      	adds	r7, #56	; 0x38
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}
 801399c:	e000ed04 	.word	0xe000ed04

080139a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b090      	sub	sp, #64	; 0x40
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	60f8      	str	r0, [r7, #12]
 80139a8:	60b9      	str	r1, [r7, #8]
 80139aa:	607a      	str	r2, [r7, #4]
 80139ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80139b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d10a      	bne.n	80139ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80139b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139bc:	f383 8811 	msr	BASEPRI, r3
 80139c0:	f3bf 8f6f 	isb	sy
 80139c4:	f3bf 8f4f 	dsb	sy
 80139c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80139ca:	bf00      	nop
 80139cc:	e7fe      	b.n	80139cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d103      	bne.n	80139dc <xQueueGenericSendFromISR+0x3c>
 80139d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d101      	bne.n	80139e0 <xQueueGenericSendFromISR+0x40>
 80139dc:	2301      	movs	r3, #1
 80139de:	e000      	b.n	80139e2 <xQueueGenericSendFromISR+0x42>
 80139e0:	2300      	movs	r3, #0
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d10a      	bne.n	80139fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80139e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ea:	f383 8811 	msr	BASEPRI, r3
 80139ee:	f3bf 8f6f 	isb	sy
 80139f2:	f3bf 8f4f 	dsb	sy
 80139f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80139f8:	bf00      	nop
 80139fa:	e7fe      	b.n	80139fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	2b02      	cmp	r3, #2
 8013a00:	d103      	bne.n	8013a0a <xQueueGenericSendFromISR+0x6a>
 8013a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a06:	2b01      	cmp	r3, #1
 8013a08:	d101      	bne.n	8013a0e <xQueueGenericSendFromISR+0x6e>
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e000      	b.n	8013a10 <xQueueGenericSendFromISR+0x70>
 8013a0e:	2300      	movs	r3, #0
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d10a      	bne.n	8013a2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a18:	f383 8811 	msr	BASEPRI, r3
 8013a1c:	f3bf 8f6f 	isb	sy
 8013a20:	f3bf 8f4f 	dsb	sy
 8013a24:	623b      	str	r3, [r7, #32]
}
 8013a26:	bf00      	nop
 8013a28:	e7fe      	b.n	8013a28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a2a:	f002 f96d 	bl	8015d08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013a2e:	f3ef 8211 	mrs	r2, BASEPRI
 8013a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a36:	f383 8811 	msr	BASEPRI, r3
 8013a3a:	f3bf 8f6f 	isb	sy
 8013a3e:	f3bf 8f4f 	dsb	sy
 8013a42:	61fa      	str	r2, [r7, #28]
 8013a44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013a46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d302      	bcc.n	8013a5c <xQueueGenericSendFromISR+0xbc>
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	2b02      	cmp	r3, #2
 8013a5a:	d12f      	bne.n	8013abc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013a6c:	683a      	ldr	r2, [r7, #0]
 8013a6e:	68b9      	ldr	r1, [r7, #8]
 8013a70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013a72:	f000 f991 	bl	8013d98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013a76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a7e:	d112      	bne.n	8013aa6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d016      	beq.n	8013ab6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a8a:	3324      	adds	r3, #36	; 0x24
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f001 f8a7 	bl	8014be0 <xTaskRemoveFromEventList>
 8013a92:	4603      	mov	r3, r0
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d00e      	beq.n	8013ab6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d00b      	beq.n	8013ab6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	601a      	str	r2, [r3, #0]
 8013aa4:	e007      	b.n	8013ab6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013aa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013aaa:	3301      	adds	r3, #1
 8013aac:	b2db      	uxtb	r3, r3
 8013aae:	b25a      	sxtb	r2, r3
 8013ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013aba:	e001      	b.n	8013ac0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013abc:	2300      	movs	r3, #0
 8013abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ac2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013aca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3740      	adds	r7, #64	; 0x40
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}
	...

08013ad8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b08c      	sub	sp, #48	; 0x30
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	60f8      	str	r0, [r7, #12]
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d10a      	bne.n	8013b08 <xQueueReceive+0x30>
	__asm volatile
 8013af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af6:	f383 8811 	msr	BASEPRI, r3
 8013afa:	f3bf 8f6f 	isb	sy
 8013afe:	f3bf 8f4f 	dsb	sy
 8013b02:	623b      	str	r3, [r7, #32]
}
 8013b04:	bf00      	nop
 8013b06:	e7fe      	b.n	8013b06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d103      	bne.n	8013b16 <xQueueReceive+0x3e>
 8013b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d101      	bne.n	8013b1a <xQueueReceive+0x42>
 8013b16:	2301      	movs	r3, #1
 8013b18:	e000      	b.n	8013b1c <xQueueReceive+0x44>
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d10a      	bne.n	8013b36 <xQueueReceive+0x5e>
	__asm volatile
 8013b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b24:	f383 8811 	msr	BASEPRI, r3
 8013b28:	f3bf 8f6f 	isb	sy
 8013b2c:	f3bf 8f4f 	dsb	sy
 8013b30:	61fb      	str	r3, [r7, #28]
}
 8013b32:	bf00      	nop
 8013b34:	e7fe      	b.n	8013b34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013b36:	f001 fa73 	bl	8015020 <xTaskGetSchedulerState>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d102      	bne.n	8013b46 <xQueueReceive+0x6e>
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d101      	bne.n	8013b4a <xQueueReceive+0x72>
 8013b46:	2301      	movs	r3, #1
 8013b48:	e000      	b.n	8013b4c <xQueueReceive+0x74>
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d10a      	bne.n	8013b66 <xQueueReceive+0x8e>
	__asm volatile
 8013b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b54:	f383 8811 	msr	BASEPRI, r3
 8013b58:	f3bf 8f6f 	isb	sy
 8013b5c:	f3bf 8f4f 	dsb	sy
 8013b60:	61bb      	str	r3, [r7, #24]
}
 8013b62:	bf00      	nop
 8013b64:	e7fe      	b.n	8013b64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013b66:	f001 ffed 	bl	8015b44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d01f      	beq.n	8013bb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013b76:	68b9      	ldr	r1, [r7, #8]
 8013b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b7a:	f000 f977 	bl	8013e6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b80:	1e5a      	subs	r2, r3, #1
 8013b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b88:	691b      	ldr	r3, [r3, #16]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d00f      	beq.n	8013bae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b90:	3310      	adds	r3, #16
 8013b92:	4618      	mov	r0, r3
 8013b94:	f001 f824 	bl	8014be0 <xTaskRemoveFromEventList>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d007      	beq.n	8013bae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013b9e:	4b3d      	ldr	r3, [pc, #244]	; (8013c94 <xQueueReceive+0x1bc>)
 8013ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ba4:	601a      	str	r2, [r3, #0]
 8013ba6:	f3bf 8f4f 	dsb	sy
 8013baa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013bae:	f001 fff9 	bl	8015ba4 <vPortExitCritical>
				return pdPASS;
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	e069      	b.n	8013c8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d103      	bne.n	8013bc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013bbc:	f001 fff2 	bl	8015ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	e062      	b.n	8013c8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d106      	bne.n	8013bd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013bca:	f107 0310 	add.w	r3, r7, #16
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f001 f8cc 	bl	8014d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013bd8:	f001 ffe4 	bl	8015ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013bdc:	f000 fda0 	bl	8014720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013be0:	f001 ffb0 	bl	8015b44 <vPortEnterCritical>
 8013be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013bea:	b25b      	sxtb	r3, r3
 8013bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bf0:	d103      	bne.n	8013bfa <xQueueReceive+0x122>
 8013bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c00:	b25b      	sxtb	r3, r3
 8013c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c06:	d103      	bne.n	8013c10 <xQueueReceive+0x138>
 8013c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c10:	f001 ffc8 	bl	8015ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c14:	1d3a      	adds	r2, r7, #4
 8013c16:	f107 0310 	add.w	r3, r7, #16
 8013c1a:	4611      	mov	r1, r2
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f001 f8bb 	bl	8014d98 <xTaskCheckForTimeOut>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d123      	bne.n	8013c70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c2a:	f000 f997 	bl	8013f5c <prvIsQueueEmpty>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d017      	beq.n	8013c64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c36:	3324      	adds	r3, #36	; 0x24
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	4611      	mov	r1, r2
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f000 ff43 	bl	8014ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c44:	f000 f938 	bl	8013eb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013c48:	f000 fd78 	bl	801473c <xTaskResumeAll>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d189      	bne.n	8013b66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013c52:	4b10      	ldr	r3, [pc, #64]	; (8013c94 <xQueueReceive+0x1bc>)
 8013c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c58:	601a      	str	r2, [r3, #0]
 8013c5a:	f3bf 8f4f 	dsb	sy
 8013c5e:	f3bf 8f6f 	isb	sy
 8013c62:	e780      	b.n	8013b66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c66:	f000 f927 	bl	8013eb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013c6a:	f000 fd67 	bl	801473c <xTaskResumeAll>
 8013c6e:	e77a      	b.n	8013b66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c72:	f000 f921 	bl	8013eb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013c76:	f000 fd61 	bl	801473c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c7c:	f000 f96e 	bl	8013f5c <prvIsQueueEmpty>
 8013c80:	4603      	mov	r3, r0
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	f43f af6f 	beq.w	8013b66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013c88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3730      	adds	r7, #48	; 0x30
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	e000ed04 	.word	0xe000ed04

08013c98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b08e      	sub	sp, #56	; 0x38
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d10a      	bne.n	8013cc4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb2:	f383 8811 	msr	BASEPRI, r3
 8013cb6:	f3bf 8f6f 	isb	sy
 8013cba:	f3bf 8f4f 	dsb	sy
 8013cbe:	623b      	str	r3, [r7, #32]
}
 8013cc0:	bf00      	nop
 8013cc2:	e7fe      	b.n	8013cc2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d103      	bne.n	8013cd2 <xQueueReceiveFromISR+0x3a>
 8013cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d101      	bne.n	8013cd6 <xQueueReceiveFromISR+0x3e>
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	e000      	b.n	8013cd8 <xQueueReceiveFromISR+0x40>
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d10a      	bne.n	8013cf2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce0:	f383 8811 	msr	BASEPRI, r3
 8013ce4:	f3bf 8f6f 	isb	sy
 8013ce8:	f3bf 8f4f 	dsb	sy
 8013cec:	61fb      	str	r3, [r7, #28]
}
 8013cee:	bf00      	nop
 8013cf0:	e7fe      	b.n	8013cf0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cf2:	f002 f809 	bl	8015d08 <vPortValidateInterruptPriority>
	__asm volatile
 8013cf6:	f3ef 8211 	mrs	r2, BASEPRI
 8013cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cfe:	f383 8811 	msr	BASEPRI, r3
 8013d02:	f3bf 8f6f 	isb	sy
 8013d06:	f3bf 8f4f 	dsb	sy
 8013d0a:	61ba      	str	r2, [r7, #24]
 8013d0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013d0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d02f      	beq.n	8013d7e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013d28:	68b9      	ldr	r1, [r7, #8]
 8013d2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d2c:	f000 f89e 	bl	8013e6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d32:	1e5a      	subs	r2, r3, #1
 8013d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013d38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d40:	d112      	bne.n	8013d68 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d44:	691b      	ldr	r3, [r3, #16]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d016      	beq.n	8013d78 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4c:	3310      	adds	r3, #16
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f000 ff46 	bl	8014be0 <xTaskRemoveFromEventList>
 8013d54:	4603      	mov	r3, r0
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d00e      	beq.n	8013d78 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d00b      	beq.n	8013d78 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2201      	movs	r2, #1
 8013d64:	601a      	str	r2, [r3, #0]
 8013d66:	e007      	b.n	8013d78 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	b2db      	uxtb	r3, r3
 8013d70:	b25a      	sxtb	r2, r3
 8013d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013d78:	2301      	movs	r3, #1
 8013d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8013d7c:	e001      	b.n	8013d82 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	637b      	str	r3, [r7, #52]	; 0x34
 8013d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	f383 8811 	msr	BASEPRI, r3
}
 8013d8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3738      	adds	r7, #56	; 0x38
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}

08013d98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b086      	sub	sp, #24
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	60f8      	str	r0, [r7, #12]
 8013da0:	60b9      	str	r1, [r7, #8]
 8013da2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013da4:	2300      	movs	r3, #0
 8013da6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d10d      	bne.n	8013dd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d14d      	bne.n	8013e5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	689b      	ldr	r3, [r3, #8]
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f001 f94a 	bl	801505c <xTaskPriorityDisinherit>
 8013dc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	609a      	str	r2, [r3, #8]
 8013dd0:	e043      	b.n	8013e5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d119      	bne.n	8013e0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	6858      	ldr	r0, [r3, #4]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013de0:	461a      	mov	r2, r3
 8013de2:	68b9      	ldr	r1, [r7, #8]
 8013de4:	f002 f9f4 	bl	80161d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	685a      	ldr	r2, [r3, #4]
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013df0:	441a      	add	r2, r3
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	685a      	ldr	r2, [r3, #4]
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	689b      	ldr	r3, [r3, #8]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d32b      	bcc.n	8013e5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	681a      	ldr	r2, [r3, #0]
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	605a      	str	r2, [r3, #4]
 8013e0a:	e026      	b.n	8013e5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	68d8      	ldr	r0, [r3, #12]
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e14:	461a      	mov	r2, r3
 8013e16:	68b9      	ldr	r1, [r7, #8]
 8013e18:	f002 f9da 	bl	80161d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	68da      	ldr	r2, [r3, #12]
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e24:	425b      	negs	r3, r3
 8013e26:	441a      	add	r2, r3
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	68da      	ldr	r2, [r3, #12]
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	429a      	cmp	r2, r3
 8013e36:	d207      	bcs.n	8013e48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	689a      	ldr	r2, [r3, #8]
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e40:	425b      	negs	r3, r3
 8013e42:	441a      	add	r2, r3
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2b02      	cmp	r3, #2
 8013e4c:	d105      	bne.n	8013e5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d002      	beq.n	8013e5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	3b01      	subs	r3, #1
 8013e58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	1c5a      	adds	r2, r3, #1
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013e62:	697b      	ldr	r3, [r7, #20]
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3718      	adds	r7, #24
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b082      	sub	sp, #8
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d018      	beq.n	8013eb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	68da      	ldr	r2, [r3, #12]
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e86:	441a      	add	r2, r3
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	68da      	ldr	r2, [r3, #12]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	689b      	ldr	r3, [r3, #8]
 8013e94:	429a      	cmp	r2, r3
 8013e96:	d303      	bcc.n	8013ea0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681a      	ldr	r2, [r3, #0]
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	68d9      	ldr	r1, [r3, #12]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ea8:	461a      	mov	r2, r3
 8013eaa:	6838      	ldr	r0, [r7, #0]
 8013eac:	f002 f990 	bl	80161d0 <memcpy>
	}
}
 8013eb0:	bf00      	nop
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013ec0:	f001 fe40 	bl	8015b44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013eca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013ecc:	e011      	b.n	8013ef2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d012      	beq.n	8013efc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	3324      	adds	r3, #36	; 0x24
 8013eda:	4618      	mov	r0, r3
 8013edc:	f000 fe80 	bl	8014be0 <xTaskRemoveFromEventList>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d001      	beq.n	8013eea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013ee6:	f000 ffb9 	bl	8014e5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013eea:	7bfb      	ldrb	r3, [r7, #15]
 8013eec:	3b01      	subs	r3, #1
 8013eee:	b2db      	uxtb	r3, r3
 8013ef0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	dce9      	bgt.n	8013ece <prvUnlockQueue+0x16>
 8013efa:	e000      	b.n	8013efe <prvUnlockQueue+0x46>
					break;
 8013efc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	22ff      	movs	r2, #255	; 0xff
 8013f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013f06:	f001 fe4d 	bl	8015ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013f0a:	f001 fe1b 	bl	8015b44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f16:	e011      	b.n	8013f3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	691b      	ldr	r3, [r3, #16]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d012      	beq.n	8013f46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	3310      	adds	r3, #16
 8013f24:	4618      	mov	r0, r3
 8013f26:	f000 fe5b 	bl	8014be0 <xTaskRemoveFromEventList>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d001      	beq.n	8013f34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013f30:	f000 ff94 	bl	8014e5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013f34:	7bbb      	ldrb	r3, [r7, #14]
 8013f36:	3b01      	subs	r3, #1
 8013f38:	b2db      	uxtb	r3, r3
 8013f3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	dce9      	bgt.n	8013f18 <prvUnlockQueue+0x60>
 8013f44:	e000      	b.n	8013f48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013f46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	22ff      	movs	r2, #255	; 0xff
 8013f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013f50:	f001 fe28 	bl	8015ba4 <vPortExitCritical>
}
 8013f54:	bf00      	nop
 8013f56:	3710      	adds	r7, #16
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f64:	f001 fdee 	bl	8015b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d102      	bne.n	8013f76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013f70:	2301      	movs	r3, #1
 8013f72:	60fb      	str	r3, [r7, #12]
 8013f74:	e001      	b.n	8013f7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013f76:	2300      	movs	r3, #0
 8013f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013f7a:	f001 fe13 	bl	8015ba4 <vPortExitCritical>

	return xReturn;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3710      	adds	r7, #16
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b084      	sub	sp, #16
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f90:	f001 fdd8 	bl	8015b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d102      	bne.n	8013fa6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	60fb      	str	r3, [r7, #12]
 8013fa4:	e001      	b.n	8013faa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013faa:	f001 fdfb 	bl	8015ba4 <vPortExitCritical>

	return xReturn;
 8013fae:	68fb      	ldr	r3, [r7, #12]
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3710      	adds	r7, #16
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}

08013fb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013fb8:	b480      	push	{r7}
 8013fba:	b085      	sub	sp, #20
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	60fb      	str	r3, [r7, #12]
 8013fc6:	e014      	b.n	8013ff2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013fc8:	4a0f      	ldr	r2, [pc, #60]	; (8014008 <vQueueAddToRegistry+0x50>)
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d10b      	bne.n	8013fec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013fd4:	490c      	ldr	r1, [pc, #48]	; (8014008 <vQueueAddToRegistry+0x50>)
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	683a      	ldr	r2, [r7, #0]
 8013fda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013fde:	4a0a      	ldr	r2, [pc, #40]	; (8014008 <vQueueAddToRegistry+0x50>)
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	00db      	lsls	r3, r3, #3
 8013fe4:	4413      	add	r3, r2
 8013fe6:	687a      	ldr	r2, [r7, #4]
 8013fe8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013fea:	e006      	b.n	8013ffa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	3301      	adds	r3, #1
 8013ff0:	60fb      	str	r3, [r7, #12]
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2b07      	cmp	r3, #7
 8013ff6:	d9e7      	bls.n	8013fc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013ff8:	bf00      	nop
 8013ffa:	bf00      	nop
 8013ffc:	3714      	adds	r7, #20
 8013ffe:	46bd      	mov	sp, r7
 8014000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014004:	4770      	bx	lr
 8014006:	bf00      	nop
 8014008:	24001788 	.word	0x24001788

0801400c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801400c:	b580      	push	{r7, lr}
 801400e:	b086      	sub	sp, #24
 8014010:	af00      	add	r7, sp, #0
 8014012:	60f8      	str	r0, [r7, #12]
 8014014:	60b9      	str	r1, [r7, #8]
 8014016:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801401c:	f001 fd92 	bl	8015b44 <vPortEnterCritical>
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014026:	b25b      	sxtb	r3, r3
 8014028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801402c:	d103      	bne.n	8014036 <vQueueWaitForMessageRestricted+0x2a>
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	2200      	movs	r2, #0
 8014032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801403c:	b25b      	sxtb	r3, r3
 801403e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014042:	d103      	bne.n	801404c <vQueueWaitForMessageRestricted+0x40>
 8014044:	697b      	ldr	r3, [r7, #20]
 8014046:	2200      	movs	r2, #0
 8014048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801404c:	f001 fdaa 	bl	8015ba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014054:	2b00      	cmp	r3, #0
 8014056:	d106      	bne.n	8014066 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	3324      	adds	r3, #36	; 0x24
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	68b9      	ldr	r1, [r7, #8]
 8014060:	4618      	mov	r0, r3
 8014062:	f000 fd91 	bl	8014b88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014066:	6978      	ldr	r0, [r7, #20]
 8014068:	f7ff ff26 	bl	8013eb8 <prvUnlockQueue>
	}
 801406c:	bf00      	nop
 801406e:	3718      	adds	r7, #24
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}

08014074 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014074:	b580      	push	{r7, lr}
 8014076:	b08e      	sub	sp, #56	; 0x38
 8014078:	af04      	add	r7, sp, #16
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	607a      	str	r2, [r7, #4]
 8014080:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014084:	2b00      	cmp	r3, #0
 8014086:	d10a      	bne.n	801409e <xTaskCreateStatic+0x2a>
	__asm volatile
 8014088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801408c:	f383 8811 	msr	BASEPRI, r3
 8014090:	f3bf 8f6f 	isb	sy
 8014094:	f3bf 8f4f 	dsb	sy
 8014098:	623b      	str	r3, [r7, #32]
}
 801409a:	bf00      	nop
 801409c:	e7fe      	b.n	801409c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d10a      	bne.n	80140ba <xTaskCreateStatic+0x46>
	__asm volatile
 80140a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140a8:	f383 8811 	msr	BASEPRI, r3
 80140ac:	f3bf 8f6f 	isb	sy
 80140b0:	f3bf 8f4f 	dsb	sy
 80140b4:	61fb      	str	r3, [r7, #28]
}
 80140b6:	bf00      	nop
 80140b8:	e7fe      	b.n	80140b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80140ba:	235c      	movs	r3, #92	; 0x5c
 80140bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	2b5c      	cmp	r3, #92	; 0x5c
 80140c2:	d00a      	beq.n	80140da <xTaskCreateStatic+0x66>
	__asm volatile
 80140c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c8:	f383 8811 	msr	BASEPRI, r3
 80140cc:	f3bf 8f6f 	isb	sy
 80140d0:	f3bf 8f4f 	dsb	sy
 80140d4:	61bb      	str	r3, [r7, #24]
}
 80140d6:	bf00      	nop
 80140d8:	e7fe      	b.n	80140d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80140da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80140dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d01e      	beq.n	8014120 <xTaskCreateStatic+0xac>
 80140e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d01b      	beq.n	8014120 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80140e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80140ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80140f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f4:	2202      	movs	r2, #2
 80140f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80140fa:	2300      	movs	r3, #0
 80140fc:	9303      	str	r3, [sp, #12]
 80140fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014100:	9302      	str	r3, [sp, #8]
 8014102:	f107 0314 	add.w	r3, r7, #20
 8014106:	9301      	str	r3, [sp, #4]
 8014108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410a:	9300      	str	r3, [sp, #0]
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	68b9      	ldr	r1, [r7, #8]
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	f000 f850 	bl	80141b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801411a:	f000 f8dd 	bl	80142d8 <prvAddNewTaskToReadyList>
 801411e:	e001      	b.n	8014124 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014120:	2300      	movs	r3, #0
 8014122:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014124:	697b      	ldr	r3, [r7, #20]
	}
 8014126:	4618      	mov	r0, r3
 8014128:	3728      	adds	r7, #40	; 0x28
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}

0801412e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801412e:	b580      	push	{r7, lr}
 8014130:	b08c      	sub	sp, #48	; 0x30
 8014132:	af04      	add	r7, sp, #16
 8014134:	60f8      	str	r0, [r7, #12]
 8014136:	60b9      	str	r1, [r7, #8]
 8014138:	603b      	str	r3, [r7, #0]
 801413a:	4613      	mov	r3, r2
 801413c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801413e:	88fb      	ldrh	r3, [r7, #6]
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	4618      	mov	r0, r3
 8014144:	f001 fe20 	bl	8015d88 <pvPortMalloc>
 8014148:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d00e      	beq.n	801416e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014150:	205c      	movs	r0, #92	; 0x5c
 8014152:	f001 fe19 	bl	8015d88 <pvPortMalloc>
 8014156:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014158:	69fb      	ldr	r3, [r7, #28]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d003      	beq.n	8014166 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801415e:	69fb      	ldr	r3, [r7, #28]
 8014160:	697a      	ldr	r2, [r7, #20]
 8014162:	631a      	str	r2, [r3, #48]	; 0x30
 8014164:	e005      	b.n	8014172 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014166:	6978      	ldr	r0, [r7, #20]
 8014168:	f001 feda 	bl	8015f20 <vPortFree>
 801416c:	e001      	b.n	8014172 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801416e:	2300      	movs	r3, #0
 8014170:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014172:	69fb      	ldr	r3, [r7, #28]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d017      	beq.n	80141a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014178:	69fb      	ldr	r3, [r7, #28]
 801417a:	2200      	movs	r2, #0
 801417c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014180:	88fa      	ldrh	r2, [r7, #6]
 8014182:	2300      	movs	r3, #0
 8014184:	9303      	str	r3, [sp, #12]
 8014186:	69fb      	ldr	r3, [r7, #28]
 8014188:	9302      	str	r3, [sp, #8]
 801418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418c:	9301      	str	r3, [sp, #4]
 801418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014190:	9300      	str	r3, [sp, #0]
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	68b9      	ldr	r1, [r7, #8]
 8014196:	68f8      	ldr	r0, [r7, #12]
 8014198:	f000 f80e 	bl	80141b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801419c:	69f8      	ldr	r0, [r7, #28]
 801419e:	f000 f89b 	bl	80142d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80141a2:	2301      	movs	r3, #1
 80141a4:	61bb      	str	r3, [r7, #24]
 80141a6:	e002      	b.n	80141ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80141a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80141ae:	69bb      	ldr	r3, [r7, #24]
	}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3720      	adds	r7, #32
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}

080141b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b088      	sub	sp, #32
 80141bc:	af00      	add	r7, sp, #0
 80141be:	60f8      	str	r0, [r7, #12]
 80141c0:	60b9      	str	r1, [r7, #8]
 80141c2:	607a      	str	r2, [r7, #4]
 80141c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80141c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	009b      	lsls	r3, r3, #2
 80141ce:	461a      	mov	r2, r3
 80141d0:	21a5      	movs	r1, #165	; 0xa5
 80141d2:	f002 f80b 	bl	80161ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80141d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80141da:	6879      	ldr	r1, [r7, #4]
 80141dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80141e0:	440b      	add	r3, r1
 80141e2:	009b      	lsls	r3, r3, #2
 80141e4:	4413      	add	r3, r2
 80141e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80141e8:	69bb      	ldr	r3, [r7, #24]
 80141ea:	f023 0307 	bic.w	r3, r3, #7
 80141ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	f003 0307 	and.w	r3, r3, #7
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d00a      	beq.n	8014210 <prvInitialiseNewTask+0x58>
	__asm volatile
 80141fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fe:	f383 8811 	msr	BASEPRI, r3
 8014202:	f3bf 8f6f 	isb	sy
 8014206:	f3bf 8f4f 	dsb	sy
 801420a:	617b      	str	r3, [r7, #20]
}
 801420c:	bf00      	nop
 801420e:	e7fe      	b.n	801420e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d01f      	beq.n	8014256 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014216:	2300      	movs	r3, #0
 8014218:	61fb      	str	r3, [r7, #28]
 801421a:	e012      	b.n	8014242 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801421c:	68ba      	ldr	r2, [r7, #8]
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	4413      	add	r3, r2
 8014222:	7819      	ldrb	r1, [r3, #0]
 8014224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014226:	69fb      	ldr	r3, [r7, #28]
 8014228:	4413      	add	r3, r2
 801422a:	3334      	adds	r3, #52	; 0x34
 801422c:	460a      	mov	r2, r1
 801422e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014230:	68ba      	ldr	r2, [r7, #8]
 8014232:	69fb      	ldr	r3, [r7, #28]
 8014234:	4413      	add	r3, r2
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d006      	beq.n	801424a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801423c:	69fb      	ldr	r3, [r7, #28]
 801423e:	3301      	adds	r3, #1
 8014240:	61fb      	str	r3, [r7, #28]
 8014242:	69fb      	ldr	r3, [r7, #28]
 8014244:	2b0f      	cmp	r3, #15
 8014246:	d9e9      	bls.n	801421c <prvInitialiseNewTask+0x64>
 8014248:	e000      	b.n	801424c <prvInitialiseNewTask+0x94>
			{
				break;
 801424a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801424e:	2200      	movs	r2, #0
 8014250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014254:	e003      	b.n	801425e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014258:	2200      	movs	r2, #0
 801425a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014260:	2b37      	cmp	r3, #55	; 0x37
 8014262:	d901      	bls.n	8014268 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014264:	2337      	movs	r3, #55	; 0x37
 8014266:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801426c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014272:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014276:	2200      	movs	r2, #0
 8014278:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427c:	3304      	adds	r3, #4
 801427e:	4618      	mov	r0, r3
 8014280:	f7ff f8be 	bl	8013400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014286:	3318      	adds	r3, #24
 8014288:	4618      	mov	r0, r3
 801428a:	f7ff f8b9 	bl	8013400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014292:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014296:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801429c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80142a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a6:	2200      	movs	r2, #0
 80142a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80142aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ac:	2200      	movs	r2, #0
 80142ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80142b2:	683a      	ldr	r2, [r7, #0]
 80142b4:	68f9      	ldr	r1, [r7, #12]
 80142b6:	69b8      	ldr	r0, [r7, #24]
 80142b8:	f001 fb18 	bl	80158ec <pxPortInitialiseStack>
 80142bc:	4602      	mov	r2, r0
 80142be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80142c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d002      	beq.n	80142ce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80142c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142ce:	bf00      	nop
 80142d0:	3720      	adds	r7, #32
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
	...

080142d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80142e0:	f001 fc30 	bl	8015b44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80142e4:	4b2d      	ldr	r3, [pc, #180]	; (801439c <prvAddNewTaskToReadyList+0xc4>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	3301      	adds	r3, #1
 80142ea:	4a2c      	ldr	r2, [pc, #176]	; (801439c <prvAddNewTaskToReadyList+0xc4>)
 80142ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80142ee:	4b2c      	ldr	r3, [pc, #176]	; (80143a0 <prvAddNewTaskToReadyList+0xc8>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d109      	bne.n	801430a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80142f6:	4a2a      	ldr	r2, [pc, #168]	; (80143a0 <prvAddNewTaskToReadyList+0xc8>)
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80142fc:	4b27      	ldr	r3, [pc, #156]	; (801439c <prvAddNewTaskToReadyList+0xc4>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	2b01      	cmp	r3, #1
 8014302:	d110      	bne.n	8014326 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014304:	f000 fdce 	bl	8014ea4 <prvInitialiseTaskLists>
 8014308:	e00d      	b.n	8014326 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801430a:	4b26      	ldr	r3, [pc, #152]	; (80143a4 <prvAddNewTaskToReadyList+0xcc>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d109      	bne.n	8014326 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014312:	4b23      	ldr	r3, [pc, #140]	; (80143a0 <prvAddNewTaskToReadyList+0xc8>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801431c:	429a      	cmp	r2, r3
 801431e:	d802      	bhi.n	8014326 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014320:	4a1f      	ldr	r2, [pc, #124]	; (80143a0 <prvAddNewTaskToReadyList+0xc8>)
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014326:	4b20      	ldr	r3, [pc, #128]	; (80143a8 <prvAddNewTaskToReadyList+0xd0>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	3301      	adds	r3, #1
 801432c:	4a1e      	ldr	r2, [pc, #120]	; (80143a8 <prvAddNewTaskToReadyList+0xd0>)
 801432e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014330:	4b1d      	ldr	r3, [pc, #116]	; (80143a8 <prvAddNewTaskToReadyList+0xd0>)
 8014332:	681a      	ldr	r2, [r3, #0]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801433c:	4b1b      	ldr	r3, [pc, #108]	; (80143ac <prvAddNewTaskToReadyList+0xd4>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	429a      	cmp	r2, r3
 8014342:	d903      	bls.n	801434c <prvAddNewTaskToReadyList+0x74>
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014348:	4a18      	ldr	r2, [pc, #96]	; (80143ac <prvAddNewTaskToReadyList+0xd4>)
 801434a:	6013      	str	r3, [r2, #0]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014350:	4613      	mov	r3, r2
 8014352:	009b      	lsls	r3, r3, #2
 8014354:	4413      	add	r3, r2
 8014356:	009b      	lsls	r3, r3, #2
 8014358:	4a15      	ldr	r2, [pc, #84]	; (80143b0 <prvAddNewTaskToReadyList+0xd8>)
 801435a:	441a      	add	r2, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	3304      	adds	r3, #4
 8014360:	4619      	mov	r1, r3
 8014362:	4610      	mov	r0, r2
 8014364:	f7ff f859 	bl	801341a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014368:	f001 fc1c 	bl	8015ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801436c:	4b0d      	ldr	r3, [pc, #52]	; (80143a4 <prvAddNewTaskToReadyList+0xcc>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d00e      	beq.n	8014392 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014374:	4b0a      	ldr	r3, [pc, #40]	; (80143a0 <prvAddNewTaskToReadyList+0xc8>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801437e:	429a      	cmp	r2, r3
 8014380:	d207      	bcs.n	8014392 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014382:	4b0c      	ldr	r3, [pc, #48]	; (80143b4 <prvAddNewTaskToReadyList+0xdc>)
 8014384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014388:	601a      	str	r2, [r3, #0]
 801438a:	f3bf 8f4f 	dsb	sy
 801438e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014392:	bf00      	nop
 8014394:	3708      	adds	r7, #8
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}
 801439a:	bf00      	nop
 801439c:	24001c9c 	.word	0x24001c9c
 80143a0:	240017c8 	.word	0x240017c8
 80143a4:	24001ca8 	.word	0x24001ca8
 80143a8:	24001cb8 	.word	0x24001cb8
 80143ac:	24001ca4 	.word	0x24001ca4
 80143b0:	240017cc 	.word	0x240017cc
 80143b4:	e000ed04 	.word	0xe000ed04

080143b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b084      	sub	sp, #16
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80143c0:	2300      	movs	r3, #0
 80143c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d017      	beq.n	80143fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80143ca:	4b13      	ldr	r3, [pc, #76]	; (8014418 <vTaskDelay+0x60>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d00a      	beq.n	80143e8 <vTaskDelay+0x30>
	__asm volatile
 80143d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d6:	f383 8811 	msr	BASEPRI, r3
 80143da:	f3bf 8f6f 	isb	sy
 80143de:	f3bf 8f4f 	dsb	sy
 80143e2:	60bb      	str	r3, [r7, #8]
}
 80143e4:	bf00      	nop
 80143e6:	e7fe      	b.n	80143e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80143e8:	f000 f99a 	bl	8014720 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80143ec:	2100      	movs	r1, #0
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f000 feba 	bl	8015168 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80143f4:	f000 f9a2 	bl	801473c <xTaskResumeAll>
 80143f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d107      	bne.n	8014410 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014400:	4b06      	ldr	r3, [pc, #24]	; (801441c <vTaskDelay+0x64>)
 8014402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014406:	601a      	str	r2, [r3, #0]
 8014408:	f3bf 8f4f 	dsb	sy
 801440c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014410:	bf00      	nop
 8014412:	3710      	adds	r7, #16
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}
 8014418:	24001cc4 	.word	0x24001cc4
 801441c:	e000ed04 	.word	0xe000ed04

08014420 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014420:	b580      	push	{r7, lr}
 8014422:	b084      	sub	sp, #16
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014428:	f001 fb8c 	bl	8015b44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d102      	bne.n	8014438 <vTaskSuspend+0x18>
 8014432:	4b30      	ldr	r3, [pc, #192]	; (80144f4 <vTaskSuspend+0xd4>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	e000      	b.n	801443a <vTaskSuspend+0x1a>
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	3304      	adds	r3, #4
 8014440:	4618      	mov	r0, r3
 8014442:	f7ff f847 	bl	80134d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801444a:	2b00      	cmp	r3, #0
 801444c:	d004      	beq.n	8014458 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	3318      	adds	r3, #24
 8014452:	4618      	mov	r0, r3
 8014454:	f7ff f83e 	bl	80134d4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	3304      	adds	r3, #4
 801445c:	4619      	mov	r1, r3
 801445e:	4826      	ldr	r0, [pc, #152]	; (80144f8 <vTaskSuspend+0xd8>)
 8014460:	f7fe ffdb 	bl	801341a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801446a:	b2db      	uxtb	r3, r3
 801446c:	2b01      	cmp	r3, #1
 801446e:	d103      	bne.n	8014478 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	2200      	movs	r2, #0
 8014474:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014478:	f001 fb94 	bl	8015ba4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801447c:	4b1f      	ldr	r3, [pc, #124]	; (80144fc <vTaskSuspend+0xdc>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d005      	beq.n	8014490 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014484:	f001 fb5e 	bl	8015b44 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014488:	f000 fdaa 	bl	8014fe0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801448c:	f001 fb8a 	bl	8015ba4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014490:	4b18      	ldr	r3, [pc, #96]	; (80144f4 <vTaskSuspend+0xd4>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	68fa      	ldr	r2, [r7, #12]
 8014496:	429a      	cmp	r2, r3
 8014498:	d127      	bne.n	80144ea <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801449a:	4b18      	ldr	r3, [pc, #96]	; (80144fc <vTaskSuspend+0xdc>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d017      	beq.n	80144d2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80144a2:	4b17      	ldr	r3, [pc, #92]	; (8014500 <vTaskSuspend+0xe0>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d00a      	beq.n	80144c0 <vTaskSuspend+0xa0>
	__asm volatile
 80144aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ae:	f383 8811 	msr	BASEPRI, r3
 80144b2:	f3bf 8f6f 	isb	sy
 80144b6:	f3bf 8f4f 	dsb	sy
 80144ba:	60bb      	str	r3, [r7, #8]
}
 80144bc:	bf00      	nop
 80144be:	e7fe      	b.n	80144be <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80144c0:	4b10      	ldr	r3, [pc, #64]	; (8014504 <vTaskSuspend+0xe4>)
 80144c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144c6:	601a      	str	r2, [r3, #0]
 80144c8:	f3bf 8f4f 	dsb	sy
 80144cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80144d0:	e00b      	b.n	80144ea <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80144d2:	4b09      	ldr	r3, [pc, #36]	; (80144f8 <vTaskSuspend+0xd8>)
 80144d4:	681a      	ldr	r2, [r3, #0]
 80144d6:	4b0c      	ldr	r3, [pc, #48]	; (8014508 <vTaskSuspend+0xe8>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	429a      	cmp	r2, r3
 80144dc:	d103      	bne.n	80144e6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80144de:	4b05      	ldr	r3, [pc, #20]	; (80144f4 <vTaskSuspend+0xd4>)
 80144e0:	2200      	movs	r2, #0
 80144e2:	601a      	str	r2, [r3, #0]
	}
 80144e4:	e001      	b.n	80144ea <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80144e6:	f000 fa91 	bl	8014a0c <vTaskSwitchContext>
	}
 80144ea:	bf00      	nop
 80144ec:	3710      	adds	r7, #16
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	240017c8 	.word	0x240017c8
 80144f8:	24001c88 	.word	0x24001c88
 80144fc:	24001ca8 	.word	0x24001ca8
 8014500:	24001cc4 	.word	0x24001cc4
 8014504:	e000ed04 	.word	0xe000ed04
 8014508:	24001c9c 	.word	0x24001c9c

0801450c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801450c:	b480      	push	{r7}
 801450e:	b087      	sub	sp, #28
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014514:	2300      	movs	r3, #0
 8014516:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d10a      	bne.n	8014538 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014526:	f383 8811 	msr	BASEPRI, r3
 801452a:	f3bf 8f6f 	isb	sy
 801452e:	f3bf 8f4f 	dsb	sy
 8014532:	60fb      	str	r3, [r7, #12]
}
 8014534:	bf00      	nop
 8014536:	e7fe      	b.n	8014536 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	695b      	ldr	r3, [r3, #20]
 801453c:	4a0a      	ldr	r2, [pc, #40]	; (8014568 <prvTaskIsTaskSuspended+0x5c>)
 801453e:	4293      	cmp	r3, r2
 8014540:	d10a      	bne.n	8014558 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014546:	4a09      	ldr	r2, [pc, #36]	; (801456c <prvTaskIsTaskSuspended+0x60>)
 8014548:	4293      	cmp	r3, r2
 801454a:	d005      	beq.n	8014558 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801454c:	693b      	ldr	r3, [r7, #16]
 801454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014550:	2b00      	cmp	r3, #0
 8014552:	d101      	bne.n	8014558 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014554:	2301      	movs	r3, #1
 8014556:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014558:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801455a:	4618      	mov	r0, r3
 801455c:	371c      	adds	r7, #28
 801455e:	46bd      	mov	sp, r7
 8014560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014564:	4770      	bx	lr
 8014566:	bf00      	nop
 8014568:	24001c88 	.word	0x24001c88
 801456c:	24001c5c 	.word	0x24001c5c

08014570 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014570:	b580      	push	{r7, lr}
 8014572:	b08a      	sub	sp, #40	; 0x28
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014578:	2300      	movs	r3, #0
 801457a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d10a      	bne.n	801459c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801458a:	f383 8811 	msr	BASEPRI, r3
 801458e:	f3bf 8f6f 	isb	sy
 8014592:	f3bf 8f4f 	dsb	sy
 8014596:	61bb      	str	r3, [r7, #24]
}
 8014598:	bf00      	nop
 801459a:	e7fe      	b.n	801459a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801459c:	f001 fbb4 	bl	8015d08 <vPortValidateInterruptPriority>
	__asm volatile
 80145a0:	f3ef 8211 	mrs	r2, BASEPRI
 80145a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145a8:	f383 8811 	msr	BASEPRI, r3
 80145ac:	f3bf 8f6f 	isb	sy
 80145b0:	f3bf 8f4f 	dsb	sy
 80145b4:	617a      	str	r2, [r7, #20]
 80145b6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80145b8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80145ba:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80145bc:	6a38      	ldr	r0, [r7, #32]
 80145be:	f7ff ffa5 	bl	801450c <prvTaskIsTaskSuspended>
 80145c2:	4603      	mov	r3, r0
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d030      	beq.n	801462a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145c8:	4b1d      	ldr	r3, [pc, #116]	; (8014640 <xTaskResumeFromISR+0xd0>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d126      	bne.n	801461e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80145d0:	6a3b      	ldr	r3, [r7, #32]
 80145d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145d4:	4b1b      	ldr	r3, [pc, #108]	; (8014644 <xTaskResumeFromISR+0xd4>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145da:	429a      	cmp	r2, r3
 80145dc:	d301      	bcc.n	80145e2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80145de:	2301      	movs	r3, #1
 80145e0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145e2:	6a3b      	ldr	r3, [r7, #32]
 80145e4:	3304      	adds	r3, #4
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7fe ff74 	bl	80134d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80145ec:	6a3b      	ldr	r3, [r7, #32]
 80145ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145f0:	4b15      	ldr	r3, [pc, #84]	; (8014648 <xTaskResumeFromISR+0xd8>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	429a      	cmp	r2, r3
 80145f6:	d903      	bls.n	8014600 <xTaskResumeFromISR+0x90>
 80145f8:	6a3b      	ldr	r3, [r7, #32]
 80145fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145fc:	4a12      	ldr	r2, [pc, #72]	; (8014648 <xTaskResumeFromISR+0xd8>)
 80145fe:	6013      	str	r3, [r2, #0]
 8014600:	6a3b      	ldr	r3, [r7, #32]
 8014602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014604:	4613      	mov	r3, r2
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	4413      	add	r3, r2
 801460a:	009b      	lsls	r3, r3, #2
 801460c:	4a0f      	ldr	r2, [pc, #60]	; (801464c <xTaskResumeFromISR+0xdc>)
 801460e:	441a      	add	r2, r3
 8014610:	6a3b      	ldr	r3, [r7, #32]
 8014612:	3304      	adds	r3, #4
 8014614:	4619      	mov	r1, r3
 8014616:	4610      	mov	r0, r2
 8014618:	f7fe feff 	bl	801341a <vListInsertEnd>
 801461c:	e005      	b.n	801462a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801461e:	6a3b      	ldr	r3, [r7, #32]
 8014620:	3318      	adds	r3, #24
 8014622:	4619      	mov	r1, r3
 8014624:	480a      	ldr	r0, [pc, #40]	; (8014650 <xTaskResumeFromISR+0xe0>)
 8014626:	f7fe fef8 	bl	801341a <vListInsertEnd>
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	f383 8811 	msr	BASEPRI, r3
}
 8014634:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014638:	4618      	mov	r0, r3
 801463a:	3728      	adds	r7, #40	; 0x28
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}
 8014640:	24001cc4 	.word	0x24001cc4
 8014644:	240017c8 	.word	0x240017c8
 8014648:	24001ca4 	.word	0x24001ca4
 801464c:	240017cc 	.word	0x240017cc
 8014650:	24001c5c 	.word	0x24001c5c

08014654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b08a      	sub	sp, #40	; 0x28
 8014658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801465a:	2300      	movs	r3, #0
 801465c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801465e:	2300      	movs	r3, #0
 8014660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014662:	463a      	mov	r2, r7
 8014664:	1d39      	adds	r1, r7, #4
 8014666:	f107 0308 	add.w	r3, r7, #8
 801466a:	4618      	mov	r0, r3
 801466c:	f7fe fc86 	bl	8012f7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014670:	6839      	ldr	r1, [r7, #0]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	68ba      	ldr	r2, [r7, #8]
 8014676:	9202      	str	r2, [sp, #8]
 8014678:	9301      	str	r3, [sp, #4]
 801467a:	2300      	movs	r3, #0
 801467c:	9300      	str	r3, [sp, #0]
 801467e:	2300      	movs	r3, #0
 8014680:	460a      	mov	r2, r1
 8014682:	4921      	ldr	r1, [pc, #132]	; (8014708 <vTaskStartScheduler+0xb4>)
 8014684:	4821      	ldr	r0, [pc, #132]	; (801470c <vTaskStartScheduler+0xb8>)
 8014686:	f7ff fcf5 	bl	8014074 <xTaskCreateStatic>
 801468a:	4603      	mov	r3, r0
 801468c:	4a20      	ldr	r2, [pc, #128]	; (8014710 <vTaskStartScheduler+0xbc>)
 801468e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014690:	4b1f      	ldr	r3, [pc, #124]	; (8014710 <vTaskStartScheduler+0xbc>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d002      	beq.n	801469e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014698:	2301      	movs	r3, #1
 801469a:	617b      	str	r3, [r7, #20]
 801469c:	e001      	b.n	80146a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801469e:	2300      	movs	r3, #0
 80146a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80146a2:	697b      	ldr	r3, [r7, #20]
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d102      	bne.n	80146ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80146a8:	f000 fdb2 	bl	8015210 <xTimerCreateTimerTask>
 80146ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	2b01      	cmp	r3, #1
 80146b2:	d116      	bne.n	80146e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80146b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b8:	f383 8811 	msr	BASEPRI, r3
 80146bc:	f3bf 8f6f 	isb	sy
 80146c0:	f3bf 8f4f 	dsb	sy
 80146c4:	613b      	str	r3, [r7, #16]
}
 80146c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80146c8:	4b12      	ldr	r3, [pc, #72]	; (8014714 <vTaskStartScheduler+0xc0>)
 80146ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80146ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80146d0:	4b11      	ldr	r3, [pc, #68]	; (8014718 <vTaskStartScheduler+0xc4>)
 80146d2:	2201      	movs	r2, #1
 80146d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80146d6:	4b11      	ldr	r3, [pc, #68]	; (801471c <vTaskStartScheduler+0xc8>)
 80146d8:	2200      	movs	r2, #0
 80146da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80146dc:	f001 f990 	bl	8015a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80146e0:	e00e      	b.n	8014700 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146e8:	d10a      	bne.n	8014700 <vTaskStartScheduler+0xac>
	__asm volatile
 80146ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ee:	f383 8811 	msr	BASEPRI, r3
 80146f2:	f3bf 8f6f 	isb	sy
 80146f6:	f3bf 8f4f 	dsb	sy
 80146fa:	60fb      	str	r3, [r7, #12]
}
 80146fc:	bf00      	nop
 80146fe:	e7fe      	b.n	80146fe <vTaskStartScheduler+0xaa>
}
 8014700:	bf00      	nop
 8014702:	3718      	adds	r7, #24
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}
 8014708:	08016e6c 	.word	0x08016e6c
 801470c:	08014e75 	.word	0x08014e75
 8014710:	24001cc0 	.word	0x24001cc0
 8014714:	24001cbc 	.word	0x24001cbc
 8014718:	24001ca8 	.word	0x24001ca8
 801471c:	24001ca0 	.word	0x24001ca0

08014720 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014720:	b480      	push	{r7}
 8014722:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014724:	4b04      	ldr	r3, [pc, #16]	; (8014738 <vTaskSuspendAll+0x18>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	3301      	adds	r3, #1
 801472a:	4a03      	ldr	r2, [pc, #12]	; (8014738 <vTaskSuspendAll+0x18>)
 801472c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801472e:	bf00      	nop
 8014730:	46bd      	mov	sp, r7
 8014732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014736:	4770      	bx	lr
 8014738:	24001cc4 	.word	0x24001cc4

0801473c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014742:	2300      	movs	r3, #0
 8014744:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014746:	2300      	movs	r3, #0
 8014748:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801474a:	4b42      	ldr	r3, [pc, #264]	; (8014854 <xTaskResumeAll+0x118>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d10a      	bne.n	8014768 <xTaskResumeAll+0x2c>
	__asm volatile
 8014752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014756:	f383 8811 	msr	BASEPRI, r3
 801475a:	f3bf 8f6f 	isb	sy
 801475e:	f3bf 8f4f 	dsb	sy
 8014762:	603b      	str	r3, [r7, #0]
}
 8014764:	bf00      	nop
 8014766:	e7fe      	b.n	8014766 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014768:	f001 f9ec 	bl	8015b44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801476c:	4b39      	ldr	r3, [pc, #228]	; (8014854 <xTaskResumeAll+0x118>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	3b01      	subs	r3, #1
 8014772:	4a38      	ldr	r2, [pc, #224]	; (8014854 <xTaskResumeAll+0x118>)
 8014774:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014776:	4b37      	ldr	r3, [pc, #220]	; (8014854 <xTaskResumeAll+0x118>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d162      	bne.n	8014844 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801477e:	4b36      	ldr	r3, [pc, #216]	; (8014858 <xTaskResumeAll+0x11c>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d05e      	beq.n	8014844 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014786:	e02f      	b.n	80147e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014788:	4b34      	ldr	r3, [pc, #208]	; (801485c <xTaskResumeAll+0x120>)
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	68db      	ldr	r3, [r3, #12]
 801478e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	3318      	adds	r3, #24
 8014794:	4618      	mov	r0, r3
 8014796:	f7fe fe9d 	bl	80134d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	3304      	adds	r3, #4
 801479e:	4618      	mov	r0, r3
 80147a0:	f7fe fe98 	bl	80134d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147a8:	4b2d      	ldr	r3, [pc, #180]	; (8014860 <xTaskResumeAll+0x124>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d903      	bls.n	80147b8 <xTaskResumeAll+0x7c>
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147b4:	4a2a      	ldr	r2, [pc, #168]	; (8014860 <xTaskResumeAll+0x124>)
 80147b6:	6013      	str	r3, [r2, #0]
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147bc:	4613      	mov	r3, r2
 80147be:	009b      	lsls	r3, r3, #2
 80147c0:	4413      	add	r3, r2
 80147c2:	009b      	lsls	r3, r3, #2
 80147c4:	4a27      	ldr	r2, [pc, #156]	; (8014864 <xTaskResumeAll+0x128>)
 80147c6:	441a      	add	r2, r3
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	3304      	adds	r3, #4
 80147cc:	4619      	mov	r1, r3
 80147ce:	4610      	mov	r0, r2
 80147d0:	f7fe fe23 	bl	801341a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147d8:	4b23      	ldr	r3, [pc, #140]	; (8014868 <xTaskResumeAll+0x12c>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147de:	429a      	cmp	r2, r3
 80147e0:	d302      	bcc.n	80147e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80147e2:	4b22      	ldr	r3, [pc, #136]	; (801486c <xTaskResumeAll+0x130>)
 80147e4:	2201      	movs	r2, #1
 80147e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80147e8:	4b1c      	ldr	r3, [pc, #112]	; (801485c <xTaskResumeAll+0x120>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d1cb      	bne.n	8014788 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d001      	beq.n	80147fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80147f6:	f000 fbf3 	bl	8014fe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80147fa:	4b1d      	ldr	r3, [pc, #116]	; (8014870 <xTaskResumeAll+0x134>)
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d010      	beq.n	8014828 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014806:	f000 f847 	bl	8014898 <xTaskIncrementTick>
 801480a:	4603      	mov	r3, r0
 801480c:	2b00      	cmp	r3, #0
 801480e:	d002      	beq.n	8014816 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014810:	4b16      	ldr	r3, [pc, #88]	; (801486c <xTaskResumeAll+0x130>)
 8014812:	2201      	movs	r2, #1
 8014814:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	3b01      	subs	r3, #1
 801481a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d1f1      	bne.n	8014806 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014822:	4b13      	ldr	r3, [pc, #76]	; (8014870 <xTaskResumeAll+0x134>)
 8014824:	2200      	movs	r2, #0
 8014826:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014828:	4b10      	ldr	r3, [pc, #64]	; (801486c <xTaskResumeAll+0x130>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d009      	beq.n	8014844 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014830:	2301      	movs	r3, #1
 8014832:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014834:	4b0f      	ldr	r3, [pc, #60]	; (8014874 <xTaskResumeAll+0x138>)
 8014836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801483a:	601a      	str	r2, [r3, #0]
 801483c:	f3bf 8f4f 	dsb	sy
 8014840:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014844:	f001 f9ae 	bl	8015ba4 <vPortExitCritical>

	return xAlreadyYielded;
 8014848:	68bb      	ldr	r3, [r7, #8]
}
 801484a:	4618      	mov	r0, r3
 801484c:	3710      	adds	r7, #16
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}
 8014852:	bf00      	nop
 8014854:	24001cc4 	.word	0x24001cc4
 8014858:	24001c9c 	.word	0x24001c9c
 801485c:	24001c5c 	.word	0x24001c5c
 8014860:	24001ca4 	.word	0x24001ca4
 8014864:	240017cc 	.word	0x240017cc
 8014868:	240017c8 	.word	0x240017c8
 801486c:	24001cb0 	.word	0x24001cb0
 8014870:	24001cac 	.word	0x24001cac
 8014874:	e000ed04 	.word	0xe000ed04

08014878 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014878:	b480      	push	{r7}
 801487a:	b083      	sub	sp, #12
 801487c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801487e:	4b05      	ldr	r3, [pc, #20]	; (8014894 <xTaskGetTickCount+0x1c>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014884:	687b      	ldr	r3, [r7, #4]
}
 8014886:	4618      	mov	r0, r3
 8014888:	370c      	adds	r7, #12
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop
 8014894:	24001ca0 	.word	0x24001ca0

08014898 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b086      	sub	sp, #24
 801489c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801489e:	2300      	movs	r3, #0
 80148a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148a2:	4b4f      	ldr	r3, [pc, #316]	; (80149e0 <xTaskIncrementTick+0x148>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	f040 808f 	bne.w	80149ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80148ac:	4b4d      	ldr	r3, [pc, #308]	; (80149e4 <xTaskIncrementTick+0x14c>)
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	3301      	adds	r3, #1
 80148b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80148b4:	4a4b      	ldr	r2, [pc, #300]	; (80149e4 <xTaskIncrementTick+0x14c>)
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80148ba:	693b      	ldr	r3, [r7, #16]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d120      	bne.n	8014902 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80148c0:	4b49      	ldr	r3, [pc, #292]	; (80149e8 <xTaskIncrementTick+0x150>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d00a      	beq.n	80148e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80148ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ce:	f383 8811 	msr	BASEPRI, r3
 80148d2:	f3bf 8f6f 	isb	sy
 80148d6:	f3bf 8f4f 	dsb	sy
 80148da:	603b      	str	r3, [r7, #0]
}
 80148dc:	bf00      	nop
 80148de:	e7fe      	b.n	80148de <xTaskIncrementTick+0x46>
 80148e0:	4b41      	ldr	r3, [pc, #260]	; (80149e8 <xTaskIncrementTick+0x150>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	60fb      	str	r3, [r7, #12]
 80148e6:	4b41      	ldr	r3, [pc, #260]	; (80149ec <xTaskIncrementTick+0x154>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	4a3f      	ldr	r2, [pc, #252]	; (80149e8 <xTaskIncrementTick+0x150>)
 80148ec:	6013      	str	r3, [r2, #0]
 80148ee:	4a3f      	ldr	r2, [pc, #252]	; (80149ec <xTaskIncrementTick+0x154>)
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	6013      	str	r3, [r2, #0]
 80148f4:	4b3e      	ldr	r3, [pc, #248]	; (80149f0 <xTaskIncrementTick+0x158>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	3301      	adds	r3, #1
 80148fa:	4a3d      	ldr	r2, [pc, #244]	; (80149f0 <xTaskIncrementTick+0x158>)
 80148fc:	6013      	str	r3, [r2, #0]
 80148fe:	f000 fb6f 	bl	8014fe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014902:	4b3c      	ldr	r3, [pc, #240]	; (80149f4 <xTaskIncrementTick+0x15c>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	693a      	ldr	r2, [r7, #16]
 8014908:	429a      	cmp	r2, r3
 801490a:	d349      	bcc.n	80149a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801490c:	4b36      	ldr	r3, [pc, #216]	; (80149e8 <xTaskIncrementTick+0x150>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d104      	bne.n	8014920 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014916:	4b37      	ldr	r3, [pc, #220]	; (80149f4 <xTaskIncrementTick+0x15c>)
 8014918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801491c:	601a      	str	r2, [r3, #0]
					break;
 801491e:	e03f      	b.n	80149a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014920:	4b31      	ldr	r3, [pc, #196]	; (80149e8 <xTaskIncrementTick+0x150>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	68db      	ldr	r3, [r3, #12]
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014930:	693a      	ldr	r2, [r7, #16]
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	429a      	cmp	r2, r3
 8014936:	d203      	bcs.n	8014940 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014938:	4a2e      	ldr	r2, [pc, #184]	; (80149f4 <xTaskIncrementTick+0x15c>)
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801493e:	e02f      	b.n	80149a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	3304      	adds	r3, #4
 8014944:	4618      	mov	r0, r3
 8014946:	f7fe fdc5 	bl	80134d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801494e:	2b00      	cmp	r3, #0
 8014950:	d004      	beq.n	801495c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	3318      	adds	r3, #24
 8014956:	4618      	mov	r0, r3
 8014958:	f7fe fdbc 	bl	80134d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014960:	4b25      	ldr	r3, [pc, #148]	; (80149f8 <xTaskIncrementTick+0x160>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	429a      	cmp	r2, r3
 8014966:	d903      	bls.n	8014970 <xTaskIncrementTick+0xd8>
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801496c:	4a22      	ldr	r2, [pc, #136]	; (80149f8 <xTaskIncrementTick+0x160>)
 801496e:	6013      	str	r3, [r2, #0]
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014974:	4613      	mov	r3, r2
 8014976:	009b      	lsls	r3, r3, #2
 8014978:	4413      	add	r3, r2
 801497a:	009b      	lsls	r3, r3, #2
 801497c:	4a1f      	ldr	r2, [pc, #124]	; (80149fc <xTaskIncrementTick+0x164>)
 801497e:	441a      	add	r2, r3
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	3304      	adds	r3, #4
 8014984:	4619      	mov	r1, r3
 8014986:	4610      	mov	r0, r2
 8014988:	f7fe fd47 	bl	801341a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014990:	4b1b      	ldr	r3, [pc, #108]	; (8014a00 <xTaskIncrementTick+0x168>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014996:	429a      	cmp	r2, r3
 8014998:	d3b8      	bcc.n	801490c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801499a:	2301      	movs	r3, #1
 801499c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801499e:	e7b5      	b.n	801490c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80149a0:	4b17      	ldr	r3, [pc, #92]	; (8014a00 <xTaskIncrementTick+0x168>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149a6:	4915      	ldr	r1, [pc, #84]	; (80149fc <xTaskIncrementTick+0x164>)
 80149a8:	4613      	mov	r3, r2
 80149aa:	009b      	lsls	r3, r3, #2
 80149ac:	4413      	add	r3, r2
 80149ae:	009b      	lsls	r3, r3, #2
 80149b0:	440b      	add	r3, r1
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d901      	bls.n	80149bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80149b8:	2301      	movs	r3, #1
 80149ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80149bc:	4b11      	ldr	r3, [pc, #68]	; (8014a04 <xTaskIncrementTick+0x16c>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d007      	beq.n	80149d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80149c4:	2301      	movs	r3, #1
 80149c6:	617b      	str	r3, [r7, #20]
 80149c8:	e004      	b.n	80149d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80149ca:	4b0f      	ldr	r3, [pc, #60]	; (8014a08 <xTaskIncrementTick+0x170>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	3301      	adds	r3, #1
 80149d0:	4a0d      	ldr	r2, [pc, #52]	; (8014a08 <xTaskIncrementTick+0x170>)
 80149d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80149d4:	697b      	ldr	r3, [r7, #20]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3718      	adds	r7, #24
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	24001cc4 	.word	0x24001cc4
 80149e4:	24001ca0 	.word	0x24001ca0
 80149e8:	24001c54 	.word	0x24001c54
 80149ec:	24001c58 	.word	0x24001c58
 80149f0:	24001cb4 	.word	0x24001cb4
 80149f4:	24001cbc 	.word	0x24001cbc
 80149f8:	24001ca4 	.word	0x24001ca4
 80149fc:	240017cc 	.word	0x240017cc
 8014a00:	240017c8 	.word	0x240017c8
 8014a04:	24001cb0 	.word	0x24001cb0
 8014a08:	24001cac 	.word	0x24001cac

08014a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b085      	sub	sp, #20
 8014a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014a12:	4b28      	ldr	r3, [pc, #160]	; (8014ab4 <vTaskSwitchContext+0xa8>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d003      	beq.n	8014a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014a1a:	4b27      	ldr	r3, [pc, #156]	; (8014ab8 <vTaskSwitchContext+0xac>)
 8014a1c:	2201      	movs	r2, #1
 8014a1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014a20:	e041      	b.n	8014aa6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014a22:	4b25      	ldr	r3, [pc, #148]	; (8014ab8 <vTaskSwitchContext+0xac>)
 8014a24:	2200      	movs	r2, #0
 8014a26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a28:	4b24      	ldr	r3, [pc, #144]	; (8014abc <vTaskSwitchContext+0xb0>)
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	60fb      	str	r3, [r7, #12]
 8014a2e:	e010      	b.n	8014a52 <vTaskSwitchContext+0x46>
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d10a      	bne.n	8014a4c <vTaskSwitchContext+0x40>
	__asm volatile
 8014a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a3a:	f383 8811 	msr	BASEPRI, r3
 8014a3e:	f3bf 8f6f 	isb	sy
 8014a42:	f3bf 8f4f 	dsb	sy
 8014a46:	607b      	str	r3, [r7, #4]
}
 8014a48:	bf00      	nop
 8014a4a:	e7fe      	b.n	8014a4a <vTaskSwitchContext+0x3e>
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	3b01      	subs	r3, #1
 8014a50:	60fb      	str	r3, [r7, #12]
 8014a52:	491b      	ldr	r1, [pc, #108]	; (8014ac0 <vTaskSwitchContext+0xb4>)
 8014a54:	68fa      	ldr	r2, [r7, #12]
 8014a56:	4613      	mov	r3, r2
 8014a58:	009b      	lsls	r3, r3, #2
 8014a5a:	4413      	add	r3, r2
 8014a5c:	009b      	lsls	r3, r3, #2
 8014a5e:	440b      	add	r3, r1
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d0e4      	beq.n	8014a30 <vTaskSwitchContext+0x24>
 8014a66:	68fa      	ldr	r2, [r7, #12]
 8014a68:	4613      	mov	r3, r2
 8014a6a:	009b      	lsls	r3, r3, #2
 8014a6c:	4413      	add	r3, r2
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	4a13      	ldr	r2, [pc, #76]	; (8014ac0 <vTaskSwitchContext+0xb4>)
 8014a72:	4413      	add	r3, r2
 8014a74:	60bb      	str	r3, [r7, #8]
 8014a76:	68bb      	ldr	r3, [r7, #8]
 8014a78:	685b      	ldr	r3, [r3, #4]
 8014a7a:	685a      	ldr	r2, [r3, #4]
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	605a      	str	r2, [r3, #4]
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	685a      	ldr	r2, [r3, #4]
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	3308      	adds	r3, #8
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d104      	bne.n	8014a96 <vTaskSwitchContext+0x8a>
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	685b      	ldr	r3, [r3, #4]
 8014a90:	685a      	ldr	r2, [r3, #4]
 8014a92:	68bb      	ldr	r3, [r7, #8]
 8014a94:	605a      	str	r2, [r3, #4]
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	685b      	ldr	r3, [r3, #4]
 8014a9a:	68db      	ldr	r3, [r3, #12]
 8014a9c:	4a09      	ldr	r2, [pc, #36]	; (8014ac4 <vTaskSwitchContext+0xb8>)
 8014a9e:	6013      	str	r3, [r2, #0]
 8014aa0:	4a06      	ldr	r2, [pc, #24]	; (8014abc <vTaskSwitchContext+0xb0>)
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	6013      	str	r3, [r2, #0]
}
 8014aa6:	bf00      	nop
 8014aa8:	3714      	adds	r7, #20
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab0:	4770      	bx	lr
 8014ab2:	bf00      	nop
 8014ab4:	24001cc4 	.word	0x24001cc4
 8014ab8:	24001cb0 	.word	0x24001cb0
 8014abc:	24001ca4 	.word	0x24001ca4
 8014ac0:	240017cc 	.word	0x240017cc
 8014ac4:	240017c8 	.word	0x240017c8

08014ac8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b084      	sub	sp, #16
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d10a      	bne.n	8014aee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014adc:	f383 8811 	msr	BASEPRI, r3
 8014ae0:	f3bf 8f6f 	isb	sy
 8014ae4:	f3bf 8f4f 	dsb	sy
 8014ae8:	60fb      	str	r3, [r7, #12]
}
 8014aea:	bf00      	nop
 8014aec:	e7fe      	b.n	8014aec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014aee:	4b07      	ldr	r3, [pc, #28]	; (8014b0c <vTaskPlaceOnEventList+0x44>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	3318      	adds	r3, #24
 8014af4:	4619      	mov	r1, r3
 8014af6:	6878      	ldr	r0, [r7, #4]
 8014af8:	f7fe fcb3 	bl	8013462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014afc:	2101      	movs	r1, #1
 8014afe:	6838      	ldr	r0, [r7, #0]
 8014b00:	f000 fb32 	bl	8015168 <prvAddCurrentTaskToDelayedList>
}
 8014b04:	bf00      	nop
 8014b06:	3710      	adds	r7, #16
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	240017c8 	.word	0x240017c8

08014b10 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b086      	sub	sp, #24
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d10a      	bne.n	8014b38 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b26:	f383 8811 	msr	BASEPRI, r3
 8014b2a:	f3bf 8f6f 	isb	sy
 8014b2e:	f3bf 8f4f 	dsb	sy
 8014b32:	617b      	str	r3, [r7, #20]
}
 8014b34:	bf00      	nop
 8014b36:	e7fe      	b.n	8014b36 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014b38:	4b11      	ldr	r3, [pc, #68]	; (8014b80 <vTaskPlaceOnUnorderedEventList+0x70>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d10a      	bne.n	8014b56 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b44:	f383 8811 	msr	BASEPRI, r3
 8014b48:	f3bf 8f6f 	isb	sy
 8014b4c:	f3bf 8f4f 	dsb	sy
 8014b50:	613b      	str	r3, [r7, #16]
}
 8014b52:	bf00      	nop
 8014b54:	e7fe      	b.n	8014b54 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014b56:	4b0b      	ldr	r3, [pc, #44]	; (8014b84 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	68ba      	ldr	r2, [r7, #8]
 8014b5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014b60:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014b62:	4b08      	ldr	r3, [pc, #32]	; (8014b84 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	3318      	adds	r3, #24
 8014b68:	4619      	mov	r1, r3
 8014b6a:	68f8      	ldr	r0, [r7, #12]
 8014b6c:	f7fe fc55 	bl	801341a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014b70:	2101      	movs	r1, #1
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f000 faf8 	bl	8015168 <prvAddCurrentTaskToDelayedList>
}
 8014b78:	bf00      	nop
 8014b7a:	3718      	adds	r7, #24
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}
 8014b80:	24001cc4 	.word	0x24001cc4
 8014b84:	240017c8 	.word	0x240017c8

08014b88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b086      	sub	sp, #24
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	60f8      	str	r0, [r7, #12]
 8014b90:	60b9      	str	r1, [r7, #8]
 8014b92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d10a      	bne.n	8014bb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b9e:	f383 8811 	msr	BASEPRI, r3
 8014ba2:	f3bf 8f6f 	isb	sy
 8014ba6:	f3bf 8f4f 	dsb	sy
 8014baa:	617b      	str	r3, [r7, #20]
}
 8014bac:	bf00      	nop
 8014bae:	e7fe      	b.n	8014bae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014bb0:	4b0a      	ldr	r3, [pc, #40]	; (8014bdc <vTaskPlaceOnEventListRestricted+0x54>)
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	3318      	adds	r3, #24
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f7fe fc2e 	bl	801341a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d002      	beq.n	8014bca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014bca:	6879      	ldr	r1, [r7, #4]
 8014bcc:	68b8      	ldr	r0, [r7, #8]
 8014bce:	f000 facb 	bl	8015168 <prvAddCurrentTaskToDelayedList>
	}
 8014bd2:	bf00      	nop
 8014bd4:	3718      	adds	r7, #24
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	240017c8 	.word	0x240017c8

08014be0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b086      	sub	sp, #24
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	68db      	ldr	r3, [r3, #12]
 8014bee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d10a      	bne.n	8014c0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bfa:	f383 8811 	msr	BASEPRI, r3
 8014bfe:	f3bf 8f6f 	isb	sy
 8014c02:	f3bf 8f4f 	dsb	sy
 8014c06:	60fb      	str	r3, [r7, #12]
}
 8014c08:	bf00      	nop
 8014c0a:	e7fe      	b.n	8014c0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	3318      	adds	r3, #24
 8014c10:	4618      	mov	r0, r3
 8014c12:	f7fe fc5f 	bl	80134d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c16:	4b1e      	ldr	r3, [pc, #120]	; (8014c90 <xTaskRemoveFromEventList+0xb0>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d11d      	bne.n	8014c5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014c1e:	693b      	ldr	r3, [r7, #16]
 8014c20:	3304      	adds	r3, #4
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7fe fc56 	bl	80134d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014c28:	693b      	ldr	r3, [r7, #16]
 8014c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c2c:	4b19      	ldr	r3, [pc, #100]	; (8014c94 <xTaskRemoveFromEventList+0xb4>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	429a      	cmp	r2, r3
 8014c32:	d903      	bls.n	8014c3c <xTaskRemoveFromEventList+0x5c>
 8014c34:	693b      	ldr	r3, [r7, #16]
 8014c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c38:	4a16      	ldr	r2, [pc, #88]	; (8014c94 <xTaskRemoveFromEventList+0xb4>)
 8014c3a:	6013      	str	r3, [r2, #0]
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c40:	4613      	mov	r3, r2
 8014c42:	009b      	lsls	r3, r3, #2
 8014c44:	4413      	add	r3, r2
 8014c46:	009b      	lsls	r3, r3, #2
 8014c48:	4a13      	ldr	r2, [pc, #76]	; (8014c98 <xTaskRemoveFromEventList+0xb8>)
 8014c4a:	441a      	add	r2, r3
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	3304      	adds	r3, #4
 8014c50:	4619      	mov	r1, r3
 8014c52:	4610      	mov	r0, r2
 8014c54:	f7fe fbe1 	bl	801341a <vListInsertEnd>
 8014c58:	e005      	b.n	8014c66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	3318      	adds	r3, #24
 8014c5e:	4619      	mov	r1, r3
 8014c60:	480e      	ldr	r0, [pc, #56]	; (8014c9c <xTaskRemoveFromEventList+0xbc>)
 8014c62:	f7fe fbda 	bl	801341a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c66:	693b      	ldr	r3, [r7, #16]
 8014c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c6a:	4b0d      	ldr	r3, [pc, #52]	; (8014ca0 <xTaskRemoveFromEventList+0xc0>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d905      	bls.n	8014c80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014c74:	2301      	movs	r3, #1
 8014c76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014c78:	4b0a      	ldr	r3, [pc, #40]	; (8014ca4 <xTaskRemoveFromEventList+0xc4>)
 8014c7a:	2201      	movs	r2, #1
 8014c7c:	601a      	str	r2, [r3, #0]
 8014c7e:	e001      	b.n	8014c84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014c80:	2300      	movs	r3, #0
 8014c82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014c84:	697b      	ldr	r3, [r7, #20]
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	3718      	adds	r7, #24
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	bf00      	nop
 8014c90:	24001cc4 	.word	0x24001cc4
 8014c94:	24001ca4 	.word	0x24001ca4
 8014c98:	240017cc 	.word	0x240017cc
 8014c9c:	24001c5c 	.word	0x24001c5c
 8014ca0:	240017c8 	.word	0x240017c8
 8014ca4:	24001cb0 	.word	0x24001cb0

08014ca8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b086      	sub	sp, #24
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
 8014cb0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014cb2:	4b29      	ldr	r3, [pc, #164]	; (8014d58 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d10a      	bne.n	8014cd0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cbe:	f383 8811 	msr	BASEPRI, r3
 8014cc2:	f3bf 8f6f 	isb	sy
 8014cc6:	f3bf 8f4f 	dsb	sy
 8014cca:	613b      	str	r3, [r7, #16]
}
 8014ccc:	bf00      	nop
 8014cce:	e7fe      	b.n	8014cce <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014cd0:	683b      	ldr	r3, [r7, #0]
 8014cd2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	68db      	ldr	r3, [r3, #12]
 8014cde:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014ce0:	697b      	ldr	r3, [r7, #20]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d10a      	bne.n	8014cfc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cea:	f383 8811 	msr	BASEPRI, r3
 8014cee:	f3bf 8f6f 	isb	sy
 8014cf2:	f3bf 8f4f 	dsb	sy
 8014cf6:	60fb      	str	r3, [r7, #12]
}
 8014cf8:	bf00      	nop
 8014cfa:	e7fe      	b.n	8014cfa <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f7fe fbe9 	bl	80134d4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	3304      	adds	r3, #4
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fe fbe4 	bl	80134d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d10:	4b12      	ldr	r3, [pc, #72]	; (8014d5c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d903      	bls.n	8014d20 <vTaskRemoveFromUnorderedEventList+0x78>
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d1c:	4a0f      	ldr	r2, [pc, #60]	; (8014d5c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014d1e:	6013      	str	r3, [r2, #0]
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d24:	4613      	mov	r3, r2
 8014d26:	009b      	lsls	r3, r3, #2
 8014d28:	4413      	add	r3, r2
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	4a0c      	ldr	r2, [pc, #48]	; (8014d60 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014d2e:	441a      	add	r2, r3
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	3304      	adds	r3, #4
 8014d34:	4619      	mov	r1, r3
 8014d36:	4610      	mov	r0, r2
 8014d38:	f7fe fb6f 	bl	801341a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d40:	4b08      	ldr	r3, [pc, #32]	; (8014d64 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d902      	bls.n	8014d50 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014d4a:	4b07      	ldr	r3, [pc, #28]	; (8014d68 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014d4c:	2201      	movs	r2, #1
 8014d4e:	601a      	str	r2, [r3, #0]
	}
}
 8014d50:	bf00      	nop
 8014d52:	3718      	adds	r7, #24
 8014d54:	46bd      	mov	sp, r7
 8014d56:	bd80      	pop	{r7, pc}
 8014d58:	24001cc4 	.word	0x24001cc4
 8014d5c:	24001ca4 	.word	0x24001ca4
 8014d60:	240017cc 	.word	0x240017cc
 8014d64:	240017c8 	.word	0x240017c8
 8014d68:	24001cb0 	.word	0x24001cb0

08014d6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014d6c:	b480      	push	{r7}
 8014d6e:	b083      	sub	sp, #12
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014d74:	4b06      	ldr	r3, [pc, #24]	; (8014d90 <vTaskInternalSetTimeOutState+0x24>)
 8014d76:	681a      	ldr	r2, [r3, #0]
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014d7c:	4b05      	ldr	r3, [pc, #20]	; (8014d94 <vTaskInternalSetTimeOutState+0x28>)
 8014d7e:	681a      	ldr	r2, [r3, #0]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	605a      	str	r2, [r3, #4]
}
 8014d84:	bf00      	nop
 8014d86:	370c      	adds	r7, #12
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr
 8014d90:	24001cb4 	.word	0x24001cb4
 8014d94:	24001ca0 	.word	0x24001ca0

08014d98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b088      	sub	sp, #32
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d10a      	bne.n	8014dbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dac:	f383 8811 	msr	BASEPRI, r3
 8014db0:	f3bf 8f6f 	isb	sy
 8014db4:	f3bf 8f4f 	dsb	sy
 8014db8:	613b      	str	r3, [r7, #16]
}
 8014dba:	bf00      	nop
 8014dbc:	e7fe      	b.n	8014dbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d10a      	bne.n	8014dda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dc8:	f383 8811 	msr	BASEPRI, r3
 8014dcc:	f3bf 8f6f 	isb	sy
 8014dd0:	f3bf 8f4f 	dsb	sy
 8014dd4:	60fb      	str	r3, [r7, #12]
}
 8014dd6:	bf00      	nop
 8014dd8:	e7fe      	b.n	8014dd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014dda:	f000 feb3 	bl	8015b44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014dde:	4b1d      	ldr	r3, [pc, #116]	; (8014e54 <xTaskCheckForTimeOut+0xbc>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	685b      	ldr	r3, [r3, #4]
 8014de8:	69ba      	ldr	r2, [r7, #24]
 8014dea:	1ad3      	subs	r3, r2, r3
 8014dec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014df6:	d102      	bne.n	8014dfe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014df8:	2300      	movs	r3, #0
 8014dfa:	61fb      	str	r3, [r7, #28]
 8014dfc:	e023      	b.n	8014e46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681a      	ldr	r2, [r3, #0]
 8014e02:	4b15      	ldr	r3, [pc, #84]	; (8014e58 <xTaskCheckForTimeOut+0xc0>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	429a      	cmp	r2, r3
 8014e08:	d007      	beq.n	8014e1a <xTaskCheckForTimeOut+0x82>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	685b      	ldr	r3, [r3, #4]
 8014e0e:	69ba      	ldr	r2, [r7, #24]
 8014e10:	429a      	cmp	r2, r3
 8014e12:	d302      	bcc.n	8014e1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014e14:	2301      	movs	r3, #1
 8014e16:	61fb      	str	r3, [r7, #28]
 8014e18:	e015      	b.n	8014e46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	697a      	ldr	r2, [r7, #20]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d20b      	bcs.n	8014e3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014e24:	683b      	ldr	r3, [r7, #0]
 8014e26:	681a      	ldr	r2, [r3, #0]
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	1ad2      	subs	r2, r2, r3
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f7ff ff9b 	bl	8014d6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014e36:	2300      	movs	r3, #0
 8014e38:	61fb      	str	r3, [r7, #28]
 8014e3a:	e004      	b.n	8014e46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014e42:	2301      	movs	r3, #1
 8014e44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014e46:	f000 fead 	bl	8015ba4 <vPortExitCritical>

	return xReturn;
 8014e4a:	69fb      	ldr	r3, [r7, #28]
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3720      	adds	r7, #32
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}
 8014e54:	24001ca0 	.word	0x24001ca0
 8014e58:	24001cb4 	.word	0x24001cb4

08014e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014e5c:	b480      	push	{r7}
 8014e5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014e60:	4b03      	ldr	r3, [pc, #12]	; (8014e70 <vTaskMissedYield+0x14>)
 8014e62:	2201      	movs	r2, #1
 8014e64:	601a      	str	r2, [r3, #0]
}
 8014e66:	bf00      	nop
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr
 8014e70:	24001cb0 	.word	0x24001cb0

08014e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014e7c:	f000 f852 	bl	8014f24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014e80:	4b06      	ldr	r3, [pc, #24]	; (8014e9c <prvIdleTask+0x28>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	2b01      	cmp	r3, #1
 8014e86:	d9f9      	bls.n	8014e7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014e88:	4b05      	ldr	r3, [pc, #20]	; (8014ea0 <prvIdleTask+0x2c>)
 8014e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e8e:	601a      	str	r2, [r3, #0]
 8014e90:	f3bf 8f4f 	dsb	sy
 8014e94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014e98:	e7f0      	b.n	8014e7c <prvIdleTask+0x8>
 8014e9a:	bf00      	nop
 8014e9c:	240017cc 	.word	0x240017cc
 8014ea0:	e000ed04 	.word	0xe000ed04

08014ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014eaa:	2300      	movs	r3, #0
 8014eac:	607b      	str	r3, [r7, #4]
 8014eae:	e00c      	b.n	8014eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014eb0:	687a      	ldr	r2, [r7, #4]
 8014eb2:	4613      	mov	r3, r2
 8014eb4:	009b      	lsls	r3, r3, #2
 8014eb6:	4413      	add	r3, r2
 8014eb8:	009b      	lsls	r3, r3, #2
 8014eba:	4a12      	ldr	r2, [pc, #72]	; (8014f04 <prvInitialiseTaskLists+0x60>)
 8014ebc:	4413      	add	r3, r2
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7fe fa7e 	bl	80133c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	607b      	str	r3, [r7, #4]
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2b37      	cmp	r3, #55	; 0x37
 8014ece:	d9ef      	bls.n	8014eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014ed0:	480d      	ldr	r0, [pc, #52]	; (8014f08 <prvInitialiseTaskLists+0x64>)
 8014ed2:	f7fe fa75 	bl	80133c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014ed6:	480d      	ldr	r0, [pc, #52]	; (8014f0c <prvInitialiseTaskLists+0x68>)
 8014ed8:	f7fe fa72 	bl	80133c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014edc:	480c      	ldr	r0, [pc, #48]	; (8014f10 <prvInitialiseTaskLists+0x6c>)
 8014ede:	f7fe fa6f 	bl	80133c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014ee2:	480c      	ldr	r0, [pc, #48]	; (8014f14 <prvInitialiseTaskLists+0x70>)
 8014ee4:	f7fe fa6c 	bl	80133c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014ee8:	480b      	ldr	r0, [pc, #44]	; (8014f18 <prvInitialiseTaskLists+0x74>)
 8014eea:	f7fe fa69 	bl	80133c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014eee:	4b0b      	ldr	r3, [pc, #44]	; (8014f1c <prvInitialiseTaskLists+0x78>)
 8014ef0:	4a05      	ldr	r2, [pc, #20]	; (8014f08 <prvInitialiseTaskLists+0x64>)
 8014ef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014ef4:	4b0a      	ldr	r3, [pc, #40]	; (8014f20 <prvInitialiseTaskLists+0x7c>)
 8014ef6:	4a05      	ldr	r2, [pc, #20]	; (8014f0c <prvInitialiseTaskLists+0x68>)
 8014ef8:	601a      	str	r2, [r3, #0]
}
 8014efa:	bf00      	nop
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	240017cc 	.word	0x240017cc
 8014f08:	24001c2c 	.word	0x24001c2c
 8014f0c:	24001c40 	.word	0x24001c40
 8014f10:	24001c5c 	.word	0x24001c5c
 8014f14:	24001c70 	.word	0x24001c70
 8014f18:	24001c88 	.word	0x24001c88
 8014f1c:	24001c54 	.word	0x24001c54
 8014f20:	24001c58 	.word	0x24001c58

08014f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b082      	sub	sp, #8
 8014f28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f2a:	e019      	b.n	8014f60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014f2c:	f000 fe0a 	bl	8015b44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f30:	4b10      	ldr	r3, [pc, #64]	; (8014f74 <prvCheckTasksWaitingTermination+0x50>)
 8014f32:	68db      	ldr	r3, [r3, #12]
 8014f34:	68db      	ldr	r3, [r3, #12]
 8014f36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	3304      	adds	r3, #4
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f7fe fac9 	bl	80134d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014f42:	4b0d      	ldr	r3, [pc, #52]	; (8014f78 <prvCheckTasksWaitingTermination+0x54>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	3b01      	subs	r3, #1
 8014f48:	4a0b      	ldr	r2, [pc, #44]	; (8014f78 <prvCheckTasksWaitingTermination+0x54>)
 8014f4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014f4c:	4b0b      	ldr	r3, [pc, #44]	; (8014f7c <prvCheckTasksWaitingTermination+0x58>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	3b01      	subs	r3, #1
 8014f52:	4a0a      	ldr	r2, [pc, #40]	; (8014f7c <prvCheckTasksWaitingTermination+0x58>)
 8014f54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014f56:	f000 fe25 	bl	8015ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f000 f810 	bl	8014f80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f60:	4b06      	ldr	r3, [pc, #24]	; (8014f7c <prvCheckTasksWaitingTermination+0x58>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d1e1      	bne.n	8014f2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014f68:	bf00      	nop
 8014f6a:	bf00      	nop
 8014f6c:	3708      	adds	r7, #8
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	24001c70 	.word	0x24001c70
 8014f78:	24001c9c 	.word	0x24001c9c
 8014f7c:	24001c84 	.word	0x24001c84

08014f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b084      	sub	sp, #16
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d108      	bne.n	8014fa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f96:	4618      	mov	r0, r3
 8014f98:	f000 ffc2 	bl	8015f20 <vPortFree>
				vPortFree( pxTCB );
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f000 ffbf 	bl	8015f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014fa2:	e018      	b.n	8014fd6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014faa:	2b01      	cmp	r3, #1
 8014fac:	d103      	bne.n	8014fb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f000 ffb6 	bl	8015f20 <vPortFree>
	}
 8014fb4:	e00f      	b.n	8014fd6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014fbc:	2b02      	cmp	r3, #2
 8014fbe:	d00a      	beq.n	8014fd6 <prvDeleteTCB+0x56>
	__asm volatile
 8014fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fc4:	f383 8811 	msr	BASEPRI, r3
 8014fc8:	f3bf 8f6f 	isb	sy
 8014fcc:	f3bf 8f4f 	dsb	sy
 8014fd0:	60fb      	str	r3, [r7, #12]
}
 8014fd2:	bf00      	nop
 8014fd4:	e7fe      	b.n	8014fd4 <prvDeleteTCB+0x54>
	}
 8014fd6:	bf00      	nop
 8014fd8:	3710      	adds	r7, #16
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}
	...

08014fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014fe6:	4b0c      	ldr	r3, [pc, #48]	; (8015018 <prvResetNextTaskUnblockTime+0x38>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d104      	bne.n	8014ffa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014ff0:	4b0a      	ldr	r3, [pc, #40]	; (801501c <prvResetNextTaskUnblockTime+0x3c>)
 8014ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ff6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014ff8:	e008      	b.n	801500c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ffa:	4b07      	ldr	r3, [pc, #28]	; (8015018 <prvResetNextTaskUnblockTime+0x38>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	68db      	ldr	r3, [r3, #12]
 8015000:	68db      	ldr	r3, [r3, #12]
 8015002:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	685b      	ldr	r3, [r3, #4]
 8015008:	4a04      	ldr	r2, [pc, #16]	; (801501c <prvResetNextTaskUnblockTime+0x3c>)
 801500a:	6013      	str	r3, [r2, #0]
}
 801500c:	bf00      	nop
 801500e:	370c      	adds	r7, #12
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr
 8015018:	24001c54 	.word	0x24001c54
 801501c:	24001cbc 	.word	0x24001cbc

08015020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015020:	b480      	push	{r7}
 8015022:	b083      	sub	sp, #12
 8015024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015026:	4b0b      	ldr	r3, [pc, #44]	; (8015054 <xTaskGetSchedulerState+0x34>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d102      	bne.n	8015034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801502e:	2301      	movs	r3, #1
 8015030:	607b      	str	r3, [r7, #4]
 8015032:	e008      	b.n	8015046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015034:	4b08      	ldr	r3, [pc, #32]	; (8015058 <xTaskGetSchedulerState+0x38>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d102      	bne.n	8015042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801503c:	2302      	movs	r3, #2
 801503e:	607b      	str	r3, [r7, #4]
 8015040:	e001      	b.n	8015046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015042:	2300      	movs	r3, #0
 8015044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015046:	687b      	ldr	r3, [r7, #4]
	}
 8015048:	4618      	mov	r0, r3
 801504a:	370c      	adds	r7, #12
 801504c:	46bd      	mov	sp, r7
 801504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015052:	4770      	bx	lr
 8015054:	24001ca8 	.word	0x24001ca8
 8015058:	24001cc4 	.word	0x24001cc4

0801505c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801505c:	b580      	push	{r7, lr}
 801505e:	b086      	sub	sp, #24
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015068:	2300      	movs	r3, #0
 801506a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d056      	beq.n	8015120 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015072:	4b2e      	ldr	r3, [pc, #184]	; (801512c <xTaskPriorityDisinherit+0xd0>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	693a      	ldr	r2, [r7, #16]
 8015078:	429a      	cmp	r2, r3
 801507a:	d00a      	beq.n	8015092 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015080:	f383 8811 	msr	BASEPRI, r3
 8015084:	f3bf 8f6f 	isb	sy
 8015088:	f3bf 8f4f 	dsb	sy
 801508c:	60fb      	str	r3, [r7, #12]
}
 801508e:	bf00      	nop
 8015090:	e7fe      	b.n	8015090 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015092:	693b      	ldr	r3, [r7, #16]
 8015094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015096:	2b00      	cmp	r3, #0
 8015098:	d10a      	bne.n	80150b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801509e:	f383 8811 	msr	BASEPRI, r3
 80150a2:	f3bf 8f6f 	isb	sy
 80150a6:	f3bf 8f4f 	dsb	sy
 80150aa:	60bb      	str	r3, [r7, #8]
}
 80150ac:	bf00      	nop
 80150ae:	e7fe      	b.n	80150ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150b4:	1e5a      	subs	r2, r3, #1
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d02c      	beq.n	8015120 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80150c6:	693b      	ldr	r3, [r7, #16]
 80150c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d128      	bne.n	8015120 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150ce:	693b      	ldr	r3, [r7, #16]
 80150d0:	3304      	adds	r3, #4
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7fe f9fe 	bl	80134d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80150d8:	693b      	ldr	r3, [r7, #16]
 80150da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80150e8:	693b      	ldr	r3, [r7, #16]
 80150ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150f0:	4b0f      	ldr	r3, [pc, #60]	; (8015130 <xTaskPriorityDisinherit+0xd4>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d903      	bls.n	8015100 <xTaskPriorityDisinherit+0xa4>
 80150f8:	693b      	ldr	r3, [r7, #16]
 80150fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150fc:	4a0c      	ldr	r2, [pc, #48]	; (8015130 <xTaskPriorityDisinherit+0xd4>)
 80150fe:	6013      	str	r3, [r2, #0]
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015104:	4613      	mov	r3, r2
 8015106:	009b      	lsls	r3, r3, #2
 8015108:	4413      	add	r3, r2
 801510a:	009b      	lsls	r3, r3, #2
 801510c:	4a09      	ldr	r2, [pc, #36]	; (8015134 <xTaskPriorityDisinherit+0xd8>)
 801510e:	441a      	add	r2, r3
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	3304      	adds	r3, #4
 8015114:	4619      	mov	r1, r3
 8015116:	4610      	mov	r0, r2
 8015118:	f7fe f97f 	bl	801341a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801511c:	2301      	movs	r3, #1
 801511e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015120:	697b      	ldr	r3, [r7, #20]
	}
 8015122:	4618      	mov	r0, r3
 8015124:	3718      	adds	r7, #24
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}
 801512a:	bf00      	nop
 801512c:	240017c8 	.word	0x240017c8
 8015130:	24001ca4 	.word	0x24001ca4
 8015134:	240017cc 	.word	0x240017cc

08015138 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801513e:	4b09      	ldr	r3, [pc, #36]	; (8015164 <uxTaskResetEventItemValue+0x2c>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	699b      	ldr	r3, [r3, #24]
 8015144:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015146:	4b07      	ldr	r3, [pc, #28]	; (8015164 <uxTaskResetEventItemValue+0x2c>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801514c:	4b05      	ldr	r3, [pc, #20]	; (8015164 <uxTaskResetEventItemValue+0x2c>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015154:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015156:	687b      	ldr	r3, [r7, #4]
}
 8015158:	4618      	mov	r0, r3
 801515a:	370c      	adds	r7, #12
 801515c:	46bd      	mov	sp, r7
 801515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015162:	4770      	bx	lr
 8015164:	240017c8 	.word	0x240017c8

08015168 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b084      	sub	sp, #16
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
 8015170:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015172:	4b21      	ldr	r3, [pc, #132]	; (80151f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015178:	4b20      	ldr	r3, [pc, #128]	; (80151fc <prvAddCurrentTaskToDelayedList+0x94>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	3304      	adds	r3, #4
 801517e:	4618      	mov	r0, r3
 8015180:	f7fe f9a8 	bl	80134d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801518a:	d10a      	bne.n	80151a2 <prvAddCurrentTaskToDelayedList+0x3a>
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d007      	beq.n	80151a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015192:	4b1a      	ldr	r3, [pc, #104]	; (80151fc <prvAddCurrentTaskToDelayedList+0x94>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	3304      	adds	r3, #4
 8015198:	4619      	mov	r1, r3
 801519a:	4819      	ldr	r0, [pc, #100]	; (8015200 <prvAddCurrentTaskToDelayedList+0x98>)
 801519c:	f7fe f93d 	bl	801341a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80151a0:	e026      	b.n	80151f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80151a2:	68fa      	ldr	r2, [r7, #12]
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	4413      	add	r3, r2
 80151a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80151aa:	4b14      	ldr	r3, [pc, #80]	; (80151fc <prvAddCurrentTaskToDelayedList+0x94>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	68ba      	ldr	r2, [r7, #8]
 80151b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80151b2:	68ba      	ldr	r2, [r7, #8]
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d209      	bcs.n	80151ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151ba:	4b12      	ldr	r3, [pc, #72]	; (8015204 <prvAddCurrentTaskToDelayedList+0x9c>)
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	4b0f      	ldr	r3, [pc, #60]	; (80151fc <prvAddCurrentTaskToDelayedList+0x94>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	3304      	adds	r3, #4
 80151c4:	4619      	mov	r1, r3
 80151c6:	4610      	mov	r0, r2
 80151c8:	f7fe f94b 	bl	8013462 <vListInsert>
}
 80151cc:	e010      	b.n	80151f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151ce:	4b0e      	ldr	r3, [pc, #56]	; (8015208 <prvAddCurrentTaskToDelayedList+0xa0>)
 80151d0:	681a      	ldr	r2, [r3, #0]
 80151d2:	4b0a      	ldr	r3, [pc, #40]	; (80151fc <prvAddCurrentTaskToDelayedList+0x94>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	3304      	adds	r3, #4
 80151d8:	4619      	mov	r1, r3
 80151da:	4610      	mov	r0, r2
 80151dc:	f7fe f941 	bl	8013462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80151e0:	4b0a      	ldr	r3, [pc, #40]	; (801520c <prvAddCurrentTaskToDelayedList+0xa4>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	68ba      	ldr	r2, [r7, #8]
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d202      	bcs.n	80151f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80151ea:	4a08      	ldr	r2, [pc, #32]	; (801520c <prvAddCurrentTaskToDelayedList+0xa4>)
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	6013      	str	r3, [r2, #0]
}
 80151f0:	bf00      	nop
 80151f2:	3710      	adds	r7, #16
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}
 80151f8:	24001ca0 	.word	0x24001ca0
 80151fc:	240017c8 	.word	0x240017c8
 8015200:	24001c88 	.word	0x24001c88
 8015204:	24001c58 	.word	0x24001c58
 8015208:	24001c54 	.word	0x24001c54
 801520c:	24001cbc 	.word	0x24001cbc

08015210 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b08a      	sub	sp, #40	; 0x28
 8015214:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015216:	2300      	movs	r3, #0
 8015218:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801521a:	f000 fb07 	bl	801582c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801521e:	4b1c      	ldr	r3, [pc, #112]	; (8015290 <xTimerCreateTimerTask+0x80>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d021      	beq.n	801526a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015226:	2300      	movs	r3, #0
 8015228:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801522a:	2300      	movs	r3, #0
 801522c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801522e:	1d3a      	adds	r2, r7, #4
 8015230:	f107 0108 	add.w	r1, r7, #8
 8015234:	f107 030c 	add.w	r3, r7, #12
 8015238:	4618      	mov	r0, r3
 801523a:	f7fd feb9 	bl	8012fb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801523e:	6879      	ldr	r1, [r7, #4]
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	68fa      	ldr	r2, [r7, #12]
 8015244:	9202      	str	r2, [sp, #8]
 8015246:	9301      	str	r3, [sp, #4]
 8015248:	2302      	movs	r3, #2
 801524a:	9300      	str	r3, [sp, #0]
 801524c:	2300      	movs	r3, #0
 801524e:	460a      	mov	r2, r1
 8015250:	4910      	ldr	r1, [pc, #64]	; (8015294 <xTimerCreateTimerTask+0x84>)
 8015252:	4811      	ldr	r0, [pc, #68]	; (8015298 <xTimerCreateTimerTask+0x88>)
 8015254:	f7fe ff0e 	bl	8014074 <xTaskCreateStatic>
 8015258:	4603      	mov	r3, r0
 801525a:	4a10      	ldr	r2, [pc, #64]	; (801529c <xTimerCreateTimerTask+0x8c>)
 801525c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801525e:	4b0f      	ldr	r3, [pc, #60]	; (801529c <xTimerCreateTimerTask+0x8c>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d001      	beq.n	801526a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015266:	2301      	movs	r3, #1
 8015268:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801526a:	697b      	ldr	r3, [r7, #20]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d10a      	bne.n	8015286 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015274:	f383 8811 	msr	BASEPRI, r3
 8015278:	f3bf 8f6f 	isb	sy
 801527c:	f3bf 8f4f 	dsb	sy
 8015280:	613b      	str	r3, [r7, #16]
}
 8015282:	bf00      	nop
 8015284:	e7fe      	b.n	8015284 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015286:	697b      	ldr	r3, [r7, #20]
}
 8015288:	4618      	mov	r0, r3
 801528a:	3718      	adds	r7, #24
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}
 8015290:	24001cf8 	.word	0x24001cf8
 8015294:	08016e74 	.word	0x08016e74
 8015298:	080153d5 	.word	0x080153d5
 801529c:	24001cfc 	.word	0x24001cfc

080152a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b08a      	sub	sp, #40	; 0x28
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	60f8      	str	r0, [r7, #12]
 80152a8:	60b9      	str	r1, [r7, #8]
 80152aa:	607a      	str	r2, [r7, #4]
 80152ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80152ae:	2300      	movs	r3, #0
 80152b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d10a      	bne.n	80152ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80152b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152bc:	f383 8811 	msr	BASEPRI, r3
 80152c0:	f3bf 8f6f 	isb	sy
 80152c4:	f3bf 8f4f 	dsb	sy
 80152c8:	623b      	str	r3, [r7, #32]
}
 80152ca:	bf00      	nop
 80152cc:	e7fe      	b.n	80152cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80152ce:	4b1a      	ldr	r3, [pc, #104]	; (8015338 <xTimerGenericCommand+0x98>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d02a      	beq.n	801532c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	2b05      	cmp	r3, #5
 80152e6:	dc18      	bgt.n	801531a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80152e8:	f7ff fe9a 	bl	8015020 <xTaskGetSchedulerState>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2b02      	cmp	r3, #2
 80152f0:	d109      	bne.n	8015306 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80152f2:	4b11      	ldr	r3, [pc, #68]	; (8015338 <xTimerGenericCommand+0x98>)
 80152f4:	6818      	ldr	r0, [r3, #0]
 80152f6:	f107 0110 	add.w	r1, r7, #16
 80152fa:	2300      	movs	r3, #0
 80152fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152fe:	f7fe fa51 	bl	80137a4 <xQueueGenericSend>
 8015302:	6278      	str	r0, [r7, #36]	; 0x24
 8015304:	e012      	b.n	801532c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015306:	4b0c      	ldr	r3, [pc, #48]	; (8015338 <xTimerGenericCommand+0x98>)
 8015308:	6818      	ldr	r0, [r3, #0]
 801530a:	f107 0110 	add.w	r1, r7, #16
 801530e:	2300      	movs	r3, #0
 8015310:	2200      	movs	r2, #0
 8015312:	f7fe fa47 	bl	80137a4 <xQueueGenericSend>
 8015316:	6278      	str	r0, [r7, #36]	; 0x24
 8015318:	e008      	b.n	801532c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801531a:	4b07      	ldr	r3, [pc, #28]	; (8015338 <xTimerGenericCommand+0x98>)
 801531c:	6818      	ldr	r0, [r3, #0]
 801531e:	f107 0110 	add.w	r1, r7, #16
 8015322:	2300      	movs	r3, #0
 8015324:	683a      	ldr	r2, [r7, #0]
 8015326:	f7fe fb3b 	bl	80139a0 <xQueueGenericSendFromISR>
 801532a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801532e:	4618      	mov	r0, r3
 8015330:	3728      	adds	r7, #40	; 0x28
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop
 8015338:	24001cf8 	.word	0x24001cf8

0801533c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b088      	sub	sp, #32
 8015340:	af02      	add	r7, sp, #8
 8015342:	6078      	str	r0, [r7, #4]
 8015344:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015346:	4b22      	ldr	r3, [pc, #136]	; (80153d0 <prvProcessExpiredTimer+0x94>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	68db      	ldr	r3, [r3, #12]
 801534c:	68db      	ldr	r3, [r3, #12]
 801534e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	3304      	adds	r3, #4
 8015354:	4618      	mov	r0, r3
 8015356:	f7fe f8bd 	bl	80134d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015360:	f003 0304 	and.w	r3, r3, #4
 8015364:	2b00      	cmp	r3, #0
 8015366:	d022      	beq.n	80153ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	699a      	ldr	r2, [r3, #24]
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	18d1      	adds	r1, r2, r3
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	683a      	ldr	r2, [r7, #0]
 8015374:	6978      	ldr	r0, [r7, #20]
 8015376:	f000 f8d1 	bl	801551c <prvInsertTimerInActiveList>
 801537a:	4603      	mov	r3, r0
 801537c:	2b00      	cmp	r3, #0
 801537e:	d01f      	beq.n	80153c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015380:	2300      	movs	r3, #0
 8015382:	9300      	str	r3, [sp, #0]
 8015384:	2300      	movs	r3, #0
 8015386:	687a      	ldr	r2, [r7, #4]
 8015388:	2100      	movs	r1, #0
 801538a:	6978      	ldr	r0, [r7, #20]
 801538c:	f7ff ff88 	bl	80152a0 <xTimerGenericCommand>
 8015390:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d113      	bne.n	80153c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801539c:	f383 8811 	msr	BASEPRI, r3
 80153a0:	f3bf 8f6f 	isb	sy
 80153a4:	f3bf 8f4f 	dsb	sy
 80153a8:	60fb      	str	r3, [r7, #12]
}
 80153aa:	bf00      	nop
 80153ac:	e7fe      	b.n	80153ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80153b4:	f023 0301 	bic.w	r3, r3, #1
 80153b8:	b2da      	uxtb	r2, r3
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80153c0:	697b      	ldr	r3, [r7, #20]
 80153c2:	6a1b      	ldr	r3, [r3, #32]
 80153c4:	6978      	ldr	r0, [r7, #20]
 80153c6:	4798      	blx	r3
}
 80153c8:	bf00      	nop
 80153ca:	3718      	adds	r7, #24
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}
 80153d0:	24001cf0 	.word	0x24001cf0

080153d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b084      	sub	sp, #16
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80153dc:	f107 0308 	add.w	r3, r7, #8
 80153e0:	4618      	mov	r0, r3
 80153e2:	f000 f857 	bl	8015494 <prvGetNextExpireTime>
 80153e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	4619      	mov	r1, r3
 80153ec:	68f8      	ldr	r0, [r7, #12]
 80153ee:	f000 f803 	bl	80153f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80153f2:	f000 f8d5 	bl	80155a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80153f6:	e7f1      	b.n	80153dc <prvTimerTask+0x8>

080153f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b084      	sub	sp, #16
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015402:	f7ff f98d 	bl	8014720 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015406:	f107 0308 	add.w	r3, r7, #8
 801540a:	4618      	mov	r0, r3
 801540c:	f000 f866 	bl	80154dc <prvSampleTimeNow>
 8015410:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015412:	68bb      	ldr	r3, [r7, #8]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d130      	bne.n	801547a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d10a      	bne.n	8015434 <prvProcessTimerOrBlockTask+0x3c>
 801541e:	687a      	ldr	r2, [r7, #4]
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	429a      	cmp	r2, r3
 8015424:	d806      	bhi.n	8015434 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015426:	f7ff f989 	bl	801473c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801542a:	68f9      	ldr	r1, [r7, #12]
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f7ff ff85 	bl	801533c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015432:	e024      	b.n	801547e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d008      	beq.n	801544c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801543a:	4b13      	ldr	r3, [pc, #76]	; (8015488 <prvProcessTimerOrBlockTask+0x90>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d101      	bne.n	8015448 <prvProcessTimerOrBlockTask+0x50>
 8015444:	2301      	movs	r3, #1
 8015446:	e000      	b.n	801544a <prvProcessTimerOrBlockTask+0x52>
 8015448:	2300      	movs	r3, #0
 801544a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801544c:	4b0f      	ldr	r3, [pc, #60]	; (801548c <prvProcessTimerOrBlockTask+0x94>)
 801544e:	6818      	ldr	r0, [r3, #0]
 8015450:	687a      	ldr	r2, [r7, #4]
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	1ad3      	subs	r3, r2, r3
 8015456:	683a      	ldr	r2, [r7, #0]
 8015458:	4619      	mov	r1, r3
 801545a:	f7fe fdd7 	bl	801400c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801545e:	f7ff f96d 	bl	801473c <xTaskResumeAll>
 8015462:	4603      	mov	r3, r0
 8015464:	2b00      	cmp	r3, #0
 8015466:	d10a      	bne.n	801547e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015468:	4b09      	ldr	r3, [pc, #36]	; (8015490 <prvProcessTimerOrBlockTask+0x98>)
 801546a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801546e:	601a      	str	r2, [r3, #0]
 8015470:	f3bf 8f4f 	dsb	sy
 8015474:	f3bf 8f6f 	isb	sy
}
 8015478:	e001      	b.n	801547e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801547a:	f7ff f95f 	bl	801473c <xTaskResumeAll>
}
 801547e:	bf00      	nop
 8015480:	3710      	adds	r7, #16
 8015482:	46bd      	mov	sp, r7
 8015484:	bd80      	pop	{r7, pc}
 8015486:	bf00      	nop
 8015488:	24001cf4 	.word	0x24001cf4
 801548c:	24001cf8 	.word	0x24001cf8
 8015490:	e000ed04 	.word	0xe000ed04

08015494 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015494:	b480      	push	{r7}
 8015496:	b085      	sub	sp, #20
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801549c:	4b0e      	ldr	r3, [pc, #56]	; (80154d8 <prvGetNextExpireTime+0x44>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d101      	bne.n	80154aa <prvGetNextExpireTime+0x16>
 80154a6:	2201      	movs	r2, #1
 80154a8:	e000      	b.n	80154ac <prvGetNextExpireTime+0x18>
 80154aa:	2200      	movs	r2, #0
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d105      	bne.n	80154c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80154b8:	4b07      	ldr	r3, [pc, #28]	; (80154d8 <prvGetNextExpireTime+0x44>)
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	68db      	ldr	r3, [r3, #12]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	60fb      	str	r3, [r7, #12]
 80154c2:	e001      	b.n	80154c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80154c4:	2300      	movs	r3, #0
 80154c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80154c8:	68fb      	ldr	r3, [r7, #12]
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3714      	adds	r7, #20
 80154ce:	46bd      	mov	sp, r7
 80154d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d4:	4770      	bx	lr
 80154d6:	bf00      	nop
 80154d8:	24001cf0 	.word	0x24001cf0

080154dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b084      	sub	sp, #16
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80154e4:	f7ff f9c8 	bl	8014878 <xTaskGetTickCount>
 80154e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80154ea:	4b0b      	ldr	r3, [pc, #44]	; (8015518 <prvSampleTimeNow+0x3c>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	68fa      	ldr	r2, [r7, #12]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d205      	bcs.n	8015500 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80154f4:	f000 f936 	bl	8015764 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2201      	movs	r2, #1
 80154fc:	601a      	str	r2, [r3, #0]
 80154fe:	e002      	b.n	8015506 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2200      	movs	r2, #0
 8015504:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015506:	4a04      	ldr	r2, [pc, #16]	; (8015518 <prvSampleTimeNow+0x3c>)
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801550c:	68fb      	ldr	r3, [r7, #12]
}
 801550e:	4618      	mov	r0, r3
 8015510:	3710      	adds	r7, #16
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}
 8015516:	bf00      	nop
 8015518:	24001d00 	.word	0x24001d00

0801551c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b086      	sub	sp, #24
 8015520:	af00      	add	r7, sp, #0
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
 8015528:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801552a:	2300      	movs	r3, #0
 801552c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	68ba      	ldr	r2, [r7, #8]
 8015532:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	68fa      	ldr	r2, [r7, #12]
 8015538:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801553a:	68ba      	ldr	r2, [r7, #8]
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	429a      	cmp	r2, r3
 8015540:	d812      	bhi.n	8015568 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015542:	687a      	ldr	r2, [r7, #4]
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	1ad2      	subs	r2, r2, r3
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	699b      	ldr	r3, [r3, #24]
 801554c:	429a      	cmp	r2, r3
 801554e:	d302      	bcc.n	8015556 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015550:	2301      	movs	r3, #1
 8015552:	617b      	str	r3, [r7, #20]
 8015554:	e01b      	b.n	801558e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015556:	4b10      	ldr	r3, [pc, #64]	; (8015598 <prvInsertTimerInActiveList+0x7c>)
 8015558:	681a      	ldr	r2, [r3, #0]
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	3304      	adds	r3, #4
 801555e:	4619      	mov	r1, r3
 8015560:	4610      	mov	r0, r2
 8015562:	f7fd ff7e 	bl	8013462 <vListInsert>
 8015566:	e012      	b.n	801558e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015568:	687a      	ldr	r2, [r7, #4]
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	429a      	cmp	r2, r3
 801556e:	d206      	bcs.n	801557e <prvInsertTimerInActiveList+0x62>
 8015570:	68ba      	ldr	r2, [r7, #8]
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	429a      	cmp	r2, r3
 8015576:	d302      	bcc.n	801557e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015578:	2301      	movs	r3, #1
 801557a:	617b      	str	r3, [r7, #20]
 801557c:	e007      	b.n	801558e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801557e:	4b07      	ldr	r3, [pc, #28]	; (801559c <prvInsertTimerInActiveList+0x80>)
 8015580:	681a      	ldr	r2, [r3, #0]
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	3304      	adds	r3, #4
 8015586:	4619      	mov	r1, r3
 8015588:	4610      	mov	r0, r2
 801558a:	f7fd ff6a 	bl	8013462 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801558e:	697b      	ldr	r3, [r7, #20]
}
 8015590:	4618      	mov	r0, r3
 8015592:	3718      	adds	r7, #24
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}
 8015598:	24001cf4 	.word	0x24001cf4
 801559c:	24001cf0 	.word	0x24001cf0

080155a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b08e      	sub	sp, #56	; 0x38
 80155a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80155a6:	e0ca      	b.n	801573e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	da18      	bge.n	80155e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80155ae:	1d3b      	adds	r3, r7, #4
 80155b0:	3304      	adds	r3, #4
 80155b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80155b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d10a      	bne.n	80155d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80155ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155be:	f383 8811 	msr	BASEPRI, r3
 80155c2:	f3bf 8f6f 	isb	sy
 80155c6:	f3bf 8f4f 	dsb	sy
 80155ca:	61fb      	str	r3, [r7, #28]
}
 80155cc:	bf00      	nop
 80155ce:	e7fe      	b.n	80155ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80155d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155d6:	6850      	ldr	r0, [r2, #4]
 80155d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155da:	6892      	ldr	r2, [r2, #8]
 80155dc:	4611      	mov	r1, r2
 80155de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	f2c0 80aa 	blt.w	801573c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80155ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ee:	695b      	ldr	r3, [r3, #20]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d004      	beq.n	80155fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80155f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155f6:	3304      	adds	r3, #4
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7fd ff6b 	bl	80134d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80155fe:	463b      	mov	r3, r7
 8015600:	4618      	mov	r0, r3
 8015602:	f7ff ff6b 	bl	80154dc <prvSampleTimeNow>
 8015606:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2b09      	cmp	r3, #9
 801560c:	f200 8097 	bhi.w	801573e <prvProcessReceivedCommands+0x19e>
 8015610:	a201      	add	r2, pc, #4	; (adr r2, 8015618 <prvProcessReceivedCommands+0x78>)
 8015612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015616:	bf00      	nop
 8015618:	08015641 	.word	0x08015641
 801561c:	08015641 	.word	0x08015641
 8015620:	08015641 	.word	0x08015641
 8015624:	080156b5 	.word	0x080156b5
 8015628:	080156c9 	.word	0x080156c9
 801562c:	08015713 	.word	0x08015713
 8015630:	08015641 	.word	0x08015641
 8015634:	08015641 	.word	0x08015641
 8015638:	080156b5 	.word	0x080156b5
 801563c:	080156c9 	.word	0x080156c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015646:	f043 0301 	orr.w	r3, r3, #1
 801564a:	b2da      	uxtb	r2, r3
 801564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801564e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015652:	68ba      	ldr	r2, [r7, #8]
 8015654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015656:	699b      	ldr	r3, [r3, #24]
 8015658:	18d1      	adds	r1, r2, r3
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801565e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015660:	f7ff ff5c 	bl	801551c <prvInsertTimerInActiveList>
 8015664:	4603      	mov	r3, r0
 8015666:	2b00      	cmp	r3, #0
 8015668:	d069      	beq.n	801573e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801566c:	6a1b      	ldr	r3, [r3, #32]
 801566e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015670:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015678:	f003 0304 	and.w	r3, r3, #4
 801567c:	2b00      	cmp	r3, #0
 801567e:	d05e      	beq.n	801573e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015680:	68ba      	ldr	r2, [r7, #8]
 8015682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015684:	699b      	ldr	r3, [r3, #24]
 8015686:	441a      	add	r2, r3
 8015688:	2300      	movs	r3, #0
 801568a:	9300      	str	r3, [sp, #0]
 801568c:	2300      	movs	r3, #0
 801568e:	2100      	movs	r1, #0
 8015690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015692:	f7ff fe05 	bl	80152a0 <xTimerGenericCommand>
 8015696:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015698:	6a3b      	ldr	r3, [r7, #32]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d14f      	bne.n	801573e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156a2:	f383 8811 	msr	BASEPRI, r3
 80156a6:	f3bf 8f6f 	isb	sy
 80156aa:	f3bf 8f4f 	dsb	sy
 80156ae:	61bb      	str	r3, [r7, #24]
}
 80156b0:	bf00      	nop
 80156b2:	e7fe      	b.n	80156b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80156b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156ba:	f023 0301 	bic.w	r3, r3, #1
 80156be:	b2da      	uxtb	r2, r3
 80156c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80156c6:	e03a      	b.n	801573e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80156c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156ce:	f043 0301 	orr.w	r3, r3, #1
 80156d2:	b2da      	uxtb	r2, r3
 80156d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80156da:	68ba      	ldr	r2, [r7, #8]
 80156dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80156e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e2:	699b      	ldr	r3, [r3, #24]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d10a      	bne.n	80156fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80156e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ec:	f383 8811 	msr	BASEPRI, r3
 80156f0:	f3bf 8f6f 	isb	sy
 80156f4:	f3bf 8f4f 	dsb	sy
 80156f8:	617b      	str	r3, [r7, #20]
}
 80156fa:	bf00      	nop
 80156fc:	e7fe      	b.n	80156fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80156fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015700:	699a      	ldr	r2, [r3, #24]
 8015702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015704:	18d1      	adds	r1, r2, r3
 8015706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801570a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801570c:	f7ff ff06 	bl	801551c <prvInsertTimerInActiveList>
					break;
 8015710:	e015      	b.n	801573e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015718:	f003 0302 	and.w	r3, r3, #2
 801571c:	2b00      	cmp	r3, #0
 801571e:	d103      	bne.n	8015728 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015722:	f000 fbfd 	bl	8015f20 <vPortFree>
 8015726:	e00a      	b.n	801573e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801572a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801572e:	f023 0301 	bic.w	r3, r3, #1
 8015732:	b2da      	uxtb	r2, r3
 8015734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801573a:	e000      	b.n	801573e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801573c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801573e:	4b08      	ldr	r3, [pc, #32]	; (8015760 <prvProcessReceivedCommands+0x1c0>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	1d39      	adds	r1, r7, #4
 8015744:	2200      	movs	r2, #0
 8015746:	4618      	mov	r0, r3
 8015748:	f7fe f9c6 	bl	8013ad8 <xQueueReceive>
 801574c:	4603      	mov	r3, r0
 801574e:	2b00      	cmp	r3, #0
 8015750:	f47f af2a 	bne.w	80155a8 <prvProcessReceivedCommands+0x8>
	}
}
 8015754:	bf00      	nop
 8015756:	bf00      	nop
 8015758:	3730      	adds	r7, #48	; 0x30
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop
 8015760:	24001cf8 	.word	0x24001cf8

08015764 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b088      	sub	sp, #32
 8015768:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801576a:	e048      	b.n	80157fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801576c:	4b2d      	ldr	r3, [pc, #180]	; (8015824 <prvSwitchTimerLists+0xc0>)
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	68db      	ldr	r3, [r3, #12]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015776:	4b2b      	ldr	r3, [pc, #172]	; (8015824 <prvSwitchTimerLists+0xc0>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	68db      	ldr	r3, [r3, #12]
 801577c:	68db      	ldr	r3, [r3, #12]
 801577e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	3304      	adds	r3, #4
 8015784:	4618      	mov	r0, r3
 8015786:	f7fd fea5 	bl	80134d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	6a1b      	ldr	r3, [r3, #32]
 801578e:	68f8      	ldr	r0, [r7, #12]
 8015790:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015798:	f003 0304 	and.w	r3, r3, #4
 801579c:	2b00      	cmp	r3, #0
 801579e:	d02e      	beq.n	80157fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	699b      	ldr	r3, [r3, #24]
 80157a4:	693a      	ldr	r2, [r7, #16]
 80157a6:	4413      	add	r3, r2
 80157a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80157aa:	68ba      	ldr	r2, [r7, #8]
 80157ac:	693b      	ldr	r3, [r7, #16]
 80157ae:	429a      	cmp	r2, r3
 80157b0:	d90e      	bls.n	80157d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	68ba      	ldr	r2, [r7, #8]
 80157b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	68fa      	ldr	r2, [r7, #12]
 80157bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80157be:	4b19      	ldr	r3, [pc, #100]	; (8015824 <prvSwitchTimerLists+0xc0>)
 80157c0:	681a      	ldr	r2, [r3, #0]
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	3304      	adds	r3, #4
 80157c6:	4619      	mov	r1, r3
 80157c8:	4610      	mov	r0, r2
 80157ca:	f7fd fe4a 	bl	8013462 <vListInsert>
 80157ce:	e016      	b.n	80157fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80157d0:	2300      	movs	r3, #0
 80157d2:	9300      	str	r3, [sp, #0]
 80157d4:	2300      	movs	r3, #0
 80157d6:	693a      	ldr	r2, [r7, #16]
 80157d8:	2100      	movs	r1, #0
 80157da:	68f8      	ldr	r0, [r7, #12]
 80157dc:	f7ff fd60 	bl	80152a0 <xTimerGenericCommand>
 80157e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d10a      	bne.n	80157fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80157e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ec:	f383 8811 	msr	BASEPRI, r3
 80157f0:	f3bf 8f6f 	isb	sy
 80157f4:	f3bf 8f4f 	dsb	sy
 80157f8:	603b      	str	r3, [r7, #0]
}
 80157fa:	bf00      	nop
 80157fc:	e7fe      	b.n	80157fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80157fe:	4b09      	ldr	r3, [pc, #36]	; (8015824 <prvSwitchTimerLists+0xc0>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d1b1      	bne.n	801576c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015808:	4b06      	ldr	r3, [pc, #24]	; (8015824 <prvSwitchTimerLists+0xc0>)
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801580e:	4b06      	ldr	r3, [pc, #24]	; (8015828 <prvSwitchTimerLists+0xc4>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	4a04      	ldr	r2, [pc, #16]	; (8015824 <prvSwitchTimerLists+0xc0>)
 8015814:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015816:	4a04      	ldr	r2, [pc, #16]	; (8015828 <prvSwitchTimerLists+0xc4>)
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	6013      	str	r3, [r2, #0]
}
 801581c:	bf00      	nop
 801581e:	3718      	adds	r7, #24
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}
 8015824:	24001cf0 	.word	0x24001cf0
 8015828:	24001cf4 	.word	0x24001cf4

0801582c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b082      	sub	sp, #8
 8015830:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015832:	f000 f987 	bl	8015b44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015836:	4b15      	ldr	r3, [pc, #84]	; (801588c <prvCheckForValidListAndQueue+0x60>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d120      	bne.n	8015880 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801583e:	4814      	ldr	r0, [pc, #80]	; (8015890 <prvCheckForValidListAndQueue+0x64>)
 8015840:	f7fd fdbe 	bl	80133c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015844:	4813      	ldr	r0, [pc, #76]	; (8015894 <prvCheckForValidListAndQueue+0x68>)
 8015846:	f7fd fdbb 	bl	80133c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801584a:	4b13      	ldr	r3, [pc, #76]	; (8015898 <prvCheckForValidListAndQueue+0x6c>)
 801584c:	4a10      	ldr	r2, [pc, #64]	; (8015890 <prvCheckForValidListAndQueue+0x64>)
 801584e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015850:	4b12      	ldr	r3, [pc, #72]	; (801589c <prvCheckForValidListAndQueue+0x70>)
 8015852:	4a10      	ldr	r2, [pc, #64]	; (8015894 <prvCheckForValidListAndQueue+0x68>)
 8015854:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015856:	2300      	movs	r3, #0
 8015858:	9300      	str	r3, [sp, #0]
 801585a:	4b11      	ldr	r3, [pc, #68]	; (80158a0 <prvCheckForValidListAndQueue+0x74>)
 801585c:	4a11      	ldr	r2, [pc, #68]	; (80158a4 <prvCheckForValidListAndQueue+0x78>)
 801585e:	2110      	movs	r1, #16
 8015860:	200a      	movs	r0, #10
 8015862:	f7fd fec9 	bl	80135f8 <xQueueGenericCreateStatic>
 8015866:	4603      	mov	r3, r0
 8015868:	4a08      	ldr	r2, [pc, #32]	; (801588c <prvCheckForValidListAndQueue+0x60>)
 801586a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801586c:	4b07      	ldr	r3, [pc, #28]	; (801588c <prvCheckForValidListAndQueue+0x60>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d005      	beq.n	8015880 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015874:	4b05      	ldr	r3, [pc, #20]	; (801588c <prvCheckForValidListAndQueue+0x60>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	490b      	ldr	r1, [pc, #44]	; (80158a8 <prvCheckForValidListAndQueue+0x7c>)
 801587a:	4618      	mov	r0, r3
 801587c:	f7fe fb9c 	bl	8013fb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015880:	f000 f990 	bl	8015ba4 <vPortExitCritical>
}
 8015884:	bf00      	nop
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
 801588a:	bf00      	nop
 801588c:	24001cf8 	.word	0x24001cf8
 8015890:	24001cc8 	.word	0x24001cc8
 8015894:	24001cdc 	.word	0x24001cdc
 8015898:	24001cf0 	.word	0x24001cf0
 801589c:	24001cf4 	.word	0x24001cf4
 80158a0:	24001da4 	.word	0x24001da4
 80158a4:	24001d04 	.word	0x24001d04
 80158a8:	08016e7c 	.word	0x08016e7c

080158ac <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b08a      	sub	sp, #40	; 0x28
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	60b9      	str	r1, [r7, #8]
 80158b6:	607a      	str	r2, [r7, #4]
 80158b8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80158ba:	f06f 0301 	mvn.w	r3, #1
 80158be:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80158cc:	4b06      	ldr	r3, [pc, #24]	; (80158e8 <xTimerPendFunctionCallFromISR+0x3c>)
 80158ce:	6818      	ldr	r0, [r3, #0]
 80158d0:	f107 0114 	add.w	r1, r7, #20
 80158d4:	2300      	movs	r3, #0
 80158d6:	683a      	ldr	r2, [r7, #0]
 80158d8:	f7fe f862 	bl	80139a0 <xQueueGenericSendFromISR>
 80158dc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80158de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3728      	adds	r7, #40	; 0x28
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	24001cf8 	.word	0x24001cf8

080158ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80158ec:	b480      	push	{r7}
 80158ee:	b085      	sub	sp, #20
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	60f8      	str	r0, [r7, #12]
 80158f4:	60b9      	str	r1, [r7, #8]
 80158f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	3b04      	subs	r3, #4
 80158fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	3b04      	subs	r3, #4
 801590a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801590c:	68bb      	ldr	r3, [r7, #8]
 801590e:	f023 0201 	bic.w	r2, r3, #1
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	3b04      	subs	r3, #4
 801591a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801591c:	4a0c      	ldr	r2, [pc, #48]	; (8015950 <pxPortInitialiseStack+0x64>)
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	3b14      	subs	r3, #20
 8015926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015928:	687a      	ldr	r2, [r7, #4]
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	3b04      	subs	r3, #4
 8015932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	f06f 0202 	mvn.w	r2, #2
 801593a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	3b20      	subs	r3, #32
 8015940:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015942:	68fb      	ldr	r3, [r7, #12]
}
 8015944:	4618      	mov	r0, r3
 8015946:	3714      	adds	r7, #20
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr
 8015950:	08015955 	.word	0x08015955

08015954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015954:	b480      	push	{r7}
 8015956:	b085      	sub	sp, #20
 8015958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801595a:	2300      	movs	r3, #0
 801595c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801595e:	4b12      	ldr	r3, [pc, #72]	; (80159a8 <prvTaskExitError+0x54>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015966:	d00a      	beq.n	801597e <prvTaskExitError+0x2a>
	__asm volatile
 8015968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801596c:	f383 8811 	msr	BASEPRI, r3
 8015970:	f3bf 8f6f 	isb	sy
 8015974:	f3bf 8f4f 	dsb	sy
 8015978:	60fb      	str	r3, [r7, #12]
}
 801597a:	bf00      	nop
 801597c:	e7fe      	b.n	801597c <prvTaskExitError+0x28>
	__asm volatile
 801597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015982:	f383 8811 	msr	BASEPRI, r3
 8015986:	f3bf 8f6f 	isb	sy
 801598a:	f3bf 8f4f 	dsb	sy
 801598e:	60bb      	str	r3, [r7, #8]
}
 8015990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015992:	bf00      	nop
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d0fc      	beq.n	8015994 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801599a:	bf00      	nop
 801599c:	bf00      	nop
 801599e:	3714      	adds	r7, #20
 80159a0:	46bd      	mov	sp, r7
 80159a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a6:	4770      	bx	lr
 80159a8:	240000a0 	.word	0x240000a0
 80159ac:	00000000 	.word	0x00000000

080159b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80159b0:	4b07      	ldr	r3, [pc, #28]	; (80159d0 <pxCurrentTCBConst2>)
 80159b2:	6819      	ldr	r1, [r3, #0]
 80159b4:	6808      	ldr	r0, [r1, #0]
 80159b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ba:	f380 8809 	msr	PSP, r0
 80159be:	f3bf 8f6f 	isb	sy
 80159c2:	f04f 0000 	mov.w	r0, #0
 80159c6:	f380 8811 	msr	BASEPRI, r0
 80159ca:	4770      	bx	lr
 80159cc:	f3af 8000 	nop.w

080159d0 <pxCurrentTCBConst2>:
 80159d0:	240017c8 	.word	0x240017c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80159d4:	bf00      	nop
 80159d6:	bf00      	nop

080159d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80159d8:	4808      	ldr	r0, [pc, #32]	; (80159fc <prvPortStartFirstTask+0x24>)
 80159da:	6800      	ldr	r0, [r0, #0]
 80159dc:	6800      	ldr	r0, [r0, #0]
 80159de:	f380 8808 	msr	MSP, r0
 80159e2:	f04f 0000 	mov.w	r0, #0
 80159e6:	f380 8814 	msr	CONTROL, r0
 80159ea:	b662      	cpsie	i
 80159ec:	b661      	cpsie	f
 80159ee:	f3bf 8f4f 	dsb	sy
 80159f2:	f3bf 8f6f 	isb	sy
 80159f6:	df00      	svc	0
 80159f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80159fa:	bf00      	nop
 80159fc:	e000ed08 	.word	0xe000ed08

08015a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b086      	sub	sp, #24
 8015a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015a06:	4b46      	ldr	r3, [pc, #280]	; (8015b20 <xPortStartScheduler+0x120>)
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	4a46      	ldr	r2, [pc, #280]	; (8015b24 <xPortStartScheduler+0x124>)
 8015a0c:	4293      	cmp	r3, r2
 8015a0e:	d10a      	bne.n	8015a26 <xPortStartScheduler+0x26>
	__asm volatile
 8015a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a14:	f383 8811 	msr	BASEPRI, r3
 8015a18:	f3bf 8f6f 	isb	sy
 8015a1c:	f3bf 8f4f 	dsb	sy
 8015a20:	613b      	str	r3, [r7, #16]
}
 8015a22:	bf00      	nop
 8015a24:	e7fe      	b.n	8015a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015a26:	4b3e      	ldr	r3, [pc, #248]	; (8015b20 <xPortStartScheduler+0x120>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	4a3f      	ldr	r2, [pc, #252]	; (8015b28 <xPortStartScheduler+0x128>)
 8015a2c:	4293      	cmp	r3, r2
 8015a2e:	d10a      	bne.n	8015a46 <xPortStartScheduler+0x46>
	__asm volatile
 8015a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a34:	f383 8811 	msr	BASEPRI, r3
 8015a38:	f3bf 8f6f 	isb	sy
 8015a3c:	f3bf 8f4f 	dsb	sy
 8015a40:	60fb      	str	r3, [r7, #12]
}
 8015a42:	bf00      	nop
 8015a44:	e7fe      	b.n	8015a44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015a46:	4b39      	ldr	r3, [pc, #228]	; (8015b2c <xPortStartScheduler+0x12c>)
 8015a48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	781b      	ldrb	r3, [r3, #0]
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	22ff      	movs	r2, #255	; 0xff
 8015a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	b2db      	uxtb	r3, r3
 8015a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015a60:	78fb      	ldrb	r3, [r7, #3]
 8015a62:	b2db      	uxtb	r3, r3
 8015a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015a68:	b2da      	uxtb	r2, r3
 8015a6a:	4b31      	ldr	r3, [pc, #196]	; (8015b30 <xPortStartScheduler+0x130>)
 8015a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015a6e:	4b31      	ldr	r3, [pc, #196]	; (8015b34 <xPortStartScheduler+0x134>)
 8015a70:	2207      	movs	r2, #7
 8015a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015a74:	e009      	b.n	8015a8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015a76:	4b2f      	ldr	r3, [pc, #188]	; (8015b34 <xPortStartScheduler+0x134>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	3b01      	subs	r3, #1
 8015a7c:	4a2d      	ldr	r2, [pc, #180]	; (8015b34 <xPortStartScheduler+0x134>)
 8015a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015a80:	78fb      	ldrb	r3, [r7, #3]
 8015a82:	b2db      	uxtb	r3, r3
 8015a84:	005b      	lsls	r3, r3, #1
 8015a86:	b2db      	uxtb	r3, r3
 8015a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015a8a:	78fb      	ldrb	r3, [r7, #3]
 8015a8c:	b2db      	uxtb	r3, r3
 8015a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a92:	2b80      	cmp	r3, #128	; 0x80
 8015a94:	d0ef      	beq.n	8015a76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015a96:	4b27      	ldr	r3, [pc, #156]	; (8015b34 <xPortStartScheduler+0x134>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	f1c3 0307 	rsb	r3, r3, #7
 8015a9e:	2b04      	cmp	r3, #4
 8015aa0:	d00a      	beq.n	8015ab8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aa6:	f383 8811 	msr	BASEPRI, r3
 8015aaa:	f3bf 8f6f 	isb	sy
 8015aae:	f3bf 8f4f 	dsb	sy
 8015ab2:	60bb      	str	r3, [r7, #8]
}
 8015ab4:	bf00      	nop
 8015ab6:	e7fe      	b.n	8015ab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015ab8:	4b1e      	ldr	r3, [pc, #120]	; (8015b34 <xPortStartScheduler+0x134>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	021b      	lsls	r3, r3, #8
 8015abe:	4a1d      	ldr	r2, [pc, #116]	; (8015b34 <xPortStartScheduler+0x134>)
 8015ac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015ac2:	4b1c      	ldr	r3, [pc, #112]	; (8015b34 <xPortStartScheduler+0x134>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015aca:	4a1a      	ldr	r2, [pc, #104]	; (8015b34 <xPortStartScheduler+0x134>)
 8015acc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	b2da      	uxtb	r2, r3
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015ad6:	4b18      	ldr	r3, [pc, #96]	; (8015b38 <xPortStartScheduler+0x138>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	4a17      	ldr	r2, [pc, #92]	; (8015b38 <xPortStartScheduler+0x138>)
 8015adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015ae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015ae2:	4b15      	ldr	r3, [pc, #84]	; (8015b38 <xPortStartScheduler+0x138>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	4a14      	ldr	r2, [pc, #80]	; (8015b38 <xPortStartScheduler+0x138>)
 8015ae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015aec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015aee:	f000 f8dd 	bl	8015cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015af2:	4b12      	ldr	r3, [pc, #72]	; (8015b3c <xPortStartScheduler+0x13c>)
 8015af4:	2200      	movs	r2, #0
 8015af6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015af8:	f000 f8fc 	bl	8015cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015afc:	4b10      	ldr	r3, [pc, #64]	; (8015b40 <xPortStartScheduler+0x140>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	4a0f      	ldr	r2, [pc, #60]	; (8015b40 <xPortStartScheduler+0x140>)
 8015b02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015b06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015b08:	f7ff ff66 	bl	80159d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015b0c:	f7fe ff7e 	bl	8014a0c <vTaskSwitchContext>
	prvTaskExitError();
 8015b10:	f7ff ff20 	bl	8015954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015b14:	2300      	movs	r3, #0
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	3718      	adds	r7, #24
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}
 8015b1e:	bf00      	nop
 8015b20:	e000ed00 	.word	0xe000ed00
 8015b24:	410fc271 	.word	0x410fc271
 8015b28:	410fc270 	.word	0x410fc270
 8015b2c:	e000e400 	.word	0xe000e400
 8015b30:	24001df4 	.word	0x24001df4
 8015b34:	24001df8 	.word	0x24001df8
 8015b38:	e000ed20 	.word	0xe000ed20
 8015b3c:	240000a0 	.word	0x240000a0
 8015b40:	e000ef34 	.word	0xe000ef34

08015b44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015b44:	b480      	push	{r7}
 8015b46:	b083      	sub	sp, #12
 8015b48:	af00      	add	r7, sp, #0
	__asm volatile
 8015b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b4e:	f383 8811 	msr	BASEPRI, r3
 8015b52:	f3bf 8f6f 	isb	sy
 8015b56:	f3bf 8f4f 	dsb	sy
 8015b5a:	607b      	str	r3, [r7, #4]
}
 8015b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015b5e:	4b0f      	ldr	r3, [pc, #60]	; (8015b9c <vPortEnterCritical+0x58>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	3301      	adds	r3, #1
 8015b64:	4a0d      	ldr	r2, [pc, #52]	; (8015b9c <vPortEnterCritical+0x58>)
 8015b66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015b68:	4b0c      	ldr	r3, [pc, #48]	; (8015b9c <vPortEnterCritical+0x58>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	2b01      	cmp	r3, #1
 8015b6e:	d10f      	bne.n	8015b90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015b70:	4b0b      	ldr	r3, [pc, #44]	; (8015ba0 <vPortEnterCritical+0x5c>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	b2db      	uxtb	r3, r3
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d00a      	beq.n	8015b90 <vPortEnterCritical+0x4c>
	__asm volatile
 8015b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b7e:	f383 8811 	msr	BASEPRI, r3
 8015b82:	f3bf 8f6f 	isb	sy
 8015b86:	f3bf 8f4f 	dsb	sy
 8015b8a:	603b      	str	r3, [r7, #0]
}
 8015b8c:	bf00      	nop
 8015b8e:	e7fe      	b.n	8015b8e <vPortEnterCritical+0x4a>
	}
}
 8015b90:	bf00      	nop
 8015b92:	370c      	adds	r7, #12
 8015b94:	46bd      	mov	sp, r7
 8015b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9a:	4770      	bx	lr
 8015b9c:	240000a0 	.word	0x240000a0
 8015ba0:	e000ed04 	.word	0xe000ed04

08015ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015ba4:	b480      	push	{r7}
 8015ba6:	b083      	sub	sp, #12
 8015ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015baa:	4b12      	ldr	r3, [pc, #72]	; (8015bf4 <vPortExitCritical+0x50>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d10a      	bne.n	8015bc8 <vPortExitCritical+0x24>
	__asm volatile
 8015bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb6:	f383 8811 	msr	BASEPRI, r3
 8015bba:	f3bf 8f6f 	isb	sy
 8015bbe:	f3bf 8f4f 	dsb	sy
 8015bc2:	607b      	str	r3, [r7, #4]
}
 8015bc4:	bf00      	nop
 8015bc6:	e7fe      	b.n	8015bc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015bc8:	4b0a      	ldr	r3, [pc, #40]	; (8015bf4 <vPortExitCritical+0x50>)
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	3b01      	subs	r3, #1
 8015bce:	4a09      	ldr	r2, [pc, #36]	; (8015bf4 <vPortExitCritical+0x50>)
 8015bd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015bd2:	4b08      	ldr	r3, [pc, #32]	; (8015bf4 <vPortExitCritical+0x50>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d105      	bne.n	8015be6 <vPortExitCritical+0x42>
 8015bda:	2300      	movs	r3, #0
 8015bdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	f383 8811 	msr	BASEPRI, r3
}
 8015be4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015be6:	bf00      	nop
 8015be8:	370c      	adds	r7, #12
 8015bea:	46bd      	mov	sp, r7
 8015bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf0:	4770      	bx	lr
 8015bf2:	bf00      	nop
 8015bf4:	240000a0 	.word	0x240000a0
	...

08015c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015c00:	f3ef 8009 	mrs	r0, PSP
 8015c04:	f3bf 8f6f 	isb	sy
 8015c08:	4b15      	ldr	r3, [pc, #84]	; (8015c60 <pxCurrentTCBConst>)
 8015c0a:	681a      	ldr	r2, [r3, #0]
 8015c0c:	f01e 0f10 	tst.w	lr, #16
 8015c10:	bf08      	it	eq
 8015c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c1a:	6010      	str	r0, [r2, #0]
 8015c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015c24:	f380 8811 	msr	BASEPRI, r0
 8015c28:	f3bf 8f4f 	dsb	sy
 8015c2c:	f3bf 8f6f 	isb	sy
 8015c30:	f7fe feec 	bl	8014a0c <vTaskSwitchContext>
 8015c34:	f04f 0000 	mov.w	r0, #0
 8015c38:	f380 8811 	msr	BASEPRI, r0
 8015c3c:	bc09      	pop	{r0, r3}
 8015c3e:	6819      	ldr	r1, [r3, #0]
 8015c40:	6808      	ldr	r0, [r1, #0]
 8015c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c46:	f01e 0f10 	tst.w	lr, #16
 8015c4a:	bf08      	it	eq
 8015c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015c50:	f380 8809 	msr	PSP, r0
 8015c54:	f3bf 8f6f 	isb	sy
 8015c58:	4770      	bx	lr
 8015c5a:	bf00      	nop
 8015c5c:	f3af 8000 	nop.w

08015c60 <pxCurrentTCBConst>:
 8015c60:	240017c8 	.word	0x240017c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015c64:	bf00      	nop
 8015c66:	bf00      	nop

08015c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b082      	sub	sp, #8
 8015c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8015c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c72:	f383 8811 	msr	BASEPRI, r3
 8015c76:	f3bf 8f6f 	isb	sy
 8015c7a:	f3bf 8f4f 	dsb	sy
 8015c7e:	607b      	str	r3, [r7, #4]
}
 8015c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015c82:	f7fe fe09 	bl	8014898 <xTaskIncrementTick>
 8015c86:	4603      	mov	r3, r0
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d003      	beq.n	8015c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015c8c:	4b06      	ldr	r3, [pc, #24]	; (8015ca8 <xPortSysTickHandler+0x40>)
 8015c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c92:	601a      	str	r2, [r3, #0]
 8015c94:	2300      	movs	r3, #0
 8015c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	f383 8811 	msr	BASEPRI, r3
}
 8015c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015ca0:	bf00      	nop
 8015ca2:	3708      	adds	r7, #8
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	bd80      	pop	{r7, pc}
 8015ca8:	e000ed04 	.word	0xe000ed04

08015cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015cac:	b480      	push	{r7}
 8015cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015cb0:	4b0b      	ldr	r3, [pc, #44]	; (8015ce0 <vPortSetupTimerInterrupt+0x34>)
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015cb6:	4b0b      	ldr	r3, [pc, #44]	; (8015ce4 <vPortSetupTimerInterrupt+0x38>)
 8015cb8:	2200      	movs	r2, #0
 8015cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015cbc:	4b0a      	ldr	r3, [pc, #40]	; (8015ce8 <vPortSetupTimerInterrupt+0x3c>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	4a0a      	ldr	r2, [pc, #40]	; (8015cec <vPortSetupTimerInterrupt+0x40>)
 8015cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8015cc6:	099b      	lsrs	r3, r3, #6
 8015cc8:	4a09      	ldr	r2, [pc, #36]	; (8015cf0 <vPortSetupTimerInterrupt+0x44>)
 8015cca:	3b01      	subs	r3, #1
 8015ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015cce:	4b04      	ldr	r3, [pc, #16]	; (8015ce0 <vPortSetupTimerInterrupt+0x34>)
 8015cd0:	2207      	movs	r2, #7
 8015cd2:	601a      	str	r2, [r3, #0]
}
 8015cd4:	bf00      	nop
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cdc:	4770      	bx	lr
 8015cde:	bf00      	nop
 8015ce0:	e000e010 	.word	0xe000e010
 8015ce4:	e000e018 	.word	0xe000e018
 8015ce8:	24000090 	.word	0x24000090
 8015cec:	10624dd3 	.word	0x10624dd3
 8015cf0:	e000e014 	.word	0xe000e014

08015cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015d04 <vPortEnableVFP+0x10>
 8015cf8:	6801      	ldr	r1, [r0, #0]
 8015cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015cfe:	6001      	str	r1, [r0, #0]
 8015d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015d02:	bf00      	nop
 8015d04:	e000ed88 	.word	0xe000ed88

08015d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015d08:	b480      	push	{r7}
 8015d0a:	b085      	sub	sp, #20
 8015d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015d0e:	f3ef 8305 	mrs	r3, IPSR
 8015d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	2b0f      	cmp	r3, #15
 8015d18:	d914      	bls.n	8015d44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015d1a:	4a17      	ldr	r2, [pc, #92]	; (8015d78 <vPortValidateInterruptPriority+0x70>)
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	4413      	add	r3, r2
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015d24:	4b15      	ldr	r3, [pc, #84]	; (8015d7c <vPortValidateInterruptPriority+0x74>)
 8015d26:	781b      	ldrb	r3, [r3, #0]
 8015d28:	7afa      	ldrb	r2, [r7, #11]
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	d20a      	bcs.n	8015d44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d32:	f383 8811 	msr	BASEPRI, r3
 8015d36:	f3bf 8f6f 	isb	sy
 8015d3a:	f3bf 8f4f 	dsb	sy
 8015d3e:	607b      	str	r3, [r7, #4]
}
 8015d40:	bf00      	nop
 8015d42:	e7fe      	b.n	8015d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015d44:	4b0e      	ldr	r3, [pc, #56]	; (8015d80 <vPortValidateInterruptPriority+0x78>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015d4c:	4b0d      	ldr	r3, [pc, #52]	; (8015d84 <vPortValidateInterruptPriority+0x7c>)
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	429a      	cmp	r2, r3
 8015d52:	d90a      	bls.n	8015d6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d58:	f383 8811 	msr	BASEPRI, r3
 8015d5c:	f3bf 8f6f 	isb	sy
 8015d60:	f3bf 8f4f 	dsb	sy
 8015d64:	603b      	str	r3, [r7, #0]
}
 8015d66:	bf00      	nop
 8015d68:	e7fe      	b.n	8015d68 <vPortValidateInterruptPriority+0x60>
	}
 8015d6a:	bf00      	nop
 8015d6c:	3714      	adds	r7, #20
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d74:	4770      	bx	lr
 8015d76:	bf00      	nop
 8015d78:	e000e3f0 	.word	0xe000e3f0
 8015d7c:	24001df4 	.word	0x24001df4
 8015d80:	e000ed0c 	.word	0xe000ed0c
 8015d84:	24001df8 	.word	0x24001df8

08015d88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b08a      	sub	sp, #40	; 0x28
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015d90:	2300      	movs	r3, #0
 8015d92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015d94:	f7fe fcc4 	bl	8014720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015d98:	4b5b      	ldr	r3, [pc, #364]	; (8015f08 <pvPortMalloc+0x180>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d101      	bne.n	8015da4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015da0:	f000 f920 	bl	8015fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015da4:	4b59      	ldr	r3, [pc, #356]	; (8015f0c <pvPortMalloc+0x184>)
 8015da6:	681a      	ldr	r2, [r3, #0]
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	4013      	ands	r3, r2
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	f040 8093 	bne.w	8015ed8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d01d      	beq.n	8015df4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015db8:	2208      	movs	r2, #8
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	4413      	add	r3, r2
 8015dbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f003 0307 	and.w	r3, r3, #7
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d014      	beq.n	8015df4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f023 0307 	bic.w	r3, r3, #7
 8015dd0:	3308      	adds	r3, #8
 8015dd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f003 0307 	and.w	r3, r3, #7
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d00a      	beq.n	8015df4 <pvPortMalloc+0x6c>
	__asm volatile
 8015dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015de2:	f383 8811 	msr	BASEPRI, r3
 8015de6:	f3bf 8f6f 	isb	sy
 8015dea:	f3bf 8f4f 	dsb	sy
 8015dee:	617b      	str	r3, [r7, #20]
}
 8015df0:	bf00      	nop
 8015df2:	e7fe      	b.n	8015df2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d06e      	beq.n	8015ed8 <pvPortMalloc+0x150>
 8015dfa:	4b45      	ldr	r3, [pc, #276]	; (8015f10 <pvPortMalloc+0x188>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d869      	bhi.n	8015ed8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015e04:	4b43      	ldr	r3, [pc, #268]	; (8015f14 <pvPortMalloc+0x18c>)
 8015e06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015e08:	4b42      	ldr	r3, [pc, #264]	; (8015f14 <pvPortMalloc+0x18c>)
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e0e:	e004      	b.n	8015e1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e1c:	685b      	ldr	r3, [r3, #4]
 8015e1e:	687a      	ldr	r2, [r7, #4]
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d903      	bls.n	8015e2c <pvPortMalloc+0xa4>
 8015e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d1f1      	bne.n	8015e10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015e2c:	4b36      	ldr	r3, [pc, #216]	; (8015f08 <pvPortMalloc+0x180>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d050      	beq.n	8015ed8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015e36:	6a3b      	ldr	r3, [r7, #32]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	2208      	movs	r2, #8
 8015e3c:	4413      	add	r3, r2
 8015e3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e42:	681a      	ldr	r2, [r3, #0]
 8015e44:	6a3b      	ldr	r3, [r7, #32]
 8015e46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e4a:	685a      	ldr	r2, [r3, #4]
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	1ad2      	subs	r2, r2, r3
 8015e50:	2308      	movs	r3, #8
 8015e52:	005b      	lsls	r3, r3, #1
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d91f      	bls.n	8015e98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	4413      	add	r3, r2
 8015e5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e60:	69bb      	ldr	r3, [r7, #24]
 8015e62:	f003 0307 	and.w	r3, r3, #7
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d00a      	beq.n	8015e80 <pvPortMalloc+0xf8>
	__asm volatile
 8015e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e6e:	f383 8811 	msr	BASEPRI, r3
 8015e72:	f3bf 8f6f 	isb	sy
 8015e76:	f3bf 8f4f 	dsb	sy
 8015e7a:	613b      	str	r3, [r7, #16]
}
 8015e7c:	bf00      	nop
 8015e7e:	e7fe      	b.n	8015e7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e82:	685a      	ldr	r2, [r3, #4]
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	1ad2      	subs	r2, r2, r3
 8015e88:	69bb      	ldr	r3, [r7, #24]
 8015e8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e8e:	687a      	ldr	r2, [r7, #4]
 8015e90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015e92:	69b8      	ldr	r0, [r7, #24]
 8015e94:	f000 f908 	bl	80160a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015e98:	4b1d      	ldr	r3, [pc, #116]	; (8015f10 <pvPortMalloc+0x188>)
 8015e9a:	681a      	ldr	r2, [r3, #0]
 8015e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e9e:	685b      	ldr	r3, [r3, #4]
 8015ea0:	1ad3      	subs	r3, r2, r3
 8015ea2:	4a1b      	ldr	r2, [pc, #108]	; (8015f10 <pvPortMalloc+0x188>)
 8015ea4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015ea6:	4b1a      	ldr	r3, [pc, #104]	; (8015f10 <pvPortMalloc+0x188>)
 8015ea8:	681a      	ldr	r2, [r3, #0]
 8015eaa:	4b1b      	ldr	r3, [pc, #108]	; (8015f18 <pvPortMalloc+0x190>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d203      	bcs.n	8015eba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015eb2:	4b17      	ldr	r3, [pc, #92]	; (8015f10 <pvPortMalloc+0x188>)
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	4a18      	ldr	r2, [pc, #96]	; (8015f18 <pvPortMalloc+0x190>)
 8015eb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ebc:	685a      	ldr	r2, [r3, #4]
 8015ebe:	4b13      	ldr	r3, [pc, #76]	; (8015f0c <pvPortMalloc+0x184>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	431a      	orrs	r2, r3
 8015ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eca:	2200      	movs	r2, #0
 8015ecc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015ece:	4b13      	ldr	r3, [pc, #76]	; (8015f1c <pvPortMalloc+0x194>)
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	3301      	adds	r3, #1
 8015ed4:	4a11      	ldr	r2, [pc, #68]	; (8015f1c <pvPortMalloc+0x194>)
 8015ed6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015ed8:	f7fe fc30 	bl	801473c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015edc:	69fb      	ldr	r3, [r7, #28]
 8015ede:	f003 0307 	and.w	r3, r3, #7
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d00a      	beq.n	8015efc <pvPortMalloc+0x174>
	__asm volatile
 8015ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eea:	f383 8811 	msr	BASEPRI, r3
 8015eee:	f3bf 8f6f 	isb	sy
 8015ef2:	f3bf 8f4f 	dsb	sy
 8015ef6:	60fb      	str	r3, [r7, #12]
}
 8015ef8:	bf00      	nop
 8015efa:	e7fe      	b.n	8015efa <pvPortMalloc+0x172>
	return pvReturn;
 8015efc:	69fb      	ldr	r3, [r7, #28]
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	3728      	adds	r7, #40	; 0x28
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}
 8015f06:	bf00      	nop
 8015f08:	24005a04 	.word	0x24005a04
 8015f0c:	24005a18 	.word	0x24005a18
 8015f10:	24005a08 	.word	0x24005a08
 8015f14:	240059fc 	.word	0x240059fc
 8015f18:	24005a0c 	.word	0x24005a0c
 8015f1c:	24005a10 	.word	0x24005a10

08015f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b086      	sub	sp, #24
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d04d      	beq.n	8015fce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015f32:	2308      	movs	r3, #8
 8015f34:	425b      	negs	r3, r3
 8015f36:	697a      	ldr	r2, [r7, #20]
 8015f38:	4413      	add	r3, r2
 8015f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015f3c:	697b      	ldr	r3, [r7, #20]
 8015f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015f40:	693b      	ldr	r3, [r7, #16]
 8015f42:	685a      	ldr	r2, [r3, #4]
 8015f44:	4b24      	ldr	r3, [pc, #144]	; (8015fd8 <vPortFree+0xb8>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	4013      	ands	r3, r2
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d10a      	bne.n	8015f64 <vPortFree+0x44>
	__asm volatile
 8015f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f52:	f383 8811 	msr	BASEPRI, r3
 8015f56:	f3bf 8f6f 	isb	sy
 8015f5a:	f3bf 8f4f 	dsb	sy
 8015f5e:	60fb      	str	r3, [r7, #12]
}
 8015f60:	bf00      	nop
 8015f62:	e7fe      	b.n	8015f62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d00a      	beq.n	8015f82 <vPortFree+0x62>
	__asm volatile
 8015f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f70:	f383 8811 	msr	BASEPRI, r3
 8015f74:	f3bf 8f6f 	isb	sy
 8015f78:	f3bf 8f4f 	dsb	sy
 8015f7c:	60bb      	str	r3, [r7, #8]
}
 8015f7e:	bf00      	nop
 8015f80:	e7fe      	b.n	8015f80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015f82:	693b      	ldr	r3, [r7, #16]
 8015f84:	685a      	ldr	r2, [r3, #4]
 8015f86:	4b14      	ldr	r3, [pc, #80]	; (8015fd8 <vPortFree+0xb8>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	4013      	ands	r3, r2
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d01e      	beq.n	8015fce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015f90:	693b      	ldr	r3, [r7, #16]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d11a      	bne.n	8015fce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015f98:	693b      	ldr	r3, [r7, #16]
 8015f9a:	685a      	ldr	r2, [r3, #4]
 8015f9c:	4b0e      	ldr	r3, [pc, #56]	; (8015fd8 <vPortFree+0xb8>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	43db      	mvns	r3, r3
 8015fa2:	401a      	ands	r2, r3
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015fa8:	f7fe fbba 	bl	8014720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	685a      	ldr	r2, [r3, #4]
 8015fb0:	4b0a      	ldr	r3, [pc, #40]	; (8015fdc <vPortFree+0xbc>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	4413      	add	r3, r2
 8015fb6:	4a09      	ldr	r2, [pc, #36]	; (8015fdc <vPortFree+0xbc>)
 8015fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015fba:	6938      	ldr	r0, [r7, #16]
 8015fbc:	f000 f874 	bl	80160a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015fc0:	4b07      	ldr	r3, [pc, #28]	; (8015fe0 <vPortFree+0xc0>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	3301      	adds	r3, #1
 8015fc6:	4a06      	ldr	r2, [pc, #24]	; (8015fe0 <vPortFree+0xc0>)
 8015fc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015fca:	f7fe fbb7 	bl	801473c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015fce:	bf00      	nop
 8015fd0:	3718      	adds	r7, #24
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	24005a18 	.word	0x24005a18
 8015fdc:	24005a08 	.word	0x24005a08
 8015fe0:	24005a14 	.word	0x24005a14

08015fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b085      	sub	sp, #20
 8015fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015ff0:	4b27      	ldr	r3, [pc, #156]	; (8016090 <prvHeapInit+0xac>)
 8015ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	f003 0307 	and.w	r3, r3, #7
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d00c      	beq.n	8016018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	3307      	adds	r3, #7
 8016002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	f023 0307 	bic.w	r3, r3, #7
 801600a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801600c:	68ba      	ldr	r2, [r7, #8]
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	1ad3      	subs	r3, r2, r3
 8016012:	4a1f      	ldr	r2, [pc, #124]	; (8016090 <prvHeapInit+0xac>)
 8016014:	4413      	add	r3, r2
 8016016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801601c:	4a1d      	ldr	r2, [pc, #116]	; (8016094 <prvHeapInit+0xb0>)
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016022:	4b1c      	ldr	r3, [pc, #112]	; (8016094 <prvHeapInit+0xb0>)
 8016024:	2200      	movs	r2, #0
 8016026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	68ba      	ldr	r2, [r7, #8]
 801602c:	4413      	add	r3, r2
 801602e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016030:	2208      	movs	r2, #8
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	1a9b      	subs	r3, r3, r2
 8016036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	f023 0307 	bic.w	r3, r3, #7
 801603e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	4a15      	ldr	r2, [pc, #84]	; (8016098 <prvHeapInit+0xb4>)
 8016044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016046:	4b14      	ldr	r3, [pc, #80]	; (8016098 <prvHeapInit+0xb4>)
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	2200      	movs	r2, #0
 801604c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801604e:	4b12      	ldr	r3, [pc, #72]	; (8016098 <prvHeapInit+0xb4>)
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	2200      	movs	r2, #0
 8016054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	68fa      	ldr	r2, [r7, #12]
 801605e:	1ad2      	subs	r2, r2, r3
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016064:	4b0c      	ldr	r3, [pc, #48]	; (8016098 <prvHeapInit+0xb4>)
 8016066:	681a      	ldr	r2, [r3, #0]
 8016068:	683b      	ldr	r3, [r7, #0]
 801606a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	685b      	ldr	r3, [r3, #4]
 8016070:	4a0a      	ldr	r2, [pc, #40]	; (801609c <prvHeapInit+0xb8>)
 8016072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	685b      	ldr	r3, [r3, #4]
 8016078:	4a09      	ldr	r2, [pc, #36]	; (80160a0 <prvHeapInit+0xbc>)
 801607a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801607c:	4b09      	ldr	r3, [pc, #36]	; (80160a4 <prvHeapInit+0xc0>)
 801607e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016082:	601a      	str	r2, [r3, #0]
}
 8016084:	bf00      	nop
 8016086:	3714      	adds	r7, #20
 8016088:	46bd      	mov	sp, r7
 801608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608e:	4770      	bx	lr
 8016090:	24001dfc 	.word	0x24001dfc
 8016094:	240059fc 	.word	0x240059fc
 8016098:	24005a04 	.word	0x24005a04
 801609c:	24005a0c 	.word	0x24005a0c
 80160a0:	24005a08 	.word	0x24005a08
 80160a4:	24005a18 	.word	0x24005a18

080160a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80160a8:	b480      	push	{r7}
 80160aa:	b085      	sub	sp, #20
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80160b0:	4b28      	ldr	r3, [pc, #160]	; (8016154 <prvInsertBlockIntoFreeList+0xac>)
 80160b2:	60fb      	str	r3, [r7, #12]
 80160b4:	e002      	b.n	80160bc <prvInsertBlockIntoFreeList+0x14>
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	60fb      	str	r3, [r7, #12]
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d8f7      	bhi.n	80160b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	68ba      	ldr	r2, [r7, #8]
 80160d0:	4413      	add	r3, r2
 80160d2:	687a      	ldr	r2, [r7, #4]
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d108      	bne.n	80160ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	685a      	ldr	r2, [r3, #4]
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	685b      	ldr	r3, [r3, #4]
 80160e0:	441a      	add	r2, r3
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	685b      	ldr	r3, [r3, #4]
 80160f2:	68ba      	ldr	r2, [r7, #8]
 80160f4:	441a      	add	r2, r3
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	429a      	cmp	r2, r3
 80160fc:	d118      	bne.n	8016130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	681a      	ldr	r2, [r3, #0]
 8016102:	4b15      	ldr	r3, [pc, #84]	; (8016158 <prvInsertBlockIntoFreeList+0xb0>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	429a      	cmp	r2, r3
 8016108:	d00d      	beq.n	8016126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	685a      	ldr	r2, [r3, #4]
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	685b      	ldr	r3, [r3, #4]
 8016114:	441a      	add	r2, r3
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	681a      	ldr	r2, [r3, #0]
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	601a      	str	r2, [r3, #0]
 8016124:	e008      	b.n	8016138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016126:	4b0c      	ldr	r3, [pc, #48]	; (8016158 <prvInsertBlockIntoFreeList+0xb0>)
 8016128:	681a      	ldr	r2, [r3, #0]
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	601a      	str	r2, [r3, #0]
 801612e:	e003      	b.n	8016138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	681a      	ldr	r2, [r3, #0]
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016138:	68fa      	ldr	r2, [r7, #12]
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	429a      	cmp	r2, r3
 801613e:	d002      	beq.n	8016146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	687a      	ldr	r2, [r7, #4]
 8016144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016146:	bf00      	nop
 8016148:	3714      	adds	r7, #20
 801614a:	46bd      	mov	sp, r7
 801614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016150:	4770      	bx	lr
 8016152:	bf00      	nop
 8016154:	240059fc 	.word	0x240059fc
 8016158:	24005a04 	.word	0x24005a04

0801615c <__errno>:
 801615c:	4b01      	ldr	r3, [pc, #4]	; (8016164 <__errno+0x8>)
 801615e:	6818      	ldr	r0, [r3, #0]
 8016160:	4770      	bx	lr
 8016162:	bf00      	nop
 8016164:	240000a4 	.word	0x240000a4

08016168 <__libc_init_array>:
 8016168:	b570      	push	{r4, r5, r6, lr}
 801616a:	4d0d      	ldr	r5, [pc, #52]	; (80161a0 <__libc_init_array+0x38>)
 801616c:	4c0d      	ldr	r4, [pc, #52]	; (80161a4 <__libc_init_array+0x3c>)
 801616e:	1b64      	subs	r4, r4, r5
 8016170:	10a4      	asrs	r4, r4, #2
 8016172:	2600      	movs	r6, #0
 8016174:	42a6      	cmp	r6, r4
 8016176:	d109      	bne.n	801618c <__libc_init_array+0x24>
 8016178:	4d0b      	ldr	r5, [pc, #44]	; (80161a8 <__libc_init_array+0x40>)
 801617a:	4c0c      	ldr	r4, [pc, #48]	; (80161ac <__libc_init_array+0x44>)
 801617c:	f000 fd3c 	bl	8016bf8 <_init>
 8016180:	1b64      	subs	r4, r4, r5
 8016182:	10a4      	asrs	r4, r4, #2
 8016184:	2600      	movs	r6, #0
 8016186:	42a6      	cmp	r6, r4
 8016188:	d105      	bne.n	8016196 <__libc_init_array+0x2e>
 801618a:	bd70      	pop	{r4, r5, r6, pc}
 801618c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016190:	4798      	blx	r3
 8016192:	3601      	adds	r6, #1
 8016194:	e7ee      	b.n	8016174 <__libc_init_array+0xc>
 8016196:	f855 3b04 	ldr.w	r3, [r5], #4
 801619a:	4798      	blx	r3
 801619c:	3601      	adds	r6, #1
 801619e:	e7f2      	b.n	8016186 <__libc_init_array+0x1e>
 80161a0:	0801702c 	.word	0x0801702c
 80161a4:	0801702c 	.word	0x0801702c
 80161a8:	0801702c 	.word	0x0801702c
 80161ac:	08017030 	.word	0x08017030

080161b0 <malloc>:
 80161b0:	4b02      	ldr	r3, [pc, #8]	; (80161bc <malloc+0xc>)
 80161b2:	4601      	mov	r1, r0
 80161b4:	6818      	ldr	r0, [r3, #0]
 80161b6:	f000 b88d 	b.w	80162d4 <_malloc_r>
 80161ba:	bf00      	nop
 80161bc:	240000a4 	.word	0x240000a4

080161c0 <free>:
 80161c0:	4b02      	ldr	r3, [pc, #8]	; (80161cc <free+0xc>)
 80161c2:	4601      	mov	r1, r0
 80161c4:	6818      	ldr	r0, [r3, #0]
 80161c6:	f000 b819 	b.w	80161fc <_free_r>
 80161ca:	bf00      	nop
 80161cc:	240000a4 	.word	0x240000a4

080161d0 <memcpy>:
 80161d0:	440a      	add	r2, r1
 80161d2:	4291      	cmp	r1, r2
 80161d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80161d8:	d100      	bne.n	80161dc <memcpy+0xc>
 80161da:	4770      	bx	lr
 80161dc:	b510      	push	{r4, lr}
 80161de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80161e6:	4291      	cmp	r1, r2
 80161e8:	d1f9      	bne.n	80161de <memcpy+0xe>
 80161ea:	bd10      	pop	{r4, pc}

080161ec <memset>:
 80161ec:	4402      	add	r2, r0
 80161ee:	4603      	mov	r3, r0
 80161f0:	4293      	cmp	r3, r2
 80161f2:	d100      	bne.n	80161f6 <memset+0xa>
 80161f4:	4770      	bx	lr
 80161f6:	f803 1b01 	strb.w	r1, [r3], #1
 80161fa:	e7f9      	b.n	80161f0 <memset+0x4>

080161fc <_free_r>:
 80161fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161fe:	2900      	cmp	r1, #0
 8016200:	d044      	beq.n	801628c <_free_r+0x90>
 8016202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016206:	9001      	str	r0, [sp, #4]
 8016208:	2b00      	cmp	r3, #0
 801620a:	f1a1 0404 	sub.w	r4, r1, #4
 801620e:	bfb8      	it	lt
 8016210:	18e4      	addlt	r4, r4, r3
 8016212:	f000 fc39 	bl	8016a88 <__malloc_lock>
 8016216:	4a1e      	ldr	r2, [pc, #120]	; (8016290 <_free_r+0x94>)
 8016218:	9801      	ldr	r0, [sp, #4]
 801621a:	6813      	ldr	r3, [r2, #0]
 801621c:	b933      	cbnz	r3, 801622c <_free_r+0x30>
 801621e:	6063      	str	r3, [r4, #4]
 8016220:	6014      	str	r4, [r2, #0]
 8016222:	b003      	add	sp, #12
 8016224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016228:	f000 bc34 	b.w	8016a94 <__malloc_unlock>
 801622c:	42a3      	cmp	r3, r4
 801622e:	d908      	bls.n	8016242 <_free_r+0x46>
 8016230:	6825      	ldr	r5, [r4, #0]
 8016232:	1961      	adds	r1, r4, r5
 8016234:	428b      	cmp	r3, r1
 8016236:	bf01      	itttt	eq
 8016238:	6819      	ldreq	r1, [r3, #0]
 801623a:	685b      	ldreq	r3, [r3, #4]
 801623c:	1949      	addeq	r1, r1, r5
 801623e:	6021      	streq	r1, [r4, #0]
 8016240:	e7ed      	b.n	801621e <_free_r+0x22>
 8016242:	461a      	mov	r2, r3
 8016244:	685b      	ldr	r3, [r3, #4]
 8016246:	b10b      	cbz	r3, 801624c <_free_r+0x50>
 8016248:	42a3      	cmp	r3, r4
 801624a:	d9fa      	bls.n	8016242 <_free_r+0x46>
 801624c:	6811      	ldr	r1, [r2, #0]
 801624e:	1855      	adds	r5, r2, r1
 8016250:	42a5      	cmp	r5, r4
 8016252:	d10b      	bne.n	801626c <_free_r+0x70>
 8016254:	6824      	ldr	r4, [r4, #0]
 8016256:	4421      	add	r1, r4
 8016258:	1854      	adds	r4, r2, r1
 801625a:	42a3      	cmp	r3, r4
 801625c:	6011      	str	r1, [r2, #0]
 801625e:	d1e0      	bne.n	8016222 <_free_r+0x26>
 8016260:	681c      	ldr	r4, [r3, #0]
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	6053      	str	r3, [r2, #4]
 8016266:	4421      	add	r1, r4
 8016268:	6011      	str	r1, [r2, #0]
 801626a:	e7da      	b.n	8016222 <_free_r+0x26>
 801626c:	d902      	bls.n	8016274 <_free_r+0x78>
 801626e:	230c      	movs	r3, #12
 8016270:	6003      	str	r3, [r0, #0]
 8016272:	e7d6      	b.n	8016222 <_free_r+0x26>
 8016274:	6825      	ldr	r5, [r4, #0]
 8016276:	1961      	adds	r1, r4, r5
 8016278:	428b      	cmp	r3, r1
 801627a:	bf04      	itt	eq
 801627c:	6819      	ldreq	r1, [r3, #0]
 801627e:	685b      	ldreq	r3, [r3, #4]
 8016280:	6063      	str	r3, [r4, #4]
 8016282:	bf04      	itt	eq
 8016284:	1949      	addeq	r1, r1, r5
 8016286:	6021      	streq	r1, [r4, #0]
 8016288:	6054      	str	r4, [r2, #4]
 801628a:	e7ca      	b.n	8016222 <_free_r+0x26>
 801628c:	b003      	add	sp, #12
 801628e:	bd30      	pop	{r4, r5, pc}
 8016290:	24005a1c 	.word	0x24005a1c

08016294 <sbrk_aligned>:
 8016294:	b570      	push	{r4, r5, r6, lr}
 8016296:	4e0e      	ldr	r6, [pc, #56]	; (80162d0 <sbrk_aligned+0x3c>)
 8016298:	460c      	mov	r4, r1
 801629a:	6831      	ldr	r1, [r6, #0]
 801629c:	4605      	mov	r5, r0
 801629e:	b911      	cbnz	r1, 80162a6 <sbrk_aligned+0x12>
 80162a0:	f000 f902 	bl	80164a8 <_sbrk_r>
 80162a4:	6030      	str	r0, [r6, #0]
 80162a6:	4621      	mov	r1, r4
 80162a8:	4628      	mov	r0, r5
 80162aa:	f000 f8fd 	bl	80164a8 <_sbrk_r>
 80162ae:	1c43      	adds	r3, r0, #1
 80162b0:	d00a      	beq.n	80162c8 <sbrk_aligned+0x34>
 80162b2:	1cc4      	adds	r4, r0, #3
 80162b4:	f024 0403 	bic.w	r4, r4, #3
 80162b8:	42a0      	cmp	r0, r4
 80162ba:	d007      	beq.n	80162cc <sbrk_aligned+0x38>
 80162bc:	1a21      	subs	r1, r4, r0
 80162be:	4628      	mov	r0, r5
 80162c0:	f000 f8f2 	bl	80164a8 <_sbrk_r>
 80162c4:	3001      	adds	r0, #1
 80162c6:	d101      	bne.n	80162cc <sbrk_aligned+0x38>
 80162c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80162cc:	4620      	mov	r0, r4
 80162ce:	bd70      	pop	{r4, r5, r6, pc}
 80162d0:	24005a20 	.word	0x24005a20

080162d4 <_malloc_r>:
 80162d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162d8:	1ccd      	adds	r5, r1, #3
 80162da:	f025 0503 	bic.w	r5, r5, #3
 80162de:	3508      	adds	r5, #8
 80162e0:	2d0c      	cmp	r5, #12
 80162e2:	bf38      	it	cc
 80162e4:	250c      	movcc	r5, #12
 80162e6:	2d00      	cmp	r5, #0
 80162e8:	4607      	mov	r7, r0
 80162ea:	db01      	blt.n	80162f0 <_malloc_r+0x1c>
 80162ec:	42a9      	cmp	r1, r5
 80162ee:	d905      	bls.n	80162fc <_malloc_r+0x28>
 80162f0:	230c      	movs	r3, #12
 80162f2:	603b      	str	r3, [r7, #0]
 80162f4:	2600      	movs	r6, #0
 80162f6:	4630      	mov	r0, r6
 80162f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162fc:	4e2e      	ldr	r6, [pc, #184]	; (80163b8 <_malloc_r+0xe4>)
 80162fe:	f000 fbc3 	bl	8016a88 <__malloc_lock>
 8016302:	6833      	ldr	r3, [r6, #0]
 8016304:	461c      	mov	r4, r3
 8016306:	bb34      	cbnz	r4, 8016356 <_malloc_r+0x82>
 8016308:	4629      	mov	r1, r5
 801630a:	4638      	mov	r0, r7
 801630c:	f7ff ffc2 	bl	8016294 <sbrk_aligned>
 8016310:	1c43      	adds	r3, r0, #1
 8016312:	4604      	mov	r4, r0
 8016314:	d14d      	bne.n	80163b2 <_malloc_r+0xde>
 8016316:	6834      	ldr	r4, [r6, #0]
 8016318:	4626      	mov	r6, r4
 801631a:	2e00      	cmp	r6, #0
 801631c:	d140      	bne.n	80163a0 <_malloc_r+0xcc>
 801631e:	6823      	ldr	r3, [r4, #0]
 8016320:	4631      	mov	r1, r6
 8016322:	4638      	mov	r0, r7
 8016324:	eb04 0803 	add.w	r8, r4, r3
 8016328:	f000 f8be 	bl	80164a8 <_sbrk_r>
 801632c:	4580      	cmp	r8, r0
 801632e:	d13a      	bne.n	80163a6 <_malloc_r+0xd2>
 8016330:	6821      	ldr	r1, [r4, #0]
 8016332:	3503      	adds	r5, #3
 8016334:	1a6d      	subs	r5, r5, r1
 8016336:	f025 0503 	bic.w	r5, r5, #3
 801633a:	3508      	adds	r5, #8
 801633c:	2d0c      	cmp	r5, #12
 801633e:	bf38      	it	cc
 8016340:	250c      	movcc	r5, #12
 8016342:	4629      	mov	r1, r5
 8016344:	4638      	mov	r0, r7
 8016346:	f7ff ffa5 	bl	8016294 <sbrk_aligned>
 801634a:	3001      	adds	r0, #1
 801634c:	d02b      	beq.n	80163a6 <_malloc_r+0xd2>
 801634e:	6823      	ldr	r3, [r4, #0]
 8016350:	442b      	add	r3, r5
 8016352:	6023      	str	r3, [r4, #0]
 8016354:	e00e      	b.n	8016374 <_malloc_r+0xa0>
 8016356:	6822      	ldr	r2, [r4, #0]
 8016358:	1b52      	subs	r2, r2, r5
 801635a:	d41e      	bmi.n	801639a <_malloc_r+0xc6>
 801635c:	2a0b      	cmp	r2, #11
 801635e:	d916      	bls.n	801638e <_malloc_r+0xba>
 8016360:	1961      	adds	r1, r4, r5
 8016362:	42a3      	cmp	r3, r4
 8016364:	6025      	str	r5, [r4, #0]
 8016366:	bf18      	it	ne
 8016368:	6059      	strne	r1, [r3, #4]
 801636a:	6863      	ldr	r3, [r4, #4]
 801636c:	bf08      	it	eq
 801636e:	6031      	streq	r1, [r6, #0]
 8016370:	5162      	str	r2, [r4, r5]
 8016372:	604b      	str	r3, [r1, #4]
 8016374:	4638      	mov	r0, r7
 8016376:	f104 060b 	add.w	r6, r4, #11
 801637a:	f000 fb8b 	bl	8016a94 <__malloc_unlock>
 801637e:	f026 0607 	bic.w	r6, r6, #7
 8016382:	1d23      	adds	r3, r4, #4
 8016384:	1af2      	subs	r2, r6, r3
 8016386:	d0b6      	beq.n	80162f6 <_malloc_r+0x22>
 8016388:	1b9b      	subs	r3, r3, r6
 801638a:	50a3      	str	r3, [r4, r2]
 801638c:	e7b3      	b.n	80162f6 <_malloc_r+0x22>
 801638e:	6862      	ldr	r2, [r4, #4]
 8016390:	42a3      	cmp	r3, r4
 8016392:	bf0c      	ite	eq
 8016394:	6032      	streq	r2, [r6, #0]
 8016396:	605a      	strne	r2, [r3, #4]
 8016398:	e7ec      	b.n	8016374 <_malloc_r+0xa0>
 801639a:	4623      	mov	r3, r4
 801639c:	6864      	ldr	r4, [r4, #4]
 801639e:	e7b2      	b.n	8016306 <_malloc_r+0x32>
 80163a0:	4634      	mov	r4, r6
 80163a2:	6876      	ldr	r6, [r6, #4]
 80163a4:	e7b9      	b.n	801631a <_malloc_r+0x46>
 80163a6:	230c      	movs	r3, #12
 80163a8:	603b      	str	r3, [r7, #0]
 80163aa:	4638      	mov	r0, r7
 80163ac:	f000 fb72 	bl	8016a94 <__malloc_unlock>
 80163b0:	e7a1      	b.n	80162f6 <_malloc_r+0x22>
 80163b2:	6025      	str	r5, [r4, #0]
 80163b4:	e7de      	b.n	8016374 <_malloc_r+0xa0>
 80163b6:	bf00      	nop
 80163b8:	24005a1c 	.word	0x24005a1c

080163bc <_puts_r>:
 80163bc:	b570      	push	{r4, r5, r6, lr}
 80163be:	460e      	mov	r6, r1
 80163c0:	4605      	mov	r5, r0
 80163c2:	b118      	cbz	r0, 80163cc <_puts_r+0x10>
 80163c4:	6983      	ldr	r3, [r0, #24]
 80163c6:	b90b      	cbnz	r3, 80163cc <_puts_r+0x10>
 80163c8:	f000 fa58 	bl	801687c <__sinit>
 80163cc:	69ab      	ldr	r3, [r5, #24]
 80163ce:	68ac      	ldr	r4, [r5, #8]
 80163d0:	b913      	cbnz	r3, 80163d8 <_puts_r+0x1c>
 80163d2:	4628      	mov	r0, r5
 80163d4:	f000 fa52 	bl	801687c <__sinit>
 80163d8:	4b2c      	ldr	r3, [pc, #176]	; (801648c <_puts_r+0xd0>)
 80163da:	429c      	cmp	r4, r3
 80163dc:	d120      	bne.n	8016420 <_puts_r+0x64>
 80163de:	686c      	ldr	r4, [r5, #4]
 80163e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80163e2:	07db      	lsls	r3, r3, #31
 80163e4:	d405      	bmi.n	80163f2 <_puts_r+0x36>
 80163e6:	89a3      	ldrh	r3, [r4, #12]
 80163e8:	0598      	lsls	r0, r3, #22
 80163ea:	d402      	bmi.n	80163f2 <_puts_r+0x36>
 80163ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163ee:	f000 fae3 	bl	80169b8 <__retarget_lock_acquire_recursive>
 80163f2:	89a3      	ldrh	r3, [r4, #12]
 80163f4:	0719      	lsls	r1, r3, #28
 80163f6:	d51d      	bpl.n	8016434 <_puts_r+0x78>
 80163f8:	6923      	ldr	r3, [r4, #16]
 80163fa:	b1db      	cbz	r3, 8016434 <_puts_r+0x78>
 80163fc:	3e01      	subs	r6, #1
 80163fe:	68a3      	ldr	r3, [r4, #8]
 8016400:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016404:	3b01      	subs	r3, #1
 8016406:	60a3      	str	r3, [r4, #8]
 8016408:	bb39      	cbnz	r1, 801645a <_puts_r+0x9e>
 801640a:	2b00      	cmp	r3, #0
 801640c:	da38      	bge.n	8016480 <_puts_r+0xc4>
 801640e:	4622      	mov	r2, r4
 8016410:	210a      	movs	r1, #10
 8016412:	4628      	mov	r0, r5
 8016414:	f000 f858 	bl	80164c8 <__swbuf_r>
 8016418:	3001      	adds	r0, #1
 801641a:	d011      	beq.n	8016440 <_puts_r+0x84>
 801641c:	250a      	movs	r5, #10
 801641e:	e011      	b.n	8016444 <_puts_r+0x88>
 8016420:	4b1b      	ldr	r3, [pc, #108]	; (8016490 <_puts_r+0xd4>)
 8016422:	429c      	cmp	r4, r3
 8016424:	d101      	bne.n	801642a <_puts_r+0x6e>
 8016426:	68ac      	ldr	r4, [r5, #8]
 8016428:	e7da      	b.n	80163e0 <_puts_r+0x24>
 801642a:	4b1a      	ldr	r3, [pc, #104]	; (8016494 <_puts_r+0xd8>)
 801642c:	429c      	cmp	r4, r3
 801642e:	bf08      	it	eq
 8016430:	68ec      	ldreq	r4, [r5, #12]
 8016432:	e7d5      	b.n	80163e0 <_puts_r+0x24>
 8016434:	4621      	mov	r1, r4
 8016436:	4628      	mov	r0, r5
 8016438:	f000 f898 	bl	801656c <__swsetup_r>
 801643c:	2800      	cmp	r0, #0
 801643e:	d0dd      	beq.n	80163fc <_puts_r+0x40>
 8016440:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016446:	07da      	lsls	r2, r3, #31
 8016448:	d405      	bmi.n	8016456 <_puts_r+0x9a>
 801644a:	89a3      	ldrh	r3, [r4, #12]
 801644c:	059b      	lsls	r3, r3, #22
 801644e:	d402      	bmi.n	8016456 <_puts_r+0x9a>
 8016450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016452:	f000 fab2 	bl	80169ba <__retarget_lock_release_recursive>
 8016456:	4628      	mov	r0, r5
 8016458:	bd70      	pop	{r4, r5, r6, pc}
 801645a:	2b00      	cmp	r3, #0
 801645c:	da04      	bge.n	8016468 <_puts_r+0xac>
 801645e:	69a2      	ldr	r2, [r4, #24]
 8016460:	429a      	cmp	r2, r3
 8016462:	dc06      	bgt.n	8016472 <_puts_r+0xb6>
 8016464:	290a      	cmp	r1, #10
 8016466:	d004      	beq.n	8016472 <_puts_r+0xb6>
 8016468:	6823      	ldr	r3, [r4, #0]
 801646a:	1c5a      	adds	r2, r3, #1
 801646c:	6022      	str	r2, [r4, #0]
 801646e:	7019      	strb	r1, [r3, #0]
 8016470:	e7c5      	b.n	80163fe <_puts_r+0x42>
 8016472:	4622      	mov	r2, r4
 8016474:	4628      	mov	r0, r5
 8016476:	f000 f827 	bl	80164c8 <__swbuf_r>
 801647a:	3001      	adds	r0, #1
 801647c:	d1bf      	bne.n	80163fe <_puts_r+0x42>
 801647e:	e7df      	b.n	8016440 <_puts_r+0x84>
 8016480:	6823      	ldr	r3, [r4, #0]
 8016482:	250a      	movs	r5, #10
 8016484:	1c5a      	adds	r2, r3, #1
 8016486:	6022      	str	r2, [r4, #0]
 8016488:	701d      	strb	r5, [r3, #0]
 801648a:	e7db      	b.n	8016444 <_puts_r+0x88>
 801648c:	08016fe4 	.word	0x08016fe4
 8016490:	08017004 	.word	0x08017004
 8016494:	08016fc4 	.word	0x08016fc4

08016498 <puts>:
 8016498:	4b02      	ldr	r3, [pc, #8]	; (80164a4 <puts+0xc>)
 801649a:	4601      	mov	r1, r0
 801649c:	6818      	ldr	r0, [r3, #0]
 801649e:	f7ff bf8d 	b.w	80163bc <_puts_r>
 80164a2:	bf00      	nop
 80164a4:	240000a4 	.word	0x240000a4

080164a8 <_sbrk_r>:
 80164a8:	b538      	push	{r3, r4, r5, lr}
 80164aa:	4d06      	ldr	r5, [pc, #24]	; (80164c4 <_sbrk_r+0x1c>)
 80164ac:	2300      	movs	r3, #0
 80164ae:	4604      	mov	r4, r0
 80164b0:	4608      	mov	r0, r1
 80164b2:	602b      	str	r3, [r5, #0]
 80164b4:	f7ed f950 	bl	8003758 <_sbrk>
 80164b8:	1c43      	adds	r3, r0, #1
 80164ba:	d102      	bne.n	80164c2 <_sbrk_r+0x1a>
 80164bc:	682b      	ldr	r3, [r5, #0]
 80164be:	b103      	cbz	r3, 80164c2 <_sbrk_r+0x1a>
 80164c0:	6023      	str	r3, [r4, #0]
 80164c2:	bd38      	pop	{r3, r4, r5, pc}
 80164c4:	24005a28 	.word	0x24005a28

080164c8 <__swbuf_r>:
 80164c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164ca:	460e      	mov	r6, r1
 80164cc:	4614      	mov	r4, r2
 80164ce:	4605      	mov	r5, r0
 80164d0:	b118      	cbz	r0, 80164da <__swbuf_r+0x12>
 80164d2:	6983      	ldr	r3, [r0, #24]
 80164d4:	b90b      	cbnz	r3, 80164da <__swbuf_r+0x12>
 80164d6:	f000 f9d1 	bl	801687c <__sinit>
 80164da:	4b21      	ldr	r3, [pc, #132]	; (8016560 <__swbuf_r+0x98>)
 80164dc:	429c      	cmp	r4, r3
 80164de:	d12b      	bne.n	8016538 <__swbuf_r+0x70>
 80164e0:	686c      	ldr	r4, [r5, #4]
 80164e2:	69a3      	ldr	r3, [r4, #24]
 80164e4:	60a3      	str	r3, [r4, #8]
 80164e6:	89a3      	ldrh	r3, [r4, #12]
 80164e8:	071a      	lsls	r2, r3, #28
 80164ea:	d52f      	bpl.n	801654c <__swbuf_r+0x84>
 80164ec:	6923      	ldr	r3, [r4, #16]
 80164ee:	b36b      	cbz	r3, 801654c <__swbuf_r+0x84>
 80164f0:	6923      	ldr	r3, [r4, #16]
 80164f2:	6820      	ldr	r0, [r4, #0]
 80164f4:	1ac0      	subs	r0, r0, r3
 80164f6:	6963      	ldr	r3, [r4, #20]
 80164f8:	b2f6      	uxtb	r6, r6
 80164fa:	4283      	cmp	r3, r0
 80164fc:	4637      	mov	r7, r6
 80164fe:	dc04      	bgt.n	801650a <__swbuf_r+0x42>
 8016500:	4621      	mov	r1, r4
 8016502:	4628      	mov	r0, r5
 8016504:	f000 f926 	bl	8016754 <_fflush_r>
 8016508:	bb30      	cbnz	r0, 8016558 <__swbuf_r+0x90>
 801650a:	68a3      	ldr	r3, [r4, #8]
 801650c:	3b01      	subs	r3, #1
 801650e:	60a3      	str	r3, [r4, #8]
 8016510:	6823      	ldr	r3, [r4, #0]
 8016512:	1c5a      	adds	r2, r3, #1
 8016514:	6022      	str	r2, [r4, #0]
 8016516:	701e      	strb	r6, [r3, #0]
 8016518:	6963      	ldr	r3, [r4, #20]
 801651a:	3001      	adds	r0, #1
 801651c:	4283      	cmp	r3, r0
 801651e:	d004      	beq.n	801652a <__swbuf_r+0x62>
 8016520:	89a3      	ldrh	r3, [r4, #12]
 8016522:	07db      	lsls	r3, r3, #31
 8016524:	d506      	bpl.n	8016534 <__swbuf_r+0x6c>
 8016526:	2e0a      	cmp	r6, #10
 8016528:	d104      	bne.n	8016534 <__swbuf_r+0x6c>
 801652a:	4621      	mov	r1, r4
 801652c:	4628      	mov	r0, r5
 801652e:	f000 f911 	bl	8016754 <_fflush_r>
 8016532:	b988      	cbnz	r0, 8016558 <__swbuf_r+0x90>
 8016534:	4638      	mov	r0, r7
 8016536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016538:	4b0a      	ldr	r3, [pc, #40]	; (8016564 <__swbuf_r+0x9c>)
 801653a:	429c      	cmp	r4, r3
 801653c:	d101      	bne.n	8016542 <__swbuf_r+0x7a>
 801653e:	68ac      	ldr	r4, [r5, #8]
 8016540:	e7cf      	b.n	80164e2 <__swbuf_r+0x1a>
 8016542:	4b09      	ldr	r3, [pc, #36]	; (8016568 <__swbuf_r+0xa0>)
 8016544:	429c      	cmp	r4, r3
 8016546:	bf08      	it	eq
 8016548:	68ec      	ldreq	r4, [r5, #12]
 801654a:	e7ca      	b.n	80164e2 <__swbuf_r+0x1a>
 801654c:	4621      	mov	r1, r4
 801654e:	4628      	mov	r0, r5
 8016550:	f000 f80c 	bl	801656c <__swsetup_r>
 8016554:	2800      	cmp	r0, #0
 8016556:	d0cb      	beq.n	80164f0 <__swbuf_r+0x28>
 8016558:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801655c:	e7ea      	b.n	8016534 <__swbuf_r+0x6c>
 801655e:	bf00      	nop
 8016560:	08016fe4 	.word	0x08016fe4
 8016564:	08017004 	.word	0x08017004
 8016568:	08016fc4 	.word	0x08016fc4

0801656c <__swsetup_r>:
 801656c:	4b32      	ldr	r3, [pc, #200]	; (8016638 <__swsetup_r+0xcc>)
 801656e:	b570      	push	{r4, r5, r6, lr}
 8016570:	681d      	ldr	r5, [r3, #0]
 8016572:	4606      	mov	r6, r0
 8016574:	460c      	mov	r4, r1
 8016576:	b125      	cbz	r5, 8016582 <__swsetup_r+0x16>
 8016578:	69ab      	ldr	r3, [r5, #24]
 801657a:	b913      	cbnz	r3, 8016582 <__swsetup_r+0x16>
 801657c:	4628      	mov	r0, r5
 801657e:	f000 f97d 	bl	801687c <__sinit>
 8016582:	4b2e      	ldr	r3, [pc, #184]	; (801663c <__swsetup_r+0xd0>)
 8016584:	429c      	cmp	r4, r3
 8016586:	d10f      	bne.n	80165a8 <__swsetup_r+0x3c>
 8016588:	686c      	ldr	r4, [r5, #4]
 801658a:	89a3      	ldrh	r3, [r4, #12]
 801658c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016590:	0719      	lsls	r1, r3, #28
 8016592:	d42c      	bmi.n	80165ee <__swsetup_r+0x82>
 8016594:	06dd      	lsls	r5, r3, #27
 8016596:	d411      	bmi.n	80165bc <__swsetup_r+0x50>
 8016598:	2309      	movs	r3, #9
 801659a:	6033      	str	r3, [r6, #0]
 801659c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80165a0:	81a3      	strh	r3, [r4, #12]
 80165a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80165a6:	e03e      	b.n	8016626 <__swsetup_r+0xba>
 80165a8:	4b25      	ldr	r3, [pc, #148]	; (8016640 <__swsetup_r+0xd4>)
 80165aa:	429c      	cmp	r4, r3
 80165ac:	d101      	bne.n	80165b2 <__swsetup_r+0x46>
 80165ae:	68ac      	ldr	r4, [r5, #8]
 80165b0:	e7eb      	b.n	801658a <__swsetup_r+0x1e>
 80165b2:	4b24      	ldr	r3, [pc, #144]	; (8016644 <__swsetup_r+0xd8>)
 80165b4:	429c      	cmp	r4, r3
 80165b6:	bf08      	it	eq
 80165b8:	68ec      	ldreq	r4, [r5, #12]
 80165ba:	e7e6      	b.n	801658a <__swsetup_r+0x1e>
 80165bc:	0758      	lsls	r0, r3, #29
 80165be:	d512      	bpl.n	80165e6 <__swsetup_r+0x7a>
 80165c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80165c2:	b141      	cbz	r1, 80165d6 <__swsetup_r+0x6a>
 80165c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165c8:	4299      	cmp	r1, r3
 80165ca:	d002      	beq.n	80165d2 <__swsetup_r+0x66>
 80165cc:	4630      	mov	r0, r6
 80165ce:	f7ff fe15 	bl	80161fc <_free_r>
 80165d2:	2300      	movs	r3, #0
 80165d4:	6363      	str	r3, [r4, #52]	; 0x34
 80165d6:	89a3      	ldrh	r3, [r4, #12]
 80165d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80165dc:	81a3      	strh	r3, [r4, #12]
 80165de:	2300      	movs	r3, #0
 80165e0:	6063      	str	r3, [r4, #4]
 80165e2:	6923      	ldr	r3, [r4, #16]
 80165e4:	6023      	str	r3, [r4, #0]
 80165e6:	89a3      	ldrh	r3, [r4, #12]
 80165e8:	f043 0308 	orr.w	r3, r3, #8
 80165ec:	81a3      	strh	r3, [r4, #12]
 80165ee:	6923      	ldr	r3, [r4, #16]
 80165f0:	b94b      	cbnz	r3, 8016606 <__swsetup_r+0x9a>
 80165f2:	89a3      	ldrh	r3, [r4, #12]
 80165f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80165f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80165fc:	d003      	beq.n	8016606 <__swsetup_r+0x9a>
 80165fe:	4621      	mov	r1, r4
 8016600:	4630      	mov	r0, r6
 8016602:	f000 fa01 	bl	8016a08 <__smakebuf_r>
 8016606:	89a0      	ldrh	r0, [r4, #12]
 8016608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801660c:	f010 0301 	ands.w	r3, r0, #1
 8016610:	d00a      	beq.n	8016628 <__swsetup_r+0xbc>
 8016612:	2300      	movs	r3, #0
 8016614:	60a3      	str	r3, [r4, #8]
 8016616:	6963      	ldr	r3, [r4, #20]
 8016618:	425b      	negs	r3, r3
 801661a:	61a3      	str	r3, [r4, #24]
 801661c:	6923      	ldr	r3, [r4, #16]
 801661e:	b943      	cbnz	r3, 8016632 <__swsetup_r+0xc6>
 8016620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016624:	d1ba      	bne.n	801659c <__swsetup_r+0x30>
 8016626:	bd70      	pop	{r4, r5, r6, pc}
 8016628:	0781      	lsls	r1, r0, #30
 801662a:	bf58      	it	pl
 801662c:	6963      	ldrpl	r3, [r4, #20]
 801662e:	60a3      	str	r3, [r4, #8]
 8016630:	e7f4      	b.n	801661c <__swsetup_r+0xb0>
 8016632:	2000      	movs	r0, #0
 8016634:	e7f7      	b.n	8016626 <__swsetup_r+0xba>
 8016636:	bf00      	nop
 8016638:	240000a4 	.word	0x240000a4
 801663c:	08016fe4 	.word	0x08016fe4
 8016640:	08017004 	.word	0x08017004
 8016644:	08016fc4 	.word	0x08016fc4

08016648 <__sflush_r>:
 8016648:	898a      	ldrh	r2, [r1, #12]
 801664a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801664e:	4605      	mov	r5, r0
 8016650:	0710      	lsls	r0, r2, #28
 8016652:	460c      	mov	r4, r1
 8016654:	d458      	bmi.n	8016708 <__sflush_r+0xc0>
 8016656:	684b      	ldr	r3, [r1, #4]
 8016658:	2b00      	cmp	r3, #0
 801665a:	dc05      	bgt.n	8016668 <__sflush_r+0x20>
 801665c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801665e:	2b00      	cmp	r3, #0
 8016660:	dc02      	bgt.n	8016668 <__sflush_r+0x20>
 8016662:	2000      	movs	r0, #0
 8016664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801666a:	2e00      	cmp	r6, #0
 801666c:	d0f9      	beq.n	8016662 <__sflush_r+0x1a>
 801666e:	2300      	movs	r3, #0
 8016670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016674:	682f      	ldr	r7, [r5, #0]
 8016676:	602b      	str	r3, [r5, #0]
 8016678:	d032      	beq.n	80166e0 <__sflush_r+0x98>
 801667a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801667c:	89a3      	ldrh	r3, [r4, #12]
 801667e:	075a      	lsls	r2, r3, #29
 8016680:	d505      	bpl.n	801668e <__sflush_r+0x46>
 8016682:	6863      	ldr	r3, [r4, #4]
 8016684:	1ac0      	subs	r0, r0, r3
 8016686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016688:	b10b      	cbz	r3, 801668e <__sflush_r+0x46>
 801668a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801668c:	1ac0      	subs	r0, r0, r3
 801668e:	2300      	movs	r3, #0
 8016690:	4602      	mov	r2, r0
 8016692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016694:	6a21      	ldr	r1, [r4, #32]
 8016696:	4628      	mov	r0, r5
 8016698:	47b0      	blx	r6
 801669a:	1c43      	adds	r3, r0, #1
 801669c:	89a3      	ldrh	r3, [r4, #12]
 801669e:	d106      	bne.n	80166ae <__sflush_r+0x66>
 80166a0:	6829      	ldr	r1, [r5, #0]
 80166a2:	291d      	cmp	r1, #29
 80166a4:	d82c      	bhi.n	8016700 <__sflush_r+0xb8>
 80166a6:	4a2a      	ldr	r2, [pc, #168]	; (8016750 <__sflush_r+0x108>)
 80166a8:	40ca      	lsrs	r2, r1
 80166aa:	07d6      	lsls	r6, r2, #31
 80166ac:	d528      	bpl.n	8016700 <__sflush_r+0xb8>
 80166ae:	2200      	movs	r2, #0
 80166b0:	6062      	str	r2, [r4, #4]
 80166b2:	04d9      	lsls	r1, r3, #19
 80166b4:	6922      	ldr	r2, [r4, #16]
 80166b6:	6022      	str	r2, [r4, #0]
 80166b8:	d504      	bpl.n	80166c4 <__sflush_r+0x7c>
 80166ba:	1c42      	adds	r2, r0, #1
 80166bc:	d101      	bne.n	80166c2 <__sflush_r+0x7a>
 80166be:	682b      	ldr	r3, [r5, #0]
 80166c0:	b903      	cbnz	r3, 80166c4 <__sflush_r+0x7c>
 80166c2:	6560      	str	r0, [r4, #84]	; 0x54
 80166c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166c6:	602f      	str	r7, [r5, #0]
 80166c8:	2900      	cmp	r1, #0
 80166ca:	d0ca      	beq.n	8016662 <__sflush_r+0x1a>
 80166cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166d0:	4299      	cmp	r1, r3
 80166d2:	d002      	beq.n	80166da <__sflush_r+0x92>
 80166d4:	4628      	mov	r0, r5
 80166d6:	f7ff fd91 	bl	80161fc <_free_r>
 80166da:	2000      	movs	r0, #0
 80166dc:	6360      	str	r0, [r4, #52]	; 0x34
 80166de:	e7c1      	b.n	8016664 <__sflush_r+0x1c>
 80166e0:	6a21      	ldr	r1, [r4, #32]
 80166e2:	2301      	movs	r3, #1
 80166e4:	4628      	mov	r0, r5
 80166e6:	47b0      	blx	r6
 80166e8:	1c41      	adds	r1, r0, #1
 80166ea:	d1c7      	bne.n	801667c <__sflush_r+0x34>
 80166ec:	682b      	ldr	r3, [r5, #0]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d0c4      	beq.n	801667c <__sflush_r+0x34>
 80166f2:	2b1d      	cmp	r3, #29
 80166f4:	d001      	beq.n	80166fa <__sflush_r+0xb2>
 80166f6:	2b16      	cmp	r3, #22
 80166f8:	d101      	bne.n	80166fe <__sflush_r+0xb6>
 80166fa:	602f      	str	r7, [r5, #0]
 80166fc:	e7b1      	b.n	8016662 <__sflush_r+0x1a>
 80166fe:	89a3      	ldrh	r3, [r4, #12]
 8016700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016704:	81a3      	strh	r3, [r4, #12]
 8016706:	e7ad      	b.n	8016664 <__sflush_r+0x1c>
 8016708:	690f      	ldr	r7, [r1, #16]
 801670a:	2f00      	cmp	r7, #0
 801670c:	d0a9      	beq.n	8016662 <__sflush_r+0x1a>
 801670e:	0793      	lsls	r3, r2, #30
 8016710:	680e      	ldr	r6, [r1, #0]
 8016712:	bf08      	it	eq
 8016714:	694b      	ldreq	r3, [r1, #20]
 8016716:	600f      	str	r7, [r1, #0]
 8016718:	bf18      	it	ne
 801671a:	2300      	movne	r3, #0
 801671c:	eba6 0807 	sub.w	r8, r6, r7
 8016720:	608b      	str	r3, [r1, #8]
 8016722:	f1b8 0f00 	cmp.w	r8, #0
 8016726:	dd9c      	ble.n	8016662 <__sflush_r+0x1a>
 8016728:	6a21      	ldr	r1, [r4, #32]
 801672a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801672c:	4643      	mov	r3, r8
 801672e:	463a      	mov	r2, r7
 8016730:	4628      	mov	r0, r5
 8016732:	47b0      	blx	r6
 8016734:	2800      	cmp	r0, #0
 8016736:	dc06      	bgt.n	8016746 <__sflush_r+0xfe>
 8016738:	89a3      	ldrh	r3, [r4, #12]
 801673a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801673e:	81a3      	strh	r3, [r4, #12]
 8016740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016744:	e78e      	b.n	8016664 <__sflush_r+0x1c>
 8016746:	4407      	add	r7, r0
 8016748:	eba8 0800 	sub.w	r8, r8, r0
 801674c:	e7e9      	b.n	8016722 <__sflush_r+0xda>
 801674e:	bf00      	nop
 8016750:	20400001 	.word	0x20400001

08016754 <_fflush_r>:
 8016754:	b538      	push	{r3, r4, r5, lr}
 8016756:	690b      	ldr	r3, [r1, #16]
 8016758:	4605      	mov	r5, r0
 801675a:	460c      	mov	r4, r1
 801675c:	b913      	cbnz	r3, 8016764 <_fflush_r+0x10>
 801675e:	2500      	movs	r5, #0
 8016760:	4628      	mov	r0, r5
 8016762:	bd38      	pop	{r3, r4, r5, pc}
 8016764:	b118      	cbz	r0, 801676e <_fflush_r+0x1a>
 8016766:	6983      	ldr	r3, [r0, #24]
 8016768:	b90b      	cbnz	r3, 801676e <_fflush_r+0x1a>
 801676a:	f000 f887 	bl	801687c <__sinit>
 801676e:	4b14      	ldr	r3, [pc, #80]	; (80167c0 <_fflush_r+0x6c>)
 8016770:	429c      	cmp	r4, r3
 8016772:	d11b      	bne.n	80167ac <_fflush_r+0x58>
 8016774:	686c      	ldr	r4, [r5, #4]
 8016776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d0ef      	beq.n	801675e <_fflush_r+0xa>
 801677e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016780:	07d0      	lsls	r0, r2, #31
 8016782:	d404      	bmi.n	801678e <_fflush_r+0x3a>
 8016784:	0599      	lsls	r1, r3, #22
 8016786:	d402      	bmi.n	801678e <_fflush_r+0x3a>
 8016788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801678a:	f000 f915 	bl	80169b8 <__retarget_lock_acquire_recursive>
 801678e:	4628      	mov	r0, r5
 8016790:	4621      	mov	r1, r4
 8016792:	f7ff ff59 	bl	8016648 <__sflush_r>
 8016796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016798:	07da      	lsls	r2, r3, #31
 801679a:	4605      	mov	r5, r0
 801679c:	d4e0      	bmi.n	8016760 <_fflush_r+0xc>
 801679e:	89a3      	ldrh	r3, [r4, #12]
 80167a0:	059b      	lsls	r3, r3, #22
 80167a2:	d4dd      	bmi.n	8016760 <_fflush_r+0xc>
 80167a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167a6:	f000 f908 	bl	80169ba <__retarget_lock_release_recursive>
 80167aa:	e7d9      	b.n	8016760 <_fflush_r+0xc>
 80167ac:	4b05      	ldr	r3, [pc, #20]	; (80167c4 <_fflush_r+0x70>)
 80167ae:	429c      	cmp	r4, r3
 80167b0:	d101      	bne.n	80167b6 <_fflush_r+0x62>
 80167b2:	68ac      	ldr	r4, [r5, #8]
 80167b4:	e7df      	b.n	8016776 <_fflush_r+0x22>
 80167b6:	4b04      	ldr	r3, [pc, #16]	; (80167c8 <_fflush_r+0x74>)
 80167b8:	429c      	cmp	r4, r3
 80167ba:	bf08      	it	eq
 80167bc:	68ec      	ldreq	r4, [r5, #12]
 80167be:	e7da      	b.n	8016776 <_fflush_r+0x22>
 80167c0:	08016fe4 	.word	0x08016fe4
 80167c4:	08017004 	.word	0x08017004
 80167c8:	08016fc4 	.word	0x08016fc4

080167cc <std>:
 80167cc:	2300      	movs	r3, #0
 80167ce:	b510      	push	{r4, lr}
 80167d0:	4604      	mov	r4, r0
 80167d2:	e9c0 3300 	strd	r3, r3, [r0]
 80167d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80167da:	6083      	str	r3, [r0, #8]
 80167dc:	8181      	strh	r1, [r0, #12]
 80167de:	6643      	str	r3, [r0, #100]	; 0x64
 80167e0:	81c2      	strh	r2, [r0, #14]
 80167e2:	6183      	str	r3, [r0, #24]
 80167e4:	4619      	mov	r1, r3
 80167e6:	2208      	movs	r2, #8
 80167e8:	305c      	adds	r0, #92	; 0x5c
 80167ea:	f7ff fcff 	bl	80161ec <memset>
 80167ee:	4b05      	ldr	r3, [pc, #20]	; (8016804 <std+0x38>)
 80167f0:	6263      	str	r3, [r4, #36]	; 0x24
 80167f2:	4b05      	ldr	r3, [pc, #20]	; (8016808 <std+0x3c>)
 80167f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80167f6:	4b05      	ldr	r3, [pc, #20]	; (801680c <std+0x40>)
 80167f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80167fa:	4b05      	ldr	r3, [pc, #20]	; (8016810 <std+0x44>)
 80167fc:	6224      	str	r4, [r4, #32]
 80167fe:	6323      	str	r3, [r4, #48]	; 0x30
 8016800:	bd10      	pop	{r4, pc}
 8016802:	bf00      	nop
 8016804:	08016aa1 	.word	0x08016aa1
 8016808:	08016ac3 	.word	0x08016ac3
 801680c:	08016afb 	.word	0x08016afb
 8016810:	08016b1f 	.word	0x08016b1f

08016814 <_cleanup_r>:
 8016814:	4901      	ldr	r1, [pc, #4]	; (801681c <_cleanup_r+0x8>)
 8016816:	f000 b8af 	b.w	8016978 <_fwalk_reent>
 801681a:	bf00      	nop
 801681c:	08016755 	.word	0x08016755

08016820 <__sfmoreglue>:
 8016820:	b570      	push	{r4, r5, r6, lr}
 8016822:	2268      	movs	r2, #104	; 0x68
 8016824:	1e4d      	subs	r5, r1, #1
 8016826:	4355      	muls	r5, r2
 8016828:	460e      	mov	r6, r1
 801682a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801682e:	f7ff fd51 	bl	80162d4 <_malloc_r>
 8016832:	4604      	mov	r4, r0
 8016834:	b140      	cbz	r0, 8016848 <__sfmoreglue+0x28>
 8016836:	2100      	movs	r1, #0
 8016838:	e9c0 1600 	strd	r1, r6, [r0]
 801683c:	300c      	adds	r0, #12
 801683e:	60a0      	str	r0, [r4, #8]
 8016840:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016844:	f7ff fcd2 	bl	80161ec <memset>
 8016848:	4620      	mov	r0, r4
 801684a:	bd70      	pop	{r4, r5, r6, pc}

0801684c <__sfp_lock_acquire>:
 801684c:	4801      	ldr	r0, [pc, #4]	; (8016854 <__sfp_lock_acquire+0x8>)
 801684e:	f000 b8b3 	b.w	80169b8 <__retarget_lock_acquire_recursive>
 8016852:	bf00      	nop
 8016854:	24005a25 	.word	0x24005a25

08016858 <__sfp_lock_release>:
 8016858:	4801      	ldr	r0, [pc, #4]	; (8016860 <__sfp_lock_release+0x8>)
 801685a:	f000 b8ae 	b.w	80169ba <__retarget_lock_release_recursive>
 801685e:	bf00      	nop
 8016860:	24005a25 	.word	0x24005a25

08016864 <__sinit_lock_acquire>:
 8016864:	4801      	ldr	r0, [pc, #4]	; (801686c <__sinit_lock_acquire+0x8>)
 8016866:	f000 b8a7 	b.w	80169b8 <__retarget_lock_acquire_recursive>
 801686a:	bf00      	nop
 801686c:	24005a26 	.word	0x24005a26

08016870 <__sinit_lock_release>:
 8016870:	4801      	ldr	r0, [pc, #4]	; (8016878 <__sinit_lock_release+0x8>)
 8016872:	f000 b8a2 	b.w	80169ba <__retarget_lock_release_recursive>
 8016876:	bf00      	nop
 8016878:	24005a26 	.word	0x24005a26

0801687c <__sinit>:
 801687c:	b510      	push	{r4, lr}
 801687e:	4604      	mov	r4, r0
 8016880:	f7ff fff0 	bl	8016864 <__sinit_lock_acquire>
 8016884:	69a3      	ldr	r3, [r4, #24]
 8016886:	b11b      	cbz	r3, 8016890 <__sinit+0x14>
 8016888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801688c:	f7ff bff0 	b.w	8016870 <__sinit_lock_release>
 8016890:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016894:	6523      	str	r3, [r4, #80]	; 0x50
 8016896:	4b13      	ldr	r3, [pc, #76]	; (80168e4 <__sinit+0x68>)
 8016898:	4a13      	ldr	r2, [pc, #76]	; (80168e8 <__sinit+0x6c>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	62a2      	str	r2, [r4, #40]	; 0x28
 801689e:	42a3      	cmp	r3, r4
 80168a0:	bf04      	itt	eq
 80168a2:	2301      	moveq	r3, #1
 80168a4:	61a3      	streq	r3, [r4, #24]
 80168a6:	4620      	mov	r0, r4
 80168a8:	f000 f820 	bl	80168ec <__sfp>
 80168ac:	6060      	str	r0, [r4, #4]
 80168ae:	4620      	mov	r0, r4
 80168b0:	f000 f81c 	bl	80168ec <__sfp>
 80168b4:	60a0      	str	r0, [r4, #8]
 80168b6:	4620      	mov	r0, r4
 80168b8:	f000 f818 	bl	80168ec <__sfp>
 80168bc:	2200      	movs	r2, #0
 80168be:	60e0      	str	r0, [r4, #12]
 80168c0:	2104      	movs	r1, #4
 80168c2:	6860      	ldr	r0, [r4, #4]
 80168c4:	f7ff ff82 	bl	80167cc <std>
 80168c8:	68a0      	ldr	r0, [r4, #8]
 80168ca:	2201      	movs	r2, #1
 80168cc:	2109      	movs	r1, #9
 80168ce:	f7ff ff7d 	bl	80167cc <std>
 80168d2:	68e0      	ldr	r0, [r4, #12]
 80168d4:	2202      	movs	r2, #2
 80168d6:	2112      	movs	r1, #18
 80168d8:	f7ff ff78 	bl	80167cc <std>
 80168dc:	2301      	movs	r3, #1
 80168de:	61a3      	str	r3, [r4, #24]
 80168e0:	e7d2      	b.n	8016888 <__sinit+0xc>
 80168e2:	bf00      	nop
 80168e4:	08016fc0 	.word	0x08016fc0
 80168e8:	08016815 	.word	0x08016815

080168ec <__sfp>:
 80168ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ee:	4607      	mov	r7, r0
 80168f0:	f7ff ffac 	bl	801684c <__sfp_lock_acquire>
 80168f4:	4b1e      	ldr	r3, [pc, #120]	; (8016970 <__sfp+0x84>)
 80168f6:	681e      	ldr	r6, [r3, #0]
 80168f8:	69b3      	ldr	r3, [r6, #24]
 80168fa:	b913      	cbnz	r3, 8016902 <__sfp+0x16>
 80168fc:	4630      	mov	r0, r6
 80168fe:	f7ff ffbd 	bl	801687c <__sinit>
 8016902:	3648      	adds	r6, #72	; 0x48
 8016904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016908:	3b01      	subs	r3, #1
 801690a:	d503      	bpl.n	8016914 <__sfp+0x28>
 801690c:	6833      	ldr	r3, [r6, #0]
 801690e:	b30b      	cbz	r3, 8016954 <__sfp+0x68>
 8016910:	6836      	ldr	r6, [r6, #0]
 8016912:	e7f7      	b.n	8016904 <__sfp+0x18>
 8016914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016918:	b9d5      	cbnz	r5, 8016950 <__sfp+0x64>
 801691a:	4b16      	ldr	r3, [pc, #88]	; (8016974 <__sfp+0x88>)
 801691c:	60e3      	str	r3, [r4, #12]
 801691e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016922:	6665      	str	r5, [r4, #100]	; 0x64
 8016924:	f000 f847 	bl	80169b6 <__retarget_lock_init_recursive>
 8016928:	f7ff ff96 	bl	8016858 <__sfp_lock_release>
 801692c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016930:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016934:	6025      	str	r5, [r4, #0]
 8016936:	61a5      	str	r5, [r4, #24]
 8016938:	2208      	movs	r2, #8
 801693a:	4629      	mov	r1, r5
 801693c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016940:	f7ff fc54 	bl	80161ec <memset>
 8016944:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016948:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801694c:	4620      	mov	r0, r4
 801694e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016950:	3468      	adds	r4, #104	; 0x68
 8016952:	e7d9      	b.n	8016908 <__sfp+0x1c>
 8016954:	2104      	movs	r1, #4
 8016956:	4638      	mov	r0, r7
 8016958:	f7ff ff62 	bl	8016820 <__sfmoreglue>
 801695c:	4604      	mov	r4, r0
 801695e:	6030      	str	r0, [r6, #0]
 8016960:	2800      	cmp	r0, #0
 8016962:	d1d5      	bne.n	8016910 <__sfp+0x24>
 8016964:	f7ff ff78 	bl	8016858 <__sfp_lock_release>
 8016968:	230c      	movs	r3, #12
 801696a:	603b      	str	r3, [r7, #0]
 801696c:	e7ee      	b.n	801694c <__sfp+0x60>
 801696e:	bf00      	nop
 8016970:	08016fc0 	.word	0x08016fc0
 8016974:	ffff0001 	.word	0xffff0001

08016978 <_fwalk_reent>:
 8016978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801697c:	4606      	mov	r6, r0
 801697e:	4688      	mov	r8, r1
 8016980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016984:	2700      	movs	r7, #0
 8016986:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801698a:	f1b9 0901 	subs.w	r9, r9, #1
 801698e:	d505      	bpl.n	801699c <_fwalk_reent+0x24>
 8016990:	6824      	ldr	r4, [r4, #0]
 8016992:	2c00      	cmp	r4, #0
 8016994:	d1f7      	bne.n	8016986 <_fwalk_reent+0xe>
 8016996:	4638      	mov	r0, r7
 8016998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801699c:	89ab      	ldrh	r3, [r5, #12]
 801699e:	2b01      	cmp	r3, #1
 80169a0:	d907      	bls.n	80169b2 <_fwalk_reent+0x3a>
 80169a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80169a6:	3301      	adds	r3, #1
 80169a8:	d003      	beq.n	80169b2 <_fwalk_reent+0x3a>
 80169aa:	4629      	mov	r1, r5
 80169ac:	4630      	mov	r0, r6
 80169ae:	47c0      	blx	r8
 80169b0:	4307      	orrs	r7, r0
 80169b2:	3568      	adds	r5, #104	; 0x68
 80169b4:	e7e9      	b.n	801698a <_fwalk_reent+0x12>

080169b6 <__retarget_lock_init_recursive>:
 80169b6:	4770      	bx	lr

080169b8 <__retarget_lock_acquire_recursive>:
 80169b8:	4770      	bx	lr

080169ba <__retarget_lock_release_recursive>:
 80169ba:	4770      	bx	lr

080169bc <__swhatbuf_r>:
 80169bc:	b570      	push	{r4, r5, r6, lr}
 80169be:	460e      	mov	r6, r1
 80169c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169c4:	2900      	cmp	r1, #0
 80169c6:	b096      	sub	sp, #88	; 0x58
 80169c8:	4614      	mov	r4, r2
 80169ca:	461d      	mov	r5, r3
 80169cc:	da08      	bge.n	80169e0 <__swhatbuf_r+0x24>
 80169ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80169d2:	2200      	movs	r2, #0
 80169d4:	602a      	str	r2, [r5, #0]
 80169d6:	061a      	lsls	r2, r3, #24
 80169d8:	d410      	bmi.n	80169fc <__swhatbuf_r+0x40>
 80169da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80169de:	e00e      	b.n	80169fe <__swhatbuf_r+0x42>
 80169e0:	466a      	mov	r2, sp
 80169e2:	f000 f8c3 	bl	8016b6c <_fstat_r>
 80169e6:	2800      	cmp	r0, #0
 80169e8:	dbf1      	blt.n	80169ce <__swhatbuf_r+0x12>
 80169ea:	9a01      	ldr	r2, [sp, #4]
 80169ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80169f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80169f4:	425a      	negs	r2, r3
 80169f6:	415a      	adcs	r2, r3
 80169f8:	602a      	str	r2, [r5, #0]
 80169fa:	e7ee      	b.n	80169da <__swhatbuf_r+0x1e>
 80169fc:	2340      	movs	r3, #64	; 0x40
 80169fe:	2000      	movs	r0, #0
 8016a00:	6023      	str	r3, [r4, #0]
 8016a02:	b016      	add	sp, #88	; 0x58
 8016a04:	bd70      	pop	{r4, r5, r6, pc}
	...

08016a08 <__smakebuf_r>:
 8016a08:	898b      	ldrh	r3, [r1, #12]
 8016a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a0c:	079d      	lsls	r5, r3, #30
 8016a0e:	4606      	mov	r6, r0
 8016a10:	460c      	mov	r4, r1
 8016a12:	d507      	bpl.n	8016a24 <__smakebuf_r+0x1c>
 8016a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016a18:	6023      	str	r3, [r4, #0]
 8016a1a:	6123      	str	r3, [r4, #16]
 8016a1c:	2301      	movs	r3, #1
 8016a1e:	6163      	str	r3, [r4, #20]
 8016a20:	b002      	add	sp, #8
 8016a22:	bd70      	pop	{r4, r5, r6, pc}
 8016a24:	ab01      	add	r3, sp, #4
 8016a26:	466a      	mov	r2, sp
 8016a28:	f7ff ffc8 	bl	80169bc <__swhatbuf_r>
 8016a2c:	9900      	ldr	r1, [sp, #0]
 8016a2e:	4605      	mov	r5, r0
 8016a30:	4630      	mov	r0, r6
 8016a32:	f7ff fc4f 	bl	80162d4 <_malloc_r>
 8016a36:	b948      	cbnz	r0, 8016a4c <__smakebuf_r+0x44>
 8016a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a3c:	059a      	lsls	r2, r3, #22
 8016a3e:	d4ef      	bmi.n	8016a20 <__smakebuf_r+0x18>
 8016a40:	f023 0303 	bic.w	r3, r3, #3
 8016a44:	f043 0302 	orr.w	r3, r3, #2
 8016a48:	81a3      	strh	r3, [r4, #12]
 8016a4a:	e7e3      	b.n	8016a14 <__smakebuf_r+0xc>
 8016a4c:	4b0d      	ldr	r3, [pc, #52]	; (8016a84 <__smakebuf_r+0x7c>)
 8016a4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016a50:	89a3      	ldrh	r3, [r4, #12]
 8016a52:	6020      	str	r0, [r4, #0]
 8016a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a58:	81a3      	strh	r3, [r4, #12]
 8016a5a:	9b00      	ldr	r3, [sp, #0]
 8016a5c:	6163      	str	r3, [r4, #20]
 8016a5e:	9b01      	ldr	r3, [sp, #4]
 8016a60:	6120      	str	r0, [r4, #16]
 8016a62:	b15b      	cbz	r3, 8016a7c <__smakebuf_r+0x74>
 8016a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a68:	4630      	mov	r0, r6
 8016a6a:	f000 f891 	bl	8016b90 <_isatty_r>
 8016a6e:	b128      	cbz	r0, 8016a7c <__smakebuf_r+0x74>
 8016a70:	89a3      	ldrh	r3, [r4, #12]
 8016a72:	f023 0303 	bic.w	r3, r3, #3
 8016a76:	f043 0301 	orr.w	r3, r3, #1
 8016a7a:	81a3      	strh	r3, [r4, #12]
 8016a7c:	89a0      	ldrh	r0, [r4, #12]
 8016a7e:	4305      	orrs	r5, r0
 8016a80:	81a5      	strh	r5, [r4, #12]
 8016a82:	e7cd      	b.n	8016a20 <__smakebuf_r+0x18>
 8016a84:	08016815 	.word	0x08016815

08016a88 <__malloc_lock>:
 8016a88:	4801      	ldr	r0, [pc, #4]	; (8016a90 <__malloc_lock+0x8>)
 8016a8a:	f7ff bf95 	b.w	80169b8 <__retarget_lock_acquire_recursive>
 8016a8e:	bf00      	nop
 8016a90:	24005a24 	.word	0x24005a24

08016a94 <__malloc_unlock>:
 8016a94:	4801      	ldr	r0, [pc, #4]	; (8016a9c <__malloc_unlock+0x8>)
 8016a96:	f7ff bf90 	b.w	80169ba <__retarget_lock_release_recursive>
 8016a9a:	bf00      	nop
 8016a9c:	24005a24 	.word	0x24005a24

08016aa0 <__sread>:
 8016aa0:	b510      	push	{r4, lr}
 8016aa2:	460c      	mov	r4, r1
 8016aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016aa8:	f000 f894 	bl	8016bd4 <_read_r>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	bfab      	itete	ge
 8016ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8016ab4:	181b      	addge	r3, r3, r0
 8016ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016aba:	bfac      	ite	ge
 8016abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8016abe:	81a3      	strhlt	r3, [r4, #12]
 8016ac0:	bd10      	pop	{r4, pc}

08016ac2 <__swrite>:
 8016ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ac6:	461f      	mov	r7, r3
 8016ac8:	898b      	ldrh	r3, [r1, #12]
 8016aca:	05db      	lsls	r3, r3, #23
 8016acc:	4605      	mov	r5, r0
 8016ace:	460c      	mov	r4, r1
 8016ad0:	4616      	mov	r6, r2
 8016ad2:	d505      	bpl.n	8016ae0 <__swrite+0x1e>
 8016ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ad8:	2302      	movs	r3, #2
 8016ada:	2200      	movs	r2, #0
 8016adc:	f000 f868 	bl	8016bb0 <_lseek_r>
 8016ae0:	89a3      	ldrh	r3, [r4, #12]
 8016ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016aea:	81a3      	strh	r3, [r4, #12]
 8016aec:	4632      	mov	r2, r6
 8016aee:	463b      	mov	r3, r7
 8016af0:	4628      	mov	r0, r5
 8016af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016af6:	f000 b817 	b.w	8016b28 <_write_r>

08016afa <__sseek>:
 8016afa:	b510      	push	{r4, lr}
 8016afc:	460c      	mov	r4, r1
 8016afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b02:	f000 f855 	bl	8016bb0 <_lseek_r>
 8016b06:	1c43      	adds	r3, r0, #1
 8016b08:	89a3      	ldrh	r3, [r4, #12]
 8016b0a:	bf15      	itete	ne
 8016b0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016b16:	81a3      	strheq	r3, [r4, #12]
 8016b18:	bf18      	it	ne
 8016b1a:	81a3      	strhne	r3, [r4, #12]
 8016b1c:	bd10      	pop	{r4, pc}

08016b1e <__sclose>:
 8016b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b22:	f000 b813 	b.w	8016b4c <_close_r>
	...

08016b28 <_write_r>:
 8016b28:	b538      	push	{r3, r4, r5, lr}
 8016b2a:	4d07      	ldr	r5, [pc, #28]	; (8016b48 <_write_r+0x20>)
 8016b2c:	4604      	mov	r4, r0
 8016b2e:	4608      	mov	r0, r1
 8016b30:	4611      	mov	r1, r2
 8016b32:	2200      	movs	r2, #0
 8016b34:	602a      	str	r2, [r5, #0]
 8016b36:	461a      	mov	r2, r3
 8016b38:	f7ec fdbd 	bl	80036b6 <_write>
 8016b3c:	1c43      	adds	r3, r0, #1
 8016b3e:	d102      	bne.n	8016b46 <_write_r+0x1e>
 8016b40:	682b      	ldr	r3, [r5, #0]
 8016b42:	b103      	cbz	r3, 8016b46 <_write_r+0x1e>
 8016b44:	6023      	str	r3, [r4, #0]
 8016b46:	bd38      	pop	{r3, r4, r5, pc}
 8016b48:	24005a28 	.word	0x24005a28

08016b4c <_close_r>:
 8016b4c:	b538      	push	{r3, r4, r5, lr}
 8016b4e:	4d06      	ldr	r5, [pc, #24]	; (8016b68 <_close_r+0x1c>)
 8016b50:	2300      	movs	r3, #0
 8016b52:	4604      	mov	r4, r0
 8016b54:	4608      	mov	r0, r1
 8016b56:	602b      	str	r3, [r5, #0]
 8016b58:	f7ec fdc9 	bl	80036ee <_close>
 8016b5c:	1c43      	adds	r3, r0, #1
 8016b5e:	d102      	bne.n	8016b66 <_close_r+0x1a>
 8016b60:	682b      	ldr	r3, [r5, #0]
 8016b62:	b103      	cbz	r3, 8016b66 <_close_r+0x1a>
 8016b64:	6023      	str	r3, [r4, #0]
 8016b66:	bd38      	pop	{r3, r4, r5, pc}
 8016b68:	24005a28 	.word	0x24005a28

08016b6c <_fstat_r>:
 8016b6c:	b538      	push	{r3, r4, r5, lr}
 8016b6e:	4d07      	ldr	r5, [pc, #28]	; (8016b8c <_fstat_r+0x20>)
 8016b70:	2300      	movs	r3, #0
 8016b72:	4604      	mov	r4, r0
 8016b74:	4608      	mov	r0, r1
 8016b76:	4611      	mov	r1, r2
 8016b78:	602b      	str	r3, [r5, #0]
 8016b7a:	f7ec fdc4 	bl	8003706 <_fstat>
 8016b7e:	1c43      	adds	r3, r0, #1
 8016b80:	d102      	bne.n	8016b88 <_fstat_r+0x1c>
 8016b82:	682b      	ldr	r3, [r5, #0]
 8016b84:	b103      	cbz	r3, 8016b88 <_fstat_r+0x1c>
 8016b86:	6023      	str	r3, [r4, #0]
 8016b88:	bd38      	pop	{r3, r4, r5, pc}
 8016b8a:	bf00      	nop
 8016b8c:	24005a28 	.word	0x24005a28

08016b90 <_isatty_r>:
 8016b90:	b538      	push	{r3, r4, r5, lr}
 8016b92:	4d06      	ldr	r5, [pc, #24]	; (8016bac <_isatty_r+0x1c>)
 8016b94:	2300      	movs	r3, #0
 8016b96:	4604      	mov	r4, r0
 8016b98:	4608      	mov	r0, r1
 8016b9a:	602b      	str	r3, [r5, #0]
 8016b9c:	f7ec fdc3 	bl	8003726 <_isatty>
 8016ba0:	1c43      	adds	r3, r0, #1
 8016ba2:	d102      	bne.n	8016baa <_isatty_r+0x1a>
 8016ba4:	682b      	ldr	r3, [r5, #0]
 8016ba6:	b103      	cbz	r3, 8016baa <_isatty_r+0x1a>
 8016ba8:	6023      	str	r3, [r4, #0]
 8016baa:	bd38      	pop	{r3, r4, r5, pc}
 8016bac:	24005a28 	.word	0x24005a28

08016bb0 <_lseek_r>:
 8016bb0:	b538      	push	{r3, r4, r5, lr}
 8016bb2:	4d07      	ldr	r5, [pc, #28]	; (8016bd0 <_lseek_r+0x20>)
 8016bb4:	4604      	mov	r4, r0
 8016bb6:	4608      	mov	r0, r1
 8016bb8:	4611      	mov	r1, r2
 8016bba:	2200      	movs	r2, #0
 8016bbc:	602a      	str	r2, [r5, #0]
 8016bbe:	461a      	mov	r2, r3
 8016bc0:	f7ec fdbc 	bl	800373c <_lseek>
 8016bc4:	1c43      	adds	r3, r0, #1
 8016bc6:	d102      	bne.n	8016bce <_lseek_r+0x1e>
 8016bc8:	682b      	ldr	r3, [r5, #0]
 8016bca:	b103      	cbz	r3, 8016bce <_lseek_r+0x1e>
 8016bcc:	6023      	str	r3, [r4, #0]
 8016bce:	bd38      	pop	{r3, r4, r5, pc}
 8016bd0:	24005a28 	.word	0x24005a28

08016bd4 <_read_r>:
 8016bd4:	b538      	push	{r3, r4, r5, lr}
 8016bd6:	4d07      	ldr	r5, [pc, #28]	; (8016bf4 <_read_r+0x20>)
 8016bd8:	4604      	mov	r4, r0
 8016bda:	4608      	mov	r0, r1
 8016bdc:	4611      	mov	r1, r2
 8016bde:	2200      	movs	r2, #0
 8016be0:	602a      	str	r2, [r5, #0]
 8016be2:	461a      	mov	r2, r3
 8016be4:	f7ec fd4a 	bl	800367c <_read>
 8016be8:	1c43      	adds	r3, r0, #1
 8016bea:	d102      	bne.n	8016bf2 <_read_r+0x1e>
 8016bec:	682b      	ldr	r3, [r5, #0]
 8016bee:	b103      	cbz	r3, 8016bf2 <_read_r+0x1e>
 8016bf0:	6023      	str	r3, [r4, #0]
 8016bf2:	bd38      	pop	{r3, r4, r5, pc}
 8016bf4:	24005a28 	.word	0x24005a28

08016bf8 <_init>:
 8016bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bfa:	bf00      	nop
 8016bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bfe:	bc08      	pop	{r3}
 8016c00:	469e      	mov	lr, r3
 8016c02:	4770      	bx	lr

08016c04 <_fini>:
 8016c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c06:	bf00      	nop
 8016c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c0a:	bc08      	pop	{r3}
 8016c0c:	469e      	mov	lr, r3
 8016c0e:	4770      	bx	lr
