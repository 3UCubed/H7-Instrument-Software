
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a2c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801a560  0801a560  0002a560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a9f8  0801a9f8  0002a9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801aa00  0801aa00  0002aa00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801aa04  0801aa04  0002aa04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000140  24000000  0801aa08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006988  24000140  0801ab48  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24006ac8  0801ab48  00036ac8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041d93  00000000  00000000  0003016e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000080ea  00000000  00000000  00071f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c98  00000000  00000000  00079ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002930  00000000  00000000  0007cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00047374  00000000  00000000  0007f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000446e3  00000000  00000000  000c692c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00197eb5  00000000  00000000  0010b00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002a2ec4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c05c  00000000  00000000  002a2f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a548 	.word	0x0801a548

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801a548 	.word	0x0801a548

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f004 ffa9 	bl	80055c0 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f002 faea 	bl	8002c4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 f8c4 	bl	8006810 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f002 fadd 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fa07 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f002 fac4 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 f9f9 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f002 fab6 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 f9eb 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f002 faa8 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 f9dd 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f002 fa9a 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 f9ce 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f002 fa8b 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 f9bf 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f002 fa7c 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 f9b0 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f002 fa6d 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 f9a1 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f002 fa5e 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 f992 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f002 fa4f 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 f983 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f002 fa40 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 f974 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f002 fa31 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f004 fe91 	bl	80055c0 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f002 f9d2 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 f8fc 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 f9b9 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 f8ee 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 f9ab 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 f8e0 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 f99d 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 f8d2 	bl	8005ac8 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 f98f 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f009 fdfc 	bl	800a5f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f009 fdf0 	bl	800a5f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f009 fde4 	bl	800a5f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f006 fc8f 	bl	8007398 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 f8e4 	bl	8002c4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 fb4a 	bl	8005178 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 fb44 	bl	8005178 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f006 fc2f 	bl	8007398 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 f884 	bl	8002c4c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f018 ffd5 	bl	8019b3c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f005 fff7 	bl	8006b8c <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 f852 	bl	8002c4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fa12 	bl	8006fec <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 f83d 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f009 fccf 	bl	800a5f8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 fb7a 	bl	8007398 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 ffcf 	bl	8002c4c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f005 ff3c 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f005 ff53 	bl	8006b70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f005 ff13 	bl	8006b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f005 ff2a 	bl	8006b70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f005 ff0b 	bl	8006b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f005 ff22 	bl	8006b70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f005 ff03 	bl	8006b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f005 ff1a 	bl	8006b70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f005 fefb 	bl	8006b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f005 ff12 	bl	8006b70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f005 fef3 	bl	8006b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f005 ff0a 	bl	8006b70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f005 feeb 	bl	8006b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f005 ff02 	bl	8006b70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f005 fee3 	bl	8006b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f005 fefa 	bl	8006b70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f005 fedb 	bl	8006b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f005 fef2 	bl	8006b70 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000da8:	f245 5355 	movw	r3, #21845	; 0x5555
 8000dac:	81bb      	strh	r3, [r7, #12]
 8000dae:	2301      	movs	r3, #1
 8000db0:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <EE_ReadVariable+0x88>)
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <EE_ReadVariable+0x88>)
 8000db8:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f856 	bl	8000e6c <EE_FindValidPage>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000dc4:	89fb      	ldrh	r3, [r7, #14]
 8000dc6:	2bab      	cmp	r3, #171	; 0xab
 8000dc8:	d101      	bne.n	8000dce <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000dca:	23ab      	movs	r3, #171	; 0xab
 8000dcc:	e024      	b.n	8000e18 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8000dd4:	045b      	lsls	r3, r3, #17
 8000dd6:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	045a      	lsls	r2, r3, #17
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <EE_ReadVariable+0x8c>)
 8000de0:	4413      	add	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8000de4:	e012      	b.n	8000e0c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8000dec:	89ba      	ldrh	r2, [r7, #12]
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d108      	bne.n	8000e06 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	3b20      	subs	r3, #32
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	82fb      	strh	r3, [r7, #22]

      break;
 8000e04:	e007      	b.n	8000e16 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	3b40      	subs	r3, #64	; 0x40
 8000e0a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3320      	adds	r3, #32
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d8e7      	bhi.n	8000de6 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000e16:	8afb      	ldrh	r3, [r7, #22]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	081c0000 	.word	0x081c0000
 8000e24:	081bffe0 	.word	0x081bffe0

08000e28 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	80fb      	strh	r3, [r7, #6]
 8000e34:	4613      	mov	r3, r2
 8000e36:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000e3c:	88ba      	ldrh	r2, [r7, #4]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f858 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	2b80      	cmp	r3, #128	; 0x80
 8000e50:	d107      	bne.n	8000e62 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000e52:	88ba      	ldrh	r2, [r7, #4]
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f8ff 	bl	800105c <EE_PageTransfer>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000e62:	89fb      	ldrh	r3, [r7, #14]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000e76:	2306      	movs	r3, #6
 8000e78:	81fb      	strh	r3, [r7, #14]
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <EE_FindValidPage+0x84>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <EE_FindValidPage+0x88>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01b      	beq.n	8000ec8 <EE_FindValidPage+0x5c>
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d125      	bne.n	8000ee0 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d108      	bne.n	8000eac <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d101      	bne.n	8000ea8 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e01c      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e01a      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d108      	bne.n	8000ec4 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000eb2:	89bb      	ldrh	r3, [r7, #12]
 8000eb4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e010      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e00e      	b.n	8000ee2 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000ec4:	23ab      	movs	r3, #171	; 0xab
 8000ec6:	e00c      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000ec8:	89fb      	ldrh	r3, [r7, #14]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e007      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000ed2:	89bb      	ldrh	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e002      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000edc:	23ab      	movs	r3, #171	; 0xab
 8000ede:	e000      	b.n	8000ee2 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000ee0:	2300      	movs	r3, #0
  }
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	081c0000 	.word	0x081c0000
 8000ef4:	081e0000 	.word	0x081e0000

08000ef8 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b096      	sub	sp, #88	; 0x58
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	80fb      	strh	r3, [r7, #6]
 8000f04:	4613      	mov	r3, r2
 8000f06:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000f14:	4b4d      	ldr	r3, [pc, #308]	; (800104c <EE_VerifyPageFullWriteVariable+0x154>)
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
 8000f18:	4b4d      	ldr	r3, [pc, #308]	; (8001050 <EE_VerifyPageFullWriteVariable+0x158>)
 8000f1a:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8000f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f018 fe09 	bl	8019b3c <memset>
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2220      	movs	r2, #32
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f018 fe00 	bl	8019b3c <memset>
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff ff93 	bl	8000e6c <EE_FindValidPage>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000f4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f50:	2bab      	cmp	r3, #171	; 0xab
 8000f52:	d101      	bne.n	8000f58 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8000f54:	23ab      	movs	r3, #171	; 0xab
 8000f56:	e075      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000f58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f5c:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8000f60:	045b      	lsls	r3, r3, #17
 8000f62:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000f64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f68:	3301      	adds	r3, #1
 8000f6a:	045a      	lsls	r2, r3, #17
 8000f6c:	4b39      	ldr	r3, [pc, #228]	; (8001054 <EE_VerifyPageFullWriteVariable+0x15c>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f72:	f3bf 8f4f 	dsb	sy
}
 8000f76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f78:	f3bf 8f6f 	isb	sy
}
 8000f7c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a35      	ldr	r2, [pc, #212]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f92:	f3bf 8f4f 	dsb	sy
}
 8000f96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f98:	f3bf 8f6f 	isb	sy
}
 8000f9c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f9e:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8000fa0:	e028      	b.n	8000ff4 <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000faa:	d120      	bne.n	8000fee <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8000fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f009 f845 	bl	800a044 <HAL_FLASH_Program>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000fc0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8000fc8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	e039      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8000fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd2:	3320      	adds	r3, #32
 8000fd4:	f107 020c 	add.w	r2, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f009 f832 	bl	800a044 <HAL_FLASH_Program>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8000fe6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	e02a      	b.n	8001044 <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8000fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff0:	3340      	adds	r3, #64	; 0x40
 8000ff2:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8000ff4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3d2      	bcc.n	8000fa2 <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d11b      	bne.n	8001040 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001008:	f3bf 8f4f 	dsb	sy
}
 800100c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800100e:	f3bf 8f6f 	isb	sy
}
 8001012:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800101c:	f3bf 8f4f 	dsb	sy
}
 8001020:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001022:	f3bf 8f6f 	isb	sy
}
 8001026:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <EE_VerifyPageFullWriteVariable+0x160>)
 800102e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001032:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001034:	f3bf 8f4f 	dsb	sy
}
 8001038:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103a:	f3bf 8f6f 	isb	sy
}
 800103e:	e000      	b.n	8001042 <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001040:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001042:	2380      	movs	r3, #128	; 0x80
}
 8001044:	4618      	mov	r0, r3
 8001046:	3758      	adds	r7, #88	; 0x58
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	081c0000 	.word	0x081c0000
 8001050:	081e0000 	.word	0x081e0000
 8001054:	081bffff 	.word	0x081bffff
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09c      	sub	sp, #112	; 0x70
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	80fb      	strh	r3, [r7, #6]
 8001068:	4613      	mov	r3, r2
 800106a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001072:	4bc3      	ldr	r3, [pc, #780]	; (8001380 <EE_PageTransfer+0x324>)
 8001074:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001076:	2300      	movs	r3, #0
 8001078:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001082:	2300      	movs	r3, #0
 8001084:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800108e:	2300      	movs	r3, #0
 8001090:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f018 fd4b 	bl	8019b3c <memset>
  uint32_t receive[8] = {0xEEEE};
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2220      	movs	r2, #32
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f018 fd44 	bl	8019b3c <memset>
 80010b4:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 80010b8:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fed6 	bl	8000e6c <EE_FindValidPage>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 80010c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d105      	bne.n	80010da <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80010ce:	4bac      	ldr	r3, [pc, #688]	; (8001380 <EE_PageTransfer+0x324>)
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80010d2:	2307      	movs	r3, #7
 80010d4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80010d8:	e00b      	b.n	80010f2 <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80010da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d105      	bne.n	80010ee <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80010e2:	4ba8      	ldr	r3, [pc, #672]	; (8001384 <EE_PageTransfer+0x328>)
 80010e4:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80010e6:	2306      	movs	r3, #6
 80010e8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80010ec:	e001      	b.n	80010f2 <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80010ee:	23ab      	movs	r3, #171	; 0xab
 80010f0:	e142      	b.n	8001378 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 80010f2:	f3bf 8f4f 	dsb	sy
}
 80010f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010f8:	f3bf 8f6f 	isb	sy
}
 80010fc:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010fe:	4ba2      	ldr	r3, [pc, #648]	; (8001388 <EE_PageTransfer+0x32c>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4aa1      	ldr	r2, [pc, #644]	; (8001388 <EE_PageTransfer+0x32c>)
 8001104:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001108:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800110a:	4b9f      	ldr	r3, [pc, #636]	; (8001388 <EE_PageTransfer+0x32c>)
 800110c:	2200      	movs	r2, #0
 800110e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001112:	f3bf 8f4f 	dsb	sy
}
 8001116:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001118:	f3bf 8f6f 	isb	sy
}
 800111c:	bf00      	nop
}
 800111e:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	461a      	mov	r2, r3
 8001126:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001128:	2001      	movs	r0, #1
 800112a:	f008 ff8b 	bl	800a044 <HAL_FLASH_Program>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001134:	4b94      	ldr	r3, [pc, #592]	; (8001388 <EE_PageTransfer+0x32c>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11b      	bne.n	8001178 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001140:	f3bf 8f4f 	dsb	sy
}
 8001144:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001146:	f3bf 8f6f 	isb	sy
}
 800114a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800114c:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <EE_PageTransfer+0x32c>)
 800114e:	2200      	movs	r2, #0
 8001150:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001154:	f3bf 8f4f 	dsb	sy
}
 8001158:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800115a:	f3bf 8f6f 	isb	sy
}
 800115e:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001160:	4b89      	ldr	r3, [pc, #548]	; (8001388 <EE_PageTransfer+0x32c>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4a88      	ldr	r2, [pc, #544]	; (8001388 <EE_PageTransfer+0x32c>)
 8001166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800116c:	f3bf 8f4f 	dsb	sy
}
 8001170:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001172:	f3bf 8f6f 	isb	sy
}
 8001176:	e000      	b.n	800117a <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001178:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800117a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001182:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001186:	b29b      	uxth	r3, r3
 8001188:	e0f6      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800118a:	88ba      	ldrh	r2, [r7, #4]
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff feb1 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 8001196:	4603      	mov	r3, r0
 8001198:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800119c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 80011a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80011a8:	e0e6      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80011b0:	e031      	b.n	8001216 <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80011b2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011b6:	4a75      	ldr	r2, [pc, #468]	; (800138c <EE_PageTransfer+0x330>)
 80011b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d024      	beq.n	800120c <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80011c2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011c6:	4a71      	ldr	r2, [pc, #452]	; (800138c <EE_PageTransfer+0x330>)
 80011c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011cc:	4970      	ldr	r1, [pc, #448]	; (8001390 <EE_PageTransfer+0x334>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fde2 	bl	8000d98 <EE_ReadVariable>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80011da:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d014      	beq.n	800120c <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80011e2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80011e6:	4a69      	ldr	r2, [pc, #420]	; (800138c <EE_PageTransfer+0x330>)
 80011e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ec:	4a68      	ldr	r2, [pc, #416]	; (8001390 <EE_PageTransfer+0x334>)
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fe80 	bl	8000ef8 <EE_VerifyPageFullWriteVariable>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80011fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001206:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800120a:	e0b5      	b.n	8001378 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800120c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001210:	3301      	adds	r3, #1
 8001212:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001216:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800121a:	2b1e      	cmp	r3, #30
 800121c:	d9c9      	bls.n	80011b2 <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 800121e:	f008 ffa3 	bl	800a168 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001222:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <EE_PageTransfer+0x338>)
 8001224:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001228:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800122a:	2300      	movs	r3, #0
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 800122e:	2302      	movs	r3, #2
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001232:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001236:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800123c:	2320      	movs	r3, #32
 800123e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001240:	f3bf 8f4f 	dsb	sy
}
 8001244:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001246:	f3bf 8f6f 	isb	sy
}
 800124a:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <EE_PageTransfer+0x32c>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <EE_PageTransfer+0x32c>)
 8001252:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001256:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <EE_PageTransfer+0x32c>)
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001260:	f3bf 8f4f 	dsb	sy
}
 8001264:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001266:	f3bf 8f6f 	isb	sy
}
 800126a:	bf00      	nop
}
 800126c:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800126e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f009 f84b 	bl	800a314 <HAL_FLASHEx_Erase>
 800127e:	4603      	mov	r3, r0
 8001280:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <EE_PageTransfer+0x32c>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d11b      	bne.n	80012c8 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001290:	f3bf 8f4f 	dsb	sy
}
 8001294:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001296:	f3bf 8f6f 	isb	sy
}
 800129a:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800129c:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <EE_PageTransfer+0x32c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <EE_PageTransfer+0x32c>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4a34      	ldr	r2, [pc, #208]	; (8001388 <EE_PageTransfer+0x32c>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012bc:	f3bf 8f4f 	dsb	sy
}
 80012c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012c2:	f3bf 8f6f 	isb	sy
}
 80012c6:	e000      	b.n	80012ca <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012c8:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80012ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 80012d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	e04e      	b.n	8001378 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 80012da:	f3bf 8f4f 	dsb	sy
}
 80012de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e0:	f3bf 8f6f 	isb	sy
}
 80012e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <EE_PageTransfer+0x32c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a27      	ldr	r2, [pc, #156]	; (8001388 <EE_PageTransfer+0x32c>)
 80012ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <EE_PageTransfer+0x32c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012fa:	f3bf 8f4f 	dsb	sy
}
 80012fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001300:	f3bf 8f6f 	isb	sy
}
 8001304:	bf00      	nop
}
 8001306:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130c:	461a      	mov	r2, r3
 800130e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001310:	2001      	movs	r0, #1
 8001312:	f008 fe97 	bl	800a044 <HAL_FLASH_Program>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <EE_PageTransfer+0x32c>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d11b      	bne.n	8001360 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001328:	f3bf 8f4f 	dsb	sy
}
 800132c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800132e:	f3bf 8f6f 	isb	sy
}
 8001332:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <EE_PageTransfer+0x32c>)
 8001336:	2200      	movs	r2, #0
 8001338:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800133c:	f3bf 8f4f 	dsb	sy
}
 8001340:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001342:	f3bf 8f6f 	isb	sy
}
 8001346:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <EE_PageTransfer+0x32c>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <EE_PageTransfer+0x32c>)
 800134e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001352:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001354:	f3bf 8f4f 	dsb	sy
}
 8001358:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800135a:	f3bf 8f6f 	isb	sy
}
 800135e:	e000      	b.n	8001362 <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001360:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001362:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 800136a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800136e:	b29b      	uxth	r3, r3
 8001370:	e002      	b.n	8001378 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001376:	b29b      	uxth	r3, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	3770      	adds	r7, #112	; 0x70
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	081c0000 	.word	0x081c0000
 8001384:	081e0000 	.word	0x081e0000
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	24000000 	.word	0x24000000
 8001390:	240003a0 	.word	0x240003a0
 8001394:	52002000 	.word	0x52002000

08001398 <handle_error>:
 * set the previous error to whatever error we are currently handling, send an error packet,
 * and enter IDLE mode. Additional actions are taken depending on the error category.
 *
 * @param error Error given by the caller.
 */
void handle_error(ERROR_STRUCT error) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	463b      	mov	r3, r7
 80013a0:	e883 0003 	stmia.w	r3, {r0, r1}
	default:
		// Should not be possible to get here
		break;
	}
#endif
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <reset_error_counters>:
}

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	e00f      	b.n	80013dc <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <reset_error_counters+0x3c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fd2e 	bl	8000e28 <EE_WriteVariable>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <reset_error_counters+0x26>
			Error_Handler();
 80013d2:	f001 fc3b 	bl	8002c4c <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3301      	adds	r3, #1
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b1c      	cmp	r3, #28
 80013e0:	ddec      	ble.n	80013bc <reset_error_counters+0xc>
		}
	}
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	24000000 	.word	0x24000000

080013f0 <send_error_counter_packet>:
 * @brief Creates and sends a packet containing all 27 error counters.
 *
 * There is an error counter for every single category and detail.
 * This type of packet is only sent during sync.
 */
void send_error_counter_packet() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b090      	sub	sp, #64	; 0x40
 80013f4:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 80013f6:	23cc      	movs	r3, #204	; 0xcc
 80013f8:	713b      	strb	r3, [r7, #4]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 80013fa:	23cc      	movs	r3, #204	; 0xcc
 80013fc:	717b      	strb	r3, [r7, #5]
	buffer[2] = ((local_cpy[EC_power_supply_rail] & 0xFF00) >> 8);
 80013fe:	4b9b      	ldr	r3, [pc, #620]	; (800166c <send_error_counter_packet+0x27c>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	b29b      	uxth	r3, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	71bb      	strb	r3, [r7, #6]
	buffer[3] = (local_cpy[EC_power_supply_rail] & 0xFF);
 800140a:	4b98      	ldr	r3, [pc, #608]	; (800166c <send_error_counter_packet+0x27c>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ((local_cpy[EC_seu] & 0xFF00) >> 8);
 8001412:	4b96      	ldr	r3, [pc, #600]	; (800166c <send_error_counter_packet+0x27c>)
 8001414:	885b      	ldrh	r3, [r3, #2]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	b29b      	uxth	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	723b      	strb	r3, [r7, #8]
	buffer[5] = (local_cpy[EC_seu] & 0xFF);
 800141e:	4b93      	ldr	r3, [pc, #588]	; (800166c <send_error_counter_packet+0x27c>)
 8001420:	885b      	ldrh	r3, [r3, #2]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	727b      	strb	r3, [r7, #9]
	buffer[6] = ((local_cpy[EC_peripheral] & 0xFF00) >> 8);
 8001426:	4b91      	ldr	r3, [pc, #580]	; (800166c <send_error_counter_packet+0x27c>)
 8001428:	889b      	ldrh	r3, [r3, #4]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	72bb      	strb	r3, [r7, #10]
	buffer[7] = (local_cpy[EC_peripheral] & 0xFF);
 8001432:	4b8e      	ldr	r3, [pc, #568]	; (800166c <send_error_counter_packet+0x27c>)
 8001434:	889b      	ldrh	r3, [r3, #4]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	72fb      	strb	r3, [r7, #11]
	buffer[8] = ((local_cpy[EC_brownout] & 0xFF00) >> 8);
 800143a:	4b8c      	ldr	r3, [pc, #560]	; (800166c <send_error_counter_packet+0x27c>)
 800143c:	88db      	ldrh	r3, [r3, #6]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b29b      	uxth	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	733b      	strb	r3, [r7, #12]
	buffer[9] = (local_cpy[EC_brownout] & 0xFF);
 8001446:	4b89      	ldr	r3, [pc, #548]	; (800166c <send_error_counter_packet+0x27c>)
 8001448:	88db      	ldrh	r3, [r3, #6]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	737b      	strb	r3, [r7, #13]
	buffer[10] = ((local_cpy[EC_watchdog] & 0xFF00) >> 8);
 800144e:	4b87      	ldr	r3, [pc, #540]	; (800166c <send_error_counter_packet+0x27c>)
 8001450:	891b      	ldrh	r3, [r3, #8]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	73bb      	strb	r3, [r7, #14]
	buffer[11] = (local_cpy[EC_watchdog] & 0xFF);
 800145a:	4b84      	ldr	r3, [pc, #528]	; (800166c <send_error_counter_packet+0x27c>)
 800145c:	891b      	ldrh	r3, [r3, #8]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73fb      	strb	r3, [r7, #15]
	buffer[12] = ((local_cpy[EC_UNDEFINED] & 0xFF00) >> 8);
 8001462:	4b82      	ldr	r3, [pc, #520]	; (800166c <send_error_counter_packet+0x27c>)
 8001464:	895b      	ldrh	r3, [r3, #10]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b29b      	uxth	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	743b      	strb	r3, [r7, #16]
	buffer[13] = (local_cpy[EC_UNDEFINED] & 0xFF);
 800146e:	4b7f      	ldr	r3, [pc, #508]	; (800166c <send_error_counter_packet+0x27c>)
 8001470:	895b      	ldrh	r3, [r3, #10]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	747b      	strb	r3, [r7, #17]
	buffer[14] = ((local_cpy[ED_vsense] & 0xFF00) >> 8);
 8001476:	4b7d      	ldr	r3, [pc, #500]	; (800166c <send_error_counter_packet+0x27c>)
 8001478:	899b      	ldrh	r3, [r3, #12]
 800147a:	0a1b      	lsrs	r3, r3, #8
 800147c:	b29b      	uxth	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	74bb      	strb	r3, [r7, #18]
	buffer[15] = (local_cpy[ED_vsense] & 0xFF);
 8001482:	4b7a      	ldr	r3, [pc, #488]	; (800166c <send_error_counter_packet+0x27c>)
 8001484:	899b      	ldrh	r3, [r3, #12]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	74fb      	strb	r3, [r7, #19]
	buffer[16] = ((local_cpy[ED_vrefint] & 0xFF00) >> 8);
 800148a:	4b78      	ldr	r3, [pc, #480]	; (800166c <send_error_counter_packet+0x27c>)
 800148c:	89db      	ldrh	r3, [r3, #14]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	b29b      	uxth	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	753b      	strb	r3, [r7, #20]
	buffer[17] = (local_cpy[ED_vrefint] & 0xFF);
 8001496:	4b75      	ldr	r3, [pc, #468]	; (800166c <send_error_counter_packet+0x27c>)
 8001498:	89db      	ldrh	r3, [r3, #14]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	757b      	strb	r3, [r7, #21]
	buffer[18] = ((local_cpy[ED_TEMP1] & 0xFF00) >> 8);
 800149e:	4b73      	ldr	r3, [pc, #460]	; (800166c <send_error_counter_packet+0x27c>)
 80014a0:	8a1b      	ldrh	r3, [r3, #16]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	75bb      	strb	r3, [r7, #22]
	buffer[19] = (local_cpy[ED_TEMP1] & 0xFF);
 80014aa:	4b70      	ldr	r3, [pc, #448]	; (800166c <send_error_counter_packet+0x27c>)
 80014ac:	8a1b      	ldrh	r3, [r3, #16]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	75fb      	strb	r3, [r7, #23]
	buffer[20] = ((local_cpy[ED_TEMP2] & 0xFF00) >> 8);
 80014b2:	4b6e      	ldr	r3, [pc, #440]	; (800166c <send_error_counter_packet+0x27c>)
 80014b4:	8a5b      	ldrh	r3, [r3, #18]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	763b      	strb	r3, [r7, #24]
	buffer[21] = (local_cpy[ED_TEMP2] & 0xFF);
 80014be:	4b6b      	ldr	r3, [pc, #428]	; (800166c <send_error_counter_packet+0x27c>)
 80014c0:	8a5b      	ldrh	r3, [r3, #18]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	767b      	strb	r3, [r7, #25]
	buffer[22] = ((local_cpy[ED_TEMP3] & 0xFF00) >> 8);
 80014c6:	4b69      	ldr	r3, [pc, #420]	; (800166c <send_error_counter_packet+0x27c>)
 80014c8:	8a9b      	ldrh	r3, [r3, #20]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	76bb      	strb	r3, [r7, #26]
	buffer[23] = (local_cpy[ED_TEMP3] & 0xFF);
 80014d2:	4b66      	ldr	r3, [pc, #408]	; (800166c <send_error_counter_packet+0x27c>)
 80014d4:	8a9b      	ldrh	r3, [r3, #20]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	76fb      	strb	r3, [r7, #27]
	buffer[24] = ((local_cpy[ED_TEMP4] & 0xFF00) >> 8);
 80014da:	4b64      	ldr	r3, [pc, #400]	; (800166c <send_error_counter_packet+0x27c>)
 80014dc:	8adb      	ldrh	r3, [r3, #22]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	773b      	strb	r3, [r7, #28]
	buffer[25] = (local_cpy[ED_TEMP4] & 0xFF);
 80014e6:	4b61      	ldr	r3, [pc, #388]	; (800166c <send_error_counter_packet+0x27c>)
 80014e8:	8adb      	ldrh	r3, [r3, #22]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	777b      	strb	r3, [r7, #29]
	buffer[26] = ((local_cpy[ED_busvmon] & 0xFF00) >> 8);
 80014ee:	4b5f      	ldr	r3, [pc, #380]	; (800166c <send_error_counter_packet+0x27c>)
 80014f0:	8b1b      	ldrh	r3, [r3, #24]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	77bb      	strb	r3, [r7, #30]
	buffer[27] = (local_cpy[ED_busvmon] & 0xFF);
 80014fa:	4b5c      	ldr	r3, [pc, #368]	; (800166c <send_error_counter_packet+0x27c>)
 80014fc:	8b1b      	ldrh	r3, [r3, #24]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	77fb      	strb	r3, [r7, #31]
	buffer[28] = ((local_cpy[ED_busimon] & 0xFF00) >> 8);
 8001502:	4b5a      	ldr	r3, [pc, #360]	; (800166c <send_error_counter_packet+0x27c>)
 8001504:	8b5b      	ldrh	r3, [r3, #26]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	b29b      	uxth	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[29] = (local_cpy[ED_busimon] & 0xFF);
 8001510:	4b56      	ldr	r3, [pc, #344]	; (800166c <send_error_counter_packet+0x27c>)
 8001512:	8b5b      	ldrh	r3, [r3, #26]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[30] = ((local_cpy[ED_2v5] & 0xFF00) >> 8);
 800151a:	4b54      	ldr	r3, [pc, #336]	; (800166c <send_error_counter_packet+0x27c>)
 800151c:	8b9b      	ldrh	r3, [r3, #28]
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	b29b      	uxth	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[31] = (local_cpy[ED_2v5] & 0xFF);
 8001528:	4b50      	ldr	r3, [pc, #320]	; (800166c <send_error_counter_packet+0x27c>)
 800152a:	8b9b      	ldrh	r3, [r3, #28]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[32] = ((local_cpy[ED_3v3] & 0xFF00) >> 8);
 8001532:	4b4e      	ldr	r3, [pc, #312]	; (800166c <send_error_counter_packet+0x27c>)
 8001534:	8bdb      	ldrh	r3, [r3, #30]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	b29b      	uxth	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[33] = (local_cpy[ED_3v3] & 0xFF);
 8001540:	4b4a      	ldr	r3, [pc, #296]	; (800166c <send_error_counter_packet+0x27c>)
 8001542:	8bdb      	ldrh	r3, [r3, #30]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[34] = ((local_cpy[ED_5v] & 0xFF00) >> 8);
 800154a:	4b48      	ldr	r3, [pc, #288]	; (800166c <send_error_counter_packet+0x27c>)
 800154c:	8c1b      	ldrh	r3, [r3, #32]
 800154e:	0a1b      	lsrs	r3, r3, #8
 8001550:	b29b      	uxth	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[35] = (local_cpy[ED_5v] & 0xFF);
 8001558:	4b44      	ldr	r3, [pc, #272]	; (800166c <send_error_counter_packet+0x27c>)
 800155a:	8c1b      	ldrh	r3, [r3, #32]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[36] = ((local_cpy[ED_n3v3] & 0xFF00) >> 8);
 8001562:	4b42      	ldr	r3, [pc, #264]	; (800166c <send_error_counter_packet+0x27c>)
 8001564:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	b29b      	uxth	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[37] = (local_cpy[ED_n3v3] & 0xFF);
 8001570:	4b3e      	ldr	r3, [pc, #248]	; (800166c <send_error_counter_packet+0x27c>)
 8001572:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[38] = ((local_cpy[ED_n5v] & 0xFF00) >> 8);
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <send_error_counter_packet+0x27c>)
 800157c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	b29b      	uxth	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[39] = (local_cpy[ED_n5v] & 0xFF);
 8001588:	4b38      	ldr	r3, [pc, #224]	; (800166c <send_error_counter_packet+0x27c>)
 800158a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[40] = ((local_cpy[ED_15v] & 0xFF00) >> 8);
 8001592:	4b36      	ldr	r3, [pc, #216]	; (800166c <send_error_counter_packet+0x27c>)
 8001594:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	b29b      	uxth	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[41] = (local_cpy[ED_15v] & 0xFF);
 80015a0:	4b32      	ldr	r3, [pc, #200]	; (800166c <send_error_counter_packet+0x27c>)
 80015a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[42] = ((local_cpy[ED_5vref] & 0xFF00) >> 8);
 80015aa:	4b30      	ldr	r3, [pc, #192]	; (800166c <send_error_counter_packet+0x27c>)
 80015ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[43] = (local_cpy[ED_5vref] & 0xFF);
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <send_error_counter_packet+0x27c>)
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[44] = ((local_cpy[ED_n200v] & 0xFF00) >> 8);
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <send_error_counter_packet+0x27c>)
 80015c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[45] = (local_cpy[ED_n200v] & 0xFF);
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <send_error_counter_packet+0x27c>)
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[46] = ((local_cpy[ED_n800v] & 0xFF00) >> 8);
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <send_error_counter_packet+0x27c>)
 80015dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[47] = (local_cpy[ED_n800v] & 0xFF);
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <send_error_counter_packet+0x27c>)
 80015ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[48] = ((local_cpy[ED_TMP1] & 0xFF00) >> 8);
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <send_error_counter_packet+0x27c>)
 80015f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[49] = (local_cpy[ED_TMP1] & 0xFF);
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <send_error_counter_packet+0x27c>)
 8001602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[50] = ((local_cpy[ED_single_bit_error_flash] & 0xFF00) >> 8);
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <send_error_counter_packet+0x27c>)
 800160c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	b29b      	uxth	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[51] = (local_cpy[ED_single_bit_error_flash] & 0xFF);
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <send_error_counter_packet+0x27c>)
 800161a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[52] = ((local_cpy[ED_double_bit_error_flash] & 0xFF00) >> 8);
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <send_error_counter_packet+0x27c>)
 8001624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[53] = (local_cpy[ED_double_bit_error_flash] & 0xFF);
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <send_error_counter_packet+0x27c>)
 8001632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[54] = ((local_cpy[ED_single_bit_error_ram] & 0xFF00) >> 8);
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <send_error_counter_packet+0x27c>)
 800163c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	b29b      	uxth	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[55] = (local_cpy[ED_single_bit_error_ram] & 0xFF);
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <send_error_counter_packet+0x27c>)
 800164a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[56] = ((local_cpy[ED_double_bit_error_ram] & 0xFF00) >> 8);
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <send_error_counter_packet+0x27c>)
 8001654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	b29b      	uxth	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[57] = (local_cpy[ED_double_bit_error_ram] & 0xFF);
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <send_error_counter_packet+0x27c>)
 8001662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800166a:	e001      	b.n	8001670 <send_error_counter_packet+0x280>
 800166c:	240003a4 	.word	0x240003a4
	buffer[58] = ((local_cpy[ED_UNDEFINED] & 0xFF00) >> 8);
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <send_error_counter_packet+0x2ac>)
 8001672:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	b29b      	uxth	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[59] = (local_cpy[ED_UNDEFINED] & 0xFF);
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <send_error_counter_packet+0x2ac>)
 8001680:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 8001688:	1d39      	adds	r1, r7, #4
 800168a:	2364      	movs	r3, #100	; 0x64
 800168c:	223c      	movs	r2, #60	; 0x3c
 800168e:	4804      	ldr	r0, [pc, #16]	; (80016a0 <send_error_counter_packet+0x2b0>)
 8001690:	f012 f8e4 	bl	801385c <HAL_UART_Transmit>
}
 8001694:	bf00      	nop
 8001696:	3740      	adds	r7, #64	; 0x40
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	240003a4 	.word	0x240003a4
 80016a0:	24001f1c 	.word	0x24001f1c

080016a4 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <vApplicationTickHook+0x18>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a03      	ldr	r2, [pc, #12]	; (80016bc <vApplicationTickHook+0x18>)
 80016b0:	6013      	str	r3, [r2, #0]
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	24001ae4 	.word	0x24001ae4

080016c0 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80016dc:	4a24      	ldr	r2, [pc, #144]	; (8001770 <MX_FREERTOS_Init+0x98>)
 80016de:	2100      	movs	r1, #0
 80016e0:	4824      	ldr	r0, [pc, #144]	; (8001774 <MX_FREERTOS_Init+0x9c>)
 80016e2:	f014 ff13 	bl	801650c <osThreadNew>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a23      	ldr	r2, [pc, #140]	; (8001778 <MX_FREERTOS_Init+0xa0>)
 80016ea:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80016ec:	4a23      	ldr	r2, [pc, #140]	; (800177c <MX_FREERTOS_Init+0xa4>)
 80016ee:	2100      	movs	r1, #0
 80016f0:	4823      	ldr	r0, [pc, #140]	; (8001780 <MX_FREERTOS_Init+0xa8>)
 80016f2:	f014 ff0b 	bl	801650c <osThreadNew>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <MX_FREERTOS_Init+0xac>)
 80016fa:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80016fc:	4a22      	ldr	r2, [pc, #136]	; (8001788 <MX_FREERTOS_Init+0xb0>)
 80016fe:	2100      	movs	r1, #0
 8001700:	4822      	ldr	r0, [pc, #136]	; (800178c <MX_FREERTOS_Init+0xb4>)
 8001702:	f014 ff03 	bl	801650c <osThreadNew>
 8001706:	4603      	mov	r3, r0
 8001708:	4a21      	ldr	r2, [pc, #132]	; (8001790 <MX_FREERTOS_Init+0xb8>)
 800170a:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <MX_FREERTOS_Init+0xbc>)
 800170e:	2100      	movs	r1, #0
 8001710:	4821      	ldr	r0, [pc, #132]	; (8001798 <MX_FREERTOS_Init+0xc0>)
 8001712:	f014 fefb 	bl	801650c <osThreadNew>
 8001716:	4603      	mov	r3, r0
 8001718:	4a20      	ldr	r2, [pc, #128]	; (800179c <MX_FREERTOS_Init+0xc4>)
 800171a:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 800171c:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <MX_FREERTOS_Init+0xc8>)
 800171e:	2100      	movs	r1, #0
 8001720:	4820      	ldr	r0, [pc, #128]	; (80017a4 <MX_FREERTOS_Init+0xcc>)
 8001722:	f014 fef3 	bl	801650c <osThreadNew>
 8001726:	4603      	mov	r3, r0
 8001728:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <MX_FREERTOS_Init+0xd0>)
 800172a:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 800172c:	4a1f      	ldr	r2, [pc, #124]	; (80017ac <MX_FREERTOS_Init+0xd4>)
 800172e:	2100      	movs	r1, #0
 8001730:	481f      	ldr	r0, [pc, #124]	; (80017b0 <MX_FREERTOS_Init+0xd8>)
 8001732:	f014 feeb 	bl	801650c <osThreadNew>
 8001736:	4603      	mov	r3, r0
 8001738:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <MX_FREERTOS_Init+0xdc>)
 800173a:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 800173c:	4a1e      	ldr	r2, [pc, #120]	; (80017b8 <MX_FREERTOS_Init+0xe0>)
 800173e:	2100      	movs	r1, #0
 8001740:	481e      	ldr	r0, [pc, #120]	; (80017bc <MX_FREERTOS_Init+0xe4>)
 8001742:	f014 fee3 	bl	801650c <osThreadNew>
 8001746:	4603      	mov	r3, r0
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <MX_FREERTOS_Init+0xe8>)
 800174a:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <MX_FREERTOS_Init+0xec>)
 800174e:	2100      	movs	r1, #0
 8001750:	481d      	ldr	r0, [pc, #116]	; (80017c8 <MX_FREERTOS_Init+0xf0>)
 8001752:	f014 fedb 	bl	801650c <osThreadNew>
 8001756:	4603      	mov	r3, r0
 8001758:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <MX_FREERTOS_Init+0xf4>)
 800175a:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 800175c:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <MX_FREERTOS_Init+0xf8>)
 800175e:	2100      	movs	r1, #0
 8001760:	481c      	ldr	r0, [pc, #112]	; (80017d4 <MX_FREERTOS_Init+0xfc>)
 8001762:	f014 fed3 	bl	801650c <osThreadNew>
 8001766:	4603      	mov	r3, r0
 8001768:	4a1b      	ldr	r2, [pc, #108]	; (80017d8 <MX_FREERTOS_Init+0x100>)
 800176a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0801a7c8 	.word	0x0801a7c8
 8001774:	080017dd 	.word	0x080017dd
 8001778:	240003e0 	.word	0x240003e0
 800177c:	0801a7ec 	.word	0x0801a7ec
 8001780:	08001805 	.word	0x08001805
 8001784:	24000640 	.word	0x24000640
 8001788:	0801a810 	.word	0x0801a810
 800178c:	0800182d 	.word	0x0800182d
 8001790:	240008a0 	.word	0x240008a0
 8001794:	0801a834 	.word	0x0801a834
 8001798:	08001855 	.word	0x08001855
 800179c:	24000b00 	.word	0x24000b00
 80017a0:	0801a858 	.word	0x0801a858
 80017a4:	080018cd 	.word	0x080018cd
 80017a8:	24000d60 	.word	0x24000d60
 80017ac:	0801a87c 	.word	0x0801a87c
 80017b0:	08001945 	.word	0x08001945
 80017b4:	24000fc0 	.word	0x24000fc0
 80017b8:	0801a8a0 	.word	0x0801a8a0
 80017bc:	0800196d 	.word	0x0800196d
 80017c0:	24001220 	.word	0x24001220
 80017c4:	0801a8c4 	.word	0x0801a8c4
 80017c8:	080019bd 	.word	0x080019bd
 80017cc:	24001480 	.word	0x24001480
 80017d0:	0801a8e8 	.word	0x0801a8e8
 80017d4:	08001abd 	.word	0x08001abd
 80017d8:	240016e0 	.word	0x240016e0

080017dc <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <PMT_init+0x24>)
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	2200      	movs	r2, #0
 80017ee:	2101      	movs	r1, #1
 80017f0:	f015 f850 	bl	8016894 <osEventFlagsWait>

		create_pmt_packet();
 80017f4:	f001 fa3a 	bl	8002c6c <create_pmt_packet>

		osThreadYield();
 80017f8:	f014 ff1a 	bl	8016630 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80017fc:	e7f2      	b.n	80017e4 <PMT_init+0x8>
 80017fe:	bf00      	nop
 8001800:	24001a94 	.word	0x24001a94

08001804 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <ERPA_init+0x24>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	2200      	movs	r2, #0
 8001816:	2102      	movs	r1, #2
 8001818:	f015 f83c 	bl	8016894 <osEventFlagsWait>

		create_erpa_packet();
 800181c:	f001 fa6c 	bl	8002cf8 <create_erpa_packet>

		osThreadYield();
 8001820:	f014 ff06 	bl	8016630 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001824:	e7f2      	b.n	800180c <ERPA_init+0x8>
 8001826:	bf00      	nop
 8001828:	24001a94 	.word	0x24001a94

0800182c <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HK_init+0x24>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	2200      	movs	r2, #0
 800183e:	2104      	movs	r1, #4
 8001840:	f015 f828 	bl	8016894 <osEventFlagsWait>

		create_hk_packet();
 8001844:	f001 fab6 	bl	8002db4 <create_hk_packet>

		osThreadYield();
 8001848:	f014 fef2 	bl	8016630 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800184c:	e7f2      	b.n	8001834 <HK_init+0x8>
 800184e:	bf00      	nop
 8001850:	24001a94 	.word	0x24001a94

08001854 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <AUTOINIT_init+0x70>)
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
 8001864:	2200      	movs	r2, #0
 8001866:	2104      	movs	r1, #4
 8001868:	f015 f814 	bl	8016894 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e012      	b.n	8001898 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <AUTOINIT_init+0x74>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <AUTOINIT_init+0x74>)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4413      	add	r3, r2
 8001882:	889b      	ldrh	r3, [r3, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	4619      	mov	r1, r3
 8001888:	f009 f87e 	bl	800a988 <HAL_GPIO_WritePin>
			osDelay(100);
 800188c:	2064      	movs	r0, #100	; 0x64
 800188e:	f014 ff31 	bl	80166f4 <osDelay>
		for (int i = 0; i < 7; i++) {
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3301      	adds	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b06      	cmp	r3, #6
 800189c:	dde9      	ble.n	8001872 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800189e:	2308      	movs	r3, #8
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	e008      	b.n	80018b6 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2101      	movs	r1, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 f91a 	bl	8004ae4 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	3301      	adds	r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b0d      	cmp	r3, #13
 80018ba:	ddf3      	ble.n	80018a4 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80018bc:	f014 feb8 	bl	8016630 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80018c0:	e7cc      	b.n	800185c <AUTOINIT_init+0x8>
 80018c2:	bf00      	nop
 80018c4:	24001a98 	.word	0x24001a98
 80018c8:	0801a90c 	.word	0x0801a90c

080018cc <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <AUTODEINIT_init+0x70>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	2200      	movs	r2, #0
 80018de:	2108      	movs	r1, #8
 80018e0:	f014 ffd8 	bl	8016894 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80018e4:	230d      	movs	r3, #13
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	e008      	b.n	80018fc <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 f8f7 	bl	8004ae4 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b07      	cmp	r3, #7
 8001900:	dcf3      	bgt.n	80018ea <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8001902:	2306      	movs	r3, #6
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	e012      	b.n	800192e <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <AUTODEINIT_init+0x74>)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <AUTODEINIT_init+0x74>)
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	889b      	ldrh	r3, [r3, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	4619      	mov	r1, r3
 800191e:	f009 f833 	bl	800a988 <HAL_GPIO_WritePin>
			osDelay(100);
 8001922:	2064      	movs	r0, #100	; 0x64
 8001924:	f014 fee6 	bl	80166f4 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	3b01      	subs	r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	dae9      	bge.n	8001908 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8001934:	f014 fe7c 	bl	8016630 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8001938:	e7cc      	b.n	80018d4 <AUTODEINIT_init+0x8>
 800193a:	bf00      	nop
 800193c:	24001a98 	.word	0x24001a98
 8001940:	0801a90c 	.word	0x0801a90c

08001944 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <Voltage_Monitor_init+0x24>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	2200      	movs	r2, #0
 8001956:	2101      	movs	r1, #1
 8001958:	f014 ff9c 	bl	8016894 <osEventFlagsWait>
	  		osWaitForever);
	  set_rail_monitor();
 800195c:	f003 f8de 	bl	8004b1c <set_rail_monitor>
	  monitor_rails();
 8001960:	f003 f9c6 	bl	8004cf0 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001964:	e7f2      	b.n	800194c <Voltage_Monitor_init+0x8>
 8001966:	bf00      	nop
 8001968:	24001a98 	.word	0x24001a98

0800196c <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <STOP_init+0x44>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
 800197c:	2200      	movs	r2, #0
 800197e:	2102      	movs	r1, #2
 8001980:	f014 ff88 	bl	8016894 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <STOP_init+0x44>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2102      	movs	r1, #2
 800198a:	4618      	mov	r0, r3
 800198c:	f014 ff50 	bl	8016830 <osEventFlagsClear>

	  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <STOP_init+0x48>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2102      	movs	r1, #2
 8001996:	4618      	mov	r0, r3
 8001998:	f014 ff06 	bl	80167a8 <osEventFlagsSet>
	  while (!IDLING) {};
 800199c:	bf00      	nop
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <STOP_init+0x4c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0fa      	beq.n	800199e <STOP_init+0x32>

	  enter_stop();
 80019a8:	f001 f932 	bl	8002c10 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80019ac:	e7e2      	b.n	8001974 <STOP_init+0x8>
 80019ae:	bf00      	nop
 80019b0:	24001a98 	.word	0x24001a98
 80019b4:	24001a9c 	.word	0x24001a9c
 80019b8:	240000c4 	.word	0x240000c4

080019bc <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80019c4:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <Science_init+0xd4>)
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	2200      	movs	r2, #0
 80019ce:	2101      	movs	r1, #1
 80019d0:	f014 ff60 	bl	8016894 <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <Science_init+0xd8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f014 fe49 	bl	8016670 <osThreadSuspend>
		IDLING = 0;
 80019de:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <Science_init+0xdc>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e012      	b.n	8001a10 <Science_init+0x54>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80019ea:	4a2c      	ldr	r2, [pc, #176]	; (8001a9c <Science_init+0xe0>)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80019f2:	4a2a      	ldr	r2, [pc, #168]	; (8001a9c <Science_init+0xe0>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	889b      	ldrh	r3, [r3, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4619      	mov	r1, r3
 8001a00:	f008 ffc2 	bl	800a988 <HAL_GPIO_WritePin>
			osDelay(200);
 8001a04:	20c8      	movs	r0, #200	; 0xc8
 8001a06:	f014 fe75 	bl	80166f4 <osDelay>
		for (int i = 0; i < 9; i++) {
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	dde9      	ble.n	80019ea <Science_init+0x2e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++) {
 8001a16:	2306      	movs	r3, #6
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	e008      	b.n	8001a2e <Science_init+0x72>
			set_rail_monitor_enable(i, 1);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2101      	movs	r1, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 f85e 	bl	8004ae4 <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++) {
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b11      	cmp	r3, #17
 8001a32:	ddf3      	ble.n	8001a1c <Science_init+0x60>
		}
		osThreadResume(Voltage_MonitorHandle);
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <Science_init+0xd8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f014 fe3a 	bl	80166b2 <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3e:	b672      	cpsid	i
}
 8001a40:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8001a42:	2300      	movs	r3, #0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2320      	movs	r3, #32
 8001a48:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <Science_init+0xe4>)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <Science_init+0xe8>)
 8001a4e:	f005 f917 	bl	8006c80 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <Science_init+0xec>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <Science_init+0xf0>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <Science_init+0xf4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 8001a64:	f001 fae8 	bl	8003038 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <Science_init+0xf8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f014 fe9a 	bl	80167a8 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8001a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a78:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8001a7e:	2100      	movs	r1, #0
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <Science_init+0xfc>)
 8001a82:	f010 fb61 	bl	8012148 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a86:	b662      	cpsie	i
}
 8001a88:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8001a8a:	f014 fdd1 	bl	8016630 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001a8e:	e799      	b.n	80019c4 <Science_init+0x8>
 8001a90:	24001a9c 	.word	0x24001a9c
 8001a94:	24000fc0 	.word	0x24000fc0
 8001a98:	240000c4 	.word	0x240000c4
 8001a9c:	0801a90c 	.word	0x0801a90c
 8001aa0:	24000040 	.word	0x24000040
 8001aa4:	24000314 	.word	0x24000314
 8001aa8:	24001ae0 	.word	0x24001ae0
 8001aac:	24001ae1 	.word	0x24001ae1
 8001ab0:	24001ae4 	.word	0x24001ae4
 8001ab4:	24001a94 	.word	0x24001a94
 8001ab8:	24001e84 	.word	0x24001e84

08001abc <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <Idle_init+0xb4>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8001acc:	2200      	movs	r2, #0
 8001ace:	2102      	movs	r1, #2
 8001ad0:	f014 fee0 	bl	8016894 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <Idle_init+0xb8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8001ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ade:	2200      	movs	r2, #0
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4824      	ldr	r0, [pc, #144]	; (8001b78 <Idle_init+0xbc>)
 8001ae6:	f010 fc89 	bl	80123fc <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <Idle_init+0xc0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8001af0:	2100      	movs	r1, #0
 8001af2:	4823      	ldr	r0, [pc, #140]	; (8001b80 <Idle_init+0xc4>)
 8001af4:	f005 f984 	bl	8006e00 <HAL_DAC_Stop_DMA>
		osThreadSuspend(Voltage_MonitorHandle);
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <Idle_init+0xc8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f014 fdb7 	bl	8016670 <osThreadSuspend>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--) {
 8001b02:	2311      	movs	r3, #17
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e008      	b.n	8001b1a <Idle_init+0x5e>
			set_rail_monitor_enable(i, 0);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 ffe8 	bl	8004ae4 <set_rail_monitor_enable>
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--) {
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	dcf3      	bgt.n	8001b08 <Idle_init+0x4c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8001b20:	2308      	movs	r3, #8
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	e012      	b.n	8001b4c <Idle_init+0x90>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <Idle_init+0xcc>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001b2e:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <Idle_init+0xcc>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	889b      	ldrh	r3, [r3, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f008 ff24 	bl	800a988 <HAL_GPIO_WritePin>
			osDelay(200);
 8001b40:	20c8      	movs	r0, #200	; 0xc8
 8001b42:	f014 fdd7 	bl	80166f4 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	dae9      	bge.n	8001b26 <Idle_init+0x6a>
		}
		osDelay(3500);		// TODO: Reduce to 1000 for assembled instrument
 8001b52:	f640 50ac 	movw	r0, #3500	; 0xdac
 8001b56:	f014 fdcd 	bl	80166f4 <osDelay>
		IDLING = 1;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <Idle_init+0xd0>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
		osThreadResume(Voltage_MonitorHandle);
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <Idle_init+0xc8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f014 fda4 	bl	80166b2 <osThreadResume>

		// Yield thread control
		osThreadYield();
 8001b6a:	f014 fd61 	bl	8016630 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001b6e:	e7a9      	b.n	8001ac4 <Idle_init+0x8>
 8001b70:	24001a9c 	.word	0x24001a9c
 8001b74:	24001ae1 	.word	0x24001ae1
 8001b78:	24001e84 	.word	0x24001e84
 8001b7c:	24001ae0 	.word	0x24001ae0
 8001b80:	24000314 	.word	0x24000314
 8001b84:	24000fc0 	.word	0x24000fc0
 8001b88:	0801a90c 	.word	0x0801a90c
 8001b8c:	240000c4 	.word	0x240000c4

08001b90 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bac:	4a32      	ldr	r2, [pc, #200]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc4:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bca:	4a2b      	ldr	r2, [pc, #172]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be8:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MX_GPIO_Init+0xe8>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c24:	4815      	ldr	r0, [pc, #84]	; (8001c7c <MX_GPIO_Init+0xec>)
 8001c26:	f008 feaf 	bl	800a988 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2164      	movs	r1, #100	; 0x64
 8001c2e:	4814      	ldr	r0, [pc, #80]	; (8001c80 <MX_GPIO_Init+0xf0>)
 8001c30:	f008 feaa 	bl	800a988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c34:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480b      	ldr	r0, [pc, #44]	; (8001c7c <MX_GPIO_Init+0xec>)
 8001c4e:	f008 fcd3 	bl	800a5f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c52:	2364      	movs	r3, #100	; 0x64
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_GPIO_Init+0xf0>)
 8001c6a:	f008 fcc5 	bl	800a5f8 <HAL_GPIO_Init>

}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	58020800 	.word	0x58020800
 8001c80:	58020400 	.word	0x58020400

08001c84 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <MX_I2C1_Init+0x7c>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001c90:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <MX_I2C1_Init+0x80>)
 8001c92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb8:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cbe:	480f      	ldr	r0, [pc, #60]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001cc0:	f008 fe96 	bl	800a9f0 <HAL_I2C_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cca:	f000 ffbf 	bl	8002c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	480a      	ldr	r0, [pc, #40]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001cd2:	f00b f935 	bl	800cf40 <HAL_I2CEx_ConfigAnalogFilter>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cdc:	f000 ffb6 	bl	8002c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4806      	ldr	r0, [pc, #24]	; (8001cfc <MX_I2C1_Init+0x78>)
 8001ce4:	f00b f977 	bl	800cfd6 <HAL_I2CEx_ConfigDigitalFilter>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cee:	f000 ffad 	bl	8002c4c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f00b f9bc 	bl	800d070 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	24001940 	.word	0x24001940
 8001d00:	40005400 	.word	0x40005400
 8001d04:	00100517 	.word	0x00100517

08001d08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b0ba      	sub	sp, #232	; 0xe8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	22c0      	movs	r2, #192	; 0xc0
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f017 ff07 	bl	8019b3c <memset>
  if(i2cHandle->Instance==I2C1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5d      	ldr	r2, [pc, #372]	; (8001ea8 <HAL_I2C_MspInit+0x1a0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	f040 80b3 	bne.w	8001ea0 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d3a:	f04f 0208 	mov.w	r2, #8
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00c fb6b 	bl	800e42c <HAL_RCCEx_PeriphCLKConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001d5c:	f000 ff76 	bl	8002c4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b52      	ldr	r3, [pc, #328]	; (8001eac <HAL_I2C_MspInit+0x1a4>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d66:	4a51      	ldr	r2, [pc, #324]	; (8001eac <HAL_I2C_MspInit+0x1a4>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d70:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <HAL_I2C_MspInit+0x1a4>)
 8001d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d86:	2312      	movs	r3, #18
 8001d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4842      	ldr	r0, [pc, #264]	; (8001eb0 <HAL_I2C_MspInit+0x1a8>)
 8001da6:	f008 fc27 	bl	800a5f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001daa:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_I2C_MspInit+0x1a4>)
 8001dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001db0:	4a3e      	ldr	r2, [pc, #248]	; (8001eac <HAL_I2C_MspInit+0x1a4>)
 8001db2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001db6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dba:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <HAL_I2C_MspInit+0x1a4>)
 8001dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001dc8:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001dca:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <HAL_I2C_MspInit+0x1b0>)
 8001dcc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001dce:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001dd0:	2222      	movs	r2, #34	; 0x22
 8001dd2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dd4:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001dd6:	2240      	movs	r2, #64	; 0x40
 8001dd8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de0:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de8:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001dfa:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001dfc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e00:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e02:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e08:	482a      	ldr	r0, [pc, #168]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001e0a:	f005 fac5 	bl	8007398 <HAL_DMA_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8001e14:	f000 ff1a 	bl	8002c4c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e1e:	4a25      	ldr	r2, [pc, #148]	; (8001eb4 <HAL_I2C_MspInit+0x1ac>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e26:	4a26      	ldr	r2, [pc, #152]	; (8001ec0 <HAL_I2C_MspInit+0x1b8>)
 8001e28:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001e2a:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e2c:	2221      	movs	r2, #33	; 0x21
 8001e2e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e42:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e56:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e5c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e64:	4815      	ldr	r0, [pc, #84]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e66:	f005 fa97 	bl	8007398 <HAL_DMA_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8001e70:	f000 feec 	bl	8002c4c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e78:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <HAL_I2C_MspInit+0x1b4>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2105      	movs	r1, #5
 8001e84:	201f      	movs	r0, #31
 8001e86:	f004 fe59 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e8a:	201f      	movs	r0, #31
 8001e8c:	f004 fe70 	bl	8006b70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2105      	movs	r1, #5
 8001e94:	2020      	movs	r0, #32
 8001e96:	f004 fe51 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e9a:	2020      	movs	r0, #32
 8001e9c:	f004 fe68 	bl	8006b70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	37e8      	adds	r7, #232	; 0xe8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40005400 	.word	0x40005400
 8001eac:	58024400 	.word	0x58024400
 8001eb0:	58020400 	.word	0x58020400
 8001eb4:	24001994 	.word	0x24001994
 8001eb8:	400200a0 	.word	0x400200a0
 8001ebc:	24001a0c 	.word	0x24001a0c
 8001ec0:	400200b8 	.word	0x400200b8

08001ec4 <__NVIC_SystemReset>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec8:	f3bf 8f4f 	dsb	sy
}
 8001ecc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <__NVIC_SystemReset+0x24>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ed6:	4904      	ldr	r1, [pc, #16]	; (8001ee8 <__NVIC_SystemReset+0x24>)
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_SystemReset+0x28>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ede:	f3bf 8f4f 	dsb	sy
}
 8001ee2:	bf00      	nop
    __NOP();
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <__NVIC_SystemReset+0x20>
 8001ee8:	e000ed00 	.word	0xe000ed00
 8001eec:	05fa0004 	.word	0x05fa0004

08001ef0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d106      	bne.n	8001f0e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2101      	movs	r1, #1
 8001f06:	4618      	mov	r0, r3
 8001f08:	f014 fc4e 	bl	80167a8 <osEventFlagsSet>


	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8001f0c:	e035      	b.n	8001f7a <HAL_TIM_OC_DelayElapsedCallback+0x8a>
	else if (htim == &htim2) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12e      	bne.n	8001f74 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		if (ERPA_ENABLED) {
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2102      	movs	r1, #2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f014 fc3e 	bl	80167a8 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d113      	bne.n	8001f5e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f014 fc33 	bl	80167a8 <osEventFlagsSet>
			if (HK_ENABLED){
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2104      	movs	r1, #4
 8001f52:	4618      	mov	r0, r3
 8001f54:	f014 fc28 	bl	80167a8 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001f6a:	701a      	strb	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg1);
 8001f6c:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8001f6e:	f00b f8a3 	bl	800d0b8 <HAL_IWDG_Refresh>
}
 8001f72:	e002      	b.n	8001f7a <HAL_TIM_OC_DelayElapsedCallback+0x8a>
		printf("Unknown Timer Interrupt\n");
 8001f74:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001f76:	f017 fe57 	bl	8019c28 <puts>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	24001e84 	.word	0x24001e84
 8001f88:	24001a94 	.word	0x24001a94
 8001f8c:	24001ed0 	.word	0x24001ed0
 8001f90:	24001ae1 	.word	0x24001ae1
 8001f94:	24001ae8 	.word	0x24001ae8
 8001f98:	24001a98 	.word	0x24001a98
 8001f9c:	24001ae0 	.word	0x24001ae0
 8001fa0:	24001a84 	.word	0x24001a84
 8001fa4:	0801a5d8 	.word	0x0801a5d8

08001fa8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	49f7      	ldr	r1, [pc, #988]	; (8002390 <HAL_UART_RxCpltCallback+0x3e8>)
 8001fb4:	48f7      	ldr	r0, [pc, #988]	; (8002394 <HAL_UART_RxCpltCallback+0x3ec>)
 8001fb6:	f011 fda7 	bl	8013b08 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001fba:	4bf5      	ldr	r3, [pc, #980]	; (8002390 <HAL_UART_RxCpltCallback+0x3e8>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	2bef      	cmp	r3, #239	; 0xef
 8001fc4:	f200 843b 	bhi.w	800283e <HAL_UART_RxCpltCallback+0x896>
 8001fc8:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <HAL_UART_RxCpltCallback+0x28>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	080023ad 	.word	0x080023ad
 8001fd4:	080023dd 	.word	0x080023dd
 8001fd8:	0800244d 	.word	0x0800244d
 8001fdc:	08002487 	.word	0x08002487
 8001fe0:	080024bf 	.word	0x080024bf
 8001fe4:	080024f9 	.word	0x080024f9
 8001fe8:	08002535 	.word	0x08002535
 8001fec:	08002571 	.word	0x08002571
 8001ff0:	080025ab 	.word	0x080025ab
 8001ff4:	080025df 	.word	0x080025df
 8001ff8:	08002613 	.word	0x08002613
 8001ffc:	08002645 	.word	0x08002645
 8002000:	0800266f 	.word	0x0800266f
 8002004:	0800274b 	.word	0x0800274b
 8002008:	080027b3 	.word	0x080027b3
 800200c:	080027db 	.word	0x080027db
 8002010:	08002399 	.word	0x08002399
 8002014:	080023c1 	.word	0x080023c1
 8002018:	0800242f 	.word	0x0800242f
 800201c:	0800246b 	.word	0x0800246b
 8002020:	080024a3 	.word	0x080024a3
 8002024:	080024db 	.word	0x080024db
 8002028:	08002517 	.word	0x08002517
 800202c:	08002553 	.word	0x08002553
 8002030:	0800258f 	.word	0x0800258f
 8002034:	080025c7 	.word	0x080025c7
 8002038:	080025ef 	.word	0x080025ef
 800203c:	08002629 	.word	0x08002629
 8002040:	08002655 	.word	0x08002655
 8002044:	08002709 	.word	0x08002709
 8002048:	0800278b 	.word	0x0800278b
 800204c:	0800283f 	.word	0x0800283f
 8002050:	0800283f 	.word	0x0800283f
 8002054:	0800283f 	.word	0x0800283f
 8002058:	0800283f 	.word	0x0800283f
 800205c:	0800283f 	.word	0x0800283f
 8002060:	0800283f 	.word	0x0800283f
 8002064:	0800283f 	.word	0x0800283f
 8002068:	0800283f 	.word	0x0800283f
 800206c:	0800283f 	.word	0x0800283f
 8002070:	0800283f 	.word	0x0800283f
 8002074:	0800283f 	.word	0x0800283f
 8002078:	0800283f 	.word	0x0800283f
 800207c:	0800283f 	.word	0x0800283f
 8002080:	0800283f 	.word	0x0800283f
 8002084:	0800283f 	.word	0x0800283f
 8002088:	0800283f 	.word	0x0800283f
 800208c:	0800283f 	.word	0x0800283f
 8002090:	0800283f 	.word	0x0800283f
 8002094:	0800283f 	.word	0x0800283f
 8002098:	0800283f 	.word	0x0800283f
 800209c:	0800283f 	.word	0x0800283f
 80020a0:	0800283f 	.word	0x0800283f
 80020a4:	0800283f 	.word	0x0800283f
 80020a8:	0800283f 	.word	0x0800283f
 80020ac:	0800283f 	.word	0x0800283f
 80020b0:	0800283f 	.word	0x0800283f
 80020b4:	0800283f 	.word	0x0800283f
 80020b8:	0800283f 	.word	0x0800283f
 80020bc:	0800283f 	.word	0x0800283f
 80020c0:	0800283f 	.word	0x0800283f
 80020c4:	0800283f 	.word	0x0800283f
 80020c8:	0800283f 	.word	0x0800283f
 80020cc:	0800283f 	.word	0x0800283f
 80020d0:	0800283f 	.word	0x0800283f
 80020d4:	0800283f 	.word	0x0800283f
 80020d8:	0800283f 	.word	0x0800283f
 80020dc:	0800283f 	.word	0x0800283f
 80020e0:	0800283f 	.word	0x0800283f
 80020e4:	0800283f 	.word	0x0800283f
 80020e8:	0800283f 	.word	0x0800283f
 80020ec:	0800283f 	.word	0x0800283f
 80020f0:	0800283f 	.word	0x0800283f
 80020f4:	0800283f 	.word	0x0800283f
 80020f8:	0800283f 	.word	0x0800283f
 80020fc:	0800283f 	.word	0x0800283f
 8002100:	0800283f 	.word	0x0800283f
 8002104:	0800283f 	.word	0x0800283f
 8002108:	0800283f 	.word	0x0800283f
 800210c:	0800283f 	.word	0x0800283f
 8002110:	0800283f 	.word	0x0800283f
 8002114:	0800283f 	.word	0x0800283f
 8002118:	0800283f 	.word	0x0800283f
 800211c:	0800283f 	.word	0x0800283f
 8002120:	0800283f 	.word	0x0800283f
 8002124:	0800283f 	.word	0x0800283f
 8002128:	0800283f 	.word	0x0800283f
 800212c:	0800283f 	.word	0x0800283f
 8002130:	0800283f 	.word	0x0800283f
 8002134:	0800283f 	.word	0x0800283f
 8002138:	0800283f 	.word	0x0800283f
 800213c:	0800283f 	.word	0x0800283f
 8002140:	0800283f 	.word	0x0800283f
 8002144:	0800283f 	.word	0x0800283f
 8002148:	0800283f 	.word	0x0800283f
 800214c:	0800283f 	.word	0x0800283f
 8002150:	0800283f 	.word	0x0800283f
 8002154:	0800283f 	.word	0x0800283f
 8002158:	0800283f 	.word	0x0800283f
 800215c:	0800283f 	.word	0x0800283f
 8002160:	0800283f 	.word	0x0800283f
 8002164:	0800283f 	.word	0x0800283f
 8002168:	0800283f 	.word	0x0800283f
 800216c:	0800283f 	.word	0x0800283f
 8002170:	0800283f 	.word	0x0800283f
 8002174:	0800283f 	.word	0x0800283f
 8002178:	0800283f 	.word	0x0800283f
 800217c:	0800283f 	.word	0x0800283f
 8002180:	0800283f 	.word	0x0800283f
 8002184:	0800283f 	.word	0x0800283f
 8002188:	0800283f 	.word	0x0800283f
 800218c:	0800283f 	.word	0x0800283f
 8002190:	0800283f 	.word	0x0800283f
 8002194:	0800283f 	.word	0x0800283f
 8002198:	0800283f 	.word	0x0800283f
 800219c:	0800283f 	.word	0x0800283f
 80021a0:	0800283f 	.word	0x0800283f
 80021a4:	0800283f 	.word	0x0800283f
 80021a8:	0800283f 	.word	0x0800283f
 80021ac:	0800283f 	.word	0x0800283f
 80021b0:	0800283f 	.word	0x0800283f
 80021b4:	0800283f 	.word	0x0800283f
 80021b8:	0800283f 	.word	0x0800283f
 80021bc:	0800283f 	.word	0x0800283f
 80021c0:	0800283f 	.word	0x0800283f
 80021c4:	0800283f 	.word	0x0800283f
 80021c8:	0800283f 	.word	0x0800283f
 80021cc:	0800283f 	.word	0x0800283f
 80021d0:	0800283f 	.word	0x0800283f
 80021d4:	0800283f 	.word	0x0800283f
 80021d8:	0800283f 	.word	0x0800283f
 80021dc:	0800283f 	.word	0x0800283f
 80021e0:	0800283f 	.word	0x0800283f
 80021e4:	0800283f 	.word	0x0800283f
 80021e8:	0800283f 	.word	0x0800283f
 80021ec:	0800283f 	.word	0x0800283f
 80021f0:	0800283f 	.word	0x0800283f
 80021f4:	0800283f 	.word	0x0800283f
 80021f8:	0800283f 	.word	0x0800283f
 80021fc:	0800283f 	.word	0x0800283f
 8002200:	0800283f 	.word	0x0800283f
 8002204:	0800283f 	.word	0x0800283f
 8002208:	0800283f 	.word	0x0800283f
 800220c:	0800283f 	.word	0x0800283f
 8002210:	0800283f 	.word	0x0800283f
 8002214:	0800283f 	.word	0x0800283f
 8002218:	0800283f 	.word	0x0800283f
 800221c:	0800283f 	.word	0x0800283f
 8002220:	0800283f 	.word	0x0800283f
 8002224:	0800283f 	.word	0x0800283f
 8002228:	0800283f 	.word	0x0800283f
 800222c:	0800283f 	.word	0x0800283f
 8002230:	0800283f 	.word	0x0800283f
 8002234:	0800283f 	.word	0x0800283f
 8002238:	0800283f 	.word	0x0800283f
 800223c:	0800283f 	.word	0x0800283f
 8002240:	0800283f 	.word	0x0800283f
 8002244:	0800283f 	.word	0x0800283f
 8002248:	0800283f 	.word	0x0800283f
 800224c:	0800283f 	.word	0x0800283f
 8002250:	0800283f 	.word	0x0800283f
 8002254:	0800283f 	.word	0x0800283f
 8002258:	0800283f 	.word	0x0800283f
 800225c:	0800283f 	.word	0x0800283f
 8002260:	0800283f 	.word	0x0800283f
 8002264:	0800283f 	.word	0x0800283f
 8002268:	0800283f 	.word	0x0800283f
 800226c:	0800283f 	.word	0x0800283f
 8002270:	0800283f 	.word	0x0800283f
 8002274:	0800283f 	.word	0x0800283f
 8002278:	0800283f 	.word	0x0800283f
 800227c:	0800283f 	.word	0x0800283f
 8002280:	0800283f 	.word	0x0800283f
 8002284:	0800283f 	.word	0x0800283f
 8002288:	0800283f 	.word	0x0800283f
 800228c:	08002817 	.word	0x08002817
 8002290:	0800283f 	.word	0x0800283f
 8002294:	0800283f 	.word	0x0800283f
 8002298:	0800283f 	.word	0x0800283f
 800229c:	0800283f 	.word	0x0800283f
 80022a0:	0800283f 	.word	0x0800283f
 80022a4:	0800283f 	.word	0x0800283f
 80022a8:	0800283f 	.word	0x0800283f
 80022ac:	0800283f 	.word	0x0800283f
 80022b0:	0800283f 	.word	0x0800283f
 80022b4:	0800283f 	.word	0x0800283f
 80022b8:	0800283f 	.word	0x0800283f
 80022bc:	0800283f 	.word	0x0800283f
 80022c0:	0800283f 	.word	0x0800283f
 80022c4:	0800283f 	.word	0x0800283f
 80022c8:	0800283f 	.word	0x0800283f
 80022cc:	0800281d 	.word	0x0800281d
 80022d0:	0800283f 	.word	0x0800283f
 80022d4:	0800283f 	.word	0x0800283f
 80022d8:	0800283f 	.word	0x0800283f
 80022dc:	0800283f 	.word	0x0800283f
 80022e0:	0800283f 	.word	0x0800283f
 80022e4:	0800283f 	.word	0x0800283f
 80022e8:	0800283f 	.word	0x0800283f
 80022ec:	0800283f 	.word	0x0800283f
 80022f0:	0800283f 	.word	0x0800283f
 80022f4:	0800283f 	.word	0x0800283f
 80022f8:	0800283f 	.word	0x0800283f
 80022fc:	0800283f 	.word	0x0800283f
 8002300:	0800283f 	.word	0x0800283f
 8002304:	0800283f 	.word	0x0800283f
 8002308:	0800283f 	.word	0x0800283f
 800230c:	0800282b 	.word	0x0800282b
 8002310:	08002803 	.word	0x08002803
 8002314:	0800283f 	.word	0x0800283f
 8002318:	0800283f 	.word	0x0800283f
 800231c:	0800283f 	.word	0x0800283f
 8002320:	0800283f 	.word	0x0800283f
 8002324:	0800283f 	.word	0x0800283f
 8002328:	0800283f 	.word	0x0800283f
 800232c:	0800283f 	.word	0x0800283f
 8002330:	0800283f 	.word	0x0800283f
 8002334:	0800283f 	.word	0x0800283f
 8002338:	0800283f 	.word	0x0800283f
 800233c:	0800283f 	.word	0x0800283f
 8002340:	0800283f 	.word	0x0800283f
 8002344:	0800283f 	.word	0x0800283f
 8002348:	0800283f 	.word	0x0800283f
 800234c:	08002839 	.word	0x08002839
 8002350:	080027ef 	.word	0x080027ef
 8002354:	0800283f 	.word	0x0800283f
 8002358:	0800283f 	.word	0x0800283f
 800235c:	0800283f 	.word	0x0800283f
 8002360:	0800283f 	.word	0x0800283f
 8002364:	0800283f 	.word	0x0800283f
 8002368:	0800283f 	.word	0x0800283f
 800236c:	0800283f 	.word	0x0800283f
 8002370:	0800283f 	.word	0x0800283f
 8002374:	0800283f 	.word	0x0800283f
 8002378:	0800283f 	.word	0x0800283f
 800237c:	0800283f 	.word	0x0800283f
 8002380:	0800283f 	.word	0x0800283f
 8002384:	0800283f 	.word	0x0800283f
 8002388:	0800283f 	.word	0x0800283f
 800238c:	08002847 	.word	0x08002847
 8002390:	24001aa0 	.word	0x24001aa0
 8002394:	24001f1c 	.word	0x24001f1c
	case 0x10: {
		printf("SDN1 ON\n");
 8002398:	48b8      	ldr	r0, [pc, #736]	; (800267c <HAL_UART_RxCpltCallback+0x6d4>)
 800239a:	f017 fc45 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800239e:	4bb8      	ldr	r3, [pc, #736]	; (8002680 <HAL_UART_RxCpltCallback+0x6d8>)
 80023a0:	2104      	movs	r1, #4
 80023a2:	2201      	movs	r2, #1
 80023a4:	4618      	mov	r0, r3
 80023a6:	f008 faef 	bl	800a988 <HAL_GPIO_WritePin>
		break;
 80023aa:	e255      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 80023ac:	48b5      	ldr	r0, [pc, #724]	; (8002684 <HAL_UART_RxCpltCallback+0x6dc>)
 80023ae:	f017 fc3b 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 80023b2:	4bb3      	ldr	r3, [pc, #716]	; (8002680 <HAL_UART_RxCpltCallback+0x6d8>)
 80023b4:	2104      	movs	r1, #4
 80023b6:	2200      	movs	r2, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f008 fae5 	bl	800a988 <HAL_GPIO_WritePin>
		break;
 80023be:	e24b      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 80023c0:	48b1      	ldr	r0, [pc, #708]	; (8002688 <HAL_UART_RxCpltCallback+0x6e0>)
 80023c2:	f017 fc31 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 80023c6:	4bae      	ldr	r3, [pc, #696]	; (8002680 <HAL_UART_RxCpltCallback+0x6d8>)
 80023c8:	2120      	movs	r1, #32
 80023ca:	2201      	movs	r2, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f008 fadb 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 80023d2:	2101      	movs	r1, #1
 80023d4:	2008      	movs	r0, #8
 80023d6:	f002 fb85 	bl	8004ae4 <set_rail_monitor_enable>
		break;
 80023da:	e23d      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 80023dc:	48ab      	ldr	r0, [pc, #684]	; (800268c <HAL_UART_RxCpltCallback+0x6e4>)
 80023de:	f017 fc23 	bl	8019c28 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 80023e2:	2308      	movs	r3, #8
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e00f      	b.n	8002408 <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80023e8:	4aa9      	ldr	r2, [pc, #676]	; (8002690 <HAL_UART_RxCpltCallback+0x6e8>)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80023f0:	4aa7      	ldr	r2, [pc, #668]	; (8002690 <HAL_UART_RxCpltCallback+0x6e8>)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	889b      	ldrh	r3, [r3, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	4619      	mov	r1, r3
 80023fe:	f008 fac3 	bl	800a988 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3b01      	subs	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	dcec      	bgt.n	80023e8 <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800240e:	2310      	movs	r3, #16
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	e008      	b.n	8002426 <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f002 fb62 	bl	8004ae4 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	3b01      	subs	r3, #1
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b07      	cmp	r3, #7
 800242a:	dcf3      	bgt.n	8002414 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 800242c:	e214      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 800242e:	4899      	ldr	r0, [pc, #612]	; (8002694 <HAL_UART_RxCpltCallback+0x6ec>)
 8002430:	f017 fbfa 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8002434:	4b98      	ldr	r3, [pc, #608]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 8002436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800243a:	2201      	movs	r2, #1
 800243c:	4618      	mov	r0, r3
 800243e:	f008 faa3 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8002442:	2101      	movs	r1, #1
 8002444:	2009      	movs	r0, #9
 8002446:	f002 fb4d 	bl	8004ae4 <set_rail_monitor_enable>

		break;
 800244a:	e205      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 800244c:	4893      	ldr	r0, [pc, #588]	; (800269c <HAL_UART_RxCpltCallback+0x6f4>)
 800244e:	f017 fbeb 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8002452:	4b91      	ldr	r3, [pc, #580]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 8002454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002458:	2200      	movs	r2, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f008 fa94 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8002460:	2100      	movs	r1, #0
 8002462:	2009      	movs	r0, #9
 8002464:	f002 fb3e 	bl	8004ae4 <set_rail_monitor_enable>
		break;
 8002468:	e1f6      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 800246a:	488d      	ldr	r0, [pc, #564]	; (80026a0 <HAL_UART_RxCpltCallback+0x6f8>)
 800246c:	f017 fbdc 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8002470:	4b89      	ldr	r3, [pc, #548]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	2201      	movs	r2, #1
 8002476:	4618      	mov	r0, r3
 8002478:	f008 fa86 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 800247c:	2101      	movs	r1, #1
 800247e:	200a      	movs	r0, #10
 8002480:	f002 fb30 	bl	8004ae4 <set_rail_monitor_enable>

		break;
 8002484:	e1e8      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8002486:	4887      	ldr	r0, [pc, #540]	; (80026a4 <HAL_UART_RxCpltCallback+0x6fc>)
 8002488:	f017 fbce 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800248c:	4b82      	ldr	r3, [pc, #520]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 800248e:	2180      	movs	r1, #128	; 0x80
 8002490:	2200      	movs	r2, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f008 fa78 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8002498:	2100      	movs	r1, #0
 800249a:	200a      	movs	r0, #10
 800249c:	f002 fb22 	bl	8004ae4 <set_rail_monitor_enable>
		break;
 80024a0:	e1da      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 80024a2:	4881      	ldr	r0, [pc, #516]	; (80026a8 <HAL_UART_RxCpltCallback+0x700>)
 80024a4:	f017 fbc0 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 80024a8:	4b7b      	ldr	r3, [pc, #492]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 80024aa:	2140      	movs	r1, #64	; 0x40
 80024ac:	2201      	movs	r2, #1
 80024ae:	4618      	mov	r0, r3
 80024b0:	f008 fa6a 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 80024b4:	2101      	movs	r1, #1
 80024b6:	200b      	movs	r0, #11
 80024b8:	f002 fb14 	bl	8004ae4 <set_rail_monitor_enable>

		break;
 80024bc:	e1cc      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 80024be:	487b      	ldr	r0, [pc, #492]	; (80026ac <HAL_UART_RxCpltCallback+0x704>)
 80024c0:	f017 fbb2 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80024c4:	4b74      	ldr	r3, [pc, #464]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 80024c6:	2140      	movs	r1, #64	; 0x40
 80024c8:	2200      	movs	r2, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f008 fa5c 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 80024d0:	2100      	movs	r1, #0
 80024d2:	200b      	movs	r0, #11
 80024d4:	f002 fb06 	bl	8004ae4 <set_rail_monitor_enable>
		break;
 80024d8:	e1be      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 80024da:	4875      	ldr	r0, [pc, #468]	; (80026b0 <HAL_UART_RxCpltCallback+0x708>)
 80024dc:	f017 fba4 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80024e0:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 80024e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e6:	2201      	movs	r2, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f008 fa4d 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80024ee:	2101      	movs	r1, #1
 80024f0:	200c      	movs	r0, #12
 80024f2:	f002 faf7 	bl	8004ae4 <set_rail_monitor_enable>

		break;
 80024f6:	e1af      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80024f8:	486e      	ldr	r0, [pc, #440]	; (80026b4 <HAL_UART_RxCpltCallback+0x70c>)
 80024fa:	f017 fb95 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80024fe:	4b66      	ldr	r3, [pc, #408]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 8002500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002504:	2200      	movs	r2, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f008 fa3e 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 800250c:	2100      	movs	r1, #0
 800250e:	200c      	movs	r0, #12
 8002510:	f002 fae8 	bl	8004ae4 <set_rail_monitor_enable>
		break;
 8002514:	e1a0      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8002516:	4868      	ldr	r0, [pc, #416]	; (80026b8 <HAL_UART_RxCpltCallback+0x710>)
 8002518:	f017 fb86 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 800251c:	4b5e      	ldr	r3, [pc, #376]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 800251e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002522:	2201      	movs	r2, #1
 8002524:	4618      	mov	r0, r3
 8002526:	f008 fa2f 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 800252a:	2101      	movs	r1, #1
 800252c:	200d      	movs	r0, #13
 800252e:	f002 fad9 	bl	8004ae4 <set_rail_monitor_enable>

		break;
 8002532:	e191      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8002534:	4861      	ldr	r0, [pc, #388]	; (80026bc <HAL_UART_RxCpltCallback+0x714>)
 8002536:	f017 fb77 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800253a:	4b57      	ldr	r3, [pc, #348]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 800253c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002540:	2200      	movs	r2, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f008 fa20 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8002548:	2100      	movs	r1, #0
 800254a:	200d      	movs	r0, #13
 800254c:	f002 faca 	bl	8004ae4 <set_rail_monitor_enable>
		break;
 8002550:	e182      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8002552:	485b      	ldr	r0, [pc, #364]	; (80026c0 <HAL_UART_RxCpltCallback+0x718>)
 8002554:	f017 fb68 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8002558:	4b4f      	ldr	r3, [pc, #316]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 800255a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800255e:	2201      	movs	r2, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f008 fa11 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8002566:	2101      	movs	r1, #1
 8002568:	200f      	movs	r0, #15
 800256a:	f002 fabb 	bl	8004ae4 <set_rail_monitor_enable>

		break;
 800256e:	e173      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8002570:	4854      	ldr	r0, [pc, #336]	; (80026c4 <HAL_UART_RxCpltCallback+0x71c>)
 8002572:	f017 fb59 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8002576:	4b48      	ldr	r3, [pc, #288]	; (8002698 <HAL_UART_RxCpltCallback+0x6f0>)
 8002578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800257c:	2200      	movs	r2, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f008 fa02 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8002584:	2100      	movs	r1, #0
 8002586:	200f      	movs	r0, #15
 8002588:	f002 faac 	bl	8004ae4 <set_rail_monitor_enable>
		break;
 800258c:	e164      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 800258e:	484e      	ldr	r0, [pc, #312]	; (80026c8 <HAL_UART_RxCpltCallback+0x720>)
 8002590:	f017 fb4a 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8002594:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <HAL_UART_RxCpltCallback+0x6d8>)
 8002596:	2140      	movs	r1, #64	; 0x40
 8002598:	2201      	movs	r2, #1
 800259a:	4618      	mov	r0, r3
 800259c:	f008 f9f4 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 80025a0:	2101      	movs	r1, #1
 80025a2:	2010      	movs	r0, #16
 80025a4:	f002 fa9e 	bl	8004ae4 <set_rail_monitor_enable>

		break;
 80025a8:	e156      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 80025aa:	4848      	ldr	r0, [pc, #288]	; (80026cc <HAL_UART_RxCpltCallback+0x724>)
 80025ac:	f017 fb3c 	bl	8019c28 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80025b0:	4b33      	ldr	r3, [pc, #204]	; (8002680 <HAL_UART_RxCpltCallback+0x6d8>)
 80025b2:	2140      	movs	r1, #64	; 0x40
 80025b4:	2200      	movs	r2, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f008 f9e6 	bl	800a988 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 80025bc:	2100      	movs	r1, #0
 80025be:	2010      	movs	r0, #16
 80025c0:	f002 fa90 	bl	8004ae4 <set_rail_monitor_enable>
		break;
 80025c4:	e148      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 80025c6:	4842      	ldr	r0, [pc, #264]	; (80026d0 <HAL_UART_RxCpltCallback+0x728>)
 80025c8:	f017 fb2e 	bl	8019c28 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 80025cc:	2300      	movs	r3, #0
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2320      	movs	r3, #32
 80025d2:	4a40      	ldr	r2, [pc, #256]	; (80026d4 <HAL_UART_RxCpltCallback+0x72c>)
 80025d4:	2100      	movs	r1, #0
 80025d6:	4840      	ldr	r0, [pc, #256]	; (80026d8 <HAL_UART_RxCpltCallback+0x730>)
 80025d8:	f004 fb52 	bl	8006c80 <HAL_DAC_Start_DMA>
		break;
 80025dc:	e13c      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 80025de:	483f      	ldr	r0, [pc, #252]	; (80026dc <HAL_UART_RxCpltCallback+0x734>)
 80025e0:	f017 fb22 	bl	8019c28 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80025e4:	2100      	movs	r1, #0
 80025e6:	483c      	ldr	r0, [pc, #240]	; (80026d8 <HAL_UART_RxCpltCallback+0x730>)
 80025e8:	f004 fc0a 	bl	8006e00 <HAL_DAC_Stop_DMA>
		break;
 80025ec:	e134      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80025ee:	483c      	ldr	r0, [pc, #240]	; (80026e0 <HAL_UART_RxCpltCallback+0x738>)
 80025f0:	f017 fb1a 	bl	8019c28 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_UART_RxCpltCallback+0x73c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2102      	movs	r1, #2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f014 f8d4 	bl	80167a8 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002604:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 800260a:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <HAL_UART_RxCpltCallback+0x740>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]

		break;
 8002610:	e122      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8002612:	4836      	ldr	r0, [pc, #216]	; (80026ec <HAL_UART_RxCpltCallback+0x744>)
 8002614:	f017 fb08 	bl	8019c28 <puts>
		ERPA_ENABLED = 0;
 8002618:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <HAL_UART_RxCpltCallback+0x740>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 800261e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002622:	2200      	movs	r2, #0
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002626:	e117      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8002628:	4831      	ldr	r0, [pc, #196]	; (80026f0 <HAL_UART_RxCpltCallback+0x748>)
 800262a:	f017 fafd 	bl	8019c28 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800262e:	2100      	movs	r1, #0
 8002630:	4830      	ldr	r0, [pc, #192]	; (80026f4 <HAL_UART_RxCpltCallback+0x74c>)
 8002632:	f00f fd89 	bl	8012148 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002636:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_UART_RxCpltCallback+0x73c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f014 f8b3 	bl	80167a8 <osEventFlagsSet>
		break;
 8002642:	e109      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8002644:	482c      	ldr	r0, [pc, #176]	; (80026f8 <HAL_UART_RxCpltCallback+0x750>)
 8002646:	f017 faef 	bl	8019c28 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800264a:	2100      	movs	r1, #0
 800264c:	4829      	ldr	r0, [pc, #164]	; (80026f4 <HAL_UART_RxCpltCallback+0x74c>)
 800264e:	f00f fed5 	bl	80123fc <HAL_TIM_OC_Stop_IT>
		break;
 8002652:	e101      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x1C: {
		printf("HK ON \n");
 8002654:	4829      	ldr	r0, [pc, #164]	; (80026fc <HAL_UART_RxCpltCallback+0x754>)
 8002656:	f017 fae7 	bl	8019c28 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_UART_RxCpltCallback+0x73c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2104      	movs	r1, #4
 8002660:	4618      	mov	r0, r3
 8002662:	f014 f8a1 	bl	80167a8 <osEventFlagsSet>
		HK_ENABLED = 1;
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_UART_RxCpltCallback+0x758>)
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
		break;
 800266c:	e0f4      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0C: {
		printf("HK OFF\n");
 800266e:	4825      	ldr	r0, [pc, #148]	; (8002704 <HAL_UART_RxCpltCallback+0x75c>)
 8002670:	f017 fada 	bl	8019c28 <puts>
		HK_ENABLED = 0;
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_UART_RxCpltCallback+0x758>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
		break;
 800267a:	e0ed      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
 800267c:	0801a5f0 	.word	0x0801a5f0
 8002680:	58020400 	.word	0x58020400
 8002684:	0801a5f8 	.word	0x0801a5f8
 8002688:	0801a604 	.word	0x0801a604
 800268c:	0801a610 	.word	0x0801a610
 8002690:	0801a90c 	.word	0x0801a90c
 8002694:	0801a61c 	.word	0x0801a61c
 8002698:	58020800 	.word	0x58020800
 800269c:	0801a628 	.word	0x0801a628
 80026a0:	0801a638 	.word	0x0801a638
 80026a4:	0801a644 	.word	0x0801a644
 80026a8:	0801a650 	.word	0x0801a650
 80026ac:	0801a65c 	.word	0x0801a65c
 80026b0:	0801a66c 	.word	0x0801a66c
 80026b4:	0801a678 	.word	0x0801a678
 80026b8:	0801a684 	.word	0x0801a684
 80026bc:	0801a690 	.word	0x0801a690
 80026c0:	0801a69c 	.word	0x0801a69c
 80026c4:	0801a6ac 	.word	0x0801a6ac
 80026c8:	0801a6bc 	.word	0x0801a6bc
 80026cc:	0801a6c8 	.word	0x0801a6c8
 80026d0:	0801a6d8 	.word	0x0801a6d8
 80026d4:	24000040 	.word	0x24000040
 80026d8:	24000314 	.word	0x24000314
 80026dc:	0801a6e8 	.word	0x0801a6e8
 80026e0:	0801a6f8 	.word	0x0801a6f8
 80026e4:	24001a94 	.word	0x24001a94
 80026e8:	24001ae1 	.word	0x24001ae1
 80026ec:	0801a700 	.word	0x0801a700
 80026f0:	0801a70c 	.word	0x0801a70c
 80026f4:	24001e84 	.word	0x24001e84
 80026f8:	0801a714 	.word	0x0801a714
 80026fc:	0801a71c 	.word	0x0801a71c
 8002700:	24001ae0 	.word	0x24001ae0
 8002704:	0801a724 	.word	0x0801a724
	}
	case 0x1D: {
		printf("Step Up\n");
 8002708:	4855      	ldr	r0, [pc, #340]	; (8002860 <HAL_UART_RxCpltCallback+0x8b8>)
 800270a:	f017 fa8d 	bl	8019c28 <puts>
		if (step < 14) {
 800270e:	4b55      	ldr	r3, [pc, #340]	; (8002864 <HAL_UART_RxCpltCallback+0x8bc>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b0d      	cmp	r3, #13
 8002716:	f200 8098 	bhi.w	800284a <HAL_UART_RxCpltCallback+0x8a2>
			step += 2;
 800271a:	4b52      	ldr	r3, [pc, #328]	; (8002864 <HAL_UART_RxCpltCallback+0x8bc>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	3302      	adds	r3, #2
 8002722:	b2da      	uxtb	r2, r3
 8002724:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <HAL_UART_RxCpltCallback+0x8bc>)
 8002726:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8002728:	4b4e      	ldr	r3, [pc, #312]	; (8002864 <HAL_UART_RxCpltCallback+0x8bc>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	4b4d      	ldr	r3, [pc, #308]	; (8002868 <HAL_UART_RxCpltCallback+0x8c0>)
 8002732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	484c      	ldr	r0, [pc, #304]	; (800286c <HAL_UART_RxCpltCallback+0x8c4>)
 800273c:	f004 fc03 	bl	8006f46 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002740:	2100      	movs	r1, #0
 8002742:	484a      	ldr	r0, [pc, #296]	; (800286c <HAL_UART_RxCpltCallback+0x8c4>)
 8002744:	f004 fa44 	bl	8006bd0 <HAL_DAC_Start>
		}
		break;
 8002748:	e07f      	b.n	800284a <HAL_UART_RxCpltCallback+0x8a2>
	}
	case 0x0D: {
		printf("Step Down\n");
 800274a:	4849      	ldr	r0, [pc, #292]	; (8002870 <HAL_UART_RxCpltCallback+0x8c8>)
 800274c:	f017 fa6c 	bl	8019c28 <puts>
		if (step > 1) {
 8002750:	4b44      	ldr	r3, [pc, #272]	; (8002864 <HAL_UART_RxCpltCallback+0x8bc>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d979      	bls.n	800284e <HAL_UART_RxCpltCallback+0x8a6>
			step -= 2;
 800275a:	4b42      	ldr	r3, [pc, #264]	; (8002864 <HAL_UART_RxCpltCallback+0x8bc>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3b02      	subs	r3, #2
 8002762:	b2da      	uxtb	r2, r3
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_UART_RxCpltCallback+0x8bc>)
 8002766:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8002768:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <HAL_UART_RxCpltCallback+0x8bc>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	4b3d      	ldr	r3, [pc, #244]	; (8002868 <HAL_UART_RxCpltCallback+0x8c0>)
 8002772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	483c      	ldr	r0, [pc, #240]	; (800286c <HAL_UART_RxCpltCallback+0x8c4>)
 800277c:	f004 fbe3 	bl	8006f46 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002780:	2100      	movs	r1, #0
 8002782:	483a      	ldr	r0, [pc, #232]	; (800286c <HAL_UART_RxCpltCallback+0x8c4>)
 8002784:	f004 fa24 	bl	8006bd0 <HAL_DAC_Start>
		}
		break;
 8002788:	e061      	b.n	800284e <HAL_UART_RxCpltCallback+0x8a6>
	}
	case 0x1E: {
		printf("Factor Up\n");
 800278a:	483a      	ldr	r0, [pc, #232]	; (8002874 <HAL_UART_RxCpltCallback+0x8cc>)
 800278c:	f017 fa4c 	bl	8019c28 <puts>
		if (cadence <= 50000) {
 8002790:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_UART_RxCpltCallback+0x8d0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002798:	4293      	cmp	r3, r2
 800279a:	d85a      	bhi.n	8002852 <HAL_UART_RxCpltCallback+0x8aa>
			cadence *= 2;
 800279c:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_UART_RxCpltCallback+0x8d0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4a35      	ldr	r2, [pc, #212]	; (8002878 <HAL_UART_RxCpltCallback+0x8d0>)
 80027a4:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80027a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027aa:	4b33      	ldr	r3, [pc, #204]	; (8002878 <HAL_UART_RxCpltCallback+0x8d0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80027b0:	e04f      	b.n	8002852 <HAL_UART_RxCpltCallback+0x8aa>
	}
	case 0x0E: {
		printf("Factor Down\n");
 80027b2:	4832      	ldr	r0, [pc, #200]	; (800287c <HAL_UART_RxCpltCallback+0x8d4>)
 80027b4:	f017 fa38 	bl	8019c28 <puts>
		if (cadence >= 6250) {
 80027b8:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <HAL_UART_RxCpltCallback+0x8d0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f641 0269 	movw	r2, #6249	; 0x1869
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d948      	bls.n	8002856 <HAL_UART_RxCpltCallback+0x8ae>
			cadence /= 2;
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <HAL_UART_RxCpltCallback+0x8d0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	4a2b      	ldr	r2, [pc, #172]	; (8002878 <HAL_UART_RxCpltCallback+0x8d0>)
 80027cc:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80027ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <HAL_UART_RxCpltCallback+0x8d0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80027d8:	e03d      	b.n	8002856 <HAL_UART_RxCpltCallback+0x8ae>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 80027da:	4829      	ldr	r0, [pc, #164]	; (8002880 <HAL_UART_RxCpltCallback+0x8d8>)
 80027dc:	f017 fa24 	bl	8019c28 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80027e0:	4b28      	ldr	r3, [pc, #160]	; (8002884 <HAL_UART_RxCpltCallback+0x8dc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f013 ffde 	bl	80167a8 <osEventFlagsSet>
		break;
 80027ec:	e034      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80027ee:	4826      	ldr	r0, [pc, #152]	; (8002888 <HAL_UART_RxCpltCallback+0x8e0>)
 80027f0:	f017 fa1a 	bl	8019c28 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_UART_RxCpltCallback+0x8dc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2104      	movs	r1, #4
 80027fa:	4618      	mov	r0, r3
 80027fc:	f013 ffd4 	bl	80167a8 <osEventFlagsSet>
		break;
 8002800:	e02a      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8002802:	4822      	ldr	r0, [pc, #136]	; (800288c <HAL_UART_RxCpltCallback+0x8e4>)
 8002804:	f017 fa10 	bl	8019c28 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_UART_RxCpltCallback+0x8dc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2108      	movs	r1, #8
 800280e:	4618      	mov	r0, r3
 8002810:	f013 ffca 	bl	80167a8 <osEventFlagsSet>
		break;
 8002814:	e020      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xAF: {
		sync();
 8002816:	f000 f961 	bl	8002adc <sync>
		break;
 800281a:	e01d      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 800281c:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_UART_RxCpltCallback+0x8e8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2101      	movs	r1, #1
 8002822:	4618      	mov	r0, r3
 8002824:	f013 ffc0 	bl	80167a8 <osEventFlagsSet>
		break;
 8002828:	e016      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 800282a:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_UART_RxCpltCallback+0x8e8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2102      	movs	r1, #2
 8002830:	4618      	mov	r0, r3
 8002832:	f013 ffb9 	bl	80167a8 <osEventFlagsSet>
		break;
 8002836:	e00f      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0xDF: {
		reset_error_counters();
 8002838:	f7fe fdba 	bl	80013b0 <reset_error_counters>
		break;
 800283c:	e00c      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
		send_previous_error_packet();
#endif
		break;
	}
	default: {
		printf("Unknown Command\n");
 800283e:	4815      	ldr	r0, [pc, #84]	; (8002894 <HAL_UART_RxCpltCallback+0x8ec>)
 8002840:	f017 f9f2 	bl	8019c28 <puts>
		break;
 8002844:	e008      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
		break;
 8002846:	bf00      	nop
 8002848:	e006      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
		break;
 800284a:	bf00      	nop
 800284c:	e004      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
		break;
 800284e:	bf00      	nop
 8002850:	e002      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
		break;
 8002852:	bf00      	nop
 8002854:	e000      	b.n	8002858 <HAL_UART_RxCpltCallback+0x8b0>
		break;
 8002856:	bf00      	nop
	}
	}
}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	0801a72c 	.word	0x0801a72c
 8002864:	24001ae2 	.word	0x24001ae2
 8002868:	24000040 	.word	0x24000040
 800286c:	24000314 	.word	0x24000314
 8002870:	0801a734 	.word	0x0801a734
 8002874:	0801a740 	.word	0x0801a740
 8002878:	240000c0 	.word	0x240000c0
 800287c:	0801a74c 	.word	0x0801a74c
 8002880:	0801a758 	.word	0x0801a758
 8002884:	24001a98 	.word	0x24001a98
 8002888:	0801a768 	.word	0x0801a768
 800288c:	0801a774 	.word	0x0801a774
 8002890:	24001a9c 	.word	0x24001a9c
 8002894:	0801a780 	.word	0x0801a780

08002898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800289c:	f002 fc04 	bl	80050a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028a0:	f000 f826 	bl	80028f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80028a4:	f000 f8a6 	bl	80029f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028a8:	f7ff f972 	bl	8001b90 <MX_GPIO_Init>
  MX_DMA_Init();
 80028ac:	f7fe fa1c 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80028b0:	f002 f80e 	bl	80048d0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80028b4:	f7ff f9e6 	bl	8001c84 <MX_I2C1_Init>
  MX_SPI2_Init();
 80028b8:	f000 ff8e 	bl	80037d8 <MX_SPI2_Init>
  MX_TIM2_Init();
 80028bc:	f001 fc84 	bl	80041c8 <MX_TIM2_Init>
  MX_TIM1_Init();
 80028c0:	f001 fbd4 	bl	800406c <MX_TIM1_Init>
  MX_ADC3_Init();
 80028c4:	f7fd ffb0 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80028c8:	f7fd fe8c 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80028cc:	f7fe f958 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80028d0:	f000 ff2a 	bl	8003728 <MX_SPI1_Init>
  MX_RTC_Init();
 80028d4:	f000 fcf6 	bl	80032c4 <MX_RTC_Init>
  //MX_IWDG1_Init();
  MX_RAMECC_Init();
 80028d8:	f000 fbe0 	bl	800309c <MX_RAMECC_Init>
#ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
  	get_reset_cause();
#endif

  system_setup();
 80028dc:	f000 f8ba 	bl	8002a54 <system_setup>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80028e0:	f013 fdca 	bl	8016478 <osKernelInitialize>
  MX_FREERTOS_Init();
 80028e4:	f7fe fef8 	bl	80016d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80028e8:	f013 fdea 	bl	80164c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80028ec:	e7fe      	b.n	80028ec <main+0x54>
	...

080028f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b09c      	sub	sp, #112	; 0x70
 80028f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fa:	224c      	movs	r2, #76	; 0x4c
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f017 f91c 	bl	8019b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	2220      	movs	r2, #32
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f017 f916 	bl	8019b3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002910:	2002      	movs	r0, #2
 8002912:	f00a fc1d 	bl	800d150 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4b34      	ldr	r3, [pc, #208]	; (80029ec <SystemClock_Config+0xfc>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	4a33      	ldr	r2, [pc, #204]	; (80029ec <SystemClock_Config+0xfc>)
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002926:	4b31      	ldr	r3, [pc, #196]	; (80029ec <SystemClock_Config+0xfc>)
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <SystemClock_Config+0x100>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002938:	4a2d      	ldr	r2, [pc, #180]	; (80029f0 <SystemClock_Config+0x100>)
 800293a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293e:	6193      	str	r3, [r2, #24]
 8002940:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <SystemClock_Config+0x100>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800294c:	bf00      	nop
 800294e:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <SystemClock_Config+0x100>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295a:	d1f8      	bne.n	800294e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800295c:	230b      	movs	r3, #11
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8002966:	2309      	movs	r3, #9
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800296a:	2340      	movs	r3, #64	; 0x40
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800296e:	2301      	movs	r3, #1
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002972:	2302      	movs	r3, #2
 8002974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002976:	2302      	movs	r3, #2
 8002978:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800297a:	2304      	movs	r3, #4
 800297c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800297e:	2318      	movs	r3, #24
 8002980:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002982:	2302      	movs	r3, #2
 8002984:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002986:	2302      	movs	r3, #2
 8002988:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800298a:	2302      	movs	r3, #2
 800298c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800298e:	2308      	movs	r3, #8
 8002990:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8002992:	2302      	movs	r3, #2
 8002994:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800299a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299e:	4618      	mov	r0, r3
 80029a0:	f00a fd1c 	bl	800d3dc <HAL_RCC_OscConfig>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80029aa:	f000 f94f 	bl	8002c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ae:	233f      	movs	r3, #63	; 0x3f
 80029b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b2:	2303      	movs	r3, #3
 80029b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80029c2:	2340      	movs	r3, #64	; 0x40
 80029c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80029ca:	2300      	movs	r3, #0
 80029cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2101      	movs	r1, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f00b f95c 	bl	800dc90 <HAL_RCC_ClockConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80029de:	f000 f935 	bl	8002c4c <Error_Handler>
  }
}
 80029e2:	bf00      	nop
 80029e4:	3770      	adds	r7, #112	; 0x70
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	58000400 	.word	0x58000400
 80029f0:	58024800 	.word	0x58024800

080029f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b0b0      	sub	sp, #192	; 0xc0
 80029f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029fa:	463b      	mov	r3, r7
 80029fc:	22c0      	movs	r2, #192	; 0xc0
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f017 f89b 	bl	8019b3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002a12:	2304      	movs	r3, #4
 8002a14:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8002a16:	2318      	movs	r3, #24
 8002a18:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002a22:	2302      	movs	r3, #2
 8002a24:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a38:	463b      	mov	r3, r7
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f00b fcf6 	bl	800e42c <HAL_RCCEx_PeriphCLKConfig>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002a46:	f000 f901 	bl	8002c4c <Error_Handler>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	37c0      	adds	r7, #192	; 0xc0
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts



	packet_event_flags = osEventFlagsNew(NULL);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f013 fe66 	bl	801672a <osEventFlagsNew>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <system_setup+0x70>)
 8002a62:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <system_setup+0x70>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d100      	bne.n	8002a6e <system_setup+0x1a>
        while (1);
 8002a6c:	e7fe      	b.n	8002a6c <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f013 fe5b 	bl	801672a <osEventFlagsNew>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <system_setup+0x74>)
 8002a78:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <system_setup+0x74>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d100      	bne.n	8002a84 <system_setup+0x30>
        while (1);
 8002a82:	e7fe      	b.n	8002a82 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f013 fe50 	bl	801672a <osEventFlagsNew>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <system_setup+0x78>)
 8002a8e:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <system_setup+0x78>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d100      	bne.n	8002a9a <system_setup+0x46>
        while (1);
 8002a98:	e7fe      	b.n	8002a98 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 8002a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8002aa2:	210c      	movs	r1, #12
 8002aa4:	480a      	ldr	r0, [pc, #40]	; (8002ad0 <system_setup+0x7c>)
 8002aa6:	f00f fb4f 	bl	8012148 <HAL_TIM_OC_Start_IT>
	if (!voltage_monitor_init()) {
		while (1);
	}
#endif

	if (!init_adc_dma()) {
 8002aaa:	f000 fc9d 	bl	80033e8 <init_adc_dma>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d100      	bne.n	8002ab6 <system_setup+0x62>
		while (1);
 8002ab4:	e7fe      	b.n	8002ab4 <system_setup+0x60>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4906      	ldr	r1, [pc, #24]	; (8002ad4 <system_setup+0x80>)
 8002aba:	4807      	ldr	r0, [pc, #28]	; (8002ad8 <system_setup+0x84>)
 8002abc:	f011 f824 	bl	8013b08 <HAL_UART_Receive_IT>


}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	24001a94 	.word	0x24001a94
 8002ac8:	24001a98 	.word	0x24001a98
 8002acc:	24001a9c 	.word	0x24001a9c
 8002ad0:	24001ed0 	.word	0x24001ed0
 8002ad4:	24001aa0 	.word	0x24001aa0
 8002ad8:	24001f1c 	.word	0x24001f1c

08002adc <sync>:

void sync() {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
	send_ACK();
 8002ae2:	f000 f821 	bl	8002b28 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002ae6:	480e      	ldr	r0, [pc, #56]	; (8002b20 <sync+0x44>)
 8002ae8:	f011 f85a 	bl	8013ba0 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002aec:	2364      	movs	r3, #100	; 0x64
 8002aee:	2209      	movs	r2, #9
 8002af0:	490c      	ldr	r1, [pc, #48]	; (8002b24 <sync+0x48>)
 8002af2:	480b      	ldr	r0, [pc, #44]	; (8002b20 <sync+0x44>)
 8002af4:	f010 ff40 	bl	8013978 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <sync+0x48>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	2bff      	cmp	r3, #255	; 0xff
 8002b02:	d1f3      	bne.n	8002aec <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8002b04:	4807      	ldr	r0, [pc, #28]	; (8002b24 <sync+0x48>)
 8002b06:	f001 fe21 	bl	800474c <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4905      	ldr	r1, [pc, #20]	; (8002b24 <sync+0x48>)
 8002b0e:	4804      	ldr	r0, [pc, #16]	; (8002b20 <sync+0x44>)
 8002b10:	f010 fffa 	bl	8013b08 <HAL_UART_Receive_IT>
	send_error_counter_packet();
 8002b14:	f7fe fc6c 	bl	80013f0 <send_error_counter_packet>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	24001f1c 	.word	0x24001f1c
 8002b24:	24001aa0 	.word	0x24001aa0

08002b28 <send_ACK>:

void send_ACK() {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <send_ACK+0x1c>)
 8002b2e:	22ff      	movs	r2, #255	; 0xff
 8002b30:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002b32:	2364      	movs	r3, #100	; 0x64
 8002b34:	2201      	movs	r2, #1
 8002b36:	4903      	ldr	r1, [pc, #12]	; (8002b44 <send_ACK+0x1c>)
 8002b38:	4803      	ldr	r0, [pc, #12]	; (8002b48 <send_ACK+0x20>)
 8002b3a:	f010 fe8f 	bl	801385c <HAL_UART_Transmit>
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	24001aec 	.word	0x24001aec
 8002b48:	24001f1c 	.word	0x24001f1c

08002b4c <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8002b52:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <get_current_step+0xc0>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d04a      	beq.n	8002bf8 <get_current_step+0xac>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	da48      	bge.n	8002bfc <get_current_step+0xb0>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d03f      	beq.n	8002bf4 <get_current_step+0xa8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	dc3e      	bgt.n	8002bfc <get_current_step+0xb0>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d033      	beq.n	8002bf0 <get_current_step+0xa4>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002b8e:	da35      	bge.n	8002bfc <get_current_step+0xb0>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d028      	beq.n	8002bec <get_current_step+0xa0>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	dc2b      	bgt.n	8002bfc <get_current_step+0xb0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f240 7245 	movw	r2, #1861	; 0x745
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01c      	beq.n	8002be8 <get_current_step+0x9c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f240 7245 	movw	r2, #1861	; 0x745
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	dc21      	bgt.n	8002bfc <get_current_step+0xb0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d010      	beq.n	8002be4 <get_current_step+0x98>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	dc17      	bgt.n	8002bfc <get_current_step+0xb0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <get_current_step+0x90>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002bd8:	d002      	beq.n	8002be0 <get_current_step+0x94>
 8002bda:	e00f      	b.n	8002bfc <get_current_step+0xb0>
	case 0:
		return 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e00e      	b.n	8002bfe <get_current_step+0xb2>
	case 620:
		return 1;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e00c      	b.n	8002bfe <get_current_step+0xb2>
	case 1241:
		return 2;
 8002be4:	2302      	movs	r3, #2
 8002be6:	e00a      	b.n	8002bfe <get_current_step+0xb2>
	case 1861:
		return 3;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e008      	b.n	8002bfe <get_current_step+0xb2>
	case 2482:
		return 4;
 8002bec:	2304      	movs	r3, #4
 8002bee:	e006      	b.n	8002bfe <get_current_step+0xb2>
	case 3103:
		return 5;
 8002bf0:	2305      	movs	r3, #5
 8002bf2:	e004      	b.n	8002bfe <get_current_step+0xb2>
	case 3723:
		return 6;
 8002bf4:	2306      	movs	r3, #6
 8002bf6:	e002      	b.n	8002bfe <get_current_step+0xb2>
	case 4095:
		return 7;
 8002bf8:	2307      	movs	r3, #7
 8002bfa:	e000      	b.n	8002bfe <get_current_step+0xb2>
	default:
		return -1;
 8002bfc:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40007400 	.word	0x40007400

08002c10 <enter_stop>:

void enter_stop() {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
	  send_ACK();
 8002c14:	f7ff ff88 	bl	8002b28 <send_ACK>

	  vTaskSuspendAll();
 8002c18:	f015 fa24 	bl	8018064 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f00a fa5a 	bl	800d0d8 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8002c24:	f7ff f94e 	bl	8001ec4 <__NVIC_SystemReset>

08002c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c3a:	f002 fa71 	bl	8005120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40001000 	.word	0x40001000

08002c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8002c52:	2302      	movs	r3, #2
 8002c54:	703b      	strb	r3, [r7, #0]
	error.detail = ED_UNDEFINED;
 8002c56:	231c      	movs	r3, #28
 8002c58:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8002c5a:	463b      	mov	r3, r7
 8002c5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c60:	f7fe fb9a 	bl	8001398 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002c72:	bf00      	nop
 8002c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c78:	481c      	ldr	r0, [pc, #112]	; (8002cec <create_pmt_packet+0x80>)
 8002c7a:	f007 fe6d 	bl	800a958 <HAL_GPIO_ReadPin>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f7      	bne.n	8002c74 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 fbd6 	bl	8004438 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8002c8c:	f107 0308 	add.w	r3, r7, #8
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fbfd 	bl	8003490 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8002c96:	23ff      	movs	r3, #255	; 0xff
 8002c98:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8002c9a:	23ff      	movs	r3, #255	; 0xff
 8002c9c:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <create_pmt_packet+0x84>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <create_pmt_packet+0x84>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8002cb2:	7a3b      	ldrb	r3, [r7, #8]
 8002cb4:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8002cb6:	7a7b      	ldrb	r3, [r7, #9]
 8002cb8:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8002cba:	793b      	ldrb	r3, [r7, #4]
 8002cbc:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8002cbe:	797b      	ldrb	r3, [r7, #5]
 8002cc0:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8002cc2:	79bb      	ldrb	r3, [r7, #6]
 8002cc4:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8002cca:	f107 010c 	add.w	r1, r7, #12
 8002cce:	2364      	movs	r3, #100	; 0x64
 8002cd0:	220a      	movs	r2, #10
 8002cd2:	4808      	ldr	r0, [pc, #32]	; (8002cf4 <create_pmt_packet+0x88>)
 8002cd4:	f010 fdc2 	bl	801385c <HAL_UART_Transmit>

	pmt_seq++;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <create_pmt_packet+0x84>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <create_pmt_packet+0x84>)
 8002ce2:	801a      	strh	r2, [r3, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	58020000 	.word	0x58020000
 8002cf0:	24001aee 	.word	0x24001aee
 8002cf4:	24001f1c 	.word	0x24001f1c

08002cf8 <create_erpa_packet>:


void create_erpa_packet() {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002cfe:	bf00      	nop
 8002d00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d04:	4828      	ldr	r0, [pc, #160]	; (8002da8 <create_erpa_packet+0xb0>)
 8002d06:	f007 fe27 	bl	800a958 <HAL_GPIO_ReadPin>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f7      	bne.n	8002d00 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8002d10:	23ff      	movs	r3, #255	; 0xff
 8002d12:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fb8e 	bl	8004438 <get_uptime>
	sweep_step = get_current_step();
 8002d1c:	f7ff ff16 	bl	8002b4c <get_current_step>
 8002d20:	4603      	mov	r3, r0
 8002d22:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fbd1 	bl	80034d0 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002d2e:	f107 0308 	add.w	r3, r7, #8
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fbec 	bl	8003510 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002d38:	23ee      	movs	r3, #238	; 0xee
 8002d3a:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8002d3c:	23ee      	movs	r3, #238	; 0xee
 8002d3e:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002d40:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <create_erpa_packet+0xb4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <create_erpa_packet+0xb4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <create_erpa_packet+0xb4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8002d5c:	7ffb      	ldrb	r3, [r7, #31]
 8002d5e:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002d6a:	893b      	ldrh	r3, [r7, #8]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002d70:	7b3b      	ldrb	r3, [r7, #12]
 8002d72:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002d74:	7b7b      	ldrb	r3, [r7, #13]
 8002d76:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8002d78:	793b      	ldrb	r3, [r7, #4]
 8002d7a:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8002d7c:	797b      	ldrb	r3, [r7, #5]
 8002d7e:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8002d80:	79bb      	ldrb	r3, [r7, #6]
 8002d82:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8002d88:	f107 0110 	add.w	r1, r7, #16
 8002d8c:	2364      	movs	r3, #100	; 0x64
 8002d8e:	220e      	movs	r2, #14
 8002d90:	4807      	ldr	r0, [pc, #28]	; (8002db0 <create_erpa_packet+0xb8>)
 8002d92:	f010 fd63 	bl	801385c <HAL_UART_Transmit>

	erpa_seq++;
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <create_erpa_packet+0xb4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4a03      	ldr	r2, [pc, #12]	; (8002dac <create_erpa_packet+0xb4>)
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	58020400 	.word	0x58020400
 8002dac:	24001af0 	.word	0x24001af0
 8002db0:	24001f1c 	.word	0x24001f1c

08002db4 <create_hk_packet>:


void create_hk_packet() {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b092      	sub	sp, #72	; 0x48
 8002db8:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fb3b 	bl	8004438 <get_uptime>
	get_unix_time(timestamp);
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f001 fb86 	bl	80044d8 <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8002dcc:	f001 ff0a 	bl	8004be4 <get_rail_monitor>
 8002dd0:	6478      	str	r0, [r7, #68]	; 0x44


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002dd2:	23dd      	movs	r3, #221	; 0xdd
 8002dd4:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002dd6:	23dd      	movs	r3, #221	; 0xdd
 8002dd8:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002dda:	4b95      	ldr	r3, [pc, #596]	; (8003030 <create_hk_packet+0x27c>)
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	74bb      	strb	r3, [r7, #18]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002de6:	4b92      	ldr	r3, [pc, #584]	; (8003030 <create_hk_packet+0x27c>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	74fb      	strb	r3, [r7, #19]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df0:	889b      	ldrh	r3, [r3, #4]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	753b      	strb	r3, [r7, #20]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfc:	889b      	ldrh	r3, [r3, #4]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e04:	3310      	adds	r3, #16
 8002e06:	889b      	ldrh	r3, [r3, #4]
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	3310      	adds	r3, #16
 8002e14:	889b      	ldrh	r3, [r3, #4]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	75fb      	strb	r3, [r7, #23]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1c:	3320      	adds	r3, #32
 8002e1e:	889b      	ldrh	r3, [r3, #4]
 8002e20:	0a1b      	lsrs	r3, r3, #8
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	763b      	strb	r3, [r7, #24]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8002e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2a:	3320      	adds	r3, #32
 8002e2c:	889b      	ldrh	r3, [r3, #4]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e34:	3330      	adds	r3, #48	; 0x30
 8002e36:	889b      	ldrh	r3, [r3, #4]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8002e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e42:	3330      	adds	r3, #48	; 0x30
 8002e44:	889b      	ldrh	r3, [r3, #4]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4c:	3340      	adds	r3, #64	; 0x40
 8002e4e:	889b      	ldrh	r3, [r3, #4]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	773b      	strb	r3, [r7, #28]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8002e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5a:	3340      	adds	r3, #64	; 0x40
 8002e5c:	889b      	ldrh	r3, [r3, #4]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e64:	3350      	adds	r3, #80	; 0x50
 8002e66:	889b      	ldrh	r3, [r3, #4]
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8002e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e72:	3350      	adds	r3, #80	; 0x50
 8002e74:	889b      	ldrh	r3, [r3, #4]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7c:	3360      	adds	r3, #96	; 0x60
 8002e7e:	889b      	ldrh	r3, [r3, #4]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8002e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8c:	3360      	adds	r3, #96	; 0x60
 8002e8e:	889b      	ldrh	r3, [r3, #4]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e98:	3370      	adds	r3, #112	; 0x70
 8002e9a:	889b      	ldrh	r3, [r3, #4]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8002ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea8:	3370      	adds	r3, #112	; 0x70
 8002eaa:	889b      	ldrh	r3, [r3, #4]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb4:	3380      	adds	r3, #128	; 0x80
 8002eb6:	889b      	ldrh	r3, [r3, #4]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8002ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec4:	3380      	adds	r3, #128	; 0x80
 8002ec6:	889b      	ldrh	r3, [r3, #4]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed0:	3390      	adds	r3, #144	; 0x90
 8002ed2:	889b      	ldrh	r3, [r3, #4]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8002ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee0:	3390      	adds	r3, #144	; 0x90
 8002ee2:	889b      	ldrh	r3, [r3, #4]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eec:	33a0      	adds	r3, #160	; 0xa0
 8002eee:	889b      	ldrh	r3, [r3, #4]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8002efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002efc:	33a0      	adds	r3, #160	; 0xa0
 8002efe:	889b      	ldrh	r3, [r3, #4]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f08:	33b0      	adds	r3, #176	; 0xb0
 8002f0a:	889b      	ldrh	r3, [r3, #4]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8002f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f18:	33b0      	adds	r3, #176	; 0xb0
 8002f1a:	889b      	ldrh	r3, [r3, #4]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8002f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f24:	33c0      	adds	r3, #192	; 0xc0
 8002f26:	889b      	ldrh	r3, [r3, #4]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8002f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f34:	33c0      	adds	r3, #192	; 0xc0
 8002f36:	889b      	ldrh	r3, [r3, #4]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8002f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f40:	33d0      	adds	r3, #208	; 0xd0
 8002f42:	889b      	ldrh	r3, [r3, #4]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8002f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f50:	33d0      	adds	r3, #208	; 0xd0
 8002f52:	889b      	ldrh	r3, [r3, #4]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5c:	33e0      	adds	r3, #224	; 0xe0
 8002f5e:	889b      	ldrh	r3, [r3, #4]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8002f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6c:	33e0      	adds	r3, #224	; 0xe0
 8002f6e:	889b      	ldrh	r3, [r3, #4]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8002f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f78:	33f0      	adds	r3, #240	; 0xf0
 8002f7a:	889b      	ldrh	r3, [r3, #4]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8002f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f88:	33f0      	adds	r3, #240	; 0xf0
 8002f8a:	889b      	ldrh	r3, [r3, #4]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8002f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f98:	889b      	ldrh	r3, [r3, #4]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002faa:	889b      	ldrh	r3, [r3, #4]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002fb8:	889b      	ldrh	r3, [r3, #4]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8002fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002fca:	889b      	ldrh	r3, [r3, #4]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = timestamp[0];
 8002fd2:	7a3b      	ldrb	r3, [r7, #8]
 8002fd4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = timestamp[1];
 8002fd8:	7a7b      	ldrb	r3, [r7, #9]
 8002fda:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = timestamp[2];
 8002fde:	7abb      	ldrb	r3, [r7, #10]
 8002fe0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = timestamp[3];
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
 8002fe6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = timestamp[4];
 8002fea:	7b3b      	ldrb	r3, [r7, #12]
 8002fec:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = timestamp[5];
 8002ff0:	7b7b      	ldrb	r3, [r7, #13]
 8002ff2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = uptime[0];
 8002ff6:	793b      	ldrb	r3, [r7, #4]
 8002ff8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = uptime[1];
 8002ffc:	797b      	ldrb	r3, [r7, #5]
 8002ffe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = uptime[2];
 8003002:	79bb      	ldrb	r3, [r7, #6]
 8003004:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = uptime[3];
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 800300e:	f107 0110 	add.w	r1, r7, #16
 8003012:	2364      	movs	r3, #100	; 0x64
 8003014:	2232      	movs	r2, #50	; 0x32
 8003016:	4807      	ldr	r0, [pc, #28]	; (8003034 <create_hk_packet+0x280>)
 8003018:	f010 fc20 	bl	801385c <HAL_UART_Transmit>

	hk_seq++;
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <create_hk_packet+0x27c>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	3301      	adds	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	4b02      	ldr	r3, [pc, #8]	; (8003030 <create_hk_packet+0x27c>)
 8003026:	801a      	strh	r2, [r3, #0]
}
 8003028:	bf00      	nop
 800302a:	3748      	adds	r7, #72	; 0x48
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	24001af4 	.word	0x24001af4
 8003034:	24001f1c 	.word	0x24001f1c

08003038 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <reset_packet_sequence_numbers+0x20>)
 800303e:	2200      	movs	r2, #0
 8003040:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <reset_packet_sequence_numbers+0x24>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <reset_packet_sequence_numbers+0x28>)
 800304a:	2200      	movs	r2, #0
 800304c:	801a      	strh	r2, [r3, #0]
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	24001aee 	.word	0x24001aee
 800305c:	24001af0 	.word	0x24001af0
 8003060:	24001af4 	.word	0x24001af4

08003064 <RAMECC_Init_Helper>:

/* USER CODE BEGIN 0 */
__IO uint32_t RAMECCSingleErrorDetected = 0U;
__IO uint32_t RAMECCDoubleErrorDetected = 0U;

void RAMECC_Init_Helper(RAMECC_HandleTypeDef* hramecc) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

	if (HAL_RAMECC_EnableNotification(hramecc, (RAMECC_IT_MONITOR_SINGLEERR_R | RAMECC_IT_MONITOR_DOUBLEERR_R)) != HAL_OK)
 800306c:	490a      	ldr	r1, [pc, #40]	; (8003098 <RAMECC_Init_Helper+0x34>)
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f00a f90c 	bl	800d28c <HAL_RAMECC_EnableNotification>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <RAMECC_Init_Helper+0x1a>
	{
	  Error_Handler();
 800307a:	f7ff fde7 	bl	8002c4c <Error_Handler>
	}
	if (HAL_RAMECC_StartMonitor(hramecc) != HAL_OK)
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f00a f8e0 	bl	800d244 <HAL_RAMECC_StartMonitor>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <RAMECC_Init_Helper+0x2a>
	{
	  Error_Handler();
 800308a:	f7ff fddf 	bl	8002c4c <Error_Handler>
	}
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2000000c 	.word	0x2000000c

0800309c <MX_RAMECC_Init>:
RAMECC_HandleTypeDef hramecc3_m1;
RAMECC_HandleTypeDef hramecc3_m2;

/* RAMECC init function */
void MX_RAMECC_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0

  /* USER CODE END RAMECC_Init 1 */

  /** Initialize RAMECC1 M1 : AXI SRAM
  */
  hramecc1_m1.Instance = RAMECC1_Monitor1;
 80030a0:	4b58      	ldr	r3, [pc, #352]	; (8003204 <MX_RAMECC_Init+0x168>)
 80030a2:	4a59      	ldr	r2, [pc, #356]	; (8003208 <MX_RAMECC_Init+0x16c>)
 80030a4:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m1) != HAL_OK)
 80030a6:	4857      	ldr	r0, [pc, #348]	; (8003204 <MX_RAMECC_Init+0x168>)
 80030a8:	f00a f88c 	bl	800d1c4 <HAL_RAMECC_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_RAMECC_Init+0x1a>
  {
    Error_Handler();
 80030b2:	f7ff fdcb 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC1 M2 : ITCM-RAM
  */
  hramecc1_m2.Instance = RAMECC1_Monitor2;
 80030b6:	4b55      	ldr	r3, [pc, #340]	; (800320c <MX_RAMECC_Init+0x170>)
 80030b8:	4a55      	ldr	r2, [pc, #340]	; (8003210 <MX_RAMECC_Init+0x174>)
 80030ba:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m2) != HAL_OK)
 80030bc:	4853      	ldr	r0, [pc, #332]	; (800320c <MX_RAMECC_Init+0x170>)
 80030be:	f00a f881 	bl	800d1c4 <HAL_RAMECC_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_RAMECC_Init+0x30>
  {
    Error_Handler();
 80030c8:	f7ff fdc0 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC1 M3 : D0TCM-RAM
  */
  hramecc1_m3.Instance = RAMECC1_Monitor3;
 80030cc:	4b51      	ldr	r3, [pc, #324]	; (8003214 <MX_RAMECC_Init+0x178>)
 80030ce:	4a52      	ldr	r2, [pc, #328]	; (8003218 <MX_RAMECC_Init+0x17c>)
 80030d0:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m3) != HAL_OK)
 80030d2:	4850      	ldr	r0, [pc, #320]	; (8003214 <MX_RAMECC_Init+0x178>)
 80030d4:	f00a f876 	bl	800d1c4 <HAL_RAMECC_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_RAMECC_Init+0x46>
  {
    Error_Handler();
 80030de:	f7ff fdb5 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC1 M4 : D1TCM-RAM
  */
  hramecc1_m4.Instance = RAMECC1_Monitor4;
 80030e2:	4b4e      	ldr	r3, [pc, #312]	; (800321c <MX_RAMECC_Init+0x180>)
 80030e4:	4a4e      	ldr	r2, [pc, #312]	; (8003220 <MX_RAMECC_Init+0x184>)
 80030e6:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m4) != HAL_OK)
 80030e8:	484c      	ldr	r0, [pc, #304]	; (800321c <MX_RAMECC_Init+0x180>)
 80030ea:	f00a f86b 	bl	800d1c4 <HAL_RAMECC_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_RAMECC_Init+0x5c>
  {
    Error_Handler();
 80030f4:	f7ff fdaa 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC1 M5 : ETM RAM
  */
  hramecc1_m5.Instance = RAMECC1_Monitor5;
 80030f8:	4b4a      	ldr	r3, [pc, #296]	; (8003224 <MX_RAMECC_Init+0x188>)
 80030fa:	4a4b      	ldr	r2, [pc, #300]	; (8003228 <MX_RAMECC_Init+0x18c>)
 80030fc:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m5) != HAL_OK)
 80030fe:	4849      	ldr	r0, [pc, #292]	; (8003224 <MX_RAMECC_Init+0x188>)
 8003100:	f00a f860 	bl	800d1c4 <HAL_RAMECC_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_RAMECC_Init+0x72>
  {
    Error_Handler();
 800310a:	f7ff fd9f 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <MX_RAMECC_Init+0x190>)
 8003110:	4a47      	ldr	r2, [pc, #284]	; (8003230 <MX_RAMECC_Init+0x194>)
 8003112:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 8003114:	4845      	ldr	r0, [pc, #276]	; (800322c <MX_RAMECC_Init+0x190>)
 8003116:	f00a f855 	bl	800d1c4 <HAL_RAMECC_Init>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_RAMECC_Init+0x88>
  {
    Error_Handler();
 8003120:	f7ff fd94 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC2 M2 SRAM1_1
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 8003124:	4b43      	ldr	r3, [pc, #268]	; (8003234 <MX_RAMECC_Init+0x198>)
 8003126:	4a44      	ldr	r2, [pc, #272]	; (8003238 <MX_RAMECC_Init+0x19c>)
 8003128:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 800312a:	4842      	ldr	r0, [pc, #264]	; (8003234 <MX_RAMECC_Init+0x198>)
 800312c:	f00a f84a 	bl	800d1c4 <HAL_RAMECC_Init>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_RAMECC_Init+0x9e>
  {
    Error_Handler();
 8003136:	f7ff fd89 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC2 M3 : SRAM2_0
  */
  hramecc2_m3.Instance = RAMECC2_Monitor3;
 800313a:	4b40      	ldr	r3, [pc, #256]	; (800323c <MX_RAMECC_Init+0x1a0>)
 800313c:	4a40      	ldr	r2, [pc, #256]	; (8003240 <MX_RAMECC_Init+0x1a4>)
 800313e:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m3) != HAL_OK)
 8003140:	483e      	ldr	r0, [pc, #248]	; (800323c <MX_RAMECC_Init+0x1a0>)
 8003142:	f00a f83f 	bl	800d1c4 <HAL_RAMECC_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_RAMECC_Init+0xb4>
  {
    Error_Handler();
 800314c:	f7ff fd7e 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC2 M4 : SRAM2_1
  */
  hramecc2_m4.Instance = RAMECC2_Monitor4;
 8003150:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <MX_RAMECC_Init+0x1a8>)
 8003152:	4a3d      	ldr	r2, [pc, #244]	; (8003248 <MX_RAMECC_Init+0x1ac>)
 8003154:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m4) != HAL_OK)
 8003156:	483b      	ldr	r0, [pc, #236]	; (8003244 <MX_RAMECC_Init+0x1a8>)
 8003158:	f00a f834 	bl	800d1c4 <HAL_RAMECC_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_RAMECC_Init+0xca>
  {
    Error_Handler();
 8003162:	f7ff fd73 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC2 M5 : SRAM3
  */
  hramecc2_m5.Instance = RAMECC2_Monitor5;
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <MX_RAMECC_Init+0x1b0>)
 8003168:	4a39      	ldr	r2, [pc, #228]	; (8003250 <MX_RAMECC_Init+0x1b4>)
 800316a:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m5) != HAL_OK)
 800316c:	4837      	ldr	r0, [pc, #220]	; (800324c <MX_RAMECC_Init+0x1b0>)
 800316e:	f00a f829 	bl	800d1c4 <HAL_RAMECC_Init>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_RAMECC_Init+0xe0>
  {
    Error_Handler();
 8003178:	f7ff fd68 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 800317c:	4b35      	ldr	r3, [pc, #212]	; (8003254 <MX_RAMECC_Init+0x1b8>)
 800317e:	4a36      	ldr	r2, [pc, #216]	; (8003258 <MX_RAMECC_Init+0x1bc>)
 8003180:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 8003182:	4834      	ldr	r0, [pc, #208]	; (8003254 <MX_RAMECC_Init+0x1b8>)
 8003184:	f00a f81e 	bl	800d1c4 <HAL_RAMECC_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_RAMECC_Init+0xf6>
  {
    Error_Handler();
 800318e:	f7ff fd5d 	bl	8002c4c <Error_Handler>
  }

  /** Initialize RAMECC3 M2 : Backup RAM
  */
  hramecc3_m2.Instance = RAMECC3_Monitor2;
 8003192:	4b32      	ldr	r3, [pc, #200]	; (800325c <MX_RAMECC_Init+0x1c0>)
 8003194:	4a32      	ldr	r2, [pc, #200]	; (8003260 <MX_RAMECC_Init+0x1c4>)
 8003196:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m2) != HAL_OK)
 8003198:	4830      	ldr	r0, [pc, #192]	; (800325c <MX_RAMECC_Init+0x1c0>)
 800319a:	f00a f813 	bl	800d1c4 <HAL_RAMECC_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_RAMECC_Init+0x10c>
  {
    Error_Handler();
 80031a4:	f7ff fd52 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */
  RAMECC_Init_Helper(&hramecc1_m1);
 80031a8:	4816      	ldr	r0, [pc, #88]	; (8003204 <MX_RAMECC_Init+0x168>)
 80031aa:	f7ff ff5b 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc1_m2);
 80031ae:	4817      	ldr	r0, [pc, #92]	; (800320c <MX_RAMECC_Init+0x170>)
 80031b0:	f7ff ff58 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc1_m3);
 80031b4:	4817      	ldr	r0, [pc, #92]	; (8003214 <MX_RAMECC_Init+0x178>)
 80031b6:	f7ff ff55 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc1_m4);
 80031ba:	4818      	ldr	r0, [pc, #96]	; (800321c <MX_RAMECC_Init+0x180>)
 80031bc:	f7ff ff52 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc1_m5);
 80031c0:	4818      	ldr	r0, [pc, #96]	; (8003224 <MX_RAMECC_Init+0x188>)
 80031c2:	f7ff ff4f 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc2_m1);
 80031c6:	4819      	ldr	r0, [pc, #100]	; (800322c <MX_RAMECC_Init+0x190>)
 80031c8:	f7ff ff4c 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc2_m2);
 80031cc:	4819      	ldr	r0, [pc, #100]	; (8003234 <MX_RAMECC_Init+0x198>)
 80031ce:	f7ff ff49 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc2_m3);
 80031d2:	481a      	ldr	r0, [pc, #104]	; (800323c <MX_RAMECC_Init+0x1a0>)
 80031d4:	f7ff ff46 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc2_m4);
 80031d8:	481a      	ldr	r0, [pc, #104]	; (8003244 <MX_RAMECC_Init+0x1a8>)
 80031da:	f7ff ff43 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc2_m5);
 80031de:	481b      	ldr	r0, [pc, #108]	; (800324c <MX_RAMECC_Init+0x1b0>)
 80031e0:	f7ff ff40 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc3_m1);
 80031e4:	481b      	ldr	r0, [pc, #108]	; (8003254 <MX_RAMECC_Init+0x1b8>)
 80031e6:	f7ff ff3d 	bl	8003064 <RAMECC_Init_Helper>
  RAMECC_Init_Helper(&hramecc3_m2);
 80031ea:	481c      	ldr	r0, [pc, #112]	; (800325c <MX_RAMECC_Init+0x1c0>)
 80031ec:	f7ff ff3a 	bl	8003064 <RAMECC_Init_Helper>
  // Set the priority level
  HAL_NVIC_SetPriority(ECC_IRQn, 0, 0);
 80031f0:	2200      	movs	r2, #0
 80031f2:	2100      	movs	r1, #0
 80031f4:	2091      	movs	r0, #145	; 0x91
 80031f6:	f003 fca1 	bl	8006b3c <HAL_NVIC_SetPriority>
  // Enable the interrupt
  HAL_NVIC_EnableIRQ(ECC_IRQn);
 80031fa:	2091      	movs	r0, #145	; 0x91
 80031fc:	f003 fcb8 	bl	8006b70 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RAMECC_Init 2 */

}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}
 8003204:	24001b10 	.word	0x24001b10
 8003208:	52009020 	.word	0x52009020
 800320c:	24001b20 	.word	0x24001b20
 8003210:	52009040 	.word	0x52009040
 8003214:	24001b30 	.word	0x24001b30
 8003218:	52009060 	.word	0x52009060
 800321c:	24001b40 	.word	0x24001b40
 8003220:	52009080 	.word	0x52009080
 8003224:	24001b50 	.word	0x24001b50
 8003228:	520090a0 	.word	0x520090a0
 800322c:	24001b60 	.word	0x24001b60
 8003230:	48023020 	.word	0x48023020
 8003234:	24001b70 	.word	0x24001b70
 8003238:	48023040 	.word	0x48023040
 800323c:	24001b80 	.word	0x24001b80
 8003240:	48023060 	.word	0x48023060
 8003244:	24001b90 	.word	0x24001b90
 8003248:	48023080 	.word	0x48023080
 800324c:	24001ba0 	.word	0x24001ba0
 8003250:	480230a0 	.word	0x480230a0
 8003254:	24001bb0 	.word	0x24001bb0
 8003258:	58027020 	.word	0x58027020
 800325c:	24001bc0 	.word	0x24001bc0
 8003260:	58027040 	.word	0x58027040

08003264 <HAL_RAMECC_DetectErrorCallback>:
  * @brief  Single or double ECC error detected callback.
  * @param  hramecc : RAMECC handle
  * @retval None
  */
void HAL_RAMECC_DetectErrorCallback(RAMECC_HandleTypeDef *hramecc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_SINGLEERROR_DETECTED)  != 0U)
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f00a f8a9 	bl	800d3c4 <HAL_RAMECC_GetRAMECCError>
 8003272:	4603      	mov	r3, r0
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <HAL_RAMECC_DetectErrorCallback+0x22>
  {
    RAMECCSingleErrorDetected ++;
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_RAMECC_DetectErrorCallback+0x54>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <HAL_RAMECC_DetectErrorCallback+0x54>)
 8003284:	6013      	str	r3, [r2, #0]
  }

  if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_DOUBLEERROR_DETECTED)  != 0U)
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f00a f89c 	bl	800d3c4 <HAL_RAMECC_GetRAMECCError>
 800328c:	4603      	mov	r3, r0
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <HAL_RAMECC_DetectErrorCallback+0x3c>
  {
    RAMECCDoubleErrorDetected ++;
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RAMECC_DetectErrorCallback+0x58>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	4a07      	ldr	r2, [pc, #28]	; (80032bc <HAL_RAMECC_DetectErrorCallback+0x58>)
 800329e:	6013      	str	r3, [r2, #0]
  }

  hramecc->RAMECCErrorCode = HAL_RAMECC_NO_ERROR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80032a6:	2102      	movs	r1, #2
 80032a8:	4805      	ldr	r0, [pc, #20]	; (80032c0 <HAL_RAMECC_DetectErrorCallback+0x5c>)
 80032aa:	f007 fb86 	bl	800a9ba <HAL_GPIO_TogglePin>
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	24001af8 	.word	0x24001af8
 80032bc:	24001afc 	.word	0x24001afc
 80032c0:	58021000 	.word	0x58021000

080032c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80032d8:	2300      	movs	r3, #0
 80032da:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <MX_RTC_Init+0xb4>)
 80032de:	4a27      	ldr	r2, [pc, #156]	; (800337c <MX_RTC_Init+0xb8>)
 80032e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80032e2:	4b25      	ldr	r3, [pc, #148]	; (8003378 <MX_RTC_Init+0xb4>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80032e8:	4b23      	ldr	r3, [pc, #140]	; (8003378 <MX_RTC_Init+0xb4>)
 80032ea:	2263      	movs	r2, #99	; 0x63
 80032ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80032ee:	4b22      	ldr	r3, [pc, #136]	; (8003378 <MX_RTC_Init+0xb4>)
 80032f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80032f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <MX_RTC_Init+0xb4>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032fc:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <MX_RTC_Init+0xb4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <MX_RTC_Init+0xb4>)
 8003304:	2200      	movs	r2, #0
 8003306:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <MX_RTC_Init+0xb4>)
 800330a:	2200      	movs	r2, #0
 800330c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800330e:	481a      	ldr	r0, [pc, #104]	; (8003378 <MX_RTC_Init+0xb4>)
 8003310:	f00d fd8a 	bl	8010e28 <HAL_RTC_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800331a:	f7ff fc97 	bl	8002c4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800331e:	2300      	movs	r3, #0
 8003320:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003322:	2300      	movs	r3, #0
 8003324:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003326:	2300      	movs	r3, #0
 8003328:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	2201      	movs	r2, #1
 8003336:	4619      	mov	r1, r3
 8003338:	480f      	ldr	r0, [pc, #60]	; (8003378 <MX_RTC_Init+0xb4>)
 800333a:	f00d fdf7 	bl	8010f2c <HAL_RTC_SetTime>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003344:	f7ff fc82 	bl	8002c4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003348:	2301      	movs	r3, #1
 800334a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800334c:	2301      	movs	r3, #1
 800334e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003350:	2301      	movs	r3, #1
 8003352:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003354:	2300      	movs	r3, #0
 8003356:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003358:	463b      	mov	r3, r7
 800335a:	2201      	movs	r2, #1
 800335c:	4619      	mov	r1, r3
 800335e:	4806      	ldr	r0, [pc, #24]	; (8003378 <MX_RTC_Init+0xb4>)
 8003360:	f00d fede 	bl	8011120 <HAL_RTC_SetDate>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800336a:	f7ff fc6f 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800336e:	bf00      	nop
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	24001bd0 	.word	0x24001bd0
 800337c:	58004000 	.word	0x58004000

08003380 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b0b2      	sub	sp, #200	; 0xc8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003388:	f107 0308 	add.w	r3, r7, #8
 800338c:	22c0      	movs	r2, #192	; 0xc0
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f016 fbd3 	bl	8019b3c <memset>
  if(rtcHandle->Instance==RTC)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a10      	ldr	r2, [pc, #64]	; (80033dc <HAL_RTC_MspInit+0x5c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d118      	bne.n	80033d2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <HAL_RTC_MspInit+0x60>)
 80033ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033b2:	f107 0308 	add.w	r3, r7, #8
 80033b6:	4618      	mov	r0, r3
 80033b8:	f00b f838 	bl	800e42c <HAL_RCCEx_PeriphCLKConfig>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80033c2:	f7ff fc43 	bl	8002c4c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RTC_MspInit+0x64>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a06      	ldr	r2, [pc, #24]	; (80033e4 <HAL_RTC_MspInit+0x64>)
 80033cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80033d2:	bf00      	nop
 80033d4:	37c8      	adds	r7, #200	; 0xc8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	58004000 	.word	0x58004000
 80033e0:	00019300 	.word	0x00019300
 80033e4:	58024400 	.word	0x58024400

080033e8 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80033f2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80033f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033fa:	481f      	ldr	r0, [pc, #124]	; (8003478 <init_adc_dma+0x90>)
 80033fc:	f003 f9a4 	bl	8006748 <HAL_ADCEx_Calibration_Start>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003406:	f7ff fc21 	bl	8002c4c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800340a:	220b      	movs	r2, #11
 800340c:	491b      	ldr	r1, [pc, #108]	; (800347c <init_adc_dma+0x94>)
 800340e:	481a      	ldr	r0, [pc, #104]	; (8003478 <init_adc_dma+0x90>)
 8003410:	f002 fa78 	bl	8005904 <HAL_ADC_Start_DMA>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800341a:	f7ff fc17 	bl	8002c4c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800341e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003426:	4816      	ldr	r0, [pc, #88]	; (8003480 <init_adc_dma+0x98>)
 8003428:	f003 f98e 	bl	8006748 <HAL_ADCEx_Calibration_Start>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003432:	f7ff fc0b 	bl	8002c4c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003436:	2204      	movs	r2, #4
 8003438:	4912      	ldr	r1, [pc, #72]	; (8003484 <init_adc_dma+0x9c>)
 800343a:	4811      	ldr	r0, [pc, #68]	; (8003480 <init_adc_dma+0x98>)
 800343c:	f002 fa62 	bl	8005904 <HAL_ADC_Start_DMA>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003446:	f7ff fc01 	bl	8002c4c <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 800344a:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <init_adc_dma+0xa0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <init_adc_dma+0xa0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003458:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <init_adc_dma+0xa4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b0a      	ldr	r3, [pc, #40]	; (800348c <init_adc_dma+0xa4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003468:	601a      	str	r2, [r3, #0]


	status = 1;
 800346a:	2301      	movs	r3, #1
 800346c:	71fb      	strb	r3, [r7, #7]

	return status;
 800346e:	79fb      	ldrb	r3, [r7, #7]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	2400015c 	.word	0x2400015c
 800347c:	24001c00 	.word	0x24001c00
 8003480:	240001c0 	.word	0x240001c0
 8003484:	24001c20 	.word	0x24001c20
 8003488:	24001cbc 	.word	0x24001cbc
 800348c:	24001c34 	.word	0x24001c34

08003490 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003498:	2201      	movs	r2, #1
 800349a:	490b      	ldr	r1, [pc, #44]	; (80034c8 <sample_pmt_spi+0x38>)
 800349c:	480b      	ldr	r0, [pc, #44]	; (80034cc <sample_pmt_spi+0x3c>)
 800349e:	f00e f909 	bl	80116b4 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <sample_pmt_spi+0x38>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <sample_pmt_spi+0x38>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3301      	adds	r3, #1
 80034bc:	7bba      	ldrb	r2, [r7, #14]
 80034be:	701a      	strb	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	24001c2c 	.word	0x24001c2c
 80034cc:	24001c34 	.word	0x24001c34

080034d0 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 80034d8:	2201      	movs	r2, #1
 80034da:	490b      	ldr	r1, [pc, #44]	; (8003508 <sample_erpa_spi+0x38>)
 80034dc:	480b      	ldr	r0, [pc, #44]	; (800350c <sample_erpa_spi+0x3c>)
 80034de:	f00e f8e9 	bl	80116b4 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <sample_erpa_spi+0x38>)
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <sample_erpa_spi+0x38>)
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3301      	adds	r3, #1
 80034fc:	7bba      	ldrb	r2, [r7, #14]
 80034fe:	701a      	strb	r2, [r3, #0]
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	24001c28 	.word	0x24001c28
 800350c:	24001cbc 	.word	0x24001cbc

08003510 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <sample_erpa_adc+0x20>)
 800351a:	885b      	ldrh	r3, [r3, #2]
 800351c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	89fa      	ldrh	r2, [r7, #14]
 8003522:	801a      	strh	r2, [r3, #0]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	24001c00 	.word	0x24001c00

08003534 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800353c:	2390      	movs	r3, #144	; 0x90
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f8a2 	bl	8003688 <poll_i2c_sensor>
 8003544:	4603      	mov	r3, r0
 8003546:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8003548:	2394      	movs	r3, #148	; 0x94
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f89c 	bl	8003688 <poll_i2c_sensor>
 8003550:	4603      	mov	r3, r0
 8003552:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8003554:	2392      	movs	r3, #146	; 0x92
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f896 	bl	8003688 <poll_i2c_sensor>
 800355c:	4603      	mov	r3, r0
 800355e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8003560:	2396      	movs	r3, #150	; 0x96
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f890 	bl	8003688 <poll_i2c_sensor>
 8003568:	4603      	mov	r3, r0
 800356a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	89fa      	ldrh	r2, [r7, #14]
 8003570:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3302      	adds	r3, #2
 8003576:	89ba      	ldrh	r2, [r7, #12]
 8003578:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	897a      	ldrh	r2, [r7, #10]
 8003580:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3306      	adds	r3, #6
 8003586:	893a      	ldrh	r2, [r7, #8]
 8003588:	801a      	strh	r2, [r3, #0]
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <sample_hk_adc1+0xa0>)
 800359e:	8a9b      	ldrh	r3, [r3, #20]
 80035a0:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <sample_hk_adc1+0xa0>)
 80035a4:	8a1b      	ldrh	r3, [r3, #16]
 80035a6:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <sample_hk_adc1+0xa0>)
 80035aa:	899b      	ldrh	r3, [r3, #12]
 80035ac:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <sample_hk_adc1+0xa0>)
 80035b0:	8a5b      	ldrh	r3, [r3, #18]
 80035b2:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80035b4:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <sample_hk_adc1+0xa0>)
 80035b6:	889b      	ldrh	r3, [r3, #4]
 80035b8:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <sample_hk_adc1+0xa0>)
 80035bc:	88db      	ldrh	r3, [r3, #6]
 80035be:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80035c0:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <sample_hk_adc1+0xa0>)
 80035c2:	89db      	ldrh	r3, [r3, #14]
 80035c4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <sample_hk_adc1+0xa0>)
 80035c8:	891b      	ldrh	r3, [r3, #8]
 80035ca:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <sample_hk_adc1+0xa0>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <sample_hk_adc1+0xa0>)
 80035d4:	895b      	ldrh	r3, [r3, #10]
 80035d6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8bfa      	ldrh	r2, [r7, #30]
 80035dc:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3302      	adds	r3, #2
 80035e2:	8bba      	ldrh	r2, [r7, #28]
 80035e4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3304      	adds	r3, #4
 80035ea:	8b7a      	ldrh	r2, [r7, #26]
 80035ec:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3306      	adds	r3, #6
 80035f2:	8b3a      	ldrh	r2, [r7, #24]
 80035f4:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3308      	adds	r3, #8
 80035fa:	8afa      	ldrh	r2, [r7, #22]
 80035fc:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	330a      	adds	r3, #10
 8003602:	8aba      	ldrh	r2, [r7, #20]
 8003604:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	330c      	adds	r3, #12
 800360a:	8a7a      	ldrh	r2, [r7, #18]
 800360c:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	330e      	adds	r3, #14
 8003612:	8a3a      	ldrh	r2, [r7, #16]
 8003614:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3310      	adds	r3, #16
 800361a:	89fa      	ldrh	r2, [r7, #14]
 800361c:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3312      	adds	r3, #18
 8003622:	89ba      	ldrh	r2, [r7, #12]
 8003624:	801a      	strh	r2, [r3, #0]
}
 8003626:	bf00      	nop
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	24001c00 	.word	0x24001c00

08003638 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	uint16_t vsense = ADC3_raw_data[0];
 8003640:	4b10      	ldr	r3, [pc, #64]	; (8003684 <sample_hk_adc3+0x4c>)
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	81fb      	strh	r3, [r7, #14]
	uint16_t vrefint = ADC3_raw_data[1];
 8003646:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <sample_hk_adc3+0x4c>)
 8003648:	885b      	ldrh	r3, [r3, #2]
 800364a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <sample_hk_adc3+0x4c>)
 800364e:	889b      	ldrh	r3, [r3, #4]
 8003650:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <sample_hk_adc3+0x4c>)
 8003654:	88db      	ldrh	r3, [r3, #6]
 8003656:	813b      	strh	r3, [r7, #8]

	buffer[0] = vsense;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	89fa      	ldrh	r2, [r7, #14]
 800365c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vrefint;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3302      	adds	r3, #2
 8003662:	89ba      	ldrh	r2, [r7, #12]
 8003664:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	897a      	ldrh	r2, [r7, #10]
 800366c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3306      	adds	r3, #6
 8003672:	893a      	ldrh	r2, [r7, #8]
 8003674:	801a      	strh	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	24001c20 	.word	0x24001c20

08003688 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8003692:	2200      	movs	r2, #0
 8003694:	4b20      	ldr	r3, [pc, #128]	; (8003718 <poll_i2c_sensor+0x90>)
 8003696:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	b299      	uxth	r1, r3
 800369c:	2301      	movs	r3, #1
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <poll_i2c_sensor+0x90>)
 80036a0:	481e      	ldr	r0, [pc, #120]	; (800371c <poll_i2c_sensor+0x94>)
 80036a2:	f007 fa41 	bl	800ab28 <HAL_I2C_Master_Transmit_DMA>
 80036a6:	4603      	mov	r3, r0
 80036a8:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80036aa:	7b7b      	ldrb	r3, [r7, #13]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 80036b0:	481b      	ldr	r0, [pc, #108]	; (8003720 <poll_i2c_sensor+0x98>)
 80036b2:	f016 fab9 	bl	8019c28 <puts>
 80036b6:	e028      	b.n	800370a <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80036b8:	bf00      	nop
 80036ba:	4818      	ldr	r0, [pc, #96]	; (800371c <poll_i2c_sensor+0x94>)
 80036bc:	f007 fd1b 	bl	800b0f6 <HAL_I2C_GetState>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d1f9      	bne.n	80036ba <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	b299      	uxth	r1, r3
 80036ca:	2302      	movs	r3, #2
 80036cc:	4a12      	ldr	r2, [pc, #72]	; (8003718 <poll_i2c_sensor+0x90>)
 80036ce:	4813      	ldr	r0, [pc, #76]	; (800371c <poll_i2c_sensor+0x94>)
 80036d0:	f007 fb3e 	bl	800ad50 <HAL_I2C_Master_Receive_DMA>
 80036d4:	4603      	mov	r3, r0
 80036d6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80036d8:	7b7b      	ldrb	r3, [r7, #13]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80036de:	4811      	ldr	r0, [pc, #68]	; (8003724 <poll_i2c_sensor+0x9c>)
 80036e0:	f016 faa2 	bl	8019c28 <puts>
 80036e4:	e011      	b.n	800370a <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80036e6:	bf00      	nop
 80036e8:	480c      	ldr	r0, [pc, #48]	; (800371c <poll_i2c_sensor+0x94>)
 80036ea:	f007 fd04 	bl	800b0f6 <HAL_I2C_GetState>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d1f9      	bne.n	80036e8 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <poll_i2c_sensor+0x90>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 80036fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003700:	4a05      	ldr	r2, [pc, #20]	; (8003718 <poll_i2c_sensor+0x90>)
 8003702:	7852      	ldrb	r2, [r2, #1]
 8003704:	4313      	orrs	r3, r2
 8003706:	10db      	asrs	r3, r3, #3
 8003708:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 800370a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	24001c30 	.word	0x24001c30
 800371c:	24001940 	.word	0x24001940
 8003720:	0801a790 	.word	0x0801a790
 8003724:	0801a7a0 	.word	0x0801a7a0

08003728 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800372c:	4b28      	ldr	r3, [pc, #160]	; (80037d0 <MX_SPI1_Init+0xa8>)
 800372e:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <MX_SPI1_Init+0xac>)
 8003730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003732:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <MX_SPI1_Init+0xa8>)
 8003734:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800373a:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <MX_SPI1_Init+0xa8>)
 800373c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003740:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003742:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <MX_SPI1_Init+0xa8>)
 8003744:	220f      	movs	r2, #15
 8003746:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003748:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <MX_SPI1_Init+0xa8>)
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <MX_SPI1_Init+0xa8>)
 8003750:	2200      	movs	r2, #0
 8003752:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003754:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <MX_SPI1_Init+0xa8>)
 8003756:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800375a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800375c:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <MX_SPI1_Init+0xa8>)
 800375e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <MX_SPI1_Init+0xa8>)
 8003766:	2200      	movs	r2, #0
 8003768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800376a:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <MX_SPI1_Init+0xa8>)
 800376c:	2200      	movs	r2, #0
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <MX_SPI1_Init+0xa8>)
 8003772:	2200      	movs	r2, #0
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <MX_SPI1_Init+0xa8>)
 8003778:	2200      	movs	r2, #0
 800377a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <MX_SPI1_Init+0xa8>)
 800377e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003782:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <MX_SPI1_Init+0xa8>)
 8003786:	2200      	movs	r2, #0
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <MX_SPI1_Init+0xa8>)
 800378c:	2200      	movs	r2, #0
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <MX_SPI1_Init+0xa8>)
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <MX_SPI1_Init+0xa8>)
 8003798:	2200      	movs	r2, #0
 800379a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <MX_SPI1_Init+0xa8>)
 800379e:	2200      	movs	r2, #0
 80037a0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <MX_SPI1_Init+0xa8>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <MX_SPI1_Init+0xa8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <MX_SPI1_Init+0xa8>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <MX_SPI1_Init+0xa8>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037ba:	4805      	ldr	r0, [pc, #20]	; (80037d0 <MX_SPI1_Init+0xa8>)
 80037bc:	f00d fe56 	bl	801146c <HAL_SPI_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80037c6:	f7ff fa41 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	24001c34 	.word	0x24001c34
 80037d4:	40013000 	.word	0x40013000

080037d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80037dc:	4b28      	ldr	r3, [pc, #160]	; (8003880 <MX_SPI2_Init+0xa8>)
 80037de:	4a29      	ldr	r2, [pc, #164]	; (8003884 <MX_SPI2_Init+0xac>)
 80037e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037e2:	4b27      	ldr	r3, [pc, #156]	; (8003880 <MX_SPI2_Init+0xa8>)
 80037e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80037ea:	4b25      	ldr	r3, [pc, #148]	; (8003880 <MX_SPI2_Init+0xa8>)
 80037ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80037f0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80037f2:	4b23      	ldr	r3, [pc, #140]	; (8003880 <MX_SPI2_Init+0xa8>)
 80037f4:	220f      	movs	r2, #15
 80037f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f8:	4b21      	ldr	r3, [pc, #132]	; (8003880 <MX_SPI2_Init+0xa8>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003800:	2200      	movs	r2, #0
 8003802:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003804:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003806:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800380a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800380c:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <MX_SPI2_Init+0xa8>)
 800380e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003812:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003814:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003816:	2200      	movs	r2, #0
 8003818:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800381a:	4b19      	ldr	r3, [pc, #100]	; (8003880 <MX_SPI2_Init+0xa8>)
 800381c:	2200      	movs	r2, #0
 800381e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003820:	4b17      	ldr	r3, [pc, #92]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003822:	2200      	movs	r2, #0
 8003824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003826:	4b16      	ldr	r3, [pc, #88]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003828:	2200      	movs	r2, #0
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <MX_SPI2_Init+0xa8>)
 800382e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003832:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003836:	2200      	movs	r2, #0
 8003838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800383a:	4b11      	ldr	r3, [pc, #68]	; (8003880 <MX_SPI2_Init+0xa8>)
 800383c:	2200      	movs	r2, #0
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003842:	2200      	movs	r2, #0
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003846:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003848:	2200      	movs	r2, #0
 800384a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <MX_SPI2_Init+0xa8>)
 800384e:	2200      	movs	r2, #0
 8003850:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003854:	2200      	movs	r2, #0
 8003856:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <MX_SPI2_Init+0xa8>)
 800385a:	2200      	movs	r2, #0
 800385c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003860:	2200      	movs	r2, #0
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <MX_SPI2_Init+0xa8>)
 8003866:	2200      	movs	r2, #0
 8003868:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800386a:	4805      	ldr	r0, [pc, #20]	; (8003880 <MX_SPI2_Init+0xa8>)
 800386c:	f00d fdfe 	bl	801146c <HAL_SPI_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8003876:	f7ff f9e9 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	24001cbc 	.word	0x24001cbc
 8003884:	40003800 	.word	0x40003800

08003888 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b0bc      	sub	sp, #240	; 0xf0
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038a0:	f107 0318 	add.w	r3, r7, #24
 80038a4:	22c0      	movs	r2, #192	; 0xc0
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f016 f947 	bl	8019b3c <memset>
  if(spiHandle->Instance==SPI1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a83      	ldr	r2, [pc, #524]	; (8003ac0 <HAL_SPI_MspInit+0x238>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d17c      	bne.n	80039b2 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80038b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038c8:	f107 0318 	add.w	r3, r7, #24
 80038cc:	4618      	mov	r0, r3
 80038ce:	f00a fdad 	bl	800e42c <HAL_RCCEx_PeriphCLKConfig>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80038d8:	f7ff f9b8 	bl	8002c4c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038dc:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 80038de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038e2:	4a78      	ldr	r2, [pc, #480]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 80038e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038ec:	4b75      	ldr	r3, [pc, #468]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 80038ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fa:	4b72      	ldr	r3, [pc, #456]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 80038fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003900:	4a70      	ldr	r2, [pc, #448]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 8003902:	f043 0302 	orr.w	r3, r3, #2
 8003906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800390a:	4b6e      	ldr	r3, [pc, #440]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 800390c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003918:	2318      	movs	r3, #24
 800391a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	2300      	movs	r3, #0
 800392c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003930:	2305      	movs	r3, #5
 8003932:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003936:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800393a:	4619      	mov	r1, r3
 800393c:	4862      	ldr	r0, [pc, #392]	; (8003ac8 <HAL_SPI_MspInit+0x240>)
 800393e:	f006 fe5b 	bl	800a5f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8003942:	4b62      	ldr	r3, [pc, #392]	; (8003acc <HAL_SPI_MspInit+0x244>)
 8003944:	4a62      	ldr	r2, [pc, #392]	; (8003ad0 <HAL_SPI_MspInit+0x248>)
 8003946:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003948:	4b60      	ldr	r3, [pc, #384]	; (8003acc <HAL_SPI_MspInit+0x244>)
 800394a:	2225      	movs	r2, #37	; 0x25
 800394c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800394e:	4b5f      	ldr	r3, [pc, #380]	; (8003acc <HAL_SPI_MspInit+0x244>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003954:	4b5d      	ldr	r3, [pc, #372]	; (8003acc <HAL_SPI_MspInit+0x244>)
 8003956:	2200      	movs	r2, #0
 8003958:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800395a:	4b5c      	ldr	r3, [pc, #368]	; (8003acc <HAL_SPI_MspInit+0x244>)
 800395c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003960:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003962:	4b5a      	ldr	r3, [pc, #360]	; (8003acc <HAL_SPI_MspInit+0x244>)
 8003964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003968:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800396a:	4b58      	ldr	r3, [pc, #352]	; (8003acc <HAL_SPI_MspInit+0x244>)
 800396c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003970:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003972:	4b56      	ldr	r3, [pc, #344]	; (8003acc <HAL_SPI_MspInit+0x244>)
 8003974:	2200      	movs	r2, #0
 8003976:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003978:	4b54      	ldr	r3, [pc, #336]	; (8003acc <HAL_SPI_MspInit+0x244>)
 800397a:	2200      	movs	r2, #0
 800397c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800397e:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_SPI_MspInit+0x244>)
 8003980:	2200      	movs	r2, #0
 8003982:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003984:	4851      	ldr	r0, [pc, #324]	; (8003acc <HAL_SPI_MspInit+0x244>)
 8003986:	f003 fd07 	bl	8007398 <HAL_DMA_Init>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003990:	f7ff f95c 	bl	8002c4c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a4d      	ldr	r2, [pc, #308]	; (8003acc <HAL_SPI_MspInit+0x244>)
 8003998:	67da      	str	r2, [r3, #124]	; 0x7c
 800399a:	4a4c      	ldr	r2, [pc, #304]	; (8003acc <HAL_SPI_MspInit+0x244>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80039a0:	2200      	movs	r2, #0
 80039a2:	2105      	movs	r1, #5
 80039a4:	2023      	movs	r0, #35	; 0x23
 80039a6:	f003 f8c9 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039aa:	2023      	movs	r0, #35	; 0x23
 80039ac:	f003 f8e0 	bl	8006b70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80039b0:	e081      	b.n	8003ab6 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a47      	ldr	r2, [pc, #284]	; (8003ad4 <HAL_SPI_MspInit+0x24c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d17c      	bne.n	8003ab6 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80039bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039cc:	f107 0318 	add.w	r3, r7, #24
 80039d0:	4618      	mov	r0, r3
 80039d2:	f00a fd2b 	bl	800e42c <HAL_RCCEx_PeriphCLKConfig>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80039dc:	f7ff f936 	bl	8002c4c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039e0:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 80039e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039e6:	4a37      	ldr	r2, [pc, #220]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 80039e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 80039f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 8003a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a04:	4a2f      	ldr	r2, [pc, #188]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 8003a06:	f043 0302 	orr.w	r3, r3, #2
 8003a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <HAL_SPI_MspInit+0x23c>)
 8003a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003a1c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003a20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a36:	2305      	movs	r3, #5
 8003a38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a40:	4619      	mov	r1, r3
 8003a42:	4821      	ldr	r0, [pc, #132]	; (8003ac8 <HAL_SPI_MspInit+0x240>)
 8003a44:	f006 fdd8 	bl	800a5f8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003a48:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a4a:	4a24      	ldr	r2, [pc, #144]	; (8003adc <HAL_SPI_MspInit+0x254>)
 8003a4c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003a4e:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a50:	2227      	movs	r2, #39	; 0x27
 8003a52:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a54:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a60:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a66:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a68:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a6e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a76:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003a78:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a7e:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003a8a:	4813      	ldr	r0, [pc, #76]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a8c:	f003 fc84 	bl	8007398 <HAL_DMA_Init>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8003a96:	f7ff f8d9 	bl	8002c4c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003a9e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <HAL_SPI_MspInit+0x250>)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2105      	movs	r1, #5
 8003aaa:	2024      	movs	r0, #36	; 0x24
 8003aac:	f003 f846 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003ab0:	2024      	movs	r0, #36	; 0x24
 8003ab2:	f003 f85d 	bl	8006b70 <HAL_NVIC_EnableIRQ>
}
 8003ab6:	bf00      	nop
 8003ab8:	37f0      	adds	r7, #240	; 0xf0
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40013000 	.word	0x40013000
 8003ac4:	58024400 	.word	0x58024400
 8003ac8:	58020400 	.word	0x58020400
 8003acc:	24001d44 	.word	0x24001d44
 8003ad0:	40020070 	.word	0x40020070
 8003ad4:	40003800 	.word	0x40003800
 8003ad8:	24001dbc 	.word	0x24001dbc
 8003adc:	40020058 	.word	0x40020058

08003ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <HAL_MspInit+0x38>)
 8003ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_MspInit+0x38>)
 8003aee:	f043 0302 	orr.w	r3, r3, #2
 8003af2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003af6:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <HAL_MspInit+0x38>)
 8003af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b04:	2200      	movs	r2, #0
 8003b06:	210f      	movs	r1, #15
 8003b08:	f06f 0001 	mvn.w	r0, #1
 8003b0c:	f003 f816 	bl	8006b3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	58024400 	.word	0x58024400

08003b1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b090      	sub	sp, #64	; 0x40
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	d827      	bhi.n	8003b7a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	2036      	movs	r0, #54	; 0x36
 8003b30:	f003 f804 	bl	8006b3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b34:	2036      	movs	r0, #54	; 0x36
 8003b36:	f003 f81b 	bl	8006b70 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003b3a:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_InitTick+0xc4>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_InitTick+0xc8>)
 8003b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b46:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <HAL_InitTick+0xc8>)
 8003b48:	f043 0310 	orr.w	r3, r3, #16
 8003b4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b50:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_InitTick+0xc8>)
 8003b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b5e:	f107 0210 	add.w	r2, r7, #16
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f00a fc1d 	bl	800e3a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <HAL_InitTick+0x6a>
 8003b78:	e001      	b.n	8003b7e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e02b      	b.n	8003bd6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b7e:	f00a fbe7 	bl	800e350 <HAL_RCC_GetPCLK1Freq>
 8003b82:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003b84:	e004      	b.n	8003b90 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b86:	f00a fbe3 	bl	800e350 <HAL_RCC_GetPCLK1Freq>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b92:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <HAL_InitTick+0xcc>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	0c9b      	lsrs	r3, r3, #18
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b9e:	4b13      	ldr	r3, [pc, #76]	; (8003bec <HAL_InitTick+0xd0>)
 8003ba0:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <HAL_InitTick+0xd4>)
 8003ba2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_InitTick+0xd0>)
 8003ba6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003baa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003bac:	4a0f      	ldr	r2, [pc, #60]	; (8003bec <HAL_InitTick+0xd0>)
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <HAL_InitTick+0xd0>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <HAL_InitTick+0xd0>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003bbe:	480b      	ldr	r0, [pc, #44]	; (8003bec <HAL_InitTick+0xd0>)
 8003bc0:	f00e f9f3 	bl	8011faa <HAL_TIM_Base_Init>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003bca:	4808      	ldr	r0, [pc, #32]	; (8003bec <HAL_InitTick+0xd0>)
 8003bcc:	f00e fa44 	bl	8012058 <HAL_TIM_Base_Start_IT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	e000      	b.n	8003bd6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3740      	adds	r7, #64	; 0x40
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	240000d0 	.word	0x240000d0
 8003be4:	58024400 	.word	0x58024400
 8003be8:	431bde83 	.word	0x431bde83
 8003bec:	24001e34 	.word	0x24001e34
 8003bf0:	40001000 	.word	0x40001000

08003bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003bf8:	e7fe      	b.n	8003bf8 <NMI_Handler+0x4>

08003bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bfe:	e7fe      	b.n	8003bfe <HardFault_Handler+0x4>

08003c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <MemManage_Handler+0x4>

08003c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c0a:	e7fe      	b.n	8003c0a <BusFault_Handler+0x4>

08003c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c10:	e7fe      	b.n	8003c10 <UsageFault_Handler+0x4>

08003c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <DMA1_Stream0_IRQHandler+0x10>)
 8003c26:	f004 fee1 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	24000224 	.word	0x24000224

08003c34 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <DMA1_Stream1_IRQHandler+0x10>)
 8003c3a:	f004 fed7 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	2400029c 	.word	0x2400029c

08003c48 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <DMA1_Stream2_IRQHandler+0x10>)
 8003c4e:	f004 fecd 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	24001fb0 	.word	0x24001fb0

08003c5c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <DMA1_Stream3_IRQHandler+0x10>)
 8003c62:	f004 fec3 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	24001dbc 	.word	0x24001dbc

08003c70 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <DMA1_Stream4_IRQHandler+0x10>)
 8003c76:	f004 feb9 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	24001d44 	.word	0x24001d44

08003c84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <DMA1_Stream5_IRQHandler+0x10>)
 8003c8a:	f004 feaf 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	24000328 	.word	0x24000328

08003c98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <DMA1_Stream6_IRQHandler+0x10>)
 8003c9e:	f004 fea5 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	24001994 	.word	0x24001994

08003cac <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <TIM1_BRK_IRQHandler+0x10>)
 8003cb2:	f00e fce8 	bl	8012686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	24001e84 	.word	0x24001e84

08003cc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <TIM1_UP_IRQHandler+0x10>)
 8003cc6:	f00e fcde 	bl	8012686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	24001e84 	.word	0x24001e84

08003cd4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003cda:	f00e fcd4 	bl	8012686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	24001e84 	.word	0x24001e84

08003ce8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <TIM1_CC_IRQHandler+0x10>)
 8003cee:	f00e fcca 	bl	8012686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	24001e84 	.word	0x24001e84

08003cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d00:	4802      	ldr	r0, [pc, #8]	; (8003d0c <TIM2_IRQHandler+0x10>)
 8003d02:	f00e fcc0 	bl	8012686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	24001ed0 	.word	0x24001ed0

08003d10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <I2C1_EV_IRQHandler+0x10>)
 8003d16:	f007 f90b 	bl	800af30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	24001940 	.word	0x24001940

08003d24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <I2C1_ER_IRQHandler+0x10>)
 8003d2a:	f007 f91b 	bl	800af64 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	24001940 	.word	0x24001940

08003d38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <SPI1_IRQHandler+0x10>)
 8003d3e:	f00d fe01 	bl	8011944 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	24001c34 	.word	0x24001c34

08003d4c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003d50:	4802      	ldr	r0, [pc, #8]	; (8003d5c <SPI2_IRQHandler+0x10>)
 8003d52:	f00d fdf7 	bl	8011944 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	24001cbc 	.word	0x24001cbc

08003d60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d64:	4802      	ldr	r0, [pc, #8]	; (8003d70 <USART1_IRQHandler+0x10>)
 8003d66:	f00f ffd1 	bl	8013d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	24001f1c 	.word	0x24001f1c

08003d74 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003d78:	4802      	ldr	r0, [pc, #8]	; (8003d84 <DMA1_Stream7_IRQHandler+0x10>)
 8003d7a:	f004 fe37 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	24001a0c 	.word	0x24001a0c

08003d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <TIM6_DAC_IRQHandler+0x20>)
 8003d8e:	791b      	ldrb	r3, [r3, #4]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003d96:	4804      	ldr	r0, [pc, #16]	; (8003da8 <TIM6_DAC_IRQHandler+0x20>)
 8003d98:	f003 f87f 	bl	8006e9a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003d9c:	4803      	ldr	r0, [pc, #12]	; (8003dac <TIM6_DAC_IRQHandler+0x24>)
 8003d9e:	f00e fc72 	bl	8012686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	24000314 	.word	0x24000314
 8003dac:	24001e34 	.word	0x24001e34

08003db0 <ECC_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
 * @brief This function handles RAMECC global interrupt
 */
void ECC_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
    HAL_RAMECC_IRQHandler(&hramecc);
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <ECC_IRQHandler+0x10>)
 8003db6:	f009 fabd 	bl	800d334 <HAL_RAMECC_IRQHandler>
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	24001b00 	.word	0x24001b00

08003dc4 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <ITM_SendChar+0x48>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <ITM_SendChar+0x48>)
 8003dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd8:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <ITM_SendChar+0x4c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <ITM_SendChar+0x4c>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003de6:	bf00      	nop
 8003de8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f8      	beq.n	8003de8 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003df6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	6013      	str	r3, [r2, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000edfc 	.word	0xe000edfc
 8003e10:	e0000e00 	.word	0xe0000e00

08003e14 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	e00a      	b.n	8003e3c <_read+0x28>
		*ptr++ = __io_getchar();
 8003e26:	f3af 8000 	nop.w
 8003e2a:	4601      	mov	r1, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	60ba      	str	r2, [r7, #8]
 8003e32:	b2ca      	uxtb	r2, r1
 8003e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	dbf0      	blt.n	8003e26 <_read+0x12>
	}

	return len;
 8003e44:	687b      	ldr	r3, [r7, #4]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e009      	b.n	8003e74 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	60ba      	str	r2, [r7, #8]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ffab 	bl	8003dc4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	3301      	adds	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	dbf1      	blt.n	8003e60 <_write+0x12>
	}
	return len;
 8003e7c:	687b      	ldr	r3, [r7, #4]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <_close>:

int _close(int file) {
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <_fstat>:

int _fstat(int file, struct stat *st) {
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eae:	605a      	str	r2, [r3, #4]
	return 0;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <_isatty>:

int _isatty(int file) {
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003ec6:	2301      	movs	r3, #1
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003ef8:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003f04:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <_sbrk+0x64>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <_sbrk+0x64>)
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <_sbrk+0x68>)
 8003f10:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <_sbrk+0x64>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d207      	bcs.n	8003f30 <_sbrk+0x40>
		errno = ENOMEM;
 8003f20:	f015 fdd4 	bl	8019acc <__errno>
 8003f24:	4603      	mov	r3, r0
 8003f26:	220c      	movs	r2, #12
 8003f28:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2e:	e009      	b.n	8003f44 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <_sbrk+0x64>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <_sbrk+0x64>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4a05      	ldr	r2, [pc, #20]	; (8003f54 <_sbrk+0x64>)
 8003f40:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	24080000 	.word	0x24080000
 8003f50:	00000400 	.word	0x00000400
 8003f54:	24001e80 	.word	0x24001e80
 8003f58:	24006ac8 	.word	0x24006ac8

08003f5c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003f60:	4b37      	ldr	r3, [pc, #220]	; (8004040 <SystemInit+0xe4>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	4a36      	ldr	r2, [pc, #216]	; (8004040 <SystemInit+0xe4>)
 8003f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003f70:	4b34      	ldr	r3, [pc, #208]	; (8004044 <SystemInit+0xe8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	2b06      	cmp	r3, #6
 8003f7a:	d807      	bhi.n	8003f8c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003f7c:	4b31      	ldr	r3, [pc, #196]	; (8004044 <SystemInit+0xe8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 030f 	bic.w	r3, r3, #15
 8003f84:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <SystemInit+0xe8>)
 8003f86:	f043 0307 	orr.w	r3, r3, #7
 8003f8a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003f8c:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <SystemInit+0xec>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a2d      	ldr	r2, [pc, #180]	; (8004048 <SystemInit+0xec>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003f98:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <SystemInit+0xec>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <SystemInit+0xec>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4929      	ldr	r1, [pc, #164]	; (8004048 <SystemInit+0xec>)
 8003fa4:	4b29      	ldr	r3, [pc, #164]	; (800404c <SystemInit+0xf0>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003faa:	4b26      	ldr	r3, [pc, #152]	; (8004044 <SystemInit+0xe8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <SystemInit+0xe8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 030f 	bic.w	r3, r3, #15
 8003fbe:	4a21      	ldr	r2, [pc, #132]	; (8004044 <SystemInit+0xe8>)
 8003fc0:	f043 0307 	orr.w	r3, r3, #7
 8003fc4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003fc6:	4b20      	ldr	r3, [pc, #128]	; (8004048 <SystemInit+0xec>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003fcc:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <SystemInit+0xec>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <SystemInit+0xec>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <SystemInit+0xec>)
 8003fda:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <SystemInit+0xf4>)
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <SystemInit+0xec>)
 8003fe0:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <SystemInit+0xf8>)
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003fe4:	4b18      	ldr	r3, [pc, #96]	; (8004048 <SystemInit+0xec>)
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <SystemInit+0xfc>)
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003fea:	4b17      	ldr	r3, [pc, #92]	; (8004048 <SystemInit+0xec>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <SystemInit+0xec>)
 8003ff2:	4a19      	ldr	r2, [pc, #100]	; (8004058 <SystemInit+0xfc>)
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <SystemInit+0xec>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003ffc:	4b12      	ldr	r3, [pc, #72]	; (8004048 <SystemInit+0xec>)
 8003ffe:	4a16      	ldr	r2, [pc, #88]	; (8004058 <SystemInit+0xfc>)
 8004000:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <SystemInit+0xec>)
 8004004:	2200      	movs	r2, #0
 8004006:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <SystemInit+0xec>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <SystemInit+0xec>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <SystemInit+0xec>)
 8004016:	2200      	movs	r2, #0
 8004018:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <SystemInit+0x100>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b10      	ldr	r3, [pc, #64]	; (8004060 <SystemInit+0x104>)
 8004020:	4013      	ands	r3, r2
 8004022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004026:	d202      	bcs.n	800402e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <SystemInit+0x108>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800402e:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <SystemInit+0x10c>)
 8004030:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004034:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00
 8004044:	52002000 	.word	0x52002000
 8004048:	58024400 	.word	0x58024400
 800404c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004050:	02020200 	.word	0x02020200
 8004054:	01ff0000 	.word	0x01ff0000
 8004058:	01010280 	.word	0x01010280
 800405c:	5c001000 	.word	0x5c001000
 8004060:	ffff0000 	.word	0xffff0000
 8004064:	51008108 	.word	0x51008108
 8004068:	52004000 	.word	0x52004000

0800406c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b09a      	sub	sp, #104	; 0x68
 8004070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004072:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004080:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800408c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
 800409c:	615a      	str	r2, [r3, #20]
 800409e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	222c      	movs	r2, #44	; 0x2c
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f015 fd48 	bl	8019b3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040ac:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <MX_TIM1_Init+0x154>)
 80040ae:	4a45      	ldr	r2, [pc, #276]	; (80041c4 <MX_TIM1_Init+0x158>)
 80040b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 80040b2:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <MX_TIM1_Init+0x154>)
 80040b4:	224a      	movs	r2, #74	; 0x4a
 80040b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b8:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <MX_TIM1_Init+0x154>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80040be:	4b40      	ldr	r3, [pc, #256]	; (80041c0 <MX_TIM1_Init+0x154>)
 80040c0:	f24f 4223 	movw	r2, #62499	; 0xf423
 80040c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c6:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <MX_TIM1_Init+0x154>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80040cc:	4b3c      	ldr	r3, [pc, #240]	; (80041c0 <MX_TIM1_Init+0x154>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040d2:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <MX_TIM1_Init+0x154>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80040d8:	4839      	ldr	r0, [pc, #228]	; (80041c0 <MX_TIM1_Init+0x154>)
 80040da:	f00d ff66 	bl	8011faa <HAL_TIM_Base_Init>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80040e4:	f7fe fdb2 	bl	8002c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040f2:	4619      	mov	r1, r3
 80040f4:	4832      	ldr	r0, [pc, #200]	; (80041c0 <MX_TIM1_Init+0x154>)
 80040f6:	f00e fce1 	bl	8012abc <HAL_TIM_ConfigClockSource>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004100:	f7fe fda4 	bl	8002c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004104:	482e      	ldr	r0, [pc, #184]	; (80041c0 <MX_TIM1_Init+0x154>)
 8004106:	f00e fa5d 	bl	80125c4 <HAL_TIM_PWM_Init>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004110:	f7fe fd9c 	bl	8002c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004114:	2300      	movs	r3, #0
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004118:	2300      	movs	r3, #0
 800411a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411c:	2300      	movs	r3, #0
 800411e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004120:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004124:	4619      	mov	r1, r3
 8004126:	4826      	ldr	r0, [pc, #152]	; (80041c0 <MX_TIM1_Init+0x154>)
 8004128:	f00f fa1e 	bl	8013568 <HAL_TIMEx_MasterConfigSynchronization>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004132:	f7fe fd8b 	bl	8002c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004136:	2360      	movs	r3, #96	; 0x60
 8004138:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800413a:	f240 13df 	movw	r3, #479	; 0x1df
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004140:	2300      	movs	r3, #0
 8004142:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004144:	2300      	movs	r3, #0
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004148:	2300      	movs	r3, #0
 800414a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800414c:	2300      	movs	r3, #0
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004150:	2300      	movs	r3, #0
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004158:	2200      	movs	r2, #0
 800415a:	4619      	mov	r1, r3
 800415c:	4818      	ldr	r0, [pc, #96]	; (80041c0 <MX_TIM1_Init+0x154>)
 800415e:	f00e fb99 	bl	8012894 <HAL_TIM_PWM_ConfigChannel>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004168:	f7fe fd70 	bl	8002c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004184:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800418a:	2300      	movs	r3, #0
 800418c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800418e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004198:	2300      	movs	r3, #0
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800419c:	1d3b      	adds	r3, r7, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4807      	ldr	r0, [pc, #28]	; (80041c0 <MX_TIM1_Init+0x154>)
 80041a2:	f00f fa6f 	bl	8013684 <HAL_TIMEx_ConfigBreakDeadTime>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80041ac:	f7fe fd4e 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80041b0:	4803      	ldr	r0, [pc, #12]	; (80041c0 <MX_TIM1_Init+0x154>)
 80041b2:	f000 f8dd 	bl	8004370 <HAL_TIM_MspPostInit>

}
 80041b6:	bf00      	nop
 80041b8:	3768      	adds	r7, #104	; 0x68
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	24001e84 	.word	0x24001e84
 80041c4:	40010000 	.word	0x40010000

080041c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08e      	sub	sp, #56	; 0x38
 80041cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	605a      	str	r2, [r3, #4]
 80041d8:	609a      	str	r2, [r3, #8]
 80041da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041dc:	f107 031c 	add.w	r3, r7, #28
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041e8:	463b      	mov	r3, r7
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	609a      	str	r2, [r3, #8]
 80041f2:	60da      	str	r2, [r3, #12]
 80041f4:	611a      	str	r2, [r3, #16]
 80041f6:	615a      	str	r2, [r3, #20]
 80041f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041fa:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <MX_TIM2_Init+0xe8>)
 80041fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004200:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004202:	4b2b      	ldr	r3, [pc, #172]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004204:	224a      	movs	r2, #74	; 0x4a
 8004206:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004208:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <MX_TIM2_Init+0xe8>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004210:	f640 4234 	movw	r2, #3124	; 0xc34
 8004214:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800421c:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <MX_TIM2_Init+0xe8>)
 800421e:	2280      	movs	r2, #128	; 0x80
 8004220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004222:	4823      	ldr	r0, [pc, #140]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004224:	f00d fec1 	bl	8011faa <HAL_TIM_Base_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800422e:	f7fe fd0d 	bl	8002c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800423c:	4619      	mov	r1, r3
 800423e:	481c      	ldr	r0, [pc, #112]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004240:	f00e fc3c 	bl	8012abc <HAL_TIM_ConfigClockSource>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800424a:	f7fe fcff 	bl	8002c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800424e:	4818      	ldr	r0, [pc, #96]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004250:	f00e f9b8 	bl	80125c4 <HAL_TIM_PWM_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800425a:	f7fe fcf7 	bl	8002c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800425e:	2320      	movs	r3, #32
 8004260:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004266:	f107 031c 	add.w	r3, r7, #28
 800426a:	4619      	mov	r1, r3
 800426c:	4810      	ldr	r0, [pc, #64]	; (80042b0 <MX_TIM2_Init+0xe8>)
 800426e:	f00f f97b 	bl	8013568 <HAL_TIMEx_MasterConfigSynchronization>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004278:	f7fe fce8 	bl	8002c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800427c:	2360      	movs	r3, #96	; 0x60
 800427e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004284:	2300      	movs	r3, #0
 8004286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800428c:	463b      	mov	r3, r7
 800428e:	220c      	movs	r2, #12
 8004290:	4619      	mov	r1, r3
 8004292:	4807      	ldr	r0, [pc, #28]	; (80042b0 <MX_TIM2_Init+0xe8>)
 8004294:	f00e fafe 	bl	8012894 <HAL_TIM_PWM_ConfigChannel>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800429e:	f7fe fcd5 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80042a2:	4803      	ldr	r0, [pc, #12]	; (80042b0 <MX_TIM2_Init+0xe8>)
 80042a4:	f000 f864 	bl	8004370 <HAL_TIM_MspPostInit>

}
 80042a8:	bf00      	nop
 80042aa:	3738      	adds	r7, #56	; 0x38
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	24001ed0 	.word	0x24001ed0

080042b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a29      	ldr	r2, [pc, #164]	; (8004368 <HAL_TIM_Base_MspInit+0xb4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d12f      	bne.n	8004326 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042c6:	4b29      	ldr	r3, [pc, #164]	; (800436c <HAL_TIM_Base_MspInit+0xb8>)
 80042c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042cc:	4a27      	ldr	r2, [pc, #156]	; (800436c <HAL_TIM_Base_MspInit+0xb8>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042d6:	4b25      	ldr	r3, [pc, #148]	; (800436c <HAL_TIM_Base_MspInit+0xb8>)
 80042d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80042e4:	2200      	movs	r2, #0
 80042e6:	2105      	movs	r1, #5
 80042e8:	2018      	movs	r0, #24
 80042ea:	f002 fc27 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80042ee:	2018      	movs	r0, #24
 80042f0:	f002 fc3e 	bl	8006b70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80042f4:	2200      	movs	r2, #0
 80042f6:	2105      	movs	r1, #5
 80042f8:	2019      	movs	r0, #25
 80042fa:	f002 fc1f 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80042fe:	2019      	movs	r0, #25
 8004300:	f002 fc36 	bl	8006b70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004304:	2200      	movs	r2, #0
 8004306:	2105      	movs	r1, #5
 8004308:	201a      	movs	r0, #26
 800430a:	f002 fc17 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800430e:	201a      	movs	r0, #26
 8004310:	f002 fc2e 	bl	8006b70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004314:	2200      	movs	r2, #0
 8004316:	2105      	movs	r1, #5
 8004318:	201b      	movs	r0, #27
 800431a:	f002 fc0f 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800431e:	201b      	movs	r0, #27
 8004320:	f002 fc26 	bl	8006b70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004324:	e01b      	b.n	800435e <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432e:	d116      	bne.n	800435e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <HAL_TIM_Base_MspInit+0xb8>)
 8004332:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004336:	4a0d      	ldr	r2, [pc, #52]	; (800436c <HAL_TIM_Base_MspInit+0xb8>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_TIM_Base_MspInit+0xb8>)
 8004342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800434e:	2200      	movs	r2, #0
 8004350:	2105      	movs	r1, #5
 8004352:	201c      	movs	r0, #28
 8004354:	f002 fbf2 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004358:	201c      	movs	r0, #28
 800435a:	f002 fc09 	bl	8006b70 <HAL_NVIC_EnableIRQ>
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000
 800436c:	58024400 	.word	0x58024400

08004370 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004378:	f107 0314 	add.w	r3, r7, #20
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a26      	ldr	r2, [pc, #152]	; (8004428 <HAL_TIM_MspPostInit+0xb8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d120      	bne.n	80043d4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004392:	4b26      	ldr	r3, [pc, #152]	; (800442c <HAL_TIM_MspPostInit+0xbc>)
 8004394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004398:	4a24      	ldr	r2, [pc, #144]	; (800442c <HAL_TIM_MspPostInit+0xbc>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043a2:	4b22      	ldr	r3, [pc, #136]	; (800442c <HAL_TIM_MspPostInit+0xbc>)
 80043a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b6:	2302      	movs	r3, #2
 80043b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043be:	2300      	movs	r3, #0
 80043c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043c2:	2301      	movs	r3, #1
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c6:	f107 0314 	add.w	r3, r7, #20
 80043ca:	4619      	mov	r1, r3
 80043cc:	4818      	ldr	r0, [pc, #96]	; (8004430 <HAL_TIM_MspPostInit+0xc0>)
 80043ce:	f006 f913 	bl	800a5f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80043d2:	e024      	b.n	800441e <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d11f      	bne.n	800441e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043de:	4b13      	ldr	r3, [pc, #76]	; (800442c <HAL_TIM_MspPostInit+0xbc>)
 80043e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043e4:	4a11      	ldr	r2, [pc, #68]	; (800442c <HAL_TIM_MspPostInit+0xbc>)
 80043e6:	f043 0302 	orr.w	r3, r3, #2
 80043ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <HAL_TIM_MspPostInit+0xbc>)
 80043f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004402:	2302      	movs	r3, #2
 8004404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440a:	2300      	movs	r3, #0
 800440c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800440e:	2301      	movs	r3, #1
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	4619      	mov	r1, r3
 8004418:	4806      	ldr	r0, [pc, #24]	; (8004434 <HAL_TIM_MspPostInit+0xc4>)
 800441a:	f006 f8ed 	bl	800a5f8 <HAL_GPIO_Init>
}
 800441e:	bf00      	nop
 8004420:	3728      	adds	r7, #40	; 0x28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	58024400 	.word	0x58024400
 8004430:	58020000 	.word	0x58020000
 8004434:	58020400 	.word	0x58020400

08004438 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004444:	4b21      	ldr	r3, [pc, #132]	; (80044cc <get_uptime+0x94>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 800444a:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <get_uptime+0x98>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004450:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <get_uptime+0x94>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	429a      	cmp	r2, r3
 8004458:	d005      	beq.n	8004466 <get_uptime+0x2e>
		ms = uptime_millis;
 800445a:	4b1c      	ldr	r3, [pc, #112]	; (80044cc <get_uptime+0x94>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004460:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <get_uptime+0x98>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800446c:	fb03 f202 	mul.w	r2, r3, r2
 8004470:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <get_uptime+0x98>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	3301      	adds	r3, #1
 8004476:	4917      	ldr	r1, [pc, #92]	; (80044d4 <get_uptime+0x9c>)
 8004478:	fba1 1303 	umull	r1, r3, r1, r3
 800447c:	099b      	lsrs	r3, r3, #6
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	fbb1 f3f3 	udiv	r3, r1, r3
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <get_uptime+0x5a>
		uptime = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	0e1b      	lsrs	r3, r3, #24
 8004496:	b2da      	uxtb	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	0c1a      	lsrs	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3301      	adds	r3, #1
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	0a1a      	lsrs	r2, r3, #8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3302      	adds	r3, #2
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3303      	adds	r3, #3
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	24001ae4 	.word	0x24001ae4
 80044d0:	e000e010 	.word	0xe000e010
 80044d4:	10624dd3 	.word	0x10624dd3

080044d8 <get_unix_time>:

void get_unix_time(uint8_t* buffer) {
 80044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044dc:	b09d      	sub	sp, #116	; 0x74
 80044de:	af00      	add	r7, sp, #0
 80044e0:	63f8      	str	r0, [r7, #60]	; 0x3c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80044e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044e6:	2200      	movs	r2, #0
 80044e8:	4619      	mov	r1, r3
 80044ea:	4893      	ldr	r0, [pc, #588]	; (8004738 <get_unix_time+0x260>)
 80044ec:	f00c fdbc 	bl	8011068 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80044f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044f4:	2200      	movs	r2, #0
 80044f6:	4619      	mov	r1, r3
 80044f8:	488f      	ldr	r0, [pc, #572]	; (8004738 <get_unix_time+0x260>)
 80044fa:	f00c fe99 	bl	8011230 <HAL_RTC_GetDate>
	uint16_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 80044fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004500:	f242 7210 	movw	r2, #10000	; 0x2710
 8004504:	1ad2      	subs	r2, r2, r3
 8004506:	4b8d      	ldr	r3, [pc, #564]	; (800473c <get_unix_time+0x264>)
 8004508:	fba3 2302 	umull	r2, r3, r3, r2
 800450c:	08db      	lsrs	r3, r3, #3
 800450e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60


	y = current_date.Year + 2000;
 800451e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004522:	b29b      	uxth	r3, r3
 8004524:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004528:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	m = current_date.Month;
 800452c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004530:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	d = current_date.Date;
 8004534:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004538:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 800453c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8004540:	2b02      	cmp	r3, #2
 8004542:	d809      	bhi.n	8004558 <get_unix_time+0x80>
	{
		m += 12;
 8004544:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8004548:	330c      	adds	r3, #12
 800454a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		y -= 1;
 800454e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004552:	3b01      	subs	r3, #1
 8004554:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 8004558:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800455c:	f240 136d 	movw	r3, #365	; 0x16d
 8004560:	fb03 f202 	mul.w	r2, r3, r2
 8004564:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	b29b      	uxth	r3, r3
 800456c:	18d1      	adds	r1, r2, r3
 800456e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8004572:	4b73      	ldr	r3, [pc, #460]	; (8004740 <get_unix_time+0x268>)
 8004574:	fba3 2302 	umull	r2, r3, r3, r2
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	b29b      	uxth	r3, r3
 800457c:	1ac9      	subs	r1, r1, r3
 800457e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8004582:	4b6f      	ldr	r3, [pc, #444]	; (8004740 <get_unix_time+0x268>)
 8004584:	fba3 2302 	umull	r2, r3, r3, r2
 8004588:	09db      	lsrs	r3, r3, #7
 800458a:	b29b      	uxth	r3, r3
 800458c:	440b      	add	r3, r1
 800458e:	17da      	asrs	r2, r3, #31
 8004590:	623b      	str	r3, [r7, #32]
 8004592:	627a      	str	r2, [r7, #36]	; 0x24
 8004594:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004598:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 800459c:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80045a0:	4613      	mov	r3, r2
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	4618      	mov	r0, r3
 80045aa:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	4613      	mov	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	1899      	adds	r1, r3, r2
 80045b6:	4b63      	ldr	r3, [pc, #396]	; (8004744 <get_unix_time+0x26c>)
 80045b8:	fb83 2301 	smull	r2, r3, r3, r1
 80045bc:	105a      	asrs	r2, r3, #1
 80045be:	17cb      	asrs	r3, r1, #31
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	18c2      	adds	r2, r0, r3
 80045c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045c8:	4413      	add	r3, r2
 80045ca:	17da      	asrs	r2, r3, #31
 80045cc:	633b      	str	r3, [r7, #48]	; 0x30
 80045ce:	637a      	str	r2, [r7, #52]	; 0x34
 80045d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80045d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045d6:	1851      	adds	r1, r2, r1
 80045d8:	61b9      	str	r1, [r7, #24]
 80045da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045dc:	eb43 0101 	adc.w	r1, r3, r1
 80045e0:	61f9      	str	r1, [r7, #28]
 80045e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045e6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 80045ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80045ee:	4956      	ldr	r1, [pc, #344]	; (8004748 <get_unix_time+0x270>)
 80045f0:	1851      	adds	r1, r2, r1
 80045f2:	6139      	str	r1, [r7, #16]
 80045f4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045fe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 8004602:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	1896      	adds	r6, r2, r2
 800460c:	60be      	str	r6, [r7, #8]
 800460e:	415b      	adcs	r3, r3
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004616:	eb12 0800 	adds.w	r8, r2, r0
 800461a:	eb43 0901 	adc.w	r9, r3, r1
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800462a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800462e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8004632:	ebb2 0408 	subs.w	r4, r2, r8
 8004636:	eb63 0509 	sbc.w	r5, r3, r9
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	012b      	lsls	r3, r5, #4
 8004644:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004648:	0122      	lsls	r2, r4, #4
 800464a:	ebb2 0a04 	subs.w	sl, r2, r4
 800464e:	eb63 0b05 	sbc.w	fp, r3, r5
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 800465e:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8004662:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8004666:	4692      	mov	sl, r2
 8004668:	469b      	mov	fp, r3
 800466a:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 800466e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004672:	461a      	mov	r2, r3
 8004674:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004678:	fb03 f202 	mul.w	r2, r3, r2
 800467c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004680:	4619      	mov	r1, r3
 8004682:	460b      	mov	r3, r1
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a5b      	subs	r3, r3, r1
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8004690:	4413      	add	r3, r2
 8004692:	2200      	movs	r2, #0
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
 8004696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004698:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800469c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80046a0:	4621      	mov	r1, r4
 80046a2:	1851      	adds	r1, r2, r1
 80046a4:	6039      	str	r1, [r7, #0]
 80046a6:	4629      	mov	r1, r5
 80046a8:	eb43 0101 	adc.w	r1, r3, r1
 80046ac:	6079      	str	r1, [r7, #4]
 80046ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80046b2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	buffer[0] = ((unix_tm_val >> 24) & 0xFF);
 80046b6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	0e02      	lsrs	r2, r0, #24
 80046c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80046c8:	0e0b      	lsrs	r3, r1, #24
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ce:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 16) & 0xFF);
 80046d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	0c02      	lsrs	r2, r0, #16
 80046de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80046e2:	0c0b      	lsrs	r3, r1, #16
 80046e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046e6:	3101      	adds	r1, #1
 80046e8:	b2d3      	uxtb	r3, r2
 80046ea:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 8) & 0xFF);
 80046ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	0a02      	lsrs	r2, r0, #8
 80046fa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80046fe:	0a0b      	lsrs	r3, r1, #8
 8004700:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004702:	3102      	adds	r1, #2
 8004704:	b2d3      	uxtb	r3, r2
 8004706:	700b      	strb	r3, [r1, #0]
	buffer[3] = unix_tm_val & 0xFF;
 8004708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470a:	3303      	adds	r3, #3
 800470c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004710:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((milliseconds >> 8) & 0xFF);
 8004712:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	b29a      	uxth	r2, r3
 800471a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471c:	3304      	adds	r3, #4
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]
	buffer[5] = milliseconds & 0xFF;
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	3305      	adds	r3, #5
 8004726:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
}
 800472e:	bf00      	nop
 8004730:	3774      	adds	r7, #116	; 0x74
 8004732:	46bd      	mov	sp, r7
 8004734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004738:	24001bd0 	.word	0x24001bd0
 800473c:	cccccccd 	.word	0xcccccccd
 8004740:	51eb851f 	.word	0x51eb851f
 8004744:	66666667 	.word	0x66666667
 8004748:	fff50537 	.word	0xfff50537

0800474c <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b08c      	sub	sp, #48	; 0x30
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	789b      	ldrb	r3, [r3, #2]
 8004760:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	78db      	ldrb	r3, [r3, #3]
 8004768:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	791b      	ldrb	r3, [r3, #4]
 8004770:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	795b      	ldrb	r3, [r3, #5]
 8004778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	799b      	ldrb	r3, [r3, #6]
 8004780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3307      	adds	r3, #7
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	b21a      	sxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3308      	adds	r3, #8
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	b21b      	sxth	r3, r3
 8004796:	4313      	orrs	r3, r2
 8004798:	b21b      	sxth	r3, r3
 800479a:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 800479c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80047a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80047a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80047ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80047b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80047b8:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 80047ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047be:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80047c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80047c4:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80047c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80047c8:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80047ca:	f107 0320 	add.w	r3, r7, #32
 80047ce:	2200      	movs	r2, #0
 80047d0:	4619      	mov	r1, r3
 80047d2:	480b      	ldr	r0, [pc, #44]	; (8004800 <calibrateRTC+0xb4>)
 80047d4:	f00c fca4 	bl	8011120 <HAL_RTC_SetDate>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80047de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <calibrateRTC+0x9e>
		Error_Handler();
 80047e6:	f7fe fa31 	bl	8002c4c <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80047ea:	f107 030c 	add.w	r3, r7, #12
 80047ee:	2200      	movs	r2, #0
 80047f0:	4619      	mov	r1, r3
 80047f2:	4803      	ldr	r0, [pc, #12]	; (8004800 <calibrateRTC+0xb4>)
 80047f4:	f000 f806 	bl	8004804 <RTC_SetTime>
}
 80047f8:	bf00      	nop
 80047fa:	3730      	adds	r7, #48	; 0x30
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	24001bd0 	.word	0x24001bd0

08004804 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <RTC_SetTime+0x1a>
 800481a:	2302      	movs	r3, #2
 800481c:	e051      	b.n	80048c2 <RTC_SetTime+0xbe>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	22ca      	movs	r2, #202	; 0xca
 8004834:	625a      	str	r2, [r3, #36]	; 0x24
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2253      	movs	r2, #83	; 0x53
 800483c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f00c fd68 	bl	8011314 <RTC_EnterInitMode>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8004848:	7dfb      	ldrb	r3, [r7, #23]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d129      	bne.n	80048a2 <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2200      	movs	r2, #0
 8004852:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f00c fdcd 	bl	80113f8 <RTC_ByteToBcd2>
 800485e:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8004860:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	4618      	mov	r0, r3
 8004868:	f00c fdc6 	bl	80113f8 <RTC_ByteToBcd2>
 800486c:	4603      	mov	r3, r0
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	789b      	ldrb	r3, [r3, #2]
 8004876:	4618      	mov	r0, r3
 8004878:	f00c fdbe 	bl	80113f8 <RTC_ByteToBcd2>
 800487c:	4603      	mov	r3, r0
 800487e:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	78db      	ldrb	r3, [r3, #3]
 8004886:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	6939      	ldr	r1, [r7, #16]
 8004892:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <RTC_SetTime+0xc8>)
 8004894:	400b      	ands	r3, r1
 8004896:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f00c fd6f 	bl	801137c <RTC_ExitInitMode>
 800489e:	4603      	mov	r3, r0
 80048a0:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	22ff      	movs	r2, #255	; 0xff
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]

}
 80048c2:	4618      	mov	r0, r3
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd90      	pop	{r4, r7, pc}
 80048ca:	bf00      	nop
 80048cc:	007f7f7f 	.word	0x007f7f7f

080048d0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048d4:	4b30      	ldr	r3, [pc, #192]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 80048d6:	4a31      	ldr	r2, [pc, #196]	; (800499c <MX_USART1_UART_Init+0xcc>)
 80048d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80048da:	4b2f      	ldr	r3, [pc, #188]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 80048dc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80048e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048e2:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048ee:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048f4:	4b28      	ldr	r3, [pc, #160]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 80048f6:	220c      	movs	r2, #12
 80048f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004900:	4b25      	ldr	r3, [pc, #148]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 8004902:	2200      	movs	r2, #0
 8004904:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004906:	4b24      	ldr	r3, [pc, #144]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 8004908:	2200      	movs	r2, #0
 800490a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800490c:	4b22      	ldr	r3, [pc, #136]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 800490e:	2200      	movs	r2, #0
 8004910:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004912:	4b21      	ldr	r3, [pc, #132]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 8004914:	2200      	movs	r2, #0
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004918:	481f      	ldr	r0, [pc, #124]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 800491a:	f00e ff4f 	bl	80137bc <HAL_UART_Init>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004924:	f7fe f992 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004928:	2100      	movs	r1, #0
 800492a:	481b      	ldr	r0, [pc, #108]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 800492c:	f011 fc95 	bl	801625a <HAL_UARTEx_SetTxFifoThreshold>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004936:	f7fe f989 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800493a:	2100      	movs	r1, #0
 800493c:	4816      	ldr	r0, [pc, #88]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 800493e:	f011 fcca 	bl	80162d6 <HAL_UARTEx_SetRxFifoThreshold>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004948:	f7fe f980 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800494c:	4812      	ldr	r0, [pc, #72]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 800494e:	f011 fc4b 	bl	80161e8 <HAL_UARTEx_DisableFifoMode>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004958:	f7fe f978 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 800495c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004960:	480d      	ldr	r0, [pc, #52]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 8004962:	f011 fcb8 	bl	80162d6 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8004966:	480c      	ldr	r0, [pc, #48]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 8004968:	f011 fc03 	bl	8016172 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 800496c:	480a      	ldr	r0, [pc, #40]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 800496e:	f011 fbcd 	bl	801610c <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004980:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8004982:	4b05      	ldr	r3, [pc, #20]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	4b03      	ldr	r3, [pc, #12]	; (8004998 <MX_USART1_UART_Init+0xc8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004990:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	24001f1c 	.word	0x24001f1c
 800499c:	40011000 	.word	0x40011000

080049a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b0ba      	sub	sp, #232	; 0xe8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049b8:	f107 0310 	add.w	r3, r7, #16
 80049bc:	22c0      	movs	r2, #192	; 0xc0
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f015 f8bb 	bl	8019b3c <memset>
  if(uartHandle->Instance==USART1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a41      	ldr	r2, [pc, #260]	; (8004ad0 <HAL_UART_MspInit+0x130>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d17b      	bne.n	8004ac8 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80049d0:	f04f 0201 	mov.w	r2, #1
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80049dc:	2318      	movs	r3, #24
 80049de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049e2:	f107 0310 	add.w	r3, r7, #16
 80049e6:	4618      	mov	r0, r3
 80049e8:	f009 fd20 	bl	800e42c <HAL_RCCEx_PeriphCLKConfig>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80049f2:	f7fe f92b 	bl	8002c4c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049f6:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <HAL_UART_MspInit+0x134>)
 80049f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049fc:	4a35      	ldr	r2, [pc, #212]	; (8004ad4 <HAL_UART_MspInit+0x134>)
 80049fe:	f043 0310 	orr.w	r3, r3, #16
 8004a02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a06:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <HAL_UART_MspInit+0x134>)
 8004a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a14:	4b2f      	ldr	r3, [pc, #188]	; (8004ad4 <HAL_UART_MspInit+0x134>)
 8004a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a1a:	4a2e      	ldr	r2, [pc, #184]	; (8004ad4 <HAL_UART_MspInit+0x134>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a24:	4b2b      	ldr	r3, [pc, #172]	; (8004ad4 <HAL_UART_MspInit+0x134>)
 8004a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a4c:	2307      	movs	r3, #7
 8004a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004a56:	4619      	mov	r1, r3
 8004a58:	481f      	ldr	r0, [pc, #124]	; (8004ad8 <HAL_UART_MspInit+0x138>)
 8004a5a:	f005 fdcd 	bl	800a5f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8004a5e:	4b1f      	ldr	r3, [pc, #124]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a60:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <HAL_UART_MspInit+0x140>)
 8004a62:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004a64:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a66:	222a      	movs	r2, #42	; 0x2a
 8004a68:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a6c:	2240      	movs	r2, #64	; 0x40
 8004a6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a76:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a7e:	4b17      	ldr	r3, [pc, #92]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a84:	4b15      	ldr	r3, [pc, #84]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a90:	4b12      	ldr	r3, [pc, #72]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a96:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004a9c:	480f      	ldr	r0, [pc, #60]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004a9e:	f002 fc7b 	bl	8007398 <HAL_DMA_Init>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004aa8:	f7fe f8d0 	bl	8002c4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a0b      	ldr	r2, [pc, #44]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004ab0:	67da      	str	r2, [r3, #124]	; 0x7c
 8004ab2:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <HAL_UART_MspInit+0x13c>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2105      	movs	r1, #5
 8004abc:	2025      	movs	r0, #37	; 0x25
 8004abe:	f002 f83d 	bl	8006b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ac2:	2025      	movs	r0, #37	; 0x25
 8004ac4:	f002 f854 	bl	8006b70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004ac8:	bf00      	nop
 8004aca:	37e8      	adds	r7, #232	; 0xe8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40011000 	.word	0x40011000
 8004ad4:	58024400 	.word	0x58024400
 8004ad8:	58020000 	.word	0x58020000
 8004adc:	24001fb0 	.word	0x24001fb0
 8004ae0:	40020040 	.word	0x40020040

08004ae4 <set_rail_monitor_enable>:

	return status;
}


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	460a      	mov	r2, r1
 8004aee:	71fb      	strb	r3, [r7, #7]
 8004af0:	4613      	mov	r3, r2
 8004af2:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	4a07      	ldr	r2, [pc, #28]	; (8004b18 <set_rail_monitor_enable+0x34>)
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	4413      	add	r3, r2
 8004b00:	3302      	adds	r3, #2
 8004b02:	79ba      	ldrb	r2, [r7, #6]
 8004b04:	701a      	strb	r2, [r3, #0]
	status = 1;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]

	return status;
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	24002028 	.word	0x24002028

08004b1c <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8004b28:	463b      	mov	r3, r7
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fd02 	bl	8003534 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8004b30:	f107 0310 	add.w	r3, r7, #16
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe fd2d 	bl	8003594 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8004b3a:	f107 0308 	add.w	r3, r7, #8
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fd7a 	bl	8003638 <sample_hk_adc3>
 8004b44:	893a      	ldrh	r2, [r7, #8]


	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[0], sizeof(uint16_t));
 8004b46:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b48:	809a      	strh	r2, [r3, #4]
 8004b4a:	897a      	ldrh	r2, [r7, #10]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[1], sizeof(uint16_t));
 8004b4c:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b4e:	829a      	strh	r2, [r3, #20]
 8004b50:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8004b52:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b54:	849a      	strh	r2, [r3, #36]	; 0x24
 8004b56:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b5a:	869a      	strh	r2, [r3, #52]	; 0x34
 8004b5c:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8004b64:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8004b66:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8004b6c:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8004b6e:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b70:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8004b74:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b78:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8004b7c:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8004b7e:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b80:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8004b84:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8004b86:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b88:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8004b8c:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b90:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8004b94:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <set_rail_monitor+0xc4>)
 8004b98:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8004b9c:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8004b9e:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <set_rail_monitor+0xc4>)
 8004ba0:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8004ba4:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <set_rail_monitor+0xc4>)
 8004ba8:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8004bac:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8004bae:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <set_rail_monitor+0xc4>)
 8004bb0:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 8004bb4:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <set_rail_monitor+0xc4>)
 8004bb8:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8004bbc:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <set_rail_monitor+0xc4>)
 8004bc0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8004bc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <set_rail_monitor+0xc4>)
 8004bc8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114

	status = 1;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8004bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3728      	adds	r7, #40	; 0x28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	24002028 	.word	0x24002028

08004be4 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
	return rail_monitor;
 8004be8:	4b02      	ldr	r3, [pc, #8]	; (8004bf4 <get_rail_monitor+0x10>)
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	24002028 	.word	0x24002028

08004bf8 <convert_ADT7410>:

int16_t convert_ADT7410(int16_t raw) {
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	80fb      	strh	r3, [r7, #6]
    float ret = raw;
 8004c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c0e:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw >= 0x1000) {
 8004c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1a:	db07      	blt.n	8004c2c <convert_ADT7410+0x34>
        ret -= 8192;
 8004c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c20:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004c54 <convert_ADT7410+0x5c>
 8004c24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c28:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return ret / 16.0;
 8004c2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004c34:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8004c38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004c3c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004c40:	ee17 3a90 	vmov	r3, s15
 8004c44:	b21b      	sxth	r3, r3
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	46000000 	.word	0x46000000

08004c58 <in_range>:

uint8_t in_range(VOLTAGE_RAIL_NAME name, uint16_t raw, int min, int max) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60ba      	str	r2, [r7, #8]
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	4603      	mov	r3, r0
 8004c64:	73fb      	strb	r3, [r7, #15]
 8004c66:	460b      	mov	r3, r1
 8004c68:	81bb      	strh	r3, [r7, #12]
	if (name == RAIL_TEMP1 || name == RAIL_TEMP2 || name == RAIL_TEMP3 || name == RAIL_TEMP4){
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d008      	beq.n	8004c82 <in_range+0x2a>
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d005      	beq.n	8004c82 <in_range+0x2a>
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d002      	beq.n	8004c82 <in_range+0x2a>
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d124      	bne.n	8004ccc <in_range+0x74>
		int16_t converted_max = convert_ADT7410(max);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	b21b      	sxth	r3, r3
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ffb6 	bl	8004bf8 <convert_ADT7410>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	82fb      	strh	r3, [r7, #22]
		int16_t converted_min = convert_ADT7410(min);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	b21b      	sxth	r3, r3
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff ffaf 	bl	8004bf8 <convert_ADT7410>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	82bb      	strh	r3, [r7, #20]
		int16_t converted_raw = convert_ADT7410(raw);
 8004c9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff ffa8 	bl	8004bf8 <convert_ADT7410>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	827b      	strh	r3, [r7, #18]
		if (converted_raw <= converted_max && converted_raw >= converted_min) {
 8004cac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004cb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	dc07      	bgt.n	8004cc8 <in_range+0x70>
 8004cb8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004cbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	db01      	blt.n	8004cc8 <in_range+0x70>
			return 1;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e00c      	b.n	8004ce2 <in_range+0x8a>
		}
		return 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e00a      	b.n	8004ce2 <in_range+0x8a>
	}

	if (raw <= max && raw >= min) {
 8004ccc:	89bb      	ldrh	r3, [r7, #12]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	db05      	blt.n	8004ce0 <in_range+0x88>
 8004cd4:	89bb      	ldrh	r3, [r7, #12]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	dc01      	bgt.n	8004ce0 <in_range+0x88>
		return 1;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <in_range+0x8a>
	}
	return 0;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	0000      	movs	r0, r0
 8004cec:	0000      	movs	r0, r0
	...

08004cf0 <monitor_rails>:


void monitor_rails() {
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e140      	b.n	8004f7e <monitor_rails+0x28e>
		if (rail_monitor[i].is_enabled){
 8004cfc:	4aa6      	ldr	r2, [pc, #664]	; (8004f98 <monitor_rails+0x2a8>)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	4413      	add	r3, r2
 8004d04:	3302      	adds	r3, #2
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8099 	beq.w	8004e40 <monitor_rails+0x150>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].name, rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8004d0e:	4aa2      	ldr	r2, [pc, #648]	; (8004f98 <monitor_rails+0x2a8>)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	4413      	add	r3, r2
 8004d16:	7818      	ldrb	r0, [r3, #0]
 8004d18:	4a9f      	ldr	r2, [pc, #636]	; (8004f98 <monitor_rails+0x2a8>)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	4413      	add	r3, r2
 8004d20:	3304      	adds	r3, #4
 8004d22:	8819      	ldrh	r1, [r3, #0]
 8004d24:	4a9c      	ldr	r2, [pc, #624]	; (8004f98 <monitor_rails+0x2a8>)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	461c      	mov	r4, r3
 8004d32:	4a99      	ldr	r2, [pc, #612]	; (8004f98 <monitor_rails+0x2a8>)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	4413      	add	r3, r2
 8004d3a:	3306      	adds	r3, #6
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	4622      	mov	r2, r4
 8004d40:	f7ff ff8a 	bl	8004c58 <in_range>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f040 8116 	bne.w	8004f78 <monitor_rails+0x288>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8004d4c:	4a92      	ldr	r2, [pc, #584]	; (8004f98 <monitor_rails+0x2a8>)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	4413      	add	r3, r2
 8004d54:	3301      	adds	r3, #1
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	b2d9      	uxtb	r1, r3
 8004d5c:	4a8e      	ldr	r2, [pc, #568]	; (8004f98 <monitor_rails+0x2a8>)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	4413      	add	r3, r2
 8004d64:	3301      	adds	r3, #1
 8004d66:	460a      	mov	r2, r1
 8004d68:	701a      	strb	r2, [r3, #0]

				// Store the voltage each time a rail goes out of bounds
				switch (rail_monitor[i].error_count) {
 8004d6a:	4a8b      	ldr	r2, [pc, #556]	; (8004f98 <monitor_rails+0x2a8>)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	4413      	add	r3, r2
 8004d72:	3301      	adds	r3, #1
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d022      	beq.n	8004dc0 <monitor_rails+0xd0>
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	dc2e      	bgt.n	8004ddc <monitor_rails+0xec>
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d002      	beq.n	8004d88 <monitor_rails+0x98>
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d00e      	beq.n	8004da4 <monitor_rails+0xb4>
					break;
				case 3:
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
					break;
				default:
					break;
 8004d86:	e029      	b.n	8004ddc <monitor_rails+0xec>
					rail_monitor[i].OOB_1 = rail_monitor[i].data;
 8004d88:	4a83      	ldr	r2, [pc, #524]	; (8004f98 <monitor_rails+0x2a8>)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	4413      	add	r3, r2
 8004d90:	3304      	adds	r3, #4
 8004d92:	8819      	ldrh	r1, [r3, #0]
 8004d94:	4a80      	ldr	r2, [pc, #512]	; (8004f98 <monitor_rails+0x2a8>)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	4413      	add	r3, r2
 8004d9c:	330a      	adds	r3, #10
 8004d9e:	460a      	mov	r2, r1
 8004da0:	801a      	strh	r2, [r3, #0]
					break;
 8004da2:	e01c      	b.n	8004dde <monitor_rails+0xee>
					rail_monitor[i].OOB_2 = rail_monitor[i].data;
 8004da4:	4a7c      	ldr	r2, [pc, #496]	; (8004f98 <monitor_rails+0x2a8>)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	4413      	add	r3, r2
 8004dac:	3304      	adds	r3, #4
 8004dae:	8819      	ldrh	r1, [r3, #0]
 8004db0:	4a79      	ldr	r2, [pc, #484]	; (8004f98 <monitor_rails+0x2a8>)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	4413      	add	r3, r2
 8004db8:	330c      	adds	r3, #12
 8004dba:	460a      	mov	r2, r1
 8004dbc:	801a      	strh	r2, [r3, #0]
					break;
 8004dbe:	e00e      	b.n	8004dde <monitor_rails+0xee>
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
 8004dc0:	4a75      	ldr	r2, [pc, #468]	; (8004f98 <monitor_rails+0x2a8>)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3304      	adds	r3, #4
 8004dca:	8819      	ldrh	r1, [r3, #0]
 8004dcc:	4a72      	ldr	r2, [pc, #456]	; (8004f98 <monitor_rails+0x2a8>)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	4413      	add	r3, r2
 8004dd4:	330e      	adds	r3, #14
 8004dd6:	460a      	mov	r2, r1
 8004dd8:	801a      	strh	r2, [r3, #0]
					break;
 8004dda:	e000      	b.n	8004dde <monitor_rails+0xee>
					break;
 8004ddc:	bf00      	nop
				}

				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8004dde:	4a6e      	ldr	r2, [pc, #440]	; (8004f98 <monitor_rails+0x2a8>)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	4413      	add	r3, r2
 8004de6:	3301      	adds	r3, #1
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	f040 80c4 	bne.w	8004f78 <monitor_rails+0x288>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8004df0:	4a69      	ldr	r2, [pc, #420]	; (8004f98 <monitor_rails+0x2a8>)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	4413      	add	r3, r2
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f8ce 	bl	8004f9c <get_rail_name_error_detail>
 8004e00:	4603      	mov	r3, r0
 8004e02:	727b      	strb	r3, [r7, #9]
					error.category = EC_power_supply_rail;
 8004e04:	2300      	movs	r3, #0
 8004e06:	723b      	strb	r3, [r7, #8]
					error.OOB_1 = rail_monitor[i].OOB_1;
 8004e08:	4a63      	ldr	r2, [pc, #396]	; (8004f98 <monitor_rails+0x2a8>)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	4413      	add	r3, r2
 8004e10:	330a      	adds	r3, #10
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	817b      	strh	r3, [r7, #10]
					error.OOB_2 = rail_monitor[i].OOB_2;
 8004e16:	4a60      	ldr	r2, [pc, #384]	; (8004f98 <monitor_rails+0x2a8>)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	4413      	add	r3, r2
 8004e1e:	330c      	adds	r3, #12
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	81bb      	strh	r3, [r7, #12]
					error.OOB_3 = rail_monitor[i].OOB_3;
 8004e24:	4a5c      	ldr	r2, [pc, #368]	; (8004f98 <monitor_rails+0x2a8>)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	4413      	add	r3, r2
 8004e2c:	330e      	adds	r3, #14
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	81fb      	strh	r3, [r7, #14]

					handle_error(error);
 8004e32:	f107 0308 	add.w	r3, r7, #8
 8004e36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e3a:	f7fc faad 	bl	8001398 <handle_error>
 8004e3e:	e09b      	b.n	8004f78 <monitor_rails+0x288>
			}
		}
		// If the rail monitor isn't enabled...
		else {
			uint16_t tolerance;
			tolerance = rail_monitor[i].max_voltage * 0.1;
 8004e40:	4a55      	ldr	r2, [pc, #340]	; (8004f98 <monitor_rails+0x2a8>)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	4413      	add	r3, r2
 8004e48:	3306      	adds	r3, #6
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e54:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8004f90 <monitor_rails+0x2a0>
 8004e58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004e60:	ee17 3a90 	vmov	r3, s15
 8004e64:	827b      	strh	r3, [r7, #18]

			// If it isn't within +10% of its max voltage from 0...
			if (!in_range(rail_monitor[i].name, rail_monitor[i].data, 0, tolerance)) {
 8004e66:	4a4c      	ldr	r2, [pc, #304]	; (8004f98 <monitor_rails+0x2a8>)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	4413      	add	r3, r2
 8004e6e:	7818      	ldrb	r0, [r3, #0]
 8004e70:	4a49      	ldr	r2, [pc, #292]	; (8004f98 <monitor_rails+0x2a8>)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	4413      	add	r3, r2
 8004e78:	3304      	adds	r3, #4
 8004e7a:	8819      	ldrh	r1, [r3, #0]
 8004e7c:	8a7b      	ldrh	r3, [r7, #18]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f7ff feea 	bl	8004c58 <in_range>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d176      	bne.n	8004f78 <monitor_rails+0x288>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8004e8a:	4a43      	ldr	r2, [pc, #268]	; (8004f98 <monitor_rails+0x2a8>)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	4413      	add	r3, r2
 8004e92:	3301      	adds	r3, #1
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	b2d9      	uxtb	r1, r3
 8004e9a:	4a3f      	ldr	r2, [pc, #252]	; (8004f98 <monitor_rails+0x2a8>)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	460a      	mov	r2, r1
 8004ea6:	701a      	strb	r2, [r3, #0]

				// Store the voltage each time a rail goes out of bounds
				switch (rail_monitor[i].error_count) {
 8004ea8:	4a3b      	ldr	r2, [pc, #236]	; (8004f98 <monitor_rails+0x2a8>)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	4413      	add	r3, r2
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d022      	beq.n	8004efe <monitor_rails+0x20e>
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	dc2e      	bgt.n	8004f1a <monitor_rails+0x22a>
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d002      	beq.n	8004ec6 <monitor_rails+0x1d6>
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d00e      	beq.n	8004ee2 <monitor_rails+0x1f2>
					break;
				case 3:
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
					break;
				default:
					break;
 8004ec4:	e029      	b.n	8004f1a <monitor_rails+0x22a>
					rail_monitor[i].OOB_1 = rail_monitor[i].data;
 8004ec6:	4a34      	ldr	r2, [pc, #208]	; (8004f98 <monitor_rails+0x2a8>)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	4413      	add	r3, r2
 8004ece:	3304      	adds	r3, #4
 8004ed0:	8819      	ldrh	r1, [r3, #0]
 8004ed2:	4a31      	ldr	r2, [pc, #196]	; (8004f98 <monitor_rails+0x2a8>)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	4413      	add	r3, r2
 8004eda:	330a      	adds	r3, #10
 8004edc:	460a      	mov	r2, r1
 8004ede:	801a      	strh	r2, [r3, #0]
					break;
 8004ee0:	e01c      	b.n	8004f1c <monitor_rails+0x22c>
					rail_monitor[i].OOB_2 = rail_monitor[i].data;
 8004ee2:	4a2d      	ldr	r2, [pc, #180]	; (8004f98 <monitor_rails+0x2a8>)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	4413      	add	r3, r2
 8004eea:	3304      	adds	r3, #4
 8004eec:	8819      	ldrh	r1, [r3, #0]
 8004eee:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <monitor_rails+0x2a8>)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	4413      	add	r3, r2
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	460a      	mov	r2, r1
 8004efa:	801a      	strh	r2, [r3, #0]
					break;
 8004efc:	e00e      	b.n	8004f1c <monitor_rails+0x22c>
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
 8004efe:	4a26      	ldr	r2, [pc, #152]	; (8004f98 <monitor_rails+0x2a8>)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	4413      	add	r3, r2
 8004f06:	3304      	adds	r3, #4
 8004f08:	8819      	ldrh	r1, [r3, #0]
 8004f0a:	4a23      	ldr	r2, [pc, #140]	; (8004f98 <monitor_rails+0x2a8>)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	4413      	add	r3, r2
 8004f12:	330e      	adds	r3, #14
 8004f14:	460a      	mov	r2, r1
 8004f16:	801a      	strh	r2, [r3, #0]
					break;
 8004f18:	e000      	b.n	8004f1c <monitor_rails+0x22c>
					break;
 8004f1a:	bf00      	nop
				}

				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8004f1c:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <monitor_rails+0x2a8>)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	4413      	add	r3, r2
 8004f24:	3301      	adds	r3, #1
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d125      	bne.n	8004f78 <monitor_rails+0x288>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8004f2c:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <monitor_rails+0x2a8>)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	4413      	add	r3, r2
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f830 	bl	8004f9c <get_rail_name_error_detail>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 8004f40:	2300      	movs	r3, #0
 8004f42:	703b      	strb	r3, [r7, #0]
					error.OOB_1 = rail_monitor[i].OOB_1;
 8004f44:	4a14      	ldr	r2, [pc, #80]	; (8004f98 <monitor_rails+0x2a8>)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	4413      	add	r3, r2
 8004f4c:	330a      	adds	r3, #10
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	807b      	strh	r3, [r7, #2]
					error.OOB_2 = rail_monitor[i].OOB_2;
 8004f52:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <monitor_rails+0x2a8>)
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	4413      	add	r3, r2
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	80bb      	strh	r3, [r7, #4]
					error.OOB_3 = rail_monitor[i].OOB_3;
 8004f60:	4a0d      	ldr	r2, [pc, #52]	; (8004f98 <monitor_rails+0x2a8>)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	4413      	add	r3, r2
 8004f68:	330e      	adds	r3, #14
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	80fb      	strh	r3, [r7, #6]
					handle_error(error);
 8004f6e:	463b      	mov	r3, r7
 8004f70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f74:	f7fc fa10 	bl	8001398 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b11      	cmp	r3, #17
 8004f82:	f77f aebb 	ble.w	8004cfc <monitor_rails+0xc>
				}
			}
		}
	}
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd90      	pop	{r4, r7, pc}
 8004f90:	9999999a 	.word	0x9999999a
 8004f94:	3fb99999 	.word	0x3fb99999
 8004f98:	24002028 	.word	0x24002028

08004f9c <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	2b11      	cmp	r3, #17
 8004faa:	d84b      	bhi.n	8005044 <get_rail_name_error_detail+0xa8>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <get_rail_name_error_detail+0x18>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004ffd 	.word	0x08004ffd
 8004fb8:	08005001 	.word	0x08005001
 8004fbc:	08005005 	.word	0x08005005
 8004fc0:	08005009 	.word	0x08005009
 8004fc4:	0800500d 	.word	0x0800500d
 8004fc8:	08005011 	.word	0x08005011
 8004fcc:	08005015 	.word	0x08005015
 8004fd0:	08005019 	.word	0x08005019
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	08005021 	.word	0x08005021
 8004fdc:	08005025 	.word	0x08005025
 8004fe0:	08005029 	.word	0x08005029
 8004fe4:	0800502d 	.word	0x0800502d
 8004fe8:	08005031 	.word	0x08005031
 8004fec:	08005035 	.word	0x08005035
 8004ff0:	08005039 	.word	0x08005039
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	08005041 	.word	0x08005041
	case RAIL_vsense:
		return ED_vsense;
 8004ffc:	2306      	movs	r3, #6
 8004ffe:	e022      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8005000:	2307      	movs	r3, #7
 8005002:	e020      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8005004:	2308      	movs	r3, #8
 8005006:	e01e      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8005008:	2309      	movs	r3, #9
 800500a:	e01c      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 800500c:	230a      	movs	r3, #10
 800500e:	e01a      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8005010:	230b      	movs	r3, #11
 8005012:	e018      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8005014:	230c      	movs	r3, #12
 8005016:	e016      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8005018:	230d      	movs	r3, #13
 800501a:	e014      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 800501c:	230e      	movs	r3, #14
 800501e:	e012      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8005020:	230f      	movs	r3, #15
 8005022:	e010      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8005024:	2310      	movs	r3, #16
 8005026:	e00e      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8005028:	2311      	movs	r3, #17
 800502a:	e00c      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 800502c:	2312      	movs	r3, #18
 800502e:	e00a      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8005030:	2313      	movs	r3, #19
 8005032:	e008      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8005034:	2314      	movs	r3, #20
 8005036:	e006      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8005038:	2315      	movs	r3, #21
 800503a:	e004      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 800503c:	2316      	movs	r3, #22
 800503e:	e002      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8005040:	2317      	movs	r3, #23
 8005042:	e000      	b.n	8005046 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005044:	231c      	movs	r3, #28
	}
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop

08005054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800508c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005058:	f7fe ff80 	bl	8003f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800505c:	480c      	ldr	r0, [pc, #48]	; (8005090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800505e:	490d      	ldr	r1, [pc, #52]	; (8005094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005060:	4a0d      	ldr	r2, [pc, #52]	; (8005098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005064:	e002      	b.n	800506c <LoopCopyDataInit>

08005066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800506a:	3304      	adds	r3, #4

0800506c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800506c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800506e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005070:	d3f9      	bcc.n	8005066 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005072:	4a0a      	ldr	r2, [pc, #40]	; (800509c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005074:	4c0a      	ldr	r4, [pc, #40]	; (80050a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005078:	e001      	b.n	800507e <LoopFillZerobss>

0800507a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800507a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800507c:	3204      	adds	r2, #4

0800507e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800507e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005080:	d3fb      	bcc.n	800507a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005082:	f014 fd29 	bl	8019ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005086:	f7fd fc07 	bl	8002898 <main>
  bx  lr
 800508a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800508c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005090:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005094:	24000140 	.word	0x24000140
  ldr r2, =_sidata
 8005098:	0801aa08 	.word	0x0801aa08
  ldr r2, =_sbss
 800509c:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 80050a0:	24006ac8 	.word	0x24006ac8

080050a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050a4:	e7fe      	b.n	80050a4 <ADC3_IRQHandler>
	...

080050a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050ae:	2003      	movs	r0, #3
 80050b0:	f001 fd39 	bl	8006b26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050b4:	f008 ffa2 	bl	800dffc <HAL_RCC_GetSysClockFreq>
 80050b8:	4602      	mov	r2, r0
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <HAL_Init+0x68>)
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	4913      	ldr	r1, [pc, #76]	; (8005114 <HAL_Init+0x6c>)
 80050c6:	5ccb      	ldrb	r3, [r1, r3]
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
 80050d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050d2:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <HAL_Init+0x68>)
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <HAL_Init+0x6c>)
 80050dc:	5cd3      	ldrb	r3, [r2, r3]
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
 80050e8:	4a0b      	ldr	r2, [pc, #44]	; (8005118 <HAL_Init+0x70>)
 80050ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <HAL_Init+0x74>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050f2:	2005      	movs	r0, #5
 80050f4:	f7fe fd12 	bl	8003b1c <HAL_InitTick>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e002      	b.n	8005108 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005102:	f7fe fced 	bl	8003ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	58024400 	.word	0x58024400
 8005114:	0801a954 	.word	0x0801a954
 8005118:	240000cc 	.word	0x240000cc
 800511c:	240000c8 	.word	0x240000c8

08005120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_IncTick+0x20>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_IncTick+0x24>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4413      	add	r3, r2
 8005130:	4a04      	ldr	r2, [pc, #16]	; (8005144 <HAL_IncTick+0x24>)
 8005132:	6013      	str	r3, [r2, #0]
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	240000d4 	.word	0x240000d4
 8005144:	24002148 	.word	0x24002148

08005148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  return uwTick;
 800514c:	4b03      	ldr	r3, [pc, #12]	; (800515c <HAL_GetTick+0x14>)
 800514e:	681b      	ldr	r3, [r3, #0]
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	24002148 	.word	0x24002148

08005160 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005164:	4b03      	ldr	r3, [pc, #12]	; (8005174 <HAL_GetREVID+0x14>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	0c1b      	lsrs	r3, r3, #16
}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	5c001000 	.word	0x5c001000

08005178 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005182:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	43db      	mvns	r3, r3
 800518a:	401a      	ands	r2, r3
 800518c:	4904      	ldr	r1, [pc, #16]	; (80051a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	4313      	orrs	r3, r2
 8005192:	604b      	str	r3, [r1, #4]
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	58000400 	.word	0x58000400

080051a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	609a      	str	r2, [r3, #8]
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	609a      	str	r2, [r3, #8]
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3360      	adds	r3, #96	; 0x60
 800521e:	461a      	mov	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	430b      	orrs	r3, r1
 800523a:	431a      	orrs	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	611a      	str	r2, [r3, #16]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800527e:	b480      	push	{r7}
 8005280:	b087      	sub	sp, #28
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3360      	adds	r3, #96	; 0x60
 800528e:	461a      	mov	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	601a      	str	r2, [r3, #0]
  }
}
 80052a8:	bf00      	nop
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80052da:	b480      	push	{r7}
 80052dc:	b087      	sub	sp, #28
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3330      	adds	r3, #48	; 0x30
 80052ea:	461a      	mov	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	4413      	add	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	211f      	movs	r1, #31
 8005306:	fa01 f303 	lsl.w	r3, r1, r3
 800530a:	43db      	mvns	r3, r3
 800530c:	401a      	ands	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	0e9b      	lsrs	r3, r3, #26
 8005312:	f003 011f 	and.w	r1, r3, #31
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	fa01 f303 	lsl.w	r3, r1, r3
 8005320:	431a      	orrs	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f023 0203 	bic.w	r2, r3, #3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3314      	adds	r3, #20
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	0e5b      	lsrs	r3, r3, #25
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	4413      	add	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	0d1b      	lsrs	r3, r3, #20
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	2107      	movs	r1, #7
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	43db      	mvns	r3, r3
 800538c:	401a      	ands	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	0d1b      	lsrs	r3, r3, #20
 8005392:	f003 031f 	and.w	r3, r3, #31
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	fa01 f303 	lsl.w	r3, r1, r3
 800539c:	431a      	orrs	r2, r3
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053c8:	43db      	mvns	r3, r3
 80053ca:	401a      	ands	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f003 0318 	and.w	r3, r3, #24
 80053d2:	4908      	ldr	r1, [pc, #32]	; (80053f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80053d4:	40d9      	lsrs	r1, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	400b      	ands	r3, r1
 80053da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053de:	431a      	orrs	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	000fffff 	.word	0x000fffff

080053f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 031f 	and.w	r3, r3, #31
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	4b04      	ldr	r3, [pc, #16]	; (8005434 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005422:	4013      	ands	r3, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6093      	str	r3, [r2, #8]
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	5fffffc0 	.word	0x5fffffc0

08005438 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800544c:	d101      	bne.n	8005452 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <LL_ADC_EnableInternalRegulator+0x24>)
 800546e:	4013      	ands	r3, r2
 8005470:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	6fffffc0 	.word	0x6fffffc0

08005488 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005498:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800549c:	d101      	bne.n	80054a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <LL_ADC_Enable+0x24>)
 80054be:	4013      	ands	r3, r2
 80054c0:	f043 0201 	orr.w	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	7fffffc0 	.word	0x7fffffc0

080054d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <LL_ADC_Disable+0x24>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	f043 0202 	orr.w	r2, r3, #2
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	7fffffc0 	.word	0x7fffffc0

08005500 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <LL_ADC_IsEnabled+0x18>
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <LL_ADC_IsEnabled+0x1a>
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b02      	cmp	r3, #2
 8005538:	d101      	bne.n	800553e <LL_ADC_IsDisableOngoing+0x18>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <LL_ADC_IsDisableOngoing+0x1a>
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <LL_ADC_REG_StartConversion+0x24>)
 800555a:	4013      	ands	r3, r2
 800555c:	f043 0204 	orr.w	r2, r3, #4
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	7fffffc0 	.word	0x7fffffc0

08005574 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b04      	cmp	r3, #4
 8005586:	d101      	bne.n	800558c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d101      	bne.n	80055b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e18f      	b.n	80058fa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7fb f9af 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff ff19 	bl	8005438 <LL_ADC_IsDeepPowerDownEnabled>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d004      	beq.n	8005616 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff feff 	bl	8005414 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff ff34 	bl	8005488 <LL_ADC_IsInternalRegulatorEnabled>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d114      	bne.n	8005650 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff ff18 	bl	8005460 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005630:	4b87      	ldr	r3, [pc, #540]	; (8005850 <HAL_ADC_Init+0x290>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	099b      	lsrs	r3, r3, #6
 8005636:	4a87      	ldr	r2, [pc, #540]	; (8005854 <HAL_ADC_Init+0x294>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	3301      	adds	r3, #1
 8005640:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005642:	e002      	b.n	800564a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	3b01      	subs	r3, #1
 8005648:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f9      	bne.n	8005644 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff ff17 	bl	8005488 <LL_ADC_IsInternalRegulatorEnabled>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	f043 0210 	orr.w	r2, r3, #16
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005670:	f043 0201 	orr.w	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff ff77 	bl	8005574 <LL_ADC_REG_IsConversionOngoing>
 8005686:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	f040 8129 	bne.w	80058e8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f040 8125 	bne.w	80058e8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056a6:	f043 0202 	orr.w	r2, r3, #2
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff ff24 	bl	8005500 <LL_ADC_IsEnabled>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d136      	bne.n	800572c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a65      	ldr	r2, [pc, #404]	; (8005858 <HAL_ADC_Init+0x298>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <HAL_ADC_Init+0x112>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a63      	ldr	r2, [pc, #396]	; (800585c <HAL_ADC_Init+0x29c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10e      	bne.n	80056f0 <HAL_ADC_Init+0x130>
 80056d2:	4861      	ldr	r0, [pc, #388]	; (8005858 <HAL_ADC_Init+0x298>)
 80056d4:	f7ff ff14 	bl	8005500 <LL_ADC_IsEnabled>
 80056d8:	4604      	mov	r4, r0
 80056da:	4860      	ldr	r0, [pc, #384]	; (800585c <HAL_ADC_Init+0x29c>)
 80056dc:	f7ff ff10 	bl	8005500 <LL_ADC_IsEnabled>
 80056e0:	4603      	mov	r3, r0
 80056e2:	4323      	orrs	r3, r4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bf0c      	ite	eq
 80056e8:	2301      	moveq	r3, #1
 80056ea:	2300      	movne	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	e008      	b.n	8005702 <HAL_ADC_Init+0x142>
 80056f0:	485b      	ldr	r0, [pc, #364]	; (8005860 <HAL_ADC_Init+0x2a0>)
 80056f2:	f7ff ff05 	bl	8005500 <LL_ADC_IsEnabled>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bf0c      	ite	eq
 80056fc:	2301      	moveq	r3, #1
 80056fe:	2300      	movne	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d012      	beq.n	800572c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a53      	ldr	r2, [pc, #332]	; (8005858 <HAL_ADC_Init+0x298>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_ADC_Init+0x15a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a51      	ldr	r2, [pc, #324]	; (800585c <HAL_ADC_Init+0x29c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d101      	bne.n	800571e <HAL_ADC_Init+0x15e>
 800571a:	4a52      	ldr	r2, [pc, #328]	; (8005864 <HAL_ADC_Init+0x2a4>)
 800571c:	e000      	b.n	8005720 <HAL_ADC_Init+0x160>
 800571e:	4a52      	ldr	r2, [pc, #328]	; (8005868 <HAL_ADC_Init+0x2a8>)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f7ff fd3c 	bl	80051a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800572c:	f7ff fd18 	bl	8005160 <HAL_GetREVID>
 8005730:	4603      	mov	r3, r0
 8005732:	f241 0203 	movw	r2, #4099	; 0x1003
 8005736:	4293      	cmp	r3, r2
 8005738:	d914      	bls.n	8005764 <HAL_ADC_Init+0x1a4>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b10      	cmp	r3, #16
 8005740:	d110      	bne.n	8005764 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	7d5b      	ldrb	r3, [r3, #21]
 8005746:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800574c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005752:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	7f1b      	ldrb	r3, [r3, #28]
 8005758:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800575a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800575c:	f043 030c 	orr.w	r3, r3, #12
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e00d      	b.n	8005780 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	7d5b      	ldrb	r3, [r3, #21]
 8005768:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800576e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005774:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	7f1b      	ldrb	r3, [r3, #28]
 800577a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800577c:	4313      	orrs	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	7f1b      	ldrb	r3, [r3, #28]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d106      	bne.n	8005796 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	3b01      	subs	r3, #1
 800578e:	045b      	lsls	r3, r3, #17
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	4b2c      	ldr	r3, [pc, #176]	; (800586c <HAL_ADC_Init+0x2ac>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	430b      	orrs	r3, r1
 80057c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff fed2 	bl	8005574 <LL_ADC_REG_IsConversionOngoing>
 80057d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff fedf 	bl	800559a <LL_ADC_INJ_IsConversionOngoing>
 80057dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d15f      	bne.n	80058a4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d15c      	bne.n	80058a4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7d1b      	ldrb	r3, [r3, #20]
 80057ee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <HAL_ADC_Init+0x2b0>)
 8005800:	4013      	ands	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	69b9      	ldr	r1, [r7, #24]
 8005808:	430b      	orrs	r3, r1
 800580a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005812:	2b01      	cmp	r3, #1
 8005814:	d130      	bne.n	8005878 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	4b14      	ldr	r3, [pc, #80]	; (8005874 <HAL_ADC_Init+0x2b4>)
 8005824:	4013      	ands	r3, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800582a:	3a01      	subs	r2, #1
 800582c:	0411      	lsls	r1, r2, #16
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005832:	4311      	orrs	r1, r2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005838:	4311      	orrs	r1, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800583e:	430a      	orrs	r2, r1
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	611a      	str	r2, [r3, #16]
 800584c:	e01c      	b.n	8005888 <HAL_ADC_Init+0x2c8>
 800584e:	bf00      	nop
 8005850:	240000c8 	.word	0x240000c8
 8005854:	053e2d63 	.word	0x053e2d63
 8005858:	40022000 	.word	0x40022000
 800585c:	40022100 	.word	0x40022100
 8005860:	58026000 	.word	0x58026000
 8005864:	40022300 	.word	0x40022300
 8005868:	58026300 	.word	0x58026300
 800586c:	fff0c003 	.word	0xfff0c003
 8005870:	ffffbffc 	.word	0xffffbffc
 8005874:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fdec 	bl	800647c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d10c      	bne.n	80058c6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	f023 010f 	bic.w	r1, r3, #15
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	1e5a      	subs	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
 80058c4:	e007      	b.n	80058d6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 020f 	bic.w	r2, r2, #15
 80058d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	f043 0201 	orr.w	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54
 80058e6:	e007      	b.n	80058f8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	f043 0210 	orr.w	r2, r3, #16
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80058f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3724      	adds	r7, #36	; 0x24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd90      	pop	{r4, r7, pc}
 8005902:	bf00      	nop

08005904 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a55      	ldr	r2, [pc, #340]	; (8005a6c <HAL_ADC_Start_DMA+0x168>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_ADC_Start_DMA+0x20>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a54      	ldr	r2, [pc, #336]	; (8005a70 <HAL_ADC_Start_DMA+0x16c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d101      	bne.n	8005928 <HAL_ADC_Start_DMA+0x24>
 8005924:	4b53      	ldr	r3, [pc, #332]	; (8005a74 <HAL_ADC_Start_DMA+0x170>)
 8005926:	e000      	b.n	800592a <HAL_ADC_Start_DMA+0x26>
 8005928:	4b53      	ldr	r3, [pc, #332]	; (8005a78 <HAL_ADC_Start_DMA+0x174>)
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fd64 	bl	80053f8 <LL_ADC_GetMultimode>
 8005930:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fe1c 	bl	8005574 <LL_ADC_REG_IsConversionOngoing>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 808c 	bne.w	8005a5c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_ADC_Start_DMA+0x4e>
 800594e:	2302      	movs	r3, #2
 8005950:	e087      	b.n	8005a62 <HAL_ADC_Start_DMA+0x15e>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b05      	cmp	r3, #5
 8005964:	d002      	beq.n	800596c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b09      	cmp	r3, #9
 800596a:	d170      	bne.n	8005a4e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fc07 	bl	8006180 <ADC_Enable>
 8005972:	4603      	mov	r3, r0
 8005974:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d163      	bne.n	8005a44 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005980:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <HAL_ADC_Start_DMA+0x178>)
 8005982:	4013      	ands	r3, r2
 8005984:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a37      	ldr	r2, [pc, #220]	; (8005a70 <HAL_ADC_Start_DMA+0x16c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d002      	beq.n	800599c <HAL_ADC_Start_DMA+0x98>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	e000      	b.n	800599e <HAL_ADC_Start_DMA+0x9a>
 800599c:	4b33      	ldr	r3, [pc, #204]	; (8005a6c <HAL_ADC_Start_DMA+0x168>)
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d002      	beq.n	80059ac <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d006      	beq.n	80059d2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	f023 0206 	bic.w	r2, r3, #6
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	659a      	str	r2, [r3, #88]	; 0x58
 80059d0:	e002      	b.n	80059d8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059dc:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <HAL_ADC_Start_DMA+0x17c>)
 80059de:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e4:	4a27      	ldr	r2, [pc, #156]	; (8005a84 <HAL_ADC_Start_DMA+0x180>)
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ec:	4a26      	ldr	r2, [pc, #152]	; (8005a88 <HAL_ADC_Start_DMA+0x184>)
 80059ee:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	221c      	movs	r2, #28
 80059f6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0210 	orr.w	r2, r2, #16
 8005a0e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f7ff fc89 	bl	8005332 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3340      	adds	r3, #64	; 0x40
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f002 f80e 	bl	8007a50 <HAL_DMA_Start_IT>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fd85 	bl	800554c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005a42:	e00d      	b.n	8005a60 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005a4c:	e008      	b.n	8005a60 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005a5a:	e001      	b.n	8005a60 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40022000 	.word	0x40022000
 8005a70:	40022100 	.word	0x40022100
 8005a74:	40022300 	.word	0x40022300
 8005a78:	58026300 	.word	0x58026300
 8005a7c:	fffff0fe 	.word	0xfffff0fe
 8005a80:	08006353 	.word	0x08006353
 8005a84:	0800642b 	.word	0x0800642b
 8005a88:	08006447 	.word	0x08006447

08005a8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b0a1      	sub	sp, #132	; 0x84
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a65      	ldr	r2, [pc, #404]	; (8005c78 <HAL_ADC_ConfigChannel+0x1b0>)
 8005ae2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x2a>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e32e      	b.n	8006150 <HAL_ADC_ConfigChannel+0x688>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff fd38 	bl	8005574 <LL_ADC_REG_IsConversionOngoing>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f040 8313 	bne.w	8006132 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	db2c      	blt.n	8005b6e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d108      	bne.n	8005b32 <HAL_ADC_ConfigChannel+0x6a>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	0e9b      	lsrs	r3, r3, #26
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	e016      	b.n	8005b60 <HAL_ADC_ConfigChannel+0x98>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b3a:	fa93 f3a3 	rbit	r3, r3
 8005b3e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b42:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005b44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8005b4a:	2320      	movs	r3, #32
 8005b4c:	e003      	b.n	8005b56 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8005b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b50:	fab3 f383 	clz	r3, r3
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	69d1      	ldr	r1, [r2, #28]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6812      	ldr	r2, [r2, #0]
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6859      	ldr	r1, [r3, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f7ff fbad 	bl	80052da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fcf5 	bl	8005574 <LL_ADC_REG_IsConversionOngoing>
 8005b8a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff fd02 	bl	800559a <LL_ADC_INJ_IsConversionOngoing>
 8005b96:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f040 80b8 	bne.w	8005d10 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f040 80b4 	bne.w	8005d10 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	6819      	ldr	r1, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f7ff fbcf 	bl	8005358 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005bba:	4b30      	ldr	r3, [pc, #192]	; (8005c7c <HAL_ADC_ConfigChannel+0x1b4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bc6:	d10b      	bne.n	8005be0 <HAL_ADC_ConfigChannel+0x118>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	695a      	ldr	r2, [r3, #20]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	089b      	lsrs	r3, r3, #2
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	e01d      	b.n	8005c1c <HAL_ADC_ConfigChannel+0x154>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <HAL_ADC_ConfigChannel+0x13e>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	089b      	lsrs	r3, r3, #2
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	e00a      	b.n	8005c1c <HAL_ADC_ConfigChannel+0x154>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695a      	ldr	r2, [r3, #20]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	089b      	lsrs	r3, r3, #2
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d02c      	beq.n	8005c80 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6919      	ldr	r1, [r3, #16]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c34:	f7ff faea 	bl	800520c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	6919      	ldr	r1, [r3, #16]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	7e5b      	ldrb	r3, [r3, #25]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d102      	bne.n	8005c4e <HAL_ADC_ConfigChannel+0x186>
 8005c48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c4c:	e000      	b.n	8005c50 <HAL_ADC_ConfigChannel+0x188>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	461a      	mov	r2, r3
 8005c52:	f7ff fb14 	bl	800527e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6919      	ldr	r1, [r3, #16]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	7e1b      	ldrb	r3, [r3, #24]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d102      	bne.n	8005c6c <HAL_ADC_ConfigChannel+0x1a4>
 8005c66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c6a:	e000      	b.n	8005c6e <HAL_ADC_ConfigChannel+0x1a6>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f7ff faec 	bl	800524c <LL_ADC_SetDataRightShift>
 8005c74:	e04c      	b.n	8005d10 <HAL_ADC_ConfigChannel+0x248>
 8005c76:	bf00      	nop
 8005c78:	47ff0000 	.word	0x47ff0000
 8005c7c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	069b      	lsls	r3, r3, #26
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d107      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ca2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	069b      	lsls	r3, r3, #26
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d107      	bne.n	8005cc8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005cc6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	069b      	lsls	r3, r3, #26
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d107      	bne.n	8005cec <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005cea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	069b      	lsls	r3, r3, #26
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d107      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d0e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fbf3 	bl	8005500 <LL_ADC_IsEnabled>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 8211 	bne.w	8006144 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6819      	ldr	r1, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f7ff fb3e 	bl	80053b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	4aa1      	ldr	r2, [pc, #644]	; (8005fc0 <HAL_ADC_ConfigChannel+0x4f8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	f040 812e 	bne.w	8005f9c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x2a0>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	0e9b      	lsrs	r3, r3, #26
 8005d56:	3301      	adds	r3, #1
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	2b09      	cmp	r3, #9
 8005d5e:	bf94      	ite	ls
 8005d60:	2301      	movls	r3, #1
 8005d62:	2300      	movhi	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	e019      	b.n	8005d9c <HAL_ADC_ConfigChannel+0x2d4>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d70:	fa93 f3a3 	rbit	r3, r3
 8005d74:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8005d80:	2320      	movs	r3, #32
 8005d82:	e003      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8005d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d86:	fab3 f383 	clz	r3, r3
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	2b09      	cmp	r3, #9
 8005d94:	bf94      	ite	ls
 8005d96:	2301      	movls	r3, #1
 8005d98:	2300      	movhi	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d079      	beq.n	8005e94 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d107      	bne.n	8005dbc <HAL_ADC_ConfigChannel+0x2f4>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	0e9b      	lsrs	r3, r3, #26
 8005db2:	3301      	adds	r3, #1
 8005db4:	069b      	lsls	r3, r3, #26
 8005db6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005dba:	e015      	b.n	8005de8 <HAL_ADC_ConfigChannel+0x320>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc4:	fa93 f3a3 	rbit	r3, r3
 8005dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dcc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	e003      	b.n	8005de0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8005dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dda:	fab3 f383 	clz	r3, r3
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	3301      	adds	r3, #1
 8005de2:	069b      	lsls	r3, r3, #26
 8005de4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d109      	bne.n	8005e08 <HAL_ADC_ConfigChannel+0x340>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	0e9b      	lsrs	r3, r3, #26
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	2101      	movs	r1, #1
 8005e02:	fa01 f303 	lsl.w	r3, r1, r3
 8005e06:	e017      	b.n	8005e38 <HAL_ADC_ConfigChannel+0x370>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e10:	fa93 f3a3 	rbit	r3, r3
 8005e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e18:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8005e20:	2320      	movs	r3, #32
 8005e22:	e003      	b.n	8005e2c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8005e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e26:	fab3 f383 	clz	r3, r3
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f003 031f 	and.w	r3, r3, #31
 8005e32:	2101      	movs	r1, #1
 8005e34:	fa01 f303 	lsl.w	r3, r1, r3
 8005e38:	ea42 0103 	orr.w	r1, r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <HAL_ADC_ConfigChannel+0x396>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	0e9b      	lsrs	r3, r3, #26
 8005e4e:	3301      	adds	r3, #1
 8005e50:	f003 021f 	and.w	r2, r3, #31
 8005e54:	4613      	mov	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	4413      	add	r3, r2
 8005e5a:	051b      	lsls	r3, r3, #20
 8005e5c:	e018      	b.n	8005e90 <HAL_ADC_ConfigChannel+0x3c8>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e66:	fa93 f3a3 	rbit	r3, r3
 8005e6a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8005e76:	2320      	movs	r3, #32
 8005e78:	e003      	b.n	8005e82 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	fab3 f383 	clz	r3, r3
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	3301      	adds	r3, #1
 8005e84:	f003 021f 	and.w	r2, r3, #31
 8005e88:	4613      	mov	r3, r2
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4413      	add	r3, r2
 8005e8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e90:	430b      	orrs	r3, r1
 8005e92:	e07e      	b.n	8005f92 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d107      	bne.n	8005eb0 <HAL_ADC_ConfigChannel+0x3e8>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	0e9b      	lsrs	r3, r3, #26
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	069b      	lsls	r3, r3, #26
 8005eaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005eae:	e015      	b.n	8005edc <HAL_ADC_ConfigChannel+0x414>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	fa93 f3a3 	rbit	r3, r3
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8005ec8:	2320      	movs	r3, #32
 8005eca:	e003      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	fab3 f383 	clz	r3, r3
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	069b      	lsls	r3, r3, #26
 8005ed8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d109      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x434>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	0e9b      	lsrs	r3, r3, #26
 8005eee:	3301      	adds	r3, #1
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8005efa:	e017      	b.n	8005f2c <HAL_ADC_ConfigChannel+0x464>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	fa93 f3a3 	rbit	r3, r3
 8005f08:	61bb      	str	r3, [r7, #24]
  return result;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8005f14:	2320      	movs	r3, #32
 8005f16:	e003      	b.n	8005f20 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	fab3 f383 	clz	r3, r3
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	3301      	adds	r3, #1
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	2101      	movs	r1, #1
 8005f28:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2c:	ea42 0103 	orr.w	r1, r2, r3
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10d      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0x490>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	0e9b      	lsrs	r3, r3, #26
 8005f42:	3301      	adds	r3, #1
 8005f44:	f003 021f 	and.w	r2, r3, #31
 8005f48:	4613      	mov	r3, r2
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3b1e      	subs	r3, #30
 8005f50:	051b      	lsls	r3, r3, #20
 8005f52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f56:	e01b      	b.n	8005f90 <HAL_ADC_ConfigChannel+0x4c8>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	fa93 f3a3 	rbit	r3, r3
 8005f64:	60fb      	str	r3, [r7, #12]
  return result;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8005f70:	2320      	movs	r3, #32
 8005f72:	e003      	b.n	8005f7c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	fab3 f383 	clz	r3, r3
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	f003 021f 	and.w	r2, r3, #31
 8005f82:	4613      	mov	r3, r2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4413      	add	r3, r2
 8005f88:	3b1e      	subs	r3, #30
 8005f8a:	051b      	lsls	r3, r3, #20
 8005f8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f90:	430b      	orrs	r3, r1
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	6892      	ldr	r2, [r2, #8]
 8005f96:	4619      	mov	r1, r3
 8005f98:	f7ff f9de 	bl	8005358 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f280 80cf 	bge.w	8006144 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a06      	ldr	r2, [pc, #24]	; (8005fc4 <HAL_ADC_ConfigChannel+0x4fc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d004      	beq.n	8005fba <HAL_ADC_ConfigChannel+0x4f2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a04      	ldr	r2, [pc, #16]	; (8005fc8 <HAL_ADC_ConfigChannel+0x500>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d10a      	bne.n	8005fd0 <HAL_ADC_ConfigChannel+0x508>
 8005fba:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <HAL_ADC_ConfigChannel+0x504>)
 8005fbc:	e009      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x50a>
 8005fbe:	bf00      	nop
 8005fc0:	47ff0000 	.word	0x47ff0000
 8005fc4:	40022000 	.word	0x40022000
 8005fc8:	40022100 	.word	0x40022100
 8005fcc:	40022300 	.word	0x40022300
 8005fd0:	4b61      	ldr	r3, [pc, #388]	; (8006158 <HAL_ADC_ConfigChannel+0x690>)
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff f90c 	bl	80051f0 <LL_ADC_GetCommonPathInternalCh>
 8005fd8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5f      	ldr	r2, [pc, #380]	; (800615c <HAL_ADC_ConfigChannel+0x694>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_ADC_ConfigChannel+0x526>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a5d      	ldr	r2, [pc, #372]	; (8006160 <HAL_ADC_ConfigChannel+0x698>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10e      	bne.n	800600c <HAL_ADC_ConfigChannel+0x544>
 8005fee:	485b      	ldr	r0, [pc, #364]	; (800615c <HAL_ADC_ConfigChannel+0x694>)
 8005ff0:	f7ff fa86 	bl	8005500 <LL_ADC_IsEnabled>
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	485a      	ldr	r0, [pc, #360]	; (8006160 <HAL_ADC_ConfigChannel+0x698>)
 8005ff8:	f7ff fa82 	bl	8005500 <LL_ADC_IsEnabled>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	4323      	orrs	r3, r4
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	e008      	b.n	800601e <HAL_ADC_ConfigChannel+0x556>
 800600c:	4855      	ldr	r0, [pc, #340]	; (8006164 <HAL_ADC_ConfigChannel+0x69c>)
 800600e:	f7ff fa77 	bl	8005500 <LL_ADC_IsEnabled>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d07d      	beq.n	800611e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a50      	ldr	r2, [pc, #320]	; (8006168 <HAL_ADC_ConfigChannel+0x6a0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d130      	bne.n	800608e <HAL_ADC_ConfigChannel+0x5c6>
 800602c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d12b      	bne.n	800608e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a4a      	ldr	r2, [pc, #296]	; (8006164 <HAL_ADC_ConfigChannel+0x69c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	f040 8081 	bne.w	8006144 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a45      	ldr	r2, [pc, #276]	; (800615c <HAL_ADC_ConfigChannel+0x694>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_ADC_ConfigChannel+0x58e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a43      	ldr	r2, [pc, #268]	; (8006160 <HAL_ADC_ConfigChannel+0x698>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <HAL_ADC_ConfigChannel+0x592>
 8006056:	4a45      	ldr	r2, [pc, #276]	; (800616c <HAL_ADC_ConfigChannel+0x6a4>)
 8006058:	e000      	b.n	800605c <HAL_ADC_ConfigChannel+0x594>
 800605a:	4a3f      	ldr	r2, [pc, #252]	; (8006158 <HAL_ADC_ConfigChannel+0x690>)
 800605c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f7ff f8b0 	bl	80051ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800606a:	4b41      	ldr	r3, [pc, #260]	; (8006170 <HAL_ADC_ConfigChannel+0x6a8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	099b      	lsrs	r3, r3, #6
 8006070:	4a40      	ldr	r2, [pc, #256]	; (8006174 <HAL_ADC_ConfigChannel+0x6ac>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	3301      	adds	r3, #1
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800607e:	e002      	b.n	8006086 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	3b01      	subs	r3, #1
 8006084:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f9      	bne.n	8006080 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800608c:	e05a      	b.n	8006144 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a39      	ldr	r2, [pc, #228]	; (8006178 <HAL_ADC_ConfigChannel+0x6b0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d11e      	bne.n	80060d6 <HAL_ADC_ConfigChannel+0x60e>
 8006098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d119      	bne.n	80060d6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2f      	ldr	r2, [pc, #188]	; (8006164 <HAL_ADC_ConfigChannel+0x69c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d14b      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a2a      	ldr	r2, [pc, #168]	; (800615c <HAL_ADC_ConfigChannel+0x694>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0x5f8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a29      	ldr	r2, [pc, #164]	; (8006160 <HAL_ADC_ConfigChannel+0x698>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d101      	bne.n	80060c4 <HAL_ADC_ConfigChannel+0x5fc>
 80060c0:	4a2a      	ldr	r2, [pc, #168]	; (800616c <HAL_ADC_ConfigChannel+0x6a4>)
 80060c2:	e000      	b.n	80060c6 <HAL_ADC_ConfigChannel+0x5fe>
 80060c4:	4a24      	ldr	r2, [pc, #144]	; (8006158 <HAL_ADC_ConfigChannel+0x690>)
 80060c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f7ff f87b 	bl	80051ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060d4:	e036      	b.n	8006144 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a28      	ldr	r2, [pc, #160]	; (800617c <HAL_ADC_ConfigChannel+0x6b4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d131      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x67c>
 80060e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d12c      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <HAL_ADC_ConfigChannel+0x69c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d127      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a18      	ldr	r2, [pc, #96]	; (800615c <HAL_ADC_ConfigChannel+0x694>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_ADC_ConfigChannel+0x640>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a17      	ldr	r2, [pc, #92]	; (8006160 <HAL_ADC_ConfigChannel+0x698>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d101      	bne.n	800610c <HAL_ADC_ConfigChannel+0x644>
 8006108:	4a18      	ldr	r2, [pc, #96]	; (800616c <HAL_ADC_ConfigChannel+0x6a4>)
 800610a:	e000      	b.n	800610e <HAL_ADC_ConfigChannel+0x646>
 800610c:	4a12      	ldr	r2, [pc, #72]	; (8006158 <HAL_ADC_ConfigChannel+0x690>)
 800610e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f7ff f857 	bl	80051ca <LL_ADC_SetCommonPathInternalCh>
 800611c:	e012      	b.n	8006144 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	f043 0220 	orr.w	r2, r3, #32
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006130:	e008      	b.n	8006144 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006136:	f043 0220 	orr.w	r2, r3, #32
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800614c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006150:	4618      	mov	r0, r3
 8006152:	3784      	adds	r7, #132	; 0x84
 8006154:	46bd      	mov	sp, r7
 8006156:	bd90      	pop	{r4, r7, pc}
 8006158:	58026300 	.word	0x58026300
 800615c:	40022000 	.word	0x40022000
 8006160:	40022100 	.word	0x40022100
 8006164:	58026000 	.word	0x58026000
 8006168:	cb840000 	.word	0xcb840000
 800616c:	40022300 	.word	0x40022300
 8006170:	240000c8 	.word	0x240000c8
 8006174:	053e2d63 	.word	0x053e2d63
 8006178:	c7520000 	.word	0xc7520000
 800617c:	cfb80000 	.word	0xcfb80000

08006180 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff f9b7 	bl	8005500 <LL_ADC_IsEnabled>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d16e      	bne.n	8006276 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	4b38      	ldr	r3, [pc, #224]	; (8006280 <ADC_Enable+0x100>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00d      	beq.n	80061c2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061aa:	f043 0210 	orr.w	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b6:	f043 0201 	orr.w	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e05a      	b.n	8006278 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff f972 	bl	80054b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80061cc:	f7fe ffbc 	bl	8005148 <HAL_GetTick>
 80061d0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a2b      	ldr	r2, [pc, #172]	; (8006284 <ADC_Enable+0x104>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d004      	beq.n	80061e6 <ADC_Enable+0x66>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a29      	ldr	r2, [pc, #164]	; (8006288 <ADC_Enable+0x108>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d101      	bne.n	80061ea <ADC_Enable+0x6a>
 80061e6:	4b29      	ldr	r3, [pc, #164]	; (800628c <ADC_Enable+0x10c>)
 80061e8:	e000      	b.n	80061ec <ADC_Enable+0x6c>
 80061ea:	4b29      	ldr	r3, [pc, #164]	; (8006290 <ADC_Enable+0x110>)
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff f903 	bl	80053f8 <LL_ADC_GetMultimode>
 80061f2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a23      	ldr	r2, [pc, #140]	; (8006288 <ADC_Enable+0x108>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d002      	beq.n	8006204 <ADC_Enable+0x84>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	e000      	b.n	8006206 <ADC_Enable+0x86>
 8006204:	4b1f      	ldr	r3, [pc, #124]	; (8006284 <ADC_Enable+0x104>)
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	4293      	cmp	r3, r2
 800620c:	d02c      	beq.n	8006268 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d130      	bne.n	8006276 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006214:	e028      	b.n	8006268 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff f970 	bl	8005500 <LL_ADC_IsEnabled>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff f940 	bl	80054b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006230:	f7fe ff8a 	bl	8005148 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d914      	bls.n	8006268 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b01      	cmp	r3, #1
 800624a:	d00d      	beq.n	8006268 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006250:	f043 0210 	orr.w	r2, r3, #16
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625c:	f043 0201 	orr.w	r2, r3, #1
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e007      	b.n	8006278 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b01      	cmp	r3, #1
 8006274:	d1cf      	bne.n	8006216 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	8000003f 	.word	0x8000003f
 8006284:	40022000 	.word	0x40022000
 8006288:	40022100 	.word	0x40022100
 800628c:	40022300 	.word	0x40022300
 8006290:	58026300 	.word	0x58026300

08006294 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff f940 	bl	8005526 <LL_ADC_IsDisableOngoing>
 80062a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff f927 	bl	8005500 <LL_ADC_IsEnabled>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d047      	beq.n	8006348 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d144      	bne.n	8006348 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 030d 	and.w	r3, r3, #13
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d10c      	bne.n	80062e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff f901 	bl	80054d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2203      	movs	r2, #3
 80062dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80062de:	f7fe ff33 	bl	8005148 <HAL_GetTick>
 80062e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80062e4:	e029      	b.n	800633a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ea:	f043 0210 	orr.w	r2, r3, #16
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f6:	f043 0201 	orr.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e023      	b.n	800634a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006302:	f7fe ff21 	bl	8005148 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d914      	bls.n	800633a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006322:	f043 0210 	orr.w	r2, r3, #16
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632e:	f043 0201 	orr.w	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e007      	b.n	800634a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1dc      	bne.n	8006302 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006368:	2b00      	cmp	r3, #0
 800636a:	d14b      	bne.n	8006404 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006370:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d021      	beq.n	80063ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe ff92 	bl	80052b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d032      	beq.n	80063fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d12b      	bne.n	80063fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d11f      	bne.n	80063fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c0:	f043 0201 	orr.w	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
 80063c8:	e018      	b.n	80063fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d111      	bne.n	80063fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d105      	bne.n	80063fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	f043 0201 	orr.w	r2, r3, #1
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f7ff fb45 	bl	8005a8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006402:	e00e      	b.n	8006422 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff fb4f 	bl	8005ab4 <HAL_ADC_ErrorCallback>
}
 8006416:	e004      	b.n	8006422 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
}
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff fb31 	bl	8005aa0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006458:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006464:	f043 0204 	orr.w	r2, r3, #4
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff fb21 	bl	8005ab4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a7a      	ldr	r2, [pc, #488]	; (8006674 <ADC_ConfigureBoostMode+0x1f8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <ADC_ConfigureBoostMode+0x1c>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a79      	ldr	r2, [pc, #484]	; (8006678 <ADC_ConfigureBoostMode+0x1fc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d109      	bne.n	80064ac <ADC_ConfigureBoostMode+0x30>
 8006498:	4b78      	ldr	r3, [pc, #480]	; (800667c <ADC_ConfigureBoostMode+0x200>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e008      	b.n	80064be <ADC_ConfigureBoostMode+0x42>
 80064ac:	4b74      	ldr	r3, [pc, #464]	; (8006680 <ADC_ConfigureBoostMode+0x204>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf14      	ite	ne
 80064b8:	2301      	movne	r3, #1
 80064ba:	2300      	moveq	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01c      	beq.n	80064fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80064c2:	f007 ff15 	bl	800e2f0 <HAL_RCC_GetHCLKFreq>
 80064c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064d0:	d010      	beq.n	80064f4 <ADC_ConfigureBoostMode+0x78>
 80064d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064d6:	d873      	bhi.n	80065c0 <ADC_ConfigureBoostMode+0x144>
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d002      	beq.n	80064e4 <ADC_ConfigureBoostMode+0x68>
 80064de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e2:	d16d      	bne.n	80065c0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f0:	60fb      	str	r3, [r7, #12]
        break;
 80064f2:	e068      	b.n	80065c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	089b      	lsrs	r3, r3, #2
 80064f8:	60fb      	str	r3, [r7, #12]
        break;
 80064fa:	e064      	b.n	80065c6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80064fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006500:	f04f 0100 	mov.w	r1, #0
 8006504:	f009 f99c 	bl	800f840 <HAL_RCCEx_GetPeriphCLKFreq>
 8006508:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006512:	d051      	beq.n	80065b8 <ADC_ConfigureBoostMode+0x13c>
 8006514:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006518:	d854      	bhi.n	80065c4 <ADC_ConfigureBoostMode+0x148>
 800651a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800651e:	d047      	beq.n	80065b0 <ADC_ConfigureBoostMode+0x134>
 8006520:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006524:	d84e      	bhi.n	80065c4 <ADC_ConfigureBoostMode+0x148>
 8006526:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800652a:	d03d      	beq.n	80065a8 <ADC_ConfigureBoostMode+0x12c>
 800652c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006530:	d848      	bhi.n	80065c4 <ADC_ConfigureBoostMode+0x148>
 8006532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006536:	d033      	beq.n	80065a0 <ADC_ConfigureBoostMode+0x124>
 8006538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800653c:	d842      	bhi.n	80065c4 <ADC_ConfigureBoostMode+0x148>
 800653e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006542:	d029      	beq.n	8006598 <ADC_ConfigureBoostMode+0x11c>
 8006544:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006548:	d83c      	bhi.n	80065c4 <ADC_ConfigureBoostMode+0x148>
 800654a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800654e:	d01a      	beq.n	8006586 <ADC_ConfigureBoostMode+0x10a>
 8006550:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006554:	d836      	bhi.n	80065c4 <ADC_ConfigureBoostMode+0x148>
 8006556:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800655a:	d014      	beq.n	8006586 <ADC_ConfigureBoostMode+0x10a>
 800655c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006560:	d830      	bhi.n	80065c4 <ADC_ConfigureBoostMode+0x148>
 8006562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006566:	d00e      	beq.n	8006586 <ADC_ConfigureBoostMode+0x10a>
 8006568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800656c:	d82a      	bhi.n	80065c4 <ADC_ConfigureBoostMode+0x148>
 800656e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006572:	d008      	beq.n	8006586 <ADC_ConfigureBoostMode+0x10a>
 8006574:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006578:	d824      	bhi.n	80065c4 <ADC_ConfigureBoostMode+0x148>
 800657a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800657e:	d002      	beq.n	8006586 <ADC_ConfigureBoostMode+0x10a>
 8006580:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006584:	d11e      	bne.n	80065c4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	0c9b      	lsrs	r3, r3, #18
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	60fb      	str	r3, [r7, #12]
        break;
 8006596:	e016      	b.n	80065c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	091b      	lsrs	r3, r3, #4
 800659c:	60fb      	str	r3, [r7, #12]
        break;
 800659e:	e012      	b.n	80065c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	60fb      	str	r3, [r7, #12]
        break;
 80065a6:	e00e      	b.n	80065c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	099b      	lsrs	r3, r3, #6
 80065ac:	60fb      	str	r3, [r7, #12]
        break;
 80065ae:	e00a      	b.n	80065c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	09db      	lsrs	r3, r3, #7
 80065b4:	60fb      	str	r3, [r7, #12]
        break;
 80065b6:	e006      	b.n	80065c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	60fb      	str	r3, [r7, #12]
        break;
 80065be:	e002      	b.n	80065c6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80065c4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80065c6:	f7fe fdcb 	bl	8005160 <HAL_GetREVID>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d815      	bhi.n	8006600 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a2b      	ldr	r2, [pc, #172]	; (8006684 <ADC_ConfigureBoostMode+0x208>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d908      	bls.n	80065ee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80065ec:	e03e      	b.n	800666c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065fc:	609a      	str	r2, [r3, #8]
}
 80065fe:	e035      	b.n	800666c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <ADC_ConfigureBoostMode+0x20c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d808      	bhi.n	8006620 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800661c:	609a      	str	r2, [r3, #8]
}
 800661e:	e025      	b.n	800666c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4a1a      	ldr	r2, [pc, #104]	; (800668c <ADC_ConfigureBoostMode+0x210>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d80a      	bhi.n	800663e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800663a:	609a      	str	r2, [r3, #8]
}
 800663c:	e016      	b.n	800666c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a13      	ldr	r2, [pc, #76]	; (8006690 <ADC_ConfigureBoostMode+0x214>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d80a      	bhi.n	800665c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006658:	609a      	str	r2, [r3, #8]
}
 800665a:	e007      	b.n	800666c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800666a:	609a      	str	r2, [r3, #8]
}
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40022000 	.word	0x40022000
 8006678:	40022100 	.word	0x40022100
 800667c:	40022300 	.word	0x40022300
 8006680:	58026300 	.word	0x58026300
 8006684:	01312d00 	.word	0x01312d00
 8006688:	005f5e10 	.word	0x005f5e10
 800668c:	00bebc20 	.word	0x00bebc20
 8006690:	017d7840 	.word	0x017d7840

08006694 <LL_ADC_IsEnabled>:
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <LL_ADC_IsEnabled+0x18>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <LL_ADC_IsEnabled+0x1a>
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <LL_ADC_StartCalibration>:
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <LL_ADC_StartCalibration+0x38>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80066dc:	430a      	orrs	r2, r1
 80066de:	4313      	orrs	r3, r2
 80066e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	3ffeffc0 	.word	0x3ffeffc0

080066f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800670c:	d101      	bne.n	8006712 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <LL_ADC_REG_IsConversionOngoing>:
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b04      	cmp	r3, #4
 8006732:	d101      	bne.n	8006738 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
	...

08006748 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_ADCEx_Calibration_Start+0x1e>
 8006762:	2302      	movs	r3, #2
 8006764:	e04c      	b.n	8006800 <HAL_ADCEx_Calibration_Start+0xb8>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff fd90 	bl	8006294 <ADC_Disable>
 8006774:	4603      	mov	r3, r0
 8006776:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006778:	7dfb      	ldrb	r3, [r7, #23]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d135      	bne.n	80067ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006782:	4b21      	ldr	r3, [pc, #132]	; (8006808 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006784:	4013      	ands	r3, r2
 8006786:	f043 0202 	orr.w	r2, r3, #2
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff ff90 	bl	80066bc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800679c:	e014      	b.n	80067c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	3301      	adds	r3, #1
 80067a2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4a19      	ldr	r2, [pc, #100]	; (800680c <HAL_ADCEx_Calibration_Start+0xc4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d30d      	bcc.n	80067c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b0:	f023 0312 	bic.w	r3, r3, #18
 80067b4:	f043 0210 	orr.w	r2, r3, #16
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e01b      	b.n	8006800 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff ff93 	bl	80066f8 <LL_ADC_IsCalibrationOnGoing>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e2      	bne.n	800679e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	f023 0303 	bic.w	r3, r3, #3
 80067e0:	f043 0201 	orr.w	r2, r3, #1
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54
 80067e8:	e005      	b.n	80067f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	f043 0210 	orr.w	r2, r3, #16
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	ffffeefd 	.word	0xffffeefd
 800680c:	25c3f800 	.word	0x25c3f800

08006810 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b09f      	sub	sp, #124	; 0x7c
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800682a:	2302      	movs	r3, #2
 800682c:	e0be      	b.n	80069ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006836:	2300      	movs	r3, #0
 8006838:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800683a:	2300      	movs	r3, #0
 800683c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a5c      	ldr	r2, [pc, #368]	; (80069b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d102      	bne.n	800684e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006848:	4b5b      	ldr	r3, [pc, #364]	; (80069b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800684a:	60bb      	str	r3, [r7, #8]
 800684c:	e001      	b.n	8006852 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685c:	f043 0220 	orr.w	r2, r3, #32
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e09d      	b.n	80069ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff ff54 	bl	8006720 <LL_ADC_REG_IsConversionOngoing>
 8006878:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff ff4e 	bl	8006720 <LL_ADC_REG_IsConversionOngoing>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d17f      	bne.n	800698a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800688a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800688c:	2b00      	cmp	r3, #0
 800688e:	d17c      	bne.n	800698a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a47      	ldr	r2, [pc, #284]	; (80069b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d004      	beq.n	80068a4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a46      	ldr	r2, [pc, #280]	; (80069b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d101      	bne.n	80068a8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80068a4:	4b45      	ldr	r3, [pc, #276]	; (80069bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80068a6:	e000      	b.n	80068aa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80068a8:	4b45      	ldr	r3, [pc, #276]	; (80069c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80068aa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d039      	beq.n	8006928 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80068b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3a      	ldr	r2, [pc, #232]	; (80069b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a38      	ldr	r2, [pc, #224]	; (80069b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d10e      	bne.n	80068f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80068da:	4836      	ldr	r0, [pc, #216]	; (80069b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80068dc:	f7ff feda 	bl	8006694 <LL_ADC_IsEnabled>
 80068e0:	4604      	mov	r4, r0
 80068e2:	4835      	ldr	r0, [pc, #212]	; (80069b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80068e4:	f7ff fed6 	bl	8006694 <LL_ADC_IsEnabled>
 80068e8:	4603      	mov	r3, r0
 80068ea:	4323      	orrs	r3, r4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bf0c      	ite	eq
 80068f0:	2301      	moveq	r3, #1
 80068f2:	2300      	movne	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	e008      	b.n	800690a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80068f8:	4832      	ldr	r0, [pc, #200]	; (80069c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80068fa:	f7ff fecb 	bl	8006694 <LL_ADC_IsEnabled>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	bf0c      	ite	eq
 8006904:	2301      	moveq	r3, #1
 8006906:	2300      	movne	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d047      	beq.n	800699e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800690e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	4b2d      	ldr	r3, [pc, #180]	; (80069c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006914:	4013      	ands	r3, r2
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	6811      	ldr	r1, [r2, #0]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	6892      	ldr	r2, [r2, #8]
 800691e:	430a      	orrs	r2, r1
 8006920:	431a      	orrs	r2, r3
 8006922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006924:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006926:	e03a      	b.n	800699e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006932:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d10e      	bne.n	8006966 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006948:	481a      	ldr	r0, [pc, #104]	; (80069b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800694a:	f7ff fea3 	bl	8006694 <LL_ADC_IsEnabled>
 800694e:	4604      	mov	r4, r0
 8006950:	4819      	ldr	r0, [pc, #100]	; (80069b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006952:	f7ff fe9f 	bl	8006694 <LL_ADC_IsEnabled>
 8006956:	4603      	mov	r3, r0
 8006958:	4323      	orrs	r3, r4
 800695a:	2b00      	cmp	r3, #0
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	e008      	b.n	8006978 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006966:	4817      	ldr	r0, [pc, #92]	; (80069c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006968:	f7ff fe94 	bl	8006694 <LL_ADC_IsEnabled>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	bf0c      	ite	eq
 8006972:	2301      	moveq	r3, #1
 8006974:	2300      	movne	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d010      	beq.n	800699e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800697c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006982:	4013      	ands	r3, r2
 8006984:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006986:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006988:	e009      	b.n	800699e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698e:	f043 0220 	orr.w	r2, r3, #32
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800699c:	e000      	b.n	80069a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800699e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80069a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	377c      	adds	r7, #124	; 0x7c
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd90      	pop	{r4, r7, pc}
 80069b4:	40022000 	.word	0x40022000
 80069b8:	40022100 	.word	0x40022100
 80069bc:	40022300 	.word	0x40022300
 80069c0:	58026300 	.word	0x58026300
 80069c4:	58026000 	.word	0x58026000
 80069c8:	fffff0e0 	.word	0xfffff0e0

080069cc <__NVIC_SetPriorityGrouping>:
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <__NVIC_SetPriorityGrouping+0x40>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069e8:	4013      	ands	r3, r2
 80069ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <__NVIC_SetPriorityGrouping+0x44>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069fa:	4a04      	ldr	r2, [pc, #16]	; (8006a0c <__NVIC_SetPriorityGrouping+0x40>)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	60d3      	str	r3, [r2, #12]
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	e000ed00 	.word	0xe000ed00
 8006a10:	05fa0000 	.word	0x05fa0000

08006a14 <__NVIC_GetPriorityGrouping>:
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a18:	4b04      	ldr	r3, [pc, #16]	; (8006a2c <__NVIC_GetPriorityGrouping+0x18>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	0a1b      	lsrs	r3, r3, #8
 8006a1e:	f003 0307 	and.w	r3, r3, #7
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	e000ed00 	.word	0xe000ed00

08006a30 <__NVIC_EnableIRQ>:
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	db0b      	blt.n	8006a5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a42:	88fb      	ldrh	r3, [r7, #6]
 8006a44:	f003 021f 	and.w	r2, r3, #31
 8006a48:	4907      	ldr	r1, [pc, #28]	; (8006a68 <__NVIC_EnableIRQ+0x38>)
 8006a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	2001      	movs	r0, #1
 8006a52:	fa00 f202 	lsl.w	r2, r0, r2
 8006a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	e000e100 	.word	0xe000e100

08006a6c <__NVIC_SetPriority>:
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	6039      	str	r1, [r7, #0]
 8006a76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	db0a      	blt.n	8006a96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	490c      	ldr	r1, [pc, #48]	; (8006ab8 <__NVIC_SetPriority+0x4c>)
 8006a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a8a:	0112      	lsls	r2, r2, #4
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	440b      	add	r3, r1
 8006a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a94:	e00a      	b.n	8006aac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	4908      	ldr	r1, [pc, #32]	; (8006abc <__NVIC_SetPriority+0x50>)
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	3b04      	subs	r3, #4
 8006aa4:	0112      	lsls	r2, r2, #4
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	761a      	strb	r2, [r3, #24]
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	e000e100 	.word	0xe000e100
 8006abc:	e000ed00 	.word	0xe000ed00

08006ac0 <NVIC_EncodePriority>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f1c3 0307 	rsb	r3, r3, #7
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	bf28      	it	cs
 8006ade:	2304      	movcs	r3, #4
 8006ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	2b06      	cmp	r3, #6
 8006ae8:	d902      	bls.n	8006af0 <NVIC_EncodePriority+0x30>
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	3b03      	subs	r3, #3
 8006aee:	e000      	b.n	8006af2 <NVIC_EncodePriority+0x32>
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006af4:	f04f 32ff 	mov.w	r2, #4294967295
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	fa02 f303 	lsl.w	r3, r2, r3
 8006afe:	43da      	mvns	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	401a      	ands	r2, r3
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b08:	f04f 31ff 	mov.w	r1, #4294967295
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b12:	43d9      	mvns	r1, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b18:	4313      	orrs	r3, r2
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3724      	adds	r7, #36	; 0x24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ff4c 	bl	80069cc <__NVIC_SetPriorityGrouping>
}
 8006b34:	bf00      	nop
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b4a:	f7ff ff63 	bl	8006a14 <__NVIC_GetPriorityGrouping>
 8006b4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	6978      	ldr	r0, [r7, #20]
 8006b56:	f7ff ffb3 	bl	8006ac0 <NVIC_EncodePriority>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff ff82 	bl	8006a6c <__NVIC_SetPriority>
}
 8006b68:	bf00      	nop
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff ff56 	bl	8006a30 <__NVIC_EnableIRQ>
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e014      	b.n	8006bc8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	791b      	ldrb	r3, [r3, #4]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fa f818 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e046      	b.n	8006c72 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	795b      	ldrb	r3, [r3, #5]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_DAC_Start+0x20>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e040      	b.n	8006c72 <HAL_DAC_Start+0xa2>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6819      	ldr	r1, [r3, #0]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	f003 0310 	and.w	r3, r3, #16
 8006c08:	2201      	movs	r2, #1
 8006c0a:	409a      	lsls	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10f      	bne.n	8006c3a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d11d      	bne.n	8006c64 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	605a      	str	r2, [r3, #4]
 8006c38:	e014      	b.n	8006c64 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	f003 0310 	and.w	r3, r3, #16
 8006c4a:	2102      	movs	r1, #2
 8006c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d107      	bne.n	8006c64 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0202 	orr.w	r2, r2, #2
 8006c62:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e0a2      	b.n	8006dde <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	795b      	ldrb	r3, [r3, #5]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_DAC_Start_DMA+0x24>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e09c      	b.n	8006dde <HAL_DAC_Start_DMA+0x15e>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2202      	movs	r2, #2
 8006cae:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d129      	bne.n	8006d0a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	4a4b      	ldr	r2, [pc, #300]	; (8006de8 <HAL_DAC_Start_DMA+0x168>)
 8006cbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	4a4a      	ldr	r2, [pc, #296]	; (8006dec <HAL_DAC_Start_DMA+0x16c>)
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	4a49      	ldr	r2, [pc, #292]	; (8006df0 <HAL_DAC_Start_DMA+0x170>)
 8006ccc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cdc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <HAL_DAC_Start_DMA+0x6c>
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d005      	beq.n	8006cf6 <HAL_DAC_Start_DMA+0x76>
 8006cea:	e009      	b.n	8006d00 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	613b      	str	r3, [r7, #16]
        break;
 8006cf4:	e033      	b.n	8006d5e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	330c      	adds	r3, #12
 8006cfc:	613b      	str	r3, [r7, #16]
        break;
 8006cfe:	e02e      	b.n	8006d5e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3310      	adds	r3, #16
 8006d06:	613b      	str	r3, [r7, #16]
        break;
 8006d08:	e029      	b.n	8006d5e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	4a39      	ldr	r2, [pc, #228]	; (8006df4 <HAL_DAC_Start_DMA+0x174>)
 8006d10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	4a38      	ldr	r2, [pc, #224]	; (8006df8 <HAL_DAC_Start_DMA+0x178>)
 8006d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	4a37      	ldr	r2, [pc, #220]	; (8006dfc <HAL_DAC_Start_DMA+0x17c>)
 8006d20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d30:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_DAC_Start_DMA+0xc0>
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d005      	beq.n	8006d4a <HAL_DAC_Start_DMA+0xca>
 8006d3e:	e009      	b.n	8006d54 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3314      	adds	r3, #20
 8006d46:	613b      	str	r3, [r7, #16]
        break;
 8006d48:	e009      	b.n	8006d5e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3318      	adds	r3, #24
 8006d50:	613b      	str	r3, [r7, #16]
        break;
 8006d52:	e004      	b.n	8006d5e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	331c      	adds	r3, #28
 8006d5a:	613b      	str	r3, [r7, #16]
        break;
 8006d5c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d111      	bne.n	8006d88 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6898      	ldr	r0, [r3, #8]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	f000 fe67 	bl	8007a50 <HAL_DMA_Start_IT>
 8006d82:	4603      	mov	r3, r0
 8006d84:	75fb      	strb	r3, [r7, #23]
 8006d86:	e010      	b.n	8006daa <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006d96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68d8      	ldr	r0, [r3, #12]
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	f000 fe55 	bl	8007a50 <HAL_DMA_Start_IT>
 8006da6:	4603      	mov	r3, r0
 8006da8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10c      	bne.n	8006dd0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6819      	ldr	r1, [r3, #0]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	409a      	lsls	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e005      	b.n	8006ddc <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f043 0204 	orr.w	r2, r3, #4
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	08007271 	.word	0x08007271
 8006dec:	08007293 	.word	0x08007293
 8006df0:	080072af 	.word	0x080072af
 8006df4:	0800732d 	.word	0x0800732d
 8006df8:	0800734f 	.word	0x0800734f
 8006dfc:	0800736b 	.word	0x0800736b

08006e00 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e03e      	b.n	8006e92 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6819      	ldr	r1, [r3, #0]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e24:	fa02 f303 	lsl.w	r3, r2, r3
 8006e28:	43da      	mvns	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	400a      	ands	r2, r1
 8006e30:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6819      	ldr	r1, [r3, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	f003 0310 	and.w	r3, r3, #16
 8006e3e:	2201      	movs	r2, #1
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	43da      	mvns	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	400a      	ands	r2, r1
 8006e4c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10d      	bne.n	8006e70 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 f863 	bl	8007f24 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e00c      	b.n	8006e8a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 f855 	bl	8007f24 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006e88:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01d      	beq.n	8006ef8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d018      	beq.n	8006ef8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f043 0201 	orr.w	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ee0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ef0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f86f 	bl	8006fd6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01d      	beq.n	8006f3e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d018      	beq.n	8006f3e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2204      	movs	r2, #4
 8006f10:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f043 0202 	orr.w	r2, r3, #2
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006f26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006f36:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f9ed 	bl	8007318 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b087      	sub	sp, #28
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	607a      	str	r2, [r7, #4]
 8006f52:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e015      	b.n	8006f8e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4413      	add	r3, r2
 8006f74:	3308      	adds	r3, #8
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	e004      	b.n	8006f84 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4413      	add	r3, r2
 8006f80:	3314      	adds	r3, #20
 8006f82:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	461a      	mov	r2, r3
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HAL_DAC_ConfigChannel+0x1e>
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e12a      	b.n	8007264 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	795b      	ldrb	r3, [r3, #5]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <HAL_DAC_ConfigChannel+0x2e>
 8007016:	2302      	movs	r3, #2
 8007018:	e124      	b.n	8007264 <HAL_DAC_ConfigChannel+0x278>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2202      	movs	r2, #2
 8007024:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b04      	cmp	r3, #4
 800702c:	d17a      	bne.n	8007124 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800702e:	f7fe f88b 	bl	8005148 <HAL_GetTick>
 8007032:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d13d      	bne.n	80070b6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800703a:	e018      	b.n	800706e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800703c:	f7fe f884 	bl	8005148 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b01      	cmp	r3, #1
 8007048:	d911      	bls.n	800706e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007050:	4b86      	ldr	r3, [pc, #536]	; (800726c <HAL_DAC_ConfigChannel+0x280>)
 8007052:	4013      	ands	r3, r2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f043 0208 	orr.w	r2, r3, #8
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2203      	movs	r2, #3
 8007068:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e0fa      	b.n	8007264 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007074:	4b7d      	ldr	r3, [pc, #500]	; (800726c <HAL_DAC_ConfigChannel+0x280>)
 8007076:	4013      	ands	r3, r2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1df      	bne.n	800703c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	6992      	ldr	r2, [r2, #24]
 8007084:	641a      	str	r2, [r3, #64]	; 0x40
 8007086:	e020      	b.n	80070ca <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007088:	f7fe f85e 	bl	8005148 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b01      	cmp	r3, #1
 8007094:	d90f      	bls.n	80070b6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709c:	2b00      	cmp	r3, #0
 800709e:	da0a      	bge.n	80070b6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f043 0208 	orr.w	r2, r3, #8
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2203      	movs	r2, #3
 80070b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e0d6      	b.n	8007264 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dbe3      	blt.n	8007088 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	6992      	ldr	r2, [r2, #24]
 80070c8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f003 0310 	and.w	r3, r3, #16
 80070d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80070da:	fa01 f303 	lsl.w	r3, r1, r3
 80070de:	43db      	mvns	r3, r3
 80070e0:	ea02 0103 	and.w	r1, r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	69da      	ldr	r2, [r3, #28]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	409a      	lsls	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	21ff      	movs	r1, #255	; 0xff
 8007106:	fa01 f303 	lsl.w	r3, r1, r3
 800710a:	43db      	mvns	r3, r3
 800710c:	ea02 0103 	and.w	r1, r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	6a1a      	ldr	r2, [r3, #32]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	409a      	lsls	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d11d      	bne.n	8007168 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007132:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f003 0310 	and.w	r3, r3, #16
 800713a:	221f      	movs	r2, #31
 800713c:	fa02 f303 	lsl.w	r3, r2, r3
 8007140:	43db      	mvns	r3, r3
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	4013      	ands	r3, r2
 8007146:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	4313      	orrs	r3, r2
 800715e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f003 0310 	and.w	r3, r3, #16
 8007176:	2207      	movs	r2, #7
 8007178:	fa02 f303 	lsl.w	r3, r2, r3
 800717c:	43db      	mvns	r3, r3
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	4013      	ands	r3, r2
 8007182:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d102      	bne.n	8007192 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800718c:	2300      	movs	r3, #0
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
 8007190:	e00f      	b.n	80071b2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	2b02      	cmp	r3, #2
 8007198:	d102      	bne.n	80071a0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800719a:	2301      	movs	r3, #1
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
 800719e:	e008      	b.n	80071b2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80071a8:	2301      	movs	r3, #1
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
 80071ac:	e001      	b.n	80071b2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	fa02 f303 	lsl.w	r3, r2, r3
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6819      	ldr	r1, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	43da      	mvns	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	400a      	ands	r2, r1
 80071f8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	f640 72fe 	movw	r2, #4094	; 0xffe
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	43db      	mvns	r3, r3
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	4013      	ands	r3, r2
 8007216:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	fa02 f303 	lsl.w	r3, r2, r3
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	4313      	orrs	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6819      	ldr	r1, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	22c0      	movs	r2, #192	; 0xc0
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	43da      	mvns	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	400a      	ands	r2, r1
 8007252:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007264:	4618      	mov	r0, r3
 8007266:	3728      	adds	r7, #40	; 0x28
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20008000 	.word	0x20008000

08007270 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff fe8b 	bl	8006f9a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2201      	movs	r2, #1
 8007288:	711a      	strb	r2, [r3, #4]
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7ff fe84 	bl	8006fae <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f043 0204 	orr.w	r2, r3, #4
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff fe7a 	bl	8006fc2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	711a      	strb	r2, [r3, #4]
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f7ff ffce 	bl	80072dc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	711a      	strb	r2, [r3, #4]
}
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f7ff ffc7 	bl	80072f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	f043 0204 	orr.w	r2, r3, #4
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff ffbd 	bl	8007304 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	711a      	strb	r2, [r3, #4]
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80073a0:	f7fd fed2 	bl	8005148 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e316      	b.n	80079de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a66      	ldr	r2, [pc, #408]	; (8007550 <HAL_DMA_Init+0x1b8>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d04a      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a65      	ldr	r2, [pc, #404]	; (8007554 <HAL_DMA_Init+0x1bc>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d045      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a63      	ldr	r2, [pc, #396]	; (8007558 <HAL_DMA_Init+0x1c0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d040      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a62      	ldr	r2, [pc, #392]	; (800755c <HAL_DMA_Init+0x1c4>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d03b      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a60      	ldr	r2, [pc, #384]	; (8007560 <HAL_DMA_Init+0x1c8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d036      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a5f      	ldr	r2, [pc, #380]	; (8007564 <HAL_DMA_Init+0x1cc>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d031      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a5d      	ldr	r2, [pc, #372]	; (8007568 <HAL_DMA_Init+0x1d0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d02c      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a5c      	ldr	r2, [pc, #368]	; (800756c <HAL_DMA_Init+0x1d4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d027      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a5a      	ldr	r2, [pc, #360]	; (8007570 <HAL_DMA_Init+0x1d8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d022      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a59      	ldr	r2, [pc, #356]	; (8007574 <HAL_DMA_Init+0x1dc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d01d      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a57      	ldr	r2, [pc, #348]	; (8007578 <HAL_DMA_Init+0x1e0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d018      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a56      	ldr	r2, [pc, #344]	; (800757c <HAL_DMA_Init+0x1e4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d013      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a54      	ldr	r2, [pc, #336]	; (8007580 <HAL_DMA_Init+0x1e8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00e      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a53      	ldr	r2, [pc, #332]	; (8007584 <HAL_DMA_Init+0x1ec>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d009      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a51      	ldr	r2, [pc, #324]	; (8007588 <HAL_DMA_Init+0x1f0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d004      	beq.n	8007450 <HAL_DMA_Init+0xb8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a50      	ldr	r2, [pc, #320]	; (800758c <HAL_DMA_Init+0x1f4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d101      	bne.n	8007454 <HAL_DMA_Init+0xbc>
 8007450:	2301      	movs	r3, #1
 8007452:	e000      	b.n	8007456 <HAL_DMA_Init+0xbe>
 8007454:	2300      	movs	r3, #0
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 813b 	beq.w	80076d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a37      	ldr	r2, [pc, #220]	; (8007550 <HAL_DMA_Init+0x1b8>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d04a      	beq.n	800750c <HAL_DMA_Init+0x174>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a36      	ldr	r2, [pc, #216]	; (8007554 <HAL_DMA_Init+0x1bc>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d045      	beq.n	800750c <HAL_DMA_Init+0x174>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a34      	ldr	r2, [pc, #208]	; (8007558 <HAL_DMA_Init+0x1c0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d040      	beq.n	800750c <HAL_DMA_Init+0x174>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a33      	ldr	r2, [pc, #204]	; (800755c <HAL_DMA_Init+0x1c4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d03b      	beq.n	800750c <HAL_DMA_Init+0x174>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a31      	ldr	r2, [pc, #196]	; (8007560 <HAL_DMA_Init+0x1c8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d036      	beq.n	800750c <HAL_DMA_Init+0x174>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a30      	ldr	r2, [pc, #192]	; (8007564 <HAL_DMA_Init+0x1cc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d031      	beq.n	800750c <HAL_DMA_Init+0x174>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a2e      	ldr	r2, [pc, #184]	; (8007568 <HAL_DMA_Init+0x1d0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d02c      	beq.n	800750c <HAL_DMA_Init+0x174>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a2d      	ldr	r2, [pc, #180]	; (800756c <HAL_DMA_Init+0x1d4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d027      	beq.n	800750c <HAL_DMA_Init+0x174>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a2b      	ldr	r2, [pc, #172]	; (8007570 <HAL_DMA_Init+0x1d8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d022      	beq.n	800750c <HAL_DMA_Init+0x174>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a2a      	ldr	r2, [pc, #168]	; (8007574 <HAL_DMA_Init+0x1dc>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d01d      	beq.n	800750c <HAL_DMA_Init+0x174>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a28      	ldr	r2, [pc, #160]	; (8007578 <HAL_DMA_Init+0x1e0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d018      	beq.n	800750c <HAL_DMA_Init+0x174>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a27      	ldr	r2, [pc, #156]	; (800757c <HAL_DMA_Init+0x1e4>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d013      	beq.n	800750c <HAL_DMA_Init+0x174>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a25      	ldr	r2, [pc, #148]	; (8007580 <HAL_DMA_Init+0x1e8>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00e      	beq.n	800750c <HAL_DMA_Init+0x174>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a24      	ldr	r2, [pc, #144]	; (8007584 <HAL_DMA_Init+0x1ec>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d009      	beq.n	800750c <HAL_DMA_Init+0x174>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a22      	ldr	r2, [pc, #136]	; (8007588 <HAL_DMA_Init+0x1f0>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d004      	beq.n	800750c <HAL_DMA_Init+0x174>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a21      	ldr	r2, [pc, #132]	; (800758c <HAL_DMA_Init+0x1f4>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d108      	bne.n	800751e <HAL_DMA_Init+0x186>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0201 	bic.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	e007      	b.n	800752e <HAL_DMA_Init+0x196>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0201 	bic.w	r2, r2, #1
 800752c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800752e:	e02f      	b.n	8007590 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007530:	f7fd fe0a 	bl	8005148 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b05      	cmp	r3, #5
 800753c:	d928      	bls.n	8007590 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2203      	movs	r2, #3
 8007548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e246      	b.n	80079de <HAL_DMA_Init+0x646>
 8007550:	40020010 	.word	0x40020010
 8007554:	40020028 	.word	0x40020028
 8007558:	40020040 	.word	0x40020040
 800755c:	40020058 	.word	0x40020058
 8007560:	40020070 	.word	0x40020070
 8007564:	40020088 	.word	0x40020088
 8007568:	400200a0 	.word	0x400200a0
 800756c:	400200b8 	.word	0x400200b8
 8007570:	40020410 	.word	0x40020410
 8007574:	40020428 	.word	0x40020428
 8007578:	40020440 	.word	0x40020440
 800757c:	40020458 	.word	0x40020458
 8007580:	40020470 	.word	0x40020470
 8007584:	40020488 	.word	0x40020488
 8007588:	400204a0 	.word	0x400204a0
 800758c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1c8      	bne.n	8007530 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4b83      	ldr	r3, [pc, #524]	; (80077b8 <HAL_DMA_Init+0x420>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80075b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	4313      	orrs	r3, r2
 80075da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d107      	bne.n	80075f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	4313      	orrs	r3, r2
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80075f4:	4b71      	ldr	r3, [pc, #452]	; (80077bc <HAL_DMA_Init+0x424>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	4b71      	ldr	r3, [pc, #452]	; (80077c0 <HAL_DMA_Init+0x428>)
 80075fa:	4013      	ands	r3, r2
 80075fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007600:	d328      	bcc.n	8007654 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b28      	cmp	r3, #40	; 0x28
 8007608:	d903      	bls.n	8007612 <HAL_DMA_Init+0x27a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b2e      	cmp	r3, #46	; 0x2e
 8007610:	d917      	bls.n	8007642 <HAL_DMA_Init+0x2aa>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2b3e      	cmp	r3, #62	; 0x3e
 8007618:	d903      	bls.n	8007622 <HAL_DMA_Init+0x28a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b42      	cmp	r3, #66	; 0x42
 8007620:	d90f      	bls.n	8007642 <HAL_DMA_Init+0x2aa>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b46      	cmp	r3, #70	; 0x46
 8007628:	d903      	bls.n	8007632 <HAL_DMA_Init+0x29a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b48      	cmp	r3, #72	; 0x48
 8007630:	d907      	bls.n	8007642 <HAL_DMA_Init+0x2aa>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b4e      	cmp	r3, #78	; 0x4e
 8007638:	d905      	bls.n	8007646 <HAL_DMA_Init+0x2ae>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b52      	cmp	r3, #82	; 0x52
 8007640:	d801      	bhi.n	8007646 <HAL_DMA_Init+0x2ae>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <HAL_DMA_Init+0x2b0>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007652:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f023 0307 	bic.w	r3, r3, #7
 800766a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	2b04      	cmp	r3, #4
 800767c:	d117      	bne.n	80076ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00e      	beq.n	80076ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f002 fb4d 	bl	8009d30 <DMA_CheckFifoParam>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2240      	movs	r2, #64	; 0x40
 80076a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e197      	b.n	80079de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f002 fa88 	bl	8009bcc <DMA_CalcBaseAndBitshift>
 80076bc:	4603      	mov	r3, r0
 80076be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	223f      	movs	r2, #63	; 0x3f
 80076ca:	409a      	lsls	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	609a      	str	r2, [r3, #8]
 80076d0:	e0cd      	b.n	800786e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a3b      	ldr	r2, [pc, #236]	; (80077c4 <HAL_DMA_Init+0x42c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d022      	beq.n	8007722 <HAL_DMA_Init+0x38a>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a39      	ldr	r2, [pc, #228]	; (80077c8 <HAL_DMA_Init+0x430>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01d      	beq.n	8007722 <HAL_DMA_Init+0x38a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a38      	ldr	r2, [pc, #224]	; (80077cc <HAL_DMA_Init+0x434>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d018      	beq.n	8007722 <HAL_DMA_Init+0x38a>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a36      	ldr	r2, [pc, #216]	; (80077d0 <HAL_DMA_Init+0x438>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <HAL_DMA_Init+0x38a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a35      	ldr	r2, [pc, #212]	; (80077d4 <HAL_DMA_Init+0x43c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00e      	beq.n	8007722 <HAL_DMA_Init+0x38a>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a33      	ldr	r2, [pc, #204]	; (80077d8 <HAL_DMA_Init+0x440>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d009      	beq.n	8007722 <HAL_DMA_Init+0x38a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a32      	ldr	r2, [pc, #200]	; (80077dc <HAL_DMA_Init+0x444>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <HAL_DMA_Init+0x38a>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a30      	ldr	r2, [pc, #192]	; (80077e0 <HAL_DMA_Init+0x448>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d101      	bne.n	8007726 <HAL_DMA_Init+0x38e>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <HAL_DMA_Init+0x390>
 8007726:	2300      	movs	r3, #0
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8097 	beq.w	800785c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a24      	ldr	r2, [pc, #144]	; (80077c4 <HAL_DMA_Init+0x42c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d021      	beq.n	800777c <HAL_DMA_Init+0x3e4>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a22      	ldr	r2, [pc, #136]	; (80077c8 <HAL_DMA_Init+0x430>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01c      	beq.n	800777c <HAL_DMA_Init+0x3e4>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a21      	ldr	r2, [pc, #132]	; (80077cc <HAL_DMA_Init+0x434>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d017      	beq.n	800777c <HAL_DMA_Init+0x3e4>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1f      	ldr	r2, [pc, #124]	; (80077d0 <HAL_DMA_Init+0x438>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d012      	beq.n	800777c <HAL_DMA_Init+0x3e4>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1e      	ldr	r2, [pc, #120]	; (80077d4 <HAL_DMA_Init+0x43c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00d      	beq.n	800777c <HAL_DMA_Init+0x3e4>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <HAL_DMA_Init+0x440>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d008      	beq.n	800777c <HAL_DMA_Init+0x3e4>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <HAL_DMA_Init+0x444>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d003      	beq.n	800777c <HAL_DMA_Init+0x3e4>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <HAL_DMA_Init+0x448>)
 800777a:	4293      	cmp	r3, r2
 800777c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2202      	movs	r2, #2
 8007782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4b12      	ldr	r3, [pc, #72]	; (80077e4 <HAL_DMA_Init+0x44c>)
 800779a:	4013      	ands	r3, r2
 800779c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b40      	cmp	r3, #64	; 0x40
 80077a4:	d020      	beq.n	80077e8 <HAL_DMA_Init+0x450>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2b80      	cmp	r3, #128	; 0x80
 80077ac:	d102      	bne.n	80077b4 <HAL_DMA_Init+0x41c>
 80077ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077b2:	e01a      	b.n	80077ea <HAL_DMA_Init+0x452>
 80077b4:	2300      	movs	r3, #0
 80077b6:	e018      	b.n	80077ea <HAL_DMA_Init+0x452>
 80077b8:	fe10803f 	.word	0xfe10803f
 80077bc:	5c001000 	.word	0x5c001000
 80077c0:	ffff0000 	.word	0xffff0000
 80077c4:	58025408 	.word	0x58025408
 80077c8:	5802541c 	.word	0x5802541c
 80077cc:	58025430 	.word	0x58025430
 80077d0:	58025444 	.word	0x58025444
 80077d4:	58025458 	.word	0x58025458
 80077d8:	5802546c 	.word	0x5802546c
 80077dc:	58025480 	.word	0x58025480
 80077e0:	58025494 	.word	0x58025494
 80077e4:	fffe000f 	.word	0xfffe000f
 80077e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	68d2      	ldr	r2, [r2, #12]
 80077ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80077f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80077f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007800:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007808:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007818:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	4313      	orrs	r3, r2
 800781e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	4b6e      	ldr	r3, [pc, #440]	; (80079e8 <HAL_DMA_Init+0x650>)
 8007830:	4413      	add	r3, r2
 8007832:	4a6e      	ldr	r2, [pc, #440]	; (80079ec <HAL_DMA_Init+0x654>)
 8007834:	fba2 2303 	umull	r2, r3, r2, r3
 8007838:	091b      	lsrs	r3, r3, #4
 800783a:	009a      	lsls	r2, r3, #2
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f002 f9c3 	bl	8009bcc <DMA_CalcBaseAndBitshift>
 8007846:	4603      	mov	r3, r0
 8007848:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800784e:	f003 031f 	and.w	r3, r3, #31
 8007852:	2201      	movs	r2, #1
 8007854:	409a      	lsls	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	605a      	str	r2, [r3, #4]
 800785a:	e008      	b.n	800786e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2240      	movs	r2, #64	; 0x40
 8007860:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2203      	movs	r2, #3
 8007866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e0b7      	b.n	80079de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a5f      	ldr	r2, [pc, #380]	; (80079f0 <HAL_DMA_Init+0x658>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d072      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a5d      	ldr	r2, [pc, #372]	; (80079f4 <HAL_DMA_Init+0x65c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d06d      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a5c      	ldr	r2, [pc, #368]	; (80079f8 <HAL_DMA_Init+0x660>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d068      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a5a      	ldr	r2, [pc, #360]	; (80079fc <HAL_DMA_Init+0x664>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d063      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a59      	ldr	r2, [pc, #356]	; (8007a00 <HAL_DMA_Init+0x668>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d05e      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a57      	ldr	r2, [pc, #348]	; (8007a04 <HAL_DMA_Init+0x66c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d059      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a56      	ldr	r2, [pc, #344]	; (8007a08 <HAL_DMA_Init+0x670>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d054      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a54      	ldr	r2, [pc, #336]	; (8007a0c <HAL_DMA_Init+0x674>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d04f      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a53      	ldr	r2, [pc, #332]	; (8007a10 <HAL_DMA_Init+0x678>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d04a      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a51      	ldr	r2, [pc, #324]	; (8007a14 <HAL_DMA_Init+0x67c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d045      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a50      	ldr	r2, [pc, #320]	; (8007a18 <HAL_DMA_Init+0x680>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d040      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a4e      	ldr	r2, [pc, #312]	; (8007a1c <HAL_DMA_Init+0x684>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d03b      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a4d      	ldr	r2, [pc, #308]	; (8007a20 <HAL_DMA_Init+0x688>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d036      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a4b      	ldr	r2, [pc, #300]	; (8007a24 <HAL_DMA_Init+0x68c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d031      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a4a      	ldr	r2, [pc, #296]	; (8007a28 <HAL_DMA_Init+0x690>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d02c      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a48      	ldr	r2, [pc, #288]	; (8007a2c <HAL_DMA_Init+0x694>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d027      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a47      	ldr	r2, [pc, #284]	; (8007a30 <HAL_DMA_Init+0x698>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d022      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a45      	ldr	r2, [pc, #276]	; (8007a34 <HAL_DMA_Init+0x69c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d01d      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a44      	ldr	r2, [pc, #272]	; (8007a38 <HAL_DMA_Init+0x6a0>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d018      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a42      	ldr	r2, [pc, #264]	; (8007a3c <HAL_DMA_Init+0x6a4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d013      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a41      	ldr	r2, [pc, #260]	; (8007a40 <HAL_DMA_Init+0x6a8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00e      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a3f      	ldr	r2, [pc, #252]	; (8007a44 <HAL_DMA_Init+0x6ac>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d009      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a3e      	ldr	r2, [pc, #248]	; (8007a48 <HAL_DMA_Init+0x6b0>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d004      	beq.n	800795e <HAL_DMA_Init+0x5c6>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a3c      	ldr	r2, [pc, #240]	; (8007a4c <HAL_DMA_Init+0x6b4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d101      	bne.n	8007962 <HAL_DMA_Init+0x5ca>
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <HAL_DMA_Init+0x5cc>
 8007962:	2300      	movs	r3, #0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d032      	beq.n	80079ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f002 fa5d 	bl	8009e28 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	d102      	bne.n	800797c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007990:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d010      	beq.n	80079bc <HAL_DMA_Init+0x624>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	2b08      	cmp	r3, #8
 80079a0:	d80c      	bhi.n	80079bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f002 fada 	bl	8009f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079b8:	605a      	str	r2, [r3, #4]
 80079ba:	e008      	b.n	80079ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	a7fdabf8 	.word	0xa7fdabf8
 80079ec:	cccccccd 	.word	0xcccccccd
 80079f0:	40020010 	.word	0x40020010
 80079f4:	40020028 	.word	0x40020028
 80079f8:	40020040 	.word	0x40020040
 80079fc:	40020058 	.word	0x40020058
 8007a00:	40020070 	.word	0x40020070
 8007a04:	40020088 	.word	0x40020088
 8007a08:	400200a0 	.word	0x400200a0
 8007a0c:	400200b8 	.word	0x400200b8
 8007a10:	40020410 	.word	0x40020410
 8007a14:	40020428 	.word	0x40020428
 8007a18:	40020440 	.word	0x40020440
 8007a1c:	40020458 	.word	0x40020458
 8007a20:	40020470 	.word	0x40020470
 8007a24:	40020488 	.word	0x40020488
 8007a28:	400204a0 	.word	0x400204a0
 8007a2c:	400204b8 	.word	0x400204b8
 8007a30:	58025408 	.word	0x58025408
 8007a34:	5802541c 	.word	0x5802541c
 8007a38:	58025430 	.word	0x58025430
 8007a3c:	58025444 	.word	0x58025444
 8007a40:	58025458 	.word	0x58025458
 8007a44:	5802546c 	.word	0x5802546c
 8007a48:	58025480 	.word	0x58025480
 8007a4c:	58025494 	.word	0x58025494

08007a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e226      	b.n	8007eba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_DMA_Start_IT+0x2a>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e21f      	b.n	8007eba <HAL_DMA_Start_IT+0x46a>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	f040 820a 	bne.w	8007ea4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a68      	ldr	r2, [pc, #416]	; (8007c44 <HAL_DMA_Start_IT+0x1f4>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d04a      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a66      	ldr	r2, [pc, #408]	; (8007c48 <HAL_DMA_Start_IT+0x1f8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d045      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a65      	ldr	r2, [pc, #404]	; (8007c4c <HAL_DMA_Start_IT+0x1fc>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d040      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a63      	ldr	r2, [pc, #396]	; (8007c50 <HAL_DMA_Start_IT+0x200>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d03b      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a62      	ldr	r2, [pc, #392]	; (8007c54 <HAL_DMA_Start_IT+0x204>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d036      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a60      	ldr	r2, [pc, #384]	; (8007c58 <HAL_DMA_Start_IT+0x208>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d031      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a5f      	ldr	r2, [pc, #380]	; (8007c5c <HAL_DMA_Start_IT+0x20c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d02c      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a5d      	ldr	r2, [pc, #372]	; (8007c60 <HAL_DMA_Start_IT+0x210>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d027      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a5c      	ldr	r2, [pc, #368]	; (8007c64 <HAL_DMA_Start_IT+0x214>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d022      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a5a      	ldr	r2, [pc, #360]	; (8007c68 <HAL_DMA_Start_IT+0x218>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d01d      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a59      	ldr	r2, [pc, #356]	; (8007c6c <HAL_DMA_Start_IT+0x21c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d018      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a57      	ldr	r2, [pc, #348]	; (8007c70 <HAL_DMA_Start_IT+0x220>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d013      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a56      	ldr	r2, [pc, #344]	; (8007c74 <HAL_DMA_Start_IT+0x224>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00e      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a54      	ldr	r2, [pc, #336]	; (8007c78 <HAL_DMA_Start_IT+0x228>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d009      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a53      	ldr	r2, [pc, #332]	; (8007c7c <HAL_DMA_Start_IT+0x22c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d004      	beq.n	8007b3e <HAL_DMA_Start_IT+0xee>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a51      	ldr	r2, [pc, #324]	; (8007c80 <HAL_DMA_Start_IT+0x230>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d108      	bne.n	8007b50 <HAL_DMA_Start_IT+0x100>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	e007      	b.n	8007b60 <HAL_DMA_Start_IT+0x110>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	68b9      	ldr	r1, [r7, #8]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f001 fe84 	bl	8009874 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a34      	ldr	r2, [pc, #208]	; (8007c44 <HAL_DMA_Start_IT+0x1f4>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d04a      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a33      	ldr	r2, [pc, #204]	; (8007c48 <HAL_DMA_Start_IT+0x1f8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d045      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a31      	ldr	r2, [pc, #196]	; (8007c4c <HAL_DMA_Start_IT+0x1fc>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d040      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a30      	ldr	r2, [pc, #192]	; (8007c50 <HAL_DMA_Start_IT+0x200>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d03b      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a2e      	ldr	r2, [pc, #184]	; (8007c54 <HAL_DMA_Start_IT+0x204>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d036      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a2d      	ldr	r2, [pc, #180]	; (8007c58 <HAL_DMA_Start_IT+0x208>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d031      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a2b      	ldr	r2, [pc, #172]	; (8007c5c <HAL_DMA_Start_IT+0x20c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d02c      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a2a      	ldr	r2, [pc, #168]	; (8007c60 <HAL_DMA_Start_IT+0x210>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d027      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a28      	ldr	r2, [pc, #160]	; (8007c64 <HAL_DMA_Start_IT+0x214>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d022      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a27      	ldr	r2, [pc, #156]	; (8007c68 <HAL_DMA_Start_IT+0x218>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d01d      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a25      	ldr	r2, [pc, #148]	; (8007c6c <HAL_DMA_Start_IT+0x21c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d018      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a24      	ldr	r2, [pc, #144]	; (8007c70 <HAL_DMA_Start_IT+0x220>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d013      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a22      	ldr	r2, [pc, #136]	; (8007c74 <HAL_DMA_Start_IT+0x224>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00e      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a21      	ldr	r2, [pc, #132]	; (8007c78 <HAL_DMA_Start_IT+0x228>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a1f      	ldr	r2, [pc, #124]	; (8007c7c <HAL_DMA_Start_IT+0x22c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <HAL_DMA_Start_IT+0x1bc>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a1e      	ldr	r2, [pc, #120]	; (8007c80 <HAL_DMA_Start_IT+0x230>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d101      	bne.n	8007c10 <HAL_DMA_Start_IT+0x1c0>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <HAL_DMA_Start_IT+0x1c2>
 8007c10:	2300      	movs	r3, #0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d036      	beq.n	8007c84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f023 021e 	bic.w	r2, r3, #30
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0216 	orr.w	r2, r2, #22
 8007c28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d03e      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0208 	orr.w	r2, r2, #8
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	e035      	b.n	8007cb0 <HAL_DMA_Start_IT+0x260>
 8007c44:	40020010 	.word	0x40020010
 8007c48:	40020028 	.word	0x40020028
 8007c4c:	40020040 	.word	0x40020040
 8007c50:	40020058 	.word	0x40020058
 8007c54:	40020070 	.word	0x40020070
 8007c58:	40020088 	.word	0x40020088
 8007c5c:	400200a0 	.word	0x400200a0
 8007c60:	400200b8 	.word	0x400200b8
 8007c64:	40020410 	.word	0x40020410
 8007c68:	40020428 	.word	0x40020428
 8007c6c:	40020440 	.word	0x40020440
 8007c70:	40020458 	.word	0x40020458
 8007c74:	40020470 	.word	0x40020470
 8007c78:	40020488 	.word	0x40020488
 8007c7c:	400204a0 	.word	0x400204a0
 8007c80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f023 020e 	bic.w	r2, r3, #14
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 020a 	orr.w	r2, r2, #10
 8007c96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0204 	orr.w	r2, r2, #4
 8007cae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a83      	ldr	r2, [pc, #524]	; (8007ec4 <HAL_DMA_Start_IT+0x474>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d072      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a82      	ldr	r2, [pc, #520]	; (8007ec8 <HAL_DMA_Start_IT+0x478>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d06d      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a80      	ldr	r2, [pc, #512]	; (8007ecc <HAL_DMA_Start_IT+0x47c>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d068      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a7f      	ldr	r2, [pc, #508]	; (8007ed0 <HAL_DMA_Start_IT+0x480>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d063      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a7d      	ldr	r2, [pc, #500]	; (8007ed4 <HAL_DMA_Start_IT+0x484>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d05e      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a7c      	ldr	r2, [pc, #496]	; (8007ed8 <HAL_DMA_Start_IT+0x488>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d059      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a7a      	ldr	r2, [pc, #488]	; (8007edc <HAL_DMA_Start_IT+0x48c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d054      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a79      	ldr	r2, [pc, #484]	; (8007ee0 <HAL_DMA_Start_IT+0x490>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d04f      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a77      	ldr	r2, [pc, #476]	; (8007ee4 <HAL_DMA_Start_IT+0x494>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d04a      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a76      	ldr	r2, [pc, #472]	; (8007ee8 <HAL_DMA_Start_IT+0x498>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d045      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a74      	ldr	r2, [pc, #464]	; (8007eec <HAL_DMA_Start_IT+0x49c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d040      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a73      	ldr	r2, [pc, #460]	; (8007ef0 <HAL_DMA_Start_IT+0x4a0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d03b      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a71      	ldr	r2, [pc, #452]	; (8007ef4 <HAL_DMA_Start_IT+0x4a4>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d036      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a70      	ldr	r2, [pc, #448]	; (8007ef8 <HAL_DMA_Start_IT+0x4a8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d031      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a6e      	ldr	r2, [pc, #440]	; (8007efc <HAL_DMA_Start_IT+0x4ac>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d02c      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a6d      	ldr	r2, [pc, #436]	; (8007f00 <HAL_DMA_Start_IT+0x4b0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d027      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a6b      	ldr	r2, [pc, #428]	; (8007f04 <HAL_DMA_Start_IT+0x4b4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d022      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a6a      	ldr	r2, [pc, #424]	; (8007f08 <HAL_DMA_Start_IT+0x4b8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d01d      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a68      	ldr	r2, [pc, #416]	; (8007f0c <HAL_DMA_Start_IT+0x4bc>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d018      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a67      	ldr	r2, [pc, #412]	; (8007f10 <HAL_DMA_Start_IT+0x4c0>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d013      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a65      	ldr	r2, [pc, #404]	; (8007f14 <HAL_DMA_Start_IT+0x4c4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00e      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a64      	ldr	r2, [pc, #400]	; (8007f18 <HAL_DMA_Start_IT+0x4c8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d009      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a62      	ldr	r2, [pc, #392]	; (8007f1c <HAL_DMA_Start_IT+0x4cc>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d004      	beq.n	8007da0 <HAL_DMA_Start_IT+0x350>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a61      	ldr	r2, [pc, #388]	; (8007f20 <HAL_DMA_Start_IT+0x4d0>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d101      	bne.n	8007da4 <HAL_DMA_Start_IT+0x354>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e000      	b.n	8007da6 <HAL_DMA_Start_IT+0x356>
 8007da4:	2300      	movs	r3, #0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d01a      	beq.n	8007de0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d007      	beq.n	8007de0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a37      	ldr	r2, [pc, #220]	; (8007ec4 <HAL_DMA_Start_IT+0x474>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d04a      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a36      	ldr	r2, [pc, #216]	; (8007ec8 <HAL_DMA_Start_IT+0x478>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d045      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a34      	ldr	r2, [pc, #208]	; (8007ecc <HAL_DMA_Start_IT+0x47c>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d040      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a33      	ldr	r2, [pc, #204]	; (8007ed0 <HAL_DMA_Start_IT+0x480>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d03b      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a31      	ldr	r2, [pc, #196]	; (8007ed4 <HAL_DMA_Start_IT+0x484>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d036      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a30      	ldr	r2, [pc, #192]	; (8007ed8 <HAL_DMA_Start_IT+0x488>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d031      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a2e      	ldr	r2, [pc, #184]	; (8007edc <HAL_DMA_Start_IT+0x48c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d02c      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a2d      	ldr	r2, [pc, #180]	; (8007ee0 <HAL_DMA_Start_IT+0x490>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d027      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a2b      	ldr	r2, [pc, #172]	; (8007ee4 <HAL_DMA_Start_IT+0x494>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d022      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a2a      	ldr	r2, [pc, #168]	; (8007ee8 <HAL_DMA_Start_IT+0x498>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d01d      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a28      	ldr	r2, [pc, #160]	; (8007eec <HAL_DMA_Start_IT+0x49c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d018      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a27      	ldr	r2, [pc, #156]	; (8007ef0 <HAL_DMA_Start_IT+0x4a0>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d013      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a25      	ldr	r2, [pc, #148]	; (8007ef4 <HAL_DMA_Start_IT+0x4a4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d00e      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a24      	ldr	r2, [pc, #144]	; (8007ef8 <HAL_DMA_Start_IT+0x4a8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d009      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a22      	ldr	r2, [pc, #136]	; (8007efc <HAL_DMA_Start_IT+0x4ac>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <HAL_DMA_Start_IT+0x430>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a21      	ldr	r2, [pc, #132]	; (8007f00 <HAL_DMA_Start_IT+0x4b0>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d108      	bne.n	8007e92 <HAL_DMA_Start_IT+0x442>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0201 	orr.w	r2, r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	e012      	b.n	8007eb8 <HAL_DMA_Start_IT+0x468>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0201 	orr.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e009      	b.n	8007eb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eaa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	40020010 	.word	0x40020010
 8007ec8:	40020028 	.word	0x40020028
 8007ecc:	40020040 	.word	0x40020040
 8007ed0:	40020058 	.word	0x40020058
 8007ed4:	40020070 	.word	0x40020070
 8007ed8:	40020088 	.word	0x40020088
 8007edc:	400200a0 	.word	0x400200a0
 8007ee0:	400200b8 	.word	0x400200b8
 8007ee4:	40020410 	.word	0x40020410
 8007ee8:	40020428 	.word	0x40020428
 8007eec:	40020440 	.word	0x40020440
 8007ef0:	40020458 	.word	0x40020458
 8007ef4:	40020470 	.word	0x40020470
 8007ef8:	40020488 	.word	0x40020488
 8007efc:	400204a0 	.word	0x400204a0
 8007f00:	400204b8 	.word	0x400204b8
 8007f04:	58025408 	.word	0x58025408
 8007f08:	5802541c 	.word	0x5802541c
 8007f0c:	58025430 	.word	0x58025430
 8007f10:	58025444 	.word	0x58025444
 8007f14:	58025458 	.word	0x58025458
 8007f18:	5802546c 	.word	0x5802546c
 8007f1c:	58025480 	.word	0x58025480
 8007f20:	58025494 	.word	0x58025494

08007f24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007f2c:	f7fd f90c 	bl	8005148 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e2dc      	b.n	80084f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d008      	beq.n	8007f5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2280      	movs	r2, #128	; 0x80
 8007f4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e2cd      	b.n	80084f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a76      	ldr	r2, [pc, #472]	; (8008138 <HAL_DMA_Abort+0x214>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d04a      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a74      	ldr	r2, [pc, #464]	; (800813c <HAL_DMA_Abort+0x218>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d045      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a73      	ldr	r2, [pc, #460]	; (8008140 <HAL_DMA_Abort+0x21c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d040      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a71      	ldr	r2, [pc, #452]	; (8008144 <HAL_DMA_Abort+0x220>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d03b      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a70      	ldr	r2, [pc, #448]	; (8008148 <HAL_DMA_Abort+0x224>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d036      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a6e      	ldr	r2, [pc, #440]	; (800814c <HAL_DMA_Abort+0x228>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d031      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a6d      	ldr	r2, [pc, #436]	; (8008150 <HAL_DMA_Abort+0x22c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d02c      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a6b      	ldr	r2, [pc, #428]	; (8008154 <HAL_DMA_Abort+0x230>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d027      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a6a      	ldr	r2, [pc, #424]	; (8008158 <HAL_DMA_Abort+0x234>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d022      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a68      	ldr	r2, [pc, #416]	; (800815c <HAL_DMA_Abort+0x238>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d01d      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a67      	ldr	r2, [pc, #412]	; (8008160 <HAL_DMA_Abort+0x23c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d018      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a65      	ldr	r2, [pc, #404]	; (8008164 <HAL_DMA_Abort+0x240>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d013      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a64      	ldr	r2, [pc, #400]	; (8008168 <HAL_DMA_Abort+0x244>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00e      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a62      	ldr	r2, [pc, #392]	; (800816c <HAL_DMA_Abort+0x248>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d009      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a61      	ldr	r2, [pc, #388]	; (8008170 <HAL_DMA_Abort+0x24c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d004      	beq.n	8007ffa <HAL_DMA_Abort+0xd6>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a5f      	ldr	r2, [pc, #380]	; (8008174 <HAL_DMA_Abort+0x250>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d101      	bne.n	8007ffe <HAL_DMA_Abort+0xda>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <HAL_DMA_Abort+0xdc>
 8007ffe:	2300      	movs	r3, #0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d013      	beq.n	800802c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 021e 	bic.w	r2, r2, #30
 8008012:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695a      	ldr	r2, [r3, #20]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008022:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	e00a      	b.n	8008042 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 020e 	bic.w	r2, r2, #14
 800803a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a3c      	ldr	r2, [pc, #240]	; (8008138 <HAL_DMA_Abort+0x214>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d072      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a3a      	ldr	r2, [pc, #232]	; (800813c <HAL_DMA_Abort+0x218>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d06d      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a39      	ldr	r2, [pc, #228]	; (8008140 <HAL_DMA_Abort+0x21c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d068      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a37      	ldr	r2, [pc, #220]	; (8008144 <HAL_DMA_Abort+0x220>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d063      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a36      	ldr	r2, [pc, #216]	; (8008148 <HAL_DMA_Abort+0x224>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d05e      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a34      	ldr	r2, [pc, #208]	; (800814c <HAL_DMA_Abort+0x228>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d059      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a33      	ldr	r2, [pc, #204]	; (8008150 <HAL_DMA_Abort+0x22c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d054      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a31      	ldr	r2, [pc, #196]	; (8008154 <HAL_DMA_Abort+0x230>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d04f      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a30      	ldr	r2, [pc, #192]	; (8008158 <HAL_DMA_Abort+0x234>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d04a      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a2e      	ldr	r2, [pc, #184]	; (800815c <HAL_DMA_Abort+0x238>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d045      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a2d      	ldr	r2, [pc, #180]	; (8008160 <HAL_DMA_Abort+0x23c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d040      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a2b      	ldr	r2, [pc, #172]	; (8008164 <HAL_DMA_Abort+0x240>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d03b      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a2a      	ldr	r2, [pc, #168]	; (8008168 <HAL_DMA_Abort+0x244>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d036      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a28      	ldr	r2, [pc, #160]	; (800816c <HAL_DMA_Abort+0x248>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d031      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a27      	ldr	r2, [pc, #156]	; (8008170 <HAL_DMA_Abort+0x24c>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d02c      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a25      	ldr	r2, [pc, #148]	; (8008174 <HAL_DMA_Abort+0x250>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d027      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a24      	ldr	r2, [pc, #144]	; (8008178 <HAL_DMA_Abort+0x254>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d022      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a22      	ldr	r2, [pc, #136]	; (800817c <HAL_DMA_Abort+0x258>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d01d      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a21      	ldr	r2, [pc, #132]	; (8008180 <HAL_DMA_Abort+0x25c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d018      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a1f      	ldr	r2, [pc, #124]	; (8008184 <HAL_DMA_Abort+0x260>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d013      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a1e      	ldr	r2, [pc, #120]	; (8008188 <HAL_DMA_Abort+0x264>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d00e      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a1c      	ldr	r2, [pc, #112]	; (800818c <HAL_DMA_Abort+0x268>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d009      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a1b      	ldr	r2, [pc, #108]	; (8008190 <HAL_DMA_Abort+0x26c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d004      	beq.n	8008132 <HAL_DMA_Abort+0x20e>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a19      	ldr	r2, [pc, #100]	; (8008194 <HAL_DMA_Abort+0x270>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d132      	bne.n	8008198 <HAL_DMA_Abort+0x274>
 8008132:	2301      	movs	r3, #1
 8008134:	e031      	b.n	800819a <HAL_DMA_Abort+0x276>
 8008136:	bf00      	nop
 8008138:	40020010 	.word	0x40020010
 800813c:	40020028 	.word	0x40020028
 8008140:	40020040 	.word	0x40020040
 8008144:	40020058 	.word	0x40020058
 8008148:	40020070 	.word	0x40020070
 800814c:	40020088 	.word	0x40020088
 8008150:	400200a0 	.word	0x400200a0
 8008154:	400200b8 	.word	0x400200b8
 8008158:	40020410 	.word	0x40020410
 800815c:	40020428 	.word	0x40020428
 8008160:	40020440 	.word	0x40020440
 8008164:	40020458 	.word	0x40020458
 8008168:	40020470 	.word	0x40020470
 800816c:	40020488 	.word	0x40020488
 8008170:	400204a0 	.word	0x400204a0
 8008174:	400204b8 	.word	0x400204b8
 8008178:	58025408 	.word	0x58025408
 800817c:	5802541c 	.word	0x5802541c
 8008180:	58025430 	.word	0x58025430
 8008184:	58025444 	.word	0x58025444
 8008188:	58025458 	.word	0x58025458
 800818c:	5802546c 	.word	0x5802546c
 8008190:	58025480 	.word	0x58025480
 8008194:	58025494 	.word	0x58025494
 8008198:	2300      	movs	r3, #0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d007      	beq.n	80081ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a6d      	ldr	r2, [pc, #436]	; (8008368 <HAL_DMA_Abort+0x444>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d04a      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a6b      	ldr	r2, [pc, #428]	; (800836c <HAL_DMA_Abort+0x448>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d045      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a6a      	ldr	r2, [pc, #424]	; (8008370 <HAL_DMA_Abort+0x44c>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d040      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a68      	ldr	r2, [pc, #416]	; (8008374 <HAL_DMA_Abort+0x450>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d03b      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a67      	ldr	r2, [pc, #412]	; (8008378 <HAL_DMA_Abort+0x454>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d036      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a65      	ldr	r2, [pc, #404]	; (800837c <HAL_DMA_Abort+0x458>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d031      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a64      	ldr	r2, [pc, #400]	; (8008380 <HAL_DMA_Abort+0x45c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d02c      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a62      	ldr	r2, [pc, #392]	; (8008384 <HAL_DMA_Abort+0x460>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d027      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a61      	ldr	r2, [pc, #388]	; (8008388 <HAL_DMA_Abort+0x464>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d022      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a5f      	ldr	r2, [pc, #380]	; (800838c <HAL_DMA_Abort+0x468>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d01d      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a5e      	ldr	r2, [pc, #376]	; (8008390 <HAL_DMA_Abort+0x46c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d018      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a5c      	ldr	r2, [pc, #368]	; (8008394 <HAL_DMA_Abort+0x470>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d013      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a5b      	ldr	r2, [pc, #364]	; (8008398 <HAL_DMA_Abort+0x474>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00e      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a59      	ldr	r2, [pc, #356]	; (800839c <HAL_DMA_Abort+0x478>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d009      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a58      	ldr	r2, [pc, #352]	; (80083a0 <HAL_DMA_Abort+0x47c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d004      	beq.n	800824e <HAL_DMA_Abort+0x32a>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a56      	ldr	r2, [pc, #344]	; (80083a4 <HAL_DMA_Abort+0x480>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d108      	bne.n	8008260 <HAL_DMA_Abort+0x33c>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0201 	bic.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e007      	b.n	8008270 <HAL_DMA_Abort+0x34c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0201 	bic.w	r2, r2, #1
 800826e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008270:	e013      	b.n	800829a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008272:	f7fc ff69 	bl	8005148 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b05      	cmp	r3, #5
 800827e:	d90c      	bls.n	800829a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2203      	movs	r2, #3
 800828a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e12d      	b.n	80084f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e5      	bne.n	8008272 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a2f      	ldr	r2, [pc, #188]	; (8008368 <HAL_DMA_Abort+0x444>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d04a      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a2d      	ldr	r2, [pc, #180]	; (800836c <HAL_DMA_Abort+0x448>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d045      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a2c      	ldr	r2, [pc, #176]	; (8008370 <HAL_DMA_Abort+0x44c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d040      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a2a      	ldr	r2, [pc, #168]	; (8008374 <HAL_DMA_Abort+0x450>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d03b      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a29      	ldr	r2, [pc, #164]	; (8008378 <HAL_DMA_Abort+0x454>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d036      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a27      	ldr	r2, [pc, #156]	; (800837c <HAL_DMA_Abort+0x458>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d031      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a26      	ldr	r2, [pc, #152]	; (8008380 <HAL_DMA_Abort+0x45c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d02c      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a24      	ldr	r2, [pc, #144]	; (8008384 <HAL_DMA_Abort+0x460>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d027      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a23      	ldr	r2, [pc, #140]	; (8008388 <HAL_DMA_Abort+0x464>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d022      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a21      	ldr	r2, [pc, #132]	; (800838c <HAL_DMA_Abort+0x468>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d01d      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a20      	ldr	r2, [pc, #128]	; (8008390 <HAL_DMA_Abort+0x46c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d018      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1e      	ldr	r2, [pc, #120]	; (8008394 <HAL_DMA_Abort+0x470>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d013      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a1d      	ldr	r2, [pc, #116]	; (8008398 <HAL_DMA_Abort+0x474>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00e      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1b      	ldr	r2, [pc, #108]	; (800839c <HAL_DMA_Abort+0x478>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d009      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1a      	ldr	r2, [pc, #104]	; (80083a0 <HAL_DMA_Abort+0x47c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d004      	beq.n	8008346 <HAL_DMA_Abort+0x422>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a18      	ldr	r2, [pc, #96]	; (80083a4 <HAL_DMA_Abort+0x480>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d101      	bne.n	800834a <HAL_DMA_Abort+0x426>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <HAL_DMA_Abort+0x428>
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d02b      	beq.n	80083a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008354:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835a:	f003 031f 	and.w	r3, r3, #31
 800835e:	223f      	movs	r2, #63	; 0x3f
 8008360:	409a      	lsls	r2, r3
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	609a      	str	r2, [r3, #8]
 8008366:	e02a      	b.n	80083be <HAL_DMA_Abort+0x49a>
 8008368:	40020010 	.word	0x40020010
 800836c:	40020028 	.word	0x40020028
 8008370:	40020040 	.word	0x40020040
 8008374:	40020058 	.word	0x40020058
 8008378:	40020070 	.word	0x40020070
 800837c:	40020088 	.word	0x40020088
 8008380:	400200a0 	.word	0x400200a0
 8008384:	400200b8 	.word	0x400200b8
 8008388:	40020410 	.word	0x40020410
 800838c:	40020428 	.word	0x40020428
 8008390:	40020440 	.word	0x40020440
 8008394:	40020458 	.word	0x40020458
 8008398:	40020470 	.word	0x40020470
 800839c:	40020488 	.word	0x40020488
 80083a0:	400204a0 	.word	0x400204a0
 80083a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b2:	f003 031f 	and.w	r3, r3, #31
 80083b6:	2201      	movs	r2, #1
 80083b8:	409a      	lsls	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a4f      	ldr	r2, [pc, #316]	; (8008500 <HAL_DMA_Abort+0x5dc>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d072      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a4d      	ldr	r2, [pc, #308]	; (8008504 <HAL_DMA_Abort+0x5e0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d06d      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a4c      	ldr	r2, [pc, #304]	; (8008508 <HAL_DMA_Abort+0x5e4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d068      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a4a      	ldr	r2, [pc, #296]	; (800850c <HAL_DMA_Abort+0x5e8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d063      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a49      	ldr	r2, [pc, #292]	; (8008510 <HAL_DMA_Abort+0x5ec>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d05e      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a47      	ldr	r2, [pc, #284]	; (8008514 <HAL_DMA_Abort+0x5f0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d059      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a46      	ldr	r2, [pc, #280]	; (8008518 <HAL_DMA_Abort+0x5f4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d054      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a44      	ldr	r2, [pc, #272]	; (800851c <HAL_DMA_Abort+0x5f8>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d04f      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a43      	ldr	r2, [pc, #268]	; (8008520 <HAL_DMA_Abort+0x5fc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d04a      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a41      	ldr	r2, [pc, #260]	; (8008524 <HAL_DMA_Abort+0x600>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d045      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a40      	ldr	r2, [pc, #256]	; (8008528 <HAL_DMA_Abort+0x604>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d040      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a3e      	ldr	r2, [pc, #248]	; (800852c <HAL_DMA_Abort+0x608>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d03b      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a3d      	ldr	r2, [pc, #244]	; (8008530 <HAL_DMA_Abort+0x60c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d036      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a3b      	ldr	r2, [pc, #236]	; (8008534 <HAL_DMA_Abort+0x610>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d031      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a3a      	ldr	r2, [pc, #232]	; (8008538 <HAL_DMA_Abort+0x614>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d02c      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a38      	ldr	r2, [pc, #224]	; (800853c <HAL_DMA_Abort+0x618>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d027      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a37      	ldr	r2, [pc, #220]	; (8008540 <HAL_DMA_Abort+0x61c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d022      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a35      	ldr	r2, [pc, #212]	; (8008544 <HAL_DMA_Abort+0x620>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01d      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a34      	ldr	r2, [pc, #208]	; (8008548 <HAL_DMA_Abort+0x624>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d018      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a32      	ldr	r2, [pc, #200]	; (800854c <HAL_DMA_Abort+0x628>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a31      	ldr	r2, [pc, #196]	; (8008550 <HAL_DMA_Abort+0x62c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00e      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a2f      	ldr	r2, [pc, #188]	; (8008554 <HAL_DMA_Abort+0x630>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d009      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a2e      	ldr	r2, [pc, #184]	; (8008558 <HAL_DMA_Abort+0x634>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d004      	beq.n	80084ae <HAL_DMA_Abort+0x58a>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a2c      	ldr	r2, [pc, #176]	; (800855c <HAL_DMA_Abort+0x638>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d101      	bne.n	80084b2 <HAL_DMA_Abort+0x58e>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <HAL_DMA_Abort+0x590>
 80084b2:	2300      	movs	r3, #0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d015      	beq.n	80084e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80084c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00c      	beq.n	80084e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80084e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	40020010 	.word	0x40020010
 8008504:	40020028 	.word	0x40020028
 8008508:	40020040 	.word	0x40020040
 800850c:	40020058 	.word	0x40020058
 8008510:	40020070 	.word	0x40020070
 8008514:	40020088 	.word	0x40020088
 8008518:	400200a0 	.word	0x400200a0
 800851c:	400200b8 	.word	0x400200b8
 8008520:	40020410 	.word	0x40020410
 8008524:	40020428 	.word	0x40020428
 8008528:	40020440 	.word	0x40020440
 800852c:	40020458 	.word	0x40020458
 8008530:	40020470 	.word	0x40020470
 8008534:	40020488 	.word	0x40020488
 8008538:	400204a0 	.word	0x400204a0
 800853c:	400204b8 	.word	0x400204b8
 8008540:	58025408 	.word	0x58025408
 8008544:	5802541c 	.word	0x5802541c
 8008548:	58025430 	.word	0x58025430
 800854c:	58025444 	.word	0x58025444
 8008550:	58025458 	.word	0x58025458
 8008554:	5802546c 	.word	0x5802546c
 8008558:	58025480 	.word	0x58025480
 800855c:	58025494 	.word	0x58025494

08008560 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e237      	b.n	80089e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d004      	beq.n	8008588 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2280      	movs	r2, #128	; 0x80
 8008582:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e22c      	b.n	80089e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a5c      	ldr	r2, [pc, #368]	; (8008700 <HAL_DMA_Abort_IT+0x1a0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d04a      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a5b      	ldr	r2, [pc, #364]	; (8008704 <HAL_DMA_Abort_IT+0x1a4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d045      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a59      	ldr	r2, [pc, #356]	; (8008708 <HAL_DMA_Abort_IT+0x1a8>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d040      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a58      	ldr	r2, [pc, #352]	; (800870c <HAL_DMA_Abort_IT+0x1ac>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d03b      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a56      	ldr	r2, [pc, #344]	; (8008710 <HAL_DMA_Abort_IT+0x1b0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d036      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a55      	ldr	r2, [pc, #340]	; (8008714 <HAL_DMA_Abort_IT+0x1b4>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d031      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a53      	ldr	r2, [pc, #332]	; (8008718 <HAL_DMA_Abort_IT+0x1b8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d02c      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a52      	ldr	r2, [pc, #328]	; (800871c <HAL_DMA_Abort_IT+0x1bc>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d027      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a50      	ldr	r2, [pc, #320]	; (8008720 <HAL_DMA_Abort_IT+0x1c0>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d022      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a4f      	ldr	r2, [pc, #316]	; (8008724 <HAL_DMA_Abort_IT+0x1c4>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d01d      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a4d      	ldr	r2, [pc, #308]	; (8008728 <HAL_DMA_Abort_IT+0x1c8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d018      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a4c      	ldr	r2, [pc, #304]	; (800872c <HAL_DMA_Abort_IT+0x1cc>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d013      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a4a      	ldr	r2, [pc, #296]	; (8008730 <HAL_DMA_Abort_IT+0x1d0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d00e      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a49      	ldr	r2, [pc, #292]	; (8008734 <HAL_DMA_Abort_IT+0x1d4>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d009      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a47      	ldr	r2, [pc, #284]	; (8008738 <HAL_DMA_Abort_IT+0x1d8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d004      	beq.n	8008628 <HAL_DMA_Abort_IT+0xc8>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a46      	ldr	r2, [pc, #280]	; (800873c <HAL_DMA_Abort_IT+0x1dc>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d101      	bne.n	800862c <HAL_DMA_Abort_IT+0xcc>
 8008628:	2301      	movs	r3, #1
 800862a:	e000      	b.n	800862e <HAL_DMA_Abort_IT+0xce>
 800862c:	2300      	movs	r3, #0
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 8086 	beq.w	8008740 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2204      	movs	r2, #4
 8008638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a2f      	ldr	r2, [pc, #188]	; (8008700 <HAL_DMA_Abort_IT+0x1a0>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d04a      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a2e      	ldr	r2, [pc, #184]	; (8008704 <HAL_DMA_Abort_IT+0x1a4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d045      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a2c      	ldr	r2, [pc, #176]	; (8008708 <HAL_DMA_Abort_IT+0x1a8>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d040      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a2b      	ldr	r2, [pc, #172]	; (800870c <HAL_DMA_Abort_IT+0x1ac>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d03b      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a29      	ldr	r2, [pc, #164]	; (8008710 <HAL_DMA_Abort_IT+0x1b0>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d036      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a28      	ldr	r2, [pc, #160]	; (8008714 <HAL_DMA_Abort_IT+0x1b4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d031      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a26      	ldr	r2, [pc, #152]	; (8008718 <HAL_DMA_Abort_IT+0x1b8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d02c      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a25      	ldr	r2, [pc, #148]	; (800871c <HAL_DMA_Abort_IT+0x1bc>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d027      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a23      	ldr	r2, [pc, #140]	; (8008720 <HAL_DMA_Abort_IT+0x1c0>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d022      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a22      	ldr	r2, [pc, #136]	; (8008724 <HAL_DMA_Abort_IT+0x1c4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d01d      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a20      	ldr	r2, [pc, #128]	; (8008728 <HAL_DMA_Abort_IT+0x1c8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d018      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1f      	ldr	r2, [pc, #124]	; (800872c <HAL_DMA_Abort_IT+0x1cc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d013      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1d      	ldr	r2, [pc, #116]	; (8008730 <HAL_DMA_Abort_IT+0x1d0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d00e      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1c      	ldr	r2, [pc, #112]	; (8008734 <HAL_DMA_Abort_IT+0x1d4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d009      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1a      	ldr	r2, [pc, #104]	; (8008738 <HAL_DMA_Abort_IT+0x1d8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d004      	beq.n	80086dc <HAL_DMA_Abort_IT+0x17c>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a19      	ldr	r2, [pc, #100]	; (800873c <HAL_DMA_Abort_IT+0x1dc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d108      	bne.n	80086ee <HAL_DMA_Abort_IT+0x18e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0201 	bic.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	e178      	b.n	80089e0 <HAL_DMA_Abort_IT+0x480>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0201 	bic.w	r2, r2, #1
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	e16f      	b.n	80089e0 <HAL_DMA_Abort_IT+0x480>
 8008700:	40020010 	.word	0x40020010
 8008704:	40020028 	.word	0x40020028
 8008708:	40020040 	.word	0x40020040
 800870c:	40020058 	.word	0x40020058
 8008710:	40020070 	.word	0x40020070
 8008714:	40020088 	.word	0x40020088
 8008718:	400200a0 	.word	0x400200a0
 800871c:	400200b8 	.word	0x400200b8
 8008720:	40020410 	.word	0x40020410
 8008724:	40020428 	.word	0x40020428
 8008728:	40020440 	.word	0x40020440
 800872c:	40020458 	.word	0x40020458
 8008730:	40020470 	.word	0x40020470
 8008734:	40020488 	.word	0x40020488
 8008738:	400204a0 	.word	0x400204a0
 800873c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 020e 	bic.w	r2, r2, #14
 800874e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a6c      	ldr	r2, [pc, #432]	; (8008908 <HAL_DMA_Abort_IT+0x3a8>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d04a      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a6b      	ldr	r2, [pc, #428]	; (800890c <HAL_DMA_Abort_IT+0x3ac>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d045      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a69      	ldr	r2, [pc, #420]	; (8008910 <HAL_DMA_Abort_IT+0x3b0>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d040      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a68      	ldr	r2, [pc, #416]	; (8008914 <HAL_DMA_Abort_IT+0x3b4>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d03b      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a66      	ldr	r2, [pc, #408]	; (8008918 <HAL_DMA_Abort_IT+0x3b8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d036      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a65      	ldr	r2, [pc, #404]	; (800891c <HAL_DMA_Abort_IT+0x3bc>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d031      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a63      	ldr	r2, [pc, #396]	; (8008920 <HAL_DMA_Abort_IT+0x3c0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d02c      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a62      	ldr	r2, [pc, #392]	; (8008924 <HAL_DMA_Abort_IT+0x3c4>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d027      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a60      	ldr	r2, [pc, #384]	; (8008928 <HAL_DMA_Abort_IT+0x3c8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d022      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a5f      	ldr	r2, [pc, #380]	; (800892c <HAL_DMA_Abort_IT+0x3cc>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d01d      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a5d      	ldr	r2, [pc, #372]	; (8008930 <HAL_DMA_Abort_IT+0x3d0>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d018      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a5c      	ldr	r2, [pc, #368]	; (8008934 <HAL_DMA_Abort_IT+0x3d4>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d013      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a5a      	ldr	r2, [pc, #360]	; (8008938 <HAL_DMA_Abort_IT+0x3d8>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00e      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a59      	ldr	r2, [pc, #356]	; (800893c <HAL_DMA_Abort_IT+0x3dc>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d009      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a57      	ldr	r2, [pc, #348]	; (8008940 <HAL_DMA_Abort_IT+0x3e0>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x290>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a56      	ldr	r2, [pc, #344]	; (8008944 <HAL_DMA_Abort_IT+0x3e4>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d108      	bne.n	8008802 <HAL_DMA_Abort_IT+0x2a2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0201 	bic.w	r2, r2, #1
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	e007      	b.n	8008812 <HAL_DMA_Abort_IT+0x2b2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a3c      	ldr	r2, [pc, #240]	; (8008908 <HAL_DMA_Abort_IT+0x3a8>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d072      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a3a      	ldr	r2, [pc, #232]	; (800890c <HAL_DMA_Abort_IT+0x3ac>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d06d      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a39      	ldr	r2, [pc, #228]	; (8008910 <HAL_DMA_Abort_IT+0x3b0>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d068      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a37      	ldr	r2, [pc, #220]	; (8008914 <HAL_DMA_Abort_IT+0x3b4>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d063      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a36      	ldr	r2, [pc, #216]	; (8008918 <HAL_DMA_Abort_IT+0x3b8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d05e      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a34      	ldr	r2, [pc, #208]	; (800891c <HAL_DMA_Abort_IT+0x3bc>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d059      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a33      	ldr	r2, [pc, #204]	; (8008920 <HAL_DMA_Abort_IT+0x3c0>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d054      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a31      	ldr	r2, [pc, #196]	; (8008924 <HAL_DMA_Abort_IT+0x3c4>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d04f      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a30      	ldr	r2, [pc, #192]	; (8008928 <HAL_DMA_Abort_IT+0x3c8>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d04a      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a2e      	ldr	r2, [pc, #184]	; (800892c <HAL_DMA_Abort_IT+0x3cc>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d045      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a2d      	ldr	r2, [pc, #180]	; (8008930 <HAL_DMA_Abort_IT+0x3d0>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d040      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a2b      	ldr	r2, [pc, #172]	; (8008934 <HAL_DMA_Abort_IT+0x3d4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d03b      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a2a      	ldr	r2, [pc, #168]	; (8008938 <HAL_DMA_Abort_IT+0x3d8>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d036      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a28      	ldr	r2, [pc, #160]	; (800893c <HAL_DMA_Abort_IT+0x3dc>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d031      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a27      	ldr	r2, [pc, #156]	; (8008940 <HAL_DMA_Abort_IT+0x3e0>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d02c      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a25      	ldr	r2, [pc, #148]	; (8008944 <HAL_DMA_Abort_IT+0x3e4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d027      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a24      	ldr	r2, [pc, #144]	; (8008948 <HAL_DMA_Abort_IT+0x3e8>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d022      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a22      	ldr	r2, [pc, #136]	; (800894c <HAL_DMA_Abort_IT+0x3ec>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d01d      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a21      	ldr	r2, [pc, #132]	; (8008950 <HAL_DMA_Abort_IT+0x3f0>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d018      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a1f      	ldr	r2, [pc, #124]	; (8008954 <HAL_DMA_Abort_IT+0x3f4>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d013      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a1e      	ldr	r2, [pc, #120]	; (8008958 <HAL_DMA_Abort_IT+0x3f8>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00e      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a1c      	ldr	r2, [pc, #112]	; (800895c <HAL_DMA_Abort_IT+0x3fc>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d009      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1b      	ldr	r2, [pc, #108]	; (8008960 <HAL_DMA_Abort_IT+0x400>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d004      	beq.n	8008902 <HAL_DMA_Abort_IT+0x3a2>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a19      	ldr	r2, [pc, #100]	; (8008964 <HAL_DMA_Abort_IT+0x404>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d132      	bne.n	8008968 <HAL_DMA_Abort_IT+0x408>
 8008902:	2301      	movs	r3, #1
 8008904:	e031      	b.n	800896a <HAL_DMA_Abort_IT+0x40a>
 8008906:	bf00      	nop
 8008908:	40020010 	.word	0x40020010
 800890c:	40020028 	.word	0x40020028
 8008910:	40020040 	.word	0x40020040
 8008914:	40020058 	.word	0x40020058
 8008918:	40020070 	.word	0x40020070
 800891c:	40020088 	.word	0x40020088
 8008920:	400200a0 	.word	0x400200a0
 8008924:	400200b8 	.word	0x400200b8
 8008928:	40020410 	.word	0x40020410
 800892c:	40020428 	.word	0x40020428
 8008930:	40020440 	.word	0x40020440
 8008934:	40020458 	.word	0x40020458
 8008938:	40020470 	.word	0x40020470
 800893c:	40020488 	.word	0x40020488
 8008940:	400204a0 	.word	0x400204a0
 8008944:	400204b8 	.word	0x400204b8
 8008948:	58025408 	.word	0x58025408
 800894c:	5802541c 	.word	0x5802541c
 8008950:	58025430 	.word	0x58025430
 8008954:	58025444 	.word	0x58025444
 8008958:	58025458 	.word	0x58025458
 800895c:	5802546c 	.word	0x5802546c
 8008960:	58025480 	.word	0x58025480
 8008964:	58025494 	.word	0x58025494
 8008968:	2300      	movs	r3, #0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d028      	beq.n	80089c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800897c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008982:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008988:	f003 031f 	and.w	r3, r3, #31
 800898c:	2201      	movs	r2, #1
 800898e:	409a      	lsls	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800899c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00c      	beq.n	80089c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80089be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop

080089ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08a      	sub	sp, #40	; 0x28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80089f4:	2300      	movs	r3, #0
 80089f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80089f8:	4b67      	ldr	r3, [pc, #412]	; (8008b98 <HAL_DMA_IRQHandler+0x1ac>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a67      	ldr	r2, [pc, #412]	; (8008b9c <HAL_DMA_IRQHandler+0x1b0>)
 80089fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008a02:	0a9b      	lsrs	r3, r3, #10
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a10:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a5f      	ldr	r2, [pc, #380]	; (8008ba0 <HAL_DMA_IRQHandler+0x1b4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d04a      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a5d      	ldr	r2, [pc, #372]	; (8008ba4 <HAL_DMA_IRQHandler+0x1b8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d045      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a5c      	ldr	r2, [pc, #368]	; (8008ba8 <HAL_DMA_IRQHandler+0x1bc>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d040      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a5a      	ldr	r2, [pc, #360]	; (8008bac <HAL_DMA_IRQHandler+0x1c0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d03b      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a59      	ldr	r2, [pc, #356]	; (8008bb0 <HAL_DMA_IRQHandler+0x1c4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d036      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a57      	ldr	r2, [pc, #348]	; (8008bb4 <HAL_DMA_IRQHandler+0x1c8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d031      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a56      	ldr	r2, [pc, #344]	; (8008bb8 <HAL_DMA_IRQHandler+0x1cc>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d02c      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a54      	ldr	r2, [pc, #336]	; (8008bbc <HAL_DMA_IRQHandler+0x1d0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d027      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a53      	ldr	r2, [pc, #332]	; (8008bc0 <HAL_DMA_IRQHandler+0x1d4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d022      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a51      	ldr	r2, [pc, #324]	; (8008bc4 <HAL_DMA_IRQHandler+0x1d8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d01d      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a50      	ldr	r2, [pc, #320]	; (8008bc8 <HAL_DMA_IRQHandler+0x1dc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d018      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a4e      	ldr	r2, [pc, #312]	; (8008bcc <HAL_DMA_IRQHandler+0x1e0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d013      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a4d      	ldr	r2, [pc, #308]	; (8008bd0 <HAL_DMA_IRQHandler+0x1e4>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d00e      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a4b      	ldr	r2, [pc, #300]	; (8008bd4 <HAL_DMA_IRQHandler+0x1e8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d009      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a4a      	ldr	r2, [pc, #296]	; (8008bd8 <HAL_DMA_IRQHandler+0x1ec>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d004      	beq.n	8008abe <HAL_DMA_IRQHandler+0xd2>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a48      	ldr	r2, [pc, #288]	; (8008bdc <HAL_DMA_IRQHandler+0x1f0>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d101      	bne.n	8008ac2 <HAL_DMA_IRQHandler+0xd6>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <HAL_DMA_IRQHandler+0xd8>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 842b 	beq.w	8009320 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ace:	f003 031f 	and.w	r3, r3, #31
 8008ad2:	2208      	movs	r2, #8
 8008ad4:	409a      	lsls	r2, r3
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80a2 	beq.w	8008c24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a2e      	ldr	r2, [pc, #184]	; (8008ba0 <HAL_DMA_IRQHandler+0x1b4>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d04a      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a2d      	ldr	r2, [pc, #180]	; (8008ba4 <HAL_DMA_IRQHandler+0x1b8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d045      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a2b      	ldr	r2, [pc, #172]	; (8008ba8 <HAL_DMA_IRQHandler+0x1bc>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d040      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a2a      	ldr	r2, [pc, #168]	; (8008bac <HAL_DMA_IRQHandler+0x1c0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d03b      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a28      	ldr	r2, [pc, #160]	; (8008bb0 <HAL_DMA_IRQHandler+0x1c4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d036      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a27      	ldr	r2, [pc, #156]	; (8008bb4 <HAL_DMA_IRQHandler+0x1c8>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d031      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a25      	ldr	r2, [pc, #148]	; (8008bb8 <HAL_DMA_IRQHandler+0x1cc>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d02c      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a24      	ldr	r2, [pc, #144]	; (8008bbc <HAL_DMA_IRQHandler+0x1d0>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d027      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a22      	ldr	r2, [pc, #136]	; (8008bc0 <HAL_DMA_IRQHandler+0x1d4>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d022      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a21      	ldr	r2, [pc, #132]	; (8008bc4 <HAL_DMA_IRQHandler+0x1d8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d01d      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a1f      	ldr	r2, [pc, #124]	; (8008bc8 <HAL_DMA_IRQHandler+0x1dc>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d018      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a1e      	ldr	r2, [pc, #120]	; (8008bcc <HAL_DMA_IRQHandler+0x1e0>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d013      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a1c      	ldr	r2, [pc, #112]	; (8008bd0 <HAL_DMA_IRQHandler+0x1e4>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d00e      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a1b      	ldr	r2, [pc, #108]	; (8008bd4 <HAL_DMA_IRQHandler+0x1e8>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d009      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a19      	ldr	r2, [pc, #100]	; (8008bd8 <HAL_DMA_IRQHandler+0x1ec>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d004      	beq.n	8008b80 <HAL_DMA_IRQHandler+0x194>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a18      	ldr	r2, [pc, #96]	; (8008bdc <HAL_DMA_IRQHandler+0x1f0>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d12f      	bne.n	8008be0 <HAL_DMA_IRQHandler+0x1f4>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0304 	and.w	r3, r3, #4
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bf14      	ite	ne
 8008b8e:	2301      	movne	r3, #1
 8008b90:	2300      	moveq	r3, #0
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	e02e      	b.n	8008bf4 <HAL_DMA_IRQHandler+0x208>
 8008b96:	bf00      	nop
 8008b98:	240000c8 	.word	0x240000c8
 8008b9c:	1b4e81b5 	.word	0x1b4e81b5
 8008ba0:	40020010 	.word	0x40020010
 8008ba4:	40020028 	.word	0x40020028
 8008ba8:	40020040 	.word	0x40020040
 8008bac:	40020058 	.word	0x40020058
 8008bb0:	40020070 	.word	0x40020070
 8008bb4:	40020088 	.word	0x40020088
 8008bb8:	400200a0 	.word	0x400200a0
 8008bbc:	400200b8 	.word	0x400200b8
 8008bc0:	40020410 	.word	0x40020410
 8008bc4:	40020428 	.word	0x40020428
 8008bc8:	40020440 	.word	0x40020440
 8008bcc:	40020458 	.word	0x40020458
 8008bd0:	40020470 	.word	0x40020470
 8008bd4:	40020488 	.word	0x40020488
 8008bd8:	400204a0 	.word	0x400204a0
 8008bdc:	400204b8 	.word	0x400204b8
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	bf14      	ite	ne
 8008bee:	2301      	movne	r3, #1
 8008bf0:	2300      	moveq	r3, #0
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d015      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 0204 	bic.w	r2, r2, #4
 8008c06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c0c:	f003 031f 	and.w	r3, r3, #31
 8008c10:	2208      	movs	r2, #8
 8008c12:	409a      	lsls	r2, r3
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1c:	f043 0201 	orr.w	r2, r3, #1
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c28:	f003 031f 	and.w	r3, r3, #31
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d06e      	beq.n	8008d18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a69      	ldr	r2, [pc, #420]	; (8008de4 <HAL_DMA_IRQHandler+0x3f8>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d04a      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a67      	ldr	r2, [pc, #412]	; (8008de8 <HAL_DMA_IRQHandler+0x3fc>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d045      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a66      	ldr	r2, [pc, #408]	; (8008dec <HAL_DMA_IRQHandler+0x400>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d040      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a64      	ldr	r2, [pc, #400]	; (8008df0 <HAL_DMA_IRQHandler+0x404>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d03b      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a63      	ldr	r2, [pc, #396]	; (8008df4 <HAL_DMA_IRQHandler+0x408>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d036      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a61      	ldr	r2, [pc, #388]	; (8008df8 <HAL_DMA_IRQHandler+0x40c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d031      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a60      	ldr	r2, [pc, #384]	; (8008dfc <HAL_DMA_IRQHandler+0x410>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d02c      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a5e      	ldr	r2, [pc, #376]	; (8008e00 <HAL_DMA_IRQHandler+0x414>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d027      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a5d      	ldr	r2, [pc, #372]	; (8008e04 <HAL_DMA_IRQHandler+0x418>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d022      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a5b      	ldr	r2, [pc, #364]	; (8008e08 <HAL_DMA_IRQHandler+0x41c>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d01d      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a5a      	ldr	r2, [pc, #360]	; (8008e0c <HAL_DMA_IRQHandler+0x420>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d018      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a58      	ldr	r2, [pc, #352]	; (8008e10 <HAL_DMA_IRQHandler+0x424>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d013      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a57      	ldr	r2, [pc, #348]	; (8008e14 <HAL_DMA_IRQHandler+0x428>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00e      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a55      	ldr	r2, [pc, #340]	; (8008e18 <HAL_DMA_IRQHandler+0x42c>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d009      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a54      	ldr	r2, [pc, #336]	; (8008e1c <HAL_DMA_IRQHandler+0x430>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d004      	beq.n	8008cda <HAL_DMA_IRQHandler+0x2ee>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a52      	ldr	r2, [pc, #328]	; (8008e20 <HAL_DMA_IRQHandler+0x434>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d10a      	bne.n	8008cf0 <HAL_DMA_IRQHandler+0x304>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bf14      	ite	ne
 8008ce8:	2301      	movne	r3, #1
 8008cea:	2300      	moveq	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	e003      	b.n	8008cf8 <HAL_DMA_IRQHandler+0x30c>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00d      	beq.n	8008d18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	2201      	movs	r2, #1
 8008d06:	409a      	lsls	r2, r3
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d10:	f043 0202 	orr.w	r2, r3, #2
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d1c:	f003 031f 	and.w	r3, r3, #31
 8008d20:	2204      	movs	r2, #4
 8008d22:	409a      	lsls	r2, r3
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	4013      	ands	r3, r2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 808f 	beq.w	8008e4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a2c      	ldr	r2, [pc, #176]	; (8008de4 <HAL_DMA_IRQHandler+0x3f8>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d04a      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a2a      	ldr	r2, [pc, #168]	; (8008de8 <HAL_DMA_IRQHandler+0x3fc>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d045      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a29      	ldr	r2, [pc, #164]	; (8008dec <HAL_DMA_IRQHandler+0x400>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d040      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a27      	ldr	r2, [pc, #156]	; (8008df0 <HAL_DMA_IRQHandler+0x404>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d03b      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a26      	ldr	r2, [pc, #152]	; (8008df4 <HAL_DMA_IRQHandler+0x408>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d036      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a24      	ldr	r2, [pc, #144]	; (8008df8 <HAL_DMA_IRQHandler+0x40c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d031      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a23      	ldr	r2, [pc, #140]	; (8008dfc <HAL_DMA_IRQHandler+0x410>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d02c      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a21      	ldr	r2, [pc, #132]	; (8008e00 <HAL_DMA_IRQHandler+0x414>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d027      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a20      	ldr	r2, [pc, #128]	; (8008e04 <HAL_DMA_IRQHandler+0x418>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d022      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a1e      	ldr	r2, [pc, #120]	; (8008e08 <HAL_DMA_IRQHandler+0x41c>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d01d      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a1d      	ldr	r2, [pc, #116]	; (8008e0c <HAL_DMA_IRQHandler+0x420>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d018      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a1b      	ldr	r2, [pc, #108]	; (8008e10 <HAL_DMA_IRQHandler+0x424>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d013      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a1a      	ldr	r2, [pc, #104]	; (8008e14 <HAL_DMA_IRQHandler+0x428>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d00e      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a18      	ldr	r2, [pc, #96]	; (8008e18 <HAL_DMA_IRQHandler+0x42c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d009      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a17      	ldr	r2, [pc, #92]	; (8008e1c <HAL_DMA_IRQHandler+0x430>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d004      	beq.n	8008dce <HAL_DMA_IRQHandler+0x3e2>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a15      	ldr	r2, [pc, #84]	; (8008e20 <HAL_DMA_IRQHandler+0x434>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d12a      	bne.n	8008e24 <HAL_DMA_IRQHandler+0x438>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	bf14      	ite	ne
 8008ddc:	2301      	movne	r3, #1
 8008dde:	2300      	moveq	r3, #0
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	e023      	b.n	8008e2c <HAL_DMA_IRQHandler+0x440>
 8008de4:	40020010 	.word	0x40020010
 8008de8:	40020028 	.word	0x40020028
 8008dec:	40020040 	.word	0x40020040
 8008df0:	40020058 	.word	0x40020058
 8008df4:	40020070 	.word	0x40020070
 8008df8:	40020088 	.word	0x40020088
 8008dfc:	400200a0 	.word	0x400200a0
 8008e00:	400200b8 	.word	0x400200b8
 8008e04:	40020410 	.word	0x40020410
 8008e08:	40020428 	.word	0x40020428
 8008e0c:	40020440 	.word	0x40020440
 8008e10:	40020458 	.word	0x40020458
 8008e14:	40020470 	.word	0x40020470
 8008e18:	40020488 	.word	0x40020488
 8008e1c:	400204a0 	.word	0x400204a0
 8008e20:	400204b8 	.word	0x400204b8
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00d      	beq.n	8008e4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e34:	f003 031f 	and.w	r3, r3, #31
 8008e38:	2204      	movs	r2, #4
 8008e3a:	409a      	lsls	r2, r3
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e44:	f043 0204 	orr.w	r2, r3, #4
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e50:	f003 031f 	and.w	r3, r3, #31
 8008e54:	2210      	movs	r2, #16
 8008e56:	409a      	lsls	r2, r3
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 80a6 	beq.w	8008fae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a85      	ldr	r2, [pc, #532]	; (800907c <HAL_DMA_IRQHandler+0x690>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d04a      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a83      	ldr	r2, [pc, #524]	; (8009080 <HAL_DMA_IRQHandler+0x694>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d045      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a82      	ldr	r2, [pc, #520]	; (8009084 <HAL_DMA_IRQHandler+0x698>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d040      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a80      	ldr	r2, [pc, #512]	; (8009088 <HAL_DMA_IRQHandler+0x69c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d03b      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a7f      	ldr	r2, [pc, #508]	; (800908c <HAL_DMA_IRQHandler+0x6a0>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d036      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a7d      	ldr	r2, [pc, #500]	; (8009090 <HAL_DMA_IRQHandler+0x6a4>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d031      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a7c      	ldr	r2, [pc, #496]	; (8009094 <HAL_DMA_IRQHandler+0x6a8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d02c      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a7a      	ldr	r2, [pc, #488]	; (8009098 <HAL_DMA_IRQHandler+0x6ac>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d027      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a79      	ldr	r2, [pc, #484]	; (800909c <HAL_DMA_IRQHandler+0x6b0>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d022      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a77      	ldr	r2, [pc, #476]	; (80090a0 <HAL_DMA_IRQHandler+0x6b4>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d01d      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a76      	ldr	r2, [pc, #472]	; (80090a4 <HAL_DMA_IRQHandler+0x6b8>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d018      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a74      	ldr	r2, [pc, #464]	; (80090a8 <HAL_DMA_IRQHandler+0x6bc>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d013      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a73      	ldr	r2, [pc, #460]	; (80090ac <HAL_DMA_IRQHandler+0x6c0>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d00e      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a71      	ldr	r2, [pc, #452]	; (80090b0 <HAL_DMA_IRQHandler+0x6c4>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d009      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a70      	ldr	r2, [pc, #448]	; (80090b4 <HAL_DMA_IRQHandler+0x6c8>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d004      	beq.n	8008f02 <HAL_DMA_IRQHandler+0x516>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a6e      	ldr	r2, [pc, #440]	; (80090b8 <HAL_DMA_IRQHandler+0x6cc>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d10a      	bne.n	8008f18 <HAL_DMA_IRQHandler+0x52c>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0308 	and.w	r3, r3, #8
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	bf14      	ite	ne
 8008f10:	2301      	movne	r3, #1
 8008f12:	2300      	moveq	r3, #0
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	e009      	b.n	8008f2c <HAL_DMA_IRQHandler+0x540>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0304 	and.w	r3, r3, #4
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	bf14      	ite	ne
 8008f26:	2301      	movne	r3, #1
 8008f28:	2300      	moveq	r3, #0
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d03e      	beq.n	8008fae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f34:	f003 031f 	and.w	r3, r3, #31
 8008f38:	2210      	movs	r2, #16
 8008f3a:	409a      	lsls	r2, r3
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d018      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d108      	bne.n	8008f6e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d024      	beq.n	8008fae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
 8008f6c:	e01f      	b.n	8008fae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d01b      	beq.n	8008fae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	4798      	blx	r3
 8008f7e:	e016      	b.n	8008fae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d107      	bne.n	8008f9e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 0208 	bic.w	r2, r2, #8
 8008f9c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb2:	f003 031f 	and.w	r3, r3, #31
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	409a      	lsls	r2, r3
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 8110 	beq.w	80091e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a2c      	ldr	r2, [pc, #176]	; (800907c <HAL_DMA_IRQHandler+0x690>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d04a      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a2b      	ldr	r2, [pc, #172]	; (8009080 <HAL_DMA_IRQHandler+0x694>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d045      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a29      	ldr	r2, [pc, #164]	; (8009084 <HAL_DMA_IRQHandler+0x698>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d040      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a28      	ldr	r2, [pc, #160]	; (8009088 <HAL_DMA_IRQHandler+0x69c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d03b      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a26      	ldr	r2, [pc, #152]	; (800908c <HAL_DMA_IRQHandler+0x6a0>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d036      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a25      	ldr	r2, [pc, #148]	; (8009090 <HAL_DMA_IRQHandler+0x6a4>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d031      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a23      	ldr	r2, [pc, #140]	; (8009094 <HAL_DMA_IRQHandler+0x6a8>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d02c      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a22      	ldr	r2, [pc, #136]	; (8009098 <HAL_DMA_IRQHandler+0x6ac>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d027      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a20      	ldr	r2, [pc, #128]	; (800909c <HAL_DMA_IRQHandler+0x6b0>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d022      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a1f      	ldr	r2, [pc, #124]	; (80090a0 <HAL_DMA_IRQHandler+0x6b4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d01d      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a1d      	ldr	r2, [pc, #116]	; (80090a4 <HAL_DMA_IRQHandler+0x6b8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d018      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a1c      	ldr	r2, [pc, #112]	; (80090a8 <HAL_DMA_IRQHandler+0x6bc>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d013      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a1a      	ldr	r2, [pc, #104]	; (80090ac <HAL_DMA_IRQHandler+0x6c0>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00e      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a19      	ldr	r2, [pc, #100]	; (80090b0 <HAL_DMA_IRQHandler+0x6c4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d009      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <HAL_DMA_IRQHandler+0x6c8>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d004      	beq.n	8009064 <HAL_DMA_IRQHandler+0x678>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a16      	ldr	r2, [pc, #88]	; (80090b8 <HAL_DMA_IRQHandler+0x6cc>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d12b      	bne.n	80090bc <HAL_DMA_IRQHandler+0x6d0>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0310 	and.w	r3, r3, #16
 800906e:	2b00      	cmp	r3, #0
 8009070:	bf14      	ite	ne
 8009072:	2301      	movne	r3, #1
 8009074:	2300      	moveq	r3, #0
 8009076:	b2db      	uxtb	r3, r3
 8009078:	e02a      	b.n	80090d0 <HAL_DMA_IRQHandler+0x6e4>
 800907a:	bf00      	nop
 800907c:	40020010 	.word	0x40020010
 8009080:	40020028 	.word	0x40020028
 8009084:	40020040 	.word	0x40020040
 8009088:	40020058 	.word	0x40020058
 800908c:	40020070 	.word	0x40020070
 8009090:	40020088 	.word	0x40020088
 8009094:	400200a0 	.word	0x400200a0
 8009098:	400200b8 	.word	0x400200b8
 800909c:	40020410 	.word	0x40020410
 80090a0:	40020428 	.word	0x40020428
 80090a4:	40020440 	.word	0x40020440
 80090a8:	40020458 	.word	0x40020458
 80090ac:	40020470 	.word	0x40020470
 80090b0:	40020488 	.word	0x40020488
 80090b4:	400204a0 	.word	0x400204a0
 80090b8:	400204b8 	.word	0x400204b8
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	bf14      	ite	ne
 80090ca:	2301      	movne	r3, #1
 80090cc:	2300      	moveq	r3, #0
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 8087 	beq.w	80091e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090da:	f003 031f 	and.w	r3, r3, #31
 80090de:	2220      	movs	r2, #32
 80090e0:	409a      	lsls	r2, r3
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	d139      	bne.n	8009166 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0216 	bic.w	r2, r2, #22
 8009100:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	695a      	ldr	r2, [r3, #20]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009110:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	d103      	bne.n	8009122 <HAL_DMA_IRQHandler+0x736>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800911e:	2b00      	cmp	r3, #0
 8009120:	d007      	beq.n	8009132 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0208 	bic.w	r2, r2, #8
 8009130:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009136:	f003 031f 	and.w	r3, r3, #31
 800913a:	223f      	movs	r2, #63	; 0x3f
 800913c:	409a      	lsls	r2, r3
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 834a 	beq.w	80097f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4798      	blx	r3
          }
          return;
 8009164:	e344      	b.n	80097f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d018      	beq.n	80091a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d108      	bne.n	8009194 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009186:	2b00      	cmp	r3, #0
 8009188:	d02c      	beq.n	80091e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	4798      	blx	r3
 8009192:	e027      	b.n	80091e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009198:	2b00      	cmp	r3, #0
 800919a:	d023      	beq.n	80091e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	4798      	blx	r3
 80091a4:	e01e      	b.n	80091e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10f      	bne.n	80091d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 0210 	bic.w	r2, r2, #16
 80091c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8306 	beq.w	80097fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 8088 	beq.w	800930c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2204      	movs	r2, #4
 8009200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a7a      	ldr	r2, [pc, #488]	; (80093f4 <HAL_DMA_IRQHandler+0xa08>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d04a      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a79      	ldr	r2, [pc, #484]	; (80093f8 <HAL_DMA_IRQHandler+0xa0c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d045      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a77      	ldr	r2, [pc, #476]	; (80093fc <HAL_DMA_IRQHandler+0xa10>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d040      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a76      	ldr	r2, [pc, #472]	; (8009400 <HAL_DMA_IRQHandler+0xa14>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d03b      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a74      	ldr	r2, [pc, #464]	; (8009404 <HAL_DMA_IRQHandler+0xa18>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d036      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a73      	ldr	r2, [pc, #460]	; (8009408 <HAL_DMA_IRQHandler+0xa1c>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d031      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a71      	ldr	r2, [pc, #452]	; (800940c <HAL_DMA_IRQHandler+0xa20>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d02c      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a70      	ldr	r2, [pc, #448]	; (8009410 <HAL_DMA_IRQHandler+0xa24>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d027      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a6e      	ldr	r2, [pc, #440]	; (8009414 <HAL_DMA_IRQHandler+0xa28>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d022      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a6d      	ldr	r2, [pc, #436]	; (8009418 <HAL_DMA_IRQHandler+0xa2c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d01d      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a6b      	ldr	r2, [pc, #428]	; (800941c <HAL_DMA_IRQHandler+0xa30>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d018      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a6a      	ldr	r2, [pc, #424]	; (8009420 <HAL_DMA_IRQHandler+0xa34>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d013      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a68      	ldr	r2, [pc, #416]	; (8009424 <HAL_DMA_IRQHandler+0xa38>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d00e      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a67      	ldr	r2, [pc, #412]	; (8009428 <HAL_DMA_IRQHandler+0xa3c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d009      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a65      	ldr	r2, [pc, #404]	; (800942c <HAL_DMA_IRQHandler+0xa40>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d004      	beq.n	80092a4 <HAL_DMA_IRQHandler+0x8b8>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a64      	ldr	r2, [pc, #400]	; (8009430 <HAL_DMA_IRQHandler+0xa44>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d108      	bne.n	80092b6 <HAL_DMA_IRQHandler+0x8ca>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0201 	bic.w	r2, r2, #1
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	e007      	b.n	80092c6 <HAL_DMA_IRQHandler+0x8da>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3301      	adds	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d307      	bcc.n	80092e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1f2      	bne.n	80092c6 <HAL_DMA_IRQHandler+0x8da>
 80092e0:	e000      	b.n	80092e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80092e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d004      	beq.n	80092fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2203      	movs	r2, #3
 80092f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80092fa:	e003      	b.n	8009304 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 8272 	beq.w	80097fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	4798      	blx	r3
 800931e:	e26c      	b.n	80097fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a43      	ldr	r2, [pc, #268]	; (8009434 <HAL_DMA_IRQHandler+0xa48>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d022      	beq.n	8009370 <HAL_DMA_IRQHandler+0x984>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a42      	ldr	r2, [pc, #264]	; (8009438 <HAL_DMA_IRQHandler+0xa4c>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d01d      	beq.n	8009370 <HAL_DMA_IRQHandler+0x984>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a40      	ldr	r2, [pc, #256]	; (800943c <HAL_DMA_IRQHandler+0xa50>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d018      	beq.n	8009370 <HAL_DMA_IRQHandler+0x984>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a3f      	ldr	r2, [pc, #252]	; (8009440 <HAL_DMA_IRQHandler+0xa54>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d013      	beq.n	8009370 <HAL_DMA_IRQHandler+0x984>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a3d      	ldr	r2, [pc, #244]	; (8009444 <HAL_DMA_IRQHandler+0xa58>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d00e      	beq.n	8009370 <HAL_DMA_IRQHandler+0x984>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a3c      	ldr	r2, [pc, #240]	; (8009448 <HAL_DMA_IRQHandler+0xa5c>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d009      	beq.n	8009370 <HAL_DMA_IRQHandler+0x984>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a3a      	ldr	r2, [pc, #232]	; (800944c <HAL_DMA_IRQHandler+0xa60>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d004      	beq.n	8009370 <HAL_DMA_IRQHandler+0x984>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a39      	ldr	r2, [pc, #228]	; (8009450 <HAL_DMA_IRQHandler+0xa64>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d101      	bne.n	8009374 <HAL_DMA_IRQHandler+0x988>
 8009370:	2301      	movs	r3, #1
 8009372:	e000      	b.n	8009376 <HAL_DMA_IRQHandler+0x98a>
 8009374:	2300      	movs	r3, #0
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 823f 	beq.w	80097fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009388:	f003 031f 	and.w	r3, r3, #31
 800938c:	2204      	movs	r2, #4
 800938e:	409a      	lsls	r2, r3
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	4013      	ands	r3, r2
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80cd 	beq.w	8009534 <HAL_DMA_IRQHandler+0xb48>
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80c7 	beq.w	8009534 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093aa:	f003 031f 	and.w	r3, r3, #31
 80093ae:	2204      	movs	r2, #4
 80093b0:	409a      	lsls	r2, r3
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d049      	beq.n	8009454 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d109      	bne.n	80093de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 8210 	beq.w	80097f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093dc:	e20a      	b.n	80097f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 8206 	beq.w	80097f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093f0:	e200      	b.n	80097f4 <HAL_DMA_IRQHandler+0xe08>
 80093f2:	bf00      	nop
 80093f4:	40020010 	.word	0x40020010
 80093f8:	40020028 	.word	0x40020028
 80093fc:	40020040 	.word	0x40020040
 8009400:	40020058 	.word	0x40020058
 8009404:	40020070 	.word	0x40020070
 8009408:	40020088 	.word	0x40020088
 800940c:	400200a0 	.word	0x400200a0
 8009410:	400200b8 	.word	0x400200b8
 8009414:	40020410 	.word	0x40020410
 8009418:	40020428 	.word	0x40020428
 800941c:	40020440 	.word	0x40020440
 8009420:	40020458 	.word	0x40020458
 8009424:	40020470 	.word	0x40020470
 8009428:	40020488 	.word	0x40020488
 800942c:	400204a0 	.word	0x400204a0
 8009430:	400204b8 	.word	0x400204b8
 8009434:	58025408 	.word	0x58025408
 8009438:	5802541c 	.word	0x5802541c
 800943c:	58025430 	.word	0x58025430
 8009440:	58025444 	.word	0x58025444
 8009444:	58025458 	.word	0x58025458
 8009448:	5802546c 	.word	0x5802546c
 800944c:	58025480 	.word	0x58025480
 8009450:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f003 0320 	and.w	r3, r3, #32
 800945a:	2b00      	cmp	r3, #0
 800945c:	d160      	bne.n	8009520 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a7f      	ldr	r2, [pc, #508]	; (8009660 <HAL_DMA_IRQHandler+0xc74>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d04a      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a7d      	ldr	r2, [pc, #500]	; (8009664 <HAL_DMA_IRQHandler+0xc78>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d045      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a7c      	ldr	r2, [pc, #496]	; (8009668 <HAL_DMA_IRQHandler+0xc7c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d040      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a7a      	ldr	r2, [pc, #488]	; (800966c <HAL_DMA_IRQHandler+0xc80>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d03b      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a79      	ldr	r2, [pc, #484]	; (8009670 <HAL_DMA_IRQHandler+0xc84>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d036      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a77      	ldr	r2, [pc, #476]	; (8009674 <HAL_DMA_IRQHandler+0xc88>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d031      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a76      	ldr	r2, [pc, #472]	; (8009678 <HAL_DMA_IRQHandler+0xc8c>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d02c      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a74      	ldr	r2, [pc, #464]	; (800967c <HAL_DMA_IRQHandler+0xc90>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d027      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a73      	ldr	r2, [pc, #460]	; (8009680 <HAL_DMA_IRQHandler+0xc94>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d022      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a71      	ldr	r2, [pc, #452]	; (8009684 <HAL_DMA_IRQHandler+0xc98>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d01d      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a70      	ldr	r2, [pc, #448]	; (8009688 <HAL_DMA_IRQHandler+0xc9c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d018      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a6e      	ldr	r2, [pc, #440]	; (800968c <HAL_DMA_IRQHandler+0xca0>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d013      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a6d      	ldr	r2, [pc, #436]	; (8009690 <HAL_DMA_IRQHandler+0xca4>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00e      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a6b      	ldr	r2, [pc, #428]	; (8009694 <HAL_DMA_IRQHandler+0xca8>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d009      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a6a      	ldr	r2, [pc, #424]	; (8009698 <HAL_DMA_IRQHandler+0xcac>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d004      	beq.n	80094fe <HAL_DMA_IRQHandler+0xb12>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a68      	ldr	r2, [pc, #416]	; (800969c <HAL_DMA_IRQHandler+0xcb0>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d108      	bne.n	8009510 <HAL_DMA_IRQHandler+0xb24>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0208 	bic.w	r2, r2, #8
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	e007      	b.n	8009520 <HAL_DMA_IRQHandler+0xb34>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0204 	bic.w	r2, r2, #4
 800951e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 8165 	beq.w	80097f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009532:	e15f      	b.n	80097f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009538:	f003 031f 	and.w	r3, r3, #31
 800953c:	2202      	movs	r2, #2
 800953e:	409a      	lsls	r2, r3
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	4013      	ands	r3, r2
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 80c5 	beq.w	80096d4 <HAL_DMA_IRQHandler+0xce8>
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 80bf 	beq.w	80096d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955a:	f003 031f 	and.w	r3, r3, #31
 800955e:	2202      	movs	r2, #2
 8009560:	409a      	lsls	r2, r3
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d018      	beq.n	80095a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d109      	bne.n	800958e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 813a 	beq.w	80097f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800958c:	e134      	b.n	80097f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 8130 	beq.w	80097f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095a0:	e12a      	b.n	80097f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f003 0320 	and.w	r3, r3, #32
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f040 8089 	bne.w	80096c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a2b      	ldr	r2, [pc, #172]	; (8009660 <HAL_DMA_IRQHandler+0xc74>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d04a      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a29      	ldr	r2, [pc, #164]	; (8009664 <HAL_DMA_IRQHandler+0xc78>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d045      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a28      	ldr	r2, [pc, #160]	; (8009668 <HAL_DMA_IRQHandler+0xc7c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d040      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a26      	ldr	r2, [pc, #152]	; (800966c <HAL_DMA_IRQHandler+0xc80>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d03b      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a25      	ldr	r2, [pc, #148]	; (8009670 <HAL_DMA_IRQHandler+0xc84>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d036      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a23      	ldr	r2, [pc, #140]	; (8009674 <HAL_DMA_IRQHandler+0xc88>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d031      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a22      	ldr	r2, [pc, #136]	; (8009678 <HAL_DMA_IRQHandler+0xc8c>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d02c      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a20      	ldr	r2, [pc, #128]	; (800967c <HAL_DMA_IRQHandler+0xc90>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d027      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a1f      	ldr	r2, [pc, #124]	; (8009680 <HAL_DMA_IRQHandler+0xc94>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d022      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a1d      	ldr	r2, [pc, #116]	; (8009684 <HAL_DMA_IRQHandler+0xc98>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d01d      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a1c      	ldr	r2, [pc, #112]	; (8009688 <HAL_DMA_IRQHandler+0xc9c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d018      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a1a      	ldr	r2, [pc, #104]	; (800968c <HAL_DMA_IRQHandler+0xca0>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d013      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a19      	ldr	r2, [pc, #100]	; (8009690 <HAL_DMA_IRQHandler+0xca4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d00e      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a17      	ldr	r2, [pc, #92]	; (8009694 <HAL_DMA_IRQHandler+0xca8>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d009      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a16      	ldr	r2, [pc, #88]	; (8009698 <HAL_DMA_IRQHandler+0xcac>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d004      	beq.n	800964e <HAL_DMA_IRQHandler+0xc62>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a14      	ldr	r2, [pc, #80]	; (800969c <HAL_DMA_IRQHandler+0xcb0>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d128      	bne.n	80096a0 <HAL_DMA_IRQHandler+0xcb4>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0214 	bic.w	r2, r2, #20
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	e027      	b.n	80096b0 <HAL_DMA_IRQHandler+0xcc4>
 8009660:	40020010 	.word	0x40020010
 8009664:	40020028 	.word	0x40020028
 8009668:	40020040 	.word	0x40020040
 800966c:	40020058 	.word	0x40020058
 8009670:	40020070 	.word	0x40020070
 8009674:	40020088 	.word	0x40020088
 8009678:	400200a0 	.word	0x400200a0
 800967c:	400200b8 	.word	0x400200b8
 8009680:	40020410 	.word	0x40020410
 8009684:	40020428 	.word	0x40020428
 8009688:	40020440 	.word	0x40020440
 800968c:	40020458 	.word	0x40020458
 8009690:	40020470 	.word	0x40020470
 8009694:	40020488 	.word	0x40020488
 8009698:	400204a0 	.word	0x400204a0
 800969c:	400204b8 	.word	0x400204b8
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f022 020a 	bic.w	r2, r2, #10
 80096ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 8097 	beq.w	80097f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096d2:	e091      	b.n	80097f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	2208      	movs	r2, #8
 80096de:	409a      	lsls	r2, r3
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	4013      	ands	r3, r2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 8088 	beq.w	80097fa <HAL_DMA_IRQHandler+0xe0e>
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f003 0308 	and.w	r3, r3, #8
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 8082 	beq.w	80097fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a41      	ldr	r2, [pc, #260]	; (8009800 <HAL_DMA_IRQHandler+0xe14>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d04a      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a3f      	ldr	r2, [pc, #252]	; (8009804 <HAL_DMA_IRQHandler+0xe18>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d045      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a3e      	ldr	r2, [pc, #248]	; (8009808 <HAL_DMA_IRQHandler+0xe1c>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d040      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a3c      	ldr	r2, [pc, #240]	; (800980c <HAL_DMA_IRQHandler+0xe20>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d03b      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a3b      	ldr	r2, [pc, #236]	; (8009810 <HAL_DMA_IRQHandler+0xe24>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d036      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a39      	ldr	r2, [pc, #228]	; (8009814 <HAL_DMA_IRQHandler+0xe28>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d031      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a38      	ldr	r2, [pc, #224]	; (8009818 <HAL_DMA_IRQHandler+0xe2c>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d02c      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a36      	ldr	r2, [pc, #216]	; (800981c <HAL_DMA_IRQHandler+0xe30>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d027      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a35      	ldr	r2, [pc, #212]	; (8009820 <HAL_DMA_IRQHandler+0xe34>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d022      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a33      	ldr	r2, [pc, #204]	; (8009824 <HAL_DMA_IRQHandler+0xe38>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d01d      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a32      	ldr	r2, [pc, #200]	; (8009828 <HAL_DMA_IRQHandler+0xe3c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d018      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a30      	ldr	r2, [pc, #192]	; (800982c <HAL_DMA_IRQHandler+0xe40>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d013      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a2f      	ldr	r2, [pc, #188]	; (8009830 <HAL_DMA_IRQHandler+0xe44>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00e      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a2d      	ldr	r2, [pc, #180]	; (8009834 <HAL_DMA_IRQHandler+0xe48>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d009      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a2c      	ldr	r2, [pc, #176]	; (8009838 <HAL_DMA_IRQHandler+0xe4c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d004      	beq.n	8009796 <HAL_DMA_IRQHandler+0xdaa>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a2a      	ldr	r2, [pc, #168]	; (800983c <HAL_DMA_IRQHandler+0xe50>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d108      	bne.n	80097a8 <HAL_DMA_IRQHandler+0xdbc>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f022 021c 	bic.w	r2, r2, #28
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	e007      	b.n	80097b8 <HAL_DMA_IRQHandler+0xdcc>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f022 020e 	bic.w	r2, r2, #14
 80097b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097bc:	f003 031f 	and.w	r3, r3, #31
 80097c0:	2201      	movs	r2, #1
 80097c2:	409a      	lsls	r2, r3
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d009      	beq.n	80097fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	4798      	blx	r3
 80097ee:	e004      	b.n	80097fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80097f0:	bf00      	nop
 80097f2:	e002      	b.n	80097fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097f4:	bf00      	nop
 80097f6:	e000      	b.n	80097fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80097fa:	3728      	adds	r7, #40	; 0x28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	40020010 	.word	0x40020010
 8009804:	40020028 	.word	0x40020028
 8009808:	40020040 	.word	0x40020040
 800980c:	40020058 	.word	0x40020058
 8009810:	40020070 	.word	0x40020070
 8009814:	40020088 	.word	0x40020088
 8009818:	400200a0 	.word	0x400200a0
 800981c:	400200b8 	.word	0x400200b8
 8009820:	40020410 	.word	0x40020410
 8009824:	40020428 	.word	0x40020428
 8009828:	40020440 	.word	0x40020440
 800982c:	40020458 	.word	0x40020458
 8009830:	40020470 	.word	0x40020470
 8009834:	40020488 	.word	0x40020488
 8009838:	400204a0 	.word	0x400204a0
 800983c:	400204b8 	.word	0x400204b8

08009840 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800984e:	b2db      	uxtb	r3, r3
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009886:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800988c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a7f      	ldr	r2, [pc, #508]	; (8009a90 <DMA_SetConfig+0x21c>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d072      	beq.n	800997e <DMA_SetConfig+0x10a>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a7d      	ldr	r2, [pc, #500]	; (8009a94 <DMA_SetConfig+0x220>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d06d      	beq.n	800997e <DMA_SetConfig+0x10a>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a7c      	ldr	r2, [pc, #496]	; (8009a98 <DMA_SetConfig+0x224>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d068      	beq.n	800997e <DMA_SetConfig+0x10a>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a7a      	ldr	r2, [pc, #488]	; (8009a9c <DMA_SetConfig+0x228>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d063      	beq.n	800997e <DMA_SetConfig+0x10a>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a79      	ldr	r2, [pc, #484]	; (8009aa0 <DMA_SetConfig+0x22c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d05e      	beq.n	800997e <DMA_SetConfig+0x10a>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a77      	ldr	r2, [pc, #476]	; (8009aa4 <DMA_SetConfig+0x230>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d059      	beq.n	800997e <DMA_SetConfig+0x10a>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a76      	ldr	r2, [pc, #472]	; (8009aa8 <DMA_SetConfig+0x234>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d054      	beq.n	800997e <DMA_SetConfig+0x10a>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a74      	ldr	r2, [pc, #464]	; (8009aac <DMA_SetConfig+0x238>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d04f      	beq.n	800997e <DMA_SetConfig+0x10a>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a73      	ldr	r2, [pc, #460]	; (8009ab0 <DMA_SetConfig+0x23c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d04a      	beq.n	800997e <DMA_SetConfig+0x10a>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a71      	ldr	r2, [pc, #452]	; (8009ab4 <DMA_SetConfig+0x240>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d045      	beq.n	800997e <DMA_SetConfig+0x10a>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a70      	ldr	r2, [pc, #448]	; (8009ab8 <DMA_SetConfig+0x244>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d040      	beq.n	800997e <DMA_SetConfig+0x10a>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a6e      	ldr	r2, [pc, #440]	; (8009abc <DMA_SetConfig+0x248>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d03b      	beq.n	800997e <DMA_SetConfig+0x10a>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a6d      	ldr	r2, [pc, #436]	; (8009ac0 <DMA_SetConfig+0x24c>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d036      	beq.n	800997e <DMA_SetConfig+0x10a>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a6b      	ldr	r2, [pc, #428]	; (8009ac4 <DMA_SetConfig+0x250>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d031      	beq.n	800997e <DMA_SetConfig+0x10a>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a6a      	ldr	r2, [pc, #424]	; (8009ac8 <DMA_SetConfig+0x254>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d02c      	beq.n	800997e <DMA_SetConfig+0x10a>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a68      	ldr	r2, [pc, #416]	; (8009acc <DMA_SetConfig+0x258>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d027      	beq.n	800997e <DMA_SetConfig+0x10a>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a67      	ldr	r2, [pc, #412]	; (8009ad0 <DMA_SetConfig+0x25c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d022      	beq.n	800997e <DMA_SetConfig+0x10a>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a65      	ldr	r2, [pc, #404]	; (8009ad4 <DMA_SetConfig+0x260>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d01d      	beq.n	800997e <DMA_SetConfig+0x10a>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a64      	ldr	r2, [pc, #400]	; (8009ad8 <DMA_SetConfig+0x264>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d018      	beq.n	800997e <DMA_SetConfig+0x10a>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a62      	ldr	r2, [pc, #392]	; (8009adc <DMA_SetConfig+0x268>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d013      	beq.n	800997e <DMA_SetConfig+0x10a>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a61      	ldr	r2, [pc, #388]	; (8009ae0 <DMA_SetConfig+0x26c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d00e      	beq.n	800997e <DMA_SetConfig+0x10a>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a5f      	ldr	r2, [pc, #380]	; (8009ae4 <DMA_SetConfig+0x270>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d009      	beq.n	800997e <DMA_SetConfig+0x10a>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a5e      	ldr	r2, [pc, #376]	; (8009ae8 <DMA_SetConfig+0x274>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d004      	beq.n	800997e <DMA_SetConfig+0x10a>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a5c      	ldr	r2, [pc, #368]	; (8009aec <DMA_SetConfig+0x278>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d101      	bne.n	8009982 <DMA_SetConfig+0x10e>
 800997e:	2301      	movs	r3, #1
 8009980:	e000      	b.n	8009984 <DMA_SetConfig+0x110>
 8009982:	2300      	movs	r3, #0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00d      	beq.n	80099a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009990:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80099a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a39      	ldr	r2, [pc, #228]	; (8009a90 <DMA_SetConfig+0x21c>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d04a      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a38      	ldr	r2, [pc, #224]	; (8009a94 <DMA_SetConfig+0x220>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d045      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a36      	ldr	r2, [pc, #216]	; (8009a98 <DMA_SetConfig+0x224>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d040      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a35      	ldr	r2, [pc, #212]	; (8009a9c <DMA_SetConfig+0x228>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d03b      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a33      	ldr	r2, [pc, #204]	; (8009aa0 <DMA_SetConfig+0x22c>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d036      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a32      	ldr	r2, [pc, #200]	; (8009aa4 <DMA_SetConfig+0x230>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d031      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a30      	ldr	r2, [pc, #192]	; (8009aa8 <DMA_SetConfig+0x234>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d02c      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a2f      	ldr	r2, [pc, #188]	; (8009aac <DMA_SetConfig+0x238>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d027      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a2d      	ldr	r2, [pc, #180]	; (8009ab0 <DMA_SetConfig+0x23c>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d022      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a2c      	ldr	r2, [pc, #176]	; (8009ab4 <DMA_SetConfig+0x240>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d01d      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a2a      	ldr	r2, [pc, #168]	; (8009ab8 <DMA_SetConfig+0x244>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d018      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a29      	ldr	r2, [pc, #164]	; (8009abc <DMA_SetConfig+0x248>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d013      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a27      	ldr	r2, [pc, #156]	; (8009ac0 <DMA_SetConfig+0x24c>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d00e      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a26      	ldr	r2, [pc, #152]	; (8009ac4 <DMA_SetConfig+0x250>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d009      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a24      	ldr	r2, [pc, #144]	; (8009ac8 <DMA_SetConfig+0x254>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d004      	beq.n	8009a44 <DMA_SetConfig+0x1d0>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a23      	ldr	r2, [pc, #140]	; (8009acc <DMA_SetConfig+0x258>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d101      	bne.n	8009a48 <DMA_SetConfig+0x1d4>
 8009a44:	2301      	movs	r3, #1
 8009a46:	e000      	b.n	8009a4a <DMA_SetConfig+0x1d6>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d059      	beq.n	8009b02 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a52:	f003 031f 	and.w	r3, r3, #31
 8009a56:	223f      	movs	r2, #63	; 0x3f
 8009a58:	409a      	lsls	r2, r3
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a6c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	2b40      	cmp	r3, #64	; 0x40
 8009a7c:	d138      	bne.n	8009af0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009a8e:	e086      	b.n	8009b9e <DMA_SetConfig+0x32a>
 8009a90:	40020010 	.word	0x40020010
 8009a94:	40020028 	.word	0x40020028
 8009a98:	40020040 	.word	0x40020040
 8009a9c:	40020058 	.word	0x40020058
 8009aa0:	40020070 	.word	0x40020070
 8009aa4:	40020088 	.word	0x40020088
 8009aa8:	400200a0 	.word	0x400200a0
 8009aac:	400200b8 	.word	0x400200b8
 8009ab0:	40020410 	.word	0x40020410
 8009ab4:	40020428 	.word	0x40020428
 8009ab8:	40020440 	.word	0x40020440
 8009abc:	40020458 	.word	0x40020458
 8009ac0:	40020470 	.word	0x40020470
 8009ac4:	40020488 	.word	0x40020488
 8009ac8:	400204a0 	.word	0x400204a0
 8009acc:	400204b8 	.word	0x400204b8
 8009ad0:	58025408 	.word	0x58025408
 8009ad4:	5802541c 	.word	0x5802541c
 8009ad8:	58025430 	.word	0x58025430
 8009adc:	58025444 	.word	0x58025444
 8009ae0:	58025458 	.word	0x58025458
 8009ae4:	5802546c 	.word	0x5802546c
 8009ae8:	58025480 	.word	0x58025480
 8009aec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	60da      	str	r2, [r3, #12]
}
 8009b00:	e04d      	b.n	8009b9e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a29      	ldr	r2, [pc, #164]	; (8009bac <DMA_SetConfig+0x338>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d022      	beq.n	8009b52 <DMA_SetConfig+0x2de>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a27      	ldr	r2, [pc, #156]	; (8009bb0 <DMA_SetConfig+0x33c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d01d      	beq.n	8009b52 <DMA_SetConfig+0x2de>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a26      	ldr	r2, [pc, #152]	; (8009bb4 <DMA_SetConfig+0x340>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d018      	beq.n	8009b52 <DMA_SetConfig+0x2de>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a24      	ldr	r2, [pc, #144]	; (8009bb8 <DMA_SetConfig+0x344>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d013      	beq.n	8009b52 <DMA_SetConfig+0x2de>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a23      	ldr	r2, [pc, #140]	; (8009bbc <DMA_SetConfig+0x348>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d00e      	beq.n	8009b52 <DMA_SetConfig+0x2de>
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a21      	ldr	r2, [pc, #132]	; (8009bc0 <DMA_SetConfig+0x34c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d009      	beq.n	8009b52 <DMA_SetConfig+0x2de>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a20      	ldr	r2, [pc, #128]	; (8009bc4 <DMA_SetConfig+0x350>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d004      	beq.n	8009b52 <DMA_SetConfig+0x2de>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a1e      	ldr	r2, [pc, #120]	; (8009bc8 <DMA_SetConfig+0x354>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d101      	bne.n	8009b56 <DMA_SetConfig+0x2e2>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <DMA_SetConfig+0x2e4>
 8009b56:	2300      	movs	r3, #0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d020      	beq.n	8009b9e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b60:	f003 031f 	and.w	r3, r3, #31
 8009b64:	2201      	movs	r2, #1
 8009b66:	409a      	lsls	r2, r3
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	2b40      	cmp	r3, #64	; 0x40
 8009b7a:	d108      	bne.n	8009b8e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	60da      	str	r2, [r3, #12]
}
 8009b8c:	e007      	b.n	8009b9e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	60da      	str	r2, [r3, #12]
}
 8009b9e:	bf00      	nop
 8009ba0:	371c      	adds	r7, #28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	58025408 	.word	0x58025408
 8009bb0:	5802541c 	.word	0x5802541c
 8009bb4:	58025430 	.word	0x58025430
 8009bb8:	58025444 	.word	0x58025444
 8009bbc:	58025458 	.word	0x58025458
 8009bc0:	5802546c 	.word	0x5802546c
 8009bc4:	58025480 	.word	0x58025480
 8009bc8:	58025494 	.word	0x58025494

08009bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a42      	ldr	r2, [pc, #264]	; (8009ce4 <DMA_CalcBaseAndBitshift+0x118>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d04a      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a41      	ldr	r2, [pc, #260]	; (8009ce8 <DMA_CalcBaseAndBitshift+0x11c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d045      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a3f      	ldr	r2, [pc, #252]	; (8009cec <DMA_CalcBaseAndBitshift+0x120>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d040      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a3e      	ldr	r2, [pc, #248]	; (8009cf0 <DMA_CalcBaseAndBitshift+0x124>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d03b      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a3c      	ldr	r2, [pc, #240]	; (8009cf4 <DMA_CalcBaseAndBitshift+0x128>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d036      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a3b      	ldr	r2, [pc, #236]	; (8009cf8 <DMA_CalcBaseAndBitshift+0x12c>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d031      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a39      	ldr	r2, [pc, #228]	; (8009cfc <DMA_CalcBaseAndBitshift+0x130>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d02c      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a38      	ldr	r2, [pc, #224]	; (8009d00 <DMA_CalcBaseAndBitshift+0x134>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d027      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a36      	ldr	r2, [pc, #216]	; (8009d04 <DMA_CalcBaseAndBitshift+0x138>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d022      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a35      	ldr	r2, [pc, #212]	; (8009d08 <DMA_CalcBaseAndBitshift+0x13c>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d01d      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a33      	ldr	r2, [pc, #204]	; (8009d0c <DMA_CalcBaseAndBitshift+0x140>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d018      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a32      	ldr	r2, [pc, #200]	; (8009d10 <DMA_CalcBaseAndBitshift+0x144>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d013      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a30      	ldr	r2, [pc, #192]	; (8009d14 <DMA_CalcBaseAndBitshift+0x148>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d00e      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a2f      	ldr	r2, [pc, #188]	; (8009d18 <DMA_CalcBaseAndBitshift+0x14c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d009      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a2d      	ldr	r2, [pc, #180]	; (8009d1c <DMA_CalcBaseAndBitshift+0x150>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d004      	beq.n	8009c74 <DMA_CalcBaseAndBitshift+0xa8>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a2c      	ldr	r2, [pc, #176]	; (8009d20 <DMA_CalcBaseAndBitshift+0x154>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d101      	bne.n	8009c78 <DMA_CalcBaseAndBitshift+0xac>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e000      	b.n	8009c7a <DMA_CalcBaseAndBitshift+0xae>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d024      	beq.n	8009cc8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	3b10      	subs	r3, #16
 8009c86:	4a27      	ldr	r2, [pc, #156]	; (8009d24 <DMA_CalcBaseAndBitshift+0x158>)
 8009c88:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8c:	091b      	lsrs	r3, r3, #4
 8009c8e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f003 0307 	and.w	r3, r3, #7
 8009c96:	4a24      	ldr	r2, [pc, #144]	; (8009d28 <DMA_CalcBaseAndBitshift+0x15c>)
 8009c98:	5cd3      	ldrb	r3, [r2, r3]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	d908      	bls.n	8009cb8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	4b1f      	ldr	r3, [pc, #124]	; (8009d2c <DMA_CalcBaseAndBitshift+0x160>)
 8009cae:	4013      	ands	r3, r2
 8009cb0:	1d1a      	adds	r2, r3, #4
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	659a      	str	r2, [r3, #88]	; 0x58
 8009cb6:	e00d      	b.n	8009cd4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4b1b      	ldr	r3, [pc, #108]	; (8009d2c <DMA_CalcBaseAndBitshift+0x160>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8009cc6:	e005      	b.n	8009cd4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr
 8009ce4:	40020010 	.word	0x40020010
 8009ce8:	40020028 	.word	0x40020028
 8009cec:	40020040 	.word	0x40020040
 8009cf0:	40020058 	.word	0x40020058
 8009cf4:	40020070 	.word	0x40020070
 8009cf8:	40020088 	.word	0x40020088
 8009cfc:	400200a0 	.word	0x400200a0
 8009d00:	400200b8 	.word	0x400200b8
 8009d04:	40020410 	.word	0x40020410
 8009d08:	40020428 	.word	0x40020428
 8009d0c:	40020440 	.word	0x40020440
 8009d10:	40020458 	.word	0x40020458
 8009d14:	40020470 	.word	0x40020470
 8009d18:	40020488 	.word	0x40020488
 8009d1c:	400204a0 	.word	0x400204a0
 8009d20:	400204b8 	.word	0x400204b8
 8009d24:	aaaaaaab 	.word	0xaaaaaaab
 8009d28:	0801a964 	.word	0x0801a964
 8009d2c:	fffffc00 	.word	0xfffffc00

08009d30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d120      	bne.n	8009d86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d858      	bhi.n	8009dfe <DMA_CheckFifoParam+0xce>
 8009d4c:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <DMA_CheckFifoParam+0x24>)
 8009d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d52:	bf00      	nop
 8009d54:	08009d65 	.word	0x08009d65
 8009d58:	08009d77 	.word	0x08009d77
 8009d5c:	08009d65 	.word	0x08009d65
 8009d60:	08009dff 	.word	0x08009dff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d048      	beq.n	8009e02 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009d74:	e045      	b.n	8009e02 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009d7e:	d142      	bne.n	8009e06 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009d84:	e03f      	b.n	8009e06 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d8e:	d123      	bne.n	8009dd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d838      	bhi.n	8009e0a <DMA_CheckFifoParam+0xda>
 8009d98:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <DMA_CheckFifoParam+0x70>)
 8009d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9e:	bf00      	nop
 8009da0:	08009db1 	.word	0x08009db1
 8009da4:	08009db7 	.word	0x08009db7
 8009da8:	08009db1 	.word	0x08009db1
 8009dac:	08009dc9 	.word	0x08009dc9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	73fb      	strb	r3, [r7, #15]
        break;
 8009db4:	e030      	b.n	8009e18 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d025      	beq.n	8009e0e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009dc6:	e022      	b.n	8009e0e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009dd0:	d11f      	bne.n	8009e12 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009dd6:	e01c      	b.n	8009e12 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d902      	bls.n	8009de6 <DMA_CheckFifoParam+0xb6>
 8009de0:	2b03      	cmp	r3, #3
 8009de2:	d003      	beq.n	8009dec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009de4:	e018      	b.n	8009e18 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	73fb      	strb	r3, [r7, #15]
        break;
 8009dea:	e015      	b.n	8009e18 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00e      	beq.n	8009e16 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009dfc:	e00b      	b.n	8009e16 <DMA_CheckFifoParam+0xe6>
        break;
 8009dfe:	bf00      	nop
 8009e00:	e00a      	b.n	8009e18 <DMA_CheckFifoParam+0xe8>
        break;
 8009e02:	bf00      	nop
 8009e04:	e008      	b.n	8009e18 <DMA_CheckFifoParam+0xe8>
        break;
 8009e06:	bf00      	nop
 8009e08:	e006      	b.n	8009e18 <DMA_CheckFifoParam+0xe8>
        break;
 8009e0a:	bf00      	nop
 8009e0c:	e004      	b.n	8009e18 <DMA_CheckFifoParam+0xe8>
        break;
 8009e0e:	bf00      	nop
 8009e10:	e002      	b.n	8009e18 <DMA_CheckFifoParam+0xe8>
        break;
 8009e12:	bf00      	nop
 8009e14:	e000      	b.n	8009e18 <DMA_CheckFifoParam+0xe8>
    break;
 8009e16:	bf00      	nop
    }
  }

  return status;
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop

08009e28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a38      	ldr	r2, [pc, #224]	; (8009f1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d022      	beq.n	8009e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a36      	ldr	r2, [pc, #216]	; (8009f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d01d      	beq.n	8009e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a35      	ldr	r2, [pc, #212]	; (8009f24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d018      	beq.n	8009e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a33      	ldr	r2, [pc, #204]	; (8009f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d013      	beq.n	8009e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a32      	ldr	r2, [pc, #200]	; (8009f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d00e      	beq.n	8009e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a30      	ldr	r2, [pc, #192]	; (8009f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d009      	beq.n	8009e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a2f      	ldr	r2, [pc, #188]	; (8009f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d004      	beq.n	8009e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a2d      	ldr	r2, [pc, #180]	; (8009f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d101      	bne.n	8009e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e000      	b.n	8009e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d01a      	beq.n	8009ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	3b08      	subs	r3, #8
 8009e98:	4a28      	ldr	r2, [pc, #160]	; (8009f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9e:	091b      	lsrs	r3, r3, #4
 8009ea0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	4b26      	ldr	r3, [pc, #152]	; (8009f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009ea6:	4413      	add	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	461a      	mov	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a24      	ldr	r2, [pc, #144]	; (8009f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009eb4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f003 031f 	and.w	r3, r3, #31
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	409a      	lsls	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009ec4:	e024      	b.n	8009f10 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	3b10      	subs	r3, #16
 8009ece:	4a1e      	ldr	r2, [pc, #120]	; (8009f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed4:	091b      	lsrs	r3, r3, #4
 8009ed6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4a1c      	ldr	r2, [pc, #112]	; (8009f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d806      	bhi.n	8009eee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	4a1b      	ldr	r2, [pc, #108]	; (8009f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d902      	bls.n	8009eee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3308      	adds	r3, #8
 8009eec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	4b18      	ldr	r3, [pc, #96]	; (8009f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009ef2:	4413      	add	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a16      	ldr	r2, [pc, #88]	; (8009f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009f00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f003 031f 	and.w	r3, r3, #31
 8009f08:	2201      	movs	r2, #1
 8009f0a:	409a      	lsls	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009f10:	bf00      	nop
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	58025408 	.word	0x58025408
 8009f20:	5802541c 	.word	0x5802541c
 8009f24:	58025430 	.word	0x58025430
 8009f28:	58025444 	.word	0x58025444
 8009f2c:	58025458 	.word	0x58025458
 8009f30:	5802546c 	.word	0x5802546c
 8009f34:	58025480 	.word	0x58025480
 8009f38:	58025494 	.word	0x58025494
 8009f3c:	cccccccd 	.word	0xcccccccd
 8009f40:	16009600 	.word	0x16009600
 8009f44:	58025880 	.word	0x58025880
 8009f48:	aaaaaaab 	.word	0xaaaaaaab
 8009f4c:	400204b8 	.word	0x400204b8
 8009f50:	4002040f 	.word	0x4002040f
 8009f54:	10008200 	.word	0x10008200
 8009f58:	40020880 	.word	0x40020880

08009f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d04a      	beq.n	800a008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b08      	cmp	r3, #8
 8009f76:	d847      	bhi.n	800a008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a25      	ldr	r2, [pc, #148]	; (800a014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d022      	beq.n	8009fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a24      	ldr	r2, [pc, #144]	; (800a018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d01d      	beq.n	8009fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a22      	ldr	r2, [pc, #136]	; (800a01c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d018      	beq.n	8009fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a21      	ldr	r2, [pc, #132]	; (800a020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d013      	beq.n	8009fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a1f      	ldr	r2, [pc, #124]	; (800a024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00e      	beq.n	8009fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a1e      	ldr	r2, [pc, #120]	; (800a028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d009      	beq.n	8009fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a1c      	ldr	r2, [pc, #112]	; (800a02c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d004      	beq.n	8009fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a1b      	ldr	r2, [pc, #108]	; (800a030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d101      	bne.n	8009fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e000      	b.n	8009fce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	4b17      	ldr	r3, [pc, #92]	; (800a034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009fd6:	4413      	add	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	461a      	mov	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a15      	ldr	r2, [pc, #84]	; (800a038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009fe4:	671a      	str	r2, [r3, #112]	; 0x70
 8009fe6:	e009      	b.n	8009ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4b14      	ldr	r3, [pc, #80]	; (800a03c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a11      	ldr	r2, [pc, #68]	; (800a040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009ffa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	2201      	movs	r2, #1
 800a002:	409a      	lsls	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a008:	bf00      	nop
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	58025408 	.word	0x58025408
 800a018:	5802541c 	.word	0x5802541c
 800a01c:	58025430 	.word	0x58025430
 800a020:	58025444 	.word	0x58025444
 800a024:	58025458 	.word	0x58025458
 800a028:	5802546c 	.word	0x5802546c
 800a02c:	58025480 	.word	0x58025480
 800a030:	58025494 	.word	0x58025494
 800a034:	1600963f 	.word	0x1600963f
 800a038:	58025940 	.word	0x58025940
 800a03c:	1000823f 	.word	0x1000823f
 800a040:	40020940 	.word	0x40020940

0800a044 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08a      	sub	sp, #40	; 0x28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a058:	2308      	movs	r3, #8
 800a05a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a05c:	4b40      	ldr	r3, [pc, #256]	; (800a160 <HAL_FLASH_Program+0x11c>)
 800a05e:	7d1b      	ldrb	r3, [r3, #20]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d101      	bne.n	800a068 <HAL_FLASH_Program+0x24>
 800a064:	2302      	movs	r3, #2
 800a066:	e076      	b.n	800a156 <HAL_FLASH_Program+0x112>
 800a068:	4b3d      	ldr	r3, [pc, #244]	; (800a160 <HAL_FLASH_Program+0x11c>)
 800a06a:	2201      	movs	r2, #1
 800a06c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a074:	d306      	bcc.n	800a084 <HAL_FLASH_Program+0x40>
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a07c:	d202      	bcs.n	800a084 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a07e:	2301      	movs	r3, #1
 800a080:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800a082:	e00c      	b.n	800a09e <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a08a:	d306      	bcc.n	800a09a <HAL_FLASH_Program+0x56>
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800a092:	d202      	bcs.n	800a09a <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800a094:	2302      	movs	r3, #2
 800a096:	61bb      	str	r3, [r7, #24]
 800a098:	e001      	b.n	800a09e <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e05b      	b.n	800a156 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a09e:	4b30      	ldr	r3, [pc, #192]	; (800a160 <HAL_FLASH_Program+0x11c>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a0a4:	69b9      	ldr	r1, [r7, #24]
 800a0a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a0aa:	f000 f897 	bl	800a1dc <FLASH_WaitForLastOperation>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800a0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d147      	bne.n	800a14c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d106      	bne.n	800a0d0 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a0c2:	4b28      	ldr	r3, [pc, #160]	; (800a164 <HAL_FLASH_Program+0x120>)
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	4a27      	ldr	r2, [pc, #156]	; (800a164 <HAL_FLASH_Program+0x120>)
 800a0c8:	f043 0302 	orr.w	r3, r3, #2
 800a0cc:	60d3      	str	r3, [r2, #12]
 800a0ce:	e007      	b.n	800a0e0 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800a0d0:	4b24      	ldr	r3, [pc, #144]	; (800a164 <HAL_FLASH_Program+0x120>)
 800a0d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a0d6:	4a23      	ldr	r2, [pc, #140]	; (800a164 <HAL_FLASH_Program+0x120>)
 800a0d8:	f043 0302 	orr.w	r3, r3, #2
 800a0dc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800a0e0:	f3bf 8f6f 	isb	sy
}
 800a0e4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a0e6:	f3bf 8f4f 	dsb	sy
}
 800a0ea:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a100:	7dfb      	ldrb	r3, [r7, #23]
 800a102:	3b01      	subs	r3, #1
 800a104:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1ef      	bne.n	800a0ec <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800a10c:	f3bf 8f6f 	isb	sy
}
 800a110:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a112:	f3bf 8f4f 	dsb	sy
}
 800a116:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a118:	69b9      	ldr	r1, [r7, #24]
 800a11a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a11e:	f000 f85d 	bl	800a1dc <FLASH_WaitForLastOperation>
 800a122:	4603      	mov	r3, r0
 800a124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d106      	bne.n	800a13c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a12e:	4b0d      	ldr	r3, [pc, #52]	; (800a164 <HAL_FLASH_Program+0x120>)
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	4a0c      	ldr	r2, [pc, #48]	; (800a164 <HAL_FLASH_Program+0x120>)
 800a134:	f023 0302 	bic.w	r3, r3, #2
 800a138:	60d3      	str	r3, [r2, #12]
 800a13a:	e007      	b.n	800a14c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800a13c:	4b09      	ldr	r3, [pc, #36]	; (800a164 <HAL_FLASH_Program+0x120>)
 800a13e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a142:	4a08      	ldr	r2, [pc, #32]	; (800a164 <HAL_FLASH_Program+0x120>)
 800a144:	f023 0302 	bic.w	r3, r3, #2
 800a148:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a14c:	4b04      	ldr	r3, [pc, #16]	; (800a160 <HAL_FLASH_Program+0x11c>)
 800a14e:	2200      	movs	r2, #0
 800a150:	751a      	strb	r2, [r3, #20]

  return status;
 800a152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a156:	4618      	mov	r0, r3
 800a158:	3728      	adds	r7, #40	; 0x28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	2400214c 	.word	0x2400214c
 800a164:	52002000 	.word	0x52002000

0800a168 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a168:	b480      	push	{r7}
 800a16a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a16c:	4b18      	ldr	r3, [pc, #96]	; (800a1d0 <HAL_FLASH_Unlock+0x68>)
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f003 0301 	and.w	r3, r3, #1
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00d      	beq.n	800a194 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a178:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <HAL_FLASH_Unlock+0x68>)
 800a17a:	4a16      	ldr	r2, [pc, #88]	; (800a1d4 <HAL_FLASH_Unlock+0x6c>)
 800a17c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a17e:	4b14      	ldr	r3, [pc, #80]	; (800a1d0 <HAL_FLASH_Unlock+0x68>)
 800a180:	4a15      	ldr	r2, [pc, #84]	; (800a1d8 <HAL_FLASH_Unlock+0x70>)
 800a182:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a184:	4b12      	ldr	r3, [pc, #72]	; (800a1d0 <HAL_FLASH_Unlock+0x68>)
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e018      	b.n	800a1c6 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800a194:	4b0e      	ldr	r3, [pc, #56]	; (800a1d0 <HAL_FLASH_Unlock+0x68>)
 800a196:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d010      	beq.n	800a1c4 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800a1a2:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <HAL_FLASH_Unlock+0x68>)
 800a1a4:	4a0b      	ldr	r2, [pc, #44]	; (800a1d4 <HAL_FLASH_Unlock+0x6c>)
 800a1a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800a1aa:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <HAL_FLASH_Unlock+0x68>)
 800a1ac:	4a0a      	ldr	r2, [pc, #40]	; (800a1d8 <HAL_FLASH_Unlock+0x70>)
 800a1ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800a1b2:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <HAL_FLASH_Unlock+0x68>)
 800a1b4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e000      	b.n	800a1c6 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	52002000 	.word	0x52002000
 800a1d4:	45670123 	.word	0x45670123
 800a1d8:	cdef89ab 	.word	0xcdef89ab

0800a1dc <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a1e6:	2304      	movs	r3, #4
 800a1e8:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800a1ee:	f7fa ffab 	bl	8005148 <HAL_GetTick>
 800a1f2:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d113      	bne.n	800a222 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800a1fa:	4b41      	ldr	r3, [pc, #260]	; (800a300 <FLASH_WaitForLastOperation+0x124>)
 800a1fc:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a1fe:	e010      	b.n	800a222 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a206:	d00c      	beq.n	800a222 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a208:	f7fa ff9e 	bl	8005148 <HAL_GetTick>
 800a20c:	4602      	mov	r2, r0
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	429a      	cmp	r2, r3
 800a216:	d302      	bcc.n	800a21e <FLASH_WaitForLastOperation+0x42>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e06a      	b.n	800a2f8 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	4b37      	ldr	r3, [pc, #220]	; (800a304 <FLASH_WaitForLastOperation+0x128>)
 800a226:	4013      	ands	r3, r2
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d10a      	bne.n	800a244 <FLASH_WaitForLastOperation+0x68>
 800a22e:	4b36      	ldr	r3, [pc, #216]	; (800a308 <FLASH_WaitForLastOperation+0x12c>)
 800a230:	691a      	ldr	r2, [r3, #16]
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	4013      	ands	r3, r2
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	429a      	cmp	r2, r3
 800a23a:	bf0c      	ite	eq
 800a23c:	2301      	moveq	r3, #1
 800a23e:	2300      	movne	r3, #0
 800a240:	b2db      	uxtb	r3, r3
 800a242:	e00c      	b.n	800a25e <FLASH_WaitForLastOperation+0x82>
 800a244:	4b30      	ldr	r3, [pc, #192]	; (800a308 <FLASH_WaitForLastOperation+0x12c>)
 800a246:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a24a:	43da      	mvns	r2, r3
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	4013      	ands	r3, r2
 800a250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a254:	2b00      	cmp	r3, #0
 800a256:	bf0c      	ite	eq
 800a258:	2301      	moveq	r3, #1
 800a25a:	2300      	movne	r3, #0
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1ce      	bne.n	800a200 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d105      	bne.n	800a274 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a268:	4b27      	ldr	r3, [pc, #156]	; (800a308 <FLASH_WaitForLastOperation+0x12c>)
 800a26a:	691a      	ldr	r2, [r3, #16]
 800a26c:	4b27      	ldr	r3, [pc, #156]	; (800a30c <FLASH_WaitForLastOperation+0x130>)
 800a26e:	4013      	ands	r3, r2
 800a270:	613b      	str	r3, [r7, #16]
 800a272:	e007      	b.n	800a284 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800a274:	4b24      	ldr	r3, [pc, #144]	; (800a308 <FLASH_WaitForLastOperation+0x12c>)
 800a276:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800a27a:	4b24      	ldr	r3, [pc, #144]	; (800a30c <FLASH_WaitForLastOperation+0x130>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a282:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d017      	beq.n	800a2be <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a28e:	4b20      	ldr	r3, [pc, #128]	; (800a310 <FLASH_WaitForLastOperation+0x134>)
 800a290:	699a      	ldr	r2, [r3, #24]
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	4313      	orrs	r3, r2
 800a296:	4a1e      	ldr	r2, [pc, #120]	; (800a310 <FLASH_WaitForLastOperation+0x134>)
 800a298:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	4b19      	ldr	r3, [pc, #100]	; (800a304 <FLASH_WaitForLastOperation+0x128>)
 800a29e:	4013      	ands	r3, r2
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d103      	bne.n	800a2ae <FLASH_WaitForLastOperation+0xd2>
 800a2a6:	4a18      	ldr	r2, [pc, #96]	; (800a308 <FLASH_WaitForLastOperation+0x12c>)
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	6153      	str	r3, [r2, #20]
 800a2ac:	e005      	b.n	800a2ba <FLASH_WaitForLastOperation+0xde>
 800a2ae:	4a16      	ldr	r2, [pc, #88]	; (800a308 <FLASH_WaitForLastOperation+0x12c>)
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2b6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e01c      	b.n	800a2f8 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d10b      	bne.n	800a2dc <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a2c4:	4b10      	ldr	r3, [pc, #64]	; (800a308 <FLASH_WaitForLastOperation+0x12c>)
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2d0:	d111      	bne.n	800a2f6 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a2d2:	4b0d      	ldr	r3, [pc, #52]	; (800a308 <FLASH_WaitForLastOperation+0x12c>)
 800a2d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a2d8:	615a      	str	r2, [r3, #20]
 800a2da:	e00c      	b.n	800a2f6 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <FLASH_WaitForLastOperation+0x12c>)
 800a2de:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a2e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ea:	d104      	bne.n	800a2f6 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800a2ec:	4b06      	ldr	r3, [pc, #24]	; (800a308 <FLASH_WaitForLastOperation+0x12c>)
 800a2ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a2f2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	80000004 	.word	0x80000004
 800a304:	1fef000f 	.word	0x1fef000f
 800a308:	52002000 	.word	0x52002000
 800a30c:	17ee0000 	.word	0x17ee0000
 800a310:	2400214c 	.word	0x2400214c

0800a314 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a322:	4b5e      	ldr	r3, [pc, #376]	; (800a49c <HAL_FLASHEx_Erase+0x188>)
 800a324:	7d1b      	ldrb	r3, [r3, #20]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <HAL_FLASHEx_Erase+0x1a>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e0b2      	b.n	800a494 <HAL_FLASHEx_Erase+0x180>
 800a32e:	4b5b      	ldr	r3, [pc, #364]	; (800a49c <HAL_FLASHEx_Erase+0x188>)
 800a330:	2201      	movs	r2, #1
 800a332:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a334:	4b59      	ldr	r3, [pc, #356]	; (800a49c <HAL_FLASHEx_Erase+0x188>)
 800a336:	2200      	movs	r2, #0
 800a338:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	2b00      	cmp	r3, #0
 800a344:	d009      	beq.n	800a35a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a346:	2101      	movs	r1, #1
 800a348:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a34c:	f7ff ff46 	bl	800a1dc <FLASH_WaitForLastOperation>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800a366:	2102      	movs	r1, #2
 800a368:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a36c:	f7ff ff36 	bl	800a1dc <FLASH_WaitForLastOperation>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f040 8085 	bne.w	800a48c <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d136      	bne.n	800a3f8 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	691a      	ldr	r2, [r3, #16]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	4619      	mov	r1, r3
 800a394:	4610      	mov	r0, r2
 800a396:	f000 f887 	bl	800a4a8 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00f      	beq.n	800a3c6 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a3ac:	f7ff ff16 	bl	800a1dc <FLASH_WaitForLastOperation>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a3ba:	4b39      	ldr	r3, [pc, #228]	; (800a4a0 <HAL_FLASHEx_Erase+0x18c>)
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	4a38      	ldr	r2, [pc, #224]	; (800a4a0 <HAL_FLASHEx_Erase+0x18c>)
 800a3c0:	f023 0308 	bic.w	r3, r3, #8
 800a3c4:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d05c      	beq.n	800a48c <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800a3d2:	2102      	movs	r1, #2
 800a3d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a3d8:	f7ff ff00 	bl	800a1dc <FLASH_WaitForLastOperation>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800a3e6:	4b2e      	ldr	r3, [pc, #184]	; (800a4a0 <HAL_FLASHEx_Erase+0x18c>)
 800a3e8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a3ec:	4a2c      	ldr	r2, [pc, #176]	; (800a4a0 <HAL_FLASHEx_Erase+0x18c>)
 800a3ee:	f023 0308 	bic.w	r3, r3, #8
 800a3f2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800a3f6:	e049      	b.n	800a48c <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a3fe:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	60bb      	str	r3, [r7, #8]
 800a406:	e039      	b.n	800a47c <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6859      	ldr	r1, [r3, #4]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	461a      	mov	r2, r3
 800a412:	68b8      	ldr	r0, [r7, #8]
 800a414:	f000 f8b2 	bl	800a57c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00c      	beq.n	800a43e <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a424:	2101      	movs	r1, #1
 800a426:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a42a:	f7ff fed7 	bl	800a1dc <FLASH_WaitForLastOperation>
 800a42e:	4603      	mov	r3, r0
 800a430:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a432:	4b1b      	ldr	r3, [pc, #108]	; (800a4a0 <HAL_FLASHEx_Erase+0x18c>)
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	491a      	ldr	r1, [pc, #104]	; (800a4a0 <HAL_FLASHEx_Erase+0x18c>)
 800a438:	4b1a      	ldr	r3, [pc, #104]	; (800a4a4 <HAL_FLASHEx_Erase+0x190>)
 800a43a:	4013      	ands	r3, r2
 800a43c:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	f003 0302 	and.w	r3, r3, #2
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00e      	beq.n	800a468 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800a44a:	2102      	movs	r1, #2
 800a44c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a450:	f7ff fec4 	bl	800a1dc <FLASH_WaitForLastOperation>
 800a454:	4603      	mov	r3, r0
 800a456:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a458:	4b11      	ldr	r3, [pc, #68]	; (800a4a0 <HAL_FLASHEx_Erase+0x18c>)
 800a45a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a45e:	4910      	ldr	r1, [pc, #64]	; (800a4a0 <HAL_FLASHEx_Erase+0x18c>)
 800a460:	4b10      	ldr	r3, [pc, #64]	; (800a4a4 <HAL_FLASHEx_Erase+0x190>)
 800a462:	4013      	ands	r3, r2
 800a464:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	601a      	str	r2, [r3, #0]
          break;
 800a474:	e00a      	b.n	800a48c <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	3301      	adds	r3, #1
 800a47a:	60bb      	str	r3, [r7, #8]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	4413      	add	r3, r2
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d3bd      	bcc.n	800a408 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a48c:	4b03      	ldr	r3, [pc, #12]	; (800a49c <HAL_FLASHEx_Erase+0x188>)
 800a48e:	2200      	movs	r2, #0
 800a490:	751a      	strb	r2, [r3, #20]

  return status;
 800a492:	7bfb      	ldrb	r3, [r7, #15]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	2400214c 	.word	0x2400214c
 800a4a0:	52002000 	.word	0x52002000
 800a4a4:	fffff8fb 	.word	0xfffff8fb

0800a4a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	f003 0303 	and.w	r3, r3, #3
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d122      	bne.n	800a502 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a4bc:	4b2e      	ldr	r3, [pc, #184]	; (800a578 <FLASH_MassErase+0xd0>)
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	4a2d      	ldr	r2, [pc, #180]	; (800a578 <FLASH_MassErase+0xd0>)
 800a4c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a4c6:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800a4c8:	4b2b      	ldr	r3, [pc, #172]	; (800a578 <FLASH_MassErase+0xd0>)
 800a4ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a4ce:	4a2a      	ldr	r2, [pc, #168]	; (800a578 <FLASH_MassErase+0xd0>)
 800a4d0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a4d4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800a4d8:	4b27      	ldr	r3, [pc, #156]	; (800a578 <FLASH_MassErase+0xd0>)
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	4926      	ldr	r1, [pc, #152]	; (800a578 <FLASH_MassErase+0xd0>)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800a4e4:	4b24      	ldr	r3, [pc, #144]	; (800a578 <FLASH_MassErase+0xd0>)
 800a4e6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a4ea:	4923      	ldr	r1, [pc, #140]	; (800a578 <FLASH_MassErase+0xd0>)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800a4f4:	4b20      	ldr	r3, [pc, #128]	; (800a578 <FLASH_MassErase+0xd0>)
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	4a1f      	ldr	r2, [pc, #124]	; (800a578 <FLASH_MassErase+0xd0>)
 800a4fa:	f043 0310 	orr.w	r3, r3, #16
 800a4fe:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a500:	e033      	b.n	800a56a <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d011      	beq.n	800a530 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a50c:	4b1a      	ldr	r3, [pc, #104]	; (800a578 <FLASH_MassErase+0xd0>)
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	4a19      	ldr	r2, [pc, #100]	; (800a578 <FLASH_MassErase+0xd0>)
 800a512:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a516:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a518:	4b17      	ldr	r3, [pc, #92]	; (800a578 <FLASH_MassErase+0xd0>)
 800a51a:	68da      	ldr	r2, [r3, #12]
 800a51c:	4916      	ldr	r1, [pc, #88]	; (800a578 <FLASH_MassErase+0xd0>)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4313      	orrs	r3, r2
 800a522:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a524:	4b14      	ldr	r3, [pc, #80]	; (800a578 <FLASH_MassErase+0xd0>)
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	4a13      	ldr	r2, [pc, #76]	; (800a578 <FLASH_MassErase+0xd0>)
 800a52a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a52e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	2b00      	cmp	r3, #0
 800a538:	d017      	beq.n	800a56a <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800a53a:	4b0f      	ldr	r3, [pc, #60]	; (800a578 <FLASH_MassErase+0xd0>)
 800a53c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a540:	4a0d      	ldr	r2, [pc, #52]	; (800a578 <FLASH_MassErase+0xd0>)
 800a542:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a546:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800a54a:	4b0b      	ldr	r3, [pc, #44]	; (800a578 <FLASH_MassErase+0xd0>)
 800a54c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a550:	4909      	ldr	r1, [pc, #36]	; (800a578 <FLASH_MassErase+0xd0>)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4313      	orrs	r3, r2
 800a556:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800a55a:	4b07      	ldr	r3, [pc, #28]	; (800a578 <FLASH_MassErase+0xd0>)
 800a55c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a560:	4a05      	ldr	r2, [pc, #20]	; (800a578 <FLASH_MassErase+0xd0>)
 800a562:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a566:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800a56a:	bf00      	nop
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	52002000 	.word	0x52002000

0800a57c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d010      	beq.n	800a5b4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a592:	4b18      	ldr	r3, [pc, #96]	; (800a5f4 <FLASH_Erase_Sector+0x78>)
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	4a17      	ldr	r2, [pc, #92]	; (800a5f4 <FLASH_Erase_Sector+0x78>)
 800a598:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a59c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a59e:	4b15      	ldr	r3, [pc, #84]	; (800a5f4 <FLASH_Erase_Sector+0x78>)
 800a5a0:	68da      	ldr	r2, [r3, #12]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	0219      	lsls	r1, r3, #8
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	430b      	orrs	r3, r1
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	4a11      	ldr	r2, [pc, #68]	; (800a5f4 <FLASH_Erase_Sector+0x78>)
 800a5ae:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a5b2:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d014      	beq.n	800a5e8 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a5be:	4b0d      	ldr	r3, [pc, #52]	; (800a5f4 <FLASH_Erase_Sector+0x78>)
 800a5c0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a5c4:	4a0b      	ldr	r2, [pc, #44]	; (800a5f4 <FLASH_Erase_Sector+0x78>)
 800a5c6:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a5ca:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a5ce:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <FLASH_Erase_Sector+0x78>)
 800a5d0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	0219      	lsls	r1, r3, #8
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	430b      	orrs	r3, r1
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	4a05      	ldr	r2, [pc, #20]	; (800a5f4 <FLASH_Erase_Sector+0x78>)
 800a5e0:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a5e4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a5e8:	bf00      	nop
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	52002000 	.word	0x52002000

0800a5f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b089      	sub	sp, #36	; 0x24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a602:	2300      	movs	r3, #0
 800a604:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a606:	4b89      	ldr	r3, [pc, #548]	; (800a82c <HAL_GPIO_Init+0x234>)
 800a608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a60a:	e194      	b.n	800a936 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	2101      	movs	r1, #1
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	fa01 f303 	lsl.w	r3, r1, r3
 800a618:	4013      	ands	r3, r2
 800a61a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 8186 	beq.w	800a930 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f003 0303 	and.w	r3, r3, #3
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d005      	beq.n	800a63c <HAL_GPIO_Init+0x44>
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d130      	bne.n	800a69e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	2203      	movs	r2, #3
 800a648:	fa02 f303 	lsl.w	r3, r2, r3
 800a64c:	43db      	mvns	r3, r3
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	4013      	ands	r3, r2
 800a652:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	68da      	ldr	r2, [r3, #12]
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	005b      	lsls	r3, r3, #1
 800a65c:	fa02 f303 	lsl.w	r3, r2, r3
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	4313      	orrs	r3, r2
 800a664:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	69ba      	ldr	r2, [r7, #24]
 800a66a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a672:	2201      	movs	r2, #1
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	fa02 f303 	lsl.w	r3, r2, r3
 800a67a:	43db      	mvns	r3, r3
 800a67c:	69ba      	ldr	r2, [r7, #24]
 800a67e:	4013      	ands	r3, r2
 800a680:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	091b      	lsrs	r3, r3, #4
 800a688:	f003 0201 	and.w	r2, r3, #1
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	fa02 f303 	lsl.w	r3, r2, r3
 800a692:	69ba      	ldr	r2, [r7, #24]
 800a694:	4313      	orrs	r3, r2
 800a696:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f003 0303 	and.w	r3, r3, #3
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d017      	beq.n	800a6da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	005b      	lsls	r3, r3, #1
 800a6b4:	2203      	movs	r2, #3
 800a6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ba:	43db      	mvns	r3, r3
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	4013      	ands	r3, r2
 800a6c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	689a      	ldr	r2, [r3, #8]
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d123      	bne.n	800a72e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	08da      	lsrs	r2, r3, #3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	3208      	adds	r2, #8
 800a6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	220f      	movs	r2, #15
 800a6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a702:	43db      	mvns	r3, r3
 800a704:	69ba      	ldr	r2, [r7, #24]
 800a706:	4013      	ands	r3, r2
 800a708:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	691a      	ldr	r2, [r3, #16]
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	f003 0307 	and.w	r3, r3, #7
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	fa02 f303 	lsl.w	r3, r2, r3
 800a71a:	69ba      	ldr	r2, [r7, #24]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	08da      	lsrs	r2, r3, #3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	3208      	adds	r2, #8
 800a728:	69b9      	ldr	r1, [r7, #24]
 800a72a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	2203      	movs	r2, #3
 800a73a:	fa02 f303 	lsl.w	r3, r2, r3
 800a73e:	43db      	mvns	r3, r3
 800a740:	69ba      	ldr	r2, [r7, #24]
 800a742:	4013      	ands	r3, r2
 800a744:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f003 0203 	and.w	r2, r3, #3
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	005b      	lsls	r3, r3, #1
 800a752:	fa02 f303 	lsl.w	r3, r2, r3
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	4313      	orrs	r3, r2
 800a75a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 80e0 	beq.w	800a930 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a770:	4b2f      	ldr	r3, [pc, #188]	; (800a830 <HAL_GPIO_Init+0x238>)
 800a772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a776:	4a2e      	ldr	r2, [pc, #184]	; (800a830 <HAL_GPIO_Init+0x238>)
 800a778:	f043 0302 	orr.w	r3, r3, #2
 800a77c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a780:	4b2b      	ldr	r3, [pc, #172]	; (800a830 <HAL_GPIO_Init+0x238>)
 800a782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a786:	f003 0302 	and.w	r3, r3, #2
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a78e:	4a29      	ldr	r2, [pc, #164]	; (800a834 <HAL_GPIO_Init+0x23c>)
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	089b      	lsrs	r3, r3, #2
 800a794:	3302      	adds	r3, #2
 800a796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a79a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	f003 0303 	and.w	r3, r3, #3
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	220f      	movs	r2, #15
 800a7a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7aa:	43db      	mvns	r3, r3
 800a7ac:	69ba      	ldr	r2, [r7, #24]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a20      	ldr	r2, [pc, #128]	; (800a838 <HAL_GPIO_Init+0x240>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d052      	beq.n	800a860 <HAL_GPIO_Init+0x268>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a1f      	ldr	r2, [pc, #124]	; (800a83c <HAL_GPIO_Init+0x244>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d031      	beq.n	800a826 <HAL_GPIO_Init+0x22e>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a1e      	ldr	r2, [pc, #120]	; (800a840 <HAL_GPIO_Init+0x248>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d02b      	beq.n	800a822 <HAL_GPIO_Init+0x22a>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a1d      	ldr	r2, [pc, #116]	; (800a844 <HAL_GPIO_Init+0x24c>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d025      	beq.n	800a81e <HAL_GPIO_Init+0x226>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a1c      	ldr	r2, [pc, #112]	; (800a848 <HAL_GPIO_Init+0x250>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d01f      	beq.n	800a81a <HAL_GPIO_Init+0x222>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a1b      	ldr	r2, [pc, #108]	; (800a84c <HAL_GPIO_Init+0x254>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d019      	beq.n	800a816 <HAL_GPIO_Init+0x21e>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a1a      	ldr	r2, [pc, #104]	; (800a850 <HAL_GPIO_Init+0x258>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d013      	beq.n	800a812 <HAL_GPIO_Init+0x21a>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a19      	ldr	r2, [pc, #100]	; (800a854 <HAL_GPIO_Init+0x25c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d00d      	beq.n	800a80e <HAL_GPIO_Init+0x216>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a18      	ldr	r2, [pc, #96]	; (800a858 <HAL_GPIO_Init+0x260>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d007      	beq.n	800a80a <HAL_GPIO_Init+0x212>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a17      	ldr	r2, [pc, #92]	; (800a85c <HAL_GPIO_Init+0x264>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d101      	bne.n	800a806 <HAL_GPIO_Init+0x20e>
 800a802:	2309      	movs	r3, #9
 800a804:	e02d      	b.n	800a862 <HAL_GPIO_Init+0x26a>
 800a806:	230a      	movs	r3, #10
 800a808:	e02b      	b.n	800a862 <HAL_GPIO_Init+0x26a>
 800a80a:	2308      	movs	r3, #8
 800a80c:	e029      	b.n	800a862 <HAL_GPIO_Init+0x26a>
 800a80e:	2307      	movs	r3, #7
 800a810:	e027      	b.n	800a862 <HAL_GPIO_Init+0x26a>
 800a812:	2306      	movs	r3, #6
 800a814:	e025      	b.n	800a862 <HAL_GPIO_Init+0x26a>
 800a816:	2305      	movs	r3, #5
 800a818:	e023      	b.n	800a862 <HAL_GPIO_Init+0x26a>
 800a81a:	2304      	movs	r3, #4
 800a81c:	e021      	b.n	800a862 <HAL_GPIO_Init+0x26a>
 800a81e:	2303      	movs	r3, #3
 800a820:	e01f      	b.n	800a862 <HAL_GPIO_Init+0x26a>
 800a822:	2302      	movs	r3, #2
 800a824:	e01d      	b.n	800a862 <HAL_GPIO_Init+0x26a>
 800a826:	2301      	movs	r3, #1
 800a828:	e01b      	b.n	800a862 <HAL_GPIO_Init+0x26a>
 800a82a:	bf00      	nop
 800a82c:	58000080 	.word	0x58000080
 800a830:	58024400 	.word	0x58024400
 800a834:	58000400 	.word	0x58000400
 800a838:	58020000 	.word	0x58020000
 800a83c:	58020400 	.word	0x58020400
 800a840:	58020800 	.word	0x58020800
 800a844:	58020c00 	.word	0x58020c00
 800a848:	58021000 	.word	0x58021000
 800a84c:	58021400 	.word	0x58021400
 800a850:	58021800 	.word	0x58021800
 800a854:	58021c00 	.word	0x58021c00
 800a858:	58022000 	.word	0x58022000
 800a85c:	58022400 	.word	0x58022400
 800a860:	2300      	movs	r3, #0
 800a862:	69fa      	ldr	r2, [r7, #28]
 800a864:	f002 0203 	and.w	r2, r2, #3
 800a868:	0092      	lsls	r2, r2, #2
 800a86a:	4093      	lsls	r3, r2
 800a86c:	69ba      	ldr	r2, [r7, #24]
 800a86e:	4313      	orrs	r3, r2
 800a870:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a872:	4938      	ldr	r1, [pc, #224]	; (800a954 <HAL_GPIO_Init+0x35c>)
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	089b      	lsrs	r3, r3, #2
 800a878:	3302      	adds	r3, #2
 800a87a:	69ba      	ldr	r2, [r7, #24]
 800a87c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	43db      	mvns	r3, r3
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	4013      	ands	r3, r2
 800a890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a8a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a8ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	43db      	mvns	r3, r3
 800a8ba:	69ba      	ldr	r2, [r7, #24]
 800a8bc:	4013      	ands	r3, r2
 800a8be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a8cc:	69ba      	ldr	r2, [r7, #24]
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a8d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	43db      	mvns	r3, r3
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d003      	beq.n	800a900 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a8f8:	69ba      	ldr	r2, [r7, #24]
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	43db      	mvns	r3, r3
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	4013      	ands	r3, r2
 800a914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a922:	69ba      	ldr	r2, [r7, #24]
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	4313      	orrs	r3, r2
 800a928:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	69ba      	ldr	r2, [r7, #24]
 800a92e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	3301      	adds	r3, #1
 800a934:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	fa22 f303 	lsr.w	r3, r2, r3
 800a940:	2b00      	cmp	r3, #0
 800a942:	f47f ae63 	bne.w	800a60c <HAL_GPIO_Init+0x14>
  }
}
 800a946:	bf00      	nop
 800a948:	bf00      	nop
 800a94a:	3724      	adds	r7, #36	; 0x24
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	58000400 	.word	0x58000400

0800a958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	691a      	ldr	r2, [r3, #16]
 800a968:	887b      	ldrh	r3, [r7, #2]
 800a96a:	4013      	ands	r3, r2
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a970:	2301      	movs	r3, #1
 800a972:	73fb      	strb	r3, [r7, #15]
 800a974:	e001      	b.n	800a97a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a976:	2300      	movs	r3, #0
 800a978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	460b      	mov	r3, r1
 800a992:	807b      	strh	r3, [r7, #2]
 800a994:	4613      	mov	r3, r2
 800a996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a998:	787b      	ldrb	r3, [r7, #1]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d003      	beq.n	800a9a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a99e:	887a      	ldrh	r2, [r7, #2]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a9a4:	e003      	b.n	800a9ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a9a6:	887b      	ldrh	r3, [r7, #2]
 800a9a8:	041a      	lsls	r2, r3, #16
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	619a      	str	r2, [r3, #24]
}
 800a9ae:	bf00      	nop
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b085      	sub	sp, #20
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a9cc:	887a      	ldrh	r2, [r7, #2]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	041a      	lsls	r2, r3, #16
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	43d9      	mvns	r1, r3
 800a9d8:	887b      	ldrh	r3, [r7, #2]
 800a9da:	400b      	ands	r3, r1
 800a9dc:	431a      	orrs	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	619a      	str	r2, [r3, #24]
}
 800a9e2:	bf00      	nop
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
	...

0800a9f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e08b      	b.n	800ab1a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d106      	bne.n	800aa1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7f7 f976 	bl	8001d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2224      	movs	r2, #36	; 0x24
 800aa20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f022 0201 	bic.w	r2, r2, #1
 800aa32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800aa40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689a      	ldr	r2, [r3, #8]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d107      	bne.n	800aa6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	689a      	ldr	r2, [r3, #8]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa66:	609a      	str	r2, [r3, #8]
 800aa68:	e006      	b.n	800aa78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	689a      	ldr	r2, [r3, #8]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800aa76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d108      	bne.n	800aa92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685a      	ldr	r2, [r3, #4]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa8e:	605a      	str	r2, [r3, #4]
 800aa90:	e007      	b.n	800aaa2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	685a      	ldr	r2, [r3, #4]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aaa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6859      	ldr	r1, [r3, #4]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	4b1d      	ldr	r3, [pc, #116]	; (800ab24 <HAL_I2C_Init+0x134>)
 800aaae:	430b      	orrs	r3, r1
 800aab0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68da      	ldr	r2, [r3, #12]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aac0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	691a      	ldr	r2, [r3, #16]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	430a      	orrs	r2, r1
 800aada:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	69d9      	ldr	r1, [r3, #28]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a1a      	ldr	r2, [r3, #32]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	430a      	orrs	r2, r1
 800aaea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f042 0201 	orr.w	r2, r2, #1
 800aafa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	02008000 	.word	0x02008000

0800ab28 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08a      	sub	sp, #40	; 0x28
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	607a      	str	r2, [r7, #4]
 800ab32:	461a      	mov	r2, r3
 800ab34:	460b      	mov	r3, r1
 800ab36:	817b      	strh	r3, [r7, #10]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b20      	cmp	r3, #32
 800ab4a:	f040 80ef 	bne.w	800ad2c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab5c:	d101      	bne.n	800ab62 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800ab5e:	2302      	movs	r3, #2
 800ab60:	e0e5      	b.n	800ad2e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d101      	bne.n	800ab70 <HAL_I2C_Master_Transmit_DMA+0x48>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	e0de      	b.n	800ad2e <HAL_I2C_Master_Transmit_DMA+0x206>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2221      	movs	r2, #33	; 0x21
 800ab7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2210      	movs	r2, #16
 800ab84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	893a      	ldrh	r2, [r7, #8]
 800ab98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	4a66      	ldr	r2, [pc, #408]	; (800ad38 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800ab9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4a66      	ldr	r2, [pc, #408]	; (800ad3c <HAL_I2C_Master_Transmit_DMA+0x214>)
 800aba4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abaa:	b29b      	uxth	r3, r3
 800abac:	2bff      	cmp	r3, #255	; 0xff
 800abae:	d906      	bls.n	800abbe <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	22ff      	movs	r2, #255	; 0xff
 800abb4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800abb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abba:	61fb      	str	r3, [r7, #28]
 800abbc:	e007      	b.n	800abce <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800abc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abcc:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d01a      	beq.n	800ac0c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abda:	781a      	ldrb	r2, [r3, #0]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	1c5a      	adds	r2, r3, #1
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abf0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac04:	3b01      	subs	r3, #1
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d074      	beq.n	800acfe <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d022      	beq.n	800ac62 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac20:	4a47      	ldr	r2, [pc, #284]	; (800ad40 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800ac22:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac28:	4a46      	ldr	r2, [pc, #280]	; (800ad44 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800ac2a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac30:	2200      	movs	r2, #0
 800ac32:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	2200      	movs	r2, #0
 800ac3a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ac4c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ac52:	f7fc fefd 	bl	8007a50 <HAL_DMA_Start_IT>
 800ac56:	4603      	mov	r3, r0
 800ac58:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ac5a:	7dfb      	ldrb	r3, [r7, #23]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d13a      	bne.n	800acd6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800ac60:	e013      	b.n	800ac8a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2220      	movs	r2, #32
 800ac66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e051      	b.n	800ad2e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	3301      	adds	r3, #1
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	8979      	ldrh	r1, [r7, #10]
 800ac96:	4b2c      	ldr	r3, [pc, #176]	; (800ad48 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f002 f83b 	bl	800cd18 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	b29a      	uxth	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800acbc:	2110      	movs	r1, #16
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f002 f85c 	bl	800cd7c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	e028      	b.n	800ad28 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2220      	movs	r2, #32
 800acda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acea:	f043 0210 	orr.w	r2, r3, #16
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e017      	b.n	800ad2e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	4a12      	ldr	r2, [pc, #72]	; (800ad4c <HAL_I2C_Master_Transmit_DMA+0x224>)
 800ad02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	8979      	ldrh	r1, [r7, #10]
 800ad0a:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f002 f800 	bl	800cd18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ad20:	2101      	movs	r1, #1
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f002 f82a 	bl	800cd7c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	e000      	b.n	800ad2e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800ad2c:	2302      	movs	r3, #2
  }
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3720      	adds	r7, #32
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	ffff0000 	.word	0xffff0000
 800ad3c:	0800b583 	.word	0x0800b583
 800ad40:	0800c93b 	.word	0x0800c93b
 800ad44:	0800ca69 	.word	0x0800ca69
 800ad48:	80002000 	.word	0x80002000
 800ad4c:	0800b113 	.word	0x0800b113

0800ad50 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af02      	add	r7, sp, #8
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	607a      	str	r2, [r7, #4]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	817b      	strh	r3, [r7, #10]
 800ad60:	4613      	mov	r3, r2
 800ad62:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b20      	cmp	r3, #32
 800ad6e:	f040 80cd 	bne.w	800af0c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad80:	d101      	bne.n	800ad86 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800ad82:	2302      	movs	r3, #2
 800ad84:	e0c3      	b.n	800af0e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d101      	bne.n	800ad94 <HAL_I2C_Master_Receive_DMA+0x44>
 800ad90:	2302      	movs	r3, #2
 800ad92:	e0bc      	b.n	800af0e <HAL_I2C_Master_Receive_DMA+0x1be>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2222      	movs	r2, #34	; 0x22
 800ada0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2210      	movs	r2, #16
 800ada8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	893a      	ldrh	r2, [r7, #8]
 800adbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4a55      	ldr	r2, [pc, #340]	; (800af18 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800adc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	4a55      	ldr	r2, [pc, #340]	; (800af1c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800adc8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adce:	b29b      	uxth	r3, r3
 800add0:	2bff      	cmp	r3, #255	; 0xff
 800add2:	d906      	bls.n	800ade2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	22ff      	movs	r2, #255	; 0xff
 800add8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800adda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adde:	617b      	str	r3, [r7, #20]
 800ade0:	e007      	b.n	800adf2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800adec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800adf0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d070      	beq.n	800aedc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d020      	beq.n	800ae44 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae06:	4a46      	ldr	r2, [pc, #280]	; (800af20 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800ae08:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0e:	4a45      	ldr	r2, [pc, #276]	; (800af24 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800ae10:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae16:	2200      	movs	r2, #0
 800ae18:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1e:	2200      	movs	r2, #0
 800ae20:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3324      	adds	r3, #36	; 0x24
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ae34:	f7fc fe0c 	bl	8007a50 <HAL_DMA_Start_IT>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ae3c:	7cfb      	ldrb	r3, [r7, #19]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d138      	bne.n	800aeb4 <HAL_I2C_Master_Receive_DMA+0x164>
 800ae42:	e013      	b.n	800ae6c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2220      	movs	r2, #32
 800ae48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e050      	b.n	800af0e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	8979      	ldrh	r1, [r7, #10]
 800ae74:	4b2c      	ldr	r3, [pc, #176]	; (800af28 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f001 ff4c 	bl	800cd18 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ae9a:	2110      	movs	r1, #16
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f001 ff6d 	bl	800cd7c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	e029      	b.n	800af08 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2220      	movs	r2, #32
 800aeb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec8:	f043 0210 	orr.w	r2, r3, #16
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e018      	b.n	800af0e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4a13      	ldr	r2, [pc, #76]	; (800af2c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800aee0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	8979      	ldrh	r1, [r7, #10]
 800aeea:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f001 ff10 	bl	800cd18 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800af00:	2102      	movs	r1, #2
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f001 ff3a 	bl	800cd7c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	e000      	b.n	800af0e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800af0c:	2302      	movs	r3, #2
  }
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	ffff0000 	.word	0xffff0000
 800af1c:	0800b583 	.word	0x0800b583
 800af20:	0800c9d1 	.word	0x0800c9d1
 800af24:	0800ca69 	.word	0x0800ca69
 800af28:	80002400 	.word	0x80002400
 800af2c:	0800b113 	.word	0x0800b113

0800af30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	68f9      	ldr	r1, [r7, #12]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	4798      	blx	r3
  }
}
 800af5c:	bf00      	nop
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	0a1b      	lsrs	r3, r3, #8
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	2b00      	cmp	r3, #0
 800af86:	d010      	beq.n	800afaa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	09db      	lsrs	r3, r3, #7
 800af8c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00a      	beq.n	800afaa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af98:	f043 0201 	orr.w	r2, r3, #1
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afa8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	0a9b      	lsrs	r3, r3, #10
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d010      	beq.n	800afd8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	09db      	lsrs	r3, r3, #7
 800afba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00a      	beq.n	800afd8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc6:	f043 0208 	orr.w	r2, r3, #8
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800afd6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	0a5b      	lsrs	r3, r3, #9
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d010      	beq.n	800b006 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	09db      	lsrs	r3, r3, #7
 800afe8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00a      	beq.n	800b006 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff4:	f043 0202 	orr.w	r2, r3, #2
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b004:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f003 030b 	and.w	r3, r3, #11
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b016:	68f9      	ldr	r1, [r7, #12]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f001 fb53 	bl	800c6c4 <I2C_ITError>
  }
}
 800b01e:	bf00      	nop
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b026:	b480      	push	{r7}
 800b028:	b083      	sub	sp, #12
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b02e:	bf00      	nop
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b083      	sub	sp, #12
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b042:	bf00      	nop
 800b044:	370c      	adds	r7, #12
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b04e:	b480      	push	{r7}
 800b050:	b083      	sub	sp, #12
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b056:	bf00      	nop
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b06a:	bf00      	nop
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b076:	b480      	push	{r7}
 800b078:	b083      	sub	sp, #12
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	70fb      	strb	r3, [r7, #3]
 800b082:	4613      	mov	r3, r2
 800b084:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b086:	bf00      	nop
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b0ae:	bf00      	nop
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b083      	sub	sp, #12
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b0c2:	bf00      	nop
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b083      	sub	sp, #12
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b0d6:	bf00      	nop
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b083      	sub	sp, #12
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b0ea:	bf00      	nop
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b083      	sub	sp, #12
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b104:	b2db      	uxtb	r3, r3
}
 800b106:	4618      	mov	r0, r3
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b088      	sub	sp, #32
 800b116:	af02      	add	r7, sp, #8
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d101      	bne.n	800b130 <I2C_Master_ISR_IT+0x1e>
 800b12c:	2302      	movs	r3, #2
 800b12e:	e120      	b.n	800b372 <I2C_Master_ISR_IT+0x260>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	091b      	lsrs	r3, r3, #4
 800b13c:	f003 0301 	and.w	r3, r3, #1
 800b140:	2b00      	cmp	r3, #0
 800b142:	d013      	beq.n	800b16c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	091b      	lsrs	r3, r3, #4
 800b148:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00d      	beq.n	800b16c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2210      	movs	r2, #16
 800b156:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b15c:	f043 0204 	orr.w	r2, r3, #4
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f001 fbc4 	bl	800c8f2 <I2C_Flush_TXDR>
 800b16a:	e0ed      	b.n	800b348 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	089b      	lsrs	r3, r3, #2
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d023      	beq.n	800b1c0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	089b      	lsrs	r3, r3, #2
 800b17c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b180:	2b00      	cmp	r3, #0
 800b182:	d01d      	beq.n	800b1c0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	f023 0304 	bic.w	r3, r3, #4
 800b18a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b196:	b2d2      	uxtb	r2, r2
 800b198:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19e:	1c5a      	adds	r2, r3, #1
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b1be:	e0c3      	b.n	800b348 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	099b      	lsrs	r3, r3, #6
 800b1c4:	f003 0301 	and.w	r3, r3, #1
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d12a      	bne.n	800b222 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	085b      	lsrs	r3, r3, #1
 800b1d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d024      	beq.n	800b222 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	085b      	lsrs	r3, r3, #1
 800b1dc:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01e      	beq.n	800b222 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f000 80ac 	beq.w	800b348 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f4:	781a      	ldrb	r2, [r3, #0]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b20a:	3b01      	subs	r3, #1
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b216:	b29b      	uxth	r3, r3
 800b218:	3b01      	subs	r3, #1
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800b220:	e092      	b.n	800b348 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	09db      	lsrs	r3, r3, #7
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d05d      	beq.n	800b2ea <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	099b      	lsrs	r3, r3, #6
 800b232:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800b236:	2b00      	cmp	r3, #0
 800b238:	d057      	beq.n	800b2ea <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b23e:	b29b      	uxth	r3, r3
 800b240:	2b00      	cmp	r3, #0
 800b242:	d040      	beq.n	800b2c6 <I2C_Master_ISR_IT+0x1b4>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d13c      	bne.n	800b2c6 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	b29b      	uxth	r3, r3
 800b254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b258:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b25e:	b29b      	uxth	r3, r3
 800b260:	2bff      	cmp	r3, #255	; 0xff
 800b262:	d90e      	bls.n	800b282 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	22ff      	movs	r2, #255	; 0xff
 800b268:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	8a79      	ldrh	r1, [r7, #18]
 800b272:	2300      	movs	r3, #0
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f001 fd4c 	bl	800cd18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b280:	e032      	b.n	800b2e8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b286:	b29a      	uxth	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b290:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b294:	d00b      	beq.n	800b2ae <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	8a79      	ldrh	r1, [r7, #18]
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	9000      	str	r0, [sp, #0]
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f001 fd36 	bl	800cd18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2ac:	e01c      	b.n	800b2e8 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	8a79      	ldrh	r1, [r7, #18]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f001 fd2a 	bl	800cd18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2c4:	e010      	b.n	800b2e8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2d4:	d003      	beq.n	800b2de <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f000 fdde 	bl	800be98 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2dc:	e034      	b.n	800b348 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b2de:	2140      	movs	r1, #64	; 0x40
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f001 f9ef 	bl	800c6c4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2e6:	e02f      	b.n	800b348 <I2C_Master_ISR_IT+0x236>
 800b2e8:	e02e      	b.n	800b348 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	099b      	lsrs	r3, r3, #6
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d028      	beq.n	800b348 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	099b      	lsrs	r3, r3, #6
 800b2fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d022      	beq.n	800b348 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b306:	b29b      	uxth	r3, r3
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d119      	bne.n	800b340 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b31a:	d015      	beq.n	800b348 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b324:	d108      	bne.n	800b338 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b334:	605a      	str	r2, [r3, #4]
 800b336:	e007      	b.n	800b348 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 fdad 	bl	800be98 <I2C_ITMasterSeqCplt>
 800b33e:	e003      	b.n	800b348 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b340:	2140      	movs	r1, #64	; 0x40
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f001 f9be 	bl	800c6c4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	095b      	lsrs	r3, r3, #5
 800b34c:	f003 0301 	and.w	r3, r3, #1
 800b350:	2b00      	cmp	r3, #0
 800b352:	d009      	beq.n	800b368 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	095b      	lsrs	r3, r3, #5
 800b358:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d003      	beq.n	800b368 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800b360:	6979      	ldr	r1, [r7, #20]
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f000 fe34 	bl	800bfd0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b086      	sub	sp, #24
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b396:	2b01      	cmp	r3, #1
 800b398:	d101      	bne.n	800b39e <I2C_Slave_ISR_IT+0x24>
 800b39a:	2302      	movs	r3, #2
 800b39c:	e0ed      	b.n	800b57a <I2C_Slave_ISR_IT+0x200>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	095b      	lsrs	r3, r3, #5
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00a      	beq.n	800b3c8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	095b      	lsrs	r3, r3, #5
 800b3b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d004      	beq.n	800b3c8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b3be:	6939      	ldr	r1, [r7, #16]
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f000 fecf 	bl	800c164 <I2C_ITSlaveCplt>
 800b3c6:	e0d3      	b.n	800b570 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	091b      	lsrs	r3, r3, #4
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d04d      	beq.n	800b470 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	091b      	lsrs	r3, r3, #4
 800b3d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d047      	beq.n	800b470 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d128      	bne.n	800b43c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b28      	cmp	r3, #40	; 0x28
 800b3f4:	d108      	bne.n	800b408 <I2C_Slave_ISR_IT+0x8e>
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3fc:	d104      	bne.n	800b408 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b3fe:	6939      	ldr	r1, [r7, #16]
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f001 f909 	bl	800c618 <I2C_ITListenCplt>
 800b406:	e032      	b.n	800b46e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b29      	cmp	r3, #41	; 0x29
 800b412:	d10e      	bne.n	800b432 <I2C_Slave_ISR_IT+0xb8>
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b41a:	d00a      	beq.n	800b432 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2210      	movs	r2, #16
 800b422:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f001 fa64 	bl	800c8f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f000 fd71 	bl	800bf12 <I2C_ITSlaveSeqCplt>
 800b430:	e01d      	b.n	800b46e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2210      	movs	r2, #16
 800b438:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b43a:	e096      	b.n	800b56a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2210      	movs	r2, #16
 800b442:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b448:	f043 0204 	orr.w	r2, r3, #4
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d004      	beq.n	800b460 <I2C_Slave_ISR_IT+0xe6>
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b45c:	f040 8085 	bne.w	800b56a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b464:	4619      	mov	r1, r3
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f001 f92c 	bl	800c6c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b46c:	e07d      	b.n	800b56a <I2C_Slave_ISR_IT+0x1f0>
 800b46e:	e07c      	b.n	800b56a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	089b      	lsrs	r3, r3, #2
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d030      	beq.n	800b4de <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	089b      	lsrs	r3, r3, #2
 800b480:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b484:	2b00      	cmp	r3, #0
 800b486:	d02a      	beq.n	800b4de <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d018      	beq.n	800b4c4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49c:	b2d2      	uxtb	r2, r2
 800b49e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d14f      	bne.n	800b56e <I2C_Slave_ISR_IT+0x1f4>
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b4d4:	d04b      	beq.n	800b56e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f000 fd1b 	bl	800bf12 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b4dc:	e047      	b.n	800b56e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	08db      	lsrs	r3, r3, #3
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	08db      	lsrs	r3, r3, #3
 800b4ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d004      	beq.n	800b500 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b4f6:	6939      	ldr	r1, [r7, #16]
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 fc49 	bl	800bd90 <I2C_ITAddrCplt>
 800b4fe:	e037      	b.n	800b570 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	085b      	lsrs	r3, r3, #1
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d031      	beq.n	800b570 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	085b      	lsrs	r3, r3, #1
 800b510:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b514:	2b00      	cmp	r3, #0
 800b516:	d02b      	beq.n	800b570 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d018      	beq.n	800b554 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	781a      	ldrb	r2, [r3, #0]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	3b01      	subs	r3, #1
 800b540:	b29a      	uxth	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b54a:	3b01      	subs	r3, #1
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	851a      	strh	r2, [r3, #40]	; 0x28
 800b552:	e00d      	b.n	800b570 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b55a:	d002      	beq.n	800b562 <I2C_Slave_ISR_IT+0x1e8>
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d106      	bne.n	800b570 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f000 fcd5 	bl	800bf12 <I2C_ITSlaveSeqCplt>
 800b568:	e002      	b.n	800b570 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800b56a:	bf00      	nop
 800b56c:	e000      	b.n	800b570 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800b56e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3718      	adds	r7, #24
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b088      	sub	sp, #32
 800b586:	af02      	add	r7, sp, #8
 800b588:	60f8      	str	r0, [r7, #12]
 800b58a:	60b9      	str	r1, [r7, #8]
 800b58c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b594:	2b01      	cmp	r3, #1
 800b596:	d101      	bne.n	800b59c <I2C_Master_ISR_DMA+0x1a>
 800b598:	2302      	movs	r3, #2
 800b59a:	e0e1      	b.n	800b760 <I2C_Master_ISR_DMA+0x1de>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	091b      	lsrs	r3, r3, #4
 800b5a8:	f003 0301 	and.w	r3, r3, #1
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d017      	beq.n	800b5e0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	091b      	lsrs	r3, r3, #4
 800b5b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d011      	beq.n	800b5e0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2210      	movs	r2, #16
 800b5c2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c8:	f043 0204 	orr.w	r2, r3, #4
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b5d0:	2120      	movs	r1, #32
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f001 fbd2 	bl	800cd7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f001 f98a 	bl	800c8f2 <I2C_Flush_TXDR>
 800b5de:	e0ba      	b.n	800b756 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	09db      	lsrs	r3, r3, #7
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d072      	beq.n	800b6d2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	099b      	lsrs	r3, r3, #6
 800b5f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d06c      	beq.n	800b6d2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b606:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d04e      	beq.n	800b6b0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b61e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b624:	b29b      	uxth	r3, r3
 800b626:	2bff      	cmp	r3, #255	; 0xff
 800b628:	d906      	bls.n	800b638 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	22ff      	movs	r2, #255	; 0xff
 800b62e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800b630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b634:	617b      	str	r3, [r7, #20]
 800b636:	e010      	b.n	800b65a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b646:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b64a:	d003      	beq.n	800b654 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b650:	617b      	str	r3, [r7, #20]
 800b652:	e002      	b.n	800b65a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800b654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b658:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b65e:	b2da      	uxtb	r2, r3
 800b660:	8a79      	ldrh	r1, [r7, #18]
 800b662:	2300      	movs	r3, #0
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f001 fb55 	bl	800cd18 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b672:	b29a      	uxth	r2, r3
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b686:	b2db      	uxtb	r3, r3
 800b688:	2b22      	cmp	r3, #34	; 0x22
 800b68a:	d108      	bne.n	800b69e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b69a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b69c:	e05b      	b.n	800b756 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6ac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b6ae:	e052      	b.n	800b756 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6be:	d003      	beq.n	800b6c8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 fbe9 	bl	800be98 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b6c6:	e046      	b.n	800b756 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b6c8:	2140      	movs	r1, #64	; 0x40
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 fffa 	bl	800c6c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b6d0:	e041      	b.n	800b756 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	099b      	lsrs	r3, r3, #6
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d029      	beq.n	800b732 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	099b      	lsrs	r3, r3, #6
 800b6e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d023      	beq.n	800b732 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d119      	bne.n	800b728 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b702:	d027      	beq.n	800b754 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b708:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b70c:	d108      	bne.n	800b720 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b71c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b71e:	e019      	b.n	800b754 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 fbb9 	bl	800be98 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b726:	e015      	b.n	800b754 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b728:	2140      	movs	r1, #64	; 0x40
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f000 ffca 	bl	800c6c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b730:	e010      	b.n	800b754 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	095b      	lsrs	r3, r3, #5
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00b      	beq.n	800b756 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	095b      	lsrs	r3, r3, #5
 800b742:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b746:	2b00      	cmp	r3, #0
 800b748:	d005      	beq.n	800b756 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b74a:	68b9      	ldr	r1, [r7, #8]
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f000 fc3f 	bl	800bfd0 <I2C_ITMasterCplt>
 800b752:	e000      	b.n	800b756 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800b754:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3718      	adds	r7, #24
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b088      	sub	sp, #32
 800b76c:	af02      	add	r7, sp, #8
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b774:	4b92      	ldr	r3, [pc, #584]	; (800b9c0 <I2C_Mem_ISR_DMA+0x258>)
 800b776:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d101      	bne.n	800b786 <I2C_Mem_ISR_DMA+0x1e>
 800b782:	2302      	movs	r3, #2
 800b784:	e118      	b.n	800b9b8 <I2C_Mem_ISR_DMA+0x250>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	091b      	lsrs	r3, r3, #4
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b00      	cmp	r3, #0
 800b798:	d017      	beq.n	800b7ca <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	091b      	lsrs	r3, r3, #4
 800b79e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d011      	beq.n	800b7ca <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2210      	movs	r2, #16
 800b7ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b2:	f043 0204 	orr.w	r2, r3, #4
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b7ba:	2120      	movs	r1, #32
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f001 fadd 	bl	800cd7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f001 f895 	bl	800c8f2 <I2C_Flush_TXDR>
 800b7c8:	e0f1      	b.n	800b9ae <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	085b      	lsrs	r3, r3, #1
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00f      	beq.n	800b7f6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	085b      	lsrs	r3, r3, #1
 800b7da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d009      	beq.n	800b7f6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b7ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f2:	651a      	str	r2, [r3, #80]	; 0x50
 800b7f4:	e0db      	b.n	800b9ae <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	09db      	lsrs	r3, r3, #7
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d060      	beq.n	800b8c4 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	099b      	lsrs	r3, r3, #6
 800b806:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d05a      	beq.n	800b8c4 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b80e:	2101      	movs	r1, #1
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f001 fb37 	bl	800ce84 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b816:	2110      	movs	r1, #16
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f001 faaf 	bl	800cd7c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b822:	b29b      	uxth	r3, r3
 800b824:	2b00      	cmp	r3, #0
 800b826:	d048      	beq.n	800b8ba <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	2bff      	cmp	r3, #255	; 0xff
 800b830:	d910      	bls.n	800b854 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	22ff      	movs	r2, #255	; 0xff
 800b836:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b83c:	b299      	uxth	r1, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b842:	b2da      	uxtb	r2, r3
 800b844:	2300      	movs	r3, #0
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f001 fa63 	bl	800cd18 <I2C_TransferConfig>
 800b852:	e011      	b.n	800b878 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b858:	b29a      	uxth	r2, r3
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b862:	b299      	uxth	r1, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	2300      	movs	r3, #0
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f001 fa50 	bl	800cd18 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	b29a      	uxth	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b22      	cmp	r3, #34	; 0x22
 800b894:	d108      	bne.n	800b8a8 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b8a6:	e082      	b.n	800b9ae <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b8b8:	e079      	b.n	800b9ae <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b8ba:	2140      	movs	r1, #64	; 0x40
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f000 ff01 	bl	800c6c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b8c2:	e074      	b.n	800b9ae <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	099b      	lsrs	r3, r3, #6
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d05e      	beq.n	800b98e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	099b      	lsrs	r3, r3, #6
 800b8d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d058      	beq.n	800b98e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b8dc:	2101      	movs	r1, #1
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f001 fad0 	bl	800ce84 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b8e4:	2110      	movs	r1, #16
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f001 fa48 	bl	800cd7c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	2b22      	cmp	r3, #34	; 0x22
 800b8f6:	d101      	bne.n	800b8fc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800b8f8:	4b32      	ldr	r3, [pc, #200]	; (800b9c4 <I2C_Mem_ISR_DMA+0x25c>)
 800b8fa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b900:	b29b      	uxth	r3, r3
 800b902:	2bff      	cmp	r3, #255	; 0xff
 800b904:	d910      	bls.n	800b928 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	22ff      	movs	r2, #255	; 0xff
 800b90a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b910:	b299      	uxth	r1, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b916:	b2da      	uxtb	r2, r3
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f001 f9f9 	bl	800cd18 <I2C_TransferConfig>
 800b926:	e011      	b.n	800b94c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b936:	b299      	uxth	r1, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f001 f9e6 	bl	800cd18 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b950:	b29a      	uxth	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	b29a      	uxth	r2, r3
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b22      	cmp	r3, #34	; 0x22
 800b968:	d108      	bne.n	800b97c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b978:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b97a:	e018      	b.n	800b9ae <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b98a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b98c:	e00f      	b.n	800b9ae <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	095b      	lsrs	r3, r3, #5
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d009      	beq.n	800b9ae <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	095b      	lsrs	r3, r3, #5
 800b99e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d003      	beq.n	800b9ae <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b9a6:	68b9      	ldr	r1, [r7, #8]
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f000 fb11 	bl	800bfd0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	80002000 	.word	0x80002000
 800b9c4:	80002400 	.word	0x80002400

0800b9c8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b088      	sub	sp, #32
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d101      	bne.n	800b9ec <I2C_Slave_ISR_DMA+0x24>
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	e1cc      	b.n	800bd86 <I2C_Slave_ISR_DMA+0x3be>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	095b      	lsrs	r3, r3, #5
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00a      	beq.n	800ba16 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	095b      	lsrs	r3, r3, #5
 800ba04:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800ba0c:	68b9      	ldr	r1, [r7, #8]
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f000 fba8 	bl	800c164 <I2C_ITSlaveCplt>
 800ba14:	e1b2      	b.n	800bd7c <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	091b      	lsrs	r3, r3, #4
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 819c 	beq.w	800bd5c <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	091b      	lsrs	r3, r3, #4
 800ba28:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 8195 	beq.w	800bd5c <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	0b9b      	lsrs	r3, r3, #14
 800ba36:	f003 0301 	and.w	r3, r3, #1
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d106      	bne.n	800ba4c <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	0bdb      	lsrs	r3, r3, #15
 800ba42:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f000 8181 	beq.w	800bd4e <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d07c      	beq.n	800bb4e <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	0bdb      	lsrs	r3, r3, #15
 800ba58:	f003 0301 	and.w	r3, r3, #1
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d076      	beq.n	800bb4e <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a75      	ldr	r2, [pc, #468]	; (800bc3c <I2C_Slave_ISR_DMA+0x274>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d059      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a73      	ldr	r2, [pc, #460]	; (800bc40 <I2C_Slave_ISR_DMA+0x278>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d053      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a71      	ldr	r2, [pc, #452]	; (800bc44 <I2C_Slave_ISR_DMA+0x27c>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d04d      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a6f      	ldr	r2, [pc, #444]	; (800bc48 <I2C_Slave_ISR_DMA+0x280>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d047      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a6d      	ldr	r2, [pc, #436]	; (800bc4c <I2C_Slave_ISR_DMA+0x284>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d041      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a6b      	ldr	r2, [pc, #428]	; (800bc50 <I2C_Slave_ISR_DMA+0x288>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d03b      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a69      	ldr	r2, [pc, #420]	; (800bc54 <I2C_Slave_ISR_DMA+0x28c>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d035      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a67      	ldr	r2, [pc, #412]	; (800bc58 <I2C_Slave_ISR_DMA+0x290>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d02f      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a65      	ldr	r2, [pc, #404]	; (800bc5c <I2C_Slave_ISR_DMA+0x294>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d029      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a63      	ldr	r2, [pc, #396]	; (800bc60 <I2C_Slave_ISR_DMA+0x298>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d023      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a61      	ldr	r2, [pc, #388]	; (800bc64 <I2C_Slave_ISR_DMA+0x29c>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d01d      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a5f      	ldr	r2, [pc, #380]	; (800bc68 <I2C_Slave_ISR_DMA+0x2a0>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d017      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a5d      	ldr	r2, [pc, #372]	; (800bc6c <I2C_Slave_ISR_DMA+0x2a4>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d011      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a5b      	ldr	r2, [pc, #364]	; (800bc70 <I2C_Slave_ISR_DMA+0x2a8>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00b      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a59      	ldr	r2, [pc, #356]	; (800bc74 <I2C_Slave_ISR_DMA+0x2ac>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d005      	beq.n	800bb20 <I2C_Slave_ISR_DMA+0x158>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a57      	ldr	r2, [pc, #348]	; (800bc78 <I2C_Slave_ISR_DMA+0x2b0>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d109      	bne.n	800bb34 <I2C_Slave_ISR_DMA+0x16c>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bf0c      	ite	eq
 800bb2c:	2301      	moveq	r3, #1
 800bb2e:	2300      	movne	r3, #0
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	e008      	b.n	800bb46 <I2C_Slave_ISR_DMA+0x17e>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	bf0c      	ite	eq
 800bb40:	2301      	moveq	r3, #1
 800bb42:	2300      	movne	r3, #0
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 809f 	beq.w	800bc96 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	0b9b      	lsrs	r3, r3, #14
 800bb5c:	f003 0301 	and.w	r3, r3, #1
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 8098 	beq.w	800bc96 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a33      	ldr	r2, [pc, #204]	; (800bc3c <I2C_Slave_ISR_DMA+0x274>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d059      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a31      	ldr	r2, [pc, #196]	; (800bc40 <I2C_Slave_ISR_DMA+0x278>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d053      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a2f      	ldr	r2, [pc, #188]	; (800bc44 <I2C_Slave_ISR_DMA+0x27c>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d04d      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a2d      	ldr	r2, [pc, #180]	; (800bc48 <I2C_Slave_ISR_DMA+0x280>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d047      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a2b      	ldr	r2, [pc, #172]	; (800bc4c <I2C_Slave_ISR_DMA+0x284>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d041      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a29      	ldr	r2, [pc, #164]	; (800bc50 <I2C_Slave_ISR_DMA+0x288>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d03b      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a27      	ldr	r2, [pc, #156]	; (800bc54 <I2C_Slave_ISR_DMA+0x28c>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d035      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a25      	ldr	r2, [pc, #148]	; (800bc58 <I2C_Slave_ISR_DMA+0x290>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d02f      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a23      	ldr	r2, [pc, #140]	; (800bc5c <I2C_Slave_ISR_DMA+0x294>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d029      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a21      	ldr	r2, [pc, #132]	; (800bc60 <I2C_Slave_ISR_DMA+0x298>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d023      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a1f      	ldr	r2, [pc, #124]	; (800bc64 <I2C_Slave_ISR_DMA+0x29c>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d01d      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a1d      	ldr	r2, [pc, #116]	; (800bc68 <I2C_Slave_ISR_DMA+0x2a0>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d017      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a1b      	ldr	r2, [pc, #108]	; (800bc6c <I2C_Slave_ISR_DMA+0x2a4>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d011      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a19      	ldr	r2, [pc, #100]	; (800bc70 <I2C_Slave_ISR_DMA+0x2a8>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d00b      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a17      	ldr	r2, [pc, #92]	; (800bc74 <I2C_Slave_ISR_DMA+0x2ac>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d005      	beq.n	800bc26 <I2C_Slave_ISR_DMA+0x25e>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a15      	ldr	r2, [pc, #84]	; (800bc78 <I2C_Slave_ISR_DMA+0x2b0>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d12a      	bne.n	800bc7c <I2C_Slave_ISR_DMA+0x2b4>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	bf0c      	ite	eq
 800bc32:	2301      	moveq	r3, #1
 800bc34:	2300      	movne	r3, #0
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	e029      	b.n	800bc8e <I2C_Slave_ISR_DMA+0x2c6>
 800bc3a:	bf00      	nop
 800bc3c:	40020010 	.word	0x40020010
 800bc40:	40020028 	.word	0x40020028
 800bc44:	40020040 	.word	0x40020040
 800bc48:	40020058 	.word	0x40020058
 800bc4c:	40020070 	.word	0x40020070
 800bc50:	40020088 	.word	0x40020088
 800bc54:	400200a0 	.word	0x400200a0
 800bc58:	400200b8 	.word	0x400200b8
 800bc5c:	40020410 	.word	0x40020410
 800bc60:	40020428 	.word	0x40020428
 800bc64:	40020440 	.word	0x40020440
 800bc68:	40020458 	.word	0x40020458
 800bc6c:	40020470 	.word	0x40020470
 800bc70:	40020488 	.word	0x40020488
 800bc74:	400204a0 	.word	0x400204a0
 800bc78:	400204b8 	.word	0x400204b8
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	bf0c      	ite	eq
 800bc88:	2301      	moveq	r3, #1
 800bc8a:	2300      	movne	r3, #0
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800bc92:	2301      	movs	r3, #1
 800bc94:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d128      	bne.n	800bcee <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	2b28      	cmp	r3, #40	; 0x28
 800bca6:	d108      	bne.n	800bcba <I2C_Slave_ISR_DMA+0x2f2>
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcae:	d104      	bne.n	800bcba <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f000 fcb0 	bl	800c618 <I2C_ITListenCplt>
 800bcb8:	e048      	b.n	800bd4c <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b29      	cmp	r3, #41	; 0x29
 800bcc4:	d10e      	bne.n	800bce4 <I2C_Slave_ISR_DMA+0x31c>
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bccc:	d00a      	beq.n	800bce4 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2210      	movs	r2, #16
 800bcd4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 fe0b 	bl	800c8f2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 f918 	bl	800bf12 <I2C_ITSlaveSeqCplt>
 800bce2:	e033      	b.n	800bd4c <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2210      	movs	r2, #16
 800bcea:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800bcec:	e034      	b.n	800bd58 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2210      	movs	r2, #16
 800bcf4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcfa:	f043 0204 	orr.w	r2, r3, #4
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd08:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <I2C_Slave_ISR_DMA+0x350>
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd16:	d11f      	bne.n	800bd58 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	2b21      	cmp	r3, #33	; 0x21
 800bd1c:	d002      	beq.n	800bd24 <I2C_Slave_ISR_DMA+0x35c>
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
 800bd20:	2b29      	cmp	r3, #41	; 0x29
 800bd22:	d103      	bne.n	800bd2c <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2221      	movs	r2, #33	; 0x21
 800bd28:	631a      	str	r2, [r3, #48]	; 0x30
 800bd2a:	e008      	b.n	800bd3e <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
 800bd2e:	2b22      	cmp	r3, #34	; 0x22
 800bd30:	d002      	beq.n	800bd38 <I2C_Slave_ISR_DMA+0x370>
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	2b2a      	cmp	r3, #42	; 0x2a
 800bd36:	d102      	bne.n	800bd3e <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2222      	movs	r2, #34	; 0x22
 800bd3c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd42:	4619      	mov	r1, r3
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f000 fcbd 	bl	800c6c4 <I2C_ITError>
      if (treatdmanack == 1U)
 800bd4a:	e005      	b.n	800bd58 <I2C_Slave_ISR_DMA+0x390>
 800bd4c:	e004      	b.n	800bd58 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2210      	movs	r2, #16
 800bd54:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800bd56:	e011      	b.n	800bd7c <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800bd58:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800bd5a:	e00f      	b.n	800bd7c <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	08db      	lsrs	r3, r3, #3
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d009      	beq.n	800bd7c <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	08db      	lsrs	r3, r3, #3
 800bd6c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d003      	beq.n	800bd7c <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800bd74:	68b9      	ldr	r1, [r7, #8]
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f000 f80a 	bl	800bd90 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3720      	adds	r7, #32
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop

0800bd90 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bda6:	2b28      	cmp	r3, #40	; 0x28
 800bda8:	d16a      	bne.n	800be80 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	0c1b      	lsrs	r3, r3, #16
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	0c1b      	lsrs	r3, r3, #16
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bdc8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdd6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bde4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d138      	bne.n	800be60 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800bdee:	897b      	ldrh	r3, [r7, #10]
 800bdf0:	09db      	lsrs	r3, r3, #7
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	89bb      	ldrh	r3, [r7, #12]
 800bdf6:	4053      	eors	r3, r2
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	f003 0306 	and.w	r3, r3, #6
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d11c      	bne.n	800be3c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800be02:	897b      	ldrh	r3, [r7, #10]
 800be04:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be0a:	1c5a      	adds	r2, r3, #1
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be14:	2b02      	cmp	r3, #2
 800be16:	d13b      	bne.n	800be90 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2208      	movs	r2, #8
 800be24:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800be2e:	89ba      	ldrh	r2, [r7, #12]
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	4619      	mov	r1, r3
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff f91e 	bl	800b076 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800be3a:	e029      	b.n	800be90 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800be3c:	893b      	ldrh	r3, [r7, #8]
 800be3e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800be40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f001 f81d 	bl	800ce84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800be52:	89ba      	ldrh	r2, [r7, #12]
 800be54:	7bfb      	ldrb	r3, [r7, #15]
 800be56:	4619      	mov	r1, r3
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7ff f90c 	bl	800b076 <HAL_I2C_AddrCallback>
}
 800be5e:	e017      	b.n	800be90 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800be60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f001 f80d 	bl	800ce84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800be72:	89ba      	ldrh	r2, [r7, #12]
 800be74:	7bfb      	ldrb	r3, [r7, #15]
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7ff f8fc 	bl	800b076 <HAL_I2C_AddrCallback>
}
 800be7e:	e007      	b.n	800be90 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2208      	movs	r2, #8
 800be86:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800be90:	bf00      	nop
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b21      	cmp	r3, #33	; 0x21
 800beb2:	d115      	bne.n	800bee0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2220      	movs	r2, #32
 800beb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2211      	movs	r2, #17
 800bec0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bec8:	2101      	movs	r1, #1
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 ffda 	bl	800ce84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff f8a4 	bl	800b026 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bede:	e014      	b.n	800bf0a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2220      	movs	r2, #32
 800bee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2212      	movs	r2, #18
 800beec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bef4:	2102      	movs	r1, #2
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 ffc4 	bl	800ce84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7ff f898 	bl	800b03a <HAL_I2C_MasterRxCpltCallback>
}
 800bf0a:	bf00      	nop
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b084      	sub	sp, #16
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	0b9b      	lsrs	r3, r3, #14
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d008      	beq.n	800bf48 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	e00d      	b.n	800bf64 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	0bdb      	lsrs	r3, r3, #15
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d007      	beq.n	800bf64 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf62:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b29      	cmp	r3, #41	; 0x29
 800bf6e:	d112      	bne.n	800bf96 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2228      	movs	r2, #40	; 0x28
 800bf74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2221      	movs	r2, #33	; 0x21
 800bf7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bf7e:	2101      	movs	r1, #1
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 ff7f 	bl	800ce84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7ff f85d 	bl	800b04e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bf94:	e017      	b.n	800bfc6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	2b2a      	cmp	r3, #42	; 0x2a
 800bfa0:	d111      	bne.n	800bfc6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2228      	movs	r2, #40	; 0x28
 800bfa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2222      	movs	r2, #34	; 0x22
 800bfae:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bfb0:	2102      	movs	r1, #2
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 ff66 	bl	800ce84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff f84e 	bl	800b062 <HAL_I2C_SlaveRxCpltCallback>
}
 800bfc6:	bf00      	nop
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
	...

0800bfd0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b21      	cmp	r3, #33	; 0x21
 800bff0:	d107      	bne.n	800c002 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bff2:	2101      	movs	r1, #1
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 ff45 	bl	800ce84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2211      	movs	r2, #17
 800bffe:	631a      	str	r2, [r3, #48]	; 0x30
 800c000:	e00c      	b.n	800c01c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	2b22      	cmp	r3, #34	; 0x22
 800c00c:	d106      	bne.n	800c01c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c00e:	2102      	movs	r1, #2
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 ff37 	bl	800ce84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2212      	movs	r2, #18
 800c01a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6859      	ldr	r1, [r3, #4]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	4b4d      	ldr	r3, [pc, #308]	; (800c15c <I2C_ITMasterCplt+0x18c>)
 800c028:	400b      	ands	r3, r1
 800c02a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a4a      	ldr	r2, [pc, #296]	; (800c160 <I2C_ITMasterCplt+0x190>)
 800c036:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	091b      	lsrs	r3, r3, #4
 800c03c:	f003 0301 	and.w	r3, r3, #1
 800c040:	2b00      	cmp	r3, #0
 800c042:	d009      	beq.n	800c058 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2210      	movs	r2, #16
 800c04a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c050:	f043 0204 	orr.w	r2, r3, #4
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b60      	cmp	r3, #96	; 0x60
 800c062:	d10b      	bne.n	800c07c <I2C_ITMasterCplt+0xac>
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	089b      	lsrs	r3, r3, #2
 800c068:	f003 0301 	and.w	r3, r3, #1
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d005      	beq.n	800c07c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c076:	b2db      	uxtb	r3, r3
 800c078:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c07a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fc38 	bl	800c8f2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c086:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b60      	cmp	r3, #96	; 0x60
 800c092:	d002      	beq.n	800c09a <I2C_ITMasterCplt+0xca>
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d006      	beq.n	800c0a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fb0f 	bl	800c6c4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c0a6:	e054      	b.n	800c152 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	2b21      	cmp	r3, #33	; 0x21
 800c0b2:	d124      	bne.n	800c0fe <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2220      	movs	r2, #32
 800c0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b40      	cmp	r3, #64	; 0x40
 800c0cc:	d10b      	bne.n	800c0e6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7fe ffe1 	bl	800b0a6 <HAL_I2C_MemTxCpltCallback>
}
 800c0e4:	e035      	b.n	800c152 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7fe ff95 	bl	800b026 <HAL_I2C_MasterTxCpltCallback>
}
 800c0fc:	e029      	b.n	800c152 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b22      	cmp	r3, #34	; 0x22
 800c108:	d123      	bne.n	800c152 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2220      	movs	r2, #32
 800c10e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b40      	cmp	r3, #64	; 0x40
 800c122:	d10b      	bne.n	800c13c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7fe ffc0 	bl	800b0ba <HAL_I2C_MemRxCpltCallback>
}
 800c13a:	e00a      	b.n	800c152 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7fe ff74 	bl	800b03a <HAL_I2C_MasterRxCpltCallback>
}
 800c152:	bf00      	nop
 800c154:	3718      	adds	r7, #24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	fe00e800 	.word	0xfe00e800
 800c160:	ffff0000 	.word	0xffff0000

0800c164 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b086      	sub	sp, #24
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c186:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2220      	movs	r2, #32
 800c18e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c190:	7afb      	ldrb	r3, [r7, #11]
 800c192:	2b21      	cmp	r3, #33	; 0x21
 800c194:	d002      	beq.n	800c19c <I2C_ITSlaveCplt+0x38>
 800c196:	7afb      	ldrb	r3, [r7, #11]
 800c198:	2b29      	cmp	r3, #41	; 0x29
 800c19a:	d108      	bne.n	800c1ae <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c19c:	f248 0101 	movw	r1, #32769	; 0x8001
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fe6f 	bl	800ce84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2221      	movs	r2, #33	; 0x21
 800c1aa:	631a      	str	r2, [r3, #48]	; 0x30
 800c1ac:	e019      	b.n	800c1e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c1ae:	7afb      	ldrb	r3, [r7, #11]
 800c1b0:	2b22      	cmp	r3, #34	; 0x22
 800c1b2:	d002      	beq.n	800c1ba <I2C_ITSlaveCplt+0x56>
 800c1b4:	7afb      	ldrb	r3, [r7, #11]
 800c1b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c1b8:	d108      	bne.n	800c1cc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c1ba:	f248 0102 	movw	r1, #32770	; 0x8002
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fe60 	bl	800ce84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2222      	movs	r2, #34	; 0x22
 800c1c8:	631a      	str	r2, [r3, #48]	; 0x30
 800c1ca:	e00a      	b.n	800c1e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800c1cc:	7afb      	ldrb	r3, [r7, #11]
 800c1ce:	2b28      	cmp	r3, #40	; 0x28
 800c1d0:	d107      	bne.n	800c1e2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800c1d2:	f248 0103 	movw	r1, #32771	; 0x8003
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 fe54 	bl	800ce84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c1f0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	6859      	ldr	r1, [r3, #4]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	4b80      	ldr	r3, [pc, #512]	; (800c400 <I2C_ITSlaveCplt+0x29c>)
 800c1fe:	400b      	ands	r3, r1
 800c200:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fb75 	bl	800c8f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	0b9b      	lsrs	r3, r3, #14
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	2b00      	cmp	r3, #0
 800c212:	d07a      	beq.n	800c30a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c222:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f000 8112 	beq.w	800c452 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a73      	ldr	r2, [pc, #460]	; (800c404 <I2C_ITSlaveCplt+0x2a0>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d059      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a71      	ldr	r2, [pc, #452]	; (800c408 <I2C_ITSlaveCplt+0x2a4>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d053      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a6f      	ldr	r2, [pc, #444]	; (800c40c <I2C_ITSlaveCplt+0x2a8>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d04d      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a6d      	ldr	r2, [pc, #436]	; (800c410 <I2C_ITSlaveCplt+0x2ac>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d047      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a6b      	ldr	r2, [pc, #428]	; (800c414 <I2C_ITSlaveCplt+0x2b0>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d041      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a69      	ldr	r2, [pc, #420]	; (800c418 <I2C_ITSlaveCplt+0x2b4>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d03b      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a67      	ldr	r2, [pc, #412]	; (800c41c <I2C_ITSlaveCplt+0x2b8>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d035      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a65      	ldr	r2, [pc, #404]	; (800c420 <I2C_ITSlaveCplt+0x2bc>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d02f      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a63      	ldr	r2, [pc, #396]	; (800c424 <I2C_ITSlaveCplt+0x2c0>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d029      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a61      	ldr	r2, [pc, #388]	; (800c428 <I2C_ITSlaveCplt+0x2c4>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d023      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a5f      	ldr	r2, [pc, #380]	; (800c42c <I2C_ITSlaveCplt+0x2c8>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d01d      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a5d      	ldr	r2, [pc, #372]	; (800c430 <I2C_ITSlaveCplt+0x2cc>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d017      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a5b      	ldr	r2, [pc, #364]	; (800c434 <I2C_ITSlaveCplt+0x2d0>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d011      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a59      	ldr	r2, [pc, #356]	; (800c438 <I2C_ITSlaveCplt+0x2d4>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d00b      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a57      	ldr	r2, [pc, #348]	; (800c43c <I2C_ITSlaveCplt+0x2d8>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d005      	beq.n	800c2ee <I2C_ITSlaveCplt+0x18a>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a55      	ldr	r2, [pc, #340]	; (800c440 <I2C_ITSlaveCplt+0x2dc>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d105      	bne.n	800c2fa <I2C_ITSlaveCplt+0x196>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	e004      	b.n	800c304 <I2C_ITSlaveCplt+0x1a0>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	b29b      	uxth	r3, r3
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	8553      	strh	r3, [r2, #42]	; 0x2a
 800c308:	e0a3      	b.n	800c452 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	0bdb      	lsrs	r3, r3, #15
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 809d 	beq.w	800c452 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c326:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 8090 	beq.w	800c452 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a32      	ldr	r2, [pc, #200]	; (800c404 <I2C_ITSlaveCplt+0x2a0>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d059      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a30      	ldr	r2, [pc, #192]	; (800c408 <I2C_ITSlaveCplt+0x2a4>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d053      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a2e      	ldr	r2, [pc, #184]	; (800c40c <I2C_ITSlaveCplt+0x2a8>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d04d      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a2c      	ldr	r2, [pc, #176]	; (800c410 <I2C_ITSlaveCplt+0x2ac>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d047      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a2a      	ldr	r2, [pc, #168]	; (800c414 <I2C_ITSlaveCplt+0x2b0>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d041      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a28      	ldr	r2, [pc, #160]	; (800c418 <I2C_ITSlaveCplt+0x2b4>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d03b      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a26      	ldr	r2, [pc, #152]	; (800c41c <I2C_ITSlaveCplt+0x2b8>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d035      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a24      	ldr	r2, [pc, #144]	; (800c420 <I2C_ITSlaveCplt+0x2bc>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d02f      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a22      	ldr	r2, [pc, #136]	; (800c424 <I2C_ITSlaveCplt+0x2c0>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d029      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a20      	ldr	r2, [pc, #128]	; (800c428 <I2C_ITSlaveCplt+0x2c4>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d023      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a1e      	ldr	r2, [pc, #120]	; (800c42c <I2C_ITSlaveCplt+0x2c8>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d01d      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a1c      	ldr	r2, [pc, #112]	; (800c430 <I2C_ITSlaveCplt+0x2cc>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d017      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a1a      	ldr	r2, [pc, #104]	; (800c434 <I2C_ITSlaveCplt+0x2d0>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d011      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a18      	ldr	r2, [pc, #96]	; (800c438 <I2C_ITSlaveCplt+0x2d4>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d00b      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a16      	ldr	r2, [pc, #88]	; (800c43c <I2C_ITSlaveCplt+0x2d8>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d005      	beq.n	800c3f2 <I2C_ITSlaveCplt+0x28e>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a14      	ldr	r2, [pc, #80]	; (800c440 <I2C_ITSlaveCplt+0x2dc>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d128      	bne.n	800c444 <I2C_ITSlaveCplt+0x2e0>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	e027      	b.n	800c44e <I2C_ITSlaveCplt+0x2ea>
 800c3fe:	bf00      	nop
 800c400:	fe00e800 	.word	0xfe00e800
 800c404:	40020010 	.word	0x40020010
 800c408:	40020028 	.word	0x40020028
 800c40c:	40020040 	.word	0x40020040
 800c410:	40020058 	.word	0x40020058
 800c414:	40020070 	.word	0x40020070
 800c418:	40020088 	.word	0x40020088
 800c41c:	400200a0 	.word	0x400200a0
 800c420:	400200b8 	.word	0x400200b8
 800c424:	40020410 	.word	0x40020410
 800c428:	40020428 	.word	0x40020428
 800c42c:	40020440 	.word	0x40020440
 800c430:	40020458 	.word	0x40020458
 800c434:	40020470 	.word	0x40020470
 800c438:	40020488 	.word	0x40020488
 800c43c:	400204a0 	.word	0x400204a0
 800c440:	400204b8 	.word	0x400204b8
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	089b      	lsrs	r3, r3, #2
 800c456:	f003 0301 	and.w	r3, r3, #1
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d020      	beq.n	800c4a0 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f023 0304 	bic.w	r3, r3, #4
 800c464:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c470:	b2d2      	uxtb	r2, r2
 800c472:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	1c5a      	adds	r2, r3, #1
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00c      	beq.n	800c4a0 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c48a:	3b01      	subs	r3, #1
 800c48c:	b29a      	uxth	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c496:	b29b      	uxth	r3, r3
 800c498:	3b01      	subs	r3, #1
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d005      	beq.n	800c4b6 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ae:	f043 0204 	orr.w	r2, r3, #4
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	091b      	lsrs	r3, r3, #4
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d04a      	beq.n	800c558 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	091b      	lsrs	r3, r3, #4
 800c4c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d044      	beq.n	800c558 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d128      	bne.n	800c52a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	2b28      	cmp	r3, #40	; 0x28
 800c4e2:	d108      	bne.n	800c4f6 <I2C_ITSlaveCplt+0x392>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ea:	d104      	bne.n	800c4f6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c4ec:	6979      	ldr	r1, [r7, #20]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 f892 	bl	800c618 <I2C_ITListenCplt>
 800c4f4:	e030      	b.n	800c558 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b29      	cmp	r3, #41	; 0x29
 800c500:	d10e      	bne.n	800c520 <I2C_ITSlaveCplt+0x3bc>
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c508:	d00a      	beq.n	800c520 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2210      	movs	r2, #16
 800c510:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f9ed 	bl	800c8f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7ff fcfa 	bl	800bf12 <I2C_ITSlaveSeqCplt>
 800c51e:	e01b      	b.n	800c558 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2210      	movs	r2, #16
 800c526:	61da      	str	r2, [r3, #28]
 800c528:	e016      	b.n	800c558 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2210      	movs	r2, #16
 800c530:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c536:	f043 0204 	orr.w	r2, r3, #4
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d003      	beq.n	800c54c <I2C_ITSlaveCplt+0x3e8>
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c54a:	d105      	bne.n	800c558 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 f8b6 	bl	800c6c4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d010      	beq.n	800c590 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f8a5 	bl	800c6c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c580:	b2db      	uxtb	r3, r3
 800c582:	2b28      	cmp	r3, #40	; 0x28
 800c584:	d141      	bne.n	800c60a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c586:	6979      	ldr	r1, [r7, #20]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f845 	bl	800c618 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c58e:	e03c      	b.n	800c60a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c598:	d014      	beq.n	800c5c4 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff fcb9 	bl	800bf12 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a1c      	ldr	r2, [pc, #112]	; (800c614 <I2C_ITSlaveCplt+0x4b0>)
 800c5a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2220      	movs	r2, #32
 800c5aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7fe fd68 	bl	800b092 <HAL_I2C_ListenCpltCallback>
}
 800c5c2:	e022      	b.n	800c60a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b22      	cmp	r3, #34	; 0x22
 800c5ce:	d10e      	bne.n	800c5ee <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2220      	movs	r2, #32
 800c5d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7fe fd3b 	bl	800b062 <HAL_I2C_SlaveRxCpltCallback>
}
 800c5ec:	e00d      	b.n	800c60a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2220      	movs	r2, #32
 800c5f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7fe fd22 	bl	800b04e <HAL_I2C_SlaveTxCpltCallback>
}
 800c60a:	bf00      	nop
 800c60c:	3718      	adds	r7, #24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	ffff0000 	.word	0xffff0000

0800c618 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a26      	ldr	r2, [pc, #152]	; (800c6c0 <I2C_ITListenCplt+0xa8>)
 800c626:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2220      	movs	r2, #32
 800c632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	089b      	lsrs	r3, r3, #2
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d022      	beq.n	800c696 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65a:	b2d2      	uxtb	r2, r2
 800c65c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d012      	beq.n	800c696 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c674:	3b01      	subs	r3, #1
 800c676:	b29a      	uxth	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c680:	b29b      	uxth	r3, r3
 800c682:	3b01      	subs	r3, #1
 800c684:	b29a      	uxth	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c68e:	f043 0204 	orr.w	r2, r3, #4
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c696:	f248 0103 	movw	r1, #32771	; 0x8003
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fbf2 	bl	800ce84 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2210      	movs	r2, #16
 800c6a6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7fe fcee 	bl	800b092 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c6b6:	bf00      	nop
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	ffff0000 	.word	0xffff0000

0800c6c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6d4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a6d      	ldr	r2, [pc, #436]	; (800c898 <I2C_ITError+0x1d4>)
 800c6e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
 800c6f8:	2b28      	cmp	r3, #40	; 0x28
 800c6fa:	d005      	beq.n	800c708 <I2C_ITError+0x44>
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	2b29      	cmp	r3, #41	; 0x29
 800c700:	d002      	beq.n	800c708 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	2b2a      	cmp	r3, #42	; 0x2a
 800c706:	d10b      	bne.n	800c720 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c708:	2103      	movs	r1, #3
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 fbba 	bl	800ce84 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2228      	movs	r2, #40	; 0x28
 800c714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a60      	ldr	r2, [pc, #384]	; (800c89c <I2C_ITError+0x1d8>)
 800c71c:	635a      	str	r2, [r3, #52]	; 0x34
 800c71e:	e030      	b.n	800c782 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c720:	f248 0103 	movw	r1, #32771	; 0x8003
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fbad 	bl	800ce84 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f8e1 	bl	800c8f2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b60      	cmp	r3, #96	; 0x60
 800c73a:	d01f      	beq.n	800c77c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2220      	movs	r2, #32
 800c740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	f003 0320 	and.w	r3, r3, #32
 800c74e:	2b20      	cmp	r3, #32
 800c750:	d114      	bne.n	800c77c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	f003 0310 	and.w	r3, r3, #16
 800c75c:	2b10      	cmp	r3, #16
 800c75e:	d109      	bne.n	800c774 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2210      	movs	r2, #16
 800c766:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c76c:	f043 0204 	orr.w	r2, r3, #4
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2220      	movs	r2, #32
 800c77a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c786:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d039      	beq.n	800c804 <I2C_ITError+0x140>
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	2b11      	cmp	r3, #17
 800c794:	d002      	beq.n	800c79c <I2C_ITError+0xd8>
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2b21      	cmp	r3, #33	; 0x21
 800c79a:	d133      	bne.n	800c804 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7aa:	d107      	bne.n	800c7bc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c7ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fd f83d 	bl	8009840 <HAL_DMA_GetState>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d017      	beq.n	800c7fc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d0:	4a33      	ldr	r2, [pc, #204]	; (800c8a0 <I2C_ITError+0x1dc>)
 800c7d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fb febd 	bl	8008560 <HAL_DMA_Abort_IT>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d04d      	beq.n	800c888 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c7fa:	e045      	b.n	800c888 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f851 	bl	800c8a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c802:	e041      	b.n	800c888 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d039      	beq.n	800c880 <I2C_ITError+0x1bc>
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	2b12      	cmp	r3, #18
 800c810:	d002      	beq.n	800c818 <I2C_ITError+0x154>
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	2b22      	cmp	r3, #34	; 0x22
 800c816:	d133      	bne.n	800c880 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c826:	d107      	bne.n	800c838 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c836:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fc ffff 	bl	8009840 <HAL_DMA_GetState>
 800c842:	4603      	mov	r3, r0
 800c844:	2b01      	cmp	r3, #1
 800c846:	d017      	beq.n	800c878 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84c:	4a14      	ldr	r2, [pc, #80]	; (800c8a0 <I2C_ITError+0x1dc>)
 800c84e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fb fe7f 	bl	8008560 <HAL_DMA_Abort_IT>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d011      	beq.n	800c88c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c872:	4610      	mov	r0, r2
 800c874:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c876:	e009      	b.n	800c88c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 f813 	bl	800c8a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c87e:	e005      	b.n	800c88c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f80f 	bl	800c8a4 <I2C_TreatErrorCallback>
  }
}
 800c886:	e002      	b.n	800c88e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c888:	bf00      	nop
 800c88a:	e000      	b.n	800c88e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c88c:	bf00      	nop
}
 800c88e:	bf00      	nop
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	ffff0000 	.word	0xffff0000
 800c89c:	0800b37b 	.word	0x0800b37b
 800c8a0:	0800ccdd 	.word	0x0800ccdd

0800c8a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	2b60      	cmp	r3, #96	; 0x60
 800c8b6:	d10e      	bne.n	800c8d6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2220      	movs	r2, #32
 800c8bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7fe fc07 	bl	800b0e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c8d4:	e009      	b.n	800c8ea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7fe fbf2 	bl	800b0ce <HAL_I2C_ErrorCallback>
}
 800c8ea:	bf00      	nop
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	b083      	sub	sp, #12
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	f003 0302 	and.w	r3, r3, #2
 800c904:	2b02      	cmp	r3, #2
 800c906:	d103      	bne.n	800c910 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2200      	movs	r2, #0
 800c90e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	f003 0301 	and.w	r3, r3, #1
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d007      	beq.n	800c92e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	699a      	ldr	r2, [r3, #24]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f042 0201 	orr.w	r2, r2, #1
 800c92c:	619a      	str	r2, [r3, #24]
  }
}
 800c92e:	bf00      	nop
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c946:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c956:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d104      	bne.n	800c96c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c962:	2120      	movs	r1, #32
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 fa09 	bl	800cd7c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c96a:	e02d      	b.n	800c9c8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c974:	441a      	add	r2, r3
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c97e:	b29b      	uxth	r3, r3
 800c980:	2bff      	cmp	r3, #255	; 0xff
 800c982:	d903      	bls.n	800c98c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	22ff      	movs	r2, #255	; 0xff
 800c988:	851a      	strh	r2, [r3, #40]	; 0x28
 800c98a:	e004      	b.n	800c996 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c990:	b29a      	uxth	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99e:	4619      	mov	r1, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	3328      	adds	r3, #40	; 0x28
 800c9a6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c9ac:	f7fb f850 	bl	8007a50 <HAL_DMA_Start_IT>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d004      	beq.n	800c9c0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c9b6:	2110      	movs	r1, #16
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f7ff fe83 	bl	800c6c4 <I2C_ITError>
}
 800c9be:	e003      	b.n	800c9c8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c9c0:	2140      	movs	r1, #64	; 0x40
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 f9da 	bl	800cd7c <I2C_Enable_IRQ>
}
 800c9c8:	bf00      	nop
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9dc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c9ec:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d104      	bne.n	800ca02 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c9f8:	2120      	movs	r1, #32
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f000 f9be 	bl	800cd7c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ca00:	e02d      	b.n	800ca5e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ca0a:	441a      	add	r2, r3
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	2bff      	cmp	r3, #255	; 0xff
 800ca18:	d903      	bls.n	800ca22 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	22ff      	movs	r2, #255	; 0xff
 800ca1e:	851a      	strh	r2, [r3, #40]	; 0x28
 800ca20:	e004      	b.n	800ca2c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca26:	b29a      	uxth	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	3324      	adds	r3, #36	; 0x24
 800ca36:	4619      	mov	r1, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ca42:	f7fb f805 	bl	8007a50 <HAL_DMA_Start_IT>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d004      	beq.n	800ca56 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ca4c:	2110      	movs	r1, #16
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f7ff fe38 	bl	800c6c4 <I2C_ITError>
}
 800ca54:	e003      	b.n	800ca5e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ca56:	2140      	movs	r1, #64	; 0x40
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f000 f98f 	bl	800cd7c <I2C_Enable_IRQ>
}
 800ca5e:	bf00      	nop
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
	...

0800ca68 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800ca70:	2300      	movs	r3, #0
 800ca72:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca78:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d076      	beq.n	800cb70 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a71      	ldr	r2, [pc, #452]	; (800cc50 <I2C_DMAError+0x1e8>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d059      	beq.n	800cb42 <I2C_DMAError+0xda>
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a6f      	ldr	r2, [pc, #444]	; (800cc54 <I2C_DMAError+0x1ec>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d053      	beq.n	800cb42 <I2C_DMAError+0xda>
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a6d      	ldr	r2, [pc, #436]	; (800cc58 <I2C_DMAError+0x1f0>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d04d      	beq.n	800cb42 <I2C_DMAError+0xda>
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a6b      	ldr	r2, [pc, #428]	; (800cc5c <I2C_DMAError+0x1f4>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d047      	beq.n	800cb42 <I2C_DMAError+0xda>
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a69      	ldr	r2, [pc, #420]	; (800cc60 <I2C_DMAError+0x1f8>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d041      	beq.n	800cb42 <I2C_DMAError+0xda>
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a67      	ldr	r2, [pc, #412]	; (800cc64 <I2C_DMAError+0x1fc>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d03b      	beq.n	800cb42 <I2C_DMAError+0xda>
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a65      	ldr	r2, [pc, #404]	; (800cc68 <I2C_DMAError+0x200>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d035      	beq.n	800cb42 <I2C_DMAError+0xda>
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a63      	ldr	r2, [pc, #396]	; (800cc6c <I2C_DMAError+0x204>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d02f      	beq.n	800cb42 <I2C_DMAError+0xda>
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a61      	ldr	r2, [pc, #388]	; (800cc70 <I2C_DMAError+0x208>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d029      	beq.n	800cb42 <I2C_DMAError+0xda>
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a5f      	ldr	r2, [pc, #380]	; (800cc74 <I2C_DMAError+0x20c>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d023      	beq.n	800cb42 <I2C_DMAError+0xda>
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a5d      	ldr	r2, [pc, #372]	; (800cc78 <I2C_DMAError+0x210>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d01d      	beq.n	800cb42 <I2C_DMAError+0xda>
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a5b      	ldr	r2, [pc, #364]	; (800cc7c <I2C_DMAError+0x214>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d017      	beq.n	800cb42 <I2C_DMAError+0xda>
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a59      	ldr	r2, [pc, #356]	; (800cc80 <I2C_DMAError+0x218>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d011      	beq.n	800cb42 <I2C_DMAError+0xda>
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a57      	ldr	r2, [pc, #348]	; (800cc84 <I2C_DMAError+0x21c>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d00b      	beq.n	800cb42 <I2C_DMAError+0xda>
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a55      	ldr	r2, [pc, #340]	; (800cc88 <I2C_DMAError+0x220>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d005      	beq.n	800cb42 <I2C_DMAError+0xda>
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a53      	ldr	r2, [pc, #332]	; (800cc8c <I2C_DMAError+0x224>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d109      	bne.n	800cb56 <I2C_DMAError+0xee>
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	bf0c      	ite	eq
 800cb4e:	2301      	moveq	r3, #1
 800cb50:	2300      	movne	r3, #0
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	e008      	b.n	800cb68 <I2C_DMAError+0x100>
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	bf0c      	ite	eq
 800cb62:	2301      	moveq	r3, #1
 800cb64:	2300      	movne	r3, #0
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 8098 	beq.w	800ccaa <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a33      	ldr	r2, [pc, #204]	; (800cc50 <I2C_DMAError+0x1e8>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d059      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a31      	ldr	r2, [pc, #196]	; (800cc54 <I2C_DMAError+0x1ec>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d053      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a2f      	ldr	r2, [pc, #188]	; (800cc58 <I2C_DMAError+0x1f0>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d04d      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a2d      	ldr	r2, [pc, #180]	; (800cc5c <I2C_DMAError+0x1f4>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d047      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a2b      	ldr	r2, [pc, #172]	; (800cc60 <I2C_DMAError+0x1f8>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d041      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a29      	ldr	r2, [pc, #164]	; (800cc64 <I2C_DMAError+0x1fc>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d03b      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a27      	ldr	r2, [pc, #156]	; (800cc68 <I2C_DMAError+0x200>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d035      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a25      	ldr	r2, [pc, #148]	; (800cc6c <I2C_DMAError+0x204>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d02f      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a23      	ldr	r2, [pc, #140]	; (800cc70 <I2C_DMAError+0x208>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d029      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a21      	ldr	r2, [pc, #132]	; (800cc74 <I2C_DMAError+0x20c>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d023      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a1f      	ldr	r2, [pc, #124]	; (800cc78 <I2C_DMAError+0x210>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d01d      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a1d      	ldr	r2, [pc, #116]	; (800cc7c <I2C_DMAError+0x214>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d017      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a1b      	ldr	r2, [pc, #108]	; (800cc80 <I2C_DMAError+0x218>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d011      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a19      	ldr	r2, [pc, #100]	; (800cc84 <I2C_DMAError+0x21c>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d00b      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a17      	ldr	r2, [pc, #92]	; (800cc88 <I2C_DMAError+0x220>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d005      	beq.n	800cc3a <I2C_DMAError+0x1d2>
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a15      	ldr	r2, [pc, #84]	; (800cc8c <I2C_DMAError+0x224>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d12a      	bne.n	800cc90 <I2C_DMAError+0x228>
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	bf0c      	ite	eq
 800cc46:	2301      	moveq	r3, #1
 800cc48:	2300      	movne	r3, #0
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	e029      	b.n	800cca2 <I2C_DMAError+0x23a>
 800cc4e:	bf00      	nop
 800cc50:	40020010 	.word	0x40020010
 800cc54:	40020028 	.word	0x40020028
 800cc58:	40020040 	.word	0x40020040
 800cc5c:	40020058 	.word	0x40020058
 800cc60:	40020070 	.word	0x40020070
 800cc64:	40020088 	.word	0x40020088
 800cc68:	400200a0 	.word	0x400200a0
 800cc6c:	400200b8 	.word	0x400200b8
 800cc70:	40020410 	.word	0x40020410
 800cc74:	40020428 	.word	0x40020428
 800cc78:	40020440 	.word	0x40020440
 800cc7c:	40020458 	.word	0x40020458
 800cc80:	40020470 	.word	0x40020470
 800cc84:	40020488 	.word	0x40020488
 800cc88:	400204a0 	.word	0x400204a0
 800cc8c:	400204b8 	.word	0x400204b8
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	bf0c      	ite	eq
 800cc9c:	2301      	moveq	r3, #1
 800cc9e:	2300      	movne	r3, #0
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800cca6:	2301      	movs	r3, #1
 800cca8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7fc fdd6 	bl	800985c <HAL_DMA_GetError>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b02      	cmp	r3, #2
 800ccb4:	d00e      	beq.n	800ccd4 <I2C_DMAError+0x26c>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00b      	beq.n	800ccd4 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ccca:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800cccc:	2110      	movs	r1, #16
 800ccce:	68b8      	ldr	r0, [r7, #8]
 800ccd0:	f7ff fcf8 	bl	800c6c4 <I2C_ITError>
  }
}
 800ccd4:	bf00      	nop
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d003      	beq.n	800cd0a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd06:	2200      	movs	r2, #0
 800cd08:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f7ff fdca 	bl	800c8a4 <I2C_TreatErrorCallback>
}
 800cd10:	bf00      	nop
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	607b      	str	r3, [r7, #4]
 800cd22:	460b      	mov	r3, r1
 800cd24:	817b      	strh	r3, [r7, #10]
 800cd26:	4613      	mov	r3, r2
 800cd28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd2a:	897b      	ldrh	r3, [r7, #10]
 800cd2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cd30:	7a7b      	ldrb	r3, [r7, #9]
 800cd32:	041b      	lsls	r3, r3, #16
 800cd34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cd3e:	6a3b      	ldr	r3, [r7, #32]
 800cd40:	4313      	orrs	r3, r2
 800cd42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	6a3b      	ldr	r3, [r7, #32]
 800cd50:	0d5b      	lsrs	r3, r3, #21
 800cd52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800cd56:	4b08      	ldr	r3, [pc, #32]	; (800cd78 <I2C_TransferConfig+0x60>)
 800cd58:	430b      	orrs	r3, r1
 800cd5a:	43db      	mvns	r3, r3
 800cd5c:	ea02 0103 	and.w	r1, r2, r3
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	697a      	ldr	r2, [r7, #20]
 800cd66:	430a      	orrs	r2, r1
 800cd68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cd6a:	bf00      	nop
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	03ff63ff 	.word	0x03ff63ff

0800cd7c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd90:	4a39      	ldr	r2, [pc, #228]	; (800ce78 <I2C_Enable_IRQ+0xfc>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d032      	beq.n	800cdfc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800cd9a:	4a38      	ldr	r2, [pc, #224]	; (800ce7c <I2C_Enable_IRQ+0x100>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d02d      	beq.n	800cdfc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800cda4:	4a36      	ldr	r2, [pc, #216]	; (800ce80 <I2C_Enable_IRQ+0x104>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d028      	beq.n	800cdfc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cdaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	da03      	bge.n	800cdba <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cdb8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cdba:	887b      	ldrh	r3, [r7, #2]
 800cdbc:	f003 0301 	and.w	r3, r3, #1
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d003      	beq.n	800cdcc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800cdca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cdcc:	887b      	ldrh	r3, [r7, #2]
 800cdce:	f003 0302 	and.w	r3, r3, #2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d003      	beq.n	800cdde <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800cddc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cdde:	887b      	ldrh	r3, [r7, #2]
 800cde0:	2b10      	cmp	r3, #16
 800cde2:	d103      	bne.n	800cdec <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cdea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cdec:	887b      	ldrh	r3, [r7, #2]
 800cdee:	2b20      	cmp	r3, #32
 800cdf0:	d133      	bne.n	800ce5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f043 0320 	orr.w	r3, r3, #32
 800cdf8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cdfa:	e02e      	b.n	800ce5a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cdfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	da03      	bge.n	800ce0c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ce0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ce0c:	887b      	ldrh	r3, [r7, #2]
 800ce0e:	f003 0301 	and.w	r3, r3, #1
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d003      	beq.n	800ce1e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ce1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ce1e:	887b      	ldrh	r3, [r7, #2]
 800ce20:	f003 0302 	and.w	r3, r3, #2
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d003      	beq.n	800ce30 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ce2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ce30:	887b      	ldrh	r3, [r7, #2]
 800ce32:	2b10      	cmp	r3, #16
 800ce34:	d103      	bne.n	800ce3e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ce3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ce3e:	887b      	ldrh	r3, [r7, #2]
 800ce40:	2b20      	cmp	r3, #32
 800ce42:	d103      	bne.n	800ce4c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ce4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ce4c:	887b      	ldrh	r3, [r7, #2]
 800ce4e:	2b40      	cmp	r3, #64	; 0x40
 800ce50:	d103      	bne.n	800ce5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce58:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	6819      	ldr	r1, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	430a      	orrs	r2, r1
 800ce68:	601a      	str	r2, [r3, #0]
}
 800ce6a:	bf00      	nop
 800ce6c:	3714      	adds	r7, #20
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	0800b583 	.word	0x0800b583
 800ce7c:	0800b9c9 	.word	0x0800b9c9
 800ce80:	0800b769 	.word	0x0800b769

0800ce84 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ce90:	2300      	movs	r3, #0
 800ce92:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ce94:	887b      	ldrh	r3, [r7, #2]
 800ce96:	f003 0301 	and.w	r3, r3, #1
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00f      	beq.n	800cebe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800cea4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ceb2:	2b28      	cmp	r3, #40	; 0x28
 800ceb4:	d003      	beq.n	800cebe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cebc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cebe:	887b      	ldrh	r3, [r7, #2]
 800cec0:	f003 0302 	and.w	r3, r3, #2
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00f      	beq.n	800cee8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800cece:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cedc:	2b28      	cmp	r3, #40	; 0x28
 800cede:	d003      	beq.n	800cee8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cee6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cee8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	da03      	bge.n	800cef8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cef6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cef8:	887b      	ldrh	r3, [r7, #2]
 800cefa:	2b10      	cmp	r3, #16
 800cefc:	d103      	bne.n	800cf06 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cf04:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cf06:	887b      	ldrh	r3, [r7, #2]
 800cf08:	2b20      	cmp	r3, #32
 800cf0a:	d103      	bne.n	800cf14 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f043 0320 	orr.w	r3, r3, #32
 800cf12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800cf14:	887b      	ldrh	r3, [r7, #2]
 800cf16:	2b40      	cmp	r3, #64	; 0x40
 800cf18:	d103      	bne.n	800cf22 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf20:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6819      	ldr	r1, [r3, #0]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	43da      	mvns	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	400a      	ands	r2, r1
 800cf32:	601a      	str	r2, [r3, #0]
}
 800cf34:	bf00      	nop
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	2b20      	cmp	r3, #32
 800cf54:	d138      	bne.n	800cfc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d101      	bne.n	800cf64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cf60:	2302      	movs	r3, #2
 800cf62:	e032      	b.n	800cfca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2224      	movs	r2, #36	; 0x24
 800cf70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f022 0201 	bic.w	r2, r2, #1
 800cf82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cf92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6819      	ldr	r1, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	683a      	ldr	r2, [r7, #0]
 800cfa0:	430a      	orrs	r2, r1
 800cfa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f042 0201 	orr.w	r2, r2, #1
 800cfb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2220      	movs	r2, #32
 800cfb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	e000      	b.n	800cfca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cfc8:	2302      	movs	r3, #2
  }
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr

0800cfd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cfd6:	b480      	push	{r7}
 800cfd8:	b085      	sub	sp, #20
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
 800cfde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	2b20      	cmp	r3, #32
 800cfea:	d139      	bne.n	800d060 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d101      	bne.n	800cffa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cff6:	2302      	movs	r3, #2
 800cff8:	e033      	b.n	800d062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2224      	movs	r2, #36	; 0x24
 800d006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f022 0201 	bic.w	r2, r2, #1
 800d018:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d028:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	021b      	lsls	r3, r3, #8
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	4313      	orrs	r3, r2
 800d032:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f042 0201 	orr.w	r2, r2, #1
 800d04a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2220      	movs	r2, #32
 800d050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d05c:	2300      	movs	r3, #0
 800d05e:	e000      	b.n	800d062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d060:	2302      	movs	r3, #2
  }
}
 800d062:	4618      	mov	r0, r3
 800d064:	3714      	adds	r7, #20
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
	...

0800d070 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d078:	4b0d      	ldr	r3, [pc, #52]	; (800d0b0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d07a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d07e:	4a0c      	ldr	r2, [pc, #48]	; (800d0b0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d080:	f043 0302 	orr.w	r3, r3, #2
 800d084:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d088:	4b09      	ldr	r3, [pc, #36]	; (800d0b0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d08a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d08e:	f003 0302 	and.w	r3, r3, #2
 800d092:	60fb      	str	r3, [r7, #12]
 800d094:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800d096:	4b07      	ldr	r3, [pc, #28]	; (800d0b4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d098:	685a      	ldr	r2, [r3, #4]
 800d09a:	4906      	ldr	r1, [pc, #24]	; (800d0b4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	604b      	str	r3, [r1, #4]
}
 800d0a2:	bf00      	nop
 800d0a4:	3714      	adds	r7, #20
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	58024400 	.word	0x58024400
 800d0b4:	58000400 	.word	0x58000400

0800d0b8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d0c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800d0e4:	4b18      	ldr	r3, [pc, #96]	; (800d148 <HAL_PWR_EnterSTOPMode+0x70>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f023 0201 	bic.w	r2, r3, #1
 800d0ec:	4916      	ldr	r1, [pc, #88]	; (800d148 <HAL_PWR_EnterSTOPMode+0x70>)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800d0f4:	4b14      	ldr	r3, [pc, #80]	; (800d148 <HAL_PWR_EnterSTOPMode+0x70>)
 800d0f6:	691b      	ldr	r3, [r3, #16]
 800d0f8:	4a13      	ldr	r2, [pc, #76]	; (800d148 <HAL_PWR_EnterSTOPMode+0x70>)
 800d0fa:	f023 0305 	bic.w	r3, r3, #5
 800d0fe:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800d100:	4b11      	ldr	r3, [pc, #68]	; (800d148 <HAL_PWR_EnterSTOPMode+0x70>)
 800d102:	691b      	ldr	r3, [r3, #16]
 800d104:	4a10      	ldr	r2, [pc, #64]	; (800d148 <HAL_PWR_EnterSTOPMode+0x70>)
 800d106:	f023 0302 	bic.w	r3, r3, #2
 800d10a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d10c:	4b0f      	ldr	r3, [pc, #60]	; (800d14c <HAL_PWR_EnterSTOPMode+0x74>)
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	4a0e      	ldr	r2, [pc, #56]	; (800d14c <HAL_PWR_EnterSTOPMode+0x74>)
 800d112:	f043 0304 	orr.w	r3, r3, #4
 800d116:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800d118:	f3bf 8f4f 	dsb	sy
}
 800d11c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d11e:	f3bf 8f6f 	isb	sy
}
 800d122:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800d124:	78fb      	ldrb	r3, [r7, #3]
 800d126:	2b01      	cmp	r3, #1
 800d128:	d101      	bne.n	800d12e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800d12a:	bf30      	wfi
 800d12c:	e000      	b.n	800d130 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800d12e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800d130:	4b06      	ldr	r3, [pc, #24]	; (800d14c <HAL_PWR_EnterSTOPMode+0x74>)
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	4a05      	ldr	r2, [pc, #20]	; (800d14c <HAL_PWR_EnterSTOPMode+0x74>)
 800d136:	f023 0304 	bic.w	r3, r3, #4
 800d13a:	6113      	str	r3, [r2, #16]
}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	58024800 	.word	0x58024800
 800d14c:	e000ed00 	.word	0xe000ed00

0800d150 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d158:	4b19      	ldr	r3, [pc, #100]	; (800d1c0 <HAL_PWREx_ConfigSupply+0x70>)
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	f003 0304 	and.w	r3, r3, #4
 800d160:	2b04      	cmp	r3, #4
 800d162:	d00a      	beq.n	800d17a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d164:	4b16      	ldr	r3, [pc, #88]	; (800d1c0 <HAL_PWREx_ConfigSupply+0x70>)
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	f003 0307 	and.w	r3, r3, #7
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d001      	beq.n	800d176 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e01f      	b.n	800d1b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	e01d      	b.n	800d1b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d17a:	4b11      	ldr	r3, [pc, #68]	; (800d1c0 <HAL_PWREx_ConfigSupply+0x70>)
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	f023 0207 	bic.w	r2, r3, #7
 800d182:	490f      	ldr	r1, [pc, #60]	; (800d1c0 <HAL_PWREx_ConfigSupply+0x70>)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4313      	orrs	r3, r2
 800d188:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d18a:	f7f7 ffdd 	bl	8005148 <HAL_GetTick>
 800d18e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d190:	e009      	b.n	800d1a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d192:	f7f7 ffd9 	bl	8005148 <HAL_GetTick>
 800d196:	4602      	mov	r2, r0
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1a0:	d901      	bls.n	800d1a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e007      	b.n	800d1b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d1a6:	4b06      	ldr	r3, [pc, #24]	; (800d1c0 <HAL_PWREx_ConfigSupply+0x70>)
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d1ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1b2:	d1ee      	bne.n	800d192 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d1b4:	2300      	movs	r3, #0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	58024800 	.word	0x58024800

0800d1c4 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init(RAMECC_HandleTypeDef *hramecc)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d101      	bne.n	800d1d6 <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e030      	b.n	800d238 <HAL_RAMECC_Init+0x74>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2202      	movs	r2, #2
 800d1da:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f022 0220 	bic.w	r2, r2, #32
 800d1ea:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	6812      	ldr	r2, [r2, #0]
 800d1fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d1fe:	f023 030f 	bic.w	r3, r3, #15
 800d202:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f022 021c 	bic.w	r2, r2, #28
 800d212:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	685a      	ldr	r2, [r3, #4]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f022 0207 	bic.w	r2, r2, #7
 800d222:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2200      	movs	r2, #0
 800d228:	609a      	str	r2, [r3, #8]

  /* Initialise the RAMECC error detected code */
  hramecc->RAMECCErrorCode = HAL_RAMECC_NO_ERROR;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2200      	movs	r2, #0
 800d22e:	60da      	str	r2, [r3, #12]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <HAL_RAMECC_StartMonitor>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_StartMonitor(RAMECC_HandleTypeDef *hramecc)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	791b      	ldrb	r3, [r3, #4]
 800d250:	b2db      	uxtb	r3, r3
 800d252:	2b01      	cmp	r3, #1
 800d254:	d10f      	bne.n	800d276 <HAL_RAMECC_StartMonitor+0x32>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2202      	movs	r2, #2
 800d25a:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC monitor */
    hramecc->Instance->CR |= RAMECC_CR_ECCELEN;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f042 0220 	orr.w	r2, r2, #32
 800d26a:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 800d272:	2300      	movs	r3, #0
 800d274:	e003      	b.n	800d27e <HAL_RAMECC_StartMonitor+0x3a>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2202      	movs	r2, #2
 800d27a:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
}
 800d27e:	4618      	mov	r0, r3
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
	...

0800d28c <HAL_RAMECC_EnableNotification>:
  *                        specified RAMECC Monitor.
  * @param  Notifications  Select the notification.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_EnableNotification(RAMECC_HandleTypeDef *hramecc, uint32_t Notifications)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));
  assert_param (IS_RAMECC_INTERRUPT (Notifications));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	791b      	ldrb	r3, [r3, #4]
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d134      	bne.n	800d30a <HAL_RAMECC_EnableNotification+0x7e>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC interrupts */
    __HAL_RAMECC_ENABLE_IT (hramecc, Notifications);
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	4a1d      	ldr	r2, [pc, #116]	; (800d320 <HAL_RAMECC_EnableNotification+0x94>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d00f      	beq.n	800d2ce <HAL_RAMECC_EnableNotification+0x42>
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	4a1c      	ldr	r2, [pc, #112]	; (800d324 <HAL_RAMECC_EnableNotification+0x98>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d00b      	beq.n	800d2ce <HAL_RAMECC_EnableNotification+0x42>
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	4a1b      	ldr	r2, [pc, #108]	; (800d328 <HAL_RAMECC_EnableNotification+0x9c>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d007      	beq.n	800d2ce <HAL_RAMECC_EnableNotification+0x42>
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	4a1a      	ldr	r2, [pc, #104]	; (800d32c <HAL_RAMECC_EnableNotification+0xa0>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d003      	beq.n	800d2ce <HAL_RAMECC_EnableNotification+0x42>
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	4a19      	ldr	r2, [pc, #100]	; (800d330 <HAL_RAMECC_EnableNotification+0xa4>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d10e      	bne.n	800d2ec <HAL_RAMECC_EnableNotification+0x60>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2de:	6879      	ldr	r1, [r7, #4]
 800d2e0:	6809      	ldr	r1, [r1, #0]
 800d2e2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	600b      	str	r3, [r1, #0]
 800d2ea:	e009      	b.n	800d300 <HAL_RAMECC_EnableNotification+0x74>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6819      	ldr	r1, [r3, #0]
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	430a      	orrs	r2, r1
 800d2fe:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2201      	movs	r2, #1
 800d304:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	e003      	b.n	800d312 <HAL_RAMECC_EnableNotification+0x86>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2202      	movs	r2, #2
 800d30e:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
}
 800d312:	4618      	mov	r0, r3
 800d314:	370c      	adds	r7, #12
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	10000001 	.word	0x10000001
 800d324:	10000002 	.word	0x10000002
 800d328:	10000004 	.word	0x10000004
 800d32c:	10000008 	.word	0x10000008
 800d330:	1000000f 	.word	0x1000000f

0800d334 <HAL_RAMECC_IRQHandler>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval None.
  */
void HAL_RAMECC_IRQHandler(RAMECC_HandleTypeDef *hramecc)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  uint32_t ier_reg = ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	617b      	str	r3, [r7, #20]
  uint32_t cr_reg = hramecc->Instance->CR >> 1U;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	085b      	lsrs	r3, r3, #1
 800d350:	613b      	str	r3, [r7, #16]
  uint32_t sr_reg = hramecc->Instance->SR;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	60fb      	str	r3, [r7, #12]

  /* Update global interrupt variables */
  if ((ier_reg & RAMECC_IER_GIE) == RAMECC_IER_GIE)
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f003 0301 	and.w	r3, r3, #1
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <HAL_RAMECC_IRQHandler+0x34>
  {
    ier_reg = RAMECC_IT_GLOBAL_ALL;
 800d364:	4b16      	ldr	r3, [pc, #88]	; (800d3c0 <HAL_RAMECC_IRQHandler+0x8c>)
 800d366:	617b      	str	r3, [r7, #20]
  }

  /* Store the ECC Single error detected */
  if ((sr_reg & RAMECC_SR_SEDCF) == RAMECC_SR_SEDCF)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d005      	beq.n	800d37e <HAL_RAMECC_IRQHandler+0x4a>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_SINGLEERROR_DETECTED;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	f043 0201 	orr.w	r2, r3, #1
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	60da      	str	r2, [r3, #12]
  }

  /* Store the ECC double error detected */
  if ((sr_reg & (RAMECC_SR_DEDF | RAMECC_SR_DEBWDF)) != 0U)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f003 0306 	and.w	r3, r3, #6
 800d384:	2b00      	cmp	r3, #0
 800d386:	d005      	beq.n	800d394 <HAL_RAMECC_IRQHandler+0x60>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_DOUBLEERROR_DETECTED;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	f043 0202 	orr.w	r2, r3, #2
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	60da      	str	r2, [r3, #12]
  }

  /* Clear active flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, (((ier_reg | cr_reg) & (sr_reg << 1U)) >> 1U));
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6859      	ldr	r1, [r3, #4]
 800d39a:	697a      	ldr	r2, [r7, #20]
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	431a      	orrs	r2, r3
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	4013      	ands	r3, r2
 800d3a6:	085b      	lsrs	r3, r3, #1
 800d3a8:	43da      	mvns	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	400a      	ands	r2, r1
 800d3b0:	605a      	str	r2, [r3, #4]
  {
    /* Error detection callback */
    hramecc->DetectErrorCallback(hramecc);
  }
#else
  HAL_RAMECC_DetectErrorCallback(hramecc);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7f5 ff56 	bl	8003264 <HAL_RAMECC_DetectErrorCallback>
#endif /* USE_HAL_RAMECC_REGISTER_CALLBACKS */
}
 800d3b8:	bf00      	nop
 800d3ba:	3718      	adds	r7, #24
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	1000000f 	.word	0x1000000f

0800d3c4 <HAL_RAMECC_GetRAMECCError>:
  *                         contains the configuration information for the
  *                         specified RAMECC instance.
  * @retval RAMECC error code detected.
  */
uint32_t HAL_RAMECC_GetRAMECCError(RAMECC_HandleTypeDef *hramecc)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /* Return the RAMECC error code detected*/
  return hramecc->RAMECCErrorCode;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68db      	ldr	r3, [r3, #12]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b08c      	sub	sp, #48	; 0x30
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d102      	bne.n	800d3f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	f000 bc48 	b.w	800dc80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 8088 	beq.w	800d50e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d3fe:	4b99      	ldr	r3, [pc, #612]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d406:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d408:	4b96      	ldr	r3, [pc, #600]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d40c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d410:	2b10      	cmp	r3, #16
 800d412:	d007      	beq.n	800d424 <HAL_RCC_OscConfig+0x48>
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	2b18      	cmp	r3, #24
 800d418:	d111      	bne.n	800d43e <HAL_RCC_OscConfig+0x62>
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	f003 0303 	and.w	r3, r3, #3
 800d420:	2b02      	cmp	r3, #2
 800d422:	d10c      	bne.n	800d43e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d424:	4b8f      	ldr	r3, [pc, #572]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d06d      	beq.n	800d50c <HAL_RCC_OscConfig+0x130>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d169      	bne.n	800d50c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d438:	2301      	movs	r3, #1
 800d43a:	f000 bc21 	b.w	800dc80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d446:	d106      	bne.n	800d456 <HAL_RCC_OscConfig+0x7a>
 800d448:	4b86      	ldr	r3, [pc, #536]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a85      	ldr	r2, [pc, #532]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d44e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d452:	6013      	str	r3, [r2, #0]
 800d454:	e02e      	b.n	800d4b4 <HAL_RCC_OscConfig+0xd8>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10c      	bne.n	800d478 <HAL_RCC_OscConfig+0x9c>
 800d45e:	4b81      	ldr	r3, [pc, #516]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4a80      	ldr	r2, [pc, #512]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	4b7e      	ldr	r3, [pc, #504]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a7d      	ldr	r2, [pc, #500]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d474:	6013      	str	r3, [r2, #0]
 800d476:	e01d      	b.n	800d4b4 <HAL_RCC_OscConfig+0xd8>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d480:	d10c      	bne.n	800d49c <HAL_RCC_OscConfig+0xc0>
 800d482:	4b78      	ldr	r3, [pc, #480]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a77      	ldr	r2, [pc, #476]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d48c:	6013      	str	r3, [r2, #0]
 800d48e:	4b75      	ldr	r3, [pc, #468]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a74      	ldr	r2, [pc, #464]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d498:	6013      	str	r3, [r2, #0]
 800d49a:	e00b      	b.n	800d4b4 <HAL_RCC_OscConfig+0xd8>
 800d49c:	4b71      	ldr	r3, [pc, #452]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a70      	ldr	r2, [pc, #448]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d4a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	4b6e      	ldr	r3, [pc, #440]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a6d      	ldr	r2, [pc, #436]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d4ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d4b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d013      	beq.n	800d4e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4bc:	f7f7 fe44 	bl	8005148 <HAL_GetTick>
 800d4c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d4c2:	e008      	b.n	800d4d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d4c4:	f7f7 fe40 	bl	8005148 <HAL_GetTick>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	2b64      	cmp	r3, #100	; 0x64
 800d4d0:	d901      	bls.n	800d4d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d4d2:	2303      	movs	r3, #3
 800d4d4:	e3d4      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d4d6:	4b63      	ldr	r3, [pc, #396]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d0f0      	beq.n	800d4c4 <HAL_RCC_OscConfig+0xe8>
 800d4e2:	e014      	b.n	800d50e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4e4:	f7f7 fe30 	bl	8005148 <HAL_GetTick>
 800d4e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d4ea:	e008      	b.n	800d4fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d4ec:	f7f7 fe2c 	bl	8005148 <HAL_GetTick>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	2b64      	cmp	r3, #100	; 0x64
 800d4f8:	d901      	bls.n	800d4fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	e3c0      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d4fe:	4b59      	ldr	r3, [pc, #356]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d506:	2b00      	cmp	r3, #0
 800d508:	d1f0      	bne.n	800d4ec <HAL_RCC_OscConfig+0x110>
 800d50a:	e000      	b.n	800d50e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d50c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f003 0302 	and.w	r3, r3, #2
 800d516:	2b00      	cmp	r3, #0
 800d518:	f000 80ca 	beq.w	800d6b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d51c:	4b51      	ldr	r3, [pc, #324]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d51e:	691b      	ldr	r3, [r3, #16]
 800d520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d524:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d526:	4b4f      	ldr	r3, [pc, #316]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d52a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d52c:	6a3b      	ldr	r3, [r7, #32]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d007      	beq.n	800d542 <HAL_RCC_OscConfig+0x166>
 800d532:	6a3b      	ldr	r3, [r7, #32]
 800d534:	2b18      	cmp	r3, #24
 800d536:	d156      	bne.n	800d5e6 <HAL_RCC_OscConfig+0x20a>
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	f003 0303 	and.w	r3, r3, #3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d151      	bne.n	800d5e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d542:	4b48      	ldr	r3, [pc, #288]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f003 0304 	and.w	r3, r3, #4
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d005      	beq.n	800d55a <HAL_RCC_OscConfig+0x17e>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d101      	bne.n	800d55a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d556:	2301      	movs	r3, #1
 800d558:	e392      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d55a:	4b42      	ldr	r3, [pc, #264]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f023 0219 	bic.w	r2, r3, #25
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	493f      	ldr	r1, [pc, #252]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d568:	4313      	orrs	r3, r2
 800d56a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d56c:	f7f7 fdec 	bl	8005148 <HAL_GetTick>
 800d570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d572:	e008      	b.n	800d586 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d574:	f7f7 fde8 	bl	8005148 <HAL_GetTick>
 800d578:	4602      	mov	r2, r0
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	2b02      	cmp	r3, #2
 800d580:	d901      	bls.n	800d586 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d582:	2303      	movs	r3, #3
 800d584:	e37c      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d586:	4b37      	ldr	r3, [pc, #220]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f003 0304 	and.w	r3, r3, #4
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d0f0      	beq.n	800d574 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d592:	f7f7 fde5 	bl	8005160 <HAL_GetREVID>
 800d596:	4603      	mov	r3, r0
 800d598:	f241 0203 	movw	r2, #4099	; 0x1003
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d817      	bhi.n	800d5d0 <HAL_RCC_OscConfig+0x1f4>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	2b40      	cmp	r3, #64	; 0x40
 800d5a6:	d108      	bne.n	800d5ba <HAL_RCC_OscConfig+0x1de>
 800d5a8:	4b2e      	ldr	r3, [pc, #184]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d5b0:	4a2c      	ldr	r2, [pc, #176]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d5b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d5b8:	e07a      	b.n	800d6b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d5ba:	4b2a      	ldr	r3, [pc, #168]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	691b      	ldr	r3, [r3, #16]
 800d5c6:	031b      	lsls	r3, r3, #12
 800d5c8:	4926      	ldr	r1, [pc, #152]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d5ce:	e06f      	b.n	800d6b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d5d0:	4b24      	ldr	r3, [pc, #144]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	061b      	lsls	r3, r3, #24
 800d5de:	4921      	ldr	r1, [pc, #132]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d5e4:	e064      	b.n	800d6b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d047      	beq.n	800d67e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d5ee:	4b1d      	ldr	r3, [pc, #116]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f023 0219 	bic.w	r2, r3, #25
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	491a      	ldr	r1, [pc, #104]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d600:	f7f7 fda2 	bl	8005148 <HAL_GetTick>
 800d604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d606:	e008      	b.n	800d61a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d608:	f7f7 fd9e 	bl	8005148 <HAL_GetTick>
 800d60c:	4602      	mov	r2, r0
 800d60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	2b02      	cmp	r3, #2
 800d614:	d901      	bls.n	800d61a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d616:	2303      	movs	r3, #3
 800d618:	e332      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d61a:	4b12      	ldr	r3, [pc, #72]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f003 0304 	and.w	r3, r3, #4
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0f0      	beq.n	800d608 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d626:	f7f7 fd9b 	bl	8005160 <HAL_GetREVID>
 800d62a:	4603      	mov	r3, r0
 800d62c:	f241 0203 	movw	r2, #4099	; 0x1003
 800d630:	4293      	cmp	r3, r2
 800d632:	d819      	bhi.n	800d668 <HAL_RCC_OscConfig+0x28c>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	2b40      	cmp	r3, #64	; 0x40
 800d63a:	d108      	bne.n	800d64e <HAL_RCC_OscConfig+0x272>
 800d63c:	4b09      	ldr	r3, [pc, #36]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d644:	4a07      	ldr	r2, [pc, #28]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d64a:	6053      	str	r3, [r2, #4]
 800d64c:	e030      	b.n	800d6b0 <HAL_RCC_OscConfig+0x2d4>
 800d64e:	4b05      	ldr	r3, [pc, #20]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	691b      	ldr	r3, [r3, #16]
 800d65a:	031b      	lsls	r3, r3, #12
 800d65c:	4901      	ldr	r1, [pc, #4]	; (800d664 <HAL_RCC_OscConfig+0x288>)
 800d65e:	4313      	orrs	r3, r2
 800d660:	604b      	str	r3, [r1, #4]
 800d662:	e025      	b.n	800d6b0 <HAL_RCC_OscConfig+0x2d4>
 800d664:	58024400 	.word	0x58024400
 800d668:	4b9a      	ldr	r3, [pc, #616]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	061b      	lsls	r3, r3, #24
 800d676:	4997      	ldr	r1, [pc, #604]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d678:	4313      	orrs	r3, r2
 800d67a:	604b      	str	r3, [r1, #4]
 800d67c:	e018      	b.n	800d6b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d67e:	4b95      	ldr	r3, [pc, #596]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a94      	ldr	r2, [pc, #592]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d684:	f023 0301 	bic.w	r3, r3, #1
 800d688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d68a:	f7f7 fd5d 	bl	8005148 <HAL_GetTick>
 800d68e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d690:	e008      	b.n	800d6a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d692:	f7f7 fd59 	bl	8005148 <HAL_GetTick>
 800d696:	4602      	mov	r2, r0
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d901      	bls.n	800d6a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	e2ed      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d6a4:	4b8b      	ldr	r3, [pc, #556]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f003 0304 	and.w	r3, r3, #4
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1f0      	bne.n	800d692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f003 0310 	and.w	r3, r3, #16
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f000 80a9 	beq.w	800d810 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d6be:	4b85      	ldr	r3, [pc, #532]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d6c8:	4b82      	ldr	r3, [pc, #520]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	2b08      	cmp	r3, #8
 800d6d2:	d007      	beq.n	800d6e4 <HAL_RCC_OscConfig+0x308>
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	2b18      	cmp	r3, #24
 800d6d8:	d13a      	bne.n	800d750 <HAL_RCC_OscConfig+0x374>
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	f003 0303 	and.w	r3, r3, #3
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d135      	bne.n	800d750 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d6e4:	4b7b      	ldr	r3, [pc, #492]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d005      	beq.n	800d6fc <HAL_RCC_OscConfig+0x320>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	69db      	ldr	r3, [r3, #28]
 800d6f4:	2b80      	cmp	r3, #128	; 0x80
 800d6f6:	d001      	beq.n	800d6fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e2c1      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d6fc:	f7f7 fd30 	bl	8005160 <HAL_GetREVID>
 800d700:	4603      	mov	r3, r0
 800d702:	f241 0203 	movw	r2, #4099	; 0x1003
 800d706:	4293      	cmp	r3, r2
 800d708:	d817      	bhi.n	800d73a <HAL_RCC_OscConfig+0x35e>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a1b      	ldr	r3, [r3, #32]
 800d70e:	2b20      	cmp	r3, #32
 800d710:	d108      	bne.n	800d724 <HAL_RCC_OscConfig+0x348>
 800d712:	4b70      	ldr	r3, [pc, #448]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d71a:	4a6e      	ldr	r2, [pc, #440]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d71c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d720:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d722:	e075      	b.n	800d810 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d724:	4b6b      	ldr	r3, [pc, #428]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a1b      	ldr	r3, [r3, #32]
 800d730:	069b      	lsls	r3, r3, #26
 800d732:	4968      	ldr	r1, [pc, #416]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d734:	4313      	orrs	r3, r2
 800d736:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d738:	e06a      	b.n	800d810 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d73a:	4b66      	ldr	r3, [pc, #408]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	061b      	lsls	r3, r3, #24
 800d748:	4962      	ldr	r1, [pc, #392]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d74a:	4313      	orrs	r3, r2
 800d74c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d74e:	e05f      	b.n	800d810 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	69db      	ldr	r3, [r3, #28]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d042      	beq.n	800d7de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d758:	4b5e      	ldr	r3, [pc, #376]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a5d      	ldr	r2, [pc, #372]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d75e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d764:	f7f7 fcf0 	bl	8005148 <HAL_GetTick>
 800d768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d76a:	e008      	b.n	800d77e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d76c:	f7f7 fcec 	bl	8005148 <HAL_GetTick>
 800d770:	4602      	mov	r2, r0
 800d772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	2b02      	cmp	r3, #2
 800d778:	d901      	bls.n	800d77e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800d77a:	2303      	movs	r3, #3
 800d77c:	e280      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d77e:	4b55      	ldr	r3, [pc, #340]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d786:	2b00      	cmp	r3, #0
 800d788:	d0f0      	beq.n	800d76c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d78a:	f7f7 fce9 	bl	8005160 <HAL_GetREVID>
 800d78e:	4603      	mov	r3, r0
 800d790:	f241 0203 	movw	r2, #4099	; 0x1003
 800d794:	4293      	cmp	r3, r2
 800d796:	d817      	bhi.n	800d7c8 <HAL_RCC_OscConfig+0x3ec>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6a1b      	ldr	r3, [r3, #32]
 800d79c:	2b20      	cmp	r3, #32
 800d79e:	d108      	bne.n	800d7b2 <HAL_RCC_OscConfig+0x3d6>
 800d7a0:	4b4c      	ldr	r3, [pc, #304]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d7a8:	4a4a      	ldr	r2, [pc, #296]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d7aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d7ae:	6053      	str	r3, [r2, #4]
 800d7b0:	e02e      	b.n	800d810 <HAL_RCC_OscConfig+0x434>
 800d7b2:	4b48      	ldr	r3, [pc, #288]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a1b      	ldr	r3, [r3, #32]
 800d7be:	069b      	lsls	r3, r3, #26
 800d7c0:	4944      	ldr	r1, [pc, #272]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	604b      	str	r3, [r1, #4]
 800d7c6:	e023      	b.n	800d810 <HAL_RCC_OscConfig+0x434>
 800d7c8:	4b42      	ldr	r3, [pc, #264]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6a1b      	ldr	r3, [r3, #32]
 800d7d4:	061b      	lsls	r3, r3, #24
 800d7d6:	493f      	ldr	r1, [pc, #252]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	60cb      	str	r3, [r1, #12]
 800d7dc:	e018      	b.n	800d810 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d7de:	4b3d      	ldr	r3, [pc, #244]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4a3c      	ldr	r2, [pc, #240]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d7e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7ea:	f7f7 fcad 	bl	8005148 <HAL_GetTick>
 800d7ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d7f0:	e008      	b.n	800d804 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d7f2:	f7f7 fca9 	bl	8005148 <HAL_GetTick>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	2b02      	cmp	r3, #2
 800d7fe:	d901      	bls.n	800d804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d800:	2303      	movs	r3, #3
 800d802:	e23d      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d804:	4b33      	ldr	r3, [pc, #204]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1f0      	bne.n	800d7f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f003 0308 	and.w	r3, r3, #8
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d036      	beq.n	800d88a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	695b      	ldr	r3, [r3, #20]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d019      	beq.n	800d858 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d824:	4b2b      	ldr	r3, [pc, #172]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d828:	4a2a      	ldr	r2, [pc, #168]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d82a:	f043 0301 	orr.w	r3, r3, #1
 800d82e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d830:	f7f7 fc8a 	bl	8005148 <HAL_GetTick>
 800d834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d836:	e008      	b.n	800d84a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d838:	f7f7 fc86 	bl	8005148 <HAL_GetTick>
 800d83c:	4602      	mov	r2, r0
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	2b02      	cmp	r3, #2
 800d844:	d901      	bls.n	800d84a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d846:	2303      	movs	r3, #3
 800d848:	e21a      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d84a:	4b22      	ldr	r3, [pc, #136]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d84c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d0f0      	beq.n	800d838 <HAL_RCC_OscConfig+0x45c>
 800d856:	e018      	b.n	800d88a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d858:	4b1e      	ldr	r3, [pc, #120]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d85a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d85c:	4a1d      	ldr	r2, [pc, #116]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d85e:	f023 0301 	bic.w	r3, r3, #1
 800d862:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d864:	f7f7 fc70 	bl	8005148 <HAL_GetTick>
 800d868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d86a:	e008      	b.n	800d87e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d86c:	f7f7 fc6c 	bl	8005148 <HAL_GetTick>
 800d870:	4602      	mov	r2, r0
 800d872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d874:	1ad3      	subs	r3, r2, r3
 800d876:	2b02      	cmp	r3, #2
 800d878:	d901      	bls.n	800d87e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d87a:	2303      	movs	r3, #3
 800d87c:	e200      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d87e:	4b15      	ldr	r3, [pc, #84]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d882:	f003 0302 	and.w	r3, r3, #2
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1f0      	bne.n	800d86c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f003 0320 	and.w	r3, r3, #32
 800d892:	2b00      	cmp	r3, #0
 800d894:	d039      	beq.n	800d90a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	699b      	ldr	r3, [r3, #24]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d01c      	beq.n	800d8d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d89e:	4b0d      	ldr	r3, [pc, #52]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a0c      	ldr	r2, [pc, #48]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d8a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d8a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d8aa:	f7f7 fc4d 	bl	8005148 <HAL_GetTick>
 800d8ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d8b0:	e008      	b.n	800d8c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d8b2:	f7f7 fc49 	bl	8005148 <HAL_GetTick>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	1ad3      	subs	r3, r2, r3
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d901      	bls.n	800d8c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d8c0:	2303      	movs	r3, #3
 800d8c2:	e1dd      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d8c4:	4b03      	ldr	r3, [pc, #12]	; (800d8d4 <HAL_RCC_OscConfig+0x4f8>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d0f0      	beq.n	800d8b2 <HAL_RCC_OscConfig+0x4d6>
 800d8d0:	e01b      	b.n	800d90a <HAL_RCC_OscConfig+0x52e>
 800d8d2:	bf00      	nop
 800d8d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d8d8:	4b9b      	ldr	r3, [pc, #620]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a9a      	ldr	r2, [pc, #616]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d8de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d8e4:	f7f7 fc30 	bl	8005148 <HAL_GetTick>
 800d8e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d8ea:	e008      	b.n	800d8fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d8ec:	f7f7 fc2c 	bl	8005148 <HAL_GetTick>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	d901      	bls.n	800d8fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d8fa:	2303      	movs	r3, #3
 800d8fc:	e1c0      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d8fe:	4b92      	ldr	r3, [pc, #584]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1f0      	bne.n	800d8ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f003 0304 	and.w	r3, r3, #4
 800d912:	2b00      	cmp	r3, #0
 800d914:	f000 8081 	beq.w	800da1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d918:	4b8c      	ldr	r3, [pc, #560]	; (800db4c <HAL_RCC_OscConfig+0x770>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a8b      	ldr	r2, [pc, #556]	; (800db4c <HAL_RCC_OscConfig+0x770>)
 800d91e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d924:	f7f7 fc10 	bl	8005148 <HAL_GetTick>
 800d928:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d92a:	e008      	b.n	800d93e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d92c:	f7f7 fc0c 	bl	8005148 <HAL_GetTick>
 800d930:	4602      	mov	r2, r0
 800d932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d934:	1ad3      	subs	r3, r2, r3
 800d936:	2b64      	cmp	r3, #100	; 0x64
 800d938:	d901      	bls.n	800d93e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d93a:	2303      	movs	r3, #3
 800d93c:	e1a0      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d93e:	4b83      	ldr	r3, [pc, #524]	; (800db4c <HAL_RCC_OscConfig+0x770>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d946:	2b00      	cmp	r3, #0
 800d948:	d0f0      	beq.n	800d92c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d106      	bne.n	800d960 <HAL_RCC_OscConfig+0x584>
 800d952:	4b7d      	ldr	r3, [pc, #500]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d956:	4a7c      	ldr	r2, [pc, #496]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d958:	f043 0301 	orr.w	r3, r3, #1
 800d95c:	6713      	str	r3, [r2, #112]	; 0x70
 800d95e:	e02d      	b.n	800d9bc <HAL_RCC_OscConfig+0x5e0>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d10c      	bne.n	800d982 <HAL_RCC_OscConfig+0x5a6>
 800d968:	4b77      	ldr	r3, [pc, #476]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d96c:	4a76      	ldr	r2, [pc, #472]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d96e:	f023 0301 	bic.w	r3, r3, #1
 800d972:	6713      	str	r3, [r2, #112]	; 0x70
 800d974:	4b74      	ldr	r3, [pc, #464]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d978:	4a73      	ldr	r2, [pc, #460]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d97a:	f023 0304 	bic.w	r3, r3, #4
 800d97e:	6713      	str	r3, [r2, #112]	; 0x70
 800d980:	e01c      	b.n	800d9bc <HAL_RCC_OscConfig+0x5e0>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	2b05      	cmp	r3, #5
 800d988:	d10c      	bne.n	800d9a4 <HAL_RCC_OscConfig+0x5c8>
 800d98a:	4b6f      	ldr	r3, [pc, #444]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d98c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d98e:	4a6e      	ldr	r2, [pc, #440]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d990:	f043 0304 	orr.w	r3, r3, #4
 800d994:	6713      	str	r3, [r2, #112]	; 0x70
 800d996:	4b6c      	ldr	r3, [pc, #432]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d99a:	4a6b      	ldr	r2, [pc, #428]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d99c:	f043 0301 	orr.w	r3, r3, #1
 800d9a0:	6713      	str	r3, [r2, #112]	; 0x70
 800d9a2:	e00b      	b.n	800d9bc <HAL_RCC_OscConfig+0x5e0>
 800d9a4:	4b68      	ldr	r3, [pc, #416]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a8:	4a67      	ldr	r2, [pc, #412]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d9aa:	f023 0301 	bic.w	r3, r3, #1
 800d9ae:	6713      	str	r3, [r2, #112]	; 0x70
 800d9b0:	4b65      	ldr	r3, [pc, #404]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b4:	4a64      	ldr	r2, [pc, #400]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d9b6:	f023 0304 	bic.w	r3, r3, #4
 800d9ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d015      	beq.n	800d9f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9c4:	f7f7 fbc0 	bl	8005148 <HAL_GetTick>
 800d9c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d9ca:	e00a      	b.n	800d9e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9cc:	f7f7 fbbc 	bl	8005148 <HAL_GetTick>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d4:	1ad3      	subs	r3, r2, r3
 800d9d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d901      	bls.n	800d9e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d9de:	2303      	movs	r3, #3
 800d9e0:	e14e      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d9e2:	4b59      	ldr	r3, [pc, #356]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800d9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9e6:	f003 0302 	and.w	r3, r3, #2
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d0ee      	beq.n	800d9cc <HAL_RCC_OscConfig+0x5f0>
 800d9ee:	e014      	b.n	800da1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9f0:	f7f7 fbaa 	bl	8005148 <HAL_GetTick>
 800d9f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d9f6:	e00a      	b.n	800da0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9f8:	f7f7 fba6 	bl	8005148 <HAL_GetTick>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	f241 3288 	movw	r2, #5000	; 0x1388
 800da06:	4293      	cmp	r3, r2
 800da08:	d901      	bls.n	800da0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800da0a:	2303      	movs	r3, #3
 800da0c:	e138      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800da0e:	4b4e      	ldr	r3, [pc, #312]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800da10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da12:	f003 0302 	and.w	r3, r3, #2
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1ee      	bne.n	800d9f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f000 812d 	beq.w	800dc7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800da24:	4b48      	ldr	r3, [pc, #288]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800da26:	691b      	ldr	r3, [r3, #16]
 800da28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da2c:	2b18      	cmp	r3, #24
 800da2e:	f000 80bd 	beq.w	800dbac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da36:	2b02      	cmp	r3, #2
 800da38:	f040 809e 	bne.w	800db78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da3c:	4b42      	ldr	r3, [pc, #264]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a41      	ldr	r2, [pc, #260]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800da42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da48:	f7f7 fb7e 	bl	8005148 <HAL_GetTick>
 800da4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800da4e:	e008      	b.n	800da62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800da50:	f7f7 fb7a 	bl	8005148 <HAL_GetTick>
 800da54:	4602      	mov	r2, r0
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d901      	bls.n	800da62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800da5e:	2303      	movs	r3, #3
 800da60:	e10e      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800da62:	4b39      	ldr	r3, [pc, #228]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1f0      	bne.n	800da50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800da6e:	4b36      	ldr	r3, [pc, #216]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800da70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da72:	4b37      	ldr	r3, [pc, #220]	; (800db50 <HAL_RCC_OscConfig+0x774>)
 800da74:	4013      	ands	r3, r2
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800da7e:	0112      	lsls	r2, r2, #4
 800da80:	430a      	orrs	r2, r1
 800da82:	4931      	ldr	r1, [pc, #196]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800da84:	4313      	orrs	r3, r2
 800da86:	628b      	str	r3, [r1, #40]	; 0x28
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8c:	3b01      	subs	r3, #1
 800da8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da96:	3b01      	subs	r3, #1
 800da98:	025b      	lsls	r3, r3, #9
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	431a      	orrs	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa2:	3b01      	subs	r3, #1
 800daa4:	041b      	lsls	r3, r3, #16
 800daa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800daaa:	431a      	orrs	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab0:	3b01      	subs	r3, #1
 800dab2:	061b      	lsls	r3, r3, #24
 800dab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dab8:	4923      	ldr	r1, [pc, #140]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800daba:	4313      	orrs	r3, r2
 800dabc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800dabe:	4b22      	ldr	r3, [pc, #136]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800dac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac2:	4a21      	ldr	r2, [pc, #132]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800dac4:	f023 0301 	bic.w	r3, r3, #1
 800dac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800daca:	4b1f      	ldr	r3, [pc, #124]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800dacc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dace:	4b21      	ldr	r3, [pc, #132]	; (800db54 <HAL_RCC_OscConfig+0x778>)
 800dad0:	4013      	ands	r3, r2
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dad6:	00d2      	lsls	r2, r2, #3
 800dad8:	491b      	ldr	r1, [pc, #108]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800dada:	4313      	orrs	r3, r2
 800dadc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800dade:	4b1a      	ldr	r3, [pc, #104]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800dae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae2:	f023 020c 	bic.w	r2, r3, #12
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daea:	4917      	ldr	r1, [pc, #92]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800daec:	4313      	orrs	r3, r2
 800daee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800daf0:	4b15      	ldr	r3, [pc, #84]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800daf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf4:	f023 0202 	bic.w	r2, r3, #2
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dafc:	4912      	ldr	r1, [pc, #72]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800dafe:	4313      	orrs	r3, r2
 800db00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800db02:	4b11      	ldr	r3, [pc, #68]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800db04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db06:	4a10      	ldr	r2, [pc, #64]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800db08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db0e:	4b0e      	ldr	r3, [pc, #56]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800db10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db12:	4a0d      	ldr	r2, [pc, #52]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800db14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800db1a:	4b0b      	ldr	r3, [pc, #44]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800db1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db1e:	4a0a      	ldr	r2, [pc, #40]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800db20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800db24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800db26:	4b08      	ldr	r3, [pc, #32]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800db28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2a:	4a07      	ldr	r2, [pc, #28]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800db2c:	f043 0301 	orr.w	r3, r3, #1
 800db30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db32:	4b05      	ldr	r3, [pc, #20]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a04      	ldr	r2, [pc, #16]	; (800db48 <HAL_RCC_OscConfig+0x76c>)
 800db38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db3e:	f7f7 fb03 	bl	8005148 <HAL_GetTick>
 800db42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db44:	e011      	b.n	800db6a <HAL_RCC_OscConfig+0x78e>
 800db46:	bf00      	nop
 800db48:	58024400 	.word	0x58024400
 800db4c:	58024800 	.word	0x58024800
 800db50:	fffffc0c 	.word	0xfffffc0c
 800db54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db58:	f7f7 faf6 	bl	8005148 <HAL_GetTick>
 800db5c:	4602      	mov	r2, r0
 800db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db60:	1ad3      	subs	r3, r2, r3
 800db62:	2b02      	cmp	r3, #2
 800db64:	d901      	bls.n	800db6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800db66:	2303      	movs	r3, #3
 800db68:	e08a      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db6a:	4b47      	ldr	r3, [pc, #284]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db72:	2b00      	cmp	r3, #0
 800db74:	d0f0      	beq.n	800db58 <HAL_RCC_OscConfig+0x77c>
 800db76:	e082      	b.n	800dc7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db78:	4b43      	ldr	r3, [pc, #268]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a42      	ldr	r2, [pc, #264]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800db7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db84:	f7f7 fae0 	bl	8005148 <HAL_GetTick>
 800db88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800db8a:	e008      	b.n	800db9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db8c:	f7f7 fadc 	bl	8005148 <HAL_GetTick>
 800db90:	4602      	mov	r2, r0
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	2b02      	cmp	r3, #2
 800db98:	d901      	bls.n	800db9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800db9a:	2303      	movs	r3, #3
 800db9c:	e070      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800db9e:	4b3a      	ldr	r3, [pc, #232]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d1f0      	bne.n	800db8c <HAL_RCC_OscConfig+0x7b0>
 800dbaa:	e068      	b.n	800dc7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800dbac:	4b36      	ldr	r3, [pc, #216]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800dbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dbb2:	4b35      	ldr	r3, [pc, #212]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800dbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d031      	beq.n	800dc24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	f003 0203 	and.w	r2, r3, #3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d12a      	bne.n	800dc24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	091b      	lsrs	r3, r3, #4
 800dbd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d122      	bne.n	800dc24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d11a      	bne.n	800dc24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	0a5b      	lsrs	r3, r3, #9
 800dbf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbfa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d111      	bne.n	800dc24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	0c1b      	lsrs	r3, r3, #16
 800dc04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d108      	bne.n	800dc24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	0e1b      	lsrs	r3, r3, #24
 800dc16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d001      	beq.n	800dc28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e02b      	b.n	800dc80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800dc28:	4b17      	ldr	r3, [pc, #92]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800dc2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc2c:	08db      	lsrs	r3, r3, #3
 800dc2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d01f      	beq.n	800dc7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800dc3e:	4b12      	ldr	r3, [pc, #72]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800dc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc42:	4a11      	ldr	r2, [pc, #68]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800dc44:	f023 0301 	bic.w	r3, r3, #1
 800dc48:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dc4a:	f7f7 fa7d 	bl	8005148 <HAL_GetTick>
 800dc4e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800dc50:	bf00      	nop
 800dc52:	f7f7 fa79 	bl	8005148 <HAL_GetTick>
 800dc56:	4602      	mov	r2, r0
 800dc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d0f9      	beq.n	800dc52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dc5e:	4b0a      	ldr	r3, [pc, #40]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800dc60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc62:	4b0a      	ldr	r3, [pc, #40]	; (800dc8c <HAL_RCC_OscConfig+0x8b0>)
 800dc64:	4013      	ands	r3, r2
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dc6a:	00d2      	lsls	r2, r2, #3
 800dc6c:	4906      	ldr	r1, [pc, #24]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800dc72:	4b05      	ldr	r3, [pc, #20]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800dc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc76:	4a04      	ldr	r2, [pc, #16]	; (800dc88 <HAL_RCC_OscConfig+0x8ac>)
 800dc78:	f043 0301 	orr.w	r3, r3, #1
 800dc7c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3730      	adds	r7, #48	; 0x30
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	58024400 	.word	0x58024400
 800dc8c:	ffff0007 	.word	0xffff0007

0800dc90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e19c      	b.n	800dfde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dca4:	4b8a      	ldr	r3, [pc, #552]	; (800ded0 <HAL_RCC_ClockConfig+0x240>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f003 030f 	and.w	r3, r3, #15
 800dcac:	683a      	ldr	r2, [r7, #0]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d910      	bls.n	800dcd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcb2:	4b87      	ldr	r3, [pc, #540]	; (800ded0 <HAL_RCC_ClockConfig+0x240>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f023 020f 	bic.w	r2, r3, #15
 800dcba:	4985      	ldr	r1, [pc, #532]	; (800ded0 <HAL_RCC_ClockConfig+0x240>)
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcc2:	4b83      	ldr	r3, [pc, #524]	; (800ded0 <HAL_RCC_ClockConfig+0x240>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f003 030f 	and.w	r3, r3, #15
 800dcca:	683a      	ldr	r2, [r7, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d001      	beq.n	800dcd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e184      	b.n	800dfde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f003 0304 	and.w	r3, r3, #4
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d010      	beq.n	800dd02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	691a      	ldr	r2, [r3, #16]
 800dce4:	4b7b      	ldr	r3, [pc, #492]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dce6:	699b      	ldr	r3, [r3, #24]
 800dce8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d908      	bls.n	800dd02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dcf0:	4b78      	ldr	r3, [pc, #480]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dcf2:	699b      	ldr	r3, [r3, #24]
 800dcf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	4975      	ldr	r1, [pc, #468]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f003 0308 	and.w	r3, r3, #8
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d010      	beq.n	800dd30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	695a      	ldr	r2, [r3, #20]
 800dd12:	4b70      	ldr	r3, [pc, #448]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dd14:	69db      	ldr	r3, [r3, #28]
 800dd16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d908      	bls.n	800dd30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dd1e:	4b6d      	ldr	r3, [pc, #436]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dd20:	69db      	ldr	r3, [r3, #28]
 800dd22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	695b      	ldr	r3, [r3, #20]
 800dd2a:	496a      	ldr	r1, [pc, #424]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f003 0310 	and.w	r3, r3, #16
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d010      	beq.n	800dd5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	699a      	ldr	r2, [r3, #24]
 800dd40:	4b64      	ldr	r3, [pc, #400]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dd42:	69db      	ldr	r3, [r3, #28]
 800dd44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d908      	bls.n	800dd5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dd4c:	4b61      	ldr	r3, [pc, #388]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	699b      	ldr	r3, [r3, #24]
 800dd58:	495e      	ldr	r1, [pc, #376]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f003 0320 	and.w	r3, r3, #32
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d010      	beq.n	800dd8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	69da      	ldr	r2, [r3, #28]
 800dd6e:	4b59      	ldr	r3, [pc, #356]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dd70:	6a1b      	ldr	r3, [r3, #32]
 800dd72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d908      	bls.n	800dd8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dd7a:	4b56      	ldr	r3, [pc, #344]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dd7c:	6a1b      	ldr	r3, [r3, #32]
 800dd7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	69db      	ldr	r3, [r3, #28]
 800dd86:	4953      	ldr	r1, [pc, #332]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f003 0302 	and.w	r3, r3, #2
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d010      	beq.n	800ddba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	68da      	ldr	r2, [r3, #12]
 800dd9c:	4b4d      	ldr	r3, [pc, #308]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dd9e:	699b      	ldr	r3, [r3, #24]
 800dda0:	f003 030f 	and.w	r3, r3, #15
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d908      	bls.n	800ddba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dda8:	4b4a      	ldr	r3, [pc, #296]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	f023 020f 	bic.w	r2, r3, #15
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	4947      	ldr	r1, [pc, #284]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f003 0301 	and.w	r3, r3, #1
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d055      	beq.n	800de72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ddc6:	4b43      	ldr	r3, [pc, #268]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800ddc8:	699b      	ldr	r3, [r3, #24]
 800ddca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	689b      	ldr	r3, [r3, #8]
 800ddd2:	4940      	ldr	r1, [pc, #256]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	d107      	bne.n	800ddf0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dde0:	4b3c      	ldr	r3, [pc, #240]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d121      	bne.n	800de30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ddec:	2301      	movs	r3, #1
 800ddee:	e0f6      	b.n	800dfde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	2b03      	cmp	r3, #3
 800ddf6:	d107      	bne.n	800de08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ddf8:	4b36      	ldr	r3, [pc, #216]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de00:	2b00      	cmp	r3, #0
 800de02:	d115      	bne.n	800de30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800de04:	2301      	movs	r3, #1
 800de06:	e0ea      	b.n	800dfde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d107      	bne.n	800de20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800de10:	4b30      	ldr	r3, [pc, #192]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d109      	bne.n	800de30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800de1c:	2301      	movs	r3, #1
 800de1e:	e0de      	b.n	800dfde <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800de20:	4b2c      	ldr	r3, [pc, #176]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f003 0304 	and.w	r3, r3, #4
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d101      	bne.n	800de30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800de2c:	2301      	movs	r3, #1
 800de2e:	e0d6      	b.n	800dfde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800de30:	4b28      	ldr	r3, [pc, #160]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	f023 0207 	bic.w	r2, r3, #7
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	4925      	ldr	r1, [pc, #148]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800de3e:	4313      	orrs	r3, r2
 800de40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de42:	f7f7 f981 	bl	8005148 <HAL_GetTick>
 800de46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de48:	e00a      	b.n	800de60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de4a:	f7f7 f97d 	bl	8005148 <HAL_GetTick>
 800de4e:	4602      	mov	r2, r0
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	1ad3      	subs	r3, r2, r3
 800de54:	f241 3288 	movw	r2, #5000	; 0x1388
 800de58:	4293      	cmp	r3, r2
 800de5a:	d901      	bls.n	800de60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800de5c:	2303      	movs	r3, #3
 800de5e:	e0be      	b.n	800dfde <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de60:	4b1c      	ldr	r3, [pc, #112]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	00db      	lsls	r3, r3, #3
 800de6e:	429a      	cmp	r2, r3
 800de70:	d1eb      	bne.n	800de4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f003 0302 	and.w	r3, r3, #2
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d010      	beq.n	800dea0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	68da      	ldr	r2, [r3, #12]
 800de82:	4b14      	ldr	r3, [pc, #80]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800de84:	699b      	ldr	r3, [r3, #24]
 800de86:	f003 030f 	and.w	r3, r3, #15
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d208      	bcs.n	800dea0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de8e:	4b11      	ldr	r3, [pc, #68]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800de90:	699b      	ldr	r3, [r3, #24]
 800de92:	f023 020f 	bic.w	r2, r3, #15
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	490e      	ldr	r1, [pc, #56]	; (800ded4 <HAL_RCC_ClockConfig+0x244>)
 800de9c:	4313      	orrs	r3, r2
 800de9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dea0:	4b0b      	ldr	r3, [pc, #44]	; (800ded0 <HAL_RCC_ClockConfig+0x240>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f003 030f 	and.w	r3, r3, #15
 800dea8:	683a      	ldr	r2, [r7, #0]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d214      	bcs.n	800ded8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800deae:	4b08      	ldr	r3, [pc, #32]	; (800ded0 <HAL_RCC_ClockConfig+0x240>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f023 020f 	bic.w	r2, r3, #15
 800deb6:	4906      	ldr	r1, [pc, #24]	; (800ded0 <HAL_RCC_ClockConfig+0x240>)
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	4313      	orrs	r3, r2
 800debc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800debe:	4b04      	ldr	r3, [pc, #16]	; (800ded0 <HAL_RCC_ClockConfig+0x240>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f003 030f 	and.w	r3, r3, #15
 800dec6:	683a      	ldr	r2, [r7, #0]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d005      	beq.n	800ded8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800decc:	2301      	movs	r3, #1
 800dece:	e086      	b.n	800dfde <HAL_RCC_ClockConfig+0x34e>
 800ded0:	52002000 	.word	0x52002000
 800ded4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f003 0304 	and.w	r3, r3, #4
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d010      	beq.n	800df06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	691a      	ldr	r2, [r3, #16]
 800dee8:	4b3f      	ldr	r3, [pc, #252]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800deea:	699b      	ldr	r3, [r3, #24]
 800deec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800def0:	429a      	cmp	r2, r3
 800def2:	d208      	bcs.n	800df06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800def4:	4b3c      	ldr	r3, [pc, #240]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	4939      	ldr	r1, [pc, #228]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df02:	4313      	orrs	r3, r2
 800df04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f003 0308 	and.w	r3, r3, #8
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d010      	beq.n	800df34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	695a      	ldr	r2, [r3, #20]
 800df16:	4b34      	ldr	r3, [pc, #208]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df18:	69db      	ldr	r3, [r3, #28]
 800df1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800df1e:	429a      	cmp	r2, r3
 800df20:	d208      	bcs.n	800df34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800df22:	4b31      	ldr	r3, [pc, #196]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df24:	69db      	ldr	r3, [r3, #28]
 800df26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	492e      	ldr	r1, [pc, #184]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df30:	4313      	orrs	r3, r2
 800df32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f003 0310 	and.w	r3, r3, #16
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d010      	beq.n	800df62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	699a      	ldr	r2, [r3, #24]
 800df44:	4b28      	ldr	r3, [pc, #160]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df46:	69db      	ldr	r3, [r3, #28]
 800df48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d208      	bcs.n	800df62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800df50:	4b25      	ldr	r3, [pc, #148]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df52:	69db      	ldr	r3, [r3, #28]
 800df54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	699b      	ldr	r3, [r3, #24]
 800df5c:	4922      	ldr	r1, [pc, #136]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df5e:	4313      	orrs	r3, r2
 800df60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f003 0320 	and.w	r3, r3, #32
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d010      	beq.n	800df90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	69da      	ldr	r2, [r3, #28]
 800df72:	4b1d      	ldr	r3, [pc, #116]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df74:	6a1b      	ldr	r3, [r3, #32]
 800df76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d208      	bcs.n	800df90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800df7e:	4b1a      	ldr	r3, [pc, #104]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df80:	6a1b      	ldr	r3, [r3, #32]
 800df82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	69db      	ldr	r3, [r3, #28]
 800df8a:	4917      	ldr	r1, [pc, #92]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df8c:	4313      	orrs	r3, r2
 800df8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800df90:	f000 f834 	bl	800dffc <HAL_RCC_GetSysClockFreq>
 800df94:	4602      	mov	r2, r0
 800df96:	4b14      	ldr	r3, [pc, #80]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800df98:	699b      	ldr	r3, [r3, #24]
 800df9a:	0a1b      	lsrs	r3, r3, #8
 800df9c:	f003 030f 	and.w	r3, r3, #15
 800dfa0:	4912      	ldr	r1, [pc, #72]	; (800dfec <HAL_RCC_ClockConfig+0x35c>)
 800dfa2:	5ccb      	ldrb	r3, [r1, r3]
 800dfa4:	f003 031f 	and.w	r3, r3, #31
 800dfa8:	fa22 f303 	lsr.w	r3, r2, r3
 800dfac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dfae:	4b0e      	ldr	r3, [pc, #56]	; (800dfe8 <HAL_RCC_ClockConfig+0x358>)
 800dfb0:	699b      	ldr	r3, [r3, #24]
 800dfb2:	f003 030f 	and.w	r3, r3, #15
 800dfb6:	4a0d      	ldr	r2, [pc, #52]	; (800dfec <HAL_RCC_ClockConfig+0x35c>)
 800dfb8:	5cd3      	ldrb	r3, [r2, r3]
 800dfba:	f003 031f 	and.w	r3, r3, #31
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	fa22 f303 	lsr.w	r3, r2, r3
 800dfc4:	4a0a      	ldr	r2, [pc, #40]	; (800dff0 <HAL_RCC_ClockConfig+0x360>)
 800dfc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dfc8:	4a0a      	ldr	r2, [pc, #40]	; (800dff4 <HAL_RCC_ClockConfig+0x364>)
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800dfce:	4b0a      	ldr	r3, [pc, #40]	; (800dff8 <HAL_RCC_ClockConfig+0x368>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7f5 fda2 	bl	8003b1c <HAL_InitTick>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3718      	adds	r7, #24
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	58024400 	.word	0x58024400
 800dfec:	0801a954 	.word	0x0801a954
 800dff0:	240000cc 	.word	0x240000cc
 800dff4:	240000c8 	.word	0x240000c8
 800dff8:	240000d0 	.word	0x240000d0

0800dffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b089      	sub	sp, #36	; 0x24
 800e000:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e002:	4bb3      	ldr	r3, [pc, #716]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e00a:	2b18      	cmp	r3, #24
 800e00c:	f200 8155 	bhi.w	800e2ba <HAL_RCC_GetSysClockFreq+0x2be>
 800e010:	a201      	add	r2, pc, #4	; (adr r2, 800e018 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e016:	bf00      	nop
 800e018:	0800e07d 	.word	0x0800e07d
 800e01c:	0800e2bb 	.word	0x0800e2bb
 800e020:	0800e2bb 	.word	0x0800e2bb
 800e024:	0800e2bb 	.word	0x0800e2bb
 800e028:	0800e2bb 	.word	0x0800e2bb
 800e02c:	0800e2bb 	.word	0x0800e2bb
 800e030:	0800e2bb 	.word	0x0800e2bb
 800e034:	0800e2bb 	.word	0x0800e2bb
 800e038:	0800e0a3 	.word	0x0800e0a3
 800e03c:	0800e2bb 	.word	0x0800e2bb
 800e040:	0800e2bb 	.word	0x0800e2bb
 800e044:	0800e2bb 	.word	0x0800e2bb
 800e048:	0800e2bb 	.word	0x0800e2bb
 800e04c:	0800e2bb 	.word	0x0800e2bb
 800e050:	0800e2bb 	.word	0x0800e2bb
 800e054:	0800e2bb 	.word	0x0800e2bb
 800e058:	0800e0a9 	.word	0x0800e0a9
 800e05c:	0800e2bb 	.word	0x0800e2bb
 800e060:	0800e2bb 	.word	0x0800e2bb
 800e064:	0800e2bb 	.word	0x0800e2bb
 800e068:	0800e2bb 	.word	0x0800e2bb
 800e06c:	0800e2bb 	.word	0x0800e2bb
 800e070:	0800e2bb 	.word	0x0800e2bb
 800e074:	0800e2bb 	.word	0x0800e2bb
 800e078:	0800e0af 	.word	0x0800e0af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e07c:	4b94      	ldr	r3, [pc, #592]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f003 0320 	and.w	r3, r3, #32
 800e084:	2b00      	cmp	r3, #0
 800e086:	d009      	beq.n	800e09c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e088:	4b91      	ldr	r3, [pc, #580]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	08db      	lsrs	r3, r3, #3
 800e08e:	f003 0303 	and.w	r3, r3, #3
 800e092:	4a90      	ldr	r2, [pc, #576]	; (800e2d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e094:	fa22 f303 	lsr.w	r3, r2, r3
 800e098:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e09a:	e111      	b.n	800e2c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e09c:	4b8d      	ldr	r3, [pc, #564]	; (800e2d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e09e:	61bb      	str	r3, [r7, #24]
      break;
 800e0a0:	e10e      	b.n	800e2c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e0a2:	4b8d      	ldr	r3, [pc, #564]	; (800e2d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e0a4:	61bb      	str	r3, [r7, #24]
      break;
 800e0a6:	e10b      	b.n	800e2c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e0a8:	4b8c      	ldr	r3, [pc, #560]	; (800e2dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e0aa:	61bb      	str	r3, [r7, #24]
      break;
 800e0ac:	e108      	b.n	800e2c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e0ae:	4b88      	ldr	r3, [pc, #544]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b2:	f003 0303 	and.w	r3, r3, #3
 800e0b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e0b8:	4b85      	ldr	r3, [pc, #532]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0bc:	091b      	lsrs	r3, r3, #4
 800e0be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e0c4:	4b82      	ldr	r3, [pc, #520]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c8:	f003 0301 	and.w	r3, r3, #1
 800e0cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e0ce:	4b80      	ldr	r3, [pc, #512]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d2:	08db      	lsrs	r3, r3, #3
 800e0d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	fb02 f303 	mul.w	r3, r2, r3
 800e0de:	ee07 3a90 	vmov	s15, r3
 800e0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	f000 80e1 	beq.w	800e2b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	f000 8083 	beq.w	800e200 <HAL_RCC_GetSysClockFreq+0x204>
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	f200 80a1 	bhi.w	800e244 <HAL_RCC_GetSysClockFreq+0x248>
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d003      	beq.n	800e110 <HAL_RCC_GetSysClockFreq+0x114>
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d056      	beq.n	800e1bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800e10e:	e099      	b.n	800e244 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e110:	4b6f      	ldr	r3, [pc, #444]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f003 0320 	and.w	r3, r3, #32
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d02d      	beq.n	800e178 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e11c:	4b6c      	ldr	r3, [pc, #432]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	08db      	lsrs	r3, r3, #3
 800e122:	f003 0303 	and.w	r3, r3, #3
 800e126:	4a6b      	ldr	r2, [pc, #428]	; (800e2d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e128:	fa22 f303 	lsr.w	r3, r2, r3
 800e12c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	ee07 3a90 	vmov	s15, r3
 800e134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	ee07 3a90 	vmov	s15, r3
 800e13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e146:	4b62      	ldr	r3, [pc, #392]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e14e:	ee07 3a90 	vmov	s15, r3
 800e152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e156:	ed97 6a02 	vldr	s12, [r7, #8]
 800e15a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e2e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e15e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e172:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e176:	e087      	b.n	800e288 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	ee07 3a90 	vmov	s15, r3
 800e17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e182:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e2e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e18a:	4b51      	ldr	r3, [pc, #324]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e192:	ee07 3a90 	vmov	s15, r3
 800e196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e19a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e19e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e2e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e1a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e1ba:	e065      	b.n	800e288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	ee07 3a90 	vmov	s15, r3
 800e1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e2e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e1ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1ce:	4b40      	ldr	r3, [pc, #256]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1d6:	ee07 3a90 	vmov	s15, r3
 800e1da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1de:	ed97 6a02 	vldr	s12, [r7, #8]
 800e1e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e2e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e1e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e1fe:	e043      	b.n	800e288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	ee07 3a90 	vmov	s15, r3
 800e206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e20a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e2ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800e20e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e212:	4b2f      	ldr	r3, [pc, #188]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e21a:	ee07 3a90 	vmov	s15, r3
 800e21e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e222:	ed97 6a02 	vldr	s12, [r7, #8]
 800e226:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e2e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e22a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e22e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e23e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e242:	e021      	b.n	800e288 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	ee07 3a90 	vmov	s15, r3
 800e24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e24e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e2e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e256:	4b1e      	ldr	r3, [pc, #120]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e25e:	ee07 3a90 	vmov	s15, r3
 800e262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e266:	ed97 6a02 	vldr	s12, [r7, #8]
 800e26a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e2e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e26e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e286:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e288:	4b11      	ldr	r3, [pc, #68]	; (800e2d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e28c:	0a5b      	lsrs	r3, r3, #9
 800e28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e292:	3301      	adds	r3, #1
 800e294:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	ee07 3a90 	vmov	s15, r3
 800e29c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e2a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800e2a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2ac:	ee17 3a90 	vmov	r3, s15
 800e2b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e2b2:	e005      	b.n	800e2c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	61bb      	str	r3, [r7, #24]
      break;
 800e2b8:	e002      	b.n	800e2c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e2ba:	4b07      	ldr	r3, [pc, #28]	; (800e2d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e2bc:	61bb      	str	r3, [r7, #24]
      break;
 800e2be:	bf00      	nop
  }

  return sysclockfreq;
 800e2c0:	69bb      	ldr	r3, [r7, #24]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3724      	adds	r7, #36	; 0x24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	58024400 	.word	0x58024400
 800e2d4:	03d09000 	.word	0x03d09000
 800e2d8:	003d0900 	.word	0x003d0900
 800e2dc:	017d7840 	.word	0x017d7840
 800e2e0:	46000000 	.word	0x46000000
 800e2e4:	4c742400 	.word	0x4c742400
 800e2e8:	4a742400 	.word	0x4a742400
 800e2ec:	4bbebc20 	.word	0x4bbebc20

0800e2f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e2f6:	f7ff fe81 	bl	800dffc <HAL_RCC_GetSysClockFreq>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	4b10      	ldr	r3, [pc, #64]	; (800e340 <HAL_RCC_GetHCLKFreq+0x50>)
 800e2fe:	699b      	ldr	r3, [r3, #24]
 800e300:	0a1b      	lsrs	r3, r3, #8
 800e302:	f003 030f 	and.w	r3, r3, #15
 800e306:	490f      	ldr	r1, [pc, #60]	; (800e344 <HAL_RCC_GetHCLKFreq+0x54>)
 800e308:	5ccb      	ldrb	r3, [r1, r3]
 800e30a:	f003 031f 	and.w	r3, r3, #31
 800e30e:	fa22 f303 	lsr.w	r3, r2, r3
 800e312:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e314:	4b0a      	ldr	r3, [pc, #40]	; (800e340 <HAL_RCC_GetHCLKFreq+0x50>)
 800e316:	699b      	ldr	r3, [r3, #24]
 800e318:	f003 030f 	and.w	r3, r3, #15
 800e31c:	4a09      	ldr	r2, [pc, #36]	; (800e344 <HAL_RCC_GetHCLKFreq+0x54>)
 800e31e:	5cd3      	ldrb	r3, [r2, r3]
 800e320:	f003 031f 	and.w	r3, r3, #31
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	fa22 f303 	lsr.w	r3, r2, r3
 800e32a:	4a07      	ldr	r2, [pc, #28]	; (800e348 <HAL_RCC_GetHCLKFreq+0x58>)
 800e32c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e32e:	4a07      	ldr	r2, [pc, #28]	; (800e34c <HAL_RCC_GetHCLKFreq+0x5c>)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e334:	4b04      	ldr	r3, [pc, #16]	; (800e348 <HAL_RCC_GetHCLKFreq+0x58>)
 800e336:	681b      	ldr	r3, [r3, #0]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	58024400 	.word	0x58024400
 800e344:	0801a954 	.word	0x0801a954
 800e348:	240000cc 	.word	0x240000cc
 800e34c:	240000c8 	.word	0x240000c8

0800e350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e354:	f7ff ffcc 	bl	800e2f0 <HAL_RCC_GetHCLKFreq>
 800e358:	4602      	mov	r2, r0
 800e35a:	4b06      	ldr	r3, [pc, #24]	; (800e374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e35c:	69db      	ldr	r3, [r3, #28]
 800e35e:	091b      	lsrs	r3, r3, #4
 800e360:	f003 0307 	and.w	r3, r3, #7
 800e364:	4904      	ldr	r1, [pc, #16]	; (800e378 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e366:	5ccb      	ldrb	r3, [r1, r3]
 800e368:	f003 031f 	and.w	r3, r3, #31
 800e36c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e370:	4618      	mov	r0, r3
 800e372:	bd80      	pop	{r7, pc}
 800e374:	58024400 	.word	0x58024400
 800e378:	0801a954 	.word	0x0801a954

0800e37c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e380:	f7ff ffb6 	bl	800e2f0 <HAL_RCC_GetHCLKFreq>
 800e384:	4602      	mov	r2, r0
 800e386:	4b06      	ldr	r3, [pc, #24]	; (800e3a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e388:	69db      	ldr	r3, [r3, #28]
 800e38a:	0a1b      	lsrs	r3, r3, #8
 800e38c:	f003 0307 	and.w	r3, r3, #7
 800e390:	4904      	ldr	r1, [pc, #16]	; (800e3a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e392:	5ccb      	ldrb	r3, [r1, r3]
 800e394:	f003 031f 	and.w	r3, r3, #31
 800e398:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	58024400 	.word	0x58024400
 800e3a4:	0801a954 	.word	0x0801a954

0800e3a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	223f      	movs	r2, #63	; 0x3f
 800e3b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e3b8:	4b1a      	ldr	r3, [pc, #104]	; (800e424 <HAL_RCC_GetClockConfig+0x7c>)
 800e3ba:	691b      	ldr	r3, [r3, #16]
 800e3bc:	f003 0207 	and.w	r2, r3, #7
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800e3c4:	4b17      	ldr	r3, [pc, #92]	; (800e424 <HAL_RCC_GetClockConfig+0x7c>)
 800e3c6:	699b      	ldr	r3, [r3, #24]
 800e3c8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800e3d0:	4b14      	ldr	r3, [pc, #80]	; (800e424 <HAL_RCC_GetClockConfig+0x7c>)
 800e3d2:	699b      	ldr	r3, [r3, #24]
 800e3d4:	f003 020f 	and.w	r2, r3, #15
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800e3dc:	4b11      	ldr	r3, [pc, #68]	; (800e424 <HAL_RCC_GetClockConfig+0x7c>)
 800e3de:	699b      	ldr	r3, [r3, #24]
 800e3e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800e3e8:	4b0e      	ldr	r3, [pc, #56]	; (800e424 <HAL_RCC_GetClockConfig+0x7c>)
 800e3ea:	69db      	ldr	r3, [r3, #28]
 800e3ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800e3f4:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <HAL_RCC_GetClockConfig+0x7c>)
 800e3f6:	69db      	ldr	r3, [r3, #28]
 800e3f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800e400:	4b08      	ldr	r3, [pc, #32]	; (800e424 <HAL_RCC_GetClockConfig+0x7c>)
 800e402:	6a1b      	ldr	r3, [r3, #32]
 800e404:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e40c:	4b06      	ldr	r3, [pc, #24]	; (800e428 <HAL_RCC_GetClockConfig+0x80>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f003 020f 	and.w	r2, r3, #15
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	601a      	str	r2, [r3, #0]
}
 800e418:	bf00      	nop
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr
 800e424:	58024400 	.word	0x58024400
 800e428:	52002000 	.word	0x52002000

0800e42c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e42c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e430:	b0ca      	sub	sp, #296	; 0x128
 800e432:	af00      	add	r7, sp, #0
 800e434:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e438:	2300      	movs	r3, #0
 800e43a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e43e:	2300      	movs	r3, #0
 800e440:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800e450:	2500      	movs	r5, #0
 800e452:	ea54 0305 	orrs.w	r3, r4, r5
 800e456:	d049      	beq.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e45c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e45e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e462:	d02f      	beq.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e464:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e468:	d828      	bhi.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e46a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e46e:	d01a      	beq.n	800e4a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e474:	d822      	bhi.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e476:	2b00      	cmp	r3, #0
 800e478:	d003      	beq.n	800e482 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e47a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e47e:	d007      	beq.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e480:	e01c      	b.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e482:	4bb8      	ldr	r3, [pc, #736]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e486:	4ab7      	ldr	r2, [pc, #732]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e48c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e48e:	e01a      	b.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e494:	3308      	adds	r3, #8
 800e496:	2102      	movs	r1, #2
 800e498:	4618      	mov	r0, r3
 800e49a:	f002 fb61 	bl	8010b60 <RCCEx_PLL2_Config>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e4a4:	e00f      	b.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4aa:	3328      	adds	r3, #40	; 0x28
 800e4ac:	2102      	movs	r1, #2
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f002 fc08 	bl	8010cc4 <RCCEx_PLL3_Config>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e4ba:	e004      	b.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e4c2:	e000      	b.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e4c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d10a      	bne.n	800e4e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e4ce:	4ba5      	ldr	r3, [pc, #660]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e4d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4dc:	4aa1      	ldr	r2, [pc, #644]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e4de:	430b      	orrs	r3, r1
 800e4e0:	6513      	str	r3, [r2, #80]	; 0x50
 800e4e2:	e003      	b.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800e4f8:	f04f 0900 	mov.w	r9, #0
 800e4fc:	ea58 0309 	orrs.w	r3, r8, r9
 800e500:	d047      	beq.n	800e592 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e508:	2b04      	cmp	r3, #4
 800e50a:	d82a      	bhi.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e50c:	a201      	add	r2, pc, #4	; (adr r2, 800e514 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e512:	bf00      	nop
 800e514:	0800e529 	.word	0x0800e529
 800e518:	0800e537 	.word	0x0800e537
 800e51c:	0800e54d 	.word	0x0800e54d
 800e520:	0800e56b 	.word	0x0800e56b
 800e524:	0800e56b 	.word	0x0800e56b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e528:	4b8e      	ldr	r3, [pc, #568]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52c:	4a8d      	ldr	r2, [pc, #564]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e52e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e532:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e534:	e01a      	b.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e53a:	3308      	adds	r3, #8
 800e53c:	2100      	movs	r1, #0
 800e53e:	4618      	mov	r0, r3
 800e540:	f002 fb0e 	bl	8010b60 <RCCEx_PLL2_Config>
 800e544:	4603      	mov	r3, r0
 800e546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e54a:	e00f      	b.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e550:	3328      	adds	r3, #40	; 0x28
 800e552:	2100      	movs	r1, #0
 800e554:	4618      	mov	r0, r3
 800e556:	f002 fbb5 	bl	8010cc4 <RCCEx_PLL3_Config>
 800e55a:	4603      	mov	r3, r0
 800e55c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e560:	e004      	b.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e562:	2301      	movs	r3, #1
 800e564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e568:	e000      	b.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e56a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e56c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10a      	bne.n	800e58a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e574:	4b7b      	ldr	r3, [pc, #492]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e578:	f023 0107 	bic.w	r1, r3, #7
 800e57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e582:	4a78      	ldr	r2, [pc, #480]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e584:	430b      	orrs	r3, r1
 800e586:	6513      	str	r3, [r2, #80]	; 0x50
 800e588:	e003      	b.n	800e592 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e58a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e58e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800e59e:	f04f 0b00 	mov.w	fp, #0
 800e5a2:	ea5a 030b 	orrs.w	r3, sl, fp
 800e5a6:	d04c      	beq.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5b2:	d030      	beq.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e5b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5b8:	d829      	bhi.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e5ba:	2bc0      	cmp	r3, #192	; 0xc0
 800e5bc:	d02d      	beq.n	800e61a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e5be:	2bc0      	cmp	r3, #192	; 0xc0
 800e5c0:	d825      	bhi.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e5c2:	2b80      	cmp	r3, #128	; 0x80
 800e5c4:	d018      	beq.n	800e5f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e5c6:	2b80      	cmp	r3, #128	; 0x80
 800e5c8:	d821      	bhi.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d002      	beq.n	800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e5ce:	2b40      	cmp	r3, #64	; 0x40
 800e5d0:	d007      	beq.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e5d2:	e01c      	b.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5d4:	4b63      	ldr	r3, [pc, #396]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d8:	4a62      	ldr	r2, [pc, #392]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e5da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e5e0:	e01c      	b.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5e6:	3308      	adds	r3, #8
 800e5e8:	2100      	movs	r1, #0
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f002 fab8 	bl	8010b60 <RCCEx_PLL2_Config>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e5f6:	e011      	b.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5fc:	3328      	adds	r3, #40	; 0x28
 800e5fe:	2100      	movs	r1, #0
 800e600:	4618      	mov	r0, r3
 800e602:	f002 fb5f 	bl	8010cc4 <RCCEx_PLL3_Config>
 800e606:	4603      	mov	r3, r0
 800e608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e60c:	e006      	b.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e60e:	2301      	movs	r3, #1
 800e610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e614:	e002      	b.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e616:	bf00      	nop
 800e618:	e000      	b.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e61a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e61c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e624:	4b4f      	ldr	r3, [pc, #316]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e628:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800e62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e632:	4a4c      	ldr	r2, [pc, #304]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e634:	430b      	orrs	r3, r1
 800e636:	6513      	str	r3, [r2, #80]	; 0x50
 800e638:	e003      	b.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e63a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e63e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800e64e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e652:	2300      	movs	r3, #0
 800e654:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800e658:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800e65c:	460b      	mov	r3, r1
 800e65e:	4313      	orrs	r3, r2
 800e660:	d053      	beq.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e666:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e66a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e66e:	d035      	beq.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e674:	d82e      	bhi.n	800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e676:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e67a:	d031      	beq.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e67c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e680:	d828      	bhi.n	800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e686:	d01a      	beq.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e68c:	d822      	bhi.n	800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d003      	beq.n	800e69a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e696:	d007      	beq.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e698:	e01c      	b.n	800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e69a:	4b32      	ldr	r3, [pc, #200]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e69e:	4a31      	ldr	r2, [pc, #196]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e6a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e6a6:	e01c      	b.n	800e6e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6ac:	3308      	adds	r3, #8
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f002 fa55 	bl	8010b60 <RCCEx_PLL2_Config>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e6bc:	e011      	b.n	800e6e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6c2:	3328      	adds	r3, #40	; 0x28
 800e6c4:	2100      	movs	r1, #0
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f002 fafc 	bl	8010cc4 <RCCEx_PLL3_Config>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e6d2:	e006      	b.n	800e6e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e6da:	e002      	b.n	800e6e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e6dc:	bf00      	nop
 800e6de:	e000      	b.n	800e6e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d10b      	bne.n	800e702 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e6ea:	4b1e      	ldr	r3, [pc, #120]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e6ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6ee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800e6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e6fa:	4a1a      	ldr	r2, [pc, #104]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e6fc:	430b      	orrs	r3, r1
 800e6fe:	6593      	str	r3, [r2, #88]	; 0x58
 800e700:	e003      	b.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e706:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e712:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800e716:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e71a:	2300      	movs	r3, #0
 800e71c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e720:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800e724:	460b      	mov	r3, r1
 800e726:	4313      	orrs	r3, r2
 800e728:	d056      	beq.n	800e7d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e72e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e736:	d038      	beq.n	800e7aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e73c:	d831      	bhi.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e73e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e742:	d034      	beq.n	800e7ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e744:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e748:	d82b      	bhi.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e74a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e74e:	d01d      	beq.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e754:	d825      	bhi.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e756:	2b00      	cmp	r3, #0
 800e758:	d006      	beq.n	800e768 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e75a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e75e:	d00a      	beq.n	800e776 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e760:	e01f      	b.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e762:	bf00      	nop
 800e764:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e768:	4ba2      	ldr	r3, [pc, #648]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e76c:	4aa1      	ldr	r2, [pc, #644]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e76e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e774:	e01c      	b.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e77a:	3308      	adds	r3, #8
 800e77c:	2100      	movs	r1, #0
 800e77e:	4618      	mov	r0, r3
 800e780:	f002 f9ee 	bl	8010b60 <RCCEx_PLL2_Config>
 800e784:	4603      	mov	r3, r0
 800e786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e78a:	e011      	b.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e78c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e790:	3328      	adds	r3, #40	; 0x28
 800e792:	2100      	movs	r1, #0
 800e794:	4618      	mov	r0, r3
 800e796:	f002 fa95 	bl	8010cc4 <RCCEx_PLL3_Config>
 800e79a:	4603      	mov	r3, r0
 800e79c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e7a0:	e006      	b.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e7a8:	e002      	b.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e7aa:	bf00      	nop
 800e7ac:	e000      	b.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e7ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10b      	bne.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e7b8:	4b8e      	ldr	r3, [pc, #568]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7bc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800e7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e7c8:	4a8a      	ldr	r2, [pc, #552]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e7ca:	430b      	orrs	r3, r1
 800e7cc:	6593      	str	r3, [r2, #88]	; 0x58
 800e7ce:	e003      	b.n	800e7d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800e7e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e7ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	d03a      	beq.n	800e86e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800e7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7fe:	2b30      	cmp	r3, #48	; 0x30
 800e800:	d01f      	beq.n	800e842 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e802:	2b30      	cmp	r3, #48	; 0x30
 800e804:	d819      	bhi.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e806:	2b20      	cmp	r3, #32
 800e808:	d00c      	beq.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e80a:	2b20      	cmp	r3, #32
 800e80c:	d815      	bhi.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d019      	beq.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e812:	2b10      	cmp	r3, #16
 800e814:	d111      	bne.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e816:	4b77      	ldr	r3, [pc, #476]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e81a:	4a76      	ldr	r2, [pc, #472]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e81c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e820:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e822:	e011      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e828:	3308      	adds	r3, #8
 800e82a:	2102      	movs	r1, #2
 800e82c:	4618      	mov	r0, r3
 800e82e:	f002 f997 	bl	8010b60 <RCCEx_PLL2_Config>
 800e832:	4603      	mov	r3, r0
 800e834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e838:	e006      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e840:	e002      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e842:	bf00      	nop
 800e844:	e000      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e846:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10a      	bne.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e850:	4b68      	ldr	r3, [pc, #416]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e854:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800e858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e85c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e85e:	4a65      	ldr	r2, [pc, #404]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e860:	430b      	orrs	r3, r1
 800e862:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e864:	e003      	b.n	800e86e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e86a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e876:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e87a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e87e:	2300      	movs	r3, #0
 800e880:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e884:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800e888:	460b      	mov	r3, r1
 800e88a:	4313      	orrs	r3, r2
 800e88c:	d051      	beq.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e898:	d035      	beq.n	800e906 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800e89a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e89e:	d82e      	bhi.n	800e8fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e8a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e8a4:	d031      	beq.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e8a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e8aa:	d828      	bhi.n	800e8fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e8ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8b0:	d01a      	beq.n	800e8e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e8b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8b6:	d822      	bhi.n	800e8fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d003      	beq.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e8bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8c0:	d007      	beq.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800e8c2:	e01c      	b.n	800e8fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8c4:	4b4b      	ldr	r3, [pc, #300]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c8:	4a4a      	ldr	r2, [pc, #296]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e8ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e8d0:	e01c      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8d6:	3308      	adds	r3, #8
 800e8d8:	2100      	movs	r1, #0
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f002 f940 	bl	8010b60 <RCCEx_PLL2_Config>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e8e6:	e011      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8ec:	3328      	adds	r3, #40	; 0x28
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f002 f9e7 	bl	8010cc4 <RCCEx_PLL3_Config>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e8fc:	e006      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e8fe:	2301      	movs	r3, #1
 800e900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e904:	e002      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e906:	bf00      	nop
 800e908:	e000      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e90a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e90c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10a      	bne.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e914:	4b37      	ldr	r3, [pc, #220]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e918:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e922:	4a34      	ldr	r2, [pc, #208]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e924:	430b      	orrs	r3, r1
 800e926:	6513      	str	r3, [r2, #80]	; 0x50
 800e928:	e003      	b.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e92a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e92e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800e93e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e942:	2300      	movs	r3, #0
 800e944:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e948:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e94c:	460b      	mov	r3, r1
 800e94e:	4313      	orrs	r3, r2
 800e950:	d056      	beq.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e95c:	d033      	beq.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e95e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e962:	d82c      	bhi.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e964:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e968:	d02f      	beq.n	800e9ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e96a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e96e:	d826      	bhi.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e970:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e974:	d02b      	beq.n	800e9ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e976:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e97a:	d820      	bhi.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e97c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e980:	d012      	beq.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e986:	d81a      	bhi.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d022      	beq.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e98c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e990:	d115      	bne.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e996:	3308      	adds	r3, #8
 800e998:	2101      	movs	r1, #1
 800e99a:	4618      	mov	r0, r3
 800e99c:	f002 f8e0 	bl	8010b60 <RCCEx_PLL2_Config>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e9a6:	e015      	b.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9ac:	3328      	adds	r3, #40	; 0x28
 800e9ae:	2101      	movs	r1, #1
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f002 f987 	bl	8010cc4 <RCCEx_PLL3_Config>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e9bc:	e00a      	b.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9be:	2301      	movs	r3, #1
 800e9c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e9c4:	e006      	b.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e9c6:	bf00      	nop
 800e9c8:	e004      	b.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e9ca:	bf00      	nop
 800e9cc:	e002      	b.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e9ce:	bf00      	nop
 800e9d0:	e000      	b.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e9d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10d      	bne.n	800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e9dc:	4b05      	ldr	r3, [pc, #20]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e9de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9e0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9ea:	4a02      	ldr	r2, [pc, #8]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e9ec:	430b      	orrs	r3, r1
 800e9ee:	6513      	str	r3, [r2, #80]	; 0x50
 800e9f0:	e006      	b.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e9f2:	bf00      	nop
 800e9f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ea00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea08:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ea0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ea10:	2300      	movs	r3, #0
 800ea12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ea16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	d055      	beq.n	800eacc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ea20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ea28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea2c:	d033      	beq.n	800ea96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ea2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea32:	d82c      	bhi.n	800ea8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea38:	d02f      	beq.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ea3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea3e:	d826      	bhi.n	800ea8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ea44:	d02b      	beq.n	800ea9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ea46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ea4a:	d820      	bhi.n	800ea8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea50:	d012      	beq.n	800ea78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ea52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea56:	d81a      	bhi.n	800ea8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d022      	beq.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ea5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea60:	d115      	bne.n	800ea8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea66:	3308      	adds	r3, #8
 800ea68:	2101      	movs	r1, #1
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f002 f878 	bl	8010b60 <RCCEx_PLL2_Config>
 800ea70:	4603      	mov	r3, r0
 800ea72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ea76:	e015      	b.n	800eaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea7c:	3328      	adds	r3, #40	; 0x28
 800ea7e:	2101      	movs	r1, #1
 800ea80:	4618      	mov	r0, r3
 800ea82:	f002 f91f 	bl	8010cc4 <RCCEx_PLL3_Config>
 800ea86:	4603      	mov	r3, r0
 800ea88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ea8c:	e00a      	b.n	800eaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea94:	e006      	b.n	800eaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ea96:	bf00      	nop
 800ea98:	e004      	b.n	800eaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ea9a:	bf00      	nop
 800ea9c:	e002      	b.n	800eaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ea9e:	bf00      	nop
 800eaa0:	e000      	b.n	800eaa4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800eaa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eaa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10b      	bne.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800eaac:	4ba3      	ldr	r3, [pc, #652]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eaae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eab0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800eab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eab8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800eabc:	4a9f      	ldr	r2, [pc, #636]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eabe:	430b      	orrs	r3, r1
 800eac0:	6593      	str	r3, [r2, #88]	; 0x58
 800eac2:	e003      	b.n	800eacc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eac8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800eacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ead0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ead8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eadc:	2300      	movs	r3, #0
 800eade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800eae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800eae6:	460b      	mov	r3, r1
 800eae8:	4313      	orrs	r3, r2
 800eaea:	d037      	beq.n	800eb5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800eaec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eaf6:	d00e      	beq.n	800eb16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800eaf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eafc:	d816      	bhi.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d018      	beq.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800eb02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb06:	d111      	bne.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb08:	4b8c      	ldr	r3, [pc, #560]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb0c:	4a8b      	ldr	r2, [pc, #556]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800eb14:	e00f      	b.n	800eb36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb1a:	3308      	adds	r3, #8
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f002 f81e 	bl	8010b60 <RCCEx_PLL2_Config>
 800eb24:	4603      	mov	r3, r0
 800eb26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800eb2a:	e004      	b.n	800eb36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb32:	e000      	b.n	800eb36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800eb34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d10a      	bne.n	800eb54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800eb3e:	4b7f      	ldr	r3, [pc, #508]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800eb46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb4c:	4a7b      	ldr	r2, [pc, #492]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb4e:	430b      	orrs	r3, r1
 800eb50:	6513      	str	r3, [r2, #80]	; 0x50
 800eb52:	e003      	b.n	800eb5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800eb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800eb68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800eb72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800eb76:	460b      	mov	r3, r1
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	d039      	beq.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800eb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb82:	2b03      	cmp	r3, #3
 800eb84:	d81c      	bhi.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800eb86:	a201      	add	r2, pc, #4	; (adr r2, 800eb8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800eb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8c:	0800ebc9 	.word	0x0800ebc9
 800eb90:	0800eb9d 	.word	0x0800eb9d
 800eb94:	0800ebab 	.word	0x0800ebab
 800eb98:	0800ebc9 	.word	0x0800ebc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb9c:	4b67      	ldr	r3, [pc, #412]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba0:	4a66      	ldr	r2, [pc, #408]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800eba8:	e00f      	b.n	800ebca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ebaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebae:	3308      	adds	r3, #8
 800ebb0:	2102      	movs	r1, #2
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f001 ffd4 	bl	8010b60 <RCCEx_PLL2_Config>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ebbe:	e004      	b.n	800ebca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ebc6:	e000      	b.n	800ebca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ebc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10a      	bne.n	800ebe8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ebd2:	4b5a      	ldr	r3, [pc, #360]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ebd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebd6:	f023 0103 	bic.w	r1, r3, #3
 800ebda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebe0:	4a56      	ldr	r2, [pc, #344]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ebe2:	430b      	orrs	r3, r1
 800ebe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ebe6:	e003      	b.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ebf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ebfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ec00:	2300      	movs	r3, #0
 800ec02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ec06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	f000 809f 	beq.w	800ed50 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ec12:	4b4b      	ldr	r3, [pc, #300]	; (800ed40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4a4a      	ldr	r2, [pc, #296]	; (800ed40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ec18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ec1e:	f7f6 fa93 	bl	8005148 <HAL_GetTick>
 800ec22:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ec26:	e00b      	b.n	800ec40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ec28:	f7f6 fa8e 	bl	8005148 <HAL_GetTick>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	2b64      	cmp	r3, #100	; 0x64
 800ec36:	d903      	bls.n	800ec40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ec38:	2303      	movs	r3, #3
 800ec3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec3e:	e005      	b.n	800ec4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ec40:	4b3f      	ldr	r3, [pc, #252]	; (800ed40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d0ed      	beq.n	800ec28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ec4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d179      	bne.n	800ed48 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ec54:	4b39      	ldr	r3, [pc, #228]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ec58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ec60:	4053      	eors	r3, r2
 800ec62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d015      	beq.n	800ec96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ec6a:	4b34      	ldr	r3, [pc, #208]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ec76:	4b31      	ldr	r3, [pc, #196]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec7a:	4a30      	ldr	r2, [pc, #192]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ec82:	4b2e      	ldr	r3, [pc, #184]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec86:	4a2d      	ldr	r2, [pc, #180]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ec8e:	4a2b      	ldr	r2, [pc, #172]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ec90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ec94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ec96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ec9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eca2:	d118      	bne.n	800ecd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eca4:	f7f6 fa50 	bl	8005148 <HAL_GetTick>
 800eca8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ecac:	e00d      	b.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ecae:	f7f6 fa4b 	bl	8005148 <HAL_GetTick>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ecb8:	1ad2      	subs	r2, r2, r3
 800ecba:	f241 3388 	movw	r3, #5000	; 0x1388
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d903      	bls.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ecc2:	2303      	movs	r3, #3
 800ecc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800ecc8:	e005      	b.n	800ecd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ecca:	4b1c      	ldr	r3, [pc, #112]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecce:	f003 0302 	and.w	r3, r3, #2
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d0eb      	beq.n	800ecae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ecd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d129      	bne.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ecde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ece2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ece6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ecea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecee:	d10e      	bne.n	800ed0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ecf0:	4b12      	ldr	r3, [pc, #72]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ecf2:	691b      	ldr	r3, [r3, #16]
 800ecf4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ecf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ed00:	091a      	lsrs	r2, r3, #4
 800ed02:	4b10      	ldr	r3, [pc, #64]	; (800ed44 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ed04:	4013      	ands	r3, r2
 800ed06:	4a0d      	ldr	r2, [pc, #52]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed08:	430b      	orrs	r3, r1
 800ed0a:	6113      	str	r3, [r2, #16]
 800ed0c:	e005      	b.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ed0e:	4b0b      	ldr	r3, [pc, #44]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed10:	691b      	ldr	r3, [r3, #16]
 800ed12:	4a0a      	ldr	r2, [pc, #40]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ed18:	6113      	str	r3, [r2, #16]
 800ed1a:	4b08      	ldr	r3, [pc, #32]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed1c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ed1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ed26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed2a:	4a04      	ldr	r2, [pc, #16]	; (800ed3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ed2c:	430b      	orrs	r3, r1
 800ed2e:	6713      	str	r3, [r2, #112]	; 0x70
 800ed30:	e00e      	b.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ed32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800ed3a:	e009      	b.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ed3c:	58024400 	.word	0x58024400
 800ed40:	58024800 	.word	0x58024800
 800ed44:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ed50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed58:	f002 0301 	and.w	r3, r2, #1
 800ed5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ed60:	2300      	movs	r3, #0
 800ed62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ed66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	f000 8089 	beq.w	800ee84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ed72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed78:	2b28      	cmp	r3, #40	; 0x28
 800ed7a:	d86b      	bhi.n	800ee54 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ed7c:	a201      	add	r2, pc, #4	; (adr r2, 800ed84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ed7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed82:	bf00      	nop
 800ed84:	0800ee5d 	.word	0x0800ee5d
 800ed88:	0800ee55 	.word	0x0800ee55
 800ed8c:	0800ee55 	.word	0x0800ee55
 800ed90:	0800ee55 	.word	0x0800ee55
 800ed94:	0800ee55 	.word	0x0800ee55
 800ed98:	0800ee55 	.word	0x0800ee55
 800ed9c:	0800ee55 	.word	0x0800ee55
 800eda0:	0800ee55 	.word	0x0800ee55
 800eda4:	0800ee29 	.word	0x0800ee29
 800eda8:	0800ee55 	.word	0x0800ee55
 800edac:	0800ee55 	.word	0x0800ee55
 800edb0:	0800ee55 	.word	0x0800ee55
 800edb4:	0800ee55 	.word	0x0800ee55
 800edb8:	0800ee55 	.word	0x0800ee55
 800edbc:	0800ee55 	.word	0x0800ee55
 800edc0:	0800ee55 	.word	0x0800ee55
 800edc4:	0800ee3f 	.word	0x0800ee3f
 800edc8:	0800ee55 	.word	0x0800ee55
 800edcc:	0800ee55 	.word	0x0800ee55
 800edd0:	0800ee55 	.word	0x0800ee55
 800edd4:	0800ee55 	.word	0x0800ee55
 800edd8:	0800ee55 	.word	0x0800ee55
 800eddc:	0800ee55 	.word	0x0800ee55
 800ede0:	0800ee55 	.word	0x0800ee55
 800ede4:	0800ee5d 	.word	0x0800ee5d
 800ede8:	0800ee55 	.word	0x0800ee55
 800edec:	0800ee55 	.word	0x0800ee55
 800edf0:	0800ee55 	.word	0x0800ee55
 800edf4:	0800ee55 	.word	0x0800ee55
 800edf8:	0800ee55 	.word	0x0800ee55
 800edfc:	0800ee55 	.word	0x0800ee55
 800ee00:	0800ee55 	.word	0x0800ee55
 800ee04:	0800ee5d 	.word	0x0800ee5d
 800ee08:	0800ee55 	.word	0x0800ee55
 800ee0c:	0800ee55 	.word	0x0800ee55
 800ee10:	0800ee55 	.word	0x0800ee55
 800ee14:	0800ee55 	.word	0x0800ee55
 800ee18:	0800ee55 	.word	0x0800ee55
 800ee1c:	0800ee55 	.word	0x0800ee55
 800ee20:	0800ee55 	.word	0x0800ee55
 800ee24:	0800ee5d 	.word	0x0800ee5d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee2c:	3308      	adds	r3, #8
 800ee2e:	2101      	movs	r1, #1
 800ee30:	4618      	mov	r0, r3
 800ee32:	f001 fe95 	bl	8010b60 <RCCEx_PLL2_Config>
 800ee36:	4603      	mov	r3, r0
 800ee38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ee3c:	e00f      	b.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee42:	3328      	adds	r3, #40	; 0x28
 800ee44:	2101      	movs	r1, #1
 800ee46:	4618      	mov	r0, r3
 800ee48:	f001 ff3c 	bl	8010cc4 <RCCEx_PLL3_Config>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ee52:	e004      	b.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee54:	2301      	movs	r3, #1
 800ee56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee5a:	e000      	b.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ee5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d10a      	bne.n	800ee7c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ee66:	4bbf      	ldr	r3, [pc, #764]	; (800f164 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee6a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ee6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee74:	4abb      	ldr	r2, [pc, #748]	; (800f164 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee76:	430b      	orrs	r3, r1
 800ee78:	6553      	str	r3, [r2, #84]	; 0x54
 800ee7a:	e003      	b.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ee84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8c:	f002 0302 	and.w	r3, r2, #2
 800ee90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee94:	2300      	movs	r3, #0
 800ee96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ee9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ee9e:	460b      	mov	r3, r1
 800eea0:	4313      	orrs	r3, r2
 800eea2:	d041      	beq.n	800ef28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800eea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eeaa:	2b05      	cmp	r3, #5
 800eeac:	d824      	bhi.n	800eef8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800eeae:	a201      	add	r2, pc, #4	; (adr r2, 800eeb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800eeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb4:	0800ef01 	.word	0x0800ef01
 800eeb8:	0800eecd 	.word	0x0800eecd
 800eebc:	0800eee3 	.word	0x0800eee3
 800eec0:	0800ef01 	.word	0x0800ef01
 800eec4:	0800ef01 	.word	0x0800ef01
 800eec8:	0800ef01 	.word	0x0800ef01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eed0:	3308      	adds	r3, #8
 800eed2:	2101      	movs	r1, #1
 800eed4:	4618      	mov	r0, r3
 800eed6:	f001 fe43 	bl	8010b60 <RCCEx_PLL2_Config>
 800eeda:	4603      	mov	r3, r0
 800eedc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eee0:	e00f      	b.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eee6:	3328      	adds	r3, #40	; 0x28
 800eee8:	2101      	movs	r1, #1
 800eeea:	4618      	mov	r0, r3
 800eeec:	f001 feea 	bl	8010cc4 <RCCEx_PLL3_Config>
 800eef0:	4603      	mov	r3, r0
 800eef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eef6:	e004      	b.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eef8:	2301      	movs	r3, #1
 800eefa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eefe:	e000      	b.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ef00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10a      	bne.n	800ef20 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ef0a:	4b96      	ldr	r3, [pc, #600]	; (800f164 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ef0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef0e:	f023 0107 	bic.w	r1, r3, #7
 800ef12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef18:	4a92      	ldr	r2, [pc, #584]	; (800f164 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ef1a:	430b      	orrs	r3, r1
 800ef1c:	6553      	str	r3, [r2, #84]	; 0x54
 800ef1e:	e003      	b.n	800ef28 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ef28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef30:	f002 0304 	and.w	r3, r2, #4
 800ef34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ef38:	2300      	movs	r3, #0
 800ef3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ef3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ef42:	460b      	mov	r3, r1
 800ef44:	4313      	orrs	r3, r2
 800ef46:	d044      	beq.n	800efd2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ef48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ef50:	2b05      	cmp	r3, #5
 800ef52:	d825      	bhi.n	800efa0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ef54:	a201      	add	r2, pc, #4	; (adr r2, 800ef5c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ef56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef5a:	bf00      	nop
 800ef5c:	0800efa9 	.word	0x0800efa9
 800ef60:	0800ef75 	.word	0x0800ef75
 800ef64:	0800ef8b 	.word	0x0800ef8b
 800ef68:	0800efa9 	.word	0x0800efa9
 800ef6c:	0800efa9 	.word	0x0800efa9
 800ef70:	0800efa9 	.word	0x0800efa9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef78:	3308      	adds	r3, #8
 800ef7a:	2101      	movs	r1, #1
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f001 fdef 	bl	8010b60 <RCCEx_PLL2_Config>
 800ef82:	4603      	mov	r3, r0
 800ef84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ef88:	e00f      	b.n	800efaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef8e:	3328      	adds	r3, #40	; 0x28
 800ef90:	2101      	movs	r1, #1
 800ef92:	4618      	mov	r0, r3
 800ef94:	f001 fe96 	bl	8010cc4 <RCCEx_PLL3_Config>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ef9e:	e004      	b.n	800efaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800efa0:	2301      	movs	r3, #1
 800efa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800efa6:	e000      	b.n	800efaa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800efa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d10b      	bne.n	800efca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800efb2:	4b6c      	ldr	r3, [pc, #432]	; (800f164 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800efb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efb6:	f023 0107 	bic.w	r1, r3, #7
 800efba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800efc2:	4a68      	ldr	r2, [pc, #416]	; (800f164 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800efc4:	430b      	orrs	r3, r1
 800efc6:	6593      	str	r3, [r2, #88]	; 0x58
 800efc8:	e003      	b.n	800efd2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800efd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efda:	f002 0320 	and.w	r3, r2, #32
 800efde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800efe2:	2300      	movs	r3, #0
 800efe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800efe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800efec:	460b      	mov	r3, r1
 800efee:	4313      	orrs	r3, r2
 800eff0:	d055      	beq.n	800f09e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800eff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800effa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800effe:	d033      	beq.n	800f068 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f004:	d82c      	bhi.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f00a:	d02f      	beq.n	800f06c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f00c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f010:	d826      	bhi.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f012:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f016:	d02b      	beq.n	800f070 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f018:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f01c:	d820      	bhi.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f01e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f022:	d012      	beq.n	800f04a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f028:	d81a      	bhi.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d022      	beq.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f02e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f032:	d115      	bne.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f038:	3308      	adds	r3, #8
 800f03a:	2100      	movs	r1, #0
 800f03c:	4618      	mov	r0, r3
 800f03e:	f001 fd8f 	bl	8010b60 <RCCEx_PLL2_Config>
 800f042:	4603      	mov	r3, r0
 800f044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f048:	e015      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f04e:	3328      	adds	r3, #40	; 0x28
 800f050:	2102      	movs	r1, #2
 800f052:	4618      	mov	r0, r3
 800f054:	f001 fe36 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f058:	4603      	mov	r3, r0
 800f05a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f05e:	e00a      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f060:	2301      	movs	r3, #1
 800f062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f066:	e006      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f068:	bf00      	nop
 800f06a:	e004      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f06c:	bf00      	nop
 800f06e:	e002      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f070:	bf00      	nop
 800f072:	e000      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f074:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d10b      	bne.n	800f096 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f07e:	4b39      	ldr	r3, [pc, #228]	; (800f164 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f082:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f08e:	4a35      	ldr	r2, [pc, #212]	; (800f164 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f090:	430b      	orrs	r3, r1
 800f092:	6553      	str	r3, [r2, #84]	; 0x54
 800f094:	e003      	b.n	800f09e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f09a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f0aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f0b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	d058      	beq.n	800f170 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f0c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f0ca:	d033      	beq.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f0cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f0d0:	d82c      	bhi.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0d6:	d02f      	beq.n	800f138 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f0d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0dc:	d826      	bhi.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f0e2:	d02b      	beq.n	800f13c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f0e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f0e8:	d820      	bhi.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f0ee:	d012      	beq.n	800f116 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f0f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f0f4:	d81a      	bhi.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d022      	beq.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f0fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0fe:	d115      	bne.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f104:	3308      	adds	r3, #8
 800f106:	2100      	movs	r1, #0
 800f108:	4618      	mov	r0, r3
 800f10a:	f001 fd29 	bl	8010b60 <RCCEx_PLL2_Config>
 800f10e:	4603      	mov	r3, r0
 800f110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f114:	e015      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f11a:	3328      	adds	r3, #40	; 0x28
 800f11c:	2102      	movs	r1, #2
 800f11e:	4618      	mov	r0, r3
 800f120:	f001 fdd0 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f124:	4603      	mov	r3, r0
 800f126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f12a:	e00a      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f12c:	2301      	movs	r3, #1
 800f12e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f132:	e006      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f134:	bf00      	nop
 800f136:	e004      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f138:	bf00      	nop
 800f13a:	e002      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f13c:	bf00      	nop
 800f13e:	e000      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f140:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f146:	2b00      	cmp	r3, #0
 800f148:	d10e      	bne.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f14a:	4b06      	ldr	r3, [pc, #24]	; (800f164 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f14e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f15a:	4a02      	ldr	r2, [pc, #8]	; (800f164 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f15c:	430b      	orrs	r3, r1
 800f15e:	6593      	str	r3, [r2, #88]	; 0x58
 800f160:	e006      	b.n	800f170 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f162:	bf00      	nop
 800f164:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f16c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f178:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f17c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f180:	2300      	movs	r3, #0
 800f182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f186:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f18a:	460b      	mov	r3, r1
 800f18c:	4313      	orrs	r3, r2
 800f18e:	d055      	beq.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f194:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f198:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f19c:	d033      	beq.n	800f206 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f19e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f1a2:	d82c      	bhi.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f1a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1a8:	d02f      	beq.n	800f20a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f1aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1ae:	d826      	bhi.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f1b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f1b4:	d02b      	beq.n	800f20e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f1b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f1ba:	d820      	bhi.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f1bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1c0:	d012      	beq.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f1c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1c6:	d81a      	bhi.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d022      	beq.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f1cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1d0:	d115      	bne.n	800f1fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1d6:	3308      	adds	r3, #8
 800f1d8:	2100      	movs	r1, #0
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f001 fcc0 	bl	8010b60 <RCCEx_PLL2_Config>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f1e6:	e015      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1ec:	3328      	adds	r3, #40	; 0x28
 800f1ee:	2102      	movs	r1, #2
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f001 fd67 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f1fc:	e00a      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1fe:	2301      	movs	r3, #1
 800f200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f204:	e006      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f206:	bf00      	nop
 800f208:	e004      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f20a:	bf00      	nop
 800f20c:	e002      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f20e:	bf00      	nop
 800f210:	e000      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f212:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d10b      	bne.n	800f234 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f21c:	4ba1      	ldr	r3, [pc, #644]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f21e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f220:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800f224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f228:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f22c:	4a9d      	ldr	r2, [pc, #628]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f22e:	430b      	orrs	r3, r1
 800f230:	6593      	str	r3, [r2, #88]	; 0x58
 800f232:	e003      	b.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f002 0308 	and.w	r3, r2, #8
 800f248:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f24c:	2300      	movs	r3, #0
 800f24e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f252:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800f256:	460b      	mov	r3, r1
 800f258:	4313      	orrs	r3, r2
 800f25a:	d01e      	beq.n	800f29a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f268:	d10c      	bne.n	800f284 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f26e:	3328      	adds	r3, #40	; 0x28
 800f270:	2102      	movs	r1, #2
 800f272:	4618      	mov	r0, r3
 800f274:	f001 fd26 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d002      	beq.n	800f284 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f27e:	2301      	movs	r3, #1
 800f280:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f284:	4b87      	ldr	r3, [pc, #540]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f288:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f294:	4a83      	ldr	r2, [pc, #524]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f296:	430b      	orrs	r3, r1
 800f298:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	f002 0310 	and.w	r3, r2, #16
 800f2a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f2b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	d01e      	beq.n	800f2f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f2c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2c6:	d10c      	bne.n	800f2e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2cc:	3328      	adds	r3, #40	; 0x28
 800f2ce:	2102      	movs	r1, #2
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f001 fcf7 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d002      	beq.n	800f2e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f2e2:	4b70      	ldr	r3, [pc, #448]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f2e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f2f2:	4a6c      	ldr	r2, [pc, #432]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f2f4:	430b      	orrs	r3, r1
 800f2f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f300:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800f304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f308:	2300      	movs	r3, #0
 800f30a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f30e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800f312:	460b      	mov	r3, r1
 800f314:	4313      	orrs	r3, r2
 800f316:	d03e      	beq.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f31c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f324:	d022      	beq.n	800f36c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f32a:	d81b      	bhi.n	800f364 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d003      	beq.n	800f338 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f334:	d00b      	beq.n	800f34e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f336:	e015      	b.n	800f364 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f33c:	3308      	adds	r3, #8
 800f33e:	2100      	movs	r1, #0
 800f340:	4618      	mov	r0, r3
 800f342:	f001 fc0d 	bl	8010b60 <RCCEx_PLL2_Config>
 800f346:	4603      	mov	r3, r0
 800f348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f34c:	e00f      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f352:	3328      	adds	r3, #40	; 0x28
 800f354:	2102      	movs	r1, #2
 800f356:	4618      	mov	r0, r3
 800f358:	f001 fcb4 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f35c:	4603      	mov	r3, r0
 800f35e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f362:	e004      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f364:	2301      	movs	r3, #1
 800f366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f36a:	e000      	b.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f36c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f36e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f372:	2b00      	cmp	r3, #0
 800f374:	d10b      	bne.n	800f38e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f376:	4b4b      	ldr	r3, [pc, #300]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f37a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800f37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f382:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f386:	4a47      	ldr	r2, [pc, #284]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f388:	430b      	orrs	r3, r1
 800f38a:	6593      	str	r3, [r2, #88]	; 0x58
 800f38c:	e003      	b.n	800f396 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f38e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f392:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800f3a2:	67bb      	str	r3, [r7, #120]	; 0x78
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f3a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	d03b      	beq.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f3be:	d01f      	beq.n	800f400 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f3c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f3c4:	d818      	bhi.n	800f3f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f3c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3ca:	d003      	beq.n	800f3d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f3cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f3d0:	d007      	beq.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f3d2:	e011      	b.n	800f3f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f3d4:	4b33      	ldr	r3, [pc, #204]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d8:	4a32      	ldr	r2, [pc, #200]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f3da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f3e0:	e00f      	b.n	800f402 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3e6:	3328      	adds	r3, #40	; 0x28
 800f3e8:	2101      	movs	r1, #1
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f001 fc6a 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f3f6:	e004      	b.n	800f402 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f3fe:	e000      	b.n	800f402 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f400:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f406:	2b00      	cmp	r3, #0
 800f408:	d10b      	bne.n	800f422 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f40a:	4b26      	ldr	r3, [pc, #152]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f40e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f41a:	4a22      	ldr	r2, [pc, #136]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f41c:	430b      	orrs	r3, r1
 800f41e:	6553      	str	r3, [r2, #84]	; 0x54
 800f420:	e003      	b.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f432:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800f436:	673b      	str	r3, [r7, #112]	; 0x70
 800f438:	2300      	movs	r3, #0
 800f43a:	677b      	str	r3, [r7, #116]	; 0x74
 800f43c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800f440:	460b      	mov	r3, r1
 800f442:	4313      	orrs	r3, r2
 800f444:	d034      	beq.n	800f4b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f44a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d003      	beq.n	800f458 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f454:	d007      	beq.n	800f466 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f456:	e011      	b.n	800f47c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f458:	4b12      	ldr	r3, [pc, #72]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45c:	4a11      	ldr	r2, [pc, #68]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f45e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f464:	e00e      	b.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f46a:	3308      	adds	r3, #8
 800f46c:	2102      	movs	r1, #2
 800f46e:	4618      	mov	r0, r3
 800f470:	f001 fb76 	bl	8010b60 <RCCEx_PLL2_Config>
 800f474:	4603      	mov	r3, r0
 800f476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f47a:	e003      	b.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f47c:	2301      	movs	r3, #1
 800f47e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f482:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d10d      	bne.n	800f4a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f48c:	4b05      	ldr	r3, [pc, #20]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f48e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f49a:	4a02      	ldr	r2, [pc, #8]	; (800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f49c:	430b      	orrs	r3, r1
 800f49e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f4a0:	e006      	b.n	800f4b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f4a2:	bf00      	nop
 800f4a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800f4bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4be:	2300      	movs	r3, #0
 800f4c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	d00c      	beq.n	800f4e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4d0:	3328      	adds	r3, #40	; 0x28
 800f4d2:	2102      	movs	r1, #2
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f001 fbf5 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d002      	beq.n	800f4e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800f4f2:	663b      	str	r3, [r7, #96]	; 0x60
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	667b      	str	r3, [r7, #100]	; 0x64
 800f4f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	4313      	orrs	r3, r2
 800f500:	d038      	beq.n	800f574 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f50a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f50e:	d018      	beq.n	800f542 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f514:	d811      	bhi.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f51a:	d014      	beq.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f51c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f520:	d80b      	bhi.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f522:	2b00      	cmp	r3, #0
 800f524:	d011      	beq.n	800f54a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f52a:	d106      	bne.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f52c:	4bc3      	ldr	r3, [pc, #780]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f530:	4ac2      	ldr	r2, [pc, #776]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f538:	e008      	b.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f53a:	2301      	movs	r3, #1
 800f53c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f540:	e004      	b.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f542:	bf00      	nop
 800f544:	e002      	b.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f546:	bf00      	nop
 800f548:	e000      	b.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f54a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f54c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f550:	2b00      	cmp	r3, #0
 800f552:	d10b      	bne.n	800f56c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f554:	4bb9      	ldr	r3, [pc, #740]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f558:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f564:	4ab5      	ldr	r2, [pc, #724]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f566:	430b      	orrs	r3, r1
 800f568:	6553      	str	r3, [r2, #84]	; 0x54
 800f56a:	e003      	b.n	800f574 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f56c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800f580:	65bb      	str	r3, [r7, #88]	; 0x58
 800f582:	2300      	movs	r3, #0
 800f584:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f586:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800f58a:	460b      	mov	r3, r1
 800f58c:	4313      	orrs	r3, r2
 800f58e:	d009      	beq.n	800f5a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f590:	4baa      	ldr	r3, [pc, #680]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f594:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f59c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f59e:	4aa7      	ldr	r2, [pc, #668]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5a0:	430b      	orrs	r3, r1
 800f5a2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800f5b0:	653b      	str	r3, [r7, #80]	; 0x50
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	657b      	str	r3, [r7, #84]	; 0x54
 800f5b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	d00a      	beq.n	800f5d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f5c0:	4b9e      	ldr	r3, [pc, #632]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5c2:	691b      	ldr	r3, [r3, #16]
 800f5c4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800f5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f5d0:	4a9a      	ldr	r2, [pc, #616]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5d2:	430b      	orrs	r3, r1
 800f5d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5de:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800f5e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	d009      	beq.n	800f606 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f5f2:	4b92      	ldr	r3, [pc, #584]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f5f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5f6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800f5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f600:	4a8e      	ldr	r2, [pc, #568]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f602:	430b      	orrs	r3, r1
 800f604:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800f612:	643b      	str	r3, [r7, #64]	; 0x40
 800f614:	2300      	movs	r3, #0
 800f616:	647b      	str	r3, [r7, #68]	; 0x44
 800f618:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800f61c:	460b      	mov	r3, r1
 800f61e:	4313      	orrs	r3, r2
 800f620:	d00e      	beq.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f622:	4b86      	ldr	r3, [pc, #536]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	4a85      	ldr	r2, [pc, #532]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f628:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f62c:	6113      	str	r3, [r2, #16]
 800f62e:	4b83      	ldr	r3, [pc, #524]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f630:	6919      	ldr	r1, [r3, #16]
 800f632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f636:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f63a:	4a80      	ldr	r2, [pc, #512]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f63c:	430b      	orrs	r3, r1
 800f63e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f648:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800f64c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f64e:	2300      	movs	r3, #0
 800f650:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f652:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800f656:	460b      	mov	r3, r1
 800f658:	4313      	orrs	r3, r2
 800f65a:	d009      	beq.n	800f670 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f65c:	4b77      	ldr	r3, [pc, #476]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f65e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f660:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f66a:	4a74      	ldr	r2, [pc, #464]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f66c:	430b      	orrs	r3, r1
 800f66e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800f67c:	633b      	str	r3, [r7, #48]	; 0x30
 800f67e:	2300      	movs	r3, #0
 800f680:	637b      	str	r3, [r7, #52]	; 0x34
 800f682:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800f686:	460b      	mov	r3, r1
 800f688:	4313      	orrs	r3, r2
 800f68a:	d00a      	beq.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f68c:	4b6b      	ldr	r3, [pc, #428]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f68e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f690:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800f694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f69c:	4a67      	ldr	r2, [pc, #412]	; (800f83c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f69e:	430b      	orrs	r3, r1
 800f6a0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	62b9      	str	r1, [r7, #40]	; 0x28
 800f6ae:	f003 0301 	and.w	r3, r3, #1
 800f6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	d011      	beq.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6c2:	3308      	adds	r3, #8
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f001 fa4a 	bl	8010b60 <RCCEx_PLL2_Config>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f6d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d003      	beq.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	6239      	str	r1, [r7, #32]
 800f6ee:	f003 0302 	and.w	r3, r3, #2
 800f6f2:	627b      	str	r3, [r7, #36]	; 0x24
 800f6f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	d011      	beq.n	800f722 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f702:	3308      	adds	r3, #8
 800f704:	2101      	movs	r1, #1
 800f706:	4618      	mov	r0, r3
 800f708:	f001 fa2a 	bl	8010b60 <RCCEx_PLL2_Config>
 800f70c:	4603      	mov	r3, r0
 800f70e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f716:	2b00      	cmp	r3, #0
 800f718:	d003      	beq.n	800f722 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f71a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f71e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	2100      	movs	r1, #0
 800f72c:	61b9      	str	r1, [r7, #24]
 800f72e:	f003 0304 	and.w	r3, r3, #4
 800f732:	61fb      	str	r3, [r7, #28]
 800f734:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f738:	460b      	mov	r3, r1
 800f73a:	4313      	orrs	r3, r2
 800f73c:	d011      	beq.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f742:	3308      	adds	r3, #8
 800f744:	2102      	movs	r1, #2
 800f746:	4618      	mov	r0, r3
 800f748:	f001 fa0a 	bl	8010b60 <RCCEx_PLL2_Config>
 800f74c:	4603      	mov	r3, r0
 800f74e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f756:	2b00      	cmp	r3, #0
 800f758:	d003      	beq.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f75a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f75e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76a:	2100      	movs	r1, #0
 800f76c:	6139      	str	r1, [r7, #16]
 800f76e:	f003 0308 	and.w	r3, r3, #8
 800f772:	617b      	str	r3, [r7, #20]
 800f774:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f778:	460b      	mov	r3, r1
 800f77a:	4313      	orrs	r3, r2
 800f77c:	d011      	beq.n	800f7a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f782:	3328      	adds	r3, #40	; 0x28
 800f784:	2100      	movs	r1, #0
 800f786:	4618      	mov	r0, r3
 800f788:	f001 fa9c 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f78c:	4603      	mov	r3, r0
 800f78e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800f792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f796:	2b00      	cmp	r3, #0
 800f798:	d003      	beq.n	800f7a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f79a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f79e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	f003 0310 	and.w	r3, r3, #16
 800f7b2:	60fb      	str	r3, [r7, #12]
 800f7b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	d011      	beq.n	800f7e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7c2:	3328      	adds	r3, #40	; 0x28
 800f7c4:	2101      	movs	r1, #1
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f001 fa7c 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f7d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d003      	beq.n	800f7e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ea:	2100      	movs	r1, #0
 800f7ec:	6039      	str	r1, [r7, #0]
 800f7ee:	f003 0320 	and.w	r3, r3, #32
 800f7f2:	607b      	str	r3, [r7, #4]
 800f7f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	d011      	beq.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f802:	3328      	adds	r3, #40	; 0x28
 800f804:	2102      	movs	r1, #2
 800f806:	4618      	mov	r0, r3
 800f808:	f001 fa5c 	bl	8010cc4 <RCCEx_PLL3_Config>
 800f80c:	4603      	mov	r3, r0
 800f80e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800f812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f816:	2b00      	cmp	r3, #0
 800f818:	d003      	beq.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f81a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f81e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800f822:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800f826:	2b00      	cmp	r3, #0
 800f828:	d101      	bne.n	800f82e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800f82a:	2300      	movs	r3, #0
 800f82c:	e000      	b.n	800f830 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800f82e:	2301      	movs	r3, #1
}
 800f830:	4618      	mov	r0, r3
 800f832:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f836:	46bd      	mov	sp, r7
 800f838:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f83c:	58024400 	.word	0x58024400

0800f840 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b090      	sub	sp, #64	; 0x40
 800f844:	af00      	add	r7, sp, #0
 800f846:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f84a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f84e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f852:	430b      	orrs	r3, r1
 800f854:	f040 8094 	bne.w	800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f858:	4b9e      	ldr	r3, [pc, #632]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f85a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f85c:	f003 0307 	and.w	r3, r3, #7
 800f860:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	2b04      	cmp	r3, #4
 800f866:	f200 8087 	bhi.w	800f978 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f86a:	a201      	add	r2, pc, #4	; (adr r2, 800f870 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f870:	0800f885 	.word	0x0800f885
 800f874:	0800f8ad 	.word	0x0800f8ad
 800f878:	0800f8d5 	.word	0x0800f8d5
 800f87c:	0800f971 	.word	0x0800f971
 800f880:	0800f8fd 	.word	0x0800f8fd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f884:	4b93      	ldr	r3, [pc, #588]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f88c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f890:	d108      	bne.n	800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f896:	4618      	mov	r0, r3
 800f898:	f001 f810 	bl	80108bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8a0:	f000 bd45 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8a8:	f000 bd41 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f8ac:	4b89      	ldr	r3, [pc, #548]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f8b8:	d108      	bne.n	800f8cc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8ba:	f107 0318 	add.w	r3, r7, #24
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 fd54 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f8c4:	69bb      	ldr	r3, [r7, #24]
 800f8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8c8:	f000 bd31 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8d0:	f000 bd2d 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f8d4:	4b7f      	ldr	r3, [pc, #508]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f8dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8e0:	d108      	bne.n	800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8e2:	f107 030c 	add.w	r3, r7, #12
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f000 fe94 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8f0:	f000 bd1d 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8f8:	f000 bd19 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f8fc:	4b75      	ldr	r3, [pc, #468]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f8fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f900:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f904:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f906:	4b73      	ldr	r3, [pc, #460]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f003 0304 	and.w	r3, r3, #4
 800f90e:	2b04      	cmp	r3, #4
 800f910:	d10c      	bne.n	800f92c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f914:	2b00      	cmp	r3, #0
 800f916:	d109      	bne.n	800f92c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f918:	4b6e      	ldr	r3, [pc, #440]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	08db      	lsrs	r3, r3, #3
 800f91e:	f003 0303 	and.w	r3, r3, #3
 800f922:	4a6d      	ldr	r2, [pc, #436]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f924:	fa22 f303 	lsr.w	r3, r2, r3
 800f928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f92a:	e01f      	b.n	800f96c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f92c:	4b69      	ldr	r3, [pc, #420]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f938:	d106      	bne.n	800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f93c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f940:	d102      	bne.n	800f948 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f942:	4b66      	ldr	r3, [pc, #408]	; (800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f944:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f946:	e011      	b.n	800f96c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f948:	4b62      	ldr	r3, [pc, #392]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f954:	d106      	bne.n	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f95c:	d102      	bne.n	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f95e:	4b60      	ldr	r3, [pc, #384]	; (800fae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f960:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f962:	e003      	b.n	800f96c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f964:	2300      	movs	r3, #0
 800f966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f968:	f000 bce1 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f96c:	f000 bcdf 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f970:	4b5c      	ldr	r3, [pc, #368]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f974:	f000 bcdb 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f978:	2300      	movs	r3, #0
 800f97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f97c:	f000 bcd7 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f980:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f984:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f988:	430b      	orrs	r3, r1
 800f98a:	f040 80ad 	bne.w	800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f98e:	4b51      	ldr	r3, [pc, #324]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f992:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800f996:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f99e:	d056      	beq.n	800fa4e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9a6:	f200 8090 	bhi.w	800faca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ac:	2bc0      	cmp	r3, #192	; 0xc0
 800f9ae:	f000 8088 	beq.w	800fac2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b4:	2bc0      	cmp	r3, #192	; 0xc0
 800f9b6:	f200 8088 	bhi.w	800faca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9bc:	2b80      	cmp	r3, #128	; 0x80
 800f9be:	d032      	beq.n	800fa26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c2:	2b80      	cmp	r3, #128	; 0x80
 800f9c4:	f200 8081 	bhi.w	800faca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d003      	beq.n	800f9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d0:	2b40      	cmp	r3, #64	; 0x40
 800f9d2:	d014      	beq.n	800f9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f9d4:	e079      	b.n	800faca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f9d6:	4b3f      	ldr	r3, [pc, #252]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f9e2:	d108      	bne.n	800f9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f9e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f000 ff67 	bl	80108bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9f2:	f000 bc9c 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9fa:	f000 bc98 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f9fe:	4b35      	ldr	r3, [pc, #212]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fa0a:	d108      	bne.n	800fa1e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa0c:	f107 0318 	add.w	r3, r7, #24
 800fa10:	4618      	mov	r0, r3
 800fa12:	f000 fcab 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fa16:	69bb      	ldr	r3, [r7, #24]
 800fa18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa1a:	f000 bc88 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa22:	f000 bc84 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fa26:	4b2b      	ldr	r3, [pc, #172]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa32:	d108      	bne.n	800fa46 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa34:	f107 030c 	add.w	r3, r7, #12
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f000 fdeb 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa42:	f000 bc74 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa46:	2300      	movs	r3, #0
 800fa48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa4a:	f000 bc70 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fa4e:	4b21      	ldr	r3, [pc, #132]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fa56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fa58:	4b1e      	ldr	r3, [pc, #120]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f003 0304 	and.w	r3, r3, #4
 800fa60:	2b04      	cmp	r3, #4
 800fa62:	d10c      	bne.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800fa64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d109      	bne.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fa6a:	4b1a      	ldr	r3, [pc, #104]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	08db      	lsrs	r3, r3, #3
 800fa70:	f003 0303 	and.w	r3, r3, #3
 800fa74:	4a18      	ldr	r2, [pc, #96]	; (800fad8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fa76:	fa22 f303 	lsr.w	r3, r2, r3
 800fa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa7c:	e01f      	b.n	800fabe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fa7e:	4b15      	ldr	r3, [pc, #84]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa8a:	d106      	bne.n	800fa9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800fa8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa92:	d102      	bne.n	800fa9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fa94:	4b11      	ldr	r3, [pc, #68]	; (800fadc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fa96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa98:	e011      	b.n	800fabe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fa9a:	4b0e      	ldr	r3, [pc, #56]	; (800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800faa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800faa6:	d106      	bne.n	800fab6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800faa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800faae:	d102      	bne.n	800fab6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fab0:	4b0b      	ldr	r3, [pc, #44]	; (800fae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fab4:	e003      	b.n	800fabe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fab6:	2300      	movs	r3, #0
 800fab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800faba:	f000 bc38 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fabe:	f000 bc36 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fac2:	4b08      	ldr	r3, [pc, #32]	; (800fae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fac6:	f000 bc32 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800faca:	2300      	movs	r3, #0
 800facc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800face:	f000 bc2e 	b.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fad2:	bf00      	nop
 800fad4:	58024400 	.word	0x58024400
 800fad8:	03d09000 	.word	0x03d09000
 800fadc:	003d0900 	.word	0x003d0900
 800fae0:	017d7840 	.word	0x017d7840
 800fae4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800fae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800faf0:	430b      	orrs	r3, r1
 800faf2:	f040 809c 	bne.w	800fc2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800faf6:	4b9e      	ldr	r3, [pc, #632]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800faf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fafa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800fafe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800fb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fb06:	d054      	beq.n	800fbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800fb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fb0e:	f200 808b 	bhi.w	800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800fb18:	f000 8083 	beq.w	800fc22 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800fb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800fb22:	f200 8081 	bhi.w	800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fb2c:	d02f      	beq.n	800fb8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800fb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fb34:	d878      	bhi.n	800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d004      	beq.n	800fb46 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800fb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb42:	d012      	beq.n	800fb6a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800fb44:	e070      	b.n	800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fb46:	4b8a      	ldr	r3, [pc, #552]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fb52:	d107      	bne.n	800fb64 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f000 feaf 	bl	80108bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb62:	e3e4      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb68:	e3e1      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fb6a:	4b81      	ldr	r3, [pc, #516]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb76:	d107      	bne.n	800fb88 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb78:	f107 0318 	add.w	r3, r7, #24
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f000 fbf5 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb86:	e3d2      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb8c:	e3cf      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fb8e:	4b78      	ldr	r3, [pc, #480]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fb96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb9a:	d107      	bne.n	800fbac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb9c:	f107 030c 	add.w	r3, r7, #12
 800fba0:	4618      	mov	r0, r3
 800fba2:	f000 fd37 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbaa:	e3c0      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fbac:	2300      	movs	r3, #0
 800fbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbb0:	e3bd      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fbb2:	4b6f      	ldr	r3, [pc, #444]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fbb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fbba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fbbc:	4b6c      	ldr	r3, [pc, #432]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f003 0304 	and.w	r3, r3, #4
 800fbc4:	2b04      	cmp	r3, #4
 800fbc6:	d10c      	bne.n	800fbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800fbc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d109      	bne.n	800fbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fbce:	4b68      	ldr	r3, [pc, #416]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	08db      	lsrs	r3, r3, #3
 800fbd4:	f003 0303 	and.w	r3, r3, #3
 800fbd8:	4a66      	ldr	r2, [pc, #408]	; (800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800fbda:	fa22 f303 	lsr.w	r3, r2, r3
 800fbde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbe0:	e01e      	b.n	800fc20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fbe2:	4b63      	ldr	r3, [pc, #396]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbee:	d106      	bne.n	800fbfe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800fbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbf6:	d102      	bne.n	800fbfe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fbf8:	4b5f      	ldr	r3, [pc, #380]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800fbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbfc:	e010      	b.n	800fc20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fbfe:	4b5c      	ldr	r3, [pc, #368]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fc0a:	d106      	bne.n	800fc1a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800fc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc12:	d102      	bne.n	800fc1a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fc14:	4b59      	ldr	r3, [pc, #356]	; (800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800fc16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc18:	e002      	b.n	800fc20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fc1e:	e386      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fc20:	e385      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fc22:	4b57      	ldr	r3, [pc, #348]	; (800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800fc24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc26:	e382      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc2c:	e37f      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800fc2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc32:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800fc36:	430b      	orrs	r3, r1
 800fc38:	f040 80a7 	bne.w	800fd8a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800fc3c:	4b4c      	ldr	r3, [pc, #304]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fc3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc40:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800fc44:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800fc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fc4c:	d055      	beq.n	800fcfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800fc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fc54:	f200 8096 	bhi.w	800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800fc5e:	f000 8084 	beq.w	800fd6a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800fc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800fc68:	f200 808c 	bhi.w	800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc72:	d030      	beq.n	800fcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800fc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc7a:	f200 8083 	bhi.w	800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800fc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d004      	beq.n	800fc8e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800fc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fc8a:	d012      	beq.n	800fcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800fc8c:	e07a      	b.n	800fd84 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fc8e:	4b38      	ldr	r3, [pc, #224]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc9a:	d107      	bne.n	800fcac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fc9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fca0:	4618      	mov	r0, r3
 800fca2:	f000 fe0b 	bl	80108bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcaa:	e340      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fcac:	2300      	movs	r3, #0
 800fcae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcb0:	e33d      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fcb2:	4b2f      	ldr	r3, [pc, #188]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fcba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fcbe:	d107      	bne.n	800fcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcc0:	f107 0318 	add.w	r3, r7, #24
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f000 fb51 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcce:	e32e      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcd4:	e32b      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fcd6:	4b26      	ldr	r3, [pc, #152]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fcde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fce2:	d107      	bne.n	800fcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fce4:	f107 030c 	add.w	r3, r7, #12
 800fce8:	4618      	mov	r0, r3
 800fcea:	f000 fc93 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcf2:	e31c      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcf8:	e319      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fcfa:	4b1d      	ldr	r3, [pc, #116]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fcfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fd02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fd04:	4b1a      	ldr	r3, [pc, #104]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f003 0304 	and.w	r3, r3, #4
 800fd0c:	2b04      	cmp	r3, #4
 800fd0e:	d10c      	bne.n	800fd2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800fd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d109      	bne.n	800fd2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd16:	4b16      	ldr	r3, [pc, #88]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	08db      	lsrs	r3, r3, #3
 800fd1c:	f003 0303 	and.w	r3, r3, #3
 800fd20:	4a14      	ldr	r2, [pc, #80]	; (800fd74 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800fd22:	fa22 f303 	lsr.w	r3, r2, r3
 800fd26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd28:	e01e      	b.n	800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fd2a:	4b11      	ldr	r3, [pc, #68]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd36:	d106      	bne.n	800fd46 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800fd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd3e:	d102      	bne.n	800fd46 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fd40:	4b0d      	ldr	r3, [pc, #52]	; (800fd78 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800fd42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd44:	e010      	b.n	800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fd46:	4b0a      	ldr	r3, [pc, #40]	; (800fd70 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fd52:	d106      	bne.n	800fd62 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800fd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fd5a:	d102      	bne.n	800fd62 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fd5c:	4b07      	ldr	r3, [pc, #28]	; (800fd7c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800fd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd60:	e002      	b.n	800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fd62:	2300      	movs	r3, #0
 800fd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fd66:	e2e2      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fd68:	e2e1      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fd6a:	4b05      	ldr	r3, [pc, #20]	; (800fd80 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800fd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd6e:	e2de      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fd70:	58024400 	.word	0x58024400
 800fd74:	03d09000 	.word	0x03d09000
 800fd78:	003d0900 	.word	0x003d0900
 800fd7c:	017d7840 	.word	0x017d7840
 800fd80:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800fd84:	2300      	movs	r3, #0
 800fd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd88:	e2d1      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800fd8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd8e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800fd92:	430b      	orrs	r3, r1
 800fd94:	f040 809c 	bne.w	800fed0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800fd98:	4b93      	ldr	r3, [pc, #588]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fd9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd9c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800fda0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fda8:	d054      	beq.n	800fe54 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800fdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fdb0:	f200 808b 	bhi.w	800feca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800fdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fdba:	f000 8083 	beq.w	800fec4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800fdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fdc4:	f200 8081 	bhi.w	800feca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800fdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fdce:	d02f      	beq.n	800fe30 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800fdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fdd6:	d878      	bhi.n	800feca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800fdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d004      	beq.n	800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800fdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fde4:	d012      	beq.n	800fe0c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800fde6:	e070      	b.n	800feca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fde8:	4b7f      	ldr	r3, [pc, #508]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fdf4:	d107      	bne.n	800fe06 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fdf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f000 fd5e 	bl	80108bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fe00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe04:	e293      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe06:	2300      	movs	r3, #0
 800fe08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe0a:	e290      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fe0c:	4b76      	ldr	r3, [pc, #472]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fe18:	d107      	bne.n	800fe2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe1a:	f107 0318 	add.w	r3, r7, #24
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f000 faa4 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe28:	e281      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe2e:	e27e      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fe30:	4b6d      	ldr	r3, [pc, #436]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fe38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe3c:	d107      	bne.n	800fe4e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe3e:	f107 030c 	add.w	r3, r7, #12
 800fe42:	4618      	mov	r0, r3
 800fe44:	f000 fbe6 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe4c:	e26f      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe52:	e26c      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fe54:	4b64      	ldr	r3, [pc, #400]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fe5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fe5e:	4b62      	ldr	r3, [pc, #392]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	f003 0304 	and.w	r3, r3, #4
 800fe66:	2b04      	cmp	r3, #4
 800fe68:	d10c      	bne.n	800fe84 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800fe6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d109      	bne.n	800fe84 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe70:	4b5d      	ldr	r3, [pc, #372]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	08db      	lsrs	r3, r3, #3
 800fe76:	f003 0303 	and.w	r3, r3, #3
 800fe7a:	4a5c      	ldr	r2, [pc, #368]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800fe7c:	fa22 f303 	lsr.w	r3, r2, r3
 800fe80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe82:	e01e      	b.n	800fec2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fe84:	4b58      	ldr	r3, [pc, #352]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe90:	d106      	bne.n	800fea0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800fe92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe98:	d102      	bne.n	800fea0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fe9a:	4b55      	ldr	r3, [pc, #340]	; (800fff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800fe9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe9e:	e010      	b.n	800fec2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fea0:	4b51      	ldr	r3, [pc, #324]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800feac:	d106      	bne.n	800febc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800feae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800feb4:	d102      	bne.n	800febc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800feb6:	4b4f      	ldr	r3, [pc, #316]	; (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800feb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800feba:	e002      	b.n	800fec2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800febc:	2300      	movs	r3, #0
 800febe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fec0:	e235      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fec2:	e234      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fec4:	4b4c      	ldr	r3, [pc, #304]	; (800fff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800fec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fec8:	e231      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800feca:	2300      	movs	r3, #0
 800fecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fece:	e22e      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800fed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fed4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800fed8:	430b      	orrs	r3, r1
 800feda:	f040 808f 	bne.w	800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800fede:	4b42      	ldr	r3, [pc, #264]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800fee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fee2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800fee6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800fee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800feee:	d06b      	beq.n	800ffc8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fef6:	d874      	bhi.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fefe:	d056      	beq.n	800ffae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ff06:	d86c      	bhi.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ff08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ff0e:	d03b      	beq.n	800ff88 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ff10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ff16:	d864      	bhi.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff1e:	d021      	beq.n	800ff64 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ff20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff26:	d85c      	bhi.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d004      	beq.n	800ff38 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff34:	d004      	beq.n	800ff40 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ff36:	e054      	b.n	800ffe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ff38:	f7fe fa0a 	bl	800e350 <HAL_RCC_GetPCLK1Freq>
 800ff3c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ff3e:	e1f6      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ff40:	4b29      	ldr	r3, [pc, #164]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ff4c:	d107      	bne.n	800ff5e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff4e:	f107 0318 	add.w	r3, r7, #24
 800ff52:	4618      	mov	r0, r3
 800ff54:	f000 fa0a 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ff58:	69fb      	ldr	r3, [r7, #28]
 800ff5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff5c:	e1e7      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff62:	e1e4      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff64:	4b20      	ldr	r3, [pc, #128]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ff6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ff70:	d107      	bne.n	800ff82 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff72:	f107 030c 	add.w	r3, r7, #12
 800ff76:	4618      	mov	r0, r3
 800ff78:	f000 fb4c 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff80:	e1d5      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff82:	2300      	movs	r3, #0
 800ff84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff86:	e1d2      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ff88:	4b17      	ldr	r3, [pc, #92]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f003 0304 	and.w	r3, r3, #4
 800ff90:	2b04      	cmp	r3, #4
 800ff92:	d109      	bne.n	800ffa8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff94:	4b14      	ldr	r3, [pc, #80]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	08db      	lsrs	r3, r3, #3
 800ff9a:	f003 0303 	and.w	r3, r3, #3
 800ff9e:	4a13      	ldr	r2, [pc, #76]	; (800ffec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ffa0:	fa22 f303 	lsr.w	r3, r2, r3
 800ffa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffa6:	e1c2      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffac:	e1bf      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ffae:	4b0e      	ldr	r3, [pc, #56]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffba:	d102      	bne.n	800ffc2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ffbc:	4b0c      	ldr	r3, [pc, #48]	; (800fff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ffbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffc0:	e1b5      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffc6:	e1b2      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ffc8:	4b07      	ldr	r3, [pc, #28]	; (800ffe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ffd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ffd4:	d102      	bne.n	800ffdc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ffd6:	4b07      	ldr	r3, [pc, #28]	; (800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ffd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffda:	e1a8      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffe0:	e1a5      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffe6:	e1a2      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ffe8:	58024400 	.word	0x58024400
 800ffec:	03d09000 	.word	0x03d09000
 800fff0:	003d0900 	.word	0x003d0900
 800fff4:	017d7840 	.word	0x017d7840
 800fff8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800fffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010000:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010004:	430b      	orrs	r3, r1
 8010006:	d173      	bne.n	80100f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010008:	4b9c      	ldr	r3, [pc, #624]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801000a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801000c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010010:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010018:	d02f      	beq.n	801007a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801001a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010020:	d863      	bhi.n	80100ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010024:	2b00      	cmp	r3, #0
 8010026:	d004      	beq.n	8010032 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801002e:	d012      	beq.n	8010056 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010030:	e05b      	b.n	80100ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010032:	4b92      	ldr	r3, [pc, #584]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801003a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801003e:	d107      	bne.n	8010050 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010040:	f107 0318 	add.w	r3, r7, #24
 8010044:	4618      	mov	r0, r3
 8010046:	f000 f991 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801004e:	e16e      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010050:	2300      	movs	r3, #0
 8010052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010054:	e16b      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010056:	4b89      	ldr	r3, [pc, #548]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801005e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010062:	d107      	bne.n	8010074 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010064:	f107 030c 	add.w	r3, r7, #12
 8010068:	4618      	mov	r0, r3
 801006a:	f000 fad3 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010072:	e15c      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010074:	2300      	movs	r3, #0
 8010076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010078:	e159      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801007a:	4b80      	ldr	r3, [pc, #512]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801007c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801007e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010082:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010084:	4b7d      	ldr	r3, [pc, #500]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f003 0304 	and.w	r3, r3, #4
 801008c:	2b04      	cmp	r3, #4
 801008e:	d10c      	bne.n	80100aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010092:	2b00      	cmp	r3, #0
 8010094:	d109      	bne.n	80100aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010096:	4b79      	ldr	r3, [pc, #484]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	08db      	lsrs	r3, r3, #3
 801009c:	f003 0303 	and.w	r3, r3, #3
 80100a0:	4a77      	ldr	r2, [pc, #476]	; (8010280 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80100a2:	fa22 f303 	lsr.w	r3, r2, r3
 80100a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100a8:	e01e      	b.n	80100e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80100aa:	4b74      	ldr	r3, [pc, #464]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100b6:	d106      	bne.n	80100c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80100b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80100be:	d102      	bne.n	80100c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80100c0:	4b70      	ldr	r3, [pc, #448]	; (8010284 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80100c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100c4:	e010      	b.n	80100e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80100c6:	4b6d      	ldr	r3, [pc, #436]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80100d2:	d106      	bne.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80100d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100da:	d102      	bne.n	80100e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80100dc:	4b6a      	ldr	r3, [pc, #424]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80100de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100e0:	e002      	b.n	80100e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80100e2:	2300      	movs	r3, #0
 80100e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80100e6:	e122      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80100e8:	e121      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80100ea:	2300      	movs	r3, #0
 80100ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100ee:	e11e      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80100f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100f4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80100f8:	430b      	orrs	r3, r1
 80100fa:	d133      	bne.n	8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80100fc:	4b5f      	ldr	r3, [pc, #380]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80100fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010104:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010108:	2b00      	cmp	r3, #0
 801010a:	d004      	beq.n	8010116 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801010c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801010e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010112:	d012      	beq.n	801013a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010114:	e023      	b.n	801015e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010116:	4b59      	ldr	r3, [pc, #356]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801011e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010122:	d107      	bne.n	8010134 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010128:	4618      	mov	r0, r3
 801012a:	f000 fbc7 	bl	80108bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801012e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010132:	e0fc      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010134:	2300      	movs	r3, #0
 8010136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010138:	e0f9      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801013a:	4b50      	ldr	r3, [pc, #320]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010146:	d107      	bne.n	8010158 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010148:	f107 0318 	add.w	r3, r7, #24
 801014c:	4618      	mov	r0, r3
 801014e:	f000 f90d 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010152:	6a3b      	ldr	r3, [r7, #32]
 8010154:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010156:	e0ea      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010158:	2300      	movs	r3, #0
 801015a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801015c:	e0e7      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801015e:	2300      	movs	r3, #0
 8010160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010162:	e0e4      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010168:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 801016c:	430b      	orrs	r3, r1
 801016e:	f040 808d 	bne.w	801028c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010172:	4b42      	ldr	r3, [pc, #264]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010176:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801017a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801017c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010182:	d06b      	beq.n	801025c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801018a:	d874      	bhi.n	8010276 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801018c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010192:	d056      	beq.n	8010242 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801019a:	d86c      	bhi.n	8010276 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801019c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80101a2:	d03b      	beq.n	801021c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80101a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80101aa:	d864      	bhi.n	8010276 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80101ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101b2:	d021      	beq.n	80101f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80101b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101ba:	d85c      	bhi.n	8010276 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80101bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d004      	beq.n	80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80101c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80101c8:	d004      	beq.n	80101d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80101ca:	e054      	b.n	8010276 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80101cc:	f000 f8b8 	bl	8010340 <HAL_RCCEx_GetD3PCLK1Freq>
 80101d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80101d2:	e0ac      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80101d4:	4b29      	ldr	r3, [pc, #164]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80101dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80101e0:	d107      	bne.n	80101f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101e2:	f107 0318 	add.w	r3, r7, #24
 80101e6:	4618      	mov	r0, r3
 80101e8:	f000 f8c0 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101f0:	e09d      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101f2:	2300      	movs	r3, #0
 80101f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101f6:	e09a      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80101f8:	4b20      	ldr	r3, [pc, #128]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010204:	d107      	bne.n	8010216 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010206:	f107 030c 	add.w	r3, r7, #12
 801020a:	4618      	mov	r0, r3
 801020c:	f000 fa02 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010214:	e08b      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010216:	2300      	movs	r3, #0
 8010218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801021a:	e088      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801021c:	4b17      	ldr	r3, [pc, #92]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f003 0304 	and.w	r3, r3, #4
 8010224:	2b04      	cmp	r3, #4
 8010226:	d109      	bne.n	801023c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010228:	4b14      	ldr	r3, [pc, #80]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	08db      	lsrs	r3, r3, #3
 801022e:	f003 0303 	and.w	r3, r3, #3
 8010232:	4a13      	ldr	r2, [pc, #76]	; (8010280 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010234:	fa22 f303 	lsr.w	r3, r2, r3
 8010238:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801023a:	e078      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801023c:	2300      	movs	r3, #0
 801023e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010240:	e075      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010242:	4b0e      	ldr	r3, [pc, #56]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801024a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801024e:	d102      	bne.n	8010256 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010250:	4b0c      	ldr	r3, [pc, #48]	; (8010284 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010254:	e06b      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010256:	2300      	movs	r3, #0
 8010258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801025a:	e068      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801025c:	4b07      	ldr	r3, [pc, #28]	; (801027c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010268:	d102      	bne.n	8010270 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801026a:	4b07      	ldr	r3, [pc, #28]	; (8010288 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801026c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801026e:	e05e      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010270:	2300      	movs	r3, #0
 8010272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010274:	e05b      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010276:	2300      	movs	r3, #0
 8010278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801027a:	e058      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801027c:	58024400 	.word	0x58024400
 8010280:	03d09000 	.word	0x03d09000
 8010284:	003d0900 	.word	0x003d0900
 8010288:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801028c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010290:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010294:	430b      	orrs	r3, r1
 8010296:	d148      	bne.n	801032a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010298:	4b27      	ldr	r3, [pc, #156]	; (8010338 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801029a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801029c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80102a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80102a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102a8:	d02a      	beq.n	8010300 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80102aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102b0:	d838      	bhi.n	8010324 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80102b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d004      	beq.n	80102c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80102b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80102be:	d00d      	beq.n	80102dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80102c0:	e030      	b.n	8010324 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80102c2:	4b1d      	ldr	r3, [pc, #116]	; (8010338 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80102ce:	d102      	bne.n	80102d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80102d0:	4b1a      	ldr	r3, [pc, #104]	; (801033c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80102d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102d4:	e02b      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102d6:	2300      	movs	r3, #0
 80102d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102da:	e028      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80102dc:	4b16      	ldr	r3, [pc, #88]	; (8010338 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80102e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80102e8:	d107      	bne.n	80102fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102ee:	4618      	mov	r0, r3
 80102f0:	f000 fae4 	bl	80108bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80102f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102f8:	e019      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102fa:	2300      	movs	r3, #0
 80102fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102fe:	e016      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010300:	4b0d      	ldr	r3, [pc, #52]	; (8010338 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801030c:	d107      	bne.n	801031e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801030e:	f107 0318 	add.w	r3, r7, #24
 8010312:	4618      	mov	r0, r3
 8010314:	f000 f82a 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801031c:	e007      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010322:	e004      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010324:	2300      	movs	r3, #0
 8010326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010328:	e001      	b.n	801032e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801032a:	2300      	movs	r3, #0
 801032c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801032e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010330:	4618      	mov	r0, r3
 8010332:	3740      	adds	r7, #64	; 0x40
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}
 8010338:	58024400 	.word	0x58024400
 801033c:	017d7840 	.word	0x017d7840

08010340 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010344:	f7fd ffd4 	bl	800e2f0 <HAL_RCC_GetHCLKFreq>
 8010348:	4602      	mov	r2, r0
 801034a:	4b06      	ldr	r3, [pc, #24]	; (8010364 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801034c:	6a1b      	ldr	r3, [r3, #32]
 801034e:	091b      	lsrs	r3, r3, #4
 8010350:	f003 0307 	and.w	r3, r3, #7
 8010354:	4904      	ldr	r1, [pc, #16]	; (8010368 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010356:	5ccb      	ldrb	r3, [r1, r3]
 8010358:	f003 031f 	and.w	r3, r3, #31
 801035c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010360:	4618      	mov	r0, r3
 8010362:	bd80      	pop	{r7, pc}
 8010364:	58024400 	.word	0x58024400
 8010368:	0801a954 	.word	0x0801a954

0801036c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801036c:	b480      	push	{r7}
 801036e:	b089      	sub	sp, #36	; 0x24
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010374:	4ba1      	ldr	r3, [pc, #644]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010378:	f003 0303 	and.w	r3, r3, #3
 801037c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801037e:	4b9f      	ldr	r3, [pc, #636]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010382:	0b1b      	lsrs	r3, r3, #12
 8010384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010388:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801038a:	4b9c      	ldr	r3, [pc, #624]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801038c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801038e:	091b      	lsrs	r3, r3, #4
 8010390:	f003 0301 	and.w	r3, r3, #1
 8010394:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010396:	4b99      	ldr	r3, [pc, #612]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801039a:	08db      	lsrs	r3, r3, #3
 801039c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103a0:	693a      	ldr	r2, [r7, #16]
 80103a2:	fb02 f303 	mul.w	r3, r2, r3
 80103a6:	ee07 3a90 	vmov	s15, r3
 80103aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	f000 8111 	beq.w	80105dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80103ba:	69bb      	ldr	r3, [r7, #24]
 80103bc:	2b02      	cmp	r3, #2
 80103be:	f000 8083 	beq.w	80104c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	2b02      	cmp	r3, #2
 80103c6:	f200 80a1 	bhi.w	801050c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d003      	beq.n	80103d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d056      	beq.n	8010484 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80103d6:	e099      	b.n	801050c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103d8:	4b88      	ldr	r3, [pc, #544]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f003 0320 	and.w	r3, r3, #32
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d02d      	beq.n	8010440 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103e4:	4b85      	ldr	r3, [pc, #532]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	08db      	lsrs	r3, r3, #3
 80103ea:	f003 0303 	and.w	r3, r3, #3
 80103ee:	4a84      	ldr	r2, [pc, #528]	; (8010600 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80103f0:	fa22 f303 	lsr.w	r3, r2, r3
 80103f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	ee07 3a90 	vmov	s15, r3
 80103fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	ee07 3a90 	vmov	s15, r3
 8010406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801040a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801040e:	4b7b      	ldr	r3, [pc, #492]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010416:	ee07 3a90 	vmov	s15, r3
 801041a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801041e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010422:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801042a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801042e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010436:	ee67 7a27 	vmul.f32	s15, s14, s15
 801043a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801043e:	e087      	b.n	8010550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	ee07 3a90 	vmov	s15, r3
 8010446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801044a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010608 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801044e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010452:	4b6a      	ldr	r3, [pc, #424]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801045a:	ee07 3a90 	vmov	s15, r3
 801045e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010462:	ed97 6a03 	vldr	s12, [r7, #12]
 8010466:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801046a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801046e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801047a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801047e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010482:	e065      	b.n	8010550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	ee07 3a90 	vmov	s15, r3
 801048a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801048e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801060c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010496:	4b59      	ldr	r3, [pc, #356]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801049a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801049e:	ee07 3a90 	vmov	s15, r3
 80104a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80104aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80104ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104c6:	e043      	b.n	8010550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	ee07 3a90 	vmov	s15, r3
 80104ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80104d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104da:	4b48      	ldr	r3, [pc, #288]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80104dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104e2:	ee07 3a90 	vmov	s15, r3
 80104e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80104ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80104f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801050a:	e021      	b.n	8010550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	ee07 3a90 	vmov	s15, r3
 8010512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010516:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801060c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801051a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801051e:	4b37      	ldr	r3, [pc, #220]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010526:	ee07 3a90 	vmov	s15, r3
 801052a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801052e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010532:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801053a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801053e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010546:	ee67 7a27 	vmul.f32	s15, s14, s15
 801054a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801054e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010550:	4b2a      	ldr	r3, [pc, #168]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010554:	0a5b      	lsrs	r3, r3, #9
 8010556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801055a:	ee07 3a90 	vmov	s15, r3
 801055e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010566:	ee37 7a87 	vadd.f32	s14, s15, s14
 801056a:	edd7 6a07 	vldr	s13, [r7, #28]
 801056e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010576:	ee17 2a90 	vmov	r2, s15
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801057e:	4b1f      	ldr	r3, [pc, #124]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010582:	0c1b      	lsrs	r3, r3, #16
 8010584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010588:	ee07 3a90 	vmov	s15, r3
 801058c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010598:	edd7 6a07 	vldr	s13, [r7, #28]
 801059c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105a4:	ee17 2a90 	vmov	r2, s15
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80105ac:	4b13      	ldr	r3, [pc, #76]	; (80105fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80105ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105b0:	0e1b      	lsrs	r3, r3, #24
 80105b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105b6:	ee07 3a90 	vmov	s15, r3
 80105ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80105ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105d2:	ee17 2a90 	vmov	r2, s15
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80105da:	e008      	b.n	80105ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	609a      	str	r2, [r3, #8]
}
 80105ee:	bf00      	nop
 80105f0:	3724      	adds	r7, #36	; 0x24
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr
 80105fa:	bf00      	nop
 80105fc:	58024400 	.word	0x58024400
 8010600:	03d09000 	.word	0x03d09000
 8010604:	46000000 	.word	0x46000000
 8010608:	4c742400 	.word	0x4c742400
 801060c:	4a742400 	.word	0x4a742400
 8010610:	4bbebc20 	.word	0x4bbebc20

08010614 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010614:	b480      	push	{r7}
 8010616:	b089      	sub	sp, #36	; 0x24
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801061c:	4ba1      	ldr	r3, [pc, #644]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801061e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010620:	f003 0303 	and.w	r3, r3, #3
 8010624:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010626:	4b9f      	ldr	r3, [pc, #636]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801062a:	0d1b      	lsrs	r3, r3, #20
 801062c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010630:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010632:	4b9c      	ldr	r3, [pc, #624]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010636:	0a1b      	lsrs	r3, r3, #8
 8010638:	f003 0301 	and.w	r3, r3, #1
 801063c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801063e:	4b99      	ldr	r3, [pc, #612]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010642:	08db      	lsrs	r3, r3, #3
 8010644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010648:	693a      	ldr	r2, [r7, #16]
 801064a:	fb02 f303 	mul.w	r3, r2, r3
 801064e:	ee07 3a90 	vmov	s15, r3
 8010652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010656:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	2b00      	cmp	r3, #0
 801065e:	f000 8111 	beq.w	8010884 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	2b02      	cmp	r3, #2
 8010666:	f000 8083 	beq.w	8010770 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	2b02      	cmp	r3, #2
 801066e:	f200 80a1 	bhi.w	80107b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d003      	beq.n	8010680 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010678:	69bb      	ldr	r3, [r7, #24]
 801067a:	2b01      	cmp	r3, #1
 801067c:	d056      	beq.n	801072c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801067e:	e099      	b.n	80107b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010680:	4b88      	ldr	r3, [pc, #544]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f003 0320 	and.w	r3, r3, #32
 8010688:	2b00      	cmp	r3, #0
 801068a:	d02d      	beq.n	80106e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801068c:	4b85      	ldr	r3, [pc, #532]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	08db      	lsrs	r3, r3, #3
 8010692:	f003 0303 	and.w	r3, r3, #3
 8010696:	4a84      	ldr	r2, [pc, #528]	; (80108a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010698:	fa22 f303 	lsr.w	r3, r2, r3
 801069c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	ee07 3a90 	vmov	s15, r3
 80106a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	ee07 3a90 	vmov	s15, r3
 80106ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80106b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80106b6:	4b7b      	ldr	r3, [pc, #492]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80106b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106be:	ee07 3a90 	vmov	s15, r3
 80106c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80106c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80106ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80108ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80106ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80106d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80106d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80106da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80106de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80106e6:	e087      	b.n	80107f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	ee07 3a90 	vmov	s15, r3
 80106ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80106f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80108b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80106f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80106fa:	4b6a      	ldr	r3, [pc, #424]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80106fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010702:	ee07 3a90 	vmov	s15, r3
 8010706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801070a:	ed97 6a03 	vldr	s12, [r7, #12]
 801070e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80108ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801071a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801071e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801072a:	e065      	b.n	80107f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	ee07 3a90 	vmov	s15, r3
 8010732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010736:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80108b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801073a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801073e:	4b59      	ldr	r3, [pc, #356]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010746:	ee07 3a90 	vmov	s15, r3
 801074a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801074e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010752:	eddf 5a56 	vldr	s11, [pc, #344]	; 80108ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801075a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801075e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010766:	ee67 7a27 	vmul.f32	s15, s14, s15
 801076a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801076e:	e043      	b.n	80107f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	ee07 3a90 	vmov	s15, r3
 8010776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801077a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80108b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801077e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010782:	4b48      	ldr	r3, [pc, #288]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801078a:	ee07 3a90 	vmov	s15, r3
 801078e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010792:	ed97 6a03 	vldr	s12, [r7, #12]
 8010796:	eddf 5a45 	vldr	s11, [pc, #276]	; 80108ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801079a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801079e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80107a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80107a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80107aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80107b2:	e021      	b.n	80107f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	ee07 3a90 	vmov	s15, r3
 80107ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80108b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80107c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80107c6:	4b37      	ldr	r3, [pc, #220]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80107c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107ce:	ee07 3a90 	vmov	s15, r3
 80107d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80107d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80107da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80108ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80107de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80107e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80107e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80107ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80107ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80107f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80107f8:	4b2a      	ldr	r3, [pc, #168]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80107fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fc:	0a5b      	lsrs	r3, r3, #9
 80107fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010802:	ee07 3a90 	vmov	s15, r3
 8010806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801080a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801080e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010812:	edd7 6a07 	vldr	s13, [r7, #28]
 8010816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801081a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801081e:	ee17 2a90 	vmov	r2, s15
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010826:	4b1f      	ldr	r3, [pc, #124]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801082a:	0c1b      	lsrs	r3, r3, #16
 801082c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010830:	ee07 3a90 	vmov	s15, r3
 8010834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801083c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010840:	edd7 6a07 	vldr	s13, [r7, #28]
 8010844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801084c:	ee17 2a90 	vmov	r2, s15
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010854:	4b13      	ldr	r3, [pc, #76]	; (80108a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010858:	0e1b      	lsrs	r3, r3, #24
 801085a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801085e:	ee07 3a90 	vmov	s15, r3
 8010862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801086a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801086e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801087a:	ee17 2a90 	vmov	r2, s15
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010882:	e008      	b.n	8010896 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2200      	movs	r2, #0
 8010888:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2200      	movs	r2, #0
 801088e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2200      	movs	r2, #0
 8010894:	609a      	str	r2, [r3, #8]
}
 8010896:	bf00      	nop
 8010898:	3724      	adds	r7, #36	; 0x24
 801089a:	46bd      	mov	sp, r7
 801089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop
 80108a4:	58024400 	.word	0x58024400
 80108a8:	03d09000 	.word	0x03d09000
 80108ac:	46000000 	.word	0x46000000
 80108b0:	4c742400 	.word	0x4c742400
 80108b4:	4a742400 	.word	0x4a742400
 80108b8:	4bbebc20 	.word	0x4bbebc20

080108bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80108bc:	b480      	push	{r7}
 80108be:	b089      	sub	sp, #36	; 0x24
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80108c4:	4ba0      	ldr	r3, [pc, #640]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108c8:	f003 0303 	and.w	r3, r3, #3
 80108cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80108ce:	4b9e      	ldr	r3, [pc, #632]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108d2:	091b      	lsrs	r3, r3, #4
 80108d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80108da:	4b9b      	ldr	r3, [pc, #620]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108de:	f003 0301 	and.w	r3, r3, #1
 80108e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80108e4:	4b98      	ldr	r3, [pc, #608]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80108e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108e8:	08db      	lsrs	r3, r3, #3
 80108ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80108ee:	693a      	ldr	r2, [r7, #16]
 80108f0:	fb02 f303 	mul.w	r3, r2, r3
 80108f4:	ee07 3a90 	vmov	s15, r3
 80108f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	2b00      	cmp	r3, #0
 8010904:	f000 8111 	beq.w	8010b2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	2b02      	cmp	r3, #2
 801090c:	f000 8083 	beq.w	8010a16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010910:	69bb      	ldr	r3, [r7, #24]
 8010912:	2b02      	cmp	r3, #2
 8010914:	f200 80a1 	bhi.w	8010a5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010918:	69bb      	ldr	r3, [r7, #24]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d003      	beq.n	8010926 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	2b01      	cmp	r3, #1
 8010922:	d056      	beq.n	80109d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010924:	e099      	b.n	8010a5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010926:	4b88      	ldr	r3, [pc, #544]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f003 0320 	and.w	r3, r3, #32
 801092e:	2b00      	cmp	r3, #0
 8010930:	d02d      	beq.n	801098e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010932:	4b85      	ldr	r3, [pc, #532]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	08db      	lsrs	r3, r3, #3
 8010938:	f003 0303 	and.w	r3, r3, #3
 801093c:	4a83      	ldr	r2, [pc, #524]	; (8010b4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801093e:	fa22 f303 	lsr.w	r3, r2, r3
 8010942:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	ee07 3a90 	vmov	s15, r3
 801094a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	ee07 3a90 	vmov	s15, r3
 8010954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801095c:	4b7a      	ldr	r3, [pc, #488]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010964:	ee07 3a90 	vmov	s15, r3
 8010968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801096c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010970:	eddf 5a77 	vldr	s11, [pc, #476]	; 8010b50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010974:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801097c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010988:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801098c:	e087      	b.n	8010a9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	ee07 3a90 	vmov	s15, r3
 8010994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010998:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8010b54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801099c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109a0:	4b69      	ldr	r3, [pc, #420]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80109a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109a8:	ee07 3a90 	vmov	s15, r3
 80109ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80109b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8010b50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80109b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80109c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109d0:	e065      	b.n	8010a9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	ee07 3a90 	vmov	s15, r3
 80109d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010b58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80109e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109e4:	4b58      	ldr	r3, [pc, #352]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80109e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109ec:	ee07 3a90 	vmov	s15, r3
 80109f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80109f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010b50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80109fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a14:	e043      	b.n	8010a9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	ee07 3a90 	vmov	s15, r3
 8010a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8010b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a28:	4b47      	ldr	r3, [pc, #284]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a30:	ee07 3a90 	vmov	s15, r3
 8010a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a38:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010b50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010a40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010a4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a58:	e021      	b.n	8010a9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	ee07 3a90 	vmov	s15, r3
 8010a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a64:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010b54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a6c:	4b36      	ldr	r3, [pc, #216]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a74:	ee07 3a90 	vmov	s15, r3
 8010a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a80:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010b50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010a84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010a9e:	4b2a      	ldr	r3, [pc, #168]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aa2:	0a5b      	lsrs	r3, r3, #9
 8010aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aa8:	ee07 3a90 	vmov	s15, r3
 8010aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8010abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ac4:	ee17 2a90 	vmov	r2, s15
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010acc:	4b1e      	ldr	r3, [pc, #120]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ad0:	0c1b      	lsrs	r3, r3, #16
 8010ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ad6:	ee07 3a90 	vmov	s15, r3
 8010ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8010aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010af2:	ee17 2a90 	vmov	r2, s15
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010afa:	4b13      	ldr	r3, [pc, #76]	; (8010b48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010afe:	0e1b      	lsrs	r3, r3, #24
 8010b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b04:	ee07 3a90 	vmov	s15, r3
 8010b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8010b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b20:	ee17 2a90 	vmov	r2, s15
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010b28:	e008      	b.n	8010b3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	609a      	str	r2, [r3, #8]
}
 8010b3c:	bf00      	nop
 8010b3e:	3724      	adds	r7, #36	; 0x24
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr
 8010b48:	58024400 	.word	0x58024400
 8010b4c:	03d09000 	.word	0x03d09000
 8010b50:	46000000 	.word	0x46000000
 8010b54:	4c742400 	.word	0x4c742400
 8010b58:	4a742400 	.word	0x4a742400
 8010b5c:	4bbebc20 	.word	0x4bbebc20

08010b60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010b6e:	4b53      	ldr	r3, [pc, #332]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b72:	f003 0303 	and.w	r3, r3, #3
 8010b76:	2b03      	cmp	r3, #3
 8010b78:	d101      	bne.n	8010b7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e099      	b.n	8010cb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010b7e:	4b4f      	ldr	r3, [pc, #316]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	4a4e      	ldr	r2, [pc, #312]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010b84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010b8a:	f7f4 fadd 	bl	8005148 <HAL_GetTick>
 8010b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010b90:	e008      	b.n	8010ba4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010b92:	f7f4 fad9 	bl	8005148 <HAL_GetTick>
 8010b96:	4602      	mov	r2, r0
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	1ad3      	subs	r3, r2, r3
 8010b9c:	2b02      	cmp	r3, #2
 8010b9e:	d901      	bls.n	8010ba4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010ba0:	2303      	movs	r3, #3
 8010ba2:	e086      	b.n	8010cb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010ba4:	4b45      	ldr	r3, [pc, #276]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d1f0      	bne.n	8010b92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010bb0:	4b42      	ldr	r3, [pc, #264]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	031b      	lsls	r3, r3, #12
 8010bbe:	493f      	ldr	r1, [pc, #252]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	628b      	str	r3, [r1, #40]	; 0x28
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	689b      	ldr	r3, [r3, #8]
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	025b      	lsls	r3, r3, #9
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	431a      	orrs	r2, r3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	3b01      	subs	r3, #1
 8010be0:	041b      	lsls	r3, r3, #16
 8010be2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010be6:	431a      	orrs	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	691b      	ldr	r3, [r3, #16]
 8010bec:	3b01      	subs	r3, #1
 8010bee:	061b      	lsls	r3, r3, #24
 8010bf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010bf4:	4931      	ldr	r1, [pc, #196]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010bf6:	4313      	orrs	r3, r2
 8010bf8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010bfa:	4b30      	ldr	r3, [pc, #192]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	695b      	ldr	r3, [r3, #20]
 8010c06:	492d      	ldr	r1, [pc, #180]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c08:	4313      	orrs	r3, r2
 8010c0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010c0c:	4b2b      	ldr	r3, [pc, #172]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c10:	f023 0220 	bic.w	r2, r3, #32
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	699b      	ldr	r3, [r3, #24]
 8010c18:	4928      	ldr	r1, [pc, #160]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c1a:	4313      	orrs	r3, r2
 8010c1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010c1e:	4b27      	ldr	r3, [pc, #156]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c22:	4a26      	ldr	r2, [pc, #152]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c24:	f023 0310 	bic.w	r3, r3, #16
 8010c28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010c2a:	4b24      	ldr	r3, [pc, #144]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010c2e:	4b24      	ldr	r3, [pc, #144]	; (8010cc0 <RCCEx_PLL2_Config+0x160>)
 8010c30:	4013      	ands	r3, r2
 8010c32:	687a      	ldr	r2, [r7, #4]
 8010c34:	69d2      	ldr	r2, [r2, #28]
 8010c36:	00d2      	lsls	r2, r2, #3
 8010c38:	4920      	ldr	r1, [pc, #128]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010c3e:	4b1f      	ldr	r3, [pc, #124]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c42:	4a1e      	ldr	r2, [pc, #120]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c44:	f043 0310 	orr.w	r3, r3, #16
 8010c48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d106      	bne.n	8010c5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010c50:	4b1a      	ldr	r3, [pc, #104]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c54:	4a19      	ldr	r2, [pc, #100]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010c5c:	e00f      	b.n	8010c7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	d106      	bne.n	8010c72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010c64:	4b15      	ldr	r3, [pc, #84]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c68:	4a14      	ldr	r2, [pc, #80]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010c70:	e005      	b.n	8010c7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010c72:	4b12      	ldr	r3, [pc, #72]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c76:	4a11      	ldr	r2, [pc, #68]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010c7e:	4b0f      	ldr	r3, [pc, #60]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	4a0e      	ldr	r2, [pc, #56]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010c84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c8a:	f7f4 fa5d 	bl	8005148 <HAL_GetTick>
 8010c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010c90:	e008      	b.n	8010ca4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010c92:	f7f4 fa59 	bl	8005148 <HAL_GetTick>
 8010c96:	4602      	mov	r2, r0
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	d901      	bls.n	8010ca4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010ca0:	2303      	movs	r3, #3
 8010ca2:	e006      	b.n	8010cb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010ca4:	4b05      	ldr	r3, [pc, #20]	; (8010cbc <RCCEx_PLL2_Config+0x15c>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d0f0      	beq.n	8010c92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	58024400 	.word	0x58024400
 8010cc0:	ffff0007 	.word	0xffff0007

08010cc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010cd2:	4b53      	ldr	r3, [pc, #332]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cd6:	f003 0303 	and.w	r3, r3, #3
 8010cda:	2b03      	cmp	r3, #3
 8010cdc:	d101      	bne.n	8010ce2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e099      	b.n	8010e16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010ce2:	4b4f      	ldr	r3, [pc, #316]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	4a4e      	ldr	r2, [pc, #312]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010cee:	f7f4 fa2b 	bl	8005148 <HAL_GetTick>
 8010cf2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010cf4:	e008      	b.n	8010d08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010cf6:	f7f4 fa27 	bl	8005148 <HAL_GetTick>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	1ad3      	subs	r3, r2, r3
 8010d00:	2b02      	cmp	r3, #2
 8010d02:	d901      	bls.n	8010d08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010d04:	2303      	movs	r3, #3
 8010d06:	e086      	b.n	8010e16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010d08:	4b45      	ldr	r3, [pc, #276]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1f0      	bne.n	8010cf6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010d14:	4b42      	ldr	r3, [pc, #264]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	051b      	lsls	r3, r3, #20
 8010d22:	493f      	ldr	r1, [pc, #252]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d24:	4313      	orrs	r3, r2
 8010d26:	628b      	str	r3, [r1, #40]	; 0x28
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	689b      	ldr	r3, [r3, #8]
 8010d36:	3b01      	subs	r3, #1
 8010d38:	025b      	lsls	r3, r3, #9
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	431a      	orrs	r2, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	68db      	ldr	r3, [r3, #12]
 8010d42:	3b01      	subs	r3, #1
 8010d44:	041b      	lsls	r3, r3, #16
 8010d46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010d4a:	431a      	orrs	r2, r3
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	691b      	ldr	r3, [r3, #16]
 8010d50:	3b01      	subs	r3, #1
 8010d52:	061b      	lsls	r3, r3, #24
 8010d54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010d58:	4931      	ldr	r1, [pc, #196]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010d5e:	4b30      	ldr	r3, [pc, #192]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	695b      	ldr	r3, [r3, #20]
 8010d6a:	492d      	ldr	r1, [pc, #180]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010d70:	4b2b      	ldr	r3, [pc, #172]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	699b      	ldr	r3, [r3, #24]
 8010d7c:	4928      	ldr	r1, [pc, #160]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010d82:	4b27      	ldr	r3, [pc, #156]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d86:	4a26      	ldr	r2, [pc, #152]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010d8e:	4b24      	ldr	r3, [pc, #144]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d92:	4b24      	ldr	r3, [pc, #144]	; (8010e24 <RCCEx_PLL3_Config+0x160>)
 8010d94:	4013      	ands	r3, r2
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	69d2      	ldr	r2, [r2, #28]
 8010d9a:	00d2      	lsls	r2, r2, #3
 8010d9c:	4920      	ldr	r1, [pc, #128]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010d9e:	4313      	orrs	r3, r2
 8010da0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010da2:	4b1f      	ldr	r3, [pc, #124]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da6:	4a1e      	ldr	r2, [pc, #120]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010dac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d106      	bne.n	8010dc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010db4:	4b1a      	ldr	r3, [pc, #104]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db8:	4a19      	ldr	r2, [pc, #100]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010dba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010dc0:	e00f      	b.n	8010de2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d106      	bne.n	8010dd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010dc8:	4b15      	ldr	r3, [pc, #84]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dcc:	4a14      	ldr	r2, [pc, #80]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010dce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010dd4:	e005      	b.n	8010de2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010dd6:	4b12      	ldr	r3, [pc, #72]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dda:	4a11      	ldr	r2, [pc, #68]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010ddc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010de0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010de2:	4b0f      	ldr	r3, [pc, #60]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4a0e      	ldr	r2, [pc, #56]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010dee:	f7f4 f9ab 	bl	8005148 <HAL_GetTick>
 8010df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010df4:	e008      	b.n	8010e08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010df6:	f7f4 f9a7 	bl	8005148 <HAL_GetTick>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	2b02      	cmp	r3, #2
 8010e02:	d901      	bls.n	8010e08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010e04:	2303      	movs	r3, #3
 8010e06:	e006      	b.n	8010e16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010e08:	4b05      	ldr	r3, [pc, #20]	; (8010e20 <RCCEx_PLL3_Config+0x15c>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d0f0      	beq.n	8010df6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3710      	adds	r7, #16
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	58024400 	.word	0x58024400
 8010e24:	ffff0007 	.word	0xffff0007

08010e28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010e30:	2301      	movs	r3, #1
 8010e32:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d071      	beq.n	8010f1e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010e40:	b2db      	uxtb	r3, r3
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d106      	bne.n	8010e54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f7f2 fa96 	bl	8003380 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2202      	movs	r2, #2
 8010e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	f003 0310 	and.w	r3, r3, #16
 8010e66:	2b10      	cmp	r3, #16
 8010e68:	d050      	beq.n	8010f0c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	22ca      	movs	r2, #202	; 0xca
 8010e70:	625a      	str	r2, [r3, #36]	; 0x24
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	2253      	movs	r2, #83	; 0x53
 8010e78:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f000 fa4a 	bl	8011314 <RTC_EnterInitMode>
 8010e80:	4603      	mov	r3, r0
 8010e82:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8010e84:	7bfb      	ldrb	r3, [r7, #15]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d124      	bne.n	8010ed4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	6899      	ldr	r1, [r3, #8]
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	4b24      	ldr	r3, [pc, #144]	; (8010f28 <HAL_RTC_Init+0x100>)
 8010e96:	400b      	ands	r3, r1
 8010e98:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	6899      	ldr	r1, [r3, #8]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	685a      	ldr	r2, [r3, #4]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	691b      	ldr	r3, [r3, #16]
 8010ea8:	431a      	orrs	r2, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	699b      	ldr	r3, [r3, #24]
 8010eae:	431a      	orrs	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	430a      	orrs	r2, r1
 8010eb6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	689b      	ldr	r3, [r3, #8]
 8010ebc:	0419      	lsls	r1, r3, #16
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	68da      	ldr	r2, [r3, #12]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	430a      	orrs	r2, r1
 8010ec8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 fa56 	bl	801137c <RTC_ExitInitMode>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d113      	bne.n	8010f02 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f022 0203 	bic.w	r2, r2, #3
 8010ee8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	69da      	ldr	r2, [r3, #28]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	695b      	ldr	r3, [r3, #20]
 8010ef8:	431a      	orrs	r2, r3
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	430a      	orrs	r2, r1
 8010f00:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	22ff      	movs	r2, #255	; 0xff
 8010f08:	625a      	str	r2, [r3, #36]	; 0x24
 8010f0a:	e001      	b.n	8010f10 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010f10:	7bfb      	ldrb	r3, [r7, #15]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d103      	bne.n	8010f1e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2201      	movs	r2, #1
 8010f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8010f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3710      	adds	r7, #16
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	ff8fffbf 	.word	0xff8fffbf

08010f2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010f2c:	b590      	push	{r4, r7, lr}
 8010f2e:	b087      	sub	sp, #28
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f3e:	2b01      	cmp	r3, #1
 8010f40:	d101      	bne.n	8010f46 <HAL_RTC_SetTime+0x1a>
 8010f42:	2302      	movs	r3, #2
 8010f44:	e089      	b.n	801105a <HAL_RTC_SetTime+0x12e>
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2202      	movs	r2, #2
 8010f52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	22ca      	movs	r2, #202	; 0xca
 8010f5c:	625a      	str	r2, [r3, #36]	; 0x24
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	2253      	movs	r2, #83	; 0x53
 8010f64:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010f66:	68f8      	ldr	r0, [r7, #12]
 8010f68:	f000 f9d4 	bl	8011314 <RTC_EnterInitMode>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010f70:	7cfb      	ldrb	r3, [r7, #19]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d161      	bne.n	801103a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d126      	bne.n	8010fca <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d102      	bne.n	8010f90 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	4618      	mov	r0, r3
 8010f96:	f000 fa2f 	bl	80113f8 <RTC_ByteToBcd2>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	785b      	ldrb	r3, [r3, #1]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f000 fa28 	bl	80113f8 <RTC_ByteToBcd2>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010fac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	789b      	ldrb	r3, [r3, #2]
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f000 fa20 	bl	80113f8 <RTC_ByteToBcd2>
 8010fb8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010fba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	78db      	ldrb	r3, [r3, #3]
 8010fc2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010fc4:	4313      	orrs	r3, r2
 8010fc6:	617b      	str	r3, [r7, #20]
 8010fc8:	e018      	b.n	8010ffc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	689b      	ldr	r3, [r3, #8]
 8010fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d102      	bne.n	8010fde <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	785b      	ldrb	r3, [r3, #1]
 8010fe8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010fea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8010fec:	68ba      	ldr	r2, [r7, #8]
 8010fee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010ff0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	78db      	ldrb	r3, [r3, #3]
 8010ff6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	6979      	ldr	r1, [r7, #20]
 8011002:	4b18      	ldr	r3, [pc, #96]	; (8011064 <HAL_RTC_SetTime+0x138>)
 8011004:	400b      	ands	r3, r1
 8011006:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	689a      	ldr	r2, [r3, #8]
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011016:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	6899      	ldr	r1, [r3, #8]
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	68da      	ldr	r2, [r3, #12]
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	691b      	ldr	r3, [r3, #16]
 8011026:	431a      	orrs	r2, r3
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	430a      	orrs	r2, r1
 801102e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	f000 f9a3 	bl	801137c <RTC_ExitInitMode>
 8011036:	4603      	mov	r3, r0
 8011038:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	22ff      	movs	r2, #255	; 0xff
 8011040:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011042:	7cfb      	ldrb	r3, [r7, #19]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d103      	bne.n	8011050 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2201      	movs	r2, #1
 801104c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	2200      	movs	r2, #0
 8011054:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011058:	7cfb      	ldrb	r3, [r7, #19]
}
 801105a:	4618      	mov	r0, r3
 801105c:	371c      	adds	r7, #28
 801105e:	46bd      	mov	sp, r7
 8011060:	bd90      	pop	{r4, r7, pc}
 8011062:	bf00      	nop
 8011064:	007f7f7f 	.word	0x007f7f7f

08011068 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b086      	sub	sp, #24
 801106c:	af00      	add	r7, sp, #0
 801106e:	60f8      	str	r0, [r7, #12]
 8011070:	60b9      	str	r1, [r7, #8]
 8011072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	691b      	ldr	r3, [r3, #16]
 8011084:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	4b22      	ldr	r3, [pc, #136]	; (801111c <HAL_RTC_GetTime+0xb4>)
 8011094:	4013      	ands	r3, r2
 8011096:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	0c1b      	lsrs	r3, r3, #16
 801109c:	b2db      	uxtb	r3, r3
 801109e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110a2:	b2da      	uxtb	r2, r3
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80110a8:	697b      	ldr	r3, [r7, #20]
 80110aa:	0a1b      	lsrs	r3, r3, #8
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110b2:	b2da      	uxtb	r2, r3
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	b2db      	uxtb	r3, r3
 80110bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110c0:	b2da      	uxtb	r2, r3
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	0d9b      	lsrs	r3, r3, #22
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	f003 0301 	and.w	r3, r3, #1
 80110d0:	b2da      	uxtb	r2, r3
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d11a      	bne.n	8011112 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f000 f9a9 	bl	8011438 <RTC_Bcd2ToByte>
 80110e6:	4603      	mov	r3, r0
 80110e8:	461a      	mov	r2, r3
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	785b      	ldrb	r3, [r3, #1]
 80110f2:	4618      	mov	r0, r3
 80110f4:	f000 f9a0 	bl	8011438 <RTC_Bcd2ToByte>
 80110f8:	4603      	mov	r3, r0
 80110fa:	461a      	mov	r2, r3
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	789b      	ldrb	r3, [r3, #2]
 8011104:	4618      	mov	r0, r3
 8011106:	f000 f997 	bl	8011438 <RTC_Bcd2ToByte>
 801110a:	4603      	mov	r3, r0
 801110c:	461a      	mov	r2, r3
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	3718      	adds	r7, #24
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}
 801111c:	007f7f7f 	.word	0x007f7f7f

08011120 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011120:	b590      	push	{r4, r7, lr}
 8011122:	b087      	sub	sp, #28
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011132:	2b01      	cmp	r3, #1
 8011134:	d101      	bne.n	801113a <HAL_RTC_SetDate+0x1a>
 8011136:	2302      	movs	r3, #2
 8011138:	e073      	b.n	8011222 <HAL_RTC_SetDate+0x102>
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2201      	movs	r2, #1
 801113e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2202      	movs	r2, #2
 8011146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d10e      	bne.n	801116e <HAL_RTC_SetDate+0x4e>
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	785b      	ldrb	r3, [r3, #1]
 8011154:	f003 0310 	and.w	r3, r3, #16
 8011158:	2b00      	cmp	r3, #0
 801115a:	d008      	beq.n	801116e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	785b      	ldrb	r3, [r3, #1]
 8011160:	f023 0310 	bic.w	r3, r3, #16
 8011164:	b2db      	uxtb	r3, r3
 8011166:	330a      	adds	r3, #10
 8011168:	b2da      	uxtb	r2, r3
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d11c      	bne.n	80111ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	78db      	ldrb	r3, [r3, #3]
 8011178:	4618      	mov	r0, r3
 801117a:	f000 f93d 	bl	80113f8 <RTC_ByteToBcd2>
 801117e:	4603      	mov	r3, r0
 8011180:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	785b      	ldrb	r3, [r3, #1]
 8011186:	4618      	mov	r0, r3
 8011188:	f000 f936 	bl	80113f8 <RTC_ByteToBcd2>
 801118c:	4603      	mov	r3, r0
 801118e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011190:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	789b      	ldrb	r3, [r3, #2]
 8011196:	4618      	mov	r0, r3
 8011198:	f000 f92e 	bl	80113f8 <RTC_ByteToBcd2>
 801119c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801119e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80111a8:	4313      	orrs	r3, r2
 80111aa:	617b      	str	r3, [r7, #20]
 80111ac:	e00e      	b.n	80111cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	78db      	ldrb	r3, [r3, #3]
 80111b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	785b      	ldrb	r3, [r3, #1]
 80111b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80111ba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80111bc:	68ba      	ldr	r2, [r7, #8]
 80111be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80111c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80111c8:	4313      	orrs	r3, r2
 80111ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	22ca      	movs	r2, #202	; 0xca
 80111d2:	625a      	str	r2, [r3, #36]	; 0x24
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	2253      	movs	r2, #83	; 0x53
 80111da:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f000 f899 	bl	8011314 <RTC_EnterInitMode>
 80111e2:	4603      	mov	r3, r0
 80111e4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80111e6:	7cfb      	ldrb	r3, [r7, #19]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d10a      	bne.n	8011202 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	6979      	ldr	r1, [r7, #20]
 80111f2:	4b0e      	ldr	r3, [pc, #56]	; (801122c <HAL_RTC_SetDate+0x10c>)
 80111f4:	400b      	ands	r3, r1
 80111f6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80111f8:	68f8      	ldr	r0, [r7, #12]
 80111fa:	f000 f8bf 	bl	801137c <RTC_ExitInitMode>
 80111fe:	4603      	mov	r3, r0
 8011200:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	22ff      	movs	r2, #255	; 0xff
 8011208:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801120a:	7cfb      	ldrb	r3, [r7, #19]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d103      	bne.n	8011218 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2201      	movs	r2, #1
 8011214:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2200      	movs	r2, #0
 801121c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011220:	7cfb      	ldrb	r3, [r7, #19]


}
 8011222:	4618      	mov	r0, r3
 8011224:	371c      	adds	r7, #28
 8011226:	46bd      	mov	sp, r7
 8011228:	bd90      	pop	{r4, r7, pc}
 801122a:	bf00      	nop
 801122c:	00ffff3f 	.word	0x00ffff3f

08011230 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b086      	sub	sp, #24
 8011234:	af00      	add	r7, sp, #0
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
 801123a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	685a      	ldr	r2, [r3, #4]
 8011242:	4b21      	ldr	r3, [pc, #132]	; (80112c8 <HAL_RTC_GetDate+0x98>)
 8011244:	4013      	ands	r3, r2
 8011246:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	0c1b      	lsrs	r3, r3, #16
 801124c:	b2da      	uxtb	r2, r3
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	0a1b      	lsrs	r3, r3, #8
 8011256:	b2db      	uxtb	r3, r3
 8011258:	f003 031f 	and.w	r3, r3, #31
 801125c:	b2da      	uxtb	r2, r3
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	b2db      	uxtb	r3, r3
 8011266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801126a:	b2da      	uxtb	r2, r3
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	0b5b      	lsrs	r3, r3, #13
 8011274:	b2db      	uxtb	r3, r3
 8011276:	f003 0307 	and.w	r3, r3, #7
 801127a:	b2da      	uxtb	r2, r3
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d11a      	bne.n	80112bc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	78db      	ldrb	r3, [r3, #3]
 801128a:	4618      	mov	r0, r3
 801128c:	f000 f8d4 	bl	8011438 <RTC_Bcd2ToByte>
 8011290:	4603      	mov	r3, r0
 8011292:	461a      	mov	r2, r3
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	785b      	ldrb	r3, [r3, #1]
 801129c:	4618      	mov	r0, r3
 801129e:	f000 f8cb 	bl	8011438 <RTC_Bcd2ToByte>
 80112a2:	4603      	mov	r3, r0
 80112a4:	461a      	mov	r2, r3
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	789b      	ldrb	r3, [r3, #2]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f000 f8c2 	bl	8011438 <RTC_Bcd2ToByte>
 80112b4:	4603      	mov	r3, r0
 80112b6:	461a      	mov	r2, r3
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80112bc:	2300      	movs	r3, #0
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3718      	adds	r7, #24
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	00ffff3f 	.word	0x00ffff3f

080112cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a0d      	ldr	r2, [pc, #52]	; (8011310 <HAL_RTC_WaitForSynchro+0x44>)
 80112da:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80112dc:	f7f3 ff34 	bl	8005148 <HAL_GetTick>
 80112e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80112e2:	e009      	b.n	80112f8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80112e4:	f7f3 ff30 	bl	8005148 <HAL_GetTick>
 80112e8:	4602      	mov	r2, r0
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80112f2:	d901      	bls.n	80112f8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80112f4:	2303      	movs	r3, #3
 80112f6:	e007      	b.n	8011308 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	f003 0320 	and.w	r3, r3, #32
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0ee      	beq.n	80112e4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	3710      	adds	r7, #16
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	0003ff5f 	.word	0x0003ff5f

08011314 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801131c:	2300      	movs	r3, #0
 801131e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801132a:	2b00      	cmp	r3, #0
 801132c:	d120      	bne.n	8011370 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f04f 32ff 	mov.w	r2, #4294967295
 8011336:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011338:	f7f3 ff06 	bl	8005148 <HAL_GetTick>
 801133c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801133e:	e00d      	b.n	801135c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011340:	f7f3 ff02 	bl	8005148 <HAL_GetTick>
 8011344:	4602      	mov	r2, r0
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	1ad3      	subs	r3, r2, r3
 801134a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801134e:	d905      	bls.n	801135c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011350:	2303      	movs	r3, #3
 8011352:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2203      	movs	r2, #3
 8011358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	68db      	ldr	r3, [r3, #12]
 8011362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011366:	2b00      	cmp	r3, #0
 8011368:	d102      	bne.n	8011370 <RTC_EnterInitMode+0x5c>
 801136a:	7bfb      	ldrb	r3, [r7, #15]
 801136c:	2b03      	cmp	r3, #3
 801136e:	d1e7      	bne.n	8011340 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011370:	7bfb      	ldrb	r3, [r7, #15]
}
 8011372:	4618      	mov	r0, r3
 8011374:	3710      	adds	r7, #16
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
	...

0801137c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011388:	4b1a      	ldr	r3, [pc, #104]	; (80113f4 <RTC_ExitInitMode+0x78>)
 801138a:	68db      	ldr	r3, [r3, #12]
 801138c:	4a19      	ldr	r2, [pc, #100]	; (80113f4 <RTC_ExitInitMode+0x78>)
 801138e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011392:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011394:	4b17      	ldr	r3, [pc, #92]	; (80113f4 <RTC_ExitInitMode+0x78>)
 8011396:	689b      	ldr	r3, [r3, #8]
 8011398:	f003 0320 	and.w	r3, r3, #32
 801139c:	2b00      	cmp	r3, #0
 801139e:	d10c      	bne.n	80113ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f7ff ff93 	bl	80112cc <HAL_RTC_WaitForSynchro>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d01e      	beq.n	80113ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2203      	movs	r2, #3
 80113b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80113b4:	2303      	movs	r3, #3
 80113b6:	73fb      	strb	r3, [r7, #15]
 80113b8:	e017      	b.n	80113ea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80113ba:	4b0e      	ldr	r3, [pc, #56]	; (80113f4 <RTC_ExitInitMode+0x78>)
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	4a0d      	ldr	r2, [pc, #52]	; (80113f4 <RTC_ExitInitMode+0x78>)
 80113c0:	f023 0320 	bic.w	r3, r3, #32
 80113c4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f7ff ff80 	bl	80112cc <HAL_RTC_WaitForSynchro>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d005      	beq.n	80113de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2203      	movs	r2, #3
 80113d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80113da:	2303      	movs	r3, #3
 80113dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80113de:	4b05      	ldr	r3, [pc, #20]	; (80113f4 <RTC_ExitInitMode+0x78>)
 80113e0:	689b      	ldr	r3, [r3, #8]
 80113e2:	4a04      	ldr	r2, [pc, #16]	; (80113f4 <RTC_ExitInitMode+0x78>)
 80113e4:	f043 0320 	orr.w	r3, r3, #32
 80113e8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80113ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3710      	adds	r7, #16
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	58004000 	.word	0x58004000

080113f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b085      	sub	sp, #20
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	4603      	mov	r3, r0
 8011400:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011402:	2300      	movs	r3, #0
 8011404:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011406:	79fb      	ldrb	r3, [r7, #7]
 8011408:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 801140a:	e005      	b.n	8011418 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	3301      	adds	r3, #1
 8011410:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011412:	7afb      	ldrb	r3, [r7, #11]
 8011414:	3b0a      	subs	r3, #10
 8011416:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011418:	7afb      	ldrb	r3, [r7, #11]
 801141a:	2b09      	cmp	r3, #9
 801141c:	d8f6      	bhi.n	801140c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	b2db      	uxtb	r3, r3
 8011422:	011b      	lsls	r3, r3, #4
 8011424:	b2da      	uxtb	r2, r3
 8011426:	7afb      	ldrb	r3, [r7, #11]
 8011428:	4313      	orrs	r3, r2
 801142a:	b2db      	uxtb	r3, r3
}
 801142c:	4618      	mov	r0, r3
 801142e:	3714      	adds	r7, #20
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr

08011438 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011438:	b480      	push	{r7}
 801143a:	b085      	sub	sp, #20
 801143c:	af00      	add	r7, sp, #0
 801143e:	4603      	mov	r3, r0
 8011440:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011442:	79fb      	ldrb	r3, [r7, #7]
 8011444:	091b      	lsrs	r3, r3, #4
 8011446:	b2db      	uxtb	r3, r3
 8011448:	461a      	mov	r2, r3
 801144a:	0092      	lsls	r2, r2, #2
 801144c:	4413      	add	r3, r2
 801144e:	005b      	lsls	r3, r3, #1
 8011450:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011452:	79fb      	ldrb	r3, [r7, #7]
 8011454:	f003 030f 	and.w	r3, r3, #15
 8011458:	b2da      	uxtb	r2, r3
 801145a:	7bfb      	ldrb	r3, [r7, #15]
 801145c:	4413      	add	r3, r2
 801145e:	b2db      	uxtb	r3, r3
}
 8011460:	4618      	mov	r0, r3
 8011462:	3714      	adds	r7, #20
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr

0801146c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b084      	sub	sp, #16
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d101      	bne.n	801147e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801147a:	2301      	movs	r3, #1
 801147c:	e10f      	b.n	801169e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2200      	movs	r2, #0
 8011482:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	4a87      	ldr	r2, [pc, #540]	; (80116a8 <HAL_SPI_Init+0x23c>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d00f      	beq.n	80114ae <HAL_SPI_Init+0x42>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	4a86      	ldr	r2, [pc, #536]	; (80116ac <HAL_SPI_Init+0x240>)
 8011494:	4293      	cmp	r3, r2
 8011496:	d00a      	beq.n	80114ae <HAL_SPI_Init+0x42>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	4a84      	ldr	r2, [pc, #528]	; (80116b0 <HAL_SPI_Init+0x244>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d005      	beq.n	80114ae <HAL_SPI_Init+0x42>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	2b0f      	cmp	r3, #15
 80114a8:	d901      	bls.n	80114ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80114aa:	2301      	movs	r3, #1
 80114ac:	e0f7      	b.n	801169e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f000 fd60 	bl	8011f74 <SPI_GetPacketSize>
 80114b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	4a7b      	ldr	r2, [pc, #492]	; (80116a8 <HAL_SPI_Init+0x23c>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d00c      	beq.n	80114da <HAL_SPI_Init+0x6e>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a79      	ldr	r2, [pc, #484]	; (80116ac <HAL_SPI_Init+0x240>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d007      	beq.n	80114da <HAL_SPI_Init+0x6e>
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4a78      	ldr	r2, [pc, #480]	; (80116b0 <HAL_SPI_Init+0x244>)
 80114d0:	4293      	cmp	r3, r2
 80114d2:	d002      	beq.n	80114da <HAL_SPI_Init+0x6e>
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	2b08      	cmp	r3, #8
 80114d8:	d811      	bhi.n	80114fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80114de:	4a72      	ldr	r2, [pc, #456]	; (80116a8 <HAL_SPI_Init+0x23c>)
 80114e0:	4293      	cmp	r3, r2
 80114e2:	d009      	beq.n	80114f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	4a70      	ldr	r2, [pc, #448]	; (80116ac <HAL_SPI_Init+0x240>)
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d004      	beq.n	80114f8 <HAL_SPI_Init+0x8c>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	4a6f      	ldr	r2, [pc, #444]	; (80116b0 <HAL_SPI_Init+0x244>)
 80114f4:	4293      	cmp	r3, r2
 80114f6:	d104      	bne.n	8011502 <HAL_SPI_Init+0x96>
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2b10      	cmp	r3, #16
 80114fc:	d901      	bls.n	8011502 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80114fe:	2301      	movs	r3, #1
 8011500:	e0cd      	b.n	801169e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011508:	b2db      	uxtb	r3, r3
 801150a:	2b00      	cmp	r3, #0
 801150c:	d106      	bne.n	801151c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2200      	movs	r2, #0
 8011512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f7f2 f9b6 	bl	8003888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2202      	movs	r2, #2
 8011520:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f022 0201 	bic.w	r2, r2, #1
 8011532:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801153e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	699b      	ldr	r3, [r3, #24]
 8011544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011548:	d119      	bne.n	801157e <HAL_SPI_Init+0x112>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011552:	d103      	bne.n	801155c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011558:	2b00      	cmp	r3, #0
 801155a:	d008      	beq.n	801156e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011560:	2b00      	cmp	r3, #0
 8011562:	d10c      	bne.n	801157e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801156c:	d107      	bne.n	801157e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801157c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011586:	2b00      	cmp	r3, #0
 8011588:	d00f      	beq.n	80115aa <HAL_SPI_Init+0x13e>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	68db      	ldr	r3, [r3, #12]
 801158e:	2b06      	cmp	r3, #6
 8011590:	d90b      	bls.n	80115aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	430a      	orrs	r2, r1
 80115a6:	601a      	str	r2, [r3, #0]
 80115a8:	e007      	b.n	80115ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80115b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	69da      	ldr	r2, [r3, #28]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115c2:	431a      	orrs	r2, r3
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	431a      	orrs	r2, r3
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115cc:	ea42 0103 	orr.w	r1, r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	68da      	ldr	r2, [r3, #12]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	430a      	orrs	r2, r1
 80115da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115e4:	431a      	orrs	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ea:	431a      	orrs	r2, r3
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	699b      	ldr	r3, [r3, #24]
 80115f0:	431a      	orrs	r2, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	691b      	ldr	r3, [r3, #16]
 80115f6:	431a      	orrs	r2, r3
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	695b      	ldr	r3, [r3, #20]
 80115fc:	431a      	orrs	r2, r3
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6a1b      	ldr	r3, [r3, #32]
 8011602:	431a      	orrs	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	431a      	orrs	r2, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801160e:	431a      	orrs	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	689b      	ldr	r3, [r3, #8]
 8011614:	431a      	orrs	r2, r3
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801161a:	ea42 0103 	orr.w	r1, r2, r3
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	430a      	orrs	r2, r1
 8011628:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d113      	bne.n	801165a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	689b      	ldr	r3, [r3, #8]
 8011638:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011644:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	689b      	ldr	r3, [r3, #8]
 801164c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011658:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f022 0201 	bic.w	r2, r2, #1
 8011668:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00a      	beq.n	801168c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	430a      	orrs	r2, r1
 801168a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2201      	movs	r2, #1
 8011698:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801169c:	2300      	movs	r3, #0
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3710      	adds	r7, #16
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop
 80116a8:	40013000 	.word	0x40013000
 80116ac:	40003800 	.word	0x40003800
 80116b0:	40003c00 	.word	0x40003c00

080116b4 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	4613      	mov	r3, r2
 80116c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	2b01      	cmp	r3, #1
 80116cc:	d005      	beq.n	80116da <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2200      	movs	r2, #0
 80116d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 80116d6:	2302      	movs	r3, #2
 80116d8:	e127      	b.n	801192a <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d002      	beq.n	80116e6 <HAL_SPI_Receive_DMA+0x32>
 80116e0:	88fb      	ldrh	r3, [r7, #6]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d105      	bne.n	80116f2 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2200      	movs	r2, #0
 80116ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80116ee:	2301      	movs	r3, #1
 80116f0:	e11b      	b.n	801192a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d101      	bne.n	8011700 <HAL_SPI_Receive_DMA+0x4c>
 80116fc:	2302      	movs	r3, #2
 80116fe:	e114      	b.n	801192a <HAL_SPI_Receive_DMA+0x276>
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	2201      	movs	r2, #1
 8011704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2204      	movs	r2, #4
 801170c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2200      	movs	r2, #0
 8011714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	68ba      	ldr	r2, [r7, #8]
 801171c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	88fa      	ldrh	r2, [r7, #6]
 8011722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	88fa      	ldrh	r2, [r7, #6]
 801172a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2200      	movs	r2, #0
 8011732:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	2200      	movs	r2, #0
 8011738:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	2200      	movs	r2, #0
 801173e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2200      	movs	r2, #0
 8011746:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011752:	d108      	bne.n	8011766 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011762:	601a      	str	r2, [r3, #0]
 8011764:	e009      	b.n	801177a <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	68db      	ldr	r3, [r3, #12]
 801176c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011778:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	2b0f      	cmp	r3, #15
 8011780:	d905      	bls.n	801178e <HAL_SPI_Receive_DMA+0xda>
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011786:	699b      	ldr	r3, [r3, #24]
 8011788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801178c:	d10f      	bne.n	80117ae <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011792:	2b07      	cmp	r3, #7
 8011794:	d911      	bls.n	80117ba <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801179a:	699b      	ldr	r3, [r3, #24]
 801179c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80117a0:	d00b      	beq.n	80117ba <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117a6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80117a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80117ac:	d005      	beq.n	80117ba <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80117b6:	2301      	movs	r3, #1
 80117b8:	e0b7      	b.n	801192a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	689a      	ldr	r2, [r3, #8]
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80117c8:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	68db      	ldr	r3, [r3, #12]
 80117ce:	2b07      	cmp	r3, #7
 80117d0:	d820      	bhi.n	8011814 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117d6:	699b      	ldr	r3, [r3, #24]
 80117d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80117dc:	d109      	bne.n	80117f2 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	3301      	adds	r3, #1
 80117e8:	105b      	asrs	r3, r3, #1
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117f6:	699b      	ldr	r3, [r3, #24]
 80117f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80117fc:	d11e      	bne.n	801183c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011804:	b29b      	uxth	r3, r3
 8011806:	3303      	adds	r3, #3
 8011808:	109b      	asrs	r3, r3, #2
 801180a:	b29a      	uxth	r2, r3
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011812:	e013      	b.n	801183c <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	68db      	ldr	r3, [r3, #12]
 8011818:	2b0f      	cmp	r3, #15
 801181a:	d80f      	bhi.n	801183c <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011820:	699b      	ldr	r3, [r3, #24]
 8011822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011826:	d109      	bne.n	801183c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801182e:	b29b      	uxth	r3, r3
 8011830:	3301      	adds	r3, #1
 8011832:	105b      	asrs	r3, r3, #1
 8011834:	b29a      	uxth	r2, r3
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011840:	4a3c      	ldr	r2, [pc, #240]	; (8011934 <HAL_SPI_Receive_DMA+0x280>)
 8011842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011848:	4a3b      	ldr	r2, [pc, #236]	; (8011938 <HAL_SPI_Receive_DMA+0x284>)
 801184a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011850:	4a3a      	ldr	r2, [pc, #232]	; (801193c <HAL_SPI_Receive_DMA+0x288>)
 8011852:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011858:	2200      	movs	r2, #0
 801185a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	3330      	adds	r3, #48	; 0x30
 8011866:	4619      	mov	r1, r3
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801186c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011874:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011876:	f7f6 f8eb 	bl	8007a50 <HAL_DMA_Start_IT>
 801187a:	4603      	mov	r3, r0
 801187c:	2b00      	cmp	r3, #0
 801187e:	d011      	beq.n	80118a4 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011886:	f043 0210 	orr.w	r2, r3, #16
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	2201      	movs	r2, #1
 8011894:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2200      	movs	r2, #0
 801189c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 80118a0:	2301      	movs	r3, #1
 80118a2:	e042      	b.n	801192a <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80118a8:	69db      	ldr	r3, [r3, #28]
 80118aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118ae:	d108      	bne.n	80118c2 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	6859      	ldr	r1, [r3, #4]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	4b21      	ldr	r3, [pc, #132]	; (8011940 <HAL_SPI_Receive_DMA+0x28c>)
 80118bc:	400b      	ands	r3, r1
 80118be:	6053      	str	r3, [r2, #4]
 80118c0:	e009      	b.n	80118d6 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	685a      	ldr	r2, [r3, #4]
 80118c8:	4b1d      	ldr	r3, [pc, #116]	; (8011940 <HAL_SPI_Receive_DMA+0x28c>)
 80118ca:	4013      	ands	r3, r2
 80118cc:	88f9      	ldrh	r1, [r7, #6]
 80118ce:	68fa      	ldr	r2, [r7, #12]
 80118d0:	6812      	ldr	r2, [r2, #0]
 80118d2:	430b      	orrs	r3, r1
 80118d4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	689a      	ldr	r2, [r3, #8]
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80118e4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	691a      	ldr	r2, [r3, #16]
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80118f4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	f042 0201 	orr.w	r2, r2, #1
 8011904:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801190e:	d107      	bne.n	8011920 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801191e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2200      	movs	r2, #0
 8011924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011928:	2300      	movs	r3, #0
}
 801192a:	4618      	mov	r0, r3
 801192c:	3710      	adds	r7, #16
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	08011d9f 	.word	0x08011d9f
 8011938:	08011d59 	.word	0x08011d59
 801193c:	08011dbb 	.word	0x08011dbb
 8011940:	ffff0000 	.word	0xffff0000

08011944 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b08a      	sub	sp, #40	; 0x28
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	691b      	ldr	r3, [r3, #16]
 8011952:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	695b      	ldr	r3, [r3, #20]
 801195a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801195c:	6a3a      	ldr	r2, [r7, #32]
 801195e:	69fb      	ldr	r3, [r7, #28]
 8011960:	4013      	ands	r3, r2
 8011962:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	689b      	ldr	r3, [r3, #8]
 801196a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801196c:	2300      	movs	r3, #0
 801196e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011976:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	3330      	adds	r3, #48	; 0x30
 801197e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011986:	2b00      	cmp	r3, #0
 8011988:	d010      	beq.n	80119ac <HAL_SPI_IRQHandler+0x68>
 801198a:	6a3b      	ldr	r3, [r7, #32]
 801198c:	f003 0308 	and.w	r3, r3, #8
 8011990:	2b00      	cmp	r3, #0
 8011992:	d00b      	beq.n	80119ac <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	699a      	ldr	r2, [r3, #24]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80119a2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f000 f9cd 	bl	8011d44 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80119aa:	e192      	b.n	8011cd2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80119ac:	69bb      	ldr	r3, [r7, #24]
 80119ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d113      	bne.n	80119de <HAL_SPI_IRQHandler+0x9a>
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	f003 0320 	and.w	r3, r3, #32
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d10e      	bne.n	80119de <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d009      	beq.n	80119de <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	4798      	blx	r3
    handled = 1UL;
 80119da:	2301      	movs	r3, #1
 80119dc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80119de:	69bb      	ldr	r3, [r7, #24]
 80119e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d10f      	bne.n	8011a08 <HAL_SPI_IRQHandler+0xc4>
 80119e8:	69bb      	ldr	r3, [r7, #24]
 80119ea:	f003 0301 	and.w	r3, r3, #1
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00a      	beq.n	8011a08 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80119f2:	69bb      	ldr	r3, [r7, #24]
 80119f4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d105      	bne.n	8011a08 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	4798      	blx	r3
    handled = 1UL;
 8011a04:	2301      	movs	r3, #1
 8011a06:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011a08:	69bb      	ldr	r3, [r7, #24]
 8011a0a:	f003 0320 	and.w	r3, r3, #32
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d10f      	bne.n	8011a32 <HAL_SPI_IRQHandler+0xee>
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	f003 0302 	and.w	r3, r3, #2
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d00a      	beq.n	8011a32 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d105      	bne.n	8011a32 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	4798      	blx	r3
    handled = 1UL;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f040 8147 	bne.w	8011cc8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	f003 0308 	and.w	r3, r3, #8
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	f000 808b 	beq.w	8011b5c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	699a      	ldr	r2, [r3, #24]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f042 0208 	orr.w	r2, r2, #8
 8011a54:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	699a      	ldr	r2, [r3, #24]
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	f042 0210 	orr.w	r2, r2, #16
 8011a64:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	699a      	ldr	r2, [r3, #24]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011a74:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	691a      	ldr	r2, [r3, #16]
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f022 0208 	bic.w	r2, r2, #8
 8011a84:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	689b      	ldr	r3, [r3, #8]
 8011a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d13d      	bne.n	8011b10 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011a94:	e036      	b.n	8011b04 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	68db      	ldr	r3, [r3, #12]
 8011a9a:	2b0f      	cmp	r3, #15
 8011a9c:	d90b      	bls.n	8011ab6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011aa6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011aa8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011aae:	1d1a      	adds	r2, r3, #4
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	665a      	str	r2, [r3, #100]	; 0x64
 8011ab4:	e01d      	b.n	8011af2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	68db      	ldr	r3, [r3, #12]
 8011aba:	2b07      	cmp	r3, #7
 8011abc:	d90b      	bls.n	8011ad6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ac2:	68fa      	ldr	r2, [r7, #12]
 8011ac4:	8812      	ldrh	r2, [r2, #0]
 8011ac6:	b292      	uxth	r2, r2
 8011ac8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ace:	1c9a      	adds	r2, r3, #2
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	665a      	str	r2, [r3, #100]	; 0x64
 8011ad4:	e00d      	b.n	8011af2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ae2:	7812      	ldrb	r2, [r2, #0]
 8011ae4:	b2d2      	uxtb	r2, r2
 8011ae6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011aec:	1c5a      	adds	r2, r3, #1
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	3b01      	subs	r3, #1
 8011afc:	b29a      	uxth	r2, r3
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d1c2      	bne.n	8011a96 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f000 f98f 	bl	8011e34 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d003      	beq.n	8011b30 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 f901 	bl	8011d30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011b2e:	e0d0      	b.n	8011cd2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011b30:	7cfb      	ldrb	r3, [r7, #19]
 8011b32:	2b05      	cmp	r3, #5
 8011b34:	d103      	bne.n	8011b3e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f000 f8e6 	bl	8011d08 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011b3c:	e0c6      	b.n	8011ccc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011b3e:	7cfb      	ldrb	r3, [r7, #19]
 8011b40:	2b04      	cmp	r3, #4
 8011b42:	d103      	bne.n	8011b4c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f000 f8d5 	bl	8011cf4 <HAL_SPI_RxCpltCallback>
    return;
 8011b4a:	e0bf      	b.n	8011ccc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011b4c:	7cfb      	ldrb	r3, [r7, #19]
 8011b4e:	2b03      	cmp	r3, #3
 8011b50:	f040 80bc 	bne.w	8011ccc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f000 f8c3 	bl	8011ce0 <HAL_SPI_TxCpltCallback>
    return;
 8011b5a:	e0b7      	b.n	8011ccc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	f000 80b5 	beq.w	8011cd2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d00f      	beq.n	8011b92 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b78:	f043 0204 	orr.w	r2, r3, #4
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	699a      	ldr	r2, [r3, #24]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b90:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d00f      	beq.n	8011bbc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ba2:	f043 0201 	orr.w	r2, r3, #1
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	699a      	ldr	r2, [r3, #24]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011bba:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011bbc:	69bb      	ldr	r3, [r7, #24]
 8011bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00f      	beq.n	8011be6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bcc:	f043 0208 	orr.w	r2, r3, #8
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	699a      	ldr	r2, [r3, #24]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011be4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011be6:	69bb      	ldr	r3, [r7, #24]
 8011be8:	f003 0320 	and.w	r3, r3, #32
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d00f      	beq.n	8011c10 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bf6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	699a      	ldr	r2, [r3, #24]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f042 0220 	orr.w	r2, r2, #32
 8011c0e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d05a      	beq.n	8011cd0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	f022 0201 	bic.w	r2, r2, #1
 8011c28:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	6919      	ldr	r1, [r3, #16]
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	4b28      	ldr	r3, [pc, #160]	; (8011cd8 <HAL_SPI_IRQHandler+0x394>)
 8011c36:	400b      	ands	r3, r1
 8011c38:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011c40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011c44:	d138      	bne.n	8011cb8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	689a      	ldr	r2, [r3, #8]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011c54:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d013      	beq.n	8011c86 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c62:	4a1e      	ldr	r2, [pc, #120]	; (8011cdc <HAL_SPI_IRQHandler+0x398>)
 8011c64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7f6 fc78 	bl	8008560 <HAL_DMA_Abort_IT>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d007      	beq.n	8011c86 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d020      	beq.n	8011cd0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c92:	4a12      	ldr	r2, [pc, #72]	; (8011cdc <HAL_SPI_IRQHandler+0x398>)
 8011c94:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7f6 fc60 	bl	8008560 <HAL_DMA_Abort_IT>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d014      	beq.n	8011cd0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011cb6:	e00b      	b.n	8011cd0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2201      	movs	r2, #1
 8011cbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 f835 	bl	8011d30 <HAL_SPI_ErrorCallback>
    return;
 8011cc6:	e003      	b.n	8011cd0 <HAL_SPI_IRQHandler+0x38c>
    return;
 8011cc8:	bf00      	nop
 8011cca:	e002      	b.n	8011cd2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8011ccc:	bf00      	nop
 8011cce:	e000      	b.n	8011cd2 <HAL_SPI_IRQHandler+0x38e>
    return;
 8011cd0:	bf00      	nop
  }
}
 8011cd2:	3728      	adds	r7, #40	; 0x28
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	fffffc94 	.word	0xfffffc94
 8011cdc:	08011e01 	.word	0x08011e01

08011ce0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b083      	sub	sp, #12
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8011ce8:	bf00      	nop
 8011cea:	370c      	adds	r7, #12
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b083      	sub	sp, #12
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8011cfc:	bf00      	nop
 8011cfe:	370c      	adds	r7, #12
 8011d00:	46bd      	mov	sp, r7
 8011d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d06:	4770      	bx	lr

08011d08 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011d08:	b480      	push	{r7}
 8011d0a:	b083      	sub	sp, #12
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011d10:	bf00      	nop
 8011d12:	370c      	adds	r7, #12
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr

08011d1c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8011d24:	bf00      	nop
 8011d26:	370c      	adds	r7, #12
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr

08011d30 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011d30:	b480      	push	{r7}
 8011d32:	b083      	sub	sp, #12
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011d38:	bf00      	nop
 8011d3a:	370c      	adds	r7, #12
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr

08011d44 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011d44:	b480      	push	{r7}
 8011d46:	b083      	sub	sp, #12
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8011d4c:	bf00      	nop
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d64:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011d6c:	b2db      	uxtb	r3, r3
 8011d6e:	2b07      	cmp	r3, #7
 8011d70:	d011      	beq.n	8011d96 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d76:	69db      	ldr	r3, [r3, #28]
 8011d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d7c:	d103      	bne.n	8011d86 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8011d7e:	68f8      	ldr	r0, [r7, #12]
 8011d80:	f7ff ffb8 	bl	8011cf4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8011d84:	e007      	b.n	8011d96 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	691a      	ldr	r2, [r3, #16]
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	f042 0208 	orr.w	r2, r2, #8
 8011d94:	611a      	str	r2, [r3, #16]
}
 8011d96:	bf00      	nop
 8011d98:	3710      	adds	r7, #16
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}

08011d9e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b084      	sub	sp, #16
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011daa:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8011dac:	68f8      	ldr	r0, [r7, #12]
 8011dae:	f7ff ffb5 	bl	8011d1c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011db2:	bf00      	nop
 8011db4:	3710      	adds	r7, #16
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}

08011dba <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8011dba:	b580      	push	{r7, lr}
 8011dbc:	b084      	sub	sp, #16
 8011dbe:	af00      	add	r7, sp, #0
 8011dc0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dc6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7f7 fd47 	bl	800985c <HAL_DMA_GetError>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b02      	cmp	r3, #2
 8011dd2:	d011      	beq.n	8011df8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8011dd4:	68f8      	ldr	r0, [r7, #12]
 8011dd6:	f000 f82d 	bl	8011e34 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011de0:	f043 0210 	orr.w	r2, r3, #16
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2201      	movs	r2, #1
 8011dee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8011df2:	68f8      	ldr	r0, [r7, #12]
 8011df4:	f7ff ff9c 	bl	8011d30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8011df8:	bf00      	nop
 8011dfa:	3710      	adds	r7, #16
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	2200      	movs	r2, #0
 8011e12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	2200      	movs	r2, #0
 8011e1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	2201      	movs	r2, #1
 8011e22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f7ff ff82 	bl	8011d30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011e2c:	bf00      	nop
 8011e2e:	3710      	adds	r7, #16
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}

08011e34 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b085      	sub	sp, #20
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	695b      	ldr	r3, [r3, #20]
 8011e42:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	699a      	ldr	r2, [r3, #24]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f042 0208 	orr.w	r2, r2, #8
 8011e52:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	699a      	ldr	r2, [r3, #24]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f042 0210 	orr.w	r2, r2, #16
 8011e62:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	681a      	ldr	r2, [r3, #0]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	f022 0201 	bic.w	r2, r2, #1
 8011e72:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	6919      	ldr	r1, [r3, #16]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681a      	ldr	r2, [r3, #0]
 8011e7e:	4b3c      	ldr	r3, [pc, #240]	; (8011f70 <SPI_CloseTransfer+0x13c>)
 8011e80:	400b      	ands	r3, r1
 8011e82:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	689a      	ldr	r2, [r3, #8]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011e92:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	2b04      	cmp	r3, #4
 8011e9e:	d014      	beq.n	8011eca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	f003 0320 	and.w	r3, r3, #32
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d00f      	beq.n	8011eca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011eb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	699a      	ldr	r2, [r3, #24]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f042 0220 	orr.w	r2, r2, #32
 8011ec8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	2b03      	cmp	r3, #3
 8011ed4:	d014      	beq.n	8011f00 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00f      	beq.n	8011f00 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ee6:	f043 0204 	orr.w	r2, r3, #4
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	699a      	ldr	r2, [r3, #24]
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011efe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d00f      	beq.n	8011f2a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f10:	f043 0201 	orr.w	r2, r3, #1
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	699a      	ldr	r2, [r3, #24]
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011f28:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d00f      	beq.n	8011f54 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f3a:	f043 0208 	orr.w	r2, r3, #8
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	699a      	ldr	r2, [r3, #24]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011f52:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2200      	movs	r2, #0
 8011f58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8011f64:	bf00      	nop
 8011f66:	3714      	adds	r7, #20
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr
 8011f70:	fffffc90 	.word	0xfffffc90

08011f74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011f74:	b480      	push	{r7}
 8011f76:	b085      	sub	sp, #20
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f80:	095b      	lsrs	r3, r3, #5
 8011f82:	3301      	adds	r3, #1
 8011f84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	68db      	ldr	r3, [r3, #12]
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	3307      	adds	r3, #7
 8011f92:	08db      	lsrs	r3, r3, #3
 8011f94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	68fa      	ldr	r2, [r7, #12]
 8011f9a:	fb02 f303 	mul.w	r3, r2, r3
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3714      	adds	r7, #20
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b082      	sub	sp, #8
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d101      	bne.n	8011fbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	e049      	b.n	8012050 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011fc2:	b2db      	uxtb	r3, r3
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d106      	bne.n	8011fd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f7f2 f96f 	bl	80042b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2202      	movs	r2, #2
 8011fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	3304      	adds	r3, #4
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	4610      	mov	r0, r2
 8011fea:	f000 fe7d 	bl	8012ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2201      	movs	r2, #1
 8012002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2201      	movs	r2, #1
 801200a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	2201      	movs	r2, #1
 8012012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2201      	movs	r2, #1
 801201a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2201      	movs	r2, #1
 8012022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2201      	movs	r2, #1
 801202a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2201      	movs	r2, #1
 8012032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2201      	movs	r2, #1
 801203a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2201      	movs	r2, #1
 8012042:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	2201      	movs	r2, #1
 801204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801204e:	2300      	movs	r3, #0
}
 8012050:	4618      	mov	r0, r3
 8012052:	3708      	adds	r7, #8
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012058:	b480      	push	{r7}
 801205a:	b085      	sub	sp, #20
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012066:	b2db      	uxtb	r3, r3
 8012068:	2b01      	cmp	r3, #1
 801206a:	d001      	beq.n	8012070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801206c:	2301      	movs	r3, #1
 801206e:	e054      	b.n	801211a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2202      	movs	r2, #2
 8012074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	68da      	ldr	r2, [r3, #12]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f042 0201 	orr.w	r2, r2, #1
 8012086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	4a26      	ldr	r2, [pc, #152]	; (8012128 <HAL_TIM_Base_Start_IT+0xd0>)
 801208e:	4293      	cmp	r3, r2
 8012090:	d022      	beq.n	80120d8 <HAL_TIM_Base_Start_IT+0x80>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801209a:	d01d      	beq.n	80120d8 <HAL_TIM_Base_Start_IT+0x80>
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	4a22      	ldr	r2, [pc, #136]	; (801212c <HAL_TIM_Base_Start_IT+0xd4>)
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d018      	beq.n	80120d8 <HAL_TIM_Base_Start_IT+0x80>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	4a21      	ldr	r2, [pc, #132]	; (8012130 <HAL_TIM_Base_Start_IT+0xd8>)
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d013      	beq.n	80120d8 <HAL_TIM_Base_Start_IT+0x80>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	4a1f      	ldr	r2, [pc, #124]	; (8012134 <HAL_TIM_Base_Start_IT+0xdc>)
 80120b6:	4293      	cmp	r3, r2
 80120b8:	d00e      	beq.n	80120d8 <HAL_TIM_Base_Start_IT+0x80>
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	4a1e      	ldr	r2, [pc, #120]	; (8012138 <HAL_TIM_Base_Start_IT+0xe0>)
 80120c0:	4293      	cmp	r3, r2
 80120c2:	d009      	beq.n	80120d8 <HAL_TIM_Base_Start_IT+0x80>
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4a1c      	ldr	r2, [pc, #112]	; (801213c <HAL_TIM_Base_Start_IT+0xe4>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d004      	beq.n	80120d8 <HAL_TIM_Base_Start_IT+0x80>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	4a1b      	ldr	r2, [pc, #108]	; (8012140 <HAL_TIM_Base_Start_IT+0xe8>)
 80120d4:	4293      	cmp	r3, r2
 80120d6:	d115      	bne.n	8012104 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	689a      	ldr	r2, [r3, #8]
 80120de:	4b19      	ldr	r3, [pc, #100]	; (8012144 <HAL_TIM_Base_Start_IT+0xec>)
 80120e0:	4013      	ands	r3, r2
 80120e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2b06      	cmp	r3, #6
 80120e8:	d015      	beq.n	8012116 <HAL_TIM_Base_Start_IT+0xbe>
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120f0:	d011      	beq.n	8012116 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	681a      	ldr	r2, [r3, #0]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f042 0201 	orr.w	r2, r2, #1
 8012100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012102:	e008      	b.n	8012116 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	f042 0201 	orr.w	r2, r2, #1
 8012112:	601a      	str	r2, [r3, #0]
 8012114:	e000      	b.n	8012118 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012116:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012118:	2300      	movs	r3, #0
}
 801211a:	4618      	mov	r0, r3
 801211c:	3714      	adds	r7, #20
 801211e:	46bd      	mov	sp, r7
 8012120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012124:	4770      	bx	lr
 8012126:	bf00      	nop
 8012128:	40010000 	.word	0x40010000
 801212c:	40000400 	.word	0x40000400
 8012130:	40000800 	.word	0x40000800
 8012134:	40000c00 	.word	0x40000c00
 8012138:	40010400 	.word	0x40010400
 801213c:	40001800 	.word	0x40001800
 8012140:	40014000 	.word	0x40014000
 8012144:	00010007 	.word	0x00010007

08012148 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012152:	2300      	movs	r3, #0
 8012154:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d109      	bne.n	8012170 <HAL_TIM_OC_Start_IT+0x28>
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012162:	b2db      	uxtb	r3, r3
 8012164:	2b01      	cmp	r3, #1
 8012166:	bf14      	ite	ne
 8012168:	2301      	movne	r3, #1
 801216a:	2300      	moveq	r3, #0
 801216c:	b2db      	uxtb	r3, r3
 801216e:	e03c      	b.n	80121ea <HAL_TIM_OC_Start_IT+0xa2>
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	2b04      	cmp	r3, #4
 8012174:	d109      	bne.n	801218a <HAL_TIM_OC_Start_IT+0x42>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801217c:	b2db      	uxtb	r3, r3
 801217e:	2b01      	cmp	r3, #1
 8012180:	bf14      	ite	ne
 8012182:	2301      	movne	r3, #1
 8012184:	2300      	moveq	r3, #0
 8012186:	b2db      	uxtb	r3, r3
 8012188:	e02f      	b.n	80121ea <HAL_TIM_OC_Start_IT+0xa2>
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	2b08      	cmp	r3, #8
 801218e:	d109      	bne.n	80121a4 <HAL_TIM_OC_Start_IT+0x5c>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012196:	b2db      	uxtb	r3, r3
 8012198:	2b01      	cmp	r3, #1
 801219a:	bf14      	ite	ne
 801219c:	2301      	movne	r3, #1
 801219e:	2300      	moveq	r3, #0
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	e022      	b.n	80121ea <HAL_TIM_OC_Start_IT+0xa2>
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	2b0c      	cmp	r3, #12
 80121a8:	d109      	bne.n	80121be <HAL_TIM_OC_Start_IT+0x76>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80121b0:	b2db      	uxtb	r3, r3
 80121b2:	2b01      	cmp	r3, #1
 80121b4:	bf14      	ite	ne
 80121b6:	2301      	movne	r3, #1
 80121b8:	2300      	moveq	r3, #0
 80121ba:	b2db      	uxtb	r3, r3
 80121bc:	e015      	b.n	80121ea <HAL_TIM_OC_Start_IT+0xa2>
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	2b10      	cmp	r3, #16
 80121c2:	d109      	bne.n	80121d8 <HAL_TIM_OC_Start_IT+0x90>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	bf14      	ite	ne
 80121d0:	2301      	movne	r3, #1
 80121d2:	2300      	moveq	r3, #0
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	e008      	b.n	80121ea <HAL_TIM_OC_Start_IT+0xa2>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80121de:	b2db      	uxtb	r3, r3
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	bf14      	ite	ne
 80121e4:	2301      	movne	r3, #1
 80121e6:	2300      	moveq	r3, #0
 80121e8:	b2db      	uxtb	r3, r3
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d001      	beq.n	80121f2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80121ee:	2301      	movs	r3, #1
 80121f0:	e0ec      	b.n	80123cc <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d104      	bne.n	8012202 <HAL_TIM_OC_Start_IT+0xba>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2202      	movs	r2, #2
 80121fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012200:	e023      	b.n	801224a <HAL_TIM_OC_Start_IT+0x102>
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	2b04      	cmp	r3, #4
 8012206:	d104      	bne.n	8012212 <HAL_TIM_OC_Start_IT+0xca>
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2202      	movs	r2, #2
 801220c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012210:	e01b      	b.n	801224a <HAL_TIM_OC_Start_IT+0x102>
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	2b08      	cmp	r3, #8
 8012216:	d104      	bne.n	8012222 <HAL_TIM_OC_Start_IT+0xda>
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2202      	movs	r2, #2
 801221c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012220:	e013      	b.n	801224a <HAL_TIM_OC_Start_IT+0x102>
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	2b0c      	cmp	r3, #12
 8012226:	d104      	bne.n	8012232 <HAL_TIM_OC_Start_IT+0xea>
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2202      	movs	r2, #2
 801222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012230:	e00b      	b.n	801224a <HAL_TIM_OC_Start_IT+0x102>
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	2b10      	cmp	r3, #16
 8012236:	d104      	bne.n	8012242 <HAL_TIM_OC_Start_IT+0xfa>
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2202      	movs	r2, #2
 801223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012240:	e003      	b.n	801224a <HAL_TIM_OC_Start_IT+0x102>
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2202      	movs	r2, #2
 8012246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	2b0c      	cmp	r3, #12
 801224e:	d841      	bhi.n	80122d4 <HAL_TIM_OC_Start_IT+0x18c>
 8012250:	a201      	add	r2, pc, #4	; (adr r2, 8012258 <HAL_TIM_OC_Start_IT+0x110>)
 8012252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012256:	bf00      	nop
 8012258:	0801228d 	.word	0x0801228d
 801225c:	080122d5 	.word	0x080122d5
 8012260:	080122d5 	.word	0x080122d5
 8012264:	080122d5 	.word	0x080122d5
 8012268:	0801229f 	.word	0x0801229f
 801226c:	080122d5 	.word	0x080122d5
 8012270:	080122d5 	.word	0x080122d5
 8012274:	080122d5 	.word	0x080122d5
 8012278:	080122b1 	.word	0x080122b1
 801227c:	080122d5 	.word	0x080122d5
 8012280:	080122d5 	.word	0x080122d5
 8012284:	080122d5 	.word	0x080122d5
 8012288:	080122c3 	.word	0x080122c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	68da      	ldr	r2, [r3, #12]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f042 0202 	orr.w	r2, r2, #2
 801229a:	60da      	str	r2, [r3, #12]
      break;
 801229c:	e01d      	b.n	80122da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	68da      	ldr	r2, [r3, #12]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f042 0204 	orr.w	r2, r2, #4
 80122ac:	60da      	str	r2, [r3, #12]
      break;
 80122ae:	e014      	b.n	80122da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	68da      	ldr	r2, [r3, #12]
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	f042 0208 	orr.w	r2, r2, #8
 80122be:	60da      	str	r2, [r3, #12]
      break;
 80122c0:	e00b      	b.n	80122da <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	68da      	ldr	r2, [r3, #12]
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f042 0210 	orr.w	r2, r2, #16
 80122d0:	60da      	str	r2, [r3, #12]
      break;
 80122d2:	e002      	b.n	80122da <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80122d4:	2301      	movs	r3, #1
 80122d6:	73fb      	strb	r3, [r7, #15]
      break;
 80122d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80122da:	7bfb      	ldrb	r3, [r7, #15]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d174      	bne.n	80123ca <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	2201      	movs	r2, #1
 80122e6:	6839      	ldr	r1, [r7, #0]
 80122e8:	4618      	mov	r0, r3
 80122ea:	f001 f917 	bl	801351c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	4a38      	ldr	r2, [pc, #224]	; (80123d4 <HAL_TIM_OC_Start_IT+0x28c>)
 80122f4:	4293      	cmp	r3, r2
 80122f6:	d013      	beq.n	8012320 <HAL_TIM_OC_Start_IT+0x1d8>
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	4a36      	ldr	r2, [pc, #216]	; (80123d8 <HAL_TIM_OC_Start_IT+0x290>)
 80122fe:	4293      	cmp	r3, r2
 8012300:	d00e      	beq.n	8012320 <HAL_TIM_OC_Start_IT+0x1d8>
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	4a35      	ldr	r2, [pc, #212]	; (80123dc <HAL_TIM_OC_Start_IT+0x294>)
 8012308:	4293      	cmp	r3, r2
 801230a:	d009      	beq.n	8012320 <HAL_TIM_OC_Start_IT+0x1d8>
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	4a33      	ldr	r2, [pc, #204]	; (80123e0 <HAL_TIM_OC_Start_IT+0x298>)
 8012312:	4293      	cmp	r3, r2
 8012314:	d004      	beq.n	8012320 <HAL_TIM_OC_Start_IT+0x1d8>
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	4a32      	ldr	r2, [pc, #200]	; (80123e4 <HAL_TIM_OC_Start_IT+0x29c>)
 801231c:	4293      	cmp	r3, r2
 801231e:	d101      	bne.n	8012324 <HAL_TIM_OC_Start_IT+0x1dc>
 8012320:	2301      	movs	r3, #1
 8012322:	e000      	b.n	8012326 <HAL_TIM_OC_Start_IT+0x1de>
 8012324:	2300      	movs	r3, #0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d007      	beq.n	801233a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	4a25      	ldr	r2, [pc, #148]	; (80123d4 <HAL_TIM_OC_Start_IT+0x28c>)
 8012340:	4293      	cmp	r3, r2
 8012342:	d022      	beq.n	801238a <HAL_TIM_OC_Start_IT+0x242>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801234c:	d01d      	beq.n	801238a <HAL_TIM_OC_Start_IT+0x242>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4a25      	ldr	r2, [pc, #148]	; (80123e8 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012354:	4293      	cmp	r3, r2
 8012356:	d018      	beq.n	801238a <HAL_TIM_OC_Start_IT+0x242>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	4a23      	ldr	r2, [pc, #140]	; (80123ec <HAL_TIM_OC_Start_IT+0x2a4>)
 801235e:	4293      	cmp	r3, r2
 8012360:	d013      	beq.n	801238a <HAL_TIM_OC_Start_IT+0x242>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	4a22      	ldr	r2, [pc, #136]	; (80123f0 <HAL_TIM_OC_Start_IT+0x2a8>)
 8012368:	4293      	cmp	r3, r2
 801236a:	d00e      	beq.n	801238a <HAL_TIM_OC_Start_IT+0x242>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4a19      	ldr	r2, [pc, #100]	; (80123d8 <HAL_TIM_OC_Start_IT+0x290>)
 8012372:	4293      	cmp	r3, r2
 8012374:	d009      	beq.n	801238a <HAL_TIM_OC_Start_IT+0x242>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	4a1e      	ldr	r2, [pc, #120]	; (80123f4 <HAL_TIM_OC_Start_IT+0x2ac>)
 801237c:	4293      	cmp	r3, r2
 801237e:	d004      	beq.n	801238a <HAL_TIM_OC_Start_IT+0x242>
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	4a15      	ldr	r2, [pc, #84]	; (80123dc <HAL_TIM_OC_Start_IT+0x294>)
 8012386:	4293      	cmp	r3, r2
 8012388:	d115      	bne.n	80123b6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	689a      	ldr	r2, [r3, #8]
 8012390:	4b19      	ldr	r3, [pc, #100]	; (80123f8 <HAL_TIM_OC_Start_IT+0x2b0>)
 8012392:	4013      	ands	r3, r2
 8012394:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	2b06      	cmp	r3, #6
 801239a:	d015      	beq.n	80123c8 <HAL_TIM_OC_Start_IT+0x280>
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123a2:	d011      	beq.n	80123c8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f042 0201 	orr.w	r2, r2, #1
 80123b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80123b4:	e008      	b.n	80123c8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	681a      	ldr	r2, [r3, #0]
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f042 0201 	orr.w	r2, r2, #1
 80123c4:	601a      	str	r2, [r3, #0]
 80123c6:	e000      	b.n	80123ca <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80123c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80123ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3710      	adds	r7, #16
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}
 80123d4:	40010000 	.word	0x40010000
 80123d8:	40010400 	.word	0x40010400
 80123dc:	40014000 	.word	0x40014000
 80123e0:	40014400 	.word	0x40014400
 80123e4:	40014800 	.word	0x40014800
 80123e8:	40000400 	.word	0x40000400
 80123ec:	40000800 	.word	0x40000800
 80123f0:	40000c00 	.word	0x40000c00
 80123f4:	40001800 	.word	0x40001800
 80123f8:	00010007 	.word	0x00010007

080123fc <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b084      	sub	sp, #16
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012406:	2300      	movs	r3, #0
 8012408:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	2b0c      	cmp	r3, #12
 801240e:	d841      	bhi.n	8012494 <HAL_TIM_OC_Stop_IT+0x98>
 8012410:	a201      	add	r2, pc, #4	; (adr r2, 8012418 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012416:	bf00      	nop
 8012418:	0801244d 	.word	0x0801244d
 801241c:	08012495 	.word	0x08012495
 8012420:	08012495 	.word	0x08012495
 8012424:	08012495 	.word	0x08012495
 8012428:	0801245f 	.word	0x0801245f
 801242c:	08012495 	.word	0x08012495
 8012430:	08012495 	.word	0x08012495
 8012434:	08012495 	.word	0x08012495
 8012438:	08012471 	.word	0x08012471
 801243c:	08012495 	.word	0x08012495
 8012440:	08012495 	.word	0x08012495
 8012444:	08012495 	.word	0x08012495
 8012448:	08012483 	.word	0x08012483
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	68da      	ldr	r2, [r3, #12]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f022 0202 	bic.w	r2, r2, #2
 801245a:	60da      	str	r2, [r3, #12]
      break;
 801245c:	e01d      	b.n	801249a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	68da      	ldr	r2, [r3, #12]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	f022 0204 	bic.w	r2, r2, #4
 801246c:	60da      	str	r2, [r3, #12]
      break;
 801246e:	e014      	b.n	801249a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	68da      	ldr	r2, [r3, #12]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f022 0208 	bic.w	r2, r2, #8
 801247e:	60da      	str	r2, [r3, #12]
      break;
 8012480:	e00b      	b.n	801249a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	68da      	ldr	r2, [r3, #12]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	f022 0210 	bic.w	r2, r2, #16
 8012490:	60da      	str	r2, [r3, #12]
      break;
 8012492:	e002      	b.n	801249a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012494:	2301      	movs	r3, #1
 8012496:	73fb      	strb	r3, [r7, #15]
      break;
 8012498:	bf00      	nop
  }

  if (status == HAL_OK)
 801249a:	7bfb      	ldrb	r3, [r7, #15]
 801249c:	2b00      	cmp	r3, #0
 801249e:	f040 8081 	bne.w	80125a4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2200      	movs	r2, #0
 80124a8:	6839      	ldr	r1, [r7, #0]
 80124aa:	4618      	mov	r0, r3
 80124ac:	f001 f836 	bl	801351c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4a3e      	ldr	r2, [pc, #248]	; (80125b0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d013      	beq.n	80124e2 <HAL_TIM_OC_Stop_IT+0xe6>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4a3d      	ldr	r2, [pc, #244]	; (80125b4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d00e      	beq.n	80124e2 <HAL_TIM_OC_Stop_IT+0xe6>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4a3b      	ldr	r2, [pc, #236]	; (80125b8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d009      	beq.n	80124e2 <HAL_TIM_OC_Stop_IT+0xe6>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	4a3a      	ldr	r2, [pc, #232]	; (80125bc <HAL_TIM_OC_Stop_IT+0x1c0>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d004      	beq.n	80124e2 <HAL_TIM_OC_Stop_IT+0xe6>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	4a38      	ldr	r2, [pc, #224]	; (80125c0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d101      	bne.n	80124e6 <HAL_TIM_OC_Stop_IT+0xea>
 80124e2:	2301      	movs	r3, #1
 80124e4:	e000      	b.n	80124e8 <HAL_TIM_OC_Stop_IT+0xec>
 80124e6:	2300      	movs	r3, #0
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d017      	beq.n	801251c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	6a1a      	ldr	r2, [r3, #32]
 80124f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80124f6:	4013      	ands	r3, r2
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d10f      	bne.n	801251c <HAL_TIM_OC_Stop_IT+0x120>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	6a1a      	ldr	r2, [r3, #32]
 8012502:	f240 4344 	movw	r3, #1092	; 0x444
 8012506:	4013      	ands	r3, r2
 8012508:	2b00      	cmp	r3, #0
 801250a:	d107      	bne.n	801251c <HAL_TIM_OC_Stop_IT+0x120>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801251a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	6a1a      	ldr	r2, [r3, #32]
 8012522:	f241 1311 	movw	r3, #4369	; 0x1111
 8012526:	4013      	ands	r3, r2
 8012528:	2b00      	cmp	r3, #0
 801252a:	d10f      	bne.n	801254c <HAL_TIM_OC_Stop_IT+0x150>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	6a1a      	ldr	r2, [r3, #32]
 8012532:	f240 4344 	movw	r3, #1092	; 0x444
 8012536:	4013      	ands	r3, r2
 8012538:	2b00      	cmp	r3, #0
 801253a:	d107      	bne.n	801254c <HAL_TIM_OC_Stop_IT+0x150>
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	f022 0201 	bic.w	r2, r2, #1
 801254a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d104      	bne.n	801255c <HAL_TIM_OC_Stop_IT+0x160>
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2201      	movs	r2, #1
 8012556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801255a:	e023      	b.n	80125a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	2b04      	cmp	r3, #4
 8012560:	d104      	bne.n	801256c <HAL_TIM_OC_Stop_IT+0x170>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2201      	movs	r2, #1
 8012566:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801256a:	e01b      	b.n	80125a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	2b08      	cmp	r3, #8
 8012570:	d104      	bne.n	801257c <HAL_TIM_OC_Stop_IT+0x180>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2201      	movs	r2, #1
 8012576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801257a:	e013      	b.n	80125a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	2b0c      	cmp	r3, #12
 8012580:	d104      	bne.n	801258c <HAL_TIM_OC_Stop_IT+0x190>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2201      	movs	r2, #1
 8012586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801258a:	e00b      	b.n	80125a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	2b10      	cmp	r3, #16
 8012590:	d104      	bne.n	801259c <HAL_TIM_OC_Stop_IT+0x1a0>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2201      	movs	r2, #1
 8012596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801259a:	e003      	b.n	80125a4 <HAL_TIM_OC_Stop_IT+0x1a8>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2201      	movs	r2, #1
 80125a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80125a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3710      	adds	r7, #16
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	40010000 	.word	0x40010000
 80125b4:	40010400 	.word	0x40010400
 80125b8:	40014000 	.word	0x40014000
 80125bc:	40014400 	.word	0x40014400
 80125c0:	40014800 	.word	0x40014800

080125c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d101      	bne.n	80125d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80125d2:	2301      	movs	r3, #1
 80125d4:	e049      	b.n	801266a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80125dc:	b2db      	uxtb	r3, r3
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d106      	bne.n	80125f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2200      	movs	r2, #0
 80125e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f000 f841 	bl	8012672 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2202      	movs	r2, #2
 80125f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681a      	ldr	r2, [r3, #0]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	3304      	adds	r3, #4
 8012600:	4619      	mov	r1, r3
 8012602:	4610      	mov	r0, r2
 8012604:	f000 fb70 	bl	8012ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2201      	movs	r2, #1
 801260c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2201      	movs	r2, #1
 8012614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2201      	movs	r2, #1
 801261c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2201      	movs	r2, #1
 8012624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2201      	movs	r2, #1
 801262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2201      	movs	r2, #1
 8012634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2201      	movs	r2, #1
 801263c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2201      	movs	r2, #1
 8012644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2201      	movs	r2, #1
 801264c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2201      	movs	r2, #1
 8012654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2201      	movs	r2, #1
 801265c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2201      	movs	r2, #1
 8012664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012668:	2300      	movs	r3, #0
}
 801266a:	4618      	mov	r0, r3
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}

08012672 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012672:	b480      	push	{r7}
 8012674:	b083      	sub	sp, #12
 8012676:	af00      	add	r7, sp, #0
 8012678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801267a:	bf00      	nop
 801267c:	370c      	adds	r7, #12
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr

08012686 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012686:	b580      	push	{r7, lr}
 8012688:	b084      	sub	sp, #16
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	691b      	ldr	r3, [r3, #16]
 801269c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801269e:	68bb      	ldr	r3, [r7, #8]
 80126a0:	f003 0302 	and.w	r3, r3, #2
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d020      	beq.n	80126ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	f003 0302 	and.w	r3, r3, #2
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d01b      	beq.n	80126ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	f06f 0202 	mvn.w	r2, #2
 80126ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2201      	movs	r2, #1
 80126c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	699b      	ldr	r3, [r3, #24]
 80126c8:	f003 0303 	and.w	r3, r3, #3
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d003      	beq.n	80126d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 faeb 	bl	8012cac <HAL_TIM_IC_CaptureCallback>
 80126d6:	e005      	b.n	80126e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f7ef fc09 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f000 faee 	bl	8012cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2200      	movs	r2, #0
 80126e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	f003 0304 	and.w	r3, r3, #4
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d020      	beq.n	8012736 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	f003 0304 	and.w	r3, r3, #4
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d01b      	beq.n	8012736 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	f06f 0204 	mvn.w	r2, #4
 8012706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2202      	movs	r2, #2
 801270c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	699b      	ldr	r3, [r3, #24]
 8012714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012718:	2b00      	cmp	r3, #0
 801271a:	d003      	beq.n	8012724 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f000 fac5 	bl	8012cac <HAL_TIM_IC_CaptureCallback>
 8012722:	e005      	b.n	8012730 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f7ef fbe3 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f000 fac8 	bl	8012cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2200      	movs	r2, #0
 8012734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	f003 0308 	and.w	r3, r3, #8
 801273c:	2b00      	cmp	r3, #0
 801273e:	d020      	beq.n	8012782 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	f003 0308 	and.w	r3, r3, #8
 8012746:	2b00      	cmp	r3, #0
 8012748:	d01b      	beq.n	8012782 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	f06f 0208 	mvn.w	r2, #8
 8012752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2204      	movs	r2, #4
 8012758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	69db      	ldr	r3, [r3, #28]
 8012760:	f003 0303 	and.w	r3, r3, #3
 8012764:	2b00      	cmp	r3, #0
 8012766:	d003      	beq.n	8012770 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f000 fa9f 	bl	8012cac <HAL_TIM_IC_CaptureCallback>
 801276e:	e005      	b.n	801277c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7ef fbbd 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f000 faa2 	bl	8012cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2200      	movs	r2, #0
 8012780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	f003 0310 	and.w	r3, r3, #16
 8012788:	2b00      	cmp	r3, #0
 801278a:	d020      	beq.n	80127ce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	f003 0310 	and.w	r3, r3, #16
 8012792:	2b00      	cmp	r3, #0
 8012794:	d01b      	beq.n	80127ce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f06f 0210 	mvn.w	r2, #16
 801279e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2208      	movs	r2, #8
 80127a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	69db      	ldr	r3, [r3, #28]
 80127ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d003      	beq.n	80127bc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f000 fa79 	bl	8012cac <HAL_TIM_IC_CaptureCallback>
 80127ba:	e005      	b.n	80127c8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7ef fb97 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f000 fa7c 	bl	8012cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2200      	movs	r2, #0
 80127cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	f003 0301 	and.w	r3, r3, #1
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d00c      	beq.n	80127f2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	f003 0301 	and.w	r3, r3, #1
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d007      	beq.n	80127f2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	f06f 0201 	mvn.w	r2, #1
 80127ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f7f0 fa1b 	bl	8002c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d104      	bne.n	8012806 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012802:	2b00      	cmp	r3, #0
 8012804:	d00c      	beq.n	8012820 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801280c:	2b00      	cmp	r3, #0
 801280e:	d007      	beq.n	8012820 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 ffba 	bl	8013794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012826:	2b00      	cmp	r3, #0
 8012828:	d00c      	beq.n	8012844 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012830:	2b00      	cmp	r3, #0
 8012832:	d007      	beq.n	8012844 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f000 ffb2 	bl	80137a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801284a:	2b00      	cmp	r3, #0
 801284c:	d00c      	beq.n	8012868 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012854:	2b00      	cmp	r3, #0
 8012856:	d007      	beq.n	8012868 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 fa36 	bl	8012cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	f003 0320 	and.w	r3, r3, #32
 801286e:	2b00      	cmp	r3, #0
 8012870:	d00c      	beq.n	801288c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f003 0320 	and.w	r3, r3, #32
 8012878:	2b00      	cmp	r3, #0
 801287a:	d007      	beq.n	801288c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	f06f 0220 	mvn.w	r2, #32
 8012884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f000 ff7a 	bl	8013780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801288c:	bf00      	nop
 801288e:	3710      	adds	r7, #16
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b086      	sub	sp, #24
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80128a0:	2300      	movs	r3, #0
 80128a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80128aa:	2b01      	cmp	r3, #1
 80128ac:	d101      	bne.n	80128b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80128ae:	2302      	movs	r3, #2
 80128b0:	e0ff      	b.n	8012ab2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2201      	movs	r2, #1
 80128b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2b14      	cmp	r3, #20
 80128be:	f200 80f0 	bhi.w	8012aa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80128c2:	a201      	add	r2, pc, #4	; (adr r2, 80128c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80128c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128c8:	0801291d 	.word	0x0801291d
 80128cc:	08012aa3 	.word	0x08012aa3
 80128d0:	08012aa3 	.word	0x08012aa3
 80128d4:	08012aa3 	.word	0x08012aa3
 80128d8:	0801295d 	.word	0x0801295d
 80128dc:	08012aa3 	.word	0x08012aa3
 80128e0:	08012aa3 	.word	0x08012aa3
 80128e4:	08012aa3 	.word	0x08012aa3
 80128e8:	0801299f 	.word	0x0801299f
 80128ec:	08012aa3 	.word	0x08012aa3
 80128f0:	08012aa3 	.word	0x08012aa3
 80128f4:	08012aa3 	.word	0x08012aa3
 80128f8:	080129df 	.word	0x080129df
 80128fc:	08012aa3 	.word	0x08012aa3
 8012900:	08012aa3 	.word	0x08012aa3
 8012904:	08012aa3 	.word	0x08012aa3
 8012908:	08012a21 	.word	0x08012a21
 801290c:	08012aa3 	.word	0x08012aa3
 8012910:	08012aa3 	.word	0x08012aa3
 8012914:	08012aa3 	.word	0x08012aa3
 8012918:	08012a61 	.word	0x08012a61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	68b9      	ldr	r1, [r7, #8]
 8012922:	4618      	mov	r0, r3
 8012924:	f000 fa86 	bl	8012e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	699a      	ldr	r2, [r3, #24]
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	f042 0208 	orr.w	r2, r2, #8
 8012936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	699a      	ldr	r2, [r3, #24]
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	f022 0204 	bic.w	r2, r2, #4
 8012946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	6999      	ldr	r1, [r3, #24]
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	691a      	ldr	r2, [r3, #16]
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	430a      	orrs	r2, r1
 8012958:	619a      	str	r2, [r3, #24]
      break;
 801295a:	e0a5      	b.n	8012aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	68b9      	ldr	r1, [r7, #8]
 8012962:	4618      	mov	r0, r3
 8012964:	f000 faf6 	bl	8012f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	699a      	ldr	r2, [r3, #24]
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	699a      	ldr	r2, [r3, #24]
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	6999      	ldr	r1, [r3, #24]
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	691b      	ldr	r3, [r3, #16]
 8012992:	021a      	lsls	r2, r3, #8
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	430a      	orrs	r2, r1
 801299a:	619a      	str	r2, [r3, #24]
      break;
 801299c:	e084      	b.n	8012aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	68b9      	ldr	r1, [r7, #8]
 80129a4:	4618      	mov	r0, r3
 80129a6:	f000 fb5f 	bl	8013068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	69da      	ldr	r2, [r3, #28]
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	f042 0208 	orr.w	r2, r2, #8
 80129b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	69da      	ldr	r2, [r3, #28]
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f022 0204 	bic.w	r2, r2, #4
 80129c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	69d9      	ldr	r1, [r3, #28]
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	691a      	ldr	r2, [r3, #16]
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	430a      	orrs	r2, r1
 80129da:	61da      	str	r2, [r3, #28]
      break;
 80129dc:	e064      	b.n	8012aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	68b9      	ldr	r1, [r7, #8]
 80129e4:	4618      	mov	r0, r3
 80129e6:	f000 fbc7 	bl	8013178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	69da      	ldr	r2, [r3, #28]
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80129f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	69da      	ldr	r2, [r3, #28]
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	69d9      	ldr	r1, [r3, #28]
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	691b      	ldr	r3, [r3, #16]
 8012a14:	021a      	lsls	r2, r3, #8
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	430a      	orrs	r2, r1
 8012a1c:	61da      	str	r2, [r3, #28]
      break;
 8012a1e:	e043      	b.n	8012aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	68b9      	ldr	r1, [r7, #8]
 8012a26:	4618      	mov	r0, r3
 8012a28:	f000 fc10 	bl	801324c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f042 0208 	orr.w	r2, r2, #8
 8012a3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f022 0204 	bic.w	r2, r2, #4
 8012a4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	691a      	ldr	r2, [r3, #16]
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	430a      	orrs	r2, r1
 8012a5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012a5e:	e023      	b.n	8012aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	68b9      	ldr	r1, [r7, #8]
 8012a66:	4618      	mov	r0, r3
 8012a68:	f000 fc54 	bl	8013314 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012a7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012a8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	691b      	ldr	r3, [r3, #16]
 8012a96:	021a      	lsls	r2, r3, #8
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	430a      	orrs	r2, r1
 8012a9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012aa0:	e002      	b.n	8012aa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8012aa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3718      	adds	r7, #24
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}
 8012aba:	bf00      	nop

08012abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d101      	bne.n	8012ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8012ad4:	2302      	movs	r3, #2
 8012ad6:	e0dc      	b.n	8012c92 <HAL_TIM_ConfigClockSource+0x1d6>
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2201      	movs	r2, #1
 8012adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2202      	movs	r2, #2
 8012ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	689b      	ldr	r3, [r3, #8]
 8012aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012af0:	68ba      	ldr	r2, [r7, #8]
 8012af2:	4b6a      	ldr	r3, [pc, #424]	; (8012c9c <HAL_TIM_ConfigClockSource+0x1e0>)
 8012af4:	4013      	ands	r3, r2
 8012af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	68ba      	ldr	r2, [r7, #8]
 8012b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4a64      	ldr	r2, [pc, #400]	; (8012ca0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	f000 80a9 	beq.w	8012c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8012b14:	4a62      	ldr	r2, [pc, #392]	; (8012ca0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012b16:	4293      	cmp	r3, r2
 8012b18:	f200 80ae 	bhi.w	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b1c:	4a61      	ldr	r2, [pc, #388]	; (8012ca4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	f000 80a1 	beq.w	8012c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8012b24:	4a5f      	ldr	r2, [pc, #380]	; (8012ca4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012b26:	4293      	cmp	r3, r2
 8012b28:	f200 80a6 	bhi.w	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b2c:	4a5e      	ldr	r2, [pc, #376]	; (8012ca8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012b2e:	4293      	cmp	r3, r2
 8012b30:	f000 8099 	beq.w	8012c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8012b34:	4a5c      	ldr	r2, [pc, #368]	; (8012ca8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012b36:	4293      	cmp	r3, r2
 8012b38:	f200 809e 	bhi.w	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012b40:	f000 8091 	beq.w	8012c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8012b44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012b48:	f200 8096 	bhi.w	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012b50:	f000 8089 	beq.w	8012c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8012b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012b58:	f200 808e 	bhi.w	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012b60:	d03e      	beq.n	8012be0 <HAL_TIM_ConfigClockSource+0x124>
 8012b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012b66:	f200 8087 	bhi.w	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b6e:	f000 8086 	beq.w	8012c7e <HAL_TIM_ConfigClockSource+0x1c2>
 8012b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b76:	d87f      	bhi.n	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b78:	2b70      	cmp	r3, #112	; 0x70
 8012b7a:	d01a      	beq.n	8012bb2 <HAL_TIM_ConfigClockSource+0xf6>
 8012b7c:	2b70      	cmp	r3, #112	; 0x70
 8012b7e:	d87b      	bhi.n	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b80:	2b60      	cmp	r3, #96	; 0x60
 8012b82:	d050      	beq.n	8012c26 <HAL_TIM_ConfigClockSource+0x16a>
 8012b84:	2b60      	cmp	r3, #96	; 0x60
 8012b86:	d877      	bhi.n	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b88:	2b50      	cmp	r3, #80	; 0x50
 8012b8a:	d03c      	beq.n	8012c06 <HAL_TIM_ConfigClockSource+0x14a>
 8012b8c:	2b50      	cmp	r3, #80	; 0x50
 8012b8e:	d873      	bhi.n	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b90:	2b40      	cmp	r3, #64	; 0x40
 8012b92:	d058      	beq.n	8012c46 <HAL_TIM_ConfigClockSource+0x18a>
 8012b94:	2b40      	cmp	r3, #64	; 0x40
 8012b96:	d86f      	bhi.n	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012b98:	2b30      	cmp	r3, #48	; 0x30
 8012b9a:	d064      	beq.n	8012c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8012b9c:	2b30      	cmp	r3, #48	; 0x30
 8012b9e:	d86b      	bhi.n	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ba0:	2b20      	cmp	r3, #32
 8012ba2:	d060      	beq.n	8012c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8012ba4:	2b20      	cmp	r3, #32
 8012ba6:	d867      	bhi.n	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d05c      	beq.n	8012c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8012bac:	2b10      	cmp	r3, #16
 8012bae:	d05a      	beq.n	8012c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8012bb0:	e062      	b.n	8012c78 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6818      	ldr	r0, [r3, #0]
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	6899      	ldr	r1, [r3, #8]
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	685a      	ldr	r2, [r3, #4]
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	f000 fc8b 	bl	80134dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	689b      	ldr	r3, [r3, #8]
 8012bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	68ba      	ldr	r2, [r7, #8]
 8012bdc:	609a      	str	r2, [r3, #8]
      break;
 8012bde:	e04f      	b.n	8012c80 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6818      	ldr	r0, [r3, #0]
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	6899      	ldr	r1, [r3, #8]
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	685a      	ldr	r2, [r3, #4]
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	68db      	ldr	r3, [r3, #12]
 8012bf0:	f000 fc74 	bl	80134dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	689a      	ldr	r2, [r3, #8]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012c02:	609a      	str	r2, [r3, #8]
      break;
 8012c04:	e03c      	b.n	8012c80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	6818      	ldr	r0, [r3, #0]
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	6859      	ldr	r1, [r3, #4]
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	461a      	mov	r2, r3
 8012c14:	f000 fbe4 	bl	80133e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	2150      	movs	r1, #80	; 0x50
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f000 fc3e 	bl	80134a0 <TIM_ITRx_SetConfig>
      break;
 8012c24:	e02c      	b.n	8012c80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6818      	ldr	r0, [r3, #0]
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	6859      	ldr	r1, [r3, #4]
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	68db      	ldr	r3, [r3, #12]
 8012c32:	461a      	mov	r2, r3
 8012c34:	f000 fc03 	bl	801343e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2160      	movs	r1, #96	; 0x60
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f000 fc2e 	bl	80134a0 <TIM_ITRx_SetConfig>
      break;
 8012c44:	e01c      	b.n	8012c80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6818      	ldr	r0, [r3, #0]
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	6859      	ldr	r1, [r3, #4]
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	68db      	ldr	r3, [r3, #12]
 8012c52:	461a      	mov	r2, r3
 8012c54:	f000 fbc4 	bl	80133e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	2140      	movs	r1, #64	; 0x40
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f000 fc1e 	bl	80134a0 <TIM_ITRx_SetConfig>
      break;
 8012c64:	e00c      	b.n	8012c80 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681a      	ldr	r2, [r3, #0]
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	4619      	mov	r1, r3
 8012c70:	4610      	mov	r0, r2
 8012c72:	f000 fc15 	bl	80134a0 <TIM_ITRx_SetConfig>
      break;
 8012c76:	e003      	b.n	8012c80 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8012c78:	2301      	movs	r3, #1
 8012c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8012c7c:	e000      	b.n	8012c80 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8012c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2201      	movs	r2, #1
 8012c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3710      	adds	r7, #16
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
 8012c9a:	bf00      	nop
 8012c9c:	ffceff88 	.word	0xffceff88
 8012ca0:	00100040 	.word	0x00100040
 8012ca4:	00100030 	.word	0x00100030
 8012ca8:	00100020 	.word	0x00100020

08012cac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012cac:	b480      	push	{r7}
 8012cae:	b083      	sub	sp, #12
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012cb4:	bf00      	nop
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr

08012cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012cc0:	b480      	push	{r7}
 8012cc2:	b083      	sub	sp, #12
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012cc8:	bf00      	nop
 8012cca:	370c      	adds	r7, #12
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012cdc:	bf00      	nop
 8012cde:	370c      	adds	r7, #12
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce6:	4770      	bx	lr

08012ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b085      	sub	sp, #20
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	4a46      	ldr	r2, [pc, #280]	; (8012e14 <TIM_Base_SetConfig+0x12c>)
 8012cfc:	4293      	cmp	r3, r2
 8012cfe:	d013      	beq.n	8012d28 <TIM_Base_SetConfig+0x40>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d06:	d00f      	beq.n	8012d28 <TIM_Base_SetConfig+0x40>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	4a43      	ldr	r2, [pc, #268]	; (8012e18 <TIM_Base_SetConfig+0x130>)
 8012d0c:	4293      	cmp	r3, r2
 8012d0e:	d00b      	beq.n	8012d28 <TIM_Base_SetConfig+0x40>
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	4a42      	ldr	r2, [pc, #264]	; (8012e1c <TIM_Base_SetConfig+0x134>)
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d007      	beq.n	8012d28 <TIM_Base_SetConfig+0x40>
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	4a41      	ldr	r2, [pc, #260]	; (8012e20 <TIM_Base_SetConfig+0x138>)
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d003      	beq.n	8012d28 <TIM_Base_SetConfig+0x40>
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	4a40      	ldr	r2, [pc, #256]	; (8012e24 <TIM_Base_SetConfig+0x13c>)
 8012d24:	4293      	cmp	r3, r2
 8012d26:	d108      	bne.n	8012d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	68fa      	ldr	r2, [r7, #12]
 8012d36:	4313      	orrs	r3, r2
 8012d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	4a35      	ldr	r2, [pc, #212]	; (8012e14 <TIM_Base_SetConfig+0x12c>)
 8012d3e:	4293      	cmp	r3, r2
 8012d40:	d01f      	beq.n	8012d82 <TIM_Base_SetConfig+0x9a>
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d48:	d01b      	beq.n	8012d82 <TIM_Base_SetConfig+0x9a>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4a32      	ldr	r2, [pc, #200]	; (8012e18 <TIM_Base_SetConfig+0x130>)
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d017      	beq.n	8012d82 <TIM_Base_SetConfig+0x9a>
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	4a31      	ldr	r2, [pc, #196]	; (8012e1c <TIM_Base_SetConfig+0x134>)
 8012d56:	4293      	cmp	r3, r2
 8012d58:	d013      	beq.n	8012d82 <TIM_Base_SetConfig+0x9a>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	4a30      	ldr	r2, [pc, #192]	; (8012e20 <TIM_Base_SetConfig+0x138>)
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	d00f      	beq.n	8012d82 <TIM_Base_SetConfig+0x9a>
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	4a2f      	ldr	r2, [pc, #188]	; (8012e24 <TIM_Base_SetConfig+0x13c>)
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d00b      	beq.n	8012d82 <TIM_Base_SetConfig+0x9a>
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	4a2e      	ldr	r2, [pc, #184]	; (8012e28 <TIM_Base_SetConfig+0x140>)
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	d007      	beq.n	8012d82 <TIM_Base_SetConfig+0x9a>
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	4a2d      	ldr	r2, [pc, #180]	; (8012e2c <TIM_Base_SetConfig+0x144>)
 8012d76:	4293      	cmp	r3, r2
 8012d78:	d003      	beq.n	8012d82 <TIM_Base_SetConfig+0x9a>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	4a2c      	ldr	r2, [pc, #176]	; (8012e30 <TIM_Base_SetConfig+0x148>)
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	d108      	bne.n	8012d94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	68fa      	ldr	r2, [r7, #12]
 8012d90:	4313      	orrs	r3, r2
 8012d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	695b      	ldr	r3, [r3, #20]
 8012d9e:	4313      	orrs	r3, r2
 8012da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	689a      	ldr	r2, [r3, #8]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	4a16      	ldr	r2, [pc, #88]	; (8012e14 <TIM_Base_SetConfig+0x12c>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d00f      	beq.n	8012de0 <TIM_Base_SetConfig+0xf8>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	4a18      	ldr	r2, [pc, #96]	; (8012e24 <TIM_Base_SetConfig+0x13c>)
 8012dc4:	4293      	cmp	r3, r2
 8012dc6:	d00b      	beq.n	8012de0 <TIM_Base_SetConfig+0xf8>
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	4a17      	ldr	r2, [pc, #92]	; (8012e28 <TIM_Base_SetConfig+0x140>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d007      	beq.n	8012de0 <TIM_Base_SetConfig+0xf8>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	4a16      	ldr	r2, [pc, #88]	; (8012e2c <TIM_Base_SetConfig+0x144>)
 8012dd4:	4293      	cmp	r3, r2
 8012dd6:	d003      	beq.n	8012de0 <TIM_Base_SetConfig+0xf8>
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	4a15      	ldr	r2, [pc, #84]	; (8012e30 <TIM_Base_SetConfig+0x148>)
 8012ddc:	4293      	cmp	r3, r2
 8012dde:	d103      	bne.n	8012de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	691a      	ldr	r2, [r3, #16]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2201      	movs	r2, #1
 8012dec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	691b      	ldr	r3, [r3, #16]
 8012df2:	f003 0301 	and.w	r3, r3, #1
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	d105      	bne.n	8012e06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	691b      	ldr	r3, [r3, #16]
 8012dfe:	f023 0201 	bic.w	r2, r3, #1
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	611a      	str	r2, [r3, #16]
  }
}
 8012e06:	bf00      	nop
 8012e08:	3714      	adds	r7, #20
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop
 8012e14:	40010000 	.word	0x40010000
 8012e18:	40000400 	.word	0x40000400
 8012e1c:	40000800 	.word	0x40000800
 8012e20:	40000c00 	.word	0x40000c00
 8012e24:	40010400 	.word	0x40010400
 8012e28:	40014000 	.word	0x40014000
 8012e2c:	40014400 	.word	0x40014400
 8012e30:	40014800 	.word	0x40014800

08012e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012e34:	b480      	push	{r7}
 8012e36:	b087      	sub	sp, #28
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6a1b      	ldr	r3, [r3, #32]
 8012e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6a1b      	ldr	r3, [r3, #32]
 8012e48:	f023 0201 	bic.w	r2, r3, #1
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	699b      	ldr	r3, [r3, #24]
 8012e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012e5c:	68fa      	ldr	r2, [r7, #12]
 8012e5e:	4b37      	ldr	r3, [pc, #220]	; (8012f3c <TIM_OC1_SetConfig+0x108>)
 8012e60:	4013      	ands	r3, r2
 8012e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f023 0303 	bic.w	r3, r3, #3
 8012e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	68fa      	ldr	r2, [r7, #12]
 8012e72:	4313      	orrs	r3, r2
 8012e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	f023 0302 	bic.w	r3, r3, #2
 8012e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	689b      	ldr	r3, [r3, #8]
 8012e82:	697a      	ldr	r2, [r7, #20]
 8012e84:	4313      	orrs	r3, r2
 8012e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	4a2d      	ldr	r2, [pc, #180]	; (8012f40 <TIM_OC1_SetConfig+0x10c>)
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	d00f      	beq.n	8012eb0 <TIM_OC1_SetConfig+0x7c>
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	4a2c      	ldr	r2, [pc, #176]	; (8012f44 <TIM_OC1_SetConfig+0x110>)
 8012e94:	4293      	cmp	r3, r2
 8012e96:	d00b      	beq.n	8012eb0 <TIM_OC1_SetConfig+0x7c>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	4a2b      	ldr	r2, [pc, #172]	; (8012f48 <TIM_OC1_SetConfig+0x114>)
 8012e9c:	4293      	cmp	r3, r2
 8012e9e:	d007      	beq.n	8012eb0 <TIM_OC1_SetConfig+0x7c>
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	4a2a      	ldr	r2, [pc, #168]	; (8012f4c <TIM_OC1_SetConfig+0x118>)
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	d003      	beq.n	8012eb0 <TIM_OC1_SetConfig+0x7c>
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	4a29      	ldr	r2, [pc, #164]	; (8012f50 <TIM_OC1_SetConfig+0x11c>)
 8012eac:	4293      	cmp	r3, r2
 8012eae:	d10c      	bne.n	8012eca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	f023 0308 	bic.w	r3, r3, #8
 8012eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	68db      	ldr	r3, [r3, #12]
 8012ebc:	697a      	ldr	r2, [r7, #20]
 8012ebe:	4313      	orrs	r3, r2
 8012ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	f023 0304 	bic.w	r3, r3, #4
 8012ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4a1c      	ldr	r2, [pc, #112]	; (8012f40 <TIM_OC1_SetConfig+0x10c>)
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d00f      	beq.n	8012ef2 <TIM_OC1_SetConfig+0xbe>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	4a1b      	ldr	r2, [pc, #108]	; (8012f44 <TIM_OC1_SetConfig+0x110>)
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d00b      	beq.n	8012ef2 <TIM_OC1_SetConfig+0xbe>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	4a1a      	ldr	r2, [pc, #104]	; (8012f48 <TIM_OC1_SetConfig+0x114>)
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d007      	beq.n	8012ef2 <TIM_OC1_SetConfig+0xbe>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	4a19      	ldr	r2, [pc, #100]	; (8012f4c <TIM_OC1_SetConfig+0x118>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d003      	beq.n	8012ef2 <TIM_OC1_SetConfig+0xbe>
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	4a18      	ldr	r2, [pc, #96]	; (8012f50 <TIM_OC1_SetConfig+0x11c>)
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d111      	bne.n	8012f16 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	695b      	ldr	r3, [r3, #20]
 8012f06:	693a      	ldr	r2, [r7, #16]
 8012f08:	4313      	orrs	r3, r2
 8012f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	699b      	ldr	r3, [r3, #24]
 8012f10:	693a      	ldr	r2, [r7, #16]
 8012f12:	4313      	orrs	r3, r2
 8012f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	693a      	ldr	r2, [r7, #16]
 8012f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	68fa      	ldr	r2, [r7, #12]
 8012f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	685a      	ldr	r2, [r3, #4]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	697a      	ldr	r2, [r7, #20]
 8012f2e:	621a      	str	r2, [r3, #32]
}
 8012f30:	bf00      	nop
 8012f32:	371c      	adds	r7, #28
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr
 8012f3c:	fffeff8f 	.word	0xfffeff8f
 8012f40:	40010000 	.word	0x40010000
 8012f44:	40010400 	.word	0x40010400
 8012f48:	40014000 	.word	0x40014000
 8012f4c:	40014400 	.word	0x40014400
 8012f50:	40014800 	.word	0x40014800

08012f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012f54:	b480      	push	{r7}
 8012f56:	b087      	sub	sp, #28
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
 8012f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6a1b      	ldr	r3, [r3, #32]
 8012f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6a1b      	ldr	r3, [r3, #32]
 8012f68:	f023 0210 	bic.w	r2, r3, #16
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	699b      	ldr	r3, [r3, #24]
 8012f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012f7c:	68fa      	ldr	r2, [r7, #12]
 8012f7e:	4b34      	ldr	r3, [pc, #208]	; (8013050 <TIM_OC2_SetConfig+0xfc>)
 8012f80:	4013      	ands	r3, r2
 8012f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	021b      	lsls	r3, r3, #8
 8012f92:	68fa      	ldr	r2, [r7, #12]
 8012f94:	4313      	orrs	r3, r2
 8012f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	f023 0320 	bic.w	r3, r3, #32
 8012f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	689b      	ldr	r3, [r3, #8]
 8012fa4:	011b      	lsls	r3, r3, #4
 8012fa6:	697a      	ldr	r2, [r7, #20]
 8012fa8:	4313      	orrs	r3, r2
 8012faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	4a29      	ldr	r2, [pc, #164]	; (8013054 <TIM_OC2_SetConfig+0x100>)
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d003      	beq.n	8012fbc <TIM_OC2_SetConfig+0x68>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	4a28      	ldr	r2, [pc, #160]	; (8013058 <TIM_OC2_SetConfig+0x104>)
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	d10d      	bne.n	8012fd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012fbc:	697b      	ldr	r3, [r7, #20]
 8012fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	68db      	ldr	r3, [r3, #12]
 8012fc8:	011b      	lsls	r3, r3, #4
 8012fca:	697a      	ldr	r2, [r7, #20]
 8012fcc:	4313      	orrs	r3, r2
 8012fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012fd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	4a1e      	ldr	r2, [pc, #120]	; (8013054 <TIM_OC2_SetConfig+0x100>)
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d00f      	beq.n	8013000 <TIM_OC2_SetConfig+0xac>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	4a1d      	ldr	r2, [pc, #116]	; (8013058 <TIM_OC2_SetConfig+0x104>)
 8012fe4:	4293      	cmp	r3, r2
 8012fe6:	d00b      	beq.n	8013000 <TIM_OC2_SetConfig+0xac>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	4a1c      	ldr	r2, [pc, #112]	; (801305c <TIM_OC2_SetConfig+0x108>)
 8012fec:	4293      	cmp	r3, r2
 8012fee:	d007      	beq.n	8013000 <TIM_OC2_SetConfig+0xac>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	4a1b      	ldr	r2, [pc, #108]	; (8013060 <TIM_OC2_SetConfig+0x10c>)
 8012ff4:	4293      	cmp	r3, r2
 8012ff6:	d003      	beq.n	8013000 <TIM_OC2_SetConfig+0xac>
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	4a1a      	ldr	r2, [pc, #104]	; (8013064 <TIM_OC2_SetConfig+0x110>)
 8012ffc:	4293      	cmp	r3, r2
 8012ffe:	d113      	bne.n	8013028 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801300e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	695b      	ldr	r3, [r3, #20]
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	693a      	ldr	r2, [r7, #16]
 8013018:	4313      	orrs	r3, r2
 801301a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	699b      	ldr	r3, [r3, #24]
 8013020:	009b      	lsls	r3, r3, #2
 8013022:	693a      	ldr	r2, [r7, #16]
 8013024:	4313      	orrs	r3, r2
 8013026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	693a      	ldr	r2, [r7, #16]
 801302c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	68fa      	ldr	r2, [r7, #12]
 8013032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	685a      	ldr	r2, [r3, #4]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	697a      	ldr	r2, [r7, #20]
 8013040:	621a      	str	r2, [r3, #32]
}
 8013042:	bf00      	nop
 8013044:	371c      	adds	r7, #28
 8013046:	46bd      	mov	sp, r7
 8013048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304c:	4770      	bx	lr
 801304e:	bf00      	nop
 8013050:	feff8fff 	.word	0xfeff8fff
 8013054:	40010000 	.word	0x40010000
 8013058:	40010400 	.word	0x40010400
 801305c:	40014000 	.word	0x40014000
 8013060:	40014400 	.word	0x40014400
 8013064:	40014800 	.word	0x40014800

08013068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013068:	b480      	push	{r7}
 801306a:	b087      	sub	sp, #28
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6a1b      	ldr	r3, [r3, #32]
 8013076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6a1b      	ldr	r3, [r3, #32]
 801307c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	69db      	ldr	r3, [r3, #28]
 801308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013090:	68fa      	ldr	r2, [r7, #12]
 8013092:	4b33      	ldr	r3, [pc, #204]	; (8013160 <TIM_OC3_SetConfig+0xf8>)
 8013094:	4013      	ands	r3, r2
 8013096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	f023 0303 	bic.w	r3, r3, #3
 801309e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	68fa      	ldr	r2, [r7, #12]
 80130a6:	4313      	orrs	r3, r2
 80130a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80130b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	689b      	ldr	r3, [r3, #8]
 80130b6:	021b      	lsls	r3, r3, #8
 80130b8:	697a      	ldr	r2, [r7, #20]
 80130ba:	4313      	orrs	r3, r2
 80130bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	4a28      	ldr	r2, [pc, #160]	; (8013164 <TIM_OC3_SetConfig+0xfc>)
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d003      	beq.n	80130ce <TIM_OC3_SetConfig+0x66>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	4a27      	ldr	r2, [pc, #156]	; (8013168 <TIM_OC3_SetConfig+0x100>)
 80130ca:	4293      	cmp	r3, r2
 80130cc:	d10d      	bne.n	80130ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80130d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	021b      	lsls	r3, r3, #8
 80130dc:	697a      	ldr	r2, [r7, #20]
 80130de:	4313      	orrs	r3, r2
 80130e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80130e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	4a1d      	ldr	r2, [pc, #116]	; (8013164 <TIM_OC3_SetConfig+0xfc>)
 80130ee:	4293      	cmp	r3, r2
 80130f0:	d00f      	beq.n	8013112 <TIM_OC3_SetConfig+0xaa>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	4a1c      	ldr	r2, [pc, #112]	; (8013168 <TIM_OC3_SetConfig+0x100>)
 80130f6:	4293      	cmp	r3, r2
 80130f8:	d00b      	beq.n	8013112 <TIM_OC3_SetConfig+0xaa>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	4a1b      	ldr	r2, [pc, #108]	; (801316c <TIM_OC3_SetConfig+0x104>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d007      	beq.n	8013112 <TIM_OC3_SetConfig+0xaa>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	4a1a      	ldr	r2, [pc, #104]	; (8013170 <TIM_OC3_SetConfig+0x108>)
 8013106:	4293      	cmp	r3, r2
 8013108:	d003      	beq.n	8013112 <TIM_OC3_SetConfig+0xaa>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	4a19      	ldr	r2, [pc, #100]	; (8013174 <TIM_OC3_SetConfig+0x10c>)
 801310e:	4293      	cmp	r3, r2
 8013110:	d113      	bne.n	801313a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	695b      	ldr	r3, [r3, #20]
 8013126:	011b      	lsls	r3, r3, #4
 8013128:	693a      	ldr	r2, [r7, #16]
 801312a:	4313      	orrs	r3, r2
 801312c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	699b      	ldr	r3, [r3, #24]
 8013132:	011b      	lsls	r3, r3, #4
 8013134:	693a      	ldr	r2, [r7, #16]
 8013136:	4313      	orrs	r3, r2
 8013138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	693a      	ldr	r2, [r7, #16]
 801313e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	68fa      	ldr	r2, [r7, #12]
 8013144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	685a      	ldr	r2, [r3, #4]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	697a      	ldr	r2, [r7, #20]
 8013152:	621a      	str	r2, [r3, #32]
}
 8013154:	bf00      	nop
 8013156:	371c      	adds	r7, #28
 8013158:	46bd      	mov	sp, r7
 801315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315e:	4770      	bx	lr
 8013160:	fffeff8f 	.word	0xfffeff8f
 8013164:	40010000 	.word	0x40010000
 8013168:	40010400 	.word	0x40010400
 801316c:	40014000 	.word	0x40014000
 8013170:	40014400 	.word	0x40014400
 8013174:	40014800 	.word	0x40014800

08013178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013178:	b480      	push	{r7}
 801317a:	b087      	sub	sp, #28
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6a1b      	ldr	r3, [r3, #32]
 8013186:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6a1b      	ldr	r3, [r3, #32]
 801318c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	685b      	ldr	r3, [r3, #4]
 8013198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	69db      	ldr	r3, [r3, #28]
 801319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	4b24      	ldr	r3, [pc, #144]	; (8013234 <TIM_OC4_SetConfig+0xbc>)
 80131a4:	4013      	ands	r3, r2
 80131a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80131ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	021b      	lsls	r3, r3, #8
 80131b6:	68fa      	ldr	r2, [r7, #12]
 80131b8:	4313      	orrs	r3, r2
 80131ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80131c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	689b      	ldr	r3, [r3, #8]
 80131c8:	031b      	lsls	r3, r3, #12
 80131ca:	693a      	ldr	r2, [r7, #16]
 80131cc:	4313      	orrs	r3, r2
 80131ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	4a19      	ldr	r2, [pc, #100]	; (8013238 <TIM_OC4_SetConfig+0xc0>)
 80131d4:	4293      	cmp	r3, r2
 80131d6:	d00f      	beq.n	80131f8 <TIM_OC4_SetConfig+0x80>
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	4a18      	ldr	r2, [pc, #96]	; (801323c <TIM_OC4_SetConfig+0xc4>)
 80131dc:	4293      	cmp	r3, r2
 80131de:	d00b      	beq.n	80131f8 <TIM_OC4_SetConfig+0x80>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	4a17      	ldr	r2, [pc, #92]	; (8013240 <TIM_OC4_SetConfig+0xc8>)
 80131e4:	4293      	cmp	r3, r2
 80131e6:	d007      	beq.n	80131f8 <TIM_OC4_SetConfig+0x80>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	4a16      	ldr	r2, [pc, #88]	; (8013244 <TIM_OC4_SetConfig+0xcc>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d003      	beq.n	80131f8 <TIM_OC4_SetConfig+0x80>
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	4a15      	ldr	r2, [pc, #84]	; (8013248 <TIM_OC4_SetConfig+0xd0>)
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d109      	bne.n	801320c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80131fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	695b      	ldr	r3, [r3, #20]
 8013204:	019b      	lsls	r3, r3, #6
 8013206:	697a      	ldr	r2, [r7, #20]
 8013208:	4313      	orrs	r3, r2
 801320a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	697a      	ldr	r2, [r7, #20]
 8013210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	68fa      	ldr	r2, [r7, #12]
 8013216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	685a      	ldr	r2, [r3, #4]
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	693a      	ldr	r2, [r7, #16]
 8013224:	621a      	str	r2, [r3, #32]
}
 8013226:	bf00      	nop
 8013228:	371c      	adds	r7, #28
 801322a:	46bd      	mov	sp, r7
 801322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013230:	4770      	bx	lr
 8013232:	bf00      	nop
 8013234:	feff8fff 	.word	0xfeff8fff
 8013238:	40010000 	.word	0x40010000
 801323c:	40010400 	.word	0x40010400
 8013240:	40014000 	.word	0x40014000
 8013244:	40014400 	.word	0x40014400
 8013248:	40014800 	.word	0x40014800

0801324c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801324c:	b480      	push	{r7}
 801324e:	b087      	sub	sp, #28
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6a1b      	ldr	r3, [r3, #32]
 801325a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	6a1b      	ldr	r3, [r3, #32]
 8013260:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	685b      	ldr	r3, [r3, #4]
 801326c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013274:	68fa      	ldr	r2, [r7, #12]
 8013276:	4b21      	ldr	r3, [pc, #132]	; (80132fc <TIM_OC5_SetConfig+0xb0>)
 8013278:	4013      	ands	r3, r2
 801327a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	68fa      	ldr	r2, [r7, #12]
 8013282:	4313      	orrs	r3, r2
 8013284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801328c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	689b      	ldr	r3, [r3, #8]
 8013292:	041b      	lsls	r3, r3, #16
 8013294:	693a      	ldr	r2, [r7, #16]
 8013296:	4313      	orrs	r3, r2
 8013298:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	4a18      	ldr	r2, [pc, #96]	; (8013300 <TIM_OC5_SetConfig+0xb4>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d00f      	beq.n	80132c2 <TIM_OC5_SetConfig+0x76>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	4a17      	ldr	r2, [pc, #92]	; (8013304 <TIM_OC5_SetConfig+0xb8>)
 80132a6:	4293      	cmp	r3, r2
 80132a8:	d00b      	beq.n	80132c2 <TIM_OC5_SetConfig+0x76>
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	4a16      	ldr	r2, [pc, #88]	; (8013308 <TIM_OC5_SetConfig+0xbc>)
 80132ae:	4293      	cmp	r3, r2
 80132b0:	d007      	beq.n	80132c2 <TIM_OC5_SetConfig+0x76>
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	4a15      	ldr	r2, [pc, #84]	; (801330c <TIM_OC5_SetConfig+0xc0>)
 80132b6:	4293      	cmp	r3, r2
 80132b8:	d003      	beq.n	80132c2 <TIM_OC5_SetConfig+0x76>
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	4a14      	ldr	r2, [pc, #80]	; (8013310 <TIM_OC5_SetConfig+0xc4>)
 80132be:	4293      	cmp	r3, r2
 80132c0:	d109      	bne.n	80132d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80132c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	695b      	ldr	r3, [r3, #20]
 80132ce:	021b      	lsls	r3, r3, #8
 80132d0:	697a      	ldr	r2, [r7, #20]
 80132d2:	4313      	orrs	r3, r2
 80132d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	697a      	ldr	r2, [r7, #20]
 80132da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	68fa      	ldr	r2, [r7, #12]
 80132e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	685a      	ldr	r2, [r3, #4]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	693a      	ldr	r2, [r7, #16]
 80132ee:	621a      	str	r2, [r3, #32]
}
 80132f0:	bf00      	nop
 80132f2:	371c      	adds	r7, #28
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr
 80132fc:	fffeff8f 	.word	0xfffeff8f
 8013300:	40010000 	.word	0x40010000
 8013304:	40010400 	.word	0x40010400
 8013308:	40014000 	.word	0x40014000
 801330c:	40014400 	.word	0x40014400
 8013310:	40014800 	.word	0x40014800

08013314 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013314:	b480      	push	{r7}
 8013316:	b087      	sub	sp, #28
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6a1b      	ldr	r3, [r3, #32]
 8013322:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6a1b      	ldr	r3, [r3, #32]
 8013328:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	685b      	ldr	r3, [r3, #4]
 8013334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801333c:	68fa      	ldr	r2, [r7, #12]
 801333e:	4b22      	ldr	r3, [pc, #136]	; (80133c8 <TIM_OC6_SetConfig+0xb4>)
 8013340:	4013      	ands	r3, r2
 8013342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	021b      	lsls	r3, r3, #8
 801334a:	68fa      	ldr	r2, [r7, #12]
 801334c:	4313      	orrs	r3, r2
 801334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	689b      	ldr	r3, [r3, #8]
 801335c:	051b      	lsls	r3, r3, #20
 801335e:	693a      	ldr	r2, [r7, #16]
 8013360:	4313      	orrs	r3, r2
 8013362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	4a19      	ldr	r2, [pc, #100]	; (80133cc <TIM_OC6_SetConfig+0xb8>)
 8013368:	4293      	cmp	r3, r2
 801336a:	d00f      	beq.n	801338c <TIM_OC6_SetConfig+0x78>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	4a18      	ldr	r2, [pc, #96]	; (80133d0 <TIM_OC6_SetConfig+0xbc>)
 8013370:	4293      	cmp	r3, r2
 8013372:	d00b      	beq.n	801338c <TIM_OC6_SetConfig+0x78>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	4a17      	ldr	r2, [pc, #92]	; (80133d4 <TIM_OC6_SetConfig+0xc0>)
 8013378:	4293      	cmp	r3, r2
 801337a:	d007      	beq.n	801338c <TIM_OC6_SetConfig+0x78>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	4a16      	ldr	r2, [pc, #88]	; (80133d8 <TIM_OC6_SetConfig+0xc4>)
 8013380:	4293      	cmp	r3, r2
 8013382:	d003      	beq.n	801338c <TIM_OC6_SetConfig+0x78>
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	4a15      	ldr	r2, [pc, #84]	; (80133dc <TIM_OC6_SetConfig+0xc8>)
 8013388:	4293      	cmp	r3, r2
 801338a:	d109      	bne.n	80133a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013392:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	695b      	ldr	r3, [r3, #20]
 8013398:	029b      	lsls	r3, r3, #10
 801339a:	697a      	ldr	r2, [r7, #20]
 801339c:	4313      	orrs	r3, r2
 801339e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	697a      	ldr	r2, [r7, #20]
 80133a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	68fa      	ldr	r2, [r7, #12]
 80133aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	685a      	ldr	r2, [r3, #4]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	693a      	ldr	r2, [r7, #16]
 80133b8:	621a      	str	r2, [r3, #32]
}
 80133ba:	bf00      	nop
 80133bc:	371c      	adds	r7, #28
 80133be:	46bd      	mov	sp, r7
 80133c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c4:	4770      	bx	lr
 80133c6:	bf00      	nop
 80133c8:	feff8fff 	.word	0xfeff8fff
 80133cc:	40010000 	.word	0x40010000
 80133d0:	40010400 	.word	0x40010400
 80133d4:	40014000 	.word	0x40014000
 80133d8:	40014400 	.word	0x40014400
 80133dc:	40014800 	.word	0x40014800

080133e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80133e0:	b480      	push	{r7}
 80133e2:	b087      	sub	sp, #28
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	60f8      	str	r0, [r7, #12]
 80133e8:	60b9      	str	r1, [r7, #8]
 80133ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	6a1b      	ldr	r3, [r3, #32]
 80133f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	6a1b      	ldr	r3, [r3, #32]
 80133f6:	f023 0201 	bic.w	r2, r3, #1
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	699b      	ldr	r3, [r3, #24]
 8013402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801340a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	011b      	lsls	r3, r3, #4
 8013410:	693a      	ldr	r2, [r7, #16]
 8013412:	4313      	orrs	r3, r2
 8013414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	f023 030a 	bic.w	r3, r3, #10
 801341c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801341e:	697a      	ldr	r2, [r7, #20]
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	4313      	orrs	r3, r2
 8013424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	693a      	ldr	r2, [r7, #16]
 801342a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	697a      	ldr	r2, [r7, #20]
 8013430:	621a      	str	r2, [r3, #32]
}
 8013432:	bf00      	nop
 8013434:	371c      	adds	r7, #28
 8013436:	46bd      	mov	sp, r7
 8013438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343c:	4770      	bx	lr

0801343e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801343e:	b480      	push	{r7}
 8013440:	b087      	sub	sp, #28
 8013442:	af00      	add	r7, sp, #0
 8013444:	60f8      	str	r0, [r7, #12]
 8013446:	60b9      	str	r1, [r7, #8]
 8013448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	6a1b      	ldr	r3, [r3, #32]
 801344e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	6a1b      	ldr	r3, [r3, #32]
 8013454:	f023 0210 	bic.w	r2, r3, #16
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	699b      	ldr	r3, [r3, #24]
 8013460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	031b      	lsls	r3, r3, #12
 801346e:	693a      	ldr	r2, [r7, #16]
 8013470:	4313      	orrs	r3, r2
 8013472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801347a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	011b      	lsls	r3, r3, #4
 8013480:	697a      	ldr	r2, [r7, #20]
 8013482:	4313      	orrs	r3, r2
 8013484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	693a      	ldr	r2, [r7, #16]
 801348a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	697a      	ldr	r2, [r7, #20]
 8013490:	621a      	str	r2, [r3, #32]
}
 8013492:	bf00      	nop
 8013494:	371c      	adds	r7, #28
 8013496:	46bd      	mov	sp, r7
 8013498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349c:	4770      	bx	lr
	...

080134a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b085      	sub	sp, #20
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	4b09      	ldr	r3, [pc, #36]	; (80134d8 <TIM_ITRx_SetConfig+0x38>)
 80134b4:	4013      	ands	r3, r2
 80134b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80134b8:	683a      	ldr	r2, [r7, #0]
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	4313      	orrs	r3, r2
 80134be:	f043 0307 	orr.w	r3, r3, #7
 80134c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	68fa      	ldr	r2, [r7, #12]
 80134c8:	609a      	str	r2, [r3, #8]
}
 80134ca:	bf00      	nop
 80134cc:	3714      	adds	r7, #20
 80134ce:	46bd      	mov	sp, r7
 80134d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop
 80134d8:	ffcfff8f 	.word	0xffcfff8f

080134dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80134dc:	b480      	push	{r7}
 80134de:	b087      	sub	sp, #28
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	60f8      	str	r0, [r7, #12]
 80134e4:	60b9      	str	r1, [r7, #8]
 80134e6:	607a      	str	r2, [r7, #4]
 80134e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	689b      	ldr	r3, [r3, #8]
 80134ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80134f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	021a      	lsls	r2, r3, #8
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	431a      	orrs	r2, r3
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	4313      	orrs	r3, r2
 8013504:	697a      	ldr	r2, [r7, #20]
 8013506:	4313      	orrs	r3, r2
 8013508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	697a      	ldr	r2, [r7, #20]
 801350e:	609a      	str	r2, [r3, #8]
}
 8013510:	bf00      	nop
 8013512:	371c      	adds	r7, #28
 8013514:	46bd      	mov	sp, r7
 8013516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351a:	4770      	bx	lr

0801351c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801351c:	b480      	push	{r7}
 801351e:	b087      	sub	sp, #28
 8013520:	af00      	add	r7, sp, #0
 8013522:	60f8      	str	r0, [r7, #12]
 8013524:	60b9      	str	r1, [r7, #8]
 8013526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	f003 031f 	and.w	r3, r3, #31
 801352e:	2201      	movs	r2, #1
 8013530:	fa02 f303 	lsl.w	r3, r2, r3
 8013534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	6a1a      	ldr	r2, [r3, #32]
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	43db      	mvns	r3, r3
 801353e:	401a      	ands	r2, r3
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	6a1a      	ldr	r2, [r3, #32]
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	f003 031f 	and.w	r3, r3, #31
 801354e:	6879      	ldr	r1, [r7, #4]
 8013550:	fa01 f303 	lsl.w	r3, r1, r3
 8013554:	431a      	orrs	r2, r3
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	621a      	str	r2, [r3, #32]
}
 801355a:	bf00      	nop
 801355c:	371c      	adds	r7, #28
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr
	...

08013568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013568:	b480      	push	{r7}
 801356a:	b085      	sub	sp, #20
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013578:	2b01      	cmp	r3, #1
 801357a:	d101      	bne.n	8013580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801357c:	2302      	movs	r3, #2
 801357e:	e06d      	b.n	801365c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2201      	movs	r2, #1
 8013584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2202      	movs	r2, #2
 801358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	689b      	ldr	r3, [r3, #8]
 801359e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	4a30      	ldr	r2, [pc, #192]	; (8013668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80135a6:	4293      	cmp	r3, r2
 80135a8:	d004      	beq.n	80135b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	4a2f      	ldr	r2, [pc, #188]	; (801366c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80135b0:	4293      	cmp	r3, r2
 80135b2:	d108      	bne.n	80135c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80135ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	68fa      	ldr	r2, [r7, #12]
 80135c2:	4313      	orrs	r3, r2
 80135c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	68fa      	ldr	r2, [r7, #12]
 80135d4:	4313      	orrs	r3, r2
 80135d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	68fa      	ldr	r2, [r7, #12]
 80135de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	4a20      	ldr	r2, [pc, #128]	; (8013668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d022      	beq.n	8013630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80135f2:	d01d      	beq.n	8013630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	4a1d      	ldr	r2, [pc, #116]	; (8013670 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80135fa:	4293      	cmp	r3, r2
 80135fc:	d018      	beq.n	8013630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	4a1c      	ldr	r2, [pc, #112]	; (8013674 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013604:	4293      	cmp	r3, r2
 8013606:	d013      	beq.n	8013630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	4a1a      	ldr	r2, [pc, #104]	; (8013678 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801360e:	4293      	cmp	r3, r2
 8013610:	d00e      	beq.n	8013630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	4a15      	ldr	r2, [pc, #84]	; (801366c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013618:	4293      	cmp	r3, r2
 801361a:	d009      	beq.n	8013630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	4a16      	ldr	r2, [pc, #88]	; (801367c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013622:	4293      	cmp	r3, r2
 8013624:	d004      	beq.n	8013630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	4a15      	ldr	r2, [pc, #84]	; (8013680 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801362c:	4293      	cmp	r3, r2
 801362e:	d10c      	bne.n	801364a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	689b      	ldr	r3, [r3, #8]
 801363c:	68ba      	ldr	r2, [r7, #8]
 801363e:	4313      	orrs	r3, r2
 8013640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	68ba      	ldr	r2, [r7, #8]
 8013648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2201      	movs	r2, #1
 801364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2200      	movs	r2, #0
 8013656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801365a:	2300      	movs	r3, #0
}
 801365c:	4618      	mov	r0, r3
 801365e:	3714      	adds	r7, #20
 8013660:	46bd      	mov	sp, r7
 8013662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013666:	4770      	bx	lr
 8013668:	40010000 	.word	0x40010000
 801366c:	40010400 	.word	0x40010400
 8013670:	40000400 	.word	0x40000400
 8013674:	40000800 	.word	0x40000800
 8013678:	40000c00 	.word	0x40000c00
 801367c:	40001800 	.word	0x40001800
 8013680:	40014000 	.word	0x40014000

08013684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013684:	b480      	push	{r7}
 8013686:	b085      	sub	sp, #20
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801368e:	2300      	movs	r3, #0
 8013690:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013698:	2b01      	cmp	r3, #1
 801369a:	d101      	bne.n	80136a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801369c:	2302      	movs	r3, #2
 801369e:	e065      	b.n	801376c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2201      	movs	r2, #1
 80136a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	4313      	orrs	r3, r2
 80136b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	689b      	ldr	r3, [r3, #8]
 80136c0:	4313      	orrs	r3, r2
 80136c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	685b      	ldr	r3, [r3, #4]
 80136ce:	4313      	orrs	r3, r2
 80136d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	4313      	orrs	r3, r2
 80136de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	691b      	ldr	r3, [r3, #16]
 80136ea:	4313      	orrs	r3, r2
 80136ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	695b      	ldr	r3, [r3, #20]
 80136f8:	4313      	orrs	r3, r2
 80136fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013706:	4313      	orrs	r3, r2
 8013708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	699b      	ldr	r3, [r3, #24]
 8013714:	041b      	lsls	r3, r3, #16
 8013716:	4313      	orrs	r3, r2
 8013718:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	4a16      	ldr	r2, [pc, #88]	; (8013778 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013720:	4293      	cmp	r3, r2
 8013722:	d004      	beq.n	801372e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	4a14      	ldr	r2, [pc, #80]	; (801377c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801372a:	4293      	cmp	r3, r2
 801372c:	d115      	bne.n	801375a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013738:	051b      	lsls	r3, r3, #20
 801373a:	4313      	orrs	r3, r2
 801373c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	69db      	ldr	r3, [r3, #28]
 8013748:	4313      	orrs	r3, r2
 801374a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	6a1b      	ldr	r3, [r3, #32]
 8013756:	4313      	orrs	r3, r2
 8013758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	68fa      	ldr	r2, [r7, #12]
 8013760:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2200      	movs	r2, #0
 8013766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801376a:	2300      	movs	r3, #0
}
 801376c:	4618      	mov	r0, r3
 801376e:	3714      	adds	r7, #20
 8013770:	46bd      	mov	sp, r7
 8013772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013776:	4770      	bx	lr
 8013778:	40010000 	.word	0x40010000
 801377c:	40010400 	.word	0x40010400

08013780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013780:	b480      	push	{r7}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013788:	bf00      	nop
 801378a:	370c      	adds	r7, #12
 801378c:	46bd      	mov	sp, r7
 801378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013792:	4770      	bx	lr

08013794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013794:	b480      	push	{r7}
 8013796:	b083      	sub	sp, #12
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801379c:	bf00      	nop
 801379e:	370c      	adds	r7, #12
 80137a0:	46bd      	mov	sp, r7
 80137a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a6:	4770      	bx	lr

080137a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80137b0:	bf00      	nop
 80137b2:	370c      	adds	r7, #12
 80137b4:	46bd      	mov	sp, r7
 80137b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ba:	4770      	bx	lr

080137bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d101      	bne.n	80137ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80137ca:	2301      	movs	r3, #1
 80137cc:	e042      	b.n	8013854 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d106      	bne.n	80137e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2200      	movs	r2, #0
 80137dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f7f1 f8dd 	bl	80049a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2224      	movs	r2, #36	; 0x24
 80137ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	681a      	ldr	r2, [r3, #0]
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	f022 0201 	bic.w	r2, r2, #1
 80137fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013802:	2b00      	cmp	r3, #0
 8013804:	d002      	beq.n	801380c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013806:	6878      	ldr	r0, [r7, #4]
 8013808:	f001 fbc2 	bl	8014f90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f000 fe57 	bl	80144c0 <UART_SetConfig>
 8013812:	4603      	mov	r3, r0
 8013814:	2b01      	cmp	r3, #1
 8013816:	d101      	bne.n	801381c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013818:	2301      	movs	r3, #1
 801381a:	e01b      	b.n	8013854 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	685a      	ldr	r2, [r3, #4]
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801382a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	689a      	ldr	r2, [r3, #8]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801383a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	f042 0201 	orr.w	r2, r2, #1
 801384a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f001 fc41 	bl	80150d4 <UART_CheckIdleState>
 8013852:	4603      	mov	r3, r0
}
 8013854:	4618      	mov	r0, r3
 8013856:	3708      	adds	r7, #8
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}

0801385c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b08a      	sub	sp, #40	; 0x28
 8013860:	af02      	add	r7, sp, #8
 8013862:	60f8      	str	r0, [r7, #12]
 8013864:	60b9      	str	r1, [r7, #8]
 8013866:	603b      	str	r3, [r7, #0]
 8013868:	4613      	mov	r3, r2
 801386a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013872:	2b20      	cmp	r3, #32
 8013874:	d17b      	bne.n	801396e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d002      	beq.n	8013882 <HAL_UART_Transmit+0x26>
 801387c:	88fb      	ldrh	r3, [r7, #6]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d101      	bne.n	8013886 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013882:	2301      	movs	r3, #1
 8013884:	e074      	b.n	8013970 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	2200      	movs	r2, #0
 801388a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2221      	movs	r2, #33	; 0x21
 8013892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013896:	f7f1 fc57 	bl	8005148 <HAL_GetTick>
 801389a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	88fa      	ldrh	r2, [r7, #6]
 80138a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	88fa      	ldrh	r2, [r7, #6]
 80138a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	689b      	ldr	r3, [r3, #8]
 80138b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80138b4:	d108      	bne.n	80138c8 <HAL_UART_Transmit+0x6c>
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	691b      	ldr	r3, [r3, #16]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d104      	bne.n	80138c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80138be:	2300      	movs	r3, #0
 80138c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	61bb      	str	r3, [r7, #24]
 80138c6:	e003      	b.n	80138d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80138cc:	2300      	movs	r3, #0
 80138ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80138d0:	e030      	b.n	8013934 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	9300      	str	r3, [sp, #0]
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	2200      	movs	r2, #0
 80138da:	2180      	movs	r1, #128	; 0x80
 80138dc:	68f8      	ldr	r0, [r7, #12]
 80138de:	f001 fca3 	bl	8015228 <UART_WaitOnFlagUntilTimeout>
 80138e2:	4603      	mov	r3, r0
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d005      	beq.n	80138f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2220      	movs	r2, #32
 80138ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80138f0:	2303      	movs	r3, #3
 80138f2:	e03d      	b.n	8013970 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d10b      	bne.n	8013912 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80138fa:	69bb      	ldr	r3, [r7, #24]
 80138fc:	881b      	ldrh	r3, [r3, #0]
 80138fe:	461a      	mov	r2, r3
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013908:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801390a:	69bb      	ldr	r3, [r7, #24]
 801390c:	3302      	adds	r3, #2
 801390e:	61bb      	str	r3, [r7, #24]
 8013910:	e007      	b.n	8013922 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013912:	69fb      	ldr	r3, [r7, #28]
 8013914:	781a      	ldrb	r2, [r3, #0]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801391c:	69fb      	ldr	r3, [r7, #28]
 801391e:	3301      	adds	r3, #1
 8013920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013928:	b29b      	uxth	r3, r3
 801392a:	3b01      	subs	r3, #1
 801392c:	b29a      	uxth	r2, r3
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801393a:	b29b      	uxth	r3, r3
 801393c:	2b00      	cmp	r3, #0
 801393e:	d1c8      	bne.n	80138d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	9300      	str	r3, [sp, #0]
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	2200      	movs	r2, #0
 8013948:	2140      	movs	r1, #64	; 0x40
 801394a:	68f8      	ldr	r0, [r7, #12]
 801394c:	f001 fc6c 	bl	8015228 <UART_WaitOnFlagUntilTimeout>
 8013950:	4603      	mov	r3, r0
 8013952:	2b00      	cmp	r3, #0
 8013954:	d005      	beq.n	8013962 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	2220      	movs	r2, #32
 801395a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801395e:	2303      	movs	r3, #3
 8013960:	e006      	b.n	8013970 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	2220      	movs	r2, #32
 8013966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801396a:	2300      	movs	r3, #0
 801396c:	e000      	b.n	8013970 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801396e:	2302      	movs	r3, #2
  }
}
 8013970:	4618      	mov	r0, r3
 8013972:	3720      	adds	r7, #32
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}

08013978 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b08a      	sub	sp, #40	; 0x28
 801397c:	af02      	add	r7, sp, #8
 801397e:	60f8      	str	r0, [r7, #12]
 8013980:	60b9      	str	r1, [r7, #8]
 8013982:	603b      	str	r3, [r7, #0]
 8013984:	4613      	mov	r3, r2
 8013986:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801398e:	2b20      	cmp	r3, #32
 8013990:	f040 80b5 	bne.w	8013afe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d002      	beq.n	80139a0 <HAL_UART_Receive+0x28>
 801399a:	88fb      	ldrh	r3, [r7, #6]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d101      	bne.n	80139a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80139a0:	2301      	movs	r3, #1
 80139a2:	e0ad      	b.n	8013b00 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2200      	movs	r2, #0
 80139a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	2222      	movs	r2, #34	; 0x22
 80139b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	2200      	movs	r2, #0
 80139b8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80139ba:	f7f1 fbc5 	bl	8005148 <HAL_GetTick>
 80139be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	88fa      	ldrh	r2, [r7, #6]
 80139c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	88fa      	ldrh	r2, [r7, #6]
 80139cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	689b      	ldr	r3, [r3, #8]
 80139d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80139d8:	d10e      	bne.n	80139f8 <HAL_UART_Receive+0x80>
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	691b      	ldr	r3, [r3, #16]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d105      	bne.n	80139ee <HAL_UART_Receive+0x76>
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80139e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80139ec:	e02d      	b.n	8013a4a <HAL_UART_Receive+0xd2>
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	22ff      	movs	r2, #255	; 0xff
 80139f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80139f6:	e028      	b.n	8013a4a <HAL_UART_Receive+0xd2>
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	689b      	ldr	r3, [r3, #8]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d10d      	bne.n	8013a1c <HAL_UART_Receive+0xa4>
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	691b      	ldr	r3, [r3, #16]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d104      	bne.n	8013a12 <HAL_UART_Receive+0x9a>
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	22ff      	movs	r2, #255	; 0xff
 8013a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013a10:	e01b      	b.n	8013a4a <HAL_UART_Receive+0xd2>
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	227f      	movs	r2, #127	; 0x7f
 8013a16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013a1a:	e016      	b.n	8013a4a <HAL_UART_Receive+0xd2>
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	689b      	ldr	r3, [r3, #8]
 8013a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013a24:	d10d      	bne.n	8013a42 <HAL_UART_Receive+0xca>
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	691b      	ldr	r3, [r3, #16]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d104      	bne.n	8013a38 <HAL_UART_Receive+0xc0>
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	227f      	movs	r2, #127	; 0x7f
 8013a32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013a36:	e008      	b.n	8013a4a <HAL_UART_Receive+0xd2>
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	223f      	movs	r2, #63	; 0x3f
 8013a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013a40:	e003      	b.n	8013a4a <HAL_UART_Receive+0xd2>
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	2200      	movs	r2, #0
 8013a46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013a50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	689b      	ldr	r3, [r3, #8]
 8013a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013a5a:	d108      	bne.n	8013a6e <HAL_UART_Receive+0xf6>
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	691b      	ldr	r3, [r3, #16]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d104      	bne.n	8013a6e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8013a64:	2300      	movs	r3, #0
 8013a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	61bb      	str	r3, [r7, #24]
 8013a6c:	e003      	b.n	8013a76 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013a72:	2300      	movs	r3, #0
 8013a74:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8013a76:	e036      	b.n	8013ae6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	9300      	str	r3, [sp, #0]
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	2200      	movs	r2, #0
 8013a80:	2120      	movs	r1, #32
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	f001 fbd0 	bl	8015228 <UART_WaitOnFlagUntilTimeout>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d005      	beq.n	8013a9a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	2220      	movs	r2, #32
 8013a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8013a96:	2303      	movs	r3, #3
 8013a98:	e032      	b.n	8013b00 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8013a9a:	69fb      	ldr	r3, [r7, #28]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d10c      	bne.n	8013aba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa6:	b29a      	uxth	r2, r3
 8013aa8:	8a7b      	ldrh	r3, [r7, #18]
 8013aaa:	4013      	ands	r3, r2
 8013aac:	b29a      	uxth	r2, r3
 8013aae:	69bb      	ldr	r3, [r7, #24]
 8013ab0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8013ab2:	69bb      	ldr	r3, [r7, #24]
 8013ab4:	3302      	adds	r3, #2
 8013ab6:	61bb      	str	r3, [r7, #24]
 8013ab8:	e00c      	b.n	8013ad4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ac0:	b2da      	uxtb	r2, r3
 8013ac2:	8a7b      	ldrh	r3, [r7, #18]
 8013ac4:	b2db      	uxtb	r3, r3
 8013ac6:	4013      	ands	r3, r2
 8013ac8:	b2da      	uxtb	r2, r3
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	3301      	adds	r3, #1
 8013ad2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013ada:	b29b      	uxth	r3, r3
 8013adc:	3b01      	subs	r3, #1
 8013ade:	b29a      	uxth	r2, r3
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d1c2      	bne.n	8013a78 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	2220      	movs	r2, #32
 8013af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8013afa:	2300      	movs	r3, #0
 8013afc:	e000      	b.n	8013b00 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8013afe:	2302      	movs	r3, #2
  }
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3720      	adds	r7, #32
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}

08013b08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b08a      	sub	sp, #40	; 0x28
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	60f8      	str	r0, [r7, #12]
 8013b10:	60b9      	str	r1, [r7, #8]
 8013b12:	4613      	mov	r3, r2
 8013b14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b1c:	2b20      	cmp	r3, #32
 8013b1e:	d137      	bne.n	8013b90 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d002      	beq.n	8013b2c <HAL_UART_Receive_IT+0x24>
 8013b26:	88fb      	ldrh	r3, [r7, #6]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d101      	bne.n	8013b30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	e030      	b.n	8013b92 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	2200      	movs	r2, #0
 8013b34:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	4a18      	ldr	r2, [pc, #96]	; (8013b9c <HAL_UART_Receive_IT+0x94>)
 8013b3c:	4293      	cmp	r3, r2
 8013b3e:	d01f      	beq.n	8013b80 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	685b      	ldr	r3, [r3, #4]
 8013b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d018      	beq.n	8013b80 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	e853 3f00 	ldrex	r3, [r3]
 8013b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013b62:	627b      	str	r3, [r7, #36]	; 0x24
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	461a      	mov	r2, r3
 8013b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b6c:	623b      	str	r3, [r7, #32]
 8013b6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b70:	69f9      	ldr	r1, [r7, #28]
 8013b72:	6a3a      	ldr	r2, [r7, #32]
 8013b74:	e841 2300 	strex	r3, r2, [r1]
 8013b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8013b7a:	69bb      	ldr	r3, [r7, #24]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d1e6      	bne.n	8013b4e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013b80:	88fb      	ldrh	r3, [r7, #6]
 8013b82:	461a      	mov	r2, r3
 8013b84:	68b9      	ldr	r1, [r7, #8]
 8013b86:	68f8      	ldr	r0, [r7, #12]
 8013b88:	f001 fbbc 	bl	8015304 <UART_Start_Receive_IT>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	e000      	b.n	8013b92 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013b90:	2302      	movs	r3, #2
  }
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3728      	adds	r7, #40	; 0x28
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	58000c00 	.word	0x58000c00

08013ba0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b09a      	sub	sp, #104	; 0x68
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bb0:	e853 3f00 	ldrex	r3, [r3]
 8013bb4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8013bc8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013bcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013bce:	e841 2300 	strex	r3, r2, [r1]
 8013bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d1e6      	bne.n	8013ba8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	3308      	adds	r3, #8
 8013be0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013be4:	e853 3f00 	ldrex	r3, [r3]
 8013be8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bec:	4b46      	ldr	r3, [pc, #280]	; (8013d08 <HAL_UART_AbortReceive+0x168>)
 8013bee:	4013      	ands	r3, r2
 8013bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	3308      	adds	r3, #8
 8013bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013bfa:	643a      	str	r2, [r7, #64]	; 0x40
 8013bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013c00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c02:	e841 2300 	strex	r3, r2, [r1]
 8013c06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d1e5      	bne.n	8013bda <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c12:	2b01      	cmp	r3, #1
 8013c14:	d118      	bne.n	8013c48 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c1c:	6a3b      	ldr	r3, [r7, #32]
 8013c1e:	e853 3f00 	ldrex	r3, [r3]
 8013c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8013c24:	69fb      	ldr	r3, [r7, #28]
 8013c26:	f023 0310 	bic.w	r3, r3, #16
 8013c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	461a      	mov	r2, r3
 8013c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c36:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c3c:	e841 2300 	strex	r3, r2, [r1]
 8013c40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d1e6      	bne.n	8013c16 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	689b      	ldr	r3, [r3, #8]
 8013c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c52:	2b40      	cmp	r3, #64	; 0x40
 8013c54:	d13b      	bne.n	8013cce <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	3308      	adds	r3, #8
 8013c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	e853 3f00 	ldrex	r3, [r3]
 8013c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	3308      	adds	r3, #8
 8013c74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013c76:	61ba      	str	r2, [r7, #24]
 8013c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c7a:	6979      	ldr	r1, [r7, #20]
 8013c7c:	69ba      	ldr	r2, [r7, #24]
 8013c7e:	e841 2300 	strex	r3, r2, [r1]
 8013c82:	613b      	str	r3, [r7, #16]
   return(result);
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d1e5      	bne.n	8013c56 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d01c      	beq.n	8013cce <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7f4 f93d 	bl	8007f24 <HAL_DMA_Abort>
 8013caa:	4603      	mov	r3, r0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d00e      	beq.n	8013cce <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7f5 fdd0 	bl	800985c <HAL_DMA_GetError>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	2b20      	cmp	r3, #32
 8013cc0:	d105      	bne.n	8013cce <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	2210      	movs	r2, #16
 8013cc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8013cca:	2303      	movs	r3, #3
 8013ccc:	e017      	b.n	8013cfe <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	220f      	movs	r2, #15
 8013cdc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	699a      	ldr	r2, [r3, #24]
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	f042 0208 	orr.w	r2, r2, #8
 8013cec:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2220      	movs	r2, #32
 8013cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8013cfc:	2300      	movs	r3, #0
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3768      	adds	r7, #104	; 0x68
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	effffffe 	.word	0xeffffffe

08013d0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b0ba      	sub	sp, #232	; 0xe8
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	69db      	ldr	r3, [r3, #28]
 8013d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	689b      	ldr	r3, [r3, #8]
 8013d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013d32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013d36:	f640 030f 	movw	r3, #2063	; 0x80f
 8013d3a:	4013      	ands	r3, r2
 8013d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d11b      	bne.n	8013d80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d4c:	f003 0320 	and.w	r3, r3, #32
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d015      	beq.n	8013d80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013d58:	f003 0320 	and.w	r3, r3, #32
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d105      	bne.n	8013d6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d009      	beq.n	8013d80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	f000 8377 	beq.w	8014464 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	4798      	blx	r3
      }
      return;
 8013d7e:	e371      	b.n	8014464 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013d80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	f000 8123 	beq.w	8013fd0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013d8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013d8e:	4b8d      	ldr	r3, [pc, #564]	; (8013fc4 <HAL_UART_IRQHandler+0x2b8>)
 8013d90:	4013      	ands	r3, r2
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d106      	bne.n	8013da4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013d96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8013d9a:	4b8b      	ldr	r3, [pc, #556]	; (8013fc8 <HAL_UART_IRQHandler+0x2bc>)
 8013d9c:	4013      	ands	r3, r2
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	f000 8116 	beq.w	8013fd0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013da8:	f003 0301 	and.w	r3, r3, #1
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d011      	beq.n	8013dd4 <HAL_UART_IRQHandler+0xc8>
 8013db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d00b      	beq.n	8013dd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	2201      	movs	r2, #1
 8013dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013dca:	f043 0201 	orr.w	r2, r3, #1
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013dd8:	f003 0302 	and.w	r3, r3, #2
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d011      	beq.n	8013e04 <HAL_UART_IRQHandler+0xf8>
 8013de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013de4:	f003 0301 	and.w	r3, r3, #1
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d00b      	beq.n	8013e04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	2202      	movs	r2, #2
 8013df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013dfa:	f043 0204 	orr.w	r2, r3, #4
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013e08:	f003 0304 	and.w	r3, r3, #4
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d011      	beq.n	8013e34 <HAL_UART_IRQHandler+0x128>
 8013e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013e14:	f003 0301 	and.w	r3, r3, #1
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d00b      	beq.n	8013e34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2204      	movs	r2, #4
 8013e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e2a:	f043 0202 	orr.w	r2, r3, #2
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013e38:	f003 0308 	and.w	r3, r3, #8
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d017      	beq.n	8013e70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013e44:	f003 0320 	and.w	r3, r3, #32
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d105      	bne.n	8013e58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013e4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013e50:	4b5c      	ldr	r3, [pc, #368]	; (8013fc4 <HAL_UART_IRQHandler+0x2b8>)
 8013e52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00b      	beq.n	8013e70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	2208      	movs	r2, #8
 8013e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e66:	f043 0208 	orr.w	r2, r3, #8
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d012      	beq.n	8013ea2 <HAL_UART_IRQHandler+0x196>
 8013e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013e80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d00c      	beq.n	8013ea2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e98:	f043 0220 	orr.w	r2, r3, #32
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	f000 82dd 	beq.w	8014468 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013eb2:	f003 0320 	and.w	r3, r3, #32
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d013      	beq.n	8013ee2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013ebe:	f003 0320 	and.w	r3, r3, #32
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d105      	bne.n	8013ed2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d007      	beq.n	8013ee2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d003      	beq.n	8013ee2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ee8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	689b      	ldr	r3, [r3, #8]
 8013ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ef6:	2b40      	cmp	r3, #64	; 0x40
 8013ef8:	d005      	beq.n	8013f06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013efe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d054      	beq.n	8013fb0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013f06:	6878      	ldr	r0, [r7, #4]
 8013f08:	f001 fb1e 	bl	8015548 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	689b      	ldr	r3, [r3, #8]
 8013f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f16:	2b40      	cmp	r3, #64	; 0x40
 8013f18:	d146      	bne.n	8013fa8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	3308      	adds	r3, #8
 8013f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013f28:	e853 3f00 	ldrex	r3, [r3]
 8013f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8013f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	3308      	adds	r3, #8
 8013f42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013f46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8013f52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013f56:	e841 2300 	strex	r3, r2, [r1]
 8013f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8013f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d1d9      	bne.n	8013f1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d017      	beq.n	8013fa0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f76:	4a15      	ldr	r2, [pc, #84]	; (8013fcc <HAL_UART_IRQHandler+0x2c0>)
 8013f78:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7f4 faed 	bl	8008560 <HAL_DMA_Abort_IT>
 8013f86:	4603      	mov	r3, r0
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d019      	beq.n	8013fc0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8013f9a:	4610      	mov	r0, r2
 8013f9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013f9e:	e00f      	b.n	8013fc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f000 fa77 	bl	8014494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013fa6:	e00b      	b.n	8013fc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013fa8:	6878      	ldr	r0, [r7, #4]
 8013faa:	f000 fa73 	bl	8014494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013fae:	e007      	b.n	8013fc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f000 fa6f 	bl	8014494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8013fbe:	e253      	b.n	8014468 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013fc0:	bf00      	nop
    return;
 8013fc2:	e251      	b.n	8014468 <HAL_UART_IRQHandler+0x75c>
 8013fc4:	10000001 	.word	0x10000001
 8013fc8:	04000120 	.word	0x04000120
 8013fcc:	08015615 	.word	0x08015615

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fd4:	2b01      	cmp	r3, #1
 8013fd6:	f040 81e7 	bne.w	80143a8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013fde:	f003 0310 	and.w	r3, r3, #16
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	f000 81e0 	beq.w	80143a8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013fec:	f003 0310 	and.w	r3, r3, #16
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f000 81d9 	beq.w	80143a8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2210      	movs	r2, #16
 8013ffc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	689b      	ldr	r3, [r3, #8]
 8014004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014008:	2b40      	cmp	r3, #64	; 0x40
 801400a:	f040 8151 	bne.w	80142b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	4a96      	ldr	r2, [pc, #600]	; (8014270 <HAL_UART_IRQHandler+0x564>)
 8014018:	4293      	cmp	r3, r2
 801401a:	d068      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	4a93      	ldr	r2, [pc, #588]	; (8014274 <HAL_UART_IRQHandler+0x568>)
 8014026:	4293      	cmp	r3, r2
 8014028:	d061      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	4a91      	ldr	r2, [pc, #580]	; (8014278 <HAL_UART_IRQHandler+0x56c>)
 8014034:	4293      	cmp	r3, r2
 8014036:	d05a      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4a8e      	ldr	r2, [pc, #568]	; (801427c <HAL_UART_IRQHandler+0x570>)
 8014042:	4293      	cmp	r3, r2
 8014044:	d053      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	4a8c      	ldr	r2, [pc, #560]	; (8014280 <HAL_UART_IRQHandler+0x574>)
 8014050:	4293      	cmp	r3, r2
 8014052:	d04c      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	4a89      	ldr	r2, [pc, #548]	; (8014284 <HAL_UART_IRQHandler+0x578>)
 801405e:	4293      	cmp	r3, r2
 8014060:	d045      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a87      	ldr	r2, [pc, #540]	; (8014288 <HAL_UART_IRQHandler+0x57c>)
 801406c:	4293      	cmp	r3, r2
 801406e:	d03e      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4a84      	ldr	r2, [pc, #528]	; (801428c <HAL_UART_IRQHandler+0x580>)
 801407a:	4293      	cmp	r3, r2
 801407c:	d037      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	4a82      	ldr	r2, [pc, #520]	; (8014290 <HAL_UART_IRQHandler+0x584>)
 8014088:	4293      	cmp	r3, r2
 801408a:	d030      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	4a7f      	ldr	r2, [pc, #508]	; (8014294 <HAL_UART_IRQHandler+0x588>)
 8014096:	4293      	cmp	r3, r2
 8014098:	d029      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4a7d      	ldr	r2, [pc, #500]	; (8014298 <HAL_UART_IRQHandler+0x58c>)
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d022      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	4a7a      	ldr	r2, [pc, #488]	; (801429c <HAL_UART_IRQHandler+0x590>)
 80140b2:	4293      	cmp	r3, r2
 80140b4:	d01b      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	4a78      	ldr	r2, [pc, #480]	; (80142a0 <HAL_UART_IRQHandler+0x594>)
 80140c0:	4293      	cmp	r3, r2
 80140c2:	d014      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	4a75      	ldr	r2, [pc, #468]	; (80142a4 <HAL_UART_IRQHandler+0x598>)
 80140ce:	4293      	cmp	r3, r2
 80140d0:	d00d      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	4a73      	ldr	r2, [pc, #460]	; (80142a8 <HAL_UART_IRQHandler+0x59c>)
 80140dc:	4293      	cmp	r3, r2
 80140de:	d006      	beq.n	80140ee <HAL_UART_IRQHandler+0x3e2>
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	4a70      	ldr	r2, [pc, #448]	; (80142ac <HAL_UART_IRQHandler+0x5a0>)
 80140ea:	4293      	cmp	r3, r2
 80140ec:	d106      	bne.n	80140fc <HAL_UART_IRQHandler+0x3f0>
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	685b      	ldr	r3, [r3, #4]
 80140f8:	b29b      	uxth	r3, r3
 80140fa:	e005      	b.n	8014108 <HAL_UART_IRQHandler+0x3fc>
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	b29b      	uxth	r3, r3
 8014108:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801410c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014110:	2b00      	cmp	r3, #0
 8014112:	f000 81ab 	beq.w	801446c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801411c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014120:	429a      	cmp	r2, r3
 8014122:	f080 81a3 	bcs.w	801446c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801412c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014136:	69db      	ldr	r3, [r3, #28]
 8014138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801413c:	f000 8087 	beq.w	801424e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801414c:	e853 3f00 	ldrex	r3, [r3]
 8014150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801415c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	461a      	mov	r2, r3
 8014166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801416a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801416e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014172:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014176:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801417a:	e841 2300 	strex	r3, r2, [r1]
 801417e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014186:	2b00      	cmp	r3, #0
 8014188:	d1da      	bne.n	8014140 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	3308      	adds	r3, #8
 8014190:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014194:	e853 3f00 	ldrex	r3, [r3]
 8014198:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801419a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801419c:	f023 0301 	bic.w	r3, r3, #1
 80141a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	3308      	adds	r3, #8
 80141aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80141ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80141b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80141b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80141ba:	e841 2300 	strex	r3, r2, [r1]
 80141be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80141c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d1e1      	bne.n	801418a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	3308      	adds	r3, #8
 80141cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80141d0:	e853 3f00 	ldrex	r3, [r3]
 80141d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80141d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80141dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	3308      	adds	r3, #8
 80141e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80141ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80141ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80141f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80141f2:	e841 2300 	strex	r3, r2, [r1]
 80141f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80141f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d1e3      	bne.n	80141c6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2220      	movs	r2, #32
 8014202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	2200      	movs	r2, #0
 801420a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014214:	e853 3f00 	ldrex	r3, [r3]
 8014218:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801421a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801421c:	f023 0310 	bic.w	r3, r3, #16
 8014220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	461a      	mov	r2, r3
 801422a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801422e:	65bb      	str	r3, [r7, #88]	; 0x58
 8014230:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014232:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014234:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014236:	e841 2300 	strex	r3, r2, [r1]
 801423a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801423c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801423e:	2b00      	cmp	r3, #0
 8014240:	d1e4      	bne.n	801420c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014248:	4618      	mov	r0, r3
 801424a:	f7f3 fe6b 	bl	8007f24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2202      	movs	r2, #2
 8014252:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014260:	b29b      	uxth	r3, r3
 8014262:	1ad3      	subs	r3, r2, r3
 8014264:	b29b      	uxth	r3, r3
 8014266:	4619      	mov	r1, r3
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f000 f91d 	bl	80144a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801426e:	e0fd      	b.n	801446c <HAL_UART_IRQHandler+0x760>
 8014270:	40020010 	.word	0x40020010
 8014274:	40020028 	.word	0x40020028
 8014278:	40020040 	.word	0x40020040
 801427c:	40020058 	.word	0x40020058
 8014280:	40020070 	.word	0x40020070
 8014284:	40020088 	.word	0x40020088
 8014288:	400200a0 	.word	0x400200a0
 801428c:	400200b8 	.word	0x400200b8
 8014290:	40020410 	.word	0x40020410
 8014294:	40020428 	.word	0x40020428
 8014298:	40020440 	.word	0x40020440
 801429c:	40020458 	.word	0x40020458
 80142a0:	40020470 	.word	0x40020470
 80142a4:	40020488 	.word	0x40020488
 80142a8:	400204a0 	.word	0x400204a0
 80142ac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80142bc:	b29b      	uxth	r3, r3
 80142be:	1ad3      	subs	r3, r2, r3
 80142c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	f000 80cf 	beq.w	8014470 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80142d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f000 80ca 	beq.w	8014470 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e4:	e853 3f00 	ldrex	r3, [r3]
 80142e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80142ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80142f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	461a      	mov	r2, r3
 80142fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80142fe:	647b      	str	r3, [r7, #68]	; 0x44
 8014300:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014302:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014304:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014306:	e841 2300 	strex	r3, r2, [r1]
 801430a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801430c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801430e:	2b00      	cmp	r3, #0
 8014310:	d1e4      	bne.n	80142dc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	3308      	adds	r3, #8
 8014318:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431c:	e853 3f00 	ldrex	r3, [r3]
 8014320:	623b      	str	r3, [r7, #32]
   return(result);
 8014322:	6a3a      	ldr	r2, [r7, #32]
 8014324:	4b55      	ldr	r3, [pc, #340]	; (801447c <HAL_UART_IRQHandler+0x770>)
 8014326:	4013      	ands	r3, r2
 8014328:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	3308      	adds	r3, #8
 8014332:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014336:	633a      	str	r2, [r7, #48]	; 0x30
 8014338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801433a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801433c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801433e:	e841 2300 	strex	r3, r2, [r1]
 8014342:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014346:	2b00      	cmp	r3, #0
 8014348:	d1e3      	bne.n	8014312 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2220      	movs	r2, #32
 801434e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	2200      	movs	r2, #0
 8014356:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2200      	movs	r2, #0
 801435c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	e853 3f00 	ldrex	r3, [r3]
 801436a:	60fb      	str	r3, [r7, #12]
   return(result);
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	f023 0310 	bic.w	r3, r3, #16
 8014372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	461a      	mov	r2, r3
 801437c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014380:	61fb      	str	r3, [r7, #28]
 8014382:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014384:	69b9      	ldr	r1, [r7, #24]
 8014386:	69fa      	ldr	r2, [r7, #28]
 8014388:	e841 2300 	strex	r3, r2, [r1]
 801438c:	617b      	str	r3, [r7, #20]
   return(result);
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d1e4      	bne.n	801435e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2202      	movs	r2, #2
 8014398:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801439a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801439e:	4619      	mov	r1, r3
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f000 f881 	bl	80144a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80143a6:	e063      	b.n	8014470 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80143a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80143ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d00e      	beq.n	80143d2 <HAL_UART_IRQHandler+0x6c6>
 80143b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80143b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d008      	beq.n	80143d2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80143c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	f001 fe80 	bl	80160d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80143d0:	e051      	b.n	8014476 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80143d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80143d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d014      	beq.n	8014408 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80143de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80143e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d105      	bne.n	80143f6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80143ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80143ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d008      	beq.n	8014408 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d03a      	beq.n	8014474 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	4798      	blx	r3
    }
    return;
 8014406:	e035      	b.n	8014474 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801440c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014410:	2b00      	cmp	r3, #0
 8014412:	d009      	beq.n	8014428 <HAL_UART_IRQHandler+0x71c>
 8014414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801441c:	2b00      	cmp	r3, #0
 801441e:	d003      	beq.n	8014428 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f001 f90d 	bl	8015640 <UART_EndTransmit_IT>
    return;
 8014426:	e026      	b.n	8014476 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801442c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014430:	2b00      	cmp	r3, #0
 8014432:	d009      	beq.n	8014448 <HAL_UART_IRQHandler+0x73c>
 8014434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014438:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801443c:	2b00      	cmp	r3, #0
 801443e:	d003      	beq.n	8014448 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f001 fe59 	bl	80160f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014446:	e016      	b.n	8014476 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801444c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014450:	2b00      	cmp	r3, #0
 8014452:	d010      	beq.n	8014476 <HAL_UART_IRQHandler+0x76a>
 8014454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014458:	2b00      	cmp	r3, #0
 801445a:	da0c      	bge.n	8014476 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f001 fe41 	bl	80160e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014462:	e008      	b.n	8014476 <HAL_UART_IRQHandler+0x76a>
      return;
 8014464:	bf00      	nop
 8014466:	e006      	b.n	8014476 <HAL_UART_IRQHandler+0x76a>
    return;
 8014468:	bf00      	nop
 801446a:	e004      	b.n	8014476 <HAL_UART_IRQHandler+0x76a>
      return;
 801446c:	bf00      	nop
 801446e:	e002      	b.n	8014476 <HAL_UART_IRQHandler+0x76a>
      return;
 8014470:	bf00      	nop
 8014472:	e000      	b.n	8014476 <HAL_UART_IRQHandler+0x76a>
    return;
 8014474:	bf00      	nop
  }
}
 8014476:	37e8      	adds	r7, #232	; 0xe8
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}
 801447c:	effffffe 	.word	0xeffffffe

08014480 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014480:	b480      	push	{r7}
 8014482:	b083      	sub	sp, #12
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014488:	bf00      	nop
 801448a:	370c      	adds	r7, #12
 801448c:	46bd      	mov	sp, r7
 801448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014492:	4770      	bx	lr

08014494 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014494:	b480      	push	{r7}
 8014496:	b083      	sub	sp, #12
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801449c:	bf00      	nop
 801449e:	370c      	adds	r7, #12
 80144a0:	46bd      	mov	sp, r7
 80144a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a6:	4770      	bx	lr

080144a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80144a8:	b480      	push	{r7}
 80144aa:	b083      	sub	sp, #12
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	460b      	mov	r3, r1
 80144b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80144b4:	bf00      	nop
 80144b6:	370c      	adds	r7, #12
 80144b8:	46bd      	mov	sp, r7
 80144ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144be:	4770      	bx	lr

080144c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80144c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80144c4:	b092      	sub	sp, #72	; 0x48
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80144ca:	2300      	movs	r3, #0
 80144cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	689a      	ldr	r2, [r3, #8]
 80144d4:	697b      	ldr	r3, [r7, #20]
 80144d6:	691b      	ldr	r3, [r3, #16]
 80144d8:	431a      	orrs	r2, r3
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	695b      	ldr	r3, [r3, #20]
 80144de:	431a      	orrs	r2, r3
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	69db      	ldr	r3, [r3, #28]
 80144e4:	4313      	orrs	r3, r2
 80144e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	681a      	ldr	r2, [r3, #0]
 80144ee:	4bbe      	ldr	r3, [pc, #760]	; (80147e8 <UART_SetConfig+0x328>)
 80144f0:	4013      	ands	r3, r2
 80144f2:	697a      	ldr	r2, [r7, #20]
 80144f4:	6812      	ldr	r2, [r2, #0]
 80144f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80144f8:	430b      	orrs	r3, r1
 80144fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014506:	697b      	ldr	r3, [r7, #20]
 8014508:	68da      	ldr	r2, [r3, #12]
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	430a      	orrs	r2, r1
 8014510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	699b      	ldr	r3, [r3, #24]
 8014516:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	4ab3      	ldr	r2, [pc, #716]	; (80147ec <UART_SetConfig+0x32c>)
 801451e:	4293      	cmp	r3, r2
 8014520:	d004      	beq.n	801452c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	6a1b      	ldr	r3, [r3, #32]
 8014526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014528:	4313      	orrs	r3, r2
 801452a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	689a      	ldr	r2, [r3, #8]
 8014532:	4baf      	ldr	r3, [pc, #700]	; (80147f0 <UART_SetConfig+0x330>)
 8014534:	4013      	ands	r3, r2
 8014536:	697a      	ldr	r2, [r7, #20]
 8014538:	6812      	ldr	r2, [r2, #0]
 801453a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801453c:	430b      	orrs	r3, r1
 801453e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014546:	f023 010f 	bic.w	r1, r3, #15
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801454e:	697b      	ldr	r3, [r7, #20]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	430a      	orrs	r2, r1
 8014554:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	4aa6      	ldr	r2, [pc, #664]	; (80147f4 <UART_SetConfig+0x334>)
 801455c:	4293      	cmp	r3, r2
 801455e:	d177      	bne.n	8014650 <UART_SetConfig+0x190>
 8014560:	4ba5      	ldr	r3, [pc, #660]	; (80147f8 <UART_SetConfig+0x338>)
 8014562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014568:	2b28      	cmp	r3, #40	; 0x28
 801456a:	d86d      	bhi.n	8014648 <UART_SetConfig+0x188>
 801456c:	a201      	add	r2, pc, #4	; (adr r2, 8014574 <UART_SetConfig+0xb4>)
 801456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014572:	bf00      	nop
 8014574:	08014619 	.word	0x08014619
 8014578:	08014649 	.word	0x08014649
 801457c:	08014649 	.word	0x08014649
 8014580:	08014649 	.word	0x08014649
 8014584:	08014649 	.word	0x08014649
 8014588:	08014649 	.word	0x08014649
 801458c:	08014649 	.word	0x08014649
 8014590:	08014649 	.word	0x08014649
 8014594:	08014621 	.word	0x08014621
 8014598:	08014649 	.word	0x08014649
 801459c:	08014649 	.word	0x08014649
 80145a0:	08014649 	.word	0x08014649
 80145a4:	08014649 	.word	0x08014649
 80145a8:	08014649 	.word	0x08014649
 80145ac:	08014649 	.word	0x08014649
 80145b0:	08014649 	.word	0x08014649
 80145b4:	08014629 	.word	0x08014629
 80145b8:	08014649 	.word	0x08014649
 80145bc:	08014649 	.word	0x08014649
 80145c0:	08014649 	.word	0x08014649
 80145c4:	08014649 	.word	0x08014649
 80145c8:	08014649 	.word	0x08014649
 80145cc:	08014649 	.word	0x08014649
 80145d0:	08014649 	.word	0x08014649
 80145d4:	08014631 	.word	0x08014631
 80145d8:	08014649 	.word	0x08014649
 80145dc:	08014649 	.word	0x08014649
 80145e0:	08014649 	.word	0x08014649
 80145e4:	08014649 	.word	0x08014649
 80145e8:	08014649 	.word	0x08014649
 80145ec:	08014649 	.word	0x08014649
 80145f0:	08014649 	.word	0x08014649
 80145f4:	08014639 	.word	0x08014639
 80145f8:	08014649 	.word	0x08014649
 80145fc:	08014649 	.word	0x08014649
 8014600:	08014649 	.word	0x08014649
 8014604:	08014649 	.word	0x08014649
 8014608:	08014649 	.word	0x08014649
 801460c:	08014649 	.word	0x08014649
 8014610:	08014649 	.word	0x08014649
 8014614:	08014641 	.word	0x08014641
 8014618:	2301      	movs	r3, #1
 801461a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801461e:	e222      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014620:	2304      	movs	r3, #4
 8014622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014626:	e21e      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014628:	2308      	movs	r3, #8
 801462a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801462e:	e21a      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014630:	2310      	movs	r3, #16
 8014632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014636:	e216      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014638:	2320      	movs	r3, #32
 801463a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801463e:	e212      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014640:	2340      	movs	r3, #64	; 0x40
 8014642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014646:	e20e      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014648:	2380      	movs	r3, #128	; 0x80
 801464a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801464e:	e20a      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	4a69      	ldr	r2, [pc, #420]	; (80147fc <UART_SetConfig+0x33c>)
 8014656:	4293      	cmp	r3, r2
 8014658:	d130      	bne.n	80146bc <UART_SetConfig+0x1fc>
 801465a:	4b67      	ldr	r3, [pc, #412]	; (80147f8 <UART_SetConfig+0x338>)
 801465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801465e:	f003 0307 	and.w	r3, r3, #7
 8014662:	2b05      	cmp	r3, #5
 8014664:	d826      	bhi.n	80146b4 <UART_SetConfig+0x1f4>
 8014666:	a201      	add	r2, pc, #4	; (adr r2, 801466c <UART_SetConfig+0x1ac>)
 8014668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801466c:	08014685 	.word	0x08014685
 8014670:	0801468d 	.word	0x0801468d
 8014674:	08014695 	.word	0x08014695
 8014678:	0801469d 	.word	0x0801469d
 801467c:	080146a5 	.word	0x080146a5
 8014680:	080146ad 	.word	0x080146ad
 8014684:	2300      	movs	r3, #0
 8014686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801468a:	e1ec      	b.n	8014a66 <UART_SetConfig+0x5a6>
 801468c:	2304      	movs	r3, #4
 801468e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014692:	e1e8      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014694:	2308      	movs	r3, #8
 8014696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801469a:	e1e4      	b.n	8014a66 <UART_SetConfig+0x5a6>
 801469c:	2310      	movs	r3, #16
 801469e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146a2:	e1e0      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80146a4:	2320      	movs	r3, #32
 80146a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146aa:	e1dc      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80146ac:	2340      	movs	r3, #64	; 0x40
 80146ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146b2:	e1d8      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80146b4:	2380      	movs	r3, #128	; 0x80
 80146b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146ba:	e1d4      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	4a4f      	ldr	r2, [pc, #316]	; (8014800 <UART_SetConfig+0x340>)
 80146c2:	4293      	cmp	r3, r2
 80146c4:	d130      	bne.n	8014728 <UART_SetConfig+0x268>
 80146c6:	4b4c      	ldr	r3, [pc, #304]	; (80147f8 <UART_SetConfig+0x338>)
 80146c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146ca:	f003 0307 	and.w	r3, r3, #7
 80146ce:	2b05      	cmp	r3, #5
 80146d0:	d826      	bhi.n	8014720 <UART_SetConfig+0x260>
 80146d2:	a201      	add	r2, pc, #4	; (adr r2, 80146d8 <UART_SetConfig+0x218>)
 80146d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146d8:	080146f1 	.word	0x080146f1
 80146dc:	080146f9 	.word	0x080146f9
 80146e0:	08014701 	.word	0x08014701
 80146e4:	08014709 	.word	0x08014709
 80146e8:	08014711 	.word	0x08014711
 80146ec:	08014719 	.word	0x08014719
 80146f0:	2300      	movs	r3, #0
 80146f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146f6:	e1b6      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80146f8:	2304      	movs	r3, #4
 80146fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80146fe:	e1b2      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014700:	2308      	movs	r3, #8
 8014702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014706:	e1ae      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014708:	2310      	movs	r3, #16
 801470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801470e:	e1aa      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014710:	2320      	movs	r3, #32
 8014712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014716:	e1a6      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014718:	2340      	movs	r3, #64	; 0x40
 801471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801471e:	e1a2      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014720:	2380      	movs	r3, #128	; 0x80
 8014722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014726:	e19e      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	4a35      	ldr	r2, [pc, #212]	; (8014804 <UART_SetConfig+0x344>)
 801472e:	4293      	cmp	r3, r2
 8014730:	d130      	bne.n	8014794 <UART_SetConfig+0x2d4>
 8014732:	4b31      	ldr	r3, [pc, #196]	; (80147f8 <UART_SetConfig+0x338>)
 8014734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014736:	f003 0307 	and.w	r3, r3, #7
 801473a:	2b05      	cmp	r3, #5
 801473c:	d826      	bhi.n	801478c <UART_SetConfig+0x2cc>
 801473e:	a201      	add	r2, pc, #4	; (adr r2, 8014744 <UART_SetConfig+0x284>)
 8014740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014744:	0801475d 	.word	0x0801475d
 8014748:	08014765 	.word	0x08014765
 801474c:	0801476d 	.word	0x0801476d
 8014750:	08014775 	.word	0x08014775
 8014754:	0801477d 	.word	0x0801477d
 8014758:	08014785 	.word	0x08014785
 801475c:	2300      	movs	r3, #0
 801475e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014762:	e180      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014764:	2304      	movs	r3, #4
 8014766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801476a:	e17c      	b.n	8014a66 <UART_SetConfig+0x5a6>
 801476c:	2308      	movs	r3, #8
 801476e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014772:	e178      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014774:	2310      	movs	r3, #16
 8014776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801477a:	e174      	b.n	8014a66 <UART_SetConfig+0x5a6>
 801477c:	2320      	movs	r3, #32
 801477e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014782:	e170      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014784:	2340      	movs	r3, #64	; 0x40
 8014786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801478a:	e16c      	b.n	8014a66 <UART_SetConfig+0x5a6>
 801478c:	2380      	movs	r3, #128	; 0x80
 801478e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014792:	e168      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	4a1b      	ldr	r2, [pc, #108]	; (8014808 <UART_SetConfig+0x348>)
 801479a:	4293      	cmp	r3, r2
 801479c:	d142      	bne.n	8014824 <UART_SetConfig+0x364>
 801479e:	4b16      	ldr	r3, [pc, #88]	; (80147f8 <UART_SetConfig+0x338>)
 80147a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147a2:	f003 0307 	and.w	r3, r3, #7
 80147a6:	2b05      	cmp	r3, #5
 80147a8:	d838      	bhi.n	801481c <UART_SetConfig+0x35c>
 80147aa:	a201      	add	r2, pc, #4	; (adr r2, 80147b0 <UART_SetConfig+0x2f0>)
 80147ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147b0:	080147c9 	.word	0x080147c9
 80147b4:	080147d1 	.word	0x080147d1
 80147b8:	080147d9 	.word	0x080147d9
 80147bc:	080147e1 	.word	0x080147e1
 80147c0:	0801480d 	.word	0x0801480d
 80147c4:	08014815 	.word	0x08014815
 80147c8:	2300      	movs	r3, #0
 80147ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147ce:	e14a      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80147d0:	2304      	movs	r3, #4
 80147d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147d6:	e146      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80147d8:	2308      	movs	r3, #8
 80147da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147de:	e142      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80147e0:	2310      	movs	r3, #16
 80147e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80147e6:	e13e      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80147e8:	cfff69f3 	.word	0xcfff69f3
 80147ec:	58000c00 	.word	0x58000c00
 80147f0:	11fff4ff 	.word	0x11fff4ff
 80147f4:	40011000 	.word	0x40011000
 80147f8:	58024400 	.word	0x58024400
 80147fc:	40004400 	.word	0x40004400
 8014800:	40004800 	.word	0x40004800
 8014804:	40004c00 	.word	0x40004c00
 8014808:	40005000 	.word	0x40005000
 801480c:	2320      	movs	r3, #32
 801480e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014812:	e128      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014814:	2340      	movs	r3, #64	; 0x40
 8014816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801481a:	e124      	b.n	8014a66 <UART_SetConfig+0x5a6>
 801481c:	2380      	movs	r3, #128	; 0x80
 801481e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014822:	e120      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014824:	697b      	ldr	r3, [r7, #20]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	4acb      	ldr	r2, [pc, #812]	; (8014b58 <UART_SetConfig+0x698>)
 801482a:	4293      	cmp	r3, r2
 801482c:	d176      	bne.n	801491c <UART_SetConfig+0x45c>
 801482e:	4bcb      	ldr	r3, [pc, #812]	; (8014b5c <UART_SetConfig+0x69c>)
 8014830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014836:	2b28      	cmp	r3, #40	; 0x28
 8014838:	d86c      	bhi.n	8014914 <UART_SetConfig+0x454>
 801483a:	a201      	add	r2, pc, #4	; (adr r2, 8014840 <UART_SetConfig+0x380>)
 801483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014840:	080148e5 	.word	0x080148e5
 8014844:	08014915 	.word	0x08014915
 8014848:	08014915 	.word	0x08014915
 801484c:	08014915 	.word	0x08014915
 8014850:	08014915 	.word	0x08014915
 8014854:	08014915 	.word	0x08014915
 8014858:	08014915 	.word	0x08014915
 801485c:	08014915 	.word	0x08014915
 8014860:	080148ed 	.word	0x080148ed
 8014864:	08014915 	.word	0x08014915
 8014868:	08014915 	.word	0x08014915
 801486c:	08014915 	.word	0x08014915
 8014870:	08014915 	.word	0x08014915
 8014874:	08014915 	.word	0x08014915
 8014878:	08014915 	.word	0x08014915
 801487c:	08014915 	.word	0x08014915
 8014880:	080148f5 	.word	0x080148f5
 8014884:	08014915 	.word	0x08014915
 8014888:	08014915 	.word	0x08014915
 801488c:	08014915 	.word	0x08014915
 8014890:	08014915 	.word	0x08014915
 8014894:	08014915 	.word	0x08014915
 8014898:	08014915 	.word	0x08014915
 801489c:	08014915 	.word	0x08014915
 80148a0:	080148fd 	.word	0x080148fd
 80148a4:	08014915 	.word	0x08014915
 80148a8:	08014915 	.word	0x08014915
 80148ac:	08014915 	.word	0x08014915
 80148b0:	08014915 	.word	0x08014915
 80148b4:	08014915 	.word	0x08014915
 80148b8:	08014915 	.word	0x08014915
 80148bc:	08014915 	.word	0x08014915
 80148c0:	08014905 	.word	0x08014905
 80148c4:	08014915 	.word	0x08014915
 80148c8:	08014915 	.word	0x08014915
 80148cc:	08014915 	.word	0x08014915
 80148d0:	08014915 	.word	0x08014915
 80148d4:	08014915 	.word	0x08014915
 80148d8:	08014915 	.word	0x08014915
 80148dc:	08014915 	.word	0x08014915
 80148e0:	0801490d 	.word	0x0801490d
 80148e4:	2301      	movs	r3, #1
 80148e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148ea:	e0bc      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80148ec:	2304      	movs	r3, #4
 80148ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148f2:	e0b8      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80148f4:	2308      	movs	r3, #8
 80148f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80148fa:	e0b4      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80148fc:	2310      	movs	r3, #16
 80148fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014902:	e0b0      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014904:	2320      	movs	r3, #32
 8014906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801490a:	e0ac      	b.n	8014a66 <UART_SetConfig+0x5a6>
 801490c:	2340      	movs	r3, #64	; 0x40
 801490e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014912:	e0a8      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014914:	2380      	movs	r3, #128	; 0x80
 8014916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801491a:	e0a4      	b.n	8014a66 <UART_SetConfig+0x5a6>
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	4a8f      	ldr	r2, [pc, #572]	; (8014b60 <UART_SetConfig+0x6a0>)
 8014922:	4293      	cmp	r3, r2
 8014924:	d130      	bne.n	8014988 <UART_SetConfig+0x4c8>
 8014926:	4b8d      	ldr	r3, [pc, #564]	; (8014b5c <UART_SetConfig+0x69c>)
 8014928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801492a:	f003 0307 	and.w	r3, r3, #7
 801492e:	2b05      	cmp	r3, #5
 8014930:	d826      	bhi.n	8014980 <UART_SetConfig+0x4c0>
 8014932:	a201      	add	r2, pc, #4	; (adr r2, 8014938 <UART_SetConfig+0x478>)
 8014934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014938:	08014951 	.word	0x08014951
 801493c:	08014959 	.word	0x08014959
 8014940:	08014961 	.word	0x08014961
 8014944:	08014969 	.word	0x08014969
 8014948:	08014971 	.word	0x08014971
 801494c:	08014979 	.word	0x08014979
 8014950:	2300      	movs	r3, #0
 8014952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014956:	e086      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014958:	2304      	movs	r3, #4
 801495a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801495e:	e082      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014960:	2308      	movs	r3, #8
 8014962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014966:	e07e      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014968:	2310      	movs	r3, #16
 801496a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801496e:	e07a      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014970:	2320      	movs	r3, #32
 8014972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014976:	e076      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014978:	2340      	movs	r3, #64	; 0x40
 801497a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801497e:	e072      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014980:	2380      	movs	r3, #128	; 0x80
 8014982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014986:	e06e      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014988:	697b      	ldr	r3, [r7, #20]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	4a75      	ldr	r2, [pc, #468]	; (8014b64 <UART_SetConfig+0x6a4>)
 801498e:	4293      	cmp	r3, r2
 8014990:	d130      	bne.n	80149f4 <UART_SetConfig+0x534>
 8014992:	4b72      	ldr	r3, [pc, #456]	; (8014b5c <UART_SetConfig+0x69c>)
 8014994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014996:	f003 0307 	and.w	r3, r3, #7
 801499a:	2b05      	cmp	r3, #5
 801499c:	d826      	bhi.n	80149ec <UART_SetConfig+0x52c>
 801499e:	a201      	add	r2, pc, #4	; (adr r2, 80149a4 <UART_SetConfig+0x4e4>)
 80149a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149a4:	080149bd 	.word	0x080149bd
 80149a8:	080149c5 	.word	0x080149c5
 80149ac:	080149cd 	.word	0x080149cd
 80149b0:	080149d5 	.word	0x080149d5
 80149b4:	080149dd 	.word	0x080149dd
 80149b8:	080149e5 	.word	0x080149e5
 80149bc:	2300      	movs	r3, #0
 80149be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149c2:	e050      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80149c4:	2304      	movs	r3, #4
 80149c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149ca:	e04c      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80149cc:	2308      	movs	r3, #8
 80149ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149d2:	e048      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80149d4:	2310      	movs	r3, #16
 80149d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149da:	e044      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80149dc:	2320      	movs	r3, #32
 80149de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149e2:	e040      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80149e4:	2340      	movs	r3, #64	; 0x40
 80149e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149ea:	e03c      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80149ec:	2380      	movs	r3, #128	; 0x80
 80149ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80149f2:	e038      	b.n	8014a66 <UART_SetConfig+0x5a6>
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	4a5b      	ldr	r2, [pc, #364]	; (8014b68 <UART_SetConfig+0x6a8>)
 80149fa:	4293      	cmp	r3, r2
 80149fc:	d130      	bne.n	8014a60 <UART_SetConfig+0x5a0>
 80149fe:	4b57      	ldr	r3, [pc, #348]	; (8014b5c <UART_SetConfig+0x69c>)
 8014a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a02:	f003 0307 	and.w	r3, r3, #7
 8014a06:	2b05      	cmp	r3, #5
 8014a08:	d826      	bhi.n	8014a58 <UART_SetConfig+0x598>
 8014a0a:	a201      	add	r2, pc, #4	; (adr r2, 8014a10 <UART_SetConfig+0x550>)
 8014a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a10:	08014a29 	.word	0x08014a29
 8014a14:	08014a31 	.word	0x08014a31
 8014a18:	08014a39 	.word	0x08014a39
 8014a1c:	08014a41 	.word	0x08014a41
 8014a20:	08014a49 	.word	0x08014a49
 8014a24:	08014a51 	.word	0x08014a51
 8014a28:	2302      	movs	r3, #2
 8014a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a2e:	e01a      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014a30:	2304      	movs	r3, #4
 8014a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a36:	e016      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014a38:	2308      	movs	r3, #8
 8014a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a3e:	e012      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014a40:	2310      	movs	r3, #16
 8014a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a46:	e00e      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014a48:	2320      	movs	r3, #32
 8014a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a4e:	e00a      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014a50:	2340      	movs	r3, #64	; 0x40
 8014a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a56:	e006      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014a58:	2380      	movs	r3, #128	; 0x80
 8014a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014a5e:	e002      	b.n	8014a66 <UART_SetConfig+0x5a6>
 8014a60:	2380      	movs	r3, #128	; 0x80
 8014a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	4a3f      	ldr	r2, [pc, #252]	; (8014b68 <UART_SetConfig+0x6a8>)
 8014a6c:	4293      	cmp	r3, r2
 8014a6e:	f040 80f8 	bne.w	8014c62 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014a72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014a76:	2b20      	cmp	r3, #32
 8014a78:	dc46      	bgt.n	8014b08 <UART_SetConfig+0x648>
 8014a7a:	2b02      	cmp	r3, #2
 8014a7c:	f2c0 8082 	blt.w	8014b84 <UART_SetConfig+0x6c4>
 8014a80:	3b02      	subs	r3, #2
 8014a82:	2b1e      	cmp	r3, #30
 8014a84:	d87e      	bhi.n	8014b84 <UART_SetConfig+0x6c4>
 8014a86:	a201      	add	r2, pc, #4	; (adr r2, 8014a8c <UART_SetConfig+0x5cc>)
 8014a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a8c:	08014b0f 	.word	0x08014b0f
 8014a90:	08014b85 	.word	0x08014b85
 8014a94:	08014b17 	.word	0x08014b17
 8014a98:	08014b85 	.word	0x08014b85
 8014a9c:	08014b85 	.word	0x08014b85
 8014aa0:	08014b85 	.word	0x08014b85
 8014aa4:	08014b27 	.word	0x08014b27
 8014aa8:	08014b85 	.word	0x08014b85
 8014aac:	08014b85 	.word	0x08014b85
 8014ab0:	08014b85 	.word	0x08014b85
 8014ab4:	08014b85 	.word	0x08014b85
 8014ab8:	08014b85 	.word	0x08014b85
 8014abc:	08014b85 	.word	0x08014b85
 8014ac0:	08014b85 	.word	0x08014b85
 8014ac4:	08014b37 	.word	0x08014b37
 8014ac8:	08014b85 	.word	0x08014b85
 8014acc:	08014b85 	.word	0x08014b85
 8014ad0:	08014b85 	.word	0x08014b85
 8014ad4:	08014b85 	.word	0x08014b85
 8014ad8:	08014b85 	.word	0x08014b85
 8014adc:	08014b85 	.word	0x08014b85
 8014ae0:	08014b85 	.word	0x08014b85
 8014ae4:	08014b85 	.word	0x08014b85
 8014ae8:	08014b85 	.word	0x08014b85
 8014aec:	08014b85 	.word	0x08014b85
 8014af0:	08014b85 	.word	0x08014b85
 8014af4:	08014b85 	.word	0x08014b85
 8014af8:	08014b85 	.word	0x08014b85
 8014afc:	08014b85 	.word	0x08014b85
 8014b00:	08014b85 	.word	0x08014b85
 8014b04:	08014b77 	.word	0x08014b77
 8014b08:	2b40      	cmp	r3, #64	; 0x40
 8014b0a:	d037      	beq.n	8014b7c <UART_SetConfig+0x6bc>
 8014b0c:	e03a      	b.n	8014b84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8014b0e:	f7fb fc17 	bl	8010340 <HAL_RCCEx_GetD3PCLK1Freq>
 8014b12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014b14:	e03c      	b.n	8014b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f7fb fc26 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014b24:	e034      	b.n	8014b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014b26:	f107 0318 	add.w	r3, r7, #24
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7fb fd72 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014b30:	69fb      	ldr	r3, [r7, #28]
 8014b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014b34:	e02c      	b.n	8014b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014b36:	4b09      	ldr	r3, [pc, #36]	; (8014b5c <UART_SetConfig+0x69c>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	f003 0320 	and.w	r3, r3, #32
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d016      	beq.n	8014b70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014b42:	4b06      	ldr	r3, [pc, #24]	; (8014b5c <UART_SetConfig+0x69c>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	08db      	lsrs	r3, r3, #3
 8014b48:	f003 0303 	and.w	r3, r3, #3
 8014b4c:	4a07      	ldr	r2, [pc, #28]	; (8014b6c <UART_SetConfig+0x6ac>)
 8014b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8014b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014b54:	e01c      	b.n	8014b90 <UART_SetConfig+0x6d0>
 8014b56:	bf00      	nop
 8014b58:	40011400 	.word	0x40011400
 8014b5c:	58024400 	.word	0x58024400
 8014b60:	40007800 	.word	0x40007800
 8014b64:	40007c00 	.word	0x40007c00
 8014b68:	58000c00 	.word	0x58000c00
 8014b6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014b70:	4b9d      	ldr	r3, [pc, #628]	; (8014de8 <UART_SetConfig+0x928>)
 8014b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014b74:	e00c      	b.n	8014b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014b76:	4b9d      	ldr	r3, [pc, #628]	; (8014dec <UART_SetConfig+0x92c>)
 8014b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014b7a:	e009      	b.n	8014b90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014b82:	e005      	b.n	8014b90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014b84:	2300      	movs	r3, #0
 8014b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014b88:	2301      	movs	r3, #1
 8014b8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014b8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	f000 81de 	beq.w	8014f54 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9c:	4a94      	ldr	r2, [pc, #592]	; (8014df0 <UART_SetConfig+0x930>)
 8014b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ba2:	461a      	mov	r2, r3
 8014ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8014baa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	685a      	ldr	r2, [r3, #4]
 8014bb0:	4613      	mov	r3, r2
 8014bb2:	005b      	lsls	r3, r3, #1
 8014bb4:	4413      	add	r3, r2
 8014bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d305      	bcc.n	8014bc8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	685b      	ldr	r3, [r3, #4]
 8014bc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	d903      	bls.n	8014bd0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8014bc8:	2301      	movs	r3, #1
 8014bca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014bce:	e1c1      	b.n	8014f54 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	60bb      	str	r3, [r7, #8]
 8014bd6:	60fa      	str	r2, [r7, #12]
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bdc:	4a84      	ldr	r2, [pc, #528]	; (8014df0 <UART_SetConfig+0x930>)
 8014bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	2200      	movs	r2, #0
 8014be6:	603b      	str	r3, [r7, #0]
 8014be8:	607a      	str	r2, [r7, #4]
 8014bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014bee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014bf2:	f7eb fb75 	bl	80002e0 <__aeabi_uldivmod>
 8014bf6:	4602      	mov	r2, r0
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	4610      	mov	r0, r2
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	f04f 0200 	mov.w	r2, #0
 8014c02:	f04f 0300 	mov.w	r3, #0
 8014c06:	020b      	lsls	r3, r1, #8
 8014c08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014c0c:	0202      	lsls	r2, r0, #8
 8014c0e:	6979      	ldr	r1, [r7, #20]
 8014c10:	6849      	ldr	r1, [r1, #4]
 8014c12:	0849      	lsrs	r1, r1, #1
 8014c14:	2000      	movs	r0, #0
 8014c16:	460c      	mov	r4, r1
 8014c18:	4605      	mov	r5, r0
 8014c1a:	eb12 0804 	adds.w	r8, r2, r4
 8014c1e:	eb43 0905 	adc.w	r9, r3, r5
 8014c22:	697b      	ldr	r3, [r7, #20]
 8014c24:	685b      	ldr	r3, [r3, #4]
 8014c26:	2200      	movs	r2, #0
 8014c28:	469a      	mov	sl, r3
 8014c2a:	4693      	mov	fp, r2
 8014c2c:	4652      	mov	r2, sl
 8014c2e:	465b      	mov	r3, fp
 8014c30:	4640      	mov	r0, r8
 8014c32:	4649      	mov	r1, r9
 8014c34:	f7eb fb54 	bl	80002e0 <__aeabi_uldivmod>
 8014c38:	4602      	mov	r2, r0
 8014c3a:	460b      	mov	r3, r1
 8014c3c:	4613      	mov	r3, r2
 8014c3e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014c46:	d308      	bcc.n	8014c5a <UART_SetConfig+0x79a>
 8014c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014c4e:	d204      	bcs.n	8014c5a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8014c50:	697b      	ldr	r3, [r7, #20]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c56:	60da      	str	r2, [r3, #12]
 8014c58:	e17c      	b.n	8014f54 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014c60:	e178      	b.n	8014f54 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014c62:	697b      	ldr	r3, [r7, #20]
 8014c64:	69db      	ldr	r3, [r3, #28]
 8014c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c6a:	f040 80c5 	bne.w	8014df8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8014c6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014c72:	2b20      	cmp	r3, #32
 8014c74:	dc48      	bgt.n	8014d08 <UART_SetConfig+0x848>
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	db7b      	blt.n	8014d72 <UART_SetConfig+0x8b2>
 8014c7a:	2b20      	cmp	r3, #32
 8014c7c:	d879      	bhi.n	8014d72 <UART_SetConfig+0x8b2>
 8014c7e:	a201      	add	r2, pc, #4	; (adr r2, 8014c84 <UART_SetConfig+0x7c4>)
 8014c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c84:	08014d0f 	.word	0x08014d0f
 8014c88:	08014d17 	.word	0x08014d17
 8014c8c:	08014d73 	.word	0x08014d73
 8014c90:	08014d73 	.word	0x08014d73
 8014c94:	08014d1f 	.word	0x08014d1f
 8014c98:	08014d73 	.word	0x08014d73
 8014c9c:	08014d73 	.word	0x08014d73
 8014ca0:	08014d73 	.word	0x08014d73
 8014ca4:	08014d2f 	.word	0x08014d2f
 8014ca8:	08014d73 	.word	0x08014d73
 8014cac:	08014d73 	.word	0x08014d73
 8014cb0:	08014d73 	.word	0x08014d73
 8014cb4:	08014d73 	.word	0x08014d73
 8014cb8:	08014d73 	.word	0x08014d73
 8014cbc:	08014d73 	.word	0x08014d73
 8014cc0:	08014d73 	.word	0x08014d73
 8014cc4:	08014d3f 	.word	0x08014d3f
 8014cc8:	08014d73 	.word	0x08014d73
 8014ccc:	08014d73 	.word	0x08014d73
 8014cd0:	08014d73 	.word	0x08014d73
 8014cd4:	08014d73 	.word	0x08014d73
 8014cd8:	08014d73 	.word	0x08014d73
 8014cdc:	08014d73 	.word	0x08014d73
 8014ce0:	08014d73 	.word	0x08014d73
 8014ce4:	08014d73 	.word	0x08014d73
 8014ce8:	08014d73 	.word	0x08014d73
 8014cec:	08014d73 	.word	0x08014d73
 8014cf0:	08014d73 	.word	0x08014d73
 8014cf4:	08014d73 	.word	0x08014d73
 8014cf8:	08014d73 	.word	0x08014d73
 8014cfc:	08014d73 	.word	0x08014d73
 8014d00:	08014d73 	.word	0x08014d73
 8014d04:	08014d65 	.word	0x08014d65
 8014d08:	2b40      	cmp	r3, #64	; 0x40
 8014d0a:	d02e      	beq.n	8014d6a <UART_SetConfig+0x8aa>
 8014d0c:	e031      	b.n	8014d72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014d0e:	f7f9 fb1f 	bl	800e350 <HAL_RCC_GetPCLK1Freq>
 8014d12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014d14:	e033      	b.n	8014d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014d16:	f7f9 fb31 	bl	800e37c <HAL_RCC_GetPCLK2Freq>
 8014d1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014d1c:	e02f      	b.n	8014d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7fb fb22 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014d2c:	e027      	b.n	8014d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014d2e:	f107 0318 	add.w	r3, r7, #24
 8014d32:	4618      	mov	r0, r3
 8014d34:	f7fb fc6e 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014d38:	69fb      	ldr	r3, [r7, #28]
 8014d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014d3c:	e01f      	b.n	8014d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014d3e:	4b2d      	ldr	r3, [pc, #180]	; (8014df4 <UART_SetConfig+0x934>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	f003 0320 	and.w	r3, r3, #32
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d009      	beq.n	8014d5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014d4a:	4b2a      	ldr	r3, [pc, #168]	; (8014df4 <UART_SetConfig+0x934>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	08db      	lsrs	r3, r3, #3
 8014d50:	f003 0303 	and.w	r3, r3, #3
 8014d54:	4a24      	ldr	r2, [pc, #144]	; (8014de8 <UART_SetConfig+0x928>)
 8014d56:	fa22 f303 	lsr.w	r3, r2, r3
 8014d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014d5c:	e00f      	b.n	8014d7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8014d5e:	4b22      	ldr	r3, [pc, #136]	; (8014de8 <UART_SetConfig+0x928>)
 8014d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014d62:	e00c      	b.n	8014d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014d64:	4b21      	ldr	r3, [pc, #132]	; (8014dec <UART_SetConfig+0x92c>)
 8014d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014d68:	e009      	b.n	8014d7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014d70:	e005      	b.n	8014d7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014d72:	2300      	movs	r3, #0
 8014d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014d76:	2301      	movs	r3, #1
 8014d78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014d7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	f000 80e7 	beq.w	8014f54 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d8a:	4a19      	ldr	r2, [pc, #100]	; (8014df0 <UART_SetConfig+0x930>)
 8014d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014d90:	461a      	mov	r2, r3
 8014d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8014d98:	005a      	lsls	r2, r3, #1
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	085b      	lsrs	r3, r3, #1
 8014da0:	441a      	add	r2, r3
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8014daa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dae:	2b0f      	cmp	r3, #15
 8014db0:	d916      	bls.n	8014de0 <UART_SetConfig+0x920>
 8014db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014db8:	d212      	bcs.n	8014de0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	f023 030f 	bic.w	r3, r3, #15
 8014dc2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc6:	085b      	lsrs	r3, r3, #1
 8014dc8:	b29b      	uxth	r3, r3
 8014dca:	f003 0307 	and.w	r3, r3, #7
 8014dce:	b29a      	uxth	r2, r3
 8014dd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014dd2:	4313      	orrs	r3, r2
 8014dd4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8014dd6:	697b      	ldr	r3, [r7, #20]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014ddc:	60da      	str	r2, [r3, #12]
 8014dde:	e0b9      	b.n	8014f54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014de0:	2301      	movs	r3, #1
 8014de2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014de6:	e0b5      	b.n	8014f54 <UART_SetConfig+0xa94>
 8014de8:	03d09000 	.word	0x03d09000
 8014dec:	003d0900 	.word	0x003d0900
 8014df0:	0801a96c 	.word	0x0801a96c
 8014df4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8014df8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014dfc:	2b20      	cmp	r3, #32
 8014dfe:	dc49      	bgt.n	8014e94 <UART_SetConfig+0x9d4>
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	db7c      	blt.n	8014efe <UART_SetConfig+0xa3e>
 8014e04:	2b20      	cmp	r3, #32
 8014e06:	d87a      	bhi.n	8014efe <UART_SetConfig+0xa3e>
 8014e08:	a201      	add	r2, pc, #4	; (adr r2, 8014e10 <UART_SetConfig+0x950>)
 8014e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e0e:	bf00      	nop
 8014e10:	08014e9b 	.word	0x08014e9b
 8014e14:	08014ea3 	.word	0x08014ea3
 8014e18:	08014eff 	.word	0x08014eff
 8014e1c:	08014eff 	.word	0x08014eff
 8014e20:	08014eab 	.word	0x08014eab
 8014e24:	08014eff 	.word	0x08014eff
 8014e28:	08014eff 	.word	0x08014eff
 8014e2c:	08014eff 	.word	0x08014eff
 8014e30:	08014ebb 	.word	0x08014ebb
 8014e34:	08014eff 	.word	0x08014eff
 8014e38:	08014eff 	.word	0x08014eff
 8014e3c:	08014eff 	.word	0x08014eff
 8014e40:	08014eff 	.word	0x08014eff
 8014e44:	08014eff 	.word	0x08014eff
 8014e48:	08014eff 	.word	0x08014eff
 8014e4c:	08014eff 	.word	0x08014eff
 8014e50:	08014ecb 	.word	0x08014ecb
 8014e54:	08014eff 	.word	0x08014eff
 8014e58:	08014eff 	.word	0x08014eff
 8014e5c:	08014eff 	.word	0x08014eff
 8014e60:	08014eff 	.word	0x08014eff
 8014e64:	08014eff 	.word	0x08014eff
 8014e68:	08014eff 	.word	0x08014eff
 8014e6c:	08014eff 	.word	0x08014eff
 8014e70:	08014eff 	.word	0x08014eff
 8014e74:	08014eff 	.word	0x08014eff
 8014e78:	08014eff 	.word	0x08014eff
 8014e7c:	08014eff 	.word	0x08014eff
 8014e80:	08014eff 	.word	0x08014eff
 8014e84:	08014eff 	.word	0x08014eff
 8014e88:	08014eff 	.word	0x08014eff
 8014e8c:	08014eff 	.word	0x08014eff
 8014e90:	08014ef1 	.word	0x08014ef1
 8014e94:	2b40      	cmp	r3, #64	; 0x40
 8014e96:	d02e      	beq.n	8014ef6 <UART_SetConfig+0xa36>
 8014e98:	e031      	b.n	8014efe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014e9a:	f7f9 fa59 	bl	800e350 <HAL_RCC_GetPCLK1Freq>
 8014e9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014ea0:	e033      	b.n	8014f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014ea2:	f7f9 fa6b 	bl	800e37c <HAL_RCC_GetPCLK2Freq>
 8014ea6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014ea8:	e02f      	b.n	8014f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7fb fa5c 	bl	801036c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014eb8:	e027      	b.n	8014f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014eba:	f107 0318 	add.w	r3, r7, #24
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7fb fba8 	bl	8010614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014ec4:	69fb      	ldr	r3, [r7, #28]
 8014ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014ec8:	e01f      	b.n	8014f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014eca:	4b2d      	ldr	r3, [pc, #180]	; (8014f80 <UART_SetConfig+0xac0>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	f003 0320 	and.w	r3, r3, #32
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d009      	beq.n	8014eea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014ed6:	4b2a      	ldr	r3, [pc, #168]	; (8014f80 <UART_SetConfig+0xac0>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	08db      	lsrs	r3, r3, #3
 8014edc:	f003 0303 	and.w	r3, r3, #3
 8014ee0:	4a28      	ldr	r2, [pc, #160]	; (8014f84 <UART_SetConfig+0xac4>)
 8014ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8014ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014ee8:	e00f      	b.n	8014f0a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8014eea:	4b26      	ldr	r3, [pc, #152]	; (8014f84 <UART_SetConfig+0xac4>)
 8014eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014eee:	e00c      	b.n	8014f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014ef0:	4b25      	ldr	r3, [pc, #148]	; (8014f88 <UART_SetConfig+0xac8>)
 8014ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014ef4:	e009      	b.n	8014f0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014efc:	e005      	b.n	8014f0a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8014efe:	2300      	movs	r3, #0
 8014f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014f02:	2301      	movs	r3, #1
 8014f04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014f08:	bf00      	nop
    }

    if (pclk != 0U)
 8014f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d021      	beq.n	8014f54 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f14:	4a1d      	ldr	r2, [pc, #116]	; (8014f8c <UART_SetConfig+0xacc>)
 8014f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	685b      	ldr	r3, [r3, #4]
 8014f26:	085b      	lsrs	r3, r3, #1
 8014f28:	441a      	add	r2, r3
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f36:	2b0f      	cmp	r3, #15
 8014f38:	d909      	bls.n	8014f4e <UART_SetConfig+0xa8e>
 8014f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f40:	d205      	bcs.n	8014f4e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f44:	b29a      	uxth	r2, r3
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	60da      	str	r2, [r3, #12]
 8014f4c:	e002      	b.n	8014f54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014f4e:	2301      	movs	r3, #1
 8014f50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	2201      	movs	r2, #1
 8014f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	2201      	movs	r2, #1
 8014f60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014f64:	697b      	ldr	r3, [r7, #20]
 8014f66:	2200      	movs	r2, #0
 8014f68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8014f70:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3748      	adds	r7, #72	; 0x48
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014f7e:	bf00      	nop
 8014f80:	58024400 	.word	0x58024400
 8014f84:	03d09000 	.word	0x03d09000
 8014f88:	003d0900 	.word	0x003d0900
 8014f8c:	0801a96c 	.word	0x0801a96c

08014f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014f90:	b480      	push	{r7}
 8014f92:	b083      	sub	sp, #12
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f9c:	f003 0308 	and.w	r3, r3, #8
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d00a      	beq.n	8014fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	685b      	ldr	r3, [r3, #4]
 8014faa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	430a      	orrs	r2, r1
 8014fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fbe:	f003 0301 	and.w	r3, r3, #1
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d00a      	beq.n	8014fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	685b      	ldr	r3, [r3, #4]
 8014fcc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	430a      	orrs	r2, r1
 8014fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fe0:	f003 0302 	and.w	r3, r3, #2
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d00a      	beq.n	8014ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	685b      	ldr	r3, [r3, #4]
 8014fee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	430a      	orrs	r2, r1
 8014ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015002:	f003 0304 	and.w	r3, r3, #4
 8015006:	2b00      	cmp	r3, #0
 8015008:	d00a      	beq.n	8015020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	430a      	orrs	r2, r1
 801501e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015024:	f003 0310 	and.w	r3, r3, #16
 8015028:	2b00      	cmp	r3, #0
 801502a:	d00a      	beq.n	8015042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	689b      	ldr	r3, [r3, #8]
 8015032:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	430a      	orrs	r2, r1
 8015040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015046:	f003 0320 	and.w	r3, r3, #32
 801504a:	2b00      	cmp	r3, #0
 801504c:	d00a      	beq.n	8015064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	689b      	ldr	r3, [r3, #8]
 8015054:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	430a      	orrs	r2, r1
 8015062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801506c:	2b00      	cmp	r3, #0
 801506e:	d01a      	beq.n	80150a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	430a      	orrs	r2, r1
 8015084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801508a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801508e:	d10a      	bne.n	80150a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	685b      	ldr	r3, [r3, #4]
 8015096:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	430a      	orrs	r2, r1
 80150a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d00a      	beq.n	80150c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	430a      	orrs	r2, r1
 80150c6:	605a      	str	r2, [r3, #4]
  }
}
 80150c8:	bf00      	nop
 80150ca:	370c      	adds	r7, #12
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr

080150d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b098      	sub	sp, #96	; 0x60
 80150d8:	af02      	add	r7, sp, #8
 80150da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2200      	movs	r2, #0
 80150e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80150e4:	f7f0 f830 	bl	8005148 <HAL_GetTick>
 80150e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	f003 0308 	and.w	r3, r3, #8
 80150f4:	2b08      	cmp	r3, #8
 80150f6:	d12f      	bne.n	8015158 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80150f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80150fc:	9300      	str	r3, [sp, #0]
 80150fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015100:	2200      	movs	r2, #0
 8015102:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015106:	6878      	ldr	r0, [r7, #4]
 8015108:	f000 f88e 	bl	8015228 <UART_WaitOnFlagUntilTimeout>
 801510c:	4603      	mov	r3, r0
 801510e:	2b00      	cmp	r3, #0
 8015110:	d022      	beq.n	8015158 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801511a:	e853 3f00 	ldrex	r3, [r3]
 801511e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015126:	653b      	str	r3, [r7, #80]	; 0x50
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	461a      	mov	r2, r3
 801512e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015130:	647b      	str	r3, [r7, #68]	; 0x44
 8015132:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015134:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015138:	e841 2300 	strex	r3, r2, [r1]
 801513c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801513e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015140:	2b00      	cmp	r3, #0
 8015142:	d1e6      	bne.n	8015112 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2220      	movs	r2, #32
 8015148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2200      	movs	r2, #0
 8015150:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015154:	2303      	movs	r3, #3
 8015156:	e063      	b.n	8015220 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	f003 0304 	and.w	r3, r3, #4
 8015162:	2b04      	cmp	r3, #4
 8015164:	d149      	bne.n	80151fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015166:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801516a:	9300      	str	r3, [sp, #0]
 801516c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801516e:	2200      	movs	r2, #0
 8015170:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f000 f857 	bl	8015228 <UART_WaitOnFlagUntilTimeout>
 801517a:	4603      	mov	r3, r0
 801517c:	2b00      	cmp	r3, #0
 801517e:	d03c      	beq.n	80151fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015188:	e853 3f00 	ldrex	r3, [r3]
 801518c:	623b      	str	r3, [r7, #32]
   return(result);
 801518e:	6a3b      	ldr	r3, [r7, #32]
 8015190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	461a      	mov	r2, r3
 801519c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801519e:	633b      	str	r3, [r7, #48]	; 0x30
 80151a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80151a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151a6:	e841 2300 	strex	r3, r2, [r1]
 80151aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80151ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d1e6      	bne.n	8015180 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	3308      	adds	r3, #8
 80151b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	e853 3f00 	ldrex	r3, [r3]
 80151c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	f023 0301 	bic.w	r3, r3, #1
 80151c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	3308      	adds	r3, #8
 80151d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80151d2:	61fa      	str	r2, [r7, #28]
 80151d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151d6:	69b9      	ldr	r1, [r7, #24]
 80151d8:	69fa      	ldr	r2, [r7, #28]
 80151da:	e841 2300 	strex	r3, r2, [r1]
 80151de:	617b      	str	r3, [r7, #20]
   return(result);
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d1e5      	bne.n	80151b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	2220      	movs	r2, #32
 80151ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2200      	movs	r2, #0
 80151f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80151f6:	2303      	movs	r3, #3
 80151f8:	e012      	b.n	8015220 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2220      	movs	r2, #32
 80151fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2220      	movs	r2, #32
 8015206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2200      	movs	r2, #0
 801520e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2200      	movs	r2, #0
 8015214:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2200      	movs	r2, #0
 801521a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801521e:	2300      	movs	r3, #0
}
 8015220:	4618      	mov	r0, r3
 8015222:	3758      	adds	r7, #88	; 0x58
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	603b      	str	r3, [r7, #0]
 8015234:	4613      	mov	r3, r2
 8015236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015238:	e04f      	b.n	80152da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801523a:	69bb      	ldr	r3, [r7, #24]
 801523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015240:	d04b      	beq.n	80152da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015242:	f7ef ff81 	bl	8005148 <HAL_GetTick>
 8015246:	4602      	mov	r2, r0
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	1ad3      	subs	r3, r2, r3
 801524c:	69ba      	ldr	r2, [r7, #24]
 801524e:	429a      	cmp	r2, r3
 8015250:	d302      	bcc.n	8015258 <UART_WaitOnFlagUntilTimeout+0x30>
 8015252:	69bb      	ldr	r3, [r7, #24]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d101      	bne.n	801525c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015258:	2303      	movs	r3, #3
 801525a:	e04e      	b.n	80152fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f003 0304 	and.w	r3, r3, #4
 8015266:	2b00      	cmp	r3, #0
 8015268:	d037      	beq.n	80152da <UART_WaitOnFlagUntilTimeout+0xb2>
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	2b80      	cmp	r3, #128	; 0x80
 801526e:	d034      	beq.n	80152da <UART_WaitOnFlagUntilTimeout+0xb2>
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	2b40      	cmp	r3, #64	; 0x40
 8015274:	d031      	beq.n	80152da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	69db      	ldr	r3, [r3, #28]
 801527c:	f003 0308 	and.w	r3, r3, #8
 8015280:	2b08      	cmp	r3, #8
 8015282:	d110      	bne.n	80152a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	2208      	movs	r2, #8
 801528a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801528c:	68f8      	ldr	r0, [r7, #12]
 801528e:	f000 f95b 	bl	8015548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2208      	movs	r2, #8
 8015296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	2200      	movs	r2, #0
 801529e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80152a2:	2301      	movs	r3, #1
 80152a4:	e029      	b.n	80152fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	69db      	ldr	r3, [r3, #28]
 80152ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80152b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80152b4:	d111      	bne.n	80152da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80152c0:	68f8      	ldr	r0, [r7, #12]
 80152c2:	f000 f941 	bl	8015548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	2220      	movs	r2, #32
 80152ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2200      	movs	r2, #0
 80152d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80152d6:	2303      	movs	r3, #3
 80152d8:	e00f      	b.n	80152fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	69da      	ldr	r2, [r3, #28]
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	4013      	ands	r3, r2
 80152e4:	68ba      	ldr	r2, [r7, #8]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	bf0c      	ite	eq
 80152ea:	2301      	moveq	r3, #1
 80152ec:	2300      	movne	r3, #0
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	461a      	mov	r2, r3
 80152f2:	79fb      	ldrb	r3, [r7, #7]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d0a0      	beq.n	801523a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80152f8:	2300      	movs	r3, #0
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3710      	adds	r7, #16
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
	...

08015304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015304:	b480      	push	{r7}
 8015306:	b0a3      	sub	sp, #140	; 0x8c
 8015308:	af00      	add	r7, sp, #0
 801530a:	60f8      	str	r0, [r7, #12]
 801530c:	60b9      	str	r1, [r7, #8]
 801530e:	4613      	mov	r3, r2
 8015310:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	68ba      	ldr	r2, [r7, #8]
 8015316:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	88fa      	ldrh	r2, [r7, #6]
 801531c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	88fa      	ldrh	r2, [r7, #6]
 8015324:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	2200      	movs	r2, #0
 801532c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	689b      	ldr	r3, [r3, #8]
 8015332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015336:	d10e      	bne.n	8015356 <UART_Start_Receive_IT+0x52>
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	691b      	ldr	r3, [r3, #16]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d105      	bne.n	801534c <UART_Start_Receive_IT+0x48>
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015346:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801534a:	e02d      	b.n	80153a8 <UART_Start_Receive_IT+0xa4>
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	22ff      	movs	r2, #255	; 0xff
 8015350:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015354:	e028      	b.n	80153a8 <UART_Start_Receive_IT+0xa4>
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	689b      	ldr	r3, [r3, #8]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d10d      	bne.n	801537a <UART_Start_Receive_IT+0x76>
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	691b      	ldr	r3, [r3, #16]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d104      	bne.n	8015370 <UART_Start_Receive_IT+0x6c>
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	22ff      	movs	r2, #255	; 0xff
 801536a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801536e:	e01b      	b.n	80153a8 <UART_Start_Receive_IT+0xa4>
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	227f      	movs	r2, #127	; 0x7f
 8015374:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015378:	e016      	b.n	80153a8 <UART_Start_Receive_IT+0xa4>
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	689b      	ldr	r3, [r3, #8]
 801537e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015382:	d10d      	bne.n	80153a0 <UART_Start_Receive_IT+0x9c>
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	691b      	ldr	r3, [r3, #16]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d104      	bne.n	8015396 <UART_Start_Receive_IT+0x92>
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	227f      	movs	r2, #127	; 0x7f
 8015390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015394:	e008      	b.n	80153a8 <UART_Start_Receive_IT+0xa4>
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	223f      	movs	r2, #63	; 0x3f
 801539a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801539e:	e003      	b.n	80153a8 <UART_Start_Receive_IT+0xa4>
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	2200      	movs	r2, #0
 80153a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	2200      	movs	r2, #0
 80153ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	2222      	movs	r2, #34	; 0x22
 80153b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	3308      	adds	r3, #8
 80153be:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80153c2:	e853 3f00 	ldrex	r3, [r3]
 80153c6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80153c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80153ca:	f043 0301 	orr.w	r3, r3, #1
 80153ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	3308      	adds	r3, #8
 80153d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80153dc:	673a      	str	r2, [r7, #112]	; 0x70
 80153de:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80153e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80153e4:	e841 2300 	strex	r3, r2, [r1]
 80153e8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80153ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d1e3      	bne.n	80153b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80153f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80153f8:	d14f      	bne.n	801549a <UART_Start_Receive_IT+0x196>
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015400:	88fa      	ldrh	r2, [r7, #6]
 8015402:	429a      	cmp	r2, r3
 8015404:	d349      	bcc.n	801549a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	689b      	ldr	r3, [r3, #8]
 801540a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801540e:	d107      	bne.n	8015420 <UART_Start_Receive_IT+0x11c>
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	691b      	ldr	r3, [r3, #16]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d103      	bne.n	8015420 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	4a47      	ldr	r2, [pc, #284]	; (8015538 <UART_Start_Receive_IT+0x234>)
 801541c:	675a      	str	r2, [r3, #116]	; 0x74
 801541e:	e002      	b.n	8015426 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	4a46      	ldr	r2, [pc, #280]	; (801553c <UART_Start_Receive_IT+0x238>)
 8015424:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	691b      	ldr	r3, [r3, #16]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d01a      	beq.n	8015464 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015436:	e853 3f00 	ldrex	r3, [r3]
 801543a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801543c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801543e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015442:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	461a      	mov	r2, r3
 801544c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015450:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015452:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015454:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015456:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015458:	e841 2300 	strex	r3, r2, [r1]
 801545c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801545e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015460:	2b00      	cmp	r3, #0
 8015462:	d1e4      	bne.n	801542e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	3308      	adds	r3, #8
 801546a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801546e:	e853 3f00 	ldrex	r3, [r3]
 8015472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801547a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	3308      	adds	r3, #8
 8015482:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015484:	64ba      	str	r2, [r7, #72]	; 0x48
 8015486:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015488:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801548a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801548c:	e841 2300 	strex	r3, r2, [r1]
 8015490:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1e5      	bne.n	8015464 <UART_Start_Receive_IT+0x160>
 8015498:	e046      	b.n	8015528 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	689b      	ldr	r3, [r3, #8]
 801549e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80154a2:	d107      	bne.n	80154b4 <UART_Start_Receive_IT+0x1b0>
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	691b      	ldr	r3, [r3, #16]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d103      	bne.n	80154b4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	4a24      	ldr	r2, [pc, #144]	; (8015540 <UART_Start_Receive_IT+0x23c>)
 80154b0:	675a      	str	r2, [r3, #116]	; 0x74
 80154b2:	e002      	b.n	80154ba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	4a23      	ldr	r2, [pc, #140]	; (8015544 <UART_Start_Receive_IT+0x240>)
 80154b8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	691b      	ldr	r3, [r3, #16]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d019      	beq.n	80154f6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ca:	e853 3f00 	ldrex	r3, [r3]
 80154ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80154d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80154d6:	677b      	str	r3, [r7, #116]	; 0x74
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	461a      	mov	r2, r3
 80154de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80154e0:	637b      	str	r3, [r7, #52]	; 0x34
 80154e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80154e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80154e8:	e841 2300 	strex	r3, r2, [r1]
 80154ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80154ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d1e6      	bne.n	80154c2 <UART_Start_Receive_IT+0x1be>
 80154f4:	e018      	b.n	8015528 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	e853 3f00 	ldrex	r3, [r3]
 8015502:	613b      	str	r3, [r7, #16]
   return(result);
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	f043 0320 	orr.w	r3, r3, #32
 801550a:	67bb      	str	r3, [r7, #120]	; 0x78
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	461a      	mov	r2, r3
 8015512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015514:	623b      	str	r3, [r7, #32]
 8015516:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015518:	69f9      	ldr	r1, [r7, #28]
 801551a:	6a3a      	ldr	r2, [r7, #32]
 801551c:	e841 2300 	strex	r3, r2, [r1]
 8015520:	61bb      	str	r3, [r7, #24]
   return(result);
 8015522:	69bb      	ldr	r3, [r7, #24]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d1e6      	bne.n	80154f6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015528:	2300      	movs	r3, #0
}
 801552a:	4618      	mov	r0, r3
 801552c:	378c      	adds	r7, #140	; 0x8c
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr
 8015536:	bf00      	nop
 8015538:	08015d69 	.word	0x08015d69
 801553c:	08015a09 	.word	0x08015a09
 8015540:	08015851 	.word	0x08015851
 8015544:	08015699 	.word	0x08015699

08015548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015548:	b480      	push	{r7}
 801554a:	b095      	sub	sp, #84	; 0x54
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015558:	e853 3f00 	ldrex	r3, [r3]
 801555c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015560:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015564:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	461a      	mov	r2, r3
 801556c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801556e:	643b      	str	r3, [r7, #64]	; 0x40
 8015570:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015572:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015576:	e841 2300 	strex	r3, r2, [r1]
 801557a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801557e:	2b00      	cmp	r3, #0
 8015580:	d1e6      	bne.n	8015550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	3308      	adds	r3, #8
 8015588:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801558a:	6a3b      	ldr	r3, [r7, #32]
 801558c:	e853 3f00 	ldrex	r3, [r3]
 8015590:	61fb      	str	r3, [r7, #28]
   return(result);
 8015592:	69fa      	ldr	r2, [r7, #28]
 8015594:	4b1e      	ldr	r3, [pc, #120]	; (8015610 <UART_EndRxTransfer+0xc8>)
 8015596:	4013      	ands	r3, r2
 8015598:	64bb      	str	r3, [r7, #72]	; 0x48
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	3308      	adds	r3, #8
 80155a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80155a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80155a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80155a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155aa:	e841 2300 	strex	r3, r2, [r1]
 80155ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80155b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d1e5      	bne.n	8015582 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155ba:	2b01      	cmp	r3, #1
 80155bc:	d118      	bne.n	80155f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	e853 3f00 	ldrex	r3, [r3]
 80155ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80155cc:	68bb      	ldr	r3, [r7, #8]
 80155ce:	f023 0310 	bic.w	r3, r3, #16
 80155d2:	647b      	str	r3, [r7, #68]	; 0x44
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	461a      	mov	r2, r3
 80155da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155dc:	61bb      	str	r3, [r7, #24]
 80155de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155e0:	6979      	ldr	r1, [r7, #20]
 80155e2:	69ba      	ldr	r2, [r7, #24]
 80155e4:	e841 2300 	strex	r3, r2, [r1]
 80155e8:	613b      	str	r3, [r7, #16]
   return(result);
 80155ea:	693b      	ldr	r3, [r7, #16]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d1e6      	bne.n	80155be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2220      	movs	r2, #32
 80155f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2200      	movs	r2, #0
 80155fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	2200      	movs	r2, #0
 8015602:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015604:	bf00      	nop
 8015606:	3754      	adds	r7, #84	; 0x54
 8015608:	46bd      	mov	sp, r7
 801560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560e:	4770      	bx	lr
 8015610:	effffffe 	.word	0xeffffffe

08015614 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b084      	sub	sp, #16
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015620:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	2200      	movs	r2, #0
 8015626:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	2200      	movs	r2, #0
 801562e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015632:	68f8      	ldr	r0, [r7, #12]
 8015634:	f7fe ff2e 	bl	8014494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015638:	bf00      	nop
 801563a:	3710      	adds	r7, #16
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}

08015640 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b088      	sub	sp, #32
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	e853 3f00 	ldrex	r3, [r3]
 8015654:	60bb      	str	r3, [r7, #8]
   return(result);
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801565c:	61fb      	str	r3, [r7, #28]
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	461a      	mov	r2, r3
 8015664:	69fb      	ldr	r3, [r7, #28]
 8015666:	61bb      	str	r3, [r7, #24]
 8015668:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801566a:	6979      	ldr	r1, [r7, #20]
 801566c:	69ba      	ldr	r2, [r7, #24]
 801566e:	e841 2300 	strex	r3, r2, [r1]
 8015672:	613b      	str	r3, [r7, #16]
   return(result);
 8015674:	693b      	ldr	r3, [r7, #16]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d1e6      	bne.n	8015648 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2220      	movs	r2, #32
 801567e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	2200      	movs	r2, #0
 8015686:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	f7fe fef9 	bl	8014480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801568e:	bf00      	nop
 8015690:	3720      	adds	r7, #32
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}
	...

08015698 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b09c      	sub	sp, #112	; 0x70
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80156a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80156b0:	2b22      	cmp	r3, #34	; 0x22
 80156b2:	f040 80be 	bne.w	8015832 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80156c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80156c4:	b2d9      	uxtb	r1, r3
 80156c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80156ca:	b2da      	uxtb	r2, r3
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156d0:	400a      	ands	r2, r1
 80156d2:	b2d2      	uxtb	r2, r2
 80156d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156da:	1c5a      	adds	r2, r3, #1
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80156e6:	b29b      	uxth	r3, r3
 80156e8:	3b01      	subs	r3, #1
 80156ea:	b29a      	uxth	r2, r3
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	f040 80a1 	bne.w	8015842 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015708:	e853 3f00 	ldrex	r3, [r3]
 801570c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801570e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015710:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015714:	66bb      	str	r3, [r7, #104]	; 0x68
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	461a      	mov	r2, r3
 801571c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801571e:	65bb      	str	r3, [r7, #88]	; 0x58
 8015720:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015722:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015724:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015726:	e841 2300 	strex	r3, r2, [r1]
 801572a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801572c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801572e:	2b00      	cmp	r3, #0
 8015730:	d1e6      	bne.n	8015700 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	3308      	adds	r3, #8
 8015738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801573c:	e853 3f00 	ldrex	r3, [r3]
 8015740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015744:	f023 0301 	bic.w	r3, r3, #1
 8015748:	667b      	str	r3, [r7, #100]	; 0x64
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	3308      	adds	r3, #8
 8015750:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015752:	647a      	str	r2, [r7, #68]	; 0x44
 8015754:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015756:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801575a:	e841 2300 	strex	r3, r2, [r1]
 801575e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015762:	2b00      	cmp	r3, #0
 8015764:	d1e5      	bne.n	8015732 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2220      	movs	r2, #32
 801576a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2200      	movs	r2, #0
 8015772:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2200      	movs	r2, #0
 8015778:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	4a33      	ldr	r2, [pc, #204]	; (801584c <UART_RxISR_8BIT+0x1b4>)
 8015780:	4293      	cmp	r3, r2
 8015782:	d01f      	beq.n	80157c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801578e:	2b00      	cmp	r3, #0
 8015790:	d018      	beq.n	80157c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801579a:	e853 3f00 	ldrex	r3, [r3]
 801579e:	623b      	str	r3, [r7, #32]
   return(result);
 80157a0:	6a3b      	ldr	r3, [r7, #32]
 80157a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80157a6:	663b      	str	r3, [r7, #96]	; 0x60
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	461a      	mov	r2, r3
 80157ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80157b0:	633b      	str	r3, [r7, #48]	; 0x30
 80157b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80157b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157b8:	e841 2300 	strex	r3, r2, [r1]
 80157bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80157be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d1e6      	bne.n	8015792 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157c8:	2b01      	cmp	r3, #1
 80157ca:	d12e      	bne.n	801582a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	2200      	movs	r2, #0
 80157d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	e853 3f00 	ldrex	r3, [r3]
 80157de:	60fb      	str	r3, [r7, #12]
   return(result);
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	f023 0310 	bic.w	r3, r3, #16
 80157e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	461a      	mov	r2, r3
 80157ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157f0:	61fb      	str	r3, [r7, #28]
 80157f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157f4:	69b9      	ldr	r1, [r7, #24]
 80157f6:	69fa      	ldr	r2, [r7, #28]
 80157f8:	e841 2300 	strex	r3, r2, [r1]
 80157fc:	617b      	str	r3, [r7, #20]
   return(result);
 80157fe:	697b      	ldr	r3, [r7, #20]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d1e6      	bne.n	80157d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	69db      	ldr	r3, [r3, #28]
 801580a:	f003 0310 	and.w	r3, r3, #16
 801580e:	2b10      	cmp	r3, #16
 8015810:	d103      	bne.n	801581a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	2210      	movs	r2, #16
 8015818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015820:	4619      	mov	r1, r3
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f7fe fe40 	bl	80144a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015828:	e00b      	b.n	8015842 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801582a:	6878      	ldr	r0, [r7, #4]
 801582c:	f7ec fbbc 	bl	8001fa8 <HAL_UART_RxCpltCallback>
}
 8015830:	e007      	b.n	8015842 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	699a      	ldr	r2, [r3, #24]
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	f042 0208 	orr.w	r2, r2, #8
 8015840:	619a      	str	r2, [r3, #24]
}
 8015842:	bf00      	nop
 8015844:	3770      	adds	r7, #112	; 0x70
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}
 801584a:	bf00      	nop
 801584c:	58000c00 	.word	0x58000c00

08015850 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b09c      	sub	sp, #112	; 0x70
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801585e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015868:	2b22      	cmp	r3, #34	; 0x22
 801586a:	f040 80be 	bne.w	80159ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015874:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801587c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801587e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015882:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015886:	4013      	ands	r3, r2
 8015888:	b29a      	uxth	r2, r3
 801588a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801588c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015892:	1c9a      	adds	r2, r3, #2
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801589e:	b29b      	uxth	r3, r3
 80158a0:	3b01      	subs	r3, #1
 80158a2:	b29a      	uxth	r2, r3
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80158b0:	b29b      	uxth	r3, r3
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	f040 80a1 	bne.w	80159fa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80158c0:	e853 3f00 	ldrex	r3, [r3]
 80158c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80158c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80158cc:	667b      	str	r3, [r7, #100]	; 0x64
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	461a      	mov	r2, r3
 80158d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80158d6:	657b      	str	r3, [r7, #84]	; 0x54
 80158d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80158dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80158de:	e841 2300 	strex	r3, r2, [r1]
 80158e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80158e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d1e6      	bne.n	80158b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	3308      	adds	r3, #8
 80158f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158f4:	e853 3f00 	ldrex	r3, [r3]
 80158f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80158fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fc:	f023 0301 	bic.w	r3, r3, #1
 8015900:	663b      	str	r3, [r7, #96]	; 0x60
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	3308      	adds	r3, #8
 8015908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801590a:	643a      	str	r2, [r7, #64]	; 0x40
 801590c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801590e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015912:	e841 2300 	strex	r3, r2, [r1]
 8015916:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801591a:	2b00      	cmp	r3, #0
 801591c:	d1e5      	bne.n	80158ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	2220      	movs	r2, #32
 8015922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	2200      	movs	r2, #0
 801592a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	2200      	movs	r2, #0
 8015930:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	4a33      	ldr	r2, [pc, #204]	; (8015a04 <UART_RxISR_16BIT+0x1b4>)
 8015938:	4293      	cmp	r3, r2
 801593a:	d01f      	beq.n	801597c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	685b      	ldr	r3, [r3, #4]
 8015942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015946:	2b00      	cmp	r3, #0
 8015948:	d018      	beq.n	801597c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015950:	6a3b      	ldr	r3, [r7, #32]
 8015952:	e853 3f00 	ldrex	r3, [r3]
 8015956:	61fb      	str	r3, [r7, #28]
   return(result);
 8015958:	69fb      	ldr	r3, [r7, #28]
 801595a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801595e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	461a      	mov	r2, r3
 8015966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015968:	62fb      	str	r3, [r7, #44]	; 0x2c
 801596a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801596c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801596e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015970:	e841 2300 	strex	r3, r2, [r1]
 8015974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015978:	2b00      	cmp	r3, #0
 801597a:	d1e6      	bne.n	801594a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015980:	2b01      	cmp	r3, #1
 8015982:	d12e      	bne.n	80159e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2200      	movs	r2, #0
 8015988:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	e853 3f00 	ldrex	r3, [r3]
 8015996:	60bb      	str	r3, [r7, #8]
   return(result);
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	f023 0310 	bic.w	r3, r3, #16
 801599e:	65bb      	str	r3, [r7, #88]	; 0x58
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	461a      	mov	r2, r3
 80159a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80159a8:	61bb      	str	r3, [r7, #24]
 80159aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159ac:	6979      	ldr	r1, [r7, #20]
 80159ae:	69ba      	ldr	r2, [r7, #24]
 80159b0:	e841 2300 	strex	r3, r2, [r1]
 80159b4:	613b      	str	r3, [r7, #16]
   return(result);
 80159b6:	693b      	ldr	r3, [r7, #16]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d1e6      	bne.n	801598a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	69db      	ldr	r3, [r3, #28]
 80159c2:	f003 0310 	and.w	r3, r3, #16
 80159c6:	2b10      	cmp	r3, #16
 80159c8:	d103      	bne.n	80159d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	2210      	movs	r2, #16
 80159d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80159d8:	4619      	mov	r1, r3
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	f7fe fd64 	bl	80144a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80159e0:	e00b      	b.n	80159fa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f7ec fae0 	bl	8001fa8 <HAL_UART_RxCpltCallback>
}
 80159e8:	e007      	b.n	80159fa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	699a      	ldr	r2, [r3, #24]
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	f042 0208 	orr.w	r2, r2, #8
 80159f8:	619a      	str	r2, [r3, #24]
}
 80159fa:	bf00      	nop
 80159fc:	3770      	adds	r7, #112	; 0x70
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}
 8015a02:	bf00      	nop
 8015a04:	58000c00 	.word	0x58000c00

08015a08 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b0ac      	sub	sp, #176	; 0xb0
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015a16:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	69db      	ldr	r3, [r3, #28]
 8015a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	689b      	ldr	r3, [r3, #8]
 8015a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015a3e:	2b22      	cmp	r3, #34	; 0x22
 8015a40:	f040 8180 	bne.w	8015d44 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015a4a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015a4e:	e123      	b.n	8015c98 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a56:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015a5a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8015a5e:	b2d9      	uxtb	r1, r3
 8015a60:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8015a64:	b2da      	uxtb	r2, r3
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a6a:	400a      	ands	r2, r1
 8015a6c:	b2d2      	uxtb	r2, r2
 8015a6e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a74:	1c5a      	adds	r2, r3, #1
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015a80:	b29b      	uxth	r3, r3
 8015a82:	3b01      	subs	r3, #1
 8015a84:	b29a      	uxth	r2, r3
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	69db      	ldr	r3, [r3, #28]
 8015a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015a9a:	f003 0307 	and.w	r3, r3, #7
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d053      	beq.n	8015b4a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015aa6:	f003 0301 	and.w	r3, r3, #1
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d011      	beq.n	8015ad2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8015aae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d00b      	beq.n	8015ad2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2201      	movs	r2, #1
 8015ac0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ac8:	f043 0201 	orr.w	r2, r3, #1
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015ad6:	f003 0302 	and.w	r3, r3, #2
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d011      	beq.n	8015b02 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8015ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015ae2:	f003 0301 	and.w	r3, r3, #1
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d00b      	beq.n	8015b02 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	2202      	movs	r2, #2
 8015af0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015af8:	f043 0204 	orr.w	r2, r3, #4
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015b06:	f003 0304 	and.w	r3, r3, #4
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d011      	beq.n	8015b32 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8015b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015b12:	f003 0301 	and.w	r3, r3, #1
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d00b      	beq.n	8015b32 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	2204      	movs	r2, #4
 8015b20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b28:	f043 0202 	orr.w	r2, r3, #2
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d006      	beq.n	8015b4a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015b3c:	6878      	ldr	r0, [r7, #4]
 8015b3e:	f7fe fca9 	bl	8014494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	2200      	movs	r2, #0
 8015b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	f040 80a0 	bne.w	8015c98 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015b60:	e853 3f00 	ldrex	r3, [r3]
 8015b64:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8015b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	461a      	mov	r2, r3
 8015b76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015b7c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b7e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8015b80:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015b82:	e841 2300 	strex	r3, r2, [r1]
 8015b86:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8015b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d1e4      	bne.n	8015b58 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	3308      	adds	r3, #8
 8015b94:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b98:	e853 3f00 	ldrex	r3, [r3]
 8015b9c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8015b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015ba0:	4b6e      	ldr	r3, [pc, #440]	; (8015d5c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8015ba2:	4013      	ands	r3, r2
 8015ba4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	3308      	adds	r3, #8
 8015bae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015bb2:	66ba      	str	r2, [r7, #104]	; 0x68
 8015bb4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bb6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015bb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015bba:	e841 2300 	strex	r3, r2, [r1]
 8015bbe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d1e3      	bne.n	8015b8e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	2220      	movs	r2, #32
 8015bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	4a60      	ldr	r2, [pc, #384]	; (8015d60 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8015be0:	4293      	cmp	r3, r2
 8015be2:	d021      	beq.n	8015c28 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d01a      	beq.n	8015c28 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bfa:	e853 3f00 	ldrex	r3, [r3]
 8015bfe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	461a      	mov	r2, r3
 8015c10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015c14:	657b      	str	r3, [r7, #84]	; 0x54
 8015c16:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015c1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015c1c:	e841 2300 	strex	r3, r2, [r1]
 8015c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d1e4      	bne.n	8015bf2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c2c:	2b01      	cmp	r3, #1
 8015c2e:	d130      	bne.n	8015c92 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2200      	movs	r2, #0
 8015c34:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c3e:	e853 3f00 	ldrex	r3, [r3]
 8015c42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c46:	f023 0310 	bic.w	r3, r3, #16
 8015c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	461a      	mov	r2, r3
 8015c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015c58:	643b      	str	r3, [r7, #64]	; 0x40
 8015c5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015c5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c60:	e841 2300 	strex	r3, r2, [r1]
 8015c64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d1e4      	bne.n	8015c36 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	69db      	ldr	r3, [r3, #28]
 8015c72:	f003 0310 	and.w	r3, r3, #16
 8015c76:	2b10      	cmp	r3, #16
 8015c78:	d103      	bne.n	8015c82 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	2210      	movs	r2, #16
 8015c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015c88:	4619      	mov	r1, r3
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f7fe fc0c 	bl	80144a8 <HAL_UARTEx_RxEventCallback>
 8015c90:	e002      	b.n	8015c98 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f7ec f988 	bl	8001fa8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015c98:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d006      	beq.n	8015cae <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8015ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015ca4:	f003 0320 	and.w	r3, r3, #32
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	f47f aed1 	bne.w	8015a50 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015cb4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015cb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d049      	beq.n	8015d54 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015cc6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	d242      	bcs.n	8015d54 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	3308      	adds	r3, #8
 8015cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cd6:	6a3b      	ldr	r3, [r7, #32]
 8015cd8:	e853 3f00 	ldrex	r3, [r3]
 8015cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8015cde:	69fb      	ldr	r3, [r7, #28]
 8015ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	3308      	adds	r3, #8
 8015cee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cfa:	e841 2300 	strex	r3, r2, [r1]
 8015cfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d1e3      	bne.n	8015cce <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	4a16      	ldr	r2, [pc, #88]	; (8015d64 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8015d0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	e853 3f00 	ldrex	r3, [r3]
 8015d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	f043 0320 	orr.w	r3, r3, #32
 8015d20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	461a      	mov	r2, r3
 8015d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015d2e:	61bb      	str	r3, [r7, #24]
 8015d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d32:	6979      	ldr	r1, [r7, #20]
 8015d34:	69ba      	ldr	r2, [r7, #24]
 8015d36:	e841 2300 	strex	r3, r2, [r1]
 8015d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d1e4      	bne.n	8015d0c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015d42:	e007      	b.n	8015d54 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	699a      	ldr	r2, [r3, #24]
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	f042 0208 	orr.w	r2, r2, #8
 8015d52:	619a      	str	r2, [r3, #24]
}
 8015d54:	bf00      	nop
 8015d56:	37b0      	adds	r7, #176	; 0xb0
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}
 8015d5c:	effffffe 	.word	0xeffffffe
 8015d60:	58000c00 	.word	0x58000c00
 8015d64:	08015699 	.word	0x08015699

08015d68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b0ae      	sub	sp, #184	; 0xb8
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015d76:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	69db      	ldr	r3, [r3, #28]
 8015d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	689b      	ldr	r3, [r3, #8]
 8015d94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015d9e:	2b22      	cmp	r3, #34	; 0x22
 8015da0:	f040 8184 	bne.w	80160ac <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015daa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015dae:	e127      	b.n	8016000 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015db6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8015dc2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8015dc6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8015dca:	4013      	ands	r3, r2
 8015dcc:	b29a      	uxth	r2, r3
 8015dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015dd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dd8:	1c9a      	adds	r2, r3, #2
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015de4:	b29b      	uxth	r3, r3
 8015de6:	3b01      	subs	r3, #1
 8015de8:	b29a      	uxth	r2, r3
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	69db      	ldr	r3, [r3, #28]
 8015df6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8015dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015dfe:	f003 0307 	and.w	r3, r3, #7
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d053      	beq.n	8015eae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015e0a:	f003 0301 	and.w	r3, r3, #1
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d011      	beq.n	8015e36 <UART_RxISR_16BIT_FIFOEN+0xce>
 8015e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d00b      	beq.n	8015e36 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	2201      	movs	r2, #1
 8015e24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e2c:	f043 0201 	orr.w	r2, r3, #1
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015e3a:	f003 0302 	and.w	r3, r3, #2
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d011      	beq.n	8015e66 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8015e42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015e46:	f003 0301 	and.w	r3, r3, #1
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d00b      	beq.n	8015e66 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	2202      	movs	r2, #2
 8015e54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e5c:	f043 0204 	orr.w	r2, r3, #4
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015e6a:	f003 0304 	and.w	r3, r3, #4
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d011      	beq.n	8015e96 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8015e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015e76:	f003 0301 	and.w	r3, r3, #1
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d00b      	beq.n	8015e96 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	2204      	movs	r2, #4
 8015e84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e8c:	f043 0202 	orr.w	r2, r3, #2
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d006      	beq.n	8015eae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015ea0:	6878      	ldr	r0, [r7, #4]
 8015ea2:	f7fe faf7 	bl	8014494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015eb4:	b29b      	uxth	r3, r3
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	f040 80a2 	bne.w	8016000 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ec4:	e853 3f00 	ldrex	r3, [r3]
 8015ec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8015eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	461a      	mov	r2, r3
 8015eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015ee2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015eea:	e841 2300 	strex	r3, r2, [r1]
 8015eee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8015ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d1e2      	bne.n	8015ebc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	3308      	adds	r3, #8
 8015efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f00:	e853 3f00 	ldrex	r3, [r3]
 8015f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015f06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015f08:	4b6e      	ldr	r3, [pc, #440]	; (80160c4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8015f0a:	4013      	ands	r3, r2
 8015f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	3308      	adds	r3, #8
 8015f16:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015f20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015f22:	e841 2300 	strex	r3, r2, [r1]
 8015f26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d1e3      	bne.n	8015ef6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	2220      	movs	r2, #32
 8015f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	2200      	movs	r2, #0
 8015f3a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	4a60      	ldr	r2, [pc, #384]	; (80160c8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	d021      	beq.n	8015f90 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	685b      	ldr	r3, [r3, #4]
 8015f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d01a      	beq.n	8015f90 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f62:	e853 3f00 	ldrex	r3, [r3]
 8015f66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	461a      	mov	r2, r3
 8015f78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015f7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8015f7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015f82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015f84:	e841 2300 	strex	r3, r2, [r1]
 8015f88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d1e4      	bne.n	8015f5a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f94:	2b01      	cmp	r3, #1
 8015f96:	d130      	bne.n	8015ffa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fa6:	e853 3f00 	ldrex	r3, [r3]
 8015faa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fae:	f023 0310 	bic.w	r3, r3, #16
 8015fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	461a      	mov	r2, r3
 8015fbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8015fc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015fc8:	e841 2300 	strex	r3, r2, [r1]
 8015fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d1e4      	bne.n	8015f9e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	69db      	ldr	r3, [r3, #28]
 8015fda:	f003 0310 	and.w	r3, r3, #16
 8015fde:	2b10      	cmp	r3, #16
 8015fe0:	d103      	bne.n	8015fea <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	2210      	movs	r2, #16
 8015fe8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015ff0:	4619      	mov	r1, r3
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f7fe fa58 	bl	80144a8 <HAL_UARTEx_RxEventCallback>
 8015ff8:	e002      	b.n	8016000 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f7eb ffd4 	bl	8001fa8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016000:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016004:	2b00      	cmp	r3, #0
 8016006:	d006      	beq.n	8016016 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016008:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801600c:	f003 0320 	and.w	r3, r3, #32
 8016010:	2b00      	cmp	r3, #0
 8016012:	f47f aecd 	bne.w	8015db0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801601c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016020:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016024:	2b00      	cmp	r3, #0
 8016026:	d049      	beq.n	80160bc <UART_RxISR_16BIT_FIFOEN+0x354>
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801602e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8016032:	429a      	cmp	r2, r3
 8016034:	d242      	bcs.n	80160bc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	3308      	adds	r3, #8
 801603c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016040:	e853 3f00 	ldrex	r3, [r3]
 8016044:	623b      	str	r3, [r7, #32]
   return(result);
 8016046:	6a3b      	ldr	r3, [r7, #32]
 8016048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801604c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	3308      	adds	r3, #8
 8016056:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801605a:	633a      	str	r2, [r7, #48]	; 0x30
 801605c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801605e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016062:	e841 2300 	strex	r3, r2, [r1]
 8016066:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801606a:	2b00      	cmp	r3, #0
 801606c:	d1e3      	bne.n	8016036 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	4a16      	ldr	r2, [pc, #88]	; (80160cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8016072:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	e853 3f00 	ldrex	r3, [r3]
 8016080:	60fb      	str	r3, [r7, #12]
   return(result);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f043 0320 	orr.w	r3, r3, #32
 8016088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	461a      	mov	r2, r3
 8016092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016096:	61fb      	str	r3, [r7, #28]
 8016098:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801609a:	69b9      	ldr	r1, [r7, #24]
 801609c:	69fa      	ldr	r2, [r7, #28]
 801609e:	e841 2300 	strex	r3, r2, [r1]
 80160a2:	617b      	str	r3, [r7, #20]
   return(result);
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d1e4      	bne.n	8016074 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80160aa:	e007      	b.n	80160bc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	699a      	ldr	r2, [r3, #24]
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	f042 0208 	orr.w	r2, r2, #8
 80160ba:	619a      	str	r2, [r3, #24]
}
 80160bc:	bf00      	nop
 80160be:	37b8      	adds	r7, #184	; 0xb8
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}
 80160c4:	effffffe 	.word	0xeffffffe
 80160c8:	58000c00 	.word	0x58000c00
 80160cc:	08015851 	.word	0x08015851

080160d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80160d0:	b480      	push	{r7}
 80160d2:	b083      	sub	sp, #12
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80160d8:	bf00      	nop
 80160da:	370c      	adds	r7, #12
 80160dc:	46bd      	mov	sp, r7
 80160de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e2:	4770      	bx	lr

080160e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80160e4:	b480      	push	{r7}
 80160e6:	b083      	sub	sp, #12
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80160ec:	bf00      	nop
 80160ee:	370c      	adds	r7, #12
 80160f0:	46bd      	mov	sp, r7
 80160f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f6:	4770      	bx	lr

080160f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80160f8:	b480      	push	{r7}
 80160fa:	b083      	sub	sp, #12
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016100:	bf00      	nop
 8016102:	370c      	adds	r7, #12
 8016104:	46bd      	mov	sp, r7
 8016106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610a:	4770      	bx	lr

0801610c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 801610c:	b480      	push	{r7}
 801610e:	b089      	sub	sp, #36	; 0x24
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801611a:	2b01      	cmp	r3, #1
 801611c:	d101      	bne.n	8016122 <HAL_UARTEx_EnableStopMode+0x16>
 801611e:	2302      	movs	r3, #2
 8016120:	e021      	b.n	8016166 <HAL_UARTEx_EnableStopMode+0x5a>
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2201      	movs	r2, #1
 8016126:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	e853 3f00 	ldrex	r3, [r3]
 8016136:	60bb      	str	r3, [r7, #8]
   return(result);
 8016138:	68bb      	ldr	r3, [r7, #8]
 801613a:	f043 0302 	orr.w	r3, r3, #2
 801613e:	61fb      	str	r3, [r7, #28]
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	461a      	mov	r2, r3
 8016146:	69fb      	ldr	r3, [r7, #28]
 8016148:	61bb      	str	r3, [r7, #24]
 801614a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801614c:	6979      	ldr	r1, [r7, #20]
 801614e:	69ba      	ldr	r2, [r7, #24]
 8016150:	e841 2300 	strex	r3, r2, [r1]
 8016154:	613b      	str	r3, [r7, #16]
   return(result);
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d1e6      	bne.n	801612a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	2200      	movs	r2, #0
 8016160:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016164:	2300      	movs	r3, #0
}
 8016166:	4618      	mov	r0, r3
 8016168:	3724      	adds	r7, #36	; 0x24
 801616a:	46bd      	mov	sp, r7
 801616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016170:	4770      	bx	lr

08016172 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8016172:	b580      	push	{r7, lr}
 8016174:	b084      	sub	sp, #16
 8016176:	af00      	add	r7, sp, #0
 8016178:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016180:	2b01      	cmp	r3, #1
 8016182:	d101      	bne.n	8016188 <HAL_UARTEx_EnableFifoMode+0x16>
 8016184:	2302      	movs	r3, #2
 8016186:	e02b      	b.n	80161e0 <HAL_UARTEx_EnableFifoMode+0x6e>
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2201      	movs	r2, #1
 801618c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	2224      	movs	r2, #36	; 0x24
 8016194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	681a      	ldr	r2, [r3, #0]
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	f022 0201 	bic.w	r2, r2, #1
 80161ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80161b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80161be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	68fa      	ldr	r2, [r7, #12]
 80161c6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f000 f8c3 	bl	8016354 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2220      	movs	r2, #32
 80161d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	2200      	movs	r2, #0
 80161da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80161de:	2300      	movs	r3, #0
}
 80161e0:	4618      	mov	r0, r3
 80161e2:	3710      	adds	r7, #16
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80161e8:	b480      	push	{r7}
 80161ea:	b085      	sub	sp, #20
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80161f6:	2b01      	cmp	r3, #1
 80161f8:	d101      	bne.n	80161fe <HAL_UARTEx_DisableFifoMode+0x16>
 80161fa:	2302      	movs	r3, #2
 80161fc:	e027      	b.n	801624e <HAL_UARTEx_DisableFifoMode+0x66>
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	2201      	movs	r2, #1
 8016202:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	2224      	movs	r2, #36	; 0x24
 801620a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	681a      	ldr	r2, [r3, #0]
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	f022 0201 	bic.w	r2, r2, #1
 8016224:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801622c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	2200      	movs	r2, #0
 8016232:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	68fa      	ldr	r2, [r7, #12]
 801623a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2220      	movs	r2, #32
 8016240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2200      	movs	r2, #0
 8016248:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801624c:	2300      	movs	r3, #0
}
 801624e:	4618      	mov	r0, r3
 8016250:	3714      	adds	r7, #20
 8016252:	46bd      	mov	sp, r7
 8016254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016258:	4770      	bx	lr

0801625a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801625a:	b580      	push	{r7, lr}
 801625c:	b084      	sub	sp, #16
 801625e:	af00      	add	r7, sp, #0
 8016260:	6078      	str	r0, [r7, #4]
 8016262:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801626a:	2b01      	cmp	r3, #1
 801626c:	d101      	bne.n	8016272 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801626e:	2302      	movs	r3, #2
 8016270:	e02d      	b.n	80162ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	2201      	movs	r2, #1
 8016276:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2224      	movs	r2, #36	; 0x24
 801627e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	681a      	ldr	r2, [r3, #0]
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	f022 0201 	bic.w	r2, r2, #1
 8016298:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	689b      	ldr	r3, [r3, #8]
 80162a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	683a      	ldr	r2, [r7, #0]
 80162aa:	430a      	orrs	r2, r1
 80162ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	f000 f850 	bl	8016354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	68fa      	ldr	r2, [r7, #12]
 80162ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	2220      	movs	r2, #32
 80162c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80162cc:	2300      	movs	r3, #0
}
 80162ce:	4618      	mov	r0, r3
 80162d0:	3710      	adds	r7, #16
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}

080162d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80162d6:	b580      	push	{r7, lr}
 80162d8:	b084      	sub	sp, #16
 80162da:	af00      	add	r7, sp, #0
 80162dc:	6078      	str	r0, [r7, #4]
 80162de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d101      	bne.n	80162ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80162ea:	2302      	movs	r3, #2
 80162ec:	e02d      	b.n	801634a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2201      	movs	r2, #1
 80162f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2224      	movs	r2, #36	; 0x24
 80162fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	681a      	ldr	r2, [r3, #0]
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	f022 0201 	bic.w	r2, r2, #1
 8016314:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	689b      	ldr	r3, [r3, #8]
 801631c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	683a      	ldr	r2, [r7, #0]
 8016326:	430a      	orrs	r2, r1
 8016328:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801632a:	6878      	ldr	r0, [r7, #4]
 801632c:	f000 f812 	bl	8016354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	68fa      	ldr	r2, [r7, #12]
 8016336:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	2220      	movs	r2, #32
 801633c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	2200      	movs	r2, #0
 8016344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016348:	2300      	movs	r3, #0
}
 801634a:	4618      	mov	r0, r3
 801634c:	3710      	adds	r7, #16
 801634e:	46bd      	mov	sp, r7
 8016350:	bd80      	pop	{r7, pc}
	...

08016354 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016354:	b480      	push	{r7}
 8016356:	b085      	sub	sp, #20
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016360:	2b00      	cmp	r3, #0
 8016362:	d108      	bne.n	8016376 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2201      	movs	r2, #1
 8016368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2201      	movs	r2, #1
 8016370:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016374:	e031      	b.n	80163da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016376:	2310      	movs	r3, #16
 8016378:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801637a:	2310      	movs	r3, #16
 801637c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	689b      	ldr	r3, [r3, #8]
 8016384:	0e5b      	lsrs	r3, r3, #25
 8016386:	b2db      	uxtb	r3, r3
 8016388:	f003 0307 	and.w	r3, r3, #7
 801638c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	689b      	ldr	r3, [r3, #8]
 8016394:	0f5b      	lsrs	r3, r3, #29
 8016396:	b2db      	uxtb	r3, r3
 8016398:	f003 0307 	and.w	r3, r3, #7
 801639c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801639e:	7bbb      	ldrb	r3, [r7, #14]
 80163a0:	7b3a      	ldrb	r2, [r7, #12]
 80163a2:	4911      	ldr	r1, [pc, #68]	; (80163e8 <UARTEx_SetNbDataToProcess+0x94>)
 80163a4:	5c8a      	ldrb	r2, [r1, r2]
 80163a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80163aa:	7b3a      	ldrb	r2, [r7, #12]
 80163ac:	490f      	ldr	r1, [pc, #60]	; (80163ec <UARTEx_SetNbDataToProcess+0x98>)
 80163ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80163b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80163b4:	b29a      	uxth	r2, r3
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80163bc:	7bfb      	ldrb	r3, [r7, #15]
 80163be:	7b7a      	ldrb	r2, [r7, #13]
 80163c0:	4909      	ldr	r1, [pc, #36]	; (80163e8 <UARTEx_SetNbDataToProcess+0x94>)
 80163c2:	5c8a      	ldrb	r2, [r1, r2]
 80163c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80163c8:	7b7a      	ldrb	r2, [r7, #13]
 80163ca:	4908      	ldr	r1, [pc, #32]	; (80163ec <UARTEx_SetNbDataToProcess+0x98>)
 80163cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80163ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80163d2:	b29a      	uxth	r2, r3
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80163da:	bf00      	nop
 80163dc:	3714      	adds	r7, #20
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr
 80163e6:	bf00      	nop
 80163e8:	0801a984 	.word	0x0801a984
 80163ec:	0801a98c 	.word	0x0801a98c

080163f0 <__NVIC_SetPriority>:
{
 80163f0:	b480      	push	{r7}
 80163f2:	b083      	sub	sp, #12
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	4603      	mov	r3, r0
 80163f8:	6039      	str	r1, [r7, #0]
 80163fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80163fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016400:	2b00      	cmp	r3, #0
 8016402:	db0a      	blt.n	801641a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016404:	683b      	ldr	r3, [r7, #0]
 8016406:	b2da      	uxtb	r2, r3
 8016408:	490c      	ldr	r1, [pc, #48]	; (801643c <__NVIC_SetPriority+0x4c>)
 801640a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801640e:	0112      	lsls	r2, r2, #4
 8016410:	b2d2      	uxtb	r2, r2
 8016412:	440b      	add	r3, r1
 8016414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016418:	e00a      	b.n	8016430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	b2da      	uxtb	r2, r3
 801641e:	4908      	ldr	r1, [pc, #32]	; (8016440 <__NVIC_SetPriority+0x50>)
 8016420:	88fb      	ldrh	r3, [r7, #6]
 8016422:	f003 030f 	and.w	r3, r3, #15
 8016426:	3b04      	subs	r3, #4
 8016428:	0112      	lsls	r2, r2, #4
 801642a:	b2d2      	uxtb	r2, r2
 801642c:	440b      	add	r3, r1
 801642e:	761a      	strb	r2, [r3, #24]
}
 8016430:	bf00      	nop
 8016432:	370c      	adds	r7, #12
 8016434:	46bd      	mov	sp, r7
 8016436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643a:	4770      	bx	lr
 801643c:	e000e100 	.word	0xe000e100
 8016440:	e000ed00 	.word	0xe000ed00

08016444 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016444:	b580      	push	{r7, lr}
 8016446:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016448:	4b05      	ldr	r3, [pc, #20]	; (8016460 <SysTick_Handler+0x1c>)
 801644a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801644c:	f002 faa0 	bl	8018990 <xTaskGetSchedulerState>
 8016450:	4603      	mov	r3, r0
 8016452:	2b01      	cmp	r3, #1
 8016454:	d001      	beq.n	801645a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016456:	f003 f8bf 	bl	80195d8 <xPortSysTickHandler>
  }
}
 801645a:	bf00      	nop
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	e000e010 	.word	0xe000e010

08016464 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016464:	b580      	push	{r7, lr}
 8016466:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016468:	2100      	movs	r1, #0
 801646a:	f06f 0004 	mvn.w	r0, #4
 801646e:	f7ff ffbf 	bl	80163f0 <__NVIC_SetPriority>
#endif
}
 8016472:	bf00      	nop
 8016474:	bd80      	pop	{r7, pc}
	...

08016478 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016478:	b480      	push	{r7}
 801647a:	b083      	sub	sp, #12
 801647c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801647e:	f3ef 8305 	mrs	r3, IPSR
 8016482:	603b      	str	r3, [r7, #0]
  return(result);
 8016484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016486:	2b00      	cmp	r3, #0
 8016488:	d003      	beq.n	8016492 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801648a:	f06f 0305 	mvn.w	r3, #5
 801648e:	607b      	str	r3, [r7, #4]
 8016490:	e00c      	b.n	80164ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016492:	4b0a      	ldr	r3, [pc, #40]	; (80164bc <osKernelInitialize+0x44>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d105      	bne.n	80164a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801649a:	4b08      	ldr	r3, [pc, #32]	; (80164bc <osKernelInitialize+0x44>)
 801649c:	2201      	movs	r2, #1
 801649e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80164a0:	2300      	movs	r3, #0
 80164a2:	607b      	str	r3, [r7, #4]
 80164a4:	e002      	b.n	80164ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80164a6:	f04f 33ff 	mov.w	r3, #4294967295
 80164aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80164ac:	687b      	ldr	r3, [r7, #4]
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	370c      	adds	r7, #12
 80164b2:	46bd      	mov	sp, r7
 80164b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b8:	4770      	bx	lr
 80164ba:	bf00      	nop
 80164bc:	24002168 	.word	0x24002168

080164c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b082      	sub	sp, #8
 80164c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80164c6:	f3ef 8305 	mrs	r3, IPSR
 80164ca:	603b      	str	r3, [r7, #0]
  return(result);
 80164cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d003      	beq.n	80164da <osKernelStart+0x1a>
    stat = osErrorISR;
 80164d2:	f06f 0305 	mvn.w	r3, #5
 80164d6:	607b      	str	r3, [r7, #4]
 80164d8:	e010      	b.n	80164fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80164da:	4b0b      	ldr	r3, [pc, #44]	; (8016508 <osKernelStart+0x48>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	2b01      	cmp	r3, #1
 80164e0:	d109      	bne.n	80164f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80164e2:	f7ff ffbf 	bl	8016464 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80164e6:	4b08      	ldr	r3, [pc, #32]	; (8016508 <osKernelStart+0x48>)
 80164e8:	2202      	movs	r2, #2
 80164ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80164ec:	f001 fd54 	bl	8017f98 <vTaskStartScheduler>
      stat = osOK;
 80164f0:	2300      	movs	r3, #0
 80164f2:	607b      	str	r3, [r7, #4]
 80164f4:	e002      	b.n	80164fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80164f6:	f04f 33ff 	mov.w	r3, #4294967295
 80164fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80164fc:	687b      	ldr	r3, [r7, #4]
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3708      	adds	r7, #8
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	24002168 	.word	0x24002168

0801650c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801650c:	b580      	push	{r7, lr}
 801650e:	b08e      	sub	sp, #56	; 0x38
 8016510:	af04      	add	r7, sp, #16
 8016512:	60f8      	str	r0, [r7, #12]
 8016514:	60b9      	str	r1, [r7, #8]
 8016516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016518:	2300      	movs	r3, #0
 801651a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801651c:	f3ef 8305 	mrs	r3, IPSR
 8016520:	617b      	str	r3, [r7, #20]
  return(result);
 8016522:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016524:	2b00      	cmp	r3, #0
 8016526:	d17e      	bne.n	8016626 <osThreadNew+0x11a>
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d07b      	beq.n	8016626 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801652e:	2380      	movs	r3, #128	; 0x80
 8016530:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016532:	2318      	movs	r3, #24
 8016534:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016536:	2300      	movs	r3, #0
 8016538:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801653a:	f04f 33ff 	mov.w	r3, #4294967295
 801653e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d045      	beq.n	80165d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d002      	beq.n	8016554 <osThreadNew+0x48>
        name = attr->name;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	699b      	ldr	r3, [r3, #24]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d002      	beq.n	8016562 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	699b      	ldr	r3, [r3, #24]
 8016560:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016562:	69fb      	ldr	r3, [r7, #28]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d008      	beq.n	801657a <osThreadNew+0x6e>
 8016568:	69fb      	ldr	r3, [r7, #28]
 801656a:	2b38      	cmp	r3, #56	; 0x38
 801656c:	d805      	bhi.n	801657a <osThreadNew+0x6e>
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	f003 0301 	and.w	r3, r3, #1
 8016576:	2b00      	cmp	r3, #0
 8016578:	d001      	beq.n	801657e <osThreadNew+0x72>
        return (NULL);
 801657a:	2300      	movs	r3, #0
 801657c:	e054      	b.n	8016628 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	695b      	ldr	r3, [r3, #20]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d003      	beq.n	801658e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	695b      	ldr	r3, [r3, #20]
 801658a:	089b      	lsrs	r3, r3, #2
 801658c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	689b      	ldr	r3, [r3, #8]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d00e      	beq.n	80165b4 <osThreadNew+0xa8>
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	68db      	ldr	r3, [r3, #12]
 801659a:	2b5b      	cmp	r3, #91	; 0x5b
 801659c:	d90a      	bls.n	80165b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d006      	beq.n	80165b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	695b      	ldr	r3, [r3, #20]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d002      	beq.n	80165b4 <osThreadNew+0xa8>
        mem = 1;
 80165ae:	2301      	movs	r3, #1
 80165b0:	61bb      	str	r3, [r7, #24]
 80165b2:	e010      	b.n	80165d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	689b      	ldr	r3, [r3, #8]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d10c      	bne.n	80165d6 <osThreadNew+0xca>
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d108      	bne.n	80165d6 <osThreadNew+0xca>
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	691b      	ldr	r3, [r3, #16]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d104      	bne.n	80165d6 <osThreadNew+0xca>
          mem = 0;
 80165cc:	2300      	movs	r3, #0
 80165ce:	61bb      	str	r3, [r7, #24]
 80165d0:	e001      	b.n	80165d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80165d2:	2300      	movs	r3, #0
 80165d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80165d6:	69bb      	ldr	r3, [r7, #24]
 80165d8:	2b01      	cmp	r3, #1
 80165da:	d110      	bne.n	80165fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80165e0:	687a      	ldr	r2, [r7, #4]
 80165e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80165e4:	9202      	str	r2, [sp, #8]
 80165e6:	9301      	str	r3, [sp, #4]
 80165e8:	69fb      	ldr	r3, [r7, #28]
 80165ea:	9300      	str	r3, [sp, #0]
 80165ec:	68bb      	ldr	r3, [r7, #8]
 80165ee:	6a3a      	ldr	r2, [r7, #32]
 80165f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165f2:	68f8      	ldr	r0, [r7, #12]
 80165f4:	f001 f9f4 	bl	80179e0 <xTaskCreateStatic>
 80165f8:	4603      	mov	r3, r0
 80165fa:	613b      	str	r3, [r7, #16]
 80165fc:	e013      	b.n	8016626 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80165fe:	69bb      	ldr	r3, [r7, #24]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d110      	bne.n	8016626 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016604:	6a3b      	ldr	r3, [r7, #32]
 8016606:	b29a      	uxth	r2, r3
 8016608:	f107 0310 	add.w	r3, r7, #16
 801660c:	9301      	str	r3, [sp, #4]
 801660e:	69fb      	ldr	r3, [r7, #28]
 8016610:	9300      	str	r3, [sp, #0]
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016616:	68f8      	ldr	r0, [r7, #12]
 8016618:	f001 fa3f 	bl	8017a9a <xTaskCreate>
 801661c:	4603      	mov	r3, r0
 801661e:	2b01      	cmp	r3, #1
 8016620:	d001      	beq.n	8016626 <osThreadNew+0x11a>
            hTask = NULL;
 8016622:	2300      	movs	r3, #0
 8016624:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016626:	693b      	ldr	r3, [r7, #16]
}
 8016628:	4618      	mov	r0, r3
 801662a:	3728      	adds	r7, #40	; 0x28
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}

08016630 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016630:	b480      	push	{r7}
 8016632:	b083      	sub	sp, #12
 8016634:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016636:	f3ef 8305 	mrs	r3, IPSR
 801663a:	603b      	str	r3, [r7, #0]
  return(result);
 801663c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801663e:	2b00      	cmp	r3, #0
 8016640:	d003      	beq.n	801664a <osThreadYield+0x1a>
    stat = osErrorISR;
 8016642:	f06f 0305 	mvn.w	r3, #5
 8016646:	607b      	str	r3, [r7, #4]
 8016648:	e009      	b.n	801665e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801664a:	2300      	movs	r3, #0
 801664c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801664e:	4b07      	ldr	r3, [pc, #28]	; (801666c <osThreadYield+0x3c>)
 8016650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016654:	601a      	str	r2, [r3, #0]
 8016656:	f3bf 8f4f 	dsb	sy
 801665a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801665e:	687b      	ldr	r3, [r7, #4]
}
 8016660:	4618      	mov	r0, r3
 8016662:	370c      	adds	r7, #12
 8016664:	46bd      	mov	sp, r7
 8016666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666a:	4770      	bx	lr
 801666c:	e000ed04 	.word	0xe000ed04

08016670 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8016670:	b580      	push	{r7, lr}
 8016672:	b086      	sub	sp, #24
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801667c:	f3ef 8305 	mrs	r3, IPSR
 8016680:	60fb      	str	r3, [r7, #12]
  return(result);
 8016682:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016684:	2b00      	cmp	r3, #0
 8016686:	d003      	beq.n	8016690 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8016688:	f06f 0305 	mvn.w	r3, #5
 801668c:	617b      	str	r3, [r7, #20]
 801668e:	e00b      	b.n	80166a8 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8016690:	693b      	ldr	r3, [r7, #16]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d103      	bne.n	801669e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8016696:	f06f 0303 	mvn.w	r3, #3
 801669a:	617b      	str	r3, [r7, #20]
 801669c:	e004      	b.n	80166a8 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801669e:	2300      	movs	r3, #0
 80166a0:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80166a2:	6938      	ldr	r0, [r7, #16]
 80166a4:	f001 fb72 	bl	8017d8c <vTaskSuspend>
  }

  return (stat);
 80166a8:	697b      	ldr	r3, [r7, #20]
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3718      	adds	r7, #24
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}

080166b2 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80166b2:	b580      	push	{r7, lr}
 80166b4:	b086      	sub	sp, #24
 80166b6:	af00      	add	r7, sp, #0
 80166b8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80166be:	f3ef 8305 	mrs	r3, IPSR
 80166c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80166c4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d003      	beq.n	80166d2 <osThreadResume+0x20>
    stat = osErrorISR;
 80166ca:	f06f 0305 	mvn.w	r3, #5
 80166ce:	617b      	str	r3, [r7, #20]
 80166d0:	e00b      	b.n	80166ea <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80166d2:	693b      	ldr	r3, [r7, #16]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d103      	bne.n	80166e0 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80166d8:	f06f 0303 	mvn.w	r3, #3
 80166dc:	617b      	str	r3, [r7, #20]
 80166de:	e004      	b.n	80166ea <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80166e0:	2300      	movs	r3, #0
 80166e2:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80166e4:	6938      	ldr	r0, [r7, #16]
 80166e6:	f001 fbf9 	bl	8017edc <vTaskResume>
  }

  return (stat);
 80166ea:	697b      	ldr	r3, [r7, #20]
}
 80166ec:	4618      	mov	r0, r3
 80166ee:	3718      	adds	r7, #24
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}

080166f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b084      	sub	sp, #16
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80166fc:	f3ef 8305 	mrs	r3, IPSR
 8016700:	60bb      	str	r3, [r7, #8]
  return(result);
 8016702:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016704:	2b00      	cmp	r3, #0
 8016706:	d003      	beq.n	8016710 <osDelay+0x1c>
    stat = osErrorISR;
 8016708:	f06f 0305 	mvn.w	r3, #5
 801670c:	60fb      	str	r3, [r7, #12]
 801670e:	e007      	b.n	8016720 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016710:	2300      	movs	r3, #0
 8016712:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d002      	beq.n	8016720 <osDelay+0x2c>
      vTaskDelay(ticks);
 801671a:	6878      	ldr	r0, [r7, #4]
 801671c:	f001 fb02 	bl	8017d24 <vTaskDelay>
    }
  }

  return (stat);
 8016720:	68fb      	ldr	r3, [r7, #12]
}
 8016722:	4618      	mov	r0, r3
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}

0801672a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801672a:	b580      	push	{r7, lr}
 801672c:	b086      	sub	sp, #24
 801672e:	af00      	add	r7, sp, #0
 8016730:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016732:	2300      	movs	r3, #0
 8016734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016736:	f3ef 8305 	mrs	r3, IPSR
 801673a:	60fb      	str	r3, [r7, #12]
  return(result);
 801673c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801673e:	2b00      	cmp	r3, #0
 8016740:	d12d      	bne.n	801679e <osEventFlagsNew+0x74>
    mem = -1;
 8016742:	f04f 33ff 	mov.w	r3, #4294967295
 8016746:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d015      	beq.n	801677a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	689b      	ldr	r3, [r3, #8]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d006      	beq.n	8016764 <osEventFlagsNew+0x3a>
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	68db      	ldr	r3, [r3, #12]
 801675a:	2b1f      	cmp	r3, #31
 801675c:	d902      	bls.n	8016764 <osEventFlagsNew+0x3a>
        mem = 1;
 801675e:	2301      	movs	r3, #1
 8016760:	613b      	str	r3, [r7, #16]
 8016762:	e00c      	b.n	801677e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	689b      	ldr	r3, [r3, #8]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d108      	bne.n	801677e <osEventFlagsNew+0x54>
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d104      	bne.n	801677e <osEventFlagsNew+0x54>
          mem = 0;
 8016774:	2300      	movs	r3, #0
 8016776:	613b      	str	r3, [r7, #16]
 8016778:	e001      	b.n	801677e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801677a:	2300      	movs	r3, #0
 801677c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	2b01      	cmp	r3, #1
 8016782:	d106      	bne.n	8016792 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	689b      	ldr	r3, [r3, #8]
 8016788:	4618      	mov	r0, r3
 801678a:	f000 f91d 	bl	80169c8 <xEventGroupCreateStatic>
 801678e:	6178      	str	r0, [r7, #20]
 8016790:	e005      	b.n	801679e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d102      	bne.n	801679e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016798:	f000 f94d 	bl	8016a36 <xEventGroupCreate>
 801679c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801679e:	697b      	ldr	r3, [r7, #20]
}
 80167a0:	4618      	mov	r0, r3
 80167a2:	3718      	adds	r7, #24
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}

080167a8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b086      	sub	sp, #24
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	6078      	str	r0, [r7, #4]
 80167b0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80167b6:	693b      	ldr	r3, [r7, #16]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d004      	beq.n	80167c6 <osEventFlagsSet+0x1e>
 80167bc:	683b      	ldr	r3, [r7, #0]
 80167be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d003      	beq.n	80167ce <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80167c6:	f06f 0303 	mvn.w	r3, #3
 80167ca:	617b      	str	r3, [r7, #20]
 80167cc:	e028      	b.n	8016820 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80167ce:	f3ef 8305 	mrs	r3, IPSR
 80167d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80167d4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d01d      	beq.n	8016816 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80167da:	2300      	movs	r3, #0
 80167dc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80167de:	f107 0308 	add.w	r3, r7, #8
 80167e2:	461a      	mov	r2, r3
 80167e4:	6839      	ldr	r1, [r7, #0]
 80167e6:	6938      	ldr	r0, [r7, #16]
 80167e8:	f000 fb46 	bl	8016e78 <xEventGroupSetBitsFromISR>
 80167ec:	4603      	mov	r3, r0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d103      	bne.n	80167fa <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80167f2:	f06f 0302 	mvn.w	r3, #2
 80167f6:	617b      	str	r3, [r7, #20]
 80167f8:	e012      	b.n	8016820 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d00d      	beq.n	8016820 <osEventFlagsSet+0x78>
 8016804:	4b09      	ldr	r3, [pc, #36]	; (801682c <osEventFlagsSet+0x84>)
 8016806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801680a:	601a      	str	r2, [r3, #0]
 801680c:	f3bf 8f4f 	dsb	sy
 8016810:	f3bf 8f6f 	isb	sy
 8016814:	e004      	b.n	8016820 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016816:	6839      	ldr	r1, [r7, #0]
 8016818:	6938      	ldr	r0, [r7, #16]
 801681a:	f000 fa65 	bl	8016ce8 <xEventGroupSetBits>
 801681e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016820:	697b      	ldr	r3, [r7, #20]
}
 8016822:	4618      	mov	r0, r3
 8016824:	3718      	adds	r7, #24
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
 801682a:	bf00      	nop
 801682c:	e000ed04 	.word	0xe000ed04

08016830 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016830:	b580      	push	{r7, lr}
 8016832:	b086      	sub	sp, #24
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
 8016838:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801683e:	693b      	ldr	r3, [r7, #16]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d004      	beq.n	801684e <osEventFlagsClear+0x1e>
 8016844:	683b      	ldr	r3, [r7, #0]
 8016846:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801684a:	2b00      	cmp	r3, #0
 801684c:	d003      	beq.n	8016856 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 801684e:	f06f 0303 	mvn.w	r3, #3
 8016852:	617b      	str	r3, [r7, #20]
 8016854:	e019      	b.n	801688a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016856:	f3ef 8305 	mrs	r3, IPSR
 801685a:	60fb      	str	r3, [r7, #12]
  return(result);
 801685c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801685e:	2b00      	cmp	r3, #0
 8016860:	d00e      	beq.n	8016880 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016862:	6938      	ldr	r0, [r7, #16]
 8016864:	f000 fa1c 	bl	8016ca0 <xEventGroupGetBitsFromISR>
 8016868:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801686a:	6839      	ldr	r1, [r7, #0]
 801686c:	6938      	ldr	r0, [r7, #16]
 801686e:	f000 fa03 	bl	8016c78 <xEventGroupClearBitsFromISR>
 8016872:	4603      	mov	r3, r0
 8016874:	2b00      	cmp	r3, #0
 8016876:	d108      	bne.n	801688a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016878:	f06f 0302 	mvn.w	r3, #2
 801687c:	617b      	str	r3, [r7, #20]
 801687e:	e004      	b.n	801688a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016880:	6839      	ldr	r1, [r7, #0]
 8016882:	6938      	ldr	r0, [r7, #16]
 8016884:	f000 f9c0 	bl	8016c08 <xEventGroupClearBits>
 8016888:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801688a:	697b      	ldr	r3, [r7, #20]
}
 801688c:	4618      	mov	r0, r3
 801688e:	3718      	adds	r7, #24
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}

08016894 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016894:	b580      	push	{r7, lr}
 8016896:	b08c      	sub	sp, #48	; 0x30
 8016898:	af02      	add	r7, sp, #8
 801689a:	60f8      	str	r0, [r7, #12]
 801689c:	60b9      	str	r1, [r7, #8]
 801689e:	607a      	str	r2, [r7, #4]
 80168a0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80168a6:	69bb      	ldr	r3, [r7, #24]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d004      	beq.n	80168b6 <osEventFlagsWait+0x22>
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d003      	beq.n	80168be <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80168b6:	f06f 0303 	mvn.w	r3, #3
 80168ba:	61fb      	str	r3, [r7, #28]
 80168bc:	e04b      	b.n	8016956 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80168be:	f3ef 8305 	mrs	r3, IPSR
 80168c2:	617b      	str	r3, [r7, #20]
  return(result);
 80168c4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d003      	beq.n	80168d2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80168ca:	f06f 0305 	mvn.w	r3, #5
 80168ce:	61fb      	str	r3, [r7, #28]
 80168d0:	e041      	b.n	8016956 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	f003 0301 	and.w	r3, r3, #1
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d002      	beq.n	80168e2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80168dc:	2301      	movs	r3, #1
 80168de:	627b      	str	r3, [r7, #36]	; 0x24
 80168e0:	e001      	b.n	80168e6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80168e2:	2300      	movs	r3, #0
 80168e4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f003 0302 	and.w	r3, r3, #2
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d002      	beq.n	80168f6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80168f0:	2300      	movs	r3, #0
 80168f2:	623b      	str	r3, [r7, #32]
 80168f4:	e001      	b.n	80168fa <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80168f6:	2301      	movs	r3, #1
 80168f8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	9300      	str	r3, [sp, #0]
 80168fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016900:	6a3a      	ldr	r2, [r7, #32]
 8016902:	68b9      	ldr	r1, [r7, #8]
 8016904:	69b8      	ldr	r0, [r7, #24]
 8016906:	f000 f8b1 	bl	8016a6c <xEventGroupWaitBits>
 801690a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f003 0301 	and.w	r3, r3, #1
 8016912:	2b00      	cmp	r3, #0
 8016914:	d010      	beq.n	8016938 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016916:	68ba      	ldr	r2, [r7, #8]
 8016918:	69fb      	ldr	r3, [r7, #28]
 801691a:	4013      	ands	r3, r2
 801691c:	68ba      	ldr	r2, [r7, #8]
 801691e:	429a      	cmp	r2, r3
 8016920:	d019      	beq.n	8016956 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d003      	beq.n	8016930 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016928:	f06f 0301 	mvn.w	r3, #1
 801692c:	61fb      	str	r3, [r7, #28]
 801692e:	e012      	b.n	8016956 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016930:	f06f 0302 	mvn.w	r3, #2
 8016934:	61fb      	str	r3, [r7, #28]
 8016936:	e00e      	b.n	8016956 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8016938:	68ba      	ldr	r2, [r7, #8]
 801693a:	69fb      	ldr	r3, [r7, #28]
 801693c:	4013      	ands	r3, r2
 801693e:	2b00      	cmp	r3, #0
 8016940:	d109      	bne.n	8016956 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016942:	683b      	ldr	r3, [r7, #0]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d003      	beq.n	8016950 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8016948:	f06f 0301 	mvn.w	r3, #1
 801694c:	61fb      	str	r3, [r7, #28]
 801694e:	e002      	b.n	8016956 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016950:	f06f 0302 	mvn.w	r3, #2
 8016954:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8016956:	69fb      	ldr	r3, [r7, #28]
}
 8016958:	4618      	mov	r0, r3
 801695a:	3728      	adds	r7, #40	; 0x28
 801695c:	46bd      	mov	sp, r7
 801695e:	bd80      	pop	{r7, pc}

08016960 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016960:	b480      	push	{r7}
 8016962:	b085      	sub	sp, #20
 8016964:	af00      	add	r7, sp, #0
 8016966:	60f8      	str	r0, [r7, #12]
 8016968:	60b9      	str	r1, [r7, #8]
 801696a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	4a07      	ldr	r2, [pc, #28]	; (801698c <vApplicationGetIdleTaskMemory+0x2c>)
 8016970:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016972:	68bb      	ldr	r3, [r7, #8]
 8016974:	4a06      	ldr	r2, [pc, #24]	; (8016990 <vApplicationGetIdleTaskMemory+0x30>)
 8016976:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2280      	movs	r2, #128	; 0x80
 801697c:	601a      	str	r2, [r3, #0]
}
 801697e:	bf00      	nop
 8016980:	3714      	adds	r7, #20
 8016982:	46bd      	mov	sp, r7
 8016984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016988:	4770      	bx	lr
 801698a:	bf00      	nop
 801698c:	2400216c 	.word	0x2400216c
 8016990:	240021c8 	.word	0x240021c8

08016994 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016994:	b480      	push	{r7}
 8016996:	b085      	sub	sp, #20
 8016998:	af00      	add	r7, sp, #0
 801699a:	60f8      	str	r0, [r7, #12]
 801699c:	60b9      	str	r1, [r7, #8]
 801699e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	4a07      	ldr	r2, [pc, #28]	; (80169c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80169a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80169a6:	68bb      	ldr	r3, [r7, #8]
 80169a8:	4a06      	ldr	r2, [pc, #24]	; (80169c4 <vApplicationGetTimerTaskMemory+0x30>)
 80169aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80169b2:	601a      	str	r2, [r3, #0]
}
 80169b4:	bf00      	nop
 80169b6:	3714      	adds	r7, #20
 80169b8:	46bd      	mov	sp, r7
 80169ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169be:	4770      	bx	lr
 80169c0:	240023c8 	.word	0x240023c8
 80169c4:	24002424 	.word	0x24002424

080169c8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b086      	sub	sp, #24
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d10a      	bne.n	80169ec <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80169d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169da:	f383 8811 	msr	BASEPRI, r3
 80169de:	f3bf 8f6f 	isb	sy
 80169e2:	f3bf 8f4f 	dsb	sy
 80169e6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80169e8:	bf00      	nop
 80169ea:	e7fe      	b.n	80169ea <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80169ec:	2320      	movs	r3, #32
 80169ee:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80169f0:	68bb      	ldr	r3, [r7, #8]
 80169f2:	2b20      	cmp	r3, #32
 80169f4:	d00a      	beq.n	8016a0c <xEventGroupCreateStatic+0x44>
	__asm volatile
 80169f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169fa:	f383 8811 	msr	BASEPRI, r3
 80169fe:	f3bf 8f6f 	isb	sy
 8016a02:	f3bf 8f4f 	dsb	sy
 8016a06:	60fb      	str	r3, [r7, #12]
}
 8016a08:	bf00      	nop
 8016a0a:	e7fe      	b.n	8016a0a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8016a10:	697b      	ldr	r3, [r7, #20]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d00a      	beq.n	8016a2c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8016a16:	697b      	ldr	r3, [r7, #20]
 8016a18:	2200      	movs	r2, #0
 8016a1a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016a1c:	697b      	ldr	r3, [r7, #20]
 8016a1e:	3304      	adds	r3, #4
 8016a20:	4618      	mov	r0, r3
 8016a22:	f000 fa3d 	bl	8016ea0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	2201      	movs	r2, #1
 8016a2a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8016a2c:	697b      	ldr	r3, [r7, #20]
	}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	3718      	adds	r7, #24
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}

08016a36 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8016a36:	b580      	push	{r7, lr}
 8016a38:	b082      	sub	sp, #8
 8016a3a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8016a3c:	2020      	movs	r0, #32
 8016a3e:	f002 fe5b 	bl	80196f8 <pvPortMalloc>
 8016a42:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d00a      	beq.n	8016a60 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	3304      	adds	r3, #4
 8016a54:	4618      	mov	r0, r3
 8016a56:	f000 fa23 	bl	8016ea0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8016a60:	687b      	ldr	r3, [r7, #4]
	}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3708      	adds	r7, #8
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
	...

08016a6c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b090      	sub	sp, #64	; 0x40
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	60f8      	str	r0, [r7, #12]
 8016a74:	60b9      	str	r1, [r7, #8]
 8016a76:	607a      	str	r2, [r7, #4]
 8016a78:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8016a82:	2300      	movs	r3, #0
 8016a84:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d10a      	bne.n	8016aa2 <xEventGroupWaitBits+0x36>
	__asm volatile
 8016a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a90:	f383 8811 	msr	BASEPRI, r3
 8016a94:	f3bf 8f6f 	isb	sy
 8016a98:	f3bf 8f4f 	dsb	sy
 8016a9c:	623b      	str	r3, [r7, #32]
}
 8016a9e:	bf00      	nop
 8016aa0:	e7fe      	b.n	8016aa0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016aa2:	68bb      	ldr	r3, [r7, #8]
 8016aa4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d00a      	beq.n	8016ac2 <xEventGroupWaitBits+0x56>
	__asm volatile
 8016aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab0:	f383 8811 	msr	BASEPRI, r3
 8016ab4:	f3bf 8f6f 	isb	sy
 8016ab8:	f3bf 8f4f 	dsb	sy
 8016abc:	61fb      	str	r3, [r7, #28]
}
 8016abe:	bf00      	nop
 8016ac0:	e7fe      	b.n	8016ac0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8016ac2:	68bb      	ldr	r3, [r7, #8]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d10a      	bne.n	8016ade <xEventGroupWaitBits+0x72>
	__asm volatile
 8016ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016acc:	f383 8811 	msr	BASEPRI, r3
 8016ad0:	f3bf 8f6f 	isb	sy
 8016ad4:	f3bf 8f4f 	dsb	sy
 8016ad8:	61bb      	str	r3, [r7, #24]
}
 8016ada:	bf00      	nop
 8016adc:	e7fe      	b.n	8016adc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016ade:	f001 ff57 	bl	8018990 <xTaskGetSchedulerState>
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d102      	bne.n	8016aee <xEventGroupWaitBits+0x82>
 8016ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d101      	bne.n	8016af2 <xEventGroupWaitBits+0x86>
 8016aee:	2301      	movs	r3, #1
 8016af0:	e000      	b.n	8016af4 <xEventGroupWaitBits+0x88>
 8016af2:	2300      	movs	r3, #0
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d10a      	bne.n	8016b0e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8016af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016afc:	f383 8811 	msr	BASEPRI, r3
 8016b00:	f3bf 8f6f 	isb	sy
 8016b04:	f3bf 8f4f 	dsb	sy
 8016b08:	617b      	str	r3, [r7, #20]
}
 8016b0a:	bf00      	nop
 8016b0c:	e7fe      	b.n	8016b0c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8016b0e:	f001 faa9 	bl	8018064 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8016b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8016b18:	683a      	ldr	r2, [r7, #0]
 8016b1a:	68b9      	ldr	r1, [r7, #8]
 8016b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016b1e:	f000 f988 	bl	8016e32 <prvTestWaitCondition>
 8016b22:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8016b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d00e      	beq.n	8016b48 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8016b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8016b2e:	2300      	movs	r3, #0
 8016b30:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d028      	beq.n	8016b8a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b3a:	681a      	ldr	r2, [r3, #0]
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	43db      	mvns	r3, r3
 8016b40:	401a      	ands	r2, r3
 8016b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b44:	601a      	str	r2, [r3, #0]
 8016b46:	e020      	b.n	8016b8a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8016b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d104      	bne.n	8016b58 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8016b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b50:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8016b52:	2301      	movs	r3, #1
 8016b54:	633b      	str	r3, [r7, #48]	; 0x30
 8016b56:	e018      	b.n	8016b8a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d003      	beq.n	8016b66 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8016b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016b64:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8016b66:	683b      	ldr	r3, [r7, #0]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d003      	beq.n	8016b74 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8016b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016b72:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8016b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b76:	1d18      	adds	r0, r3, #4
 8016b78:	68ba      	ldr	r2, [r7, #8]
 8016b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b7c:	4313      	orrs	r3, r2
 8016b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016b80:	4619      	mov	r1, r3
 8016b82:	f001 fc7d 	bl	8018480 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8016b86:	2300      	movs	r3, #0
 8016b88:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8016b8a:	f001 fa79 	bl	8018080 <xTaskResumeAll>
 8016b8e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8016b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d031      	beq.n	8016bfa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8016b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d107      	bne.n	8016bac <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8016b9c:	4b19      	ldr	r3, [pc, #100]	; (8016c04 <xEventGroupWaitBits+0x198>)
 8016b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ba2:	601a      	str	r2, [r3, #0]
 8016ba4:	f3bf 8f4f 	dsb	sy
 8016ba8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8016bac:	f001 ff7c 	bl	8018aa8 <uxTaskResetEventItemValue>
 8016bb0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8016bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d11a      	bne.n	8016bf2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8016bbc:	f002 fc7a 	bl	80194b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8016bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8016bc6:	683a      	ldr	r2, [r7, #0]
 8016bc8:	68b9      	ldr	r1, [r7, #8]
 8016bca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016bcc:	f000 f931 	bl	8016e32 <prvTestWaitCondition>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d009      	beq.n	8016bea <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d006      	beq.n	8016bea <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	43db      	mvns	r3, r3
 8016be4:	401a      	ands	r2, r3
 8016be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016be8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8016bea:	2301      	movs	r3, #1
 8016bec:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8016bee:	f002 fc91 	bl	8019514 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8016bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8016bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	3740      	adds	r7, #64	; 0x40
 8016c00:	46bd      	mov	sp, r7
 8016c02:	bd80      	pop	{r7, pc}
 8016c04:	e000ed04 	.word	0xe000ed04

08016c08 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b086      	sub	sp, #24
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
 8016c10:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d10a      	bne.n	8016c32 <xEventGroupClearBits+0x2a>
	__asm volatile
 8016c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c20:	f383 8811 	msr	BASEPRI, r3
 8016c24:	f3bf 8f6f 	isb	sy
 8016c28:	f3bf 8f4f 	dsb	sy
 8016c2c:	60fb      	str	r3, [r7, #12]
}
 8016c2e:	bf00      	nop
 8016c30:	e7fe      	b.n	8016c30 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d00a      	beq.n	8016c52 <xEventGroupClearBits+0x4a>
	__asm volatile
 8016c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c40:	f383 8811 	msr	BASEPRI, r3
 8016c44:	f3bf 8f6f 	isb	sy
 8016c48:	f3bf 8f4f 	dsb	sy
 8016c4c:	60bb      	str	r3, [r7, #8]
}
 8016c4e:	bf00      	nop
 8016c50:	e7fe      	b.n	8016c50 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8016c52:	f002 fc2f 	bl	80194b4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8016c56:	697b      	ldr	r3, [r7, #20]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8016c5c:	697b      	ldr	r3, [r7, #20]
 8016c5e:	681a      	ldr	r2, [r3, #0]
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	43db      	mvns	r3, r3
 8016c64:	401a      	ands	r2, r3
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8016c6a:	f002 fc53 	bl	8019514 <vPortExitCritical>

	return uxReturn;
 8016c6e:	693b      	ldr	r3, [r7, #16]
}
 8016c70:	4618      	mov	r0, r3
 8016c72:	3718      	adds	r7, #24
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}

08016c78 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b084      	sub	sp, #16
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8016c82:	2300      	movs	r3, #0
 8016c84:	683a      	ldr	r2, [r7, #0]
 8016c86:	6879      	ldr	r1, [r7, #4]
 8016c88:	4804      	ldr	r0, [pc, #16]	; (8016c9c <xEventGroupClearBitsFromISR+0x24>)
 8016c8a:	f002 fac7 	bl	801921c <xTimerPendFunctionCallFromISR>
 8016c8e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8016c90:	68fb      	ldr	r3, [r7, #12]
	}
 8016c92:	4618      	mov	r0, r3
 8016c94:	3710      	adds	r7, #16
 8016c96:	46bd      	mov	sp, r7
 8016c98:	bd80      	pop	{r7, pc}
 8016c9a:	bf00      	nop
 8016c9c:	08016e19 	.word	0x08016e19

08016ca0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b089      	sub	sp, #36	; 0x24
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016cac:	f3ef 8211 	mrs	r2, BASEPRI
 8016cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb4:	f383 8811 	msr	BASEPRI, r3
 8016cb8:	f3bf 8f6f 	isb	sy
 8016cbc:	f3bf 8f4f 	dsb	sy
 8016cc0:	60fa      	str	r2, [r7, #12]
 8016cc2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016cc4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016cc6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8016cc8:	69fb      	ldr	r3, [r7, #28]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	617b      	str	r3, [r7, #20]
 8016cce:	69bb      	ldr	r3, [r7, #24]
 8016cd0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016cd8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8016cda:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3724      	adds	r7, #36	; 0x24
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce6:	4770      	bx	lr

08016ce8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b08e      	sub	sp, #56	; 0x38
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
 8016cf0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d10a      	bne.n	8016d1a <xEventGroupSetBits+0x32>
	__asm volatile
 8016d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d08:	f383 8811 	msr	BASEPRI, r3
 8016d0c:	f3bf 8f6f 	isb	sy
 8016d10:	f3bf 8f4f 	dsb	sy
 8016d14:	613b      	str	r3, [r7, #16]
}
 8016d16:	bf00      	nop
 8016d18:	e7fe      	b.n	8016d18 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d00a      	beq.n	8016d3a <xEventGroupSetBits+0x52>
	__asm volatile
 8016d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d28:	f383 8811 	msr	BASEPRI, r3
 8016d2c:	f3bf 8f6f 	isb	sy
 8016d30:	f3bf 8f4f 	dsb	sy
 8016d34:	60fb      	str	r3, [r7, #12]
}
 8016d36:	bf00      	nop
 8016d38:	e7fe      	b.n	8016d38 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8016d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d3c:	3304      	adds	r3, #4
 8016d3e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d42:	3308      	adds	r3, #8
 8016d44:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8016d46:	f001 f98d 	bl	8018064 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8016d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4c:	68db      	ldr	r3, [r3, #12]
 8016d4e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8016d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d52:	681a      	ldr	r2, [r3, #0]
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	431a      	orrs	r2, r3
 8016d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d5a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8016d5c:	e03c      	b.n	8016dd8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8016d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d60:	685b      	ldr	r3, [r3, #4]
 8016d62:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8016d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8016d6e:	69bb      	ldr	r3, [r7, #24]
 8016d70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016d74:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8016d76:	69bb      	ldr	r3, [r7, #24]
 8016d78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016d7c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d108      	bne.n	8016d9a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8016d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	69bb      	ldr	r3, [r7, #24]
 8016d8e:	4013      	ands	r3, r2
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d00b      	beq.n	8016dac <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8016d94:	2301      	movs	r3, #1
 8016d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d98:	e008      	b.n	8016dac <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8016d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	69bb      	ldr	r3, [r7, #24]
 8016da0:	4013      	ands	r3, r2
 8016da2:	69ba      	ldr	r2, [r7, #24]
 8016da4:	429a      	cmp	r2, r3
 8016da6:	d101      	bne.n	8016dac <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8016da8:	2301      	movs	r3, #1
 8016daa:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8016dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d010      	beq.n	8016dd4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d003      	beq.n	8016dc4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8016dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016dbe:	69bb      	ldr	r3, [r7, #24]
 8016dc0:	4313      	orrs	r3, r2
 8016dc2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8016dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016dcc:	4619      	mov	r1, r3
 8016dce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016dd0:	f001 fc22 	bl	8018618 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8016dd4:	69fb      	ldr	r3, [r7, #28]
 8016dd6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8016dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016dda:	6a3b      	ldr	r3, [r7, #32]
 8016ddc:	429a      	cmp	r2, r3
 8016dde:	d1be      	bne.n	8016d5e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8016de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de2:	681a      	ldr	r2, [r3, #0]
 8016de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de6:	43db      	mvns	r3, r3
 8016de8:	401a      	ands	r2, r3
 8016dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dec:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8016dee:	f001 f947 	bl	8018080 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8016df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df4:	681b      	ldr	r3, [r3, #0]
}
 8016df6:	4618      	mov	r0, r3
 8016df8:	3738      	adds	r7, #56	; 0x38
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}

08016dfe <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8016dfe:	b580      	push	{r7, lr}
 8016e00:	b082      	sub	sp, #8
 8016e02:	af00      	add	r7, sp, #0
 8016e04:	6078      	str	r0, [r7, #4]
 8016e06:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8016e08:	6839      	ldr	r1, [r7, #0]
 8016e0a:	6878      	ldr	r0, [r7, #4]
 8016e0c:	f7ff ff6c 	bl	8016ce8 <xEventGroupSetBits>
}
 8016e10:	bf00      	nop
 8016e12:	3708      	adds	r7, #8
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b082      	sub	sp, #8
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
 8016e20:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8016e22:	6839      	ldr	r1, [r7, #0]
 8016e24:	6878      	ldr	r0, [r7, #4]
 8016e26:	f7ff feef 	bl	8016c08 <xEventGroupClearBits>
}
 8016e2a:	bf00      	nop
 8016e2c:	3708      	adds	r7, #8
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}

08016e32 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8016e32:	b480      	push	{r7}
 8016e34:	b087      	sub	sp, #28
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	60f8      	str	r0, [r7, #12]
 8016e3a:	60b9      	str	r1, [r7, #8]
 8016e3c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8016e3e:	2300      	movs	r3, #0
 8016e40:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d107      	bne.n	8016e58 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8016e48:	68fa      	ldr	r2, [r7, #12]
 8016e4a:	68bb      	ldr	r3, [r7, #8]
 8016e4c:	4013      	ands	r3, r2
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d00a      	beq.n	8016e68 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8016e52:	2301      	movs	r3, #1
 8016e54:	617b      	str	r3, [r7, #20]
 8016e56:	e007      	b.n	8016e68 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8016e58:	68fa      	ldr	r2, [r7, #12]
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	4013      	ands	r3, r2
 8016e5e:	68ba      	ldr	r2, [r7, #8]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d101      	bne.n	8016e68 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8016e64:	2301      	movs	r3, #1
 8016e66:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8016e68:	697b      	ldr	r3, [r7, #20]
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	371c      	adds	r7, #28
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e74:	4770      	bx	lr
	...

08016e78 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b086      	sub	sp, #24
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	60f8      	str	r0, [r7, #12]
 8016e80:	60b9      	str	r1, [r7, #8]
 8016e82:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	68ba      	ldr	r2, [r7, #8]
 8016e88:	68f9      	ldr	r1, [r7, #12]
 8016e8a:	4804      	ldr	r0, [pc, #16]	; (8016e9c <xEventGroupSetBitsFromISR+0x24>)
 8016e8c:	f002 f9c6 	bl	801921c <xTimerPendFunctionCallFromISR>
 8016e90:	6178      	str	r0, [r7, #20]

		return xReturn;
 8016e92:	697b      	ldr	r3, [r7, #20]
	}
 8016e94:	4618      	mov	r0, r3
 8016e96:	3718      	adds	r7, #24
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd80      	pop	{r7, pc}
 8016e9c:	08016dff 	.word	0x08016dff

08016ea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016ea0:	b480      	push	{r7}
 8016ea2:	b083      	sub	sp, #12
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	f103 0208 	add.w	r2, r3, #8
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8016eb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f103 0208 	add.w	r2, r3, #8
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	f103 0208 	add.w	r2, r3, #8
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016ed4:	bf00      	nop
 8016ed6:	370c      	adds	r7, #12
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ede:	4770      	bx	lr

08016ee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016ee0:	b480      	push	{r7}
 8016ee2:	b083      	sub	sp, #12
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2200      	movs	r2, #0
 8016eec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016eee:	bf00      	nop
 8016ef0:	370c      	adds	r7, #12
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef8:	4770      	bx	lr

08016efa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016efa:	b480      	push	{r7}
 8016efc:	b085      	sub	sp, #20
 8016efe:	af00      	add	r7, sp, #0
 8016f00:	6078      	str	r0, [r7, #4]
 8016f02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	685b      	ldr	r3, [r3, #4]
 8016f08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	68fa      	ldr	r2, [r7, #12]
 8016f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	689a      	ldr	r2, [r3, #8]
 8016f14:	683b      	ldr	r3, [r7, #0]
 8016f16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	689b      	ldr	r3, [r3, #8]
 8016f1c:	683a      	ldr	r2, [r7, #0]
 8016f1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	683a      	ldr	r2, [r7, #0]
 8016f24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016f26:	683b      	ldr	r3, [r7, #0]
 8016f28:	687a      	ldr	r2, [r7, #4]
 8016f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	1c5a      	adds	r2, r3, #1
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	601a      	str	r2, [r3, #0]
}
 8016f36:	bf00      	nop
 8016f38:	3714      	adds	r7, #20
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f40:	4770      	bx	lr

08016f42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016f42:	b480      	push	{r7}
 8016f44:	b085      	sub	sp, #20
 8016f46:	af00      	add	r7, sp, #0
 8016f48:	6078      	str	r0, [r7, #4]
 8016f4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f58:	d103      	bne.n	8016f62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	691b      	ldr	r3, [r3, #16]
 8016f5e:	60fb      	str	r3, [r7, #12]
 8016f60:	e00c      	b.n	8016f7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	3308      	adds	r3, #8
 8016f66:	60fb      	str	r3, [r7, #12]
 8016f68:	e002      	b.n	8016f70 <vListInsert+0x2e>
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	685b      	ldr	r3, [r3, #4]
 8016f6e:	60fb      	str	r3, [r7, #12]
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	685b      	ldr	r3, [r3, #4]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	68ba      	ldr	r2, [r7, #8]
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d2f6      	bcs.n	8016f6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	685a      	ldr	r2, [r3, #4]
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016f84:	683b      	ldr	r3, [r7, #0]
 8016f86:	685b      	ldr	r3, [r3, #4]
 8016f88:	683a      	ldr	r2, [r7, #0]
 8016f8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	68fa      	ldr	r2, [r7, #12]
 8016f90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	683a      	ldr	r2, [r7, #0]
 8016f96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	687a      	ldr	r2, [r7, #4]
 8016f9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	1c5a      	adds	r2, r3, #1
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	601a      	str	r2, [r3, #0]
}
 8016fa8:	bf00      	nop
 8016faa:	3714      	adds	r7, #20
 8016fac:	46bd      	mov	sp, r7
 8016fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb2:	4770      	bx	lr

08016fb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016fb4:	b480      	push	{r7}
 8016fb6:	b085      	sub	sp, #20
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	691b      	ldr	r3, [r3, #16]
 8016fc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	685b      	ldr	r3, [r3, #4]
 8016fc6:	687a      	ldr	r2, [r7, #4]
 8016fc8:	6892      	ldr	r2, [r2, #8]
 8016fca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	689b      	ldr	r3, [r3, #8]
 8016fd0:	687a      	ldr	r2, [r7, #4]
 8016fd2:	6852      	ldr	r2, [r2, #4]
 8016fd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	685b      	ldr	r3, [r3, #4]
 8016fda:	687a      	ldr	r2, [r7, #4]
 8016fdc:	429a      	cmp	r2, r3
 8016fde:	d103      	bne.n	8016fe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	689a      	ldr	r2, [r3, #8]
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	2200      	movs	r2, #0
 8016fec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	1e5a      	subs	r2, r3, #1
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	681b      	ldr	r3, [r3, #0]
}
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3714      	adds	r7, #20
 8017000:	46bd      	mov	sp, r7
 8017002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017006:	4770      	bx	lr

08017008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b084      	sub	sp, #16
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
 8017010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d10a      	bne.n	8017032 <xQueueGenericReset+0x2a>
	__asm volatile
 801701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017020:	f383 8811 	msr	BASEPRI, r3
 8017024:	f3bf 8f6f 	isb	sy
 8017028:	f3bf 8f4f 	dsb	sy
 801702c:	60bb      	str	r3, [r7, #8]
}
 801702e:	bf00      	nop
 8017030:	e7fe      	b.n	8017030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017032:	f002 fa3f 	bl	80194b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	681a      	ldr	r2, [r3, #0]
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801703e:	68f9      	ldr	r1, [r7, #12]
 8017040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017042:	fb01 f303 	mul.w	r3, r1, r3
 8017046:	441a      	add	r2, r3
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	2200      	movs	r2, #0
 8017050:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	681a      	ldr	r2, [r3, #0]
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	681a      	ldr	r2, [r3, #0]
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017062:	3b01      	subs	r3, #1
 8017064:	68f9      	ldr	r1, [r7, #12]
 8017066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017068:	fb01 f303 	mul.w	r3, r1, r3
 801706c:	441a      	add	r2, r3
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	22ff      	movs	r2, #255	; 0xff
 8017076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	22ff      	movs	r2, #255	; 0xff
 801707e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d114      	bne.n	80170b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	691b      	ldr	r3, [r3, #16]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d01a      	beq.n	80170c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	3310      	adds	r3, #16
 8017094:	4618      	mov	r0, r3
 8017096:	f001 fa5b 	bl	8018550 <xTaskRemoveFromEventList>
 801709a:	4603      	mov	r3, r0
 801709c:	2b00      	cmp	r3, #0
 801709e:	d012      	beq.n	80170c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80170a0:	4b0c      	ldr	r3, [pc, #48]	; (80170d4 <xQueueGenericReset+0xcc>)
 80170a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170a6:	601a      	str	r2, [r3, #0]
 80170a8:	f3bf 8f4f 	dsb	sy
 80170ac:	f3bf 8f6f 	isb	sy
 80170b0:	e009      	b.n	80170c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	3310      	adds	r3, #16
 80170b6:	4618      	mov	r0, r3
 80170b8:	f7ff fef2 	bl	8016ea0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	3324      	adds	r3, #36	; 0x24
 80170c0:	4618      	mov	r0, r3
 80170c2:	f7ff feed 	bl	8016ea0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80170c6:	f002 fa25 	bl	8019514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80170ca:	2301      	movs	r3, #1
}
 80170cc:	4618      	mov	r0, r3
 80170ce:	3710      	adds	r7, #16
 80170d0:	46bd      	mov	sp, r7
 80170d2:	bd80      	pop	{r7, pc}
 80170d4:	e000ed04 	.word	0xe000ed04

080170d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b08e      	sub	sp, #56	; 0x38
 80170dc:	af02      	add	r7, sp, #8
 80170de:	60f8      	str	r0, [r7, #12]
 80170e0:	60b9      	str	r1, [r7, #8]
 80170e2:	607a      	str	r2, [r7, #4]
 80170e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d10a      	bne.n	8017102 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80170ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f0:	f383 8811 	msr	BASEPRI, r3
 80170f4:	f3bf 8f6f 	isb	sy
 80170f8:	f3bf 8f4f 	dsb	sy
 80170fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80170fe:	bf00      	nop
 8017100:	e7fe      	b.n	8017100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017102:	683b      	ldr	r3, [r7, #0]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d10a      	bne.n	801711e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801710c:	f383 8811 	msr	BASEPRI, r3
 8017110:	f3bf 8f6f 	isb	sy
 8017114:	f3bf 8f4f 	dsb	sy
 8017118:	627b      	str	r3, [r7, #36]	; 0x24
}
 801711a:	bf00      	nop
 801711c:	e7fe      	b.n	801711c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d002      	beq.n	801712a <xQueueGenericCreateStatic+0x52>
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d001      	beq.n	801712e <xQueueGenericCreateStatic+0x56>
 801712a:	2301      	movs	r3, #1
 801712c:	e000      	b.n	8017130 <xQueueGenericCreateStatic+0x58>
 801712e:	2300      	movs	r3, #0
 8017130:	2b00      	cmp	r3, #0
 8017132:	d10a      	bne.n	801714a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017138:	f383 8811 	msr	BASEPRI, r3
 801713c:	f3bf 8f6f 	isb	sy
 8017140:	f3bf 8f4f 	dsb	sy
 8017144:	623b      	str	r3, [r7, #32]
}
 8017146:	bf00      	nop
 8017148:	e7fe      	b.n	8017148 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d102      	bne.n	8017156 <xQueueGenericCreateStatic+0x7e>
 8017150:	68bb      	ldr	r3, [r7, #8]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d101      	bne.n	801715a <xQueueGenericCreateStatic+0x82>
 8017156:	2301      	movs	r3, #1
 8017158:	e000      	b.n	801715c <xQueueGenericCreateStatic+0x84>
 801715a:	2300      	movs	r3, #0
 801715c:	2b00      	cmp	r3, #0
 801715e:	d10a      	bne.n	8017176 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017164:	f383 8811 	msr	BASEPRI, r3
 8017168:	f3bf 8f6f 	isb	sy
 801716c:	f3bf 8f4f 	dsb	sy
 8017170:	61fb      	str	r3, [r7, #28]
}
 8017172:	bf00      	nop
 8017174:	e7fe      	b.n	8017174 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017176:	2350      	movs	r3, #80	; 0x50
 8017178:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801717a:	697b      	ldr	r3, [r7, #20]
 801717c:	2b50      	cmp	r3, #80	; 0x50
 801717e:	d00a      	beq.n	8017196 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017184:	f383 8811 	msr	BASEPRI, r3
 8017188:	f3bf 8f6f 	isb	sy
 801718c:	f3bf 8f4f 	dsb	sy
 8017190:	61bb      	str	r3, [r7, #24]
}
 8017192:	bf00      	nop
 8017194:	e7fe      	b.n	8017194 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017196:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d00d      	beq.n	80171be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80171a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a4:	2201      	movs	r2, #1
 80171a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80171aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80171ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171b0:	9300      	str	r3, [sp, #0]
 80171b2:	4613      	mov	r3, r2
 80171b4:	687a      	ldr	r2, [r7, #4]
 80171b6:	68b9      	ldr	r1, [r7, #8]
 80171b8:	68f8      	ldr	r0, [r7, #12]
 80171ba:	f000 f805 	bl	80171c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80171be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80171c0:	4618      	mov	r0, r3
 80171c2:	3730      	adds	r7, #48	; 0x30
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bd80      	pop	{r7, pc}

080171c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b084      	sub	sp, #16
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	60f8      	str	r0, [r7, #12]
 80171d0:	60b9      	str	r1, [r7, #8]
 80171d2:	607a      	str	r2, [r7, #4]
 80171d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80171d6:	68bb      	ldr	r3, [r7, #8]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d103      	bne.n	80171e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80171dc:	69bb      	ldr	r3, [r7, #24]
 80171de:	69ba      	ldr	r2, [r7, #24]
 80171e0:	601a      	str	r2, [r3, #0]
 80171e2:	e002      	b.n	80171ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80171e4:	69bb      	ldr	r3, [r7, #24]
 80171e6:	687a      	ldr	r2, [r7, #4]
 80171e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80171ea:	69bb      	ldr	r3, [r7, #24]
 80171ec:	68fa      	ldr	r2, [r7, #12]
 80171ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80171f0:	69bb      	ldr	r3, [r7, #24]
 80171f2:	68ba      	ldr	r2, [r7, #8]
 80171f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80171f6:	2101      	movs	r1, #1
 80171f8:	69b8      	ldr	r0, [r7, #24]
 80171fa:	f7ff ff05 	bl	8017008 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80171fe:	69bb      	ldr	r3, [r7, #24]
 8017200:	78fa      	ldrb	r2, [r7, #3]
 8017202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017206:	bf00      	nop
 8017208:	3710      	adds	r7, #16
 801720a:	46bd      	mov	sp, r7
 801720c:	bd80      	pop	{r7, pc}
	...

08017210 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b08e      	sub	sp, #56	; 0x38
 8017214:	af00      	add	r7, sp, #0
 8017216:	60f8      	str	r0, [r7, #12]
 8017218:	60b9      	str	r1, [r7, #8]
 801721a:	607a      	str	r2, [r7, #4]
 801721c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801721e:	2300      	movs	r3, #0
 8017220:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017228:	2b00      	cmp	r3, #0
 801722a:	d10a      	bne.n	8017242 <xQueueGenericSend+0x32>
	__asm volatile
 801722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017230:	f383 8811 	msr	BASEPRI, r3
 8017234:	f3bf 8f6f 	isb	sy
 8017238:	f3bf 8f4f 	dsb	sy
 801723c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801723e:	bf00      	nop
 8017240:	e7fe      	b.n	8017240 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017242:	68bb      	ldr	r3, [r7, #8]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d103      	bne.n	8017250 <xQueueGenericSend+0x40>
 8017248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801724c:	2b00      	cmp	r3, #0
 801724e:	d101      	bne.n	8017254 <xQueueGenericSend+0x44>
 8017250:	2301      	movs	r3, #1
 8017252:	e000      	b.n	8017256 <xQueueGenericSend+0x46>
 8017254:	2300      	movs	r3, #0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d10a      	bne.n	8017270 <xQueueGenericSend+0x60>
	__asm volatile
 801725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801725e:	f383 8811 	msr	BASEPRI, r3
 8017262:	f3bf 8f6f 	isb	sy
 8017266:	f3bf 8f4f 	dsb	sy
 801726a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801726c:	bf00      	nop
 801726e:	e7fe      	b.n	801726e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	2b02      	cmp	r3, #2
 8017274:	d103      	bne.n	801727e <xQueueGenericSend+0x6e>
 8017276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801727a:	2b01      	cmp	r3, #1
 801727c:	d101      	bne.n	8017282 <xQueueGenericSend+0x72>
 801727e:	2301      	movs	r3, #1
 8017280:	e000      	b.n	8017284 <xQueueGenericSend+0x74>
 8017282:	2300      	movs	r3, #0
 8017284:	2b00      	cmp	r3, #0
 8017286:	d10a      	bne.n	801729e <xQueueGenericSend+0x8e>
	__asm volatile
 8017288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801728c:	f383 8811 	msr	BASEPRI, r3
 8017290:	f3bf 8f6f 	isb	sy
 8017294:	f3bf 8f4f 	dsb	sy
 8017298:	623b      	str	r3, [r7, #32]
}
 801729a:	bf00      	nop
 801729c:	e7fe      	b.n	801729c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801729e:	f001 fb77 	bl	8018990 <xTaskGetSchedulerState>
 80172a2:	4603      	mov	r3, r0
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d102      	bne.n	80172ae <xQueueGenericSend+0x9e>
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d101      	bne.n	80172b2 <xQueueGenericSend+0xa2>
 80172ae:	2301      	movs	r3, #1
 80172b0:	e000      	b.n	80172b4 <xQueueGenericSend+0xa4>
 80172b2:	2300      	movs	r3, #0
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d10a      	bne.n	80172ce <xQueueGenericSend+0xbe>
	__asm volatile
 80172b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172bc:	f383 8811 	msr	BASEPRI, r3
 80172c0:	f3bf 8f6f 	isb	sy
 80172c4:	f3bf 8f4f 	dsb	sy
 80172c8:	61fb      	str	r3, [r7, #28]
}
 80172ca:	bf00      	nop
 80172cc:	e7fe      	b.n	80172cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80172ce:	f002 f8f1 	bl	80194b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80172d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80172d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172da:	429a      	cmp	r2, r3
 80172dc:	d302      	bcc.n	80172e4 <xQueueGenericSend+0xd4>
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	2b02      	cmp	r3, #2
 80172e2:	d129      	bne.n	8017338 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80172e4:	683a      	ldr	r2, [r7, #0]
 80172e6:	68b9      	ldr	r1, [r7, #8]
 80172e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172ea:	f000 fa0b 	bl	8017704 <prvCopyDataToQueue>
 80172ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80172f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d010      	beq.n	801731a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80172f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172fa:	3324      	adds	r3, #36	; 0x24
 80172fc:	4618      	mov	r0, r3
 80172fe:	f001 f927 	bl	8018550 <xTaskRemoveFromEventList>
 8017302:	4603      	mov	r3, r0
 8017304:	2b00      	cmp	r3, #0
 8017306:	d013      	beq.n	8017330 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017308:	4b3f      	ldr	r3, [pc, #252]	; (8017408 <xQueueGenericSend+0x1f8>)
 801730a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801730e:	601a      	str	r2, [r3, #0]
 8017310:	f3bf 8f4f 	dsb	sy
 8017314:	f3bf 8f6f 	isb	sy
 8017318:	e00a      	b.n	8017330 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801731c:	2b00      	cmp	r3, #0
 801731e:	d007      	beq.n	8017330 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017320:	4b39      	ldr	r3, [pc, #228]	; (8017408 <xQueueGenericSend+0x1f8>)
 8017322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017326:	601a      	str	r2, [r3, #0]
 8017328:	f3bf 8f4f 	dsb	sy
 801732c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017330:	f002 f8f0 	bl	8019514 <vPortExitCritical>
				return pdPASS;
 8017334:	2301      	movs	r3, #1
 8017336:	e063      	b.n	8017400 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d103      	bne.n	8017346 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801733e:	f002 f8e9 	bl	8019514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017342:	2300      	movs	r3, #0
 8017344:	e05c      	b.n	8017400 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017348:	2b00      	cmp	r3, #0
 801734a:	d106      	bne.n	801735a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801734c:	f107 0314 	add.w	r3, r7, #20
 8017350:	4618      	mov	r0, r3
 8017352:	f001 f9c3 	bl	80186dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017356:	2301      	movs	r3, #1
 8017358:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801735a:	f002 f8db 	bl	8019514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801735e:	f000 fe81 	bl	8018064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017362:	f002 f8a7 	bl	80194b4 <vPortEnterCritical>
 8017366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801736c:	b25b      	sxtb	r3, r3
 801736e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017372:	d103      	bne.n	801737c <xQueueGenericSend+0x16c>
 8017374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017376:	2200      	movs	r2, #0
 8017378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801737e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017382:	b25b      	sxtb	r3, r3
 8017384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017388:	d103      	bne.n	8017392 <xQueueGenericSend+0x182>
 801738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801738c:	2200      	movs	r2, #0
 801738e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017392:	f002 f8bf 	bl	8019514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017396:	1d3a      	adds	r2, r7, #4
 8017398:	f107 0314 	add.w	r3, r7, #20
 801739c:	4611      	mov	r1, r2
 801739e:	4618      	mov	r0, r3
 80173a0:	f001 f9b2 	bl	8018708 <xTaskCheckForTimeOut>
 80173a4:	4603      	mov	r3, r0
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d124      	bne.n	80173f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80173aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173ac:	f000 faa2 	bl	80178f4 <prvIsQueueFull>
 80173b0:	4603      	mov	r3, r0
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d018      	beq.n	80173e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80173b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b8:	3310      	adds	r3, #16
 80173ba:	687a      	ldr	r2, [r7, #4]
 80173bc:	4611      	mov	r1, r2
 80173be:	4618      	mov	r0, r3
 80173c0:	f001 f83a 	bl	8018438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80173c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173c6:	f000 fa2d 	bl	8017824 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80173ca:	f000 fe59 	bl	8018080 <xTaskResumeAll>
 80173ce:	4603      	mov	r3, r0
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	f47f af7c 	bne.w	80172ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80173d6:	4b0c      	ldr	r3, [pc, #48]	; (8017408 <xQueueGenericSend+0x1f8>)
 80173d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173dc:	601a      	str	r2, [r3, #0]
 80173de:	f3bf 8f4f 	dsb	sy
 80173e2:	f3bf 8f6f 	isb	sy
 80173e6:	e772      	b.n	80172ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80173e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173ea:	f000 fa1b 	bl	8017824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80173ee:	f000 fe47 	bl	8018080 <xTaskResumeAll>
 80173f2:	e76c      	b.n	80172ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80173f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173f6:	f000 fa15 	bl	8017824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80173fa:	f000 fe41 	bl	8018080 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80173fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017400:	4618      	mov	r0, r3
 8017402:	3738      	adds	r7, #56	; 0x38
 8017404:	46bd      	mov	sp, r7
 8017406:	bd80      	pop	{r7, pc}
 8017408:	e000ed04 	.word	0xe000ed04

0801740c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b090      	sub	sp, #64	; 0x40
 8017410:	af00      	add	r7, sp, #0
 8017412:	60f8      	str	r0, [r7, #12]
 8017414:	60b9      	str	r1, [r7, #8]
 8017416:	607a      	str	r2, [r7, #4]
 8017418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017420:	2b00      	cmp	r3, #0
 8017422:	d10a      	bne.n	801743a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017428:	f383 8811 	msr	BASEPRI, r3
 801742c:	f3bf 8f6f 	isb	sy
 8017430:	f3bf 8f4f 	dsb	sy
 8017434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017436:	bf00      	nop
 8017438:	e7fe      	b.n	8017438 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d103      	bne.n	8017448 <xQueueGenericSendFromISR+0x3c>
 8017440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017444:	2b00      	cmp	r3, #0
 8017446:	d101      	bne.n	801744c <xQueueGenericSendFromISR+0x40>
 8017448:	2301      	movs	r3, #1
 801744a:	e000      	b.n	801744e <xQueueGenericSendFromISR+0x42>
 801744c:	2300      	movs	r3, #0
 801744e:	2b00      	cmp	r3, #0
 8017450:	d10a      	bne.n	8017468 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017456:	f383 8811 	msr	BASEPRI, r3
 801745a:	f3bf 8f6f 	isb	sy
 801745e:	f3bf 8f4f 	dsb	sy
 8017462:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017464:	bf00      	nop
 8017466:	e7fe      	b.n	8017466 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017468:	683b      	ldr	r3, [r7, #0]
 801746a:	2b02      	cmp	r3, #2
 801746c:	d103      	bne.n	8017476 <xQueueGenericSendFromISR+0x6a>
 801746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017472:	2b01      	cmp	r3, #1
 8017474:	d101      	bne.n	801747a <xQueueGenericSendFromISR+0x6e>
 8017476:	2301      	movs	r3, #1
 8017478:	e000      	b.n	801747c <xQueueGenericSendFromISR+0x70>
 801747a:	2300      	movs	r3, #0
 801747c:	2b00      	cmp	r3, #0
 801747e:	d10a      	bne.n	8017496 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017484:	f383 8811 	msr	BASEPRI, r3
 8017488:	f3bf 8f6f 	isb	sy
 801748c:	f3bf 8f4f 	dsb	sy
 8017490:	623b      	str	r3, [r7, #32]
}
 8017492:	bf00      	nop
 8017494:	e7fe      	b.n	8017494 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017496:	f002 f8ef 	bl	8019678 <vPortValidateInterruptPriority>
	__asm volatile
 801749a:	f3ef 8211 	mrs	r2, BASEPRI
 801749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174a2:	f383 8811 	msr	BASEPRI, r3
 80174a6:	f3bf 8f6f 	isb	sy
 80174aa:	f3bf 8f4f 	dsb	sy
 80174ae:	61fa      	str	r2, [r7, #28]
 80174b0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80174b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80174b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80174b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80174ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80174be:	429a      	cmp	r2, r3
 80174c0:	d302      	bcc.n	80174c8 <xQueueGenericSendFromISR+0xbc>
 80174c2:	683b      	ldr	r3, [r7, #0]
 80174c4:	2b02      	cmp	r3, #2
 80174c6:	d12f      	bne.n	8017528 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80174c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80174ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80174d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80174d8:	683a      	ldr	r2, [r7, #0]
 80174da:	68b9      	ldr	r1, [r7, #8]
 80174dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80174de:	f000 f911 	bl	8017704 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80174e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80174e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174ea:	d112      	bne.n	8017512 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80174ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d016      	beq.n	8017522 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80174f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174f6:	3324      	adds	r3, #36	; 0x24
 80174f8:	4618      	mov	r0, r3
 80174fa:	f001 f829 	bl	8018550 <xTaskRemoveFromEventList>
 80174fe:	4603      	mov	r3, r0
 8017500:	2b00      	cmp	r3, #0
 8017502:	d00e      	beq.n	8017522 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d00b      	beq.n	8017522 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	2201      	movs	r2, #1
 801750e:	601a      	str	r2, [r3, #0]
 8017510:	e007      	b.n	8017522 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017512:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017516:	3301      	adds	r3, #1
 8017518:	b2db      	uxtb	r3, r3
 801751a:	b25a      	sxtb	r2, r3
 801751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801751e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017522:	2301      	movs	r3, #1
 8017524:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017526:	e001      	b.n	801752c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017528:	2300      	movs	r3, #0
 801752a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801752e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017530:	697b      	ldr	r3, [r7, #20]
 8017532:	f383 8811 	msr	BASEPRI, r3
}
 8017536:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801753a:	4618      	mov	r0, r3
 801753c:	3740      	adds	r7, #64	; 0x40
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}
	...

08017544 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b08c      	sub	sp, #48	; 0x30
 8017548:	af00      	add	r7, sp, #0
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017550:	2300      	movs	r3, #0
 8017552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801755a:	2b00      	cmp	r3, #0
 801755c:	d10a      	bne.n	8017574 <xQueueReceive+0x30>
	__asm volatile
 801755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017562:	f383 8811 	msr	BASEPRI, r3
 8017566:	f3bf 8f6f 	isb	sy
 801756a:	f3bf 8f4f 	dsb	sy
 801756e:	623b      	str	r3, [r7, #32]
}
 8017570:	bf00      	nop
 8017572:	e7fe      	b.n	8017572 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017574:	68bb      	ldr	r3, [r7, #8]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d103      	bne.n	8017582 <xQueueReceive+0x3e>
 801757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801757e:	2b00      	cmp	r3, #0
 8017580:	d101      	bne.n	8017586 <xQueueReceive+0x42>
 8017582:	2301      	movs	r3, #1
 8017584:	e000      	b.n	8017588 <xQueueReceive+0x44>
 8017586:	2300      	movs	r3, #0
 8017588:	2b00      	cmp	r3, #0
 801758a:	d10a      	bne.n	80175a2 <xQueueReceive+0x5e>
	__asm volatile
 801758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017590:	f383 8811 	msr	BASEPRI, r3
 8017594:	f3bf 8f6f 	isb	sy
 8017598:	f3bf 8f4f 	dsb	sy
 801759c:	61fb      	str	r3, [r7, #28]
}
 801759e:	bf00      	nop
 80175a0:	e7fe      	b.n	80175a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80175a2:	f001 f9f5 	bl	8018990 <xTaskGetSchedulerState>
 80175a6:	4603      	mov	r3, r0
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d102      	bne.n	80175b2 <xQueueReceive+0x6e>
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d101      	bne.n	80175b6 <xQueueReceive+0x72>
 80175b2:	2301      	movs	r3, #1
 80175b4:	e000      	b.n	80175b8 <xQueueReceive+0x74>
 80175b6:	2300      	movs	r3, #0
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d10a      	bne.n	80175d2 <xQueueReceive+0x8e>
	__asm volatile
 80175bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175c0:	f383 8811 	msr	BASEPRI, r3
 80175c4:	f3bf 8f6f 	isb	sy
 80175c8:	f3bf 8f4f 	dsb	sy
 80175cc:	61bb      	str	r3, [r7, #24]
}
 80175ce:	bf00      	nop
 80175d0:	e7fe      	b.n	80175d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80175d2:	f001 ff6f 	bl	80194b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80175d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80175dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d01f      	beq.n	8017622 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80175e2:	68b9      	ldr	r1, [r7, #8]
 80175e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80175e6:	f000 f8f7 	bl	80177d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80175ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ec:	1e5a      	subs	r2, r3, #1
 80175ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80175f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f4:	691b      	ldr	r3, [r3, #16]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d00f      	beq.n	801761a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80175fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175fc:	3310      	adds	r3, #16
 80175fe:	4618      	mov	r0, r3
 8017600:	f000 ffa6 	bl	8018550 <xTaskRemoveFromEventList>
 8017604:	4603      	mov	r3, r0
 8017606:	2b00      	cmp	r3, #0
 8017608:	d007      	beq.n	801761a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801760a:	4b3d      	ldr	r3, [pc, #244]	; (8017700 <xQueueReceive+0x1bc>)
 801760c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017610:	601a      	str	r2, [r3, #0]
 8017612:	f3bf 8f4f 	dsb	sy
 8017616:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801761a:	f001 ff7b 	bl	8019514 <vPortExitCritical>
				return pdPASS;
 801761e:	2301      	movs	r3, #1
 8017620:	e069      	b.n	80176f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d103      	bne.n	8017630 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017628:	f001 ff74 	bl	8019514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801762c:	2300      	movs	r3, #0
 801762e:	e062      	b.n	80176f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017632:	2b00      	cmp	r3, #0
 8017634:	d106      	bne.n	8017644 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017636:	f107 0310 	add.w	r3, r7, #16
 801763a:	4618      	mov	r0, r3
 801763c:	f001 f84e 	bl	80186dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017640:	2301      	movs	r3, #1
 8017642:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017644:	f001 ff66 	bl	8019514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017648:	f000 fd0c 	bl	8018064 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801764c:	f001 ff32 	bl	80194b4 <vPortEnterCritical>
 8017650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017656:	b25b      	sxtb	r3, r3
 8017658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801765c:	d103      	bne.n	8017666 <xQueueReceive+0x122>
 801765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017660:	2200      	movs	r2, #0
 8017662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801766c:	b25b      	sxtb	r3, r3
 801766e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017672:	d103      	bne.n	801767c <xQueueReceive+0x138>
 8017674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017676:	2200      	movs	r2, #0
 8017678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801767c:	f001 ff4a 	bl	8019514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017680:	1d3a      	adds	r2, r7, #4
 8017682:	f107 0310 	add.w	r3, r7, #16
 8017686:	4611      	mov	r1, r2
 8017688:	4618      	mov	r0, r3
 801768a:	f001 f83d 	bl	8018708 <xTaskCheckForTimeOut>
 801768e:	4603      	mov	r3, r0
 8017690:	2b00      	cmp	r3, #0
 8017692:	d123      	bne.n	80176dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017696:	f000 f917 	bl	80178c8 <prvIsQueueEmpty>
 801769a:	4603      	mov	r3, r0
 801769c:	2b00      	cmp	r3, #0
 801769e:	d017      	beq.n	80176d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80176a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a2:	3324      	adds	r3, #36	; 0x24
 80176a4:	687a      	ldr	r2, [r7, #4]
 80176a6:	4611      	mov	r1, r2
 80176a8:	4618      	mov	r0, r3
 80176aa:	f000 fec5 	bl	8018438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80176ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176b0:	f000 f8b8 	bl	8017824 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80176b4:	f000 fce4 	bl	8018080 <xTaskResumeAll>
 80176b8:	4603      	mov	r3, r0
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d189      	bne.n	80175d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80176be:	4b10      	ldr	r3, [pc, #64]	; (8017700 <xQueueReceive+0x1bc>)
 80176c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176c4:	601a      	str	r2, [r3, #0]
 80176c6:	f3bf 8f4f 	dsb	sy
 80176ca:	f3bf 8f6f 	isb	sy
 80176ce:	e780      	b.n	80175d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80176d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176d2:	f000 f8a7 	bl	8017824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80176d6:	f000 fcd3 	bl	8018080 <xTaskResumeAll>
 80176da:	e77a      	b.n	80175d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80176dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176de:	f000 f8a1 	bl	8017824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80176e2:	f000 fccd 	bl	8018080 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80176e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176e8:	f000 f8ee 	bl	80178c8 <prvIsQueueEmpty>
 80176ec:	4603      	mov	r3, r0
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	f43f af6f 	beq.w	80175d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80176f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3730      	adds	r7, #48	; 0x30
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	e000ed04 	.word	0xe000ed04

08017704 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b086      	sub	sp, #24
 8017708:	af00      	add	r7, sp, #0
 801770a:	60f8      	str	r0, [r7, #12]
 801770c:	60b9      	str	r1, [r7, #8]
 801770e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017710:	2300      	movs	r3, #0
 8017712:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017718:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801771e:	2b00      	cmp	r3, #0
 8017720:	d10d      	bne.n	801773e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d14d      	bne.n	80177c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	689b      	ldr	r3, [r3, #8]
 801772e:	4618      	mov	r0, r3
 8017730:	f001 f94c 	bl	80189cc <xTaskPriorityDisinherit>
 8017734:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	2200      	movs	r2, #0
 801773a:	609a      	str	r2, [r3, #8]
 801773c:	e043      	b.n	80177c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d119      	bne.n	8017778 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	6858      	ldr	r0, [r3, #4]
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801774c:	461a      	mov	r2, r3
 801774e:	68b9      	ldr	r1, [r7, #8]
 8017750:	f002 f9e6 	bl	8019b20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	685a      	ldr	r2, [r3, #4]
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801775c:	441a      	add	r2, r3
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	685a      	ldr	r2, [r3, #4]
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	689b      	ldr	r3, [r3, #8]
 801776a:	429a      	cmp	r2, r3
 801776c:	d32b      	bcc.n	80177c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	681a      	ldr	r2, [r3, #0]
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	605a      	str	r2, [r3, #4]
 8017776:	e026      	b.n	80177c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	68d8      	ldr	r0, [r3, #12]
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017780:	461a      	mov	r2, r3
 8017782:	68b9      	ldr	r1, [r7, #8]
 8017784:	f002 f9cc 	bl	8019b20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	68da      	ldr	r2, [r3, #12]
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017790:	425b      	negs	r3, r3
 8017792:	441a      	add	r2, r3
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	68da      	ldr	r2, [r3, #12]
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	429a      	cmp	r2, r3
 80177a2:	d207      	bcs.n	80177b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	689a      	ldr	r2, [r3, #8]
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177ac:	425b      	negs	r3, r3
 80177ae:	441a      	add	r2, r3
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	2b02      	cmp	r3, #2
 80177b8:	d105      	bne.n	80177c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d002      	beq.n	80177c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80177c0:	693b      	ldr	r3, [r7, #16]
 80177c2:	3b01      	subs	r3, #1
 80177c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80177c6:	693b      	ldr	r3, [r7, #16]
 80177c8:	1c5a      	adds	r2, r3, #1
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80177ce:	697b      	ldr	r3, [r7, #20]
}
 80177d0:	4618      	mov	r0, r3
 80177d2:	3718      	adds	r7, #24
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b082      	sub	sp, #8
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d018      	beq.n	801781c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	68da      	ldr	r2, [r3, #12]
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177f2:	441a      	add	r2, r3
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	68da      	ldr	r2, [r3, #12]
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	689b      	ldr	r3, [r3, #8]
 8017800:	429a      	cmp	r2, r3
 8017802:	d303      	bcc.n	801780c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681a      	ldr	r2, [r3, #0]
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	68d9      	ldr	r1, [r3, #12]
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017814:	461a      	mov	r2, r3
 8017816:	6838      	ldr	r0, [r7, #0]
 8017818:	f002 f982 	bl	8019b20 <memcpy>
	}
}
 801781c:	bf00      	nop
 801781e:	3708      	adds	r7, #8
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}

08017824 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017824:	b580      	push	{r7, lr}
 8017826:	b084      	sub	sp, #16
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801782c:	f001 fe42 	bl	80194b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017836:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017838:	e011      	b.n	801785e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801783e:	2b00      	cmp	r3, #0
 8017840:	d012      	beq.n	8017868 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	3324      	adds	r3, #36	; 0x24
 8017846:	4618      	mov	r0, r3
 8017848:	f000 fe82 	bl	8018550 <xTaskRemoveFromEventList>
 801784c:	4603      	mov	r3, r0
 801784e:	2b00      	cmp	r3, #0
 8017850:	d001      	beq.n	8017856 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017852:	f000 ffbb 	bl	80187cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017856:	7bfb      	ldrb	r3, [r7, #15]
 8017858:	3b01      	subs	r3, #1
 801785a:	b2db      	uxtb	r3, r3
 801785c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801785e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017862:	2b00      	cmp	r3, #0
 8017864:	dce9      	bgt.n	801783a <prvUnlockQueue+0x16>
 8017866:	e000      	b.n	801786a <prvUnlockQueue+0x46>
					break;
 8017868:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	22ff      	movs	r2, #255	; 0xff
 801786e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017872:	f001 fe4f 	bl	8019514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017876:	f001 fe1d 	bl	80194b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017880:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017882:	e011      	b.n	80178a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	691b      	ldr	r3, [r3, #16]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d012      	beq.n	80178b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	3310      	adds	r3, #16
 8017890:	4618      	mov	r0, r3
 8017892:	f000 fe5d 	bl	8018550 <xTaskRemoveFromEventList>
 8017896:	4603      	mov	r3, r0
 8017898:	2b00      	cmp	r3, #0
 801789a:	d001      	beq.n	80178a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801789c:	f000 ff96 	bl	80187cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80178a0:	7bbb      	ldrb	r3, [r7, #14]
 80178a2:	3b01      	subs	r3, #1
 80178a4:	b2db      	uxtb	r3, r3
 80178a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80178a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	dce9      	bgt.n	8017884 <prvUnlockQueue+0x60>
 80178b0:	e000      	b.n	80178b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80178b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	22ff      	movs	r2, #255	; 0xff
 80178b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80178bc:	f001 fe2a 	bl	8019514 <vPortExitCritical>
}
 80178c0:	bf00      	nop
 80178c2:	3710      	adds	r7, #16
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bd80      	pop	{r7, pc}

080178c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b084      	sub	sp, #16
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80178d0:	f001 fdf0 	bl	80194b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d102      	bne.n	80178e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80178dc:	2301      	movs	r3, #1
 80178de:	60fb      	str	r3, [r7, #12]
 80178e0:	e001      	b.n	80178e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80178e2:	2300      	movs	r3, #0
 80178e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80178e6:	f001 fe15 	bl	8019514 <vPortExitCritical>

	return xReturn;
 80178ea:	68fb      	ldr	r3, [r7, #12]
}
 80178ec:	4618      	mov	r0, r3
 80178ee:	3710      	adds	r7, #16
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}

080178f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b084      	sub	sp, #16
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80178fc:	f001 fdda 	bl	80194b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017908:	429a      	cmp	r2, r3
 801790a:	d102      	bne.n	8017912 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801790c:	2301      	movs	r3, #1
 801790e:	60fb      	str	r3, [r7, #12]
 8017910:	e001      	b.n	8017916 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017912:	2300      	movs	r3, #0
 8017914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017916:	f001 fdfd 	bl	8019514 <vPortExitCritical>

	return xReturn;
 801791a:	68fb      	ldr	r3, [r7, #12]
}
 801791c:	4618      	mov	r0, r3
 801791e:	3710      	adds	r7, #16
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}

08017924 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017924:	b480      	push	{r7}
 8017926:	b085      	sub	sp, #20
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801792e:	2300      	movs	r3, #0
 8017930:	60fb      	str	r3, [r7, #12]
 8017932:	e014      	b.n	801795e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017934:	4a0f      	ldr	r2, [pc, #60]	; (8017974 <vQueueAddToRegistry+0x50>)
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d10b      	bne.n	8017958 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017940:	490c      	ldr	r1, [pc, #48]	; (8017974 <vQueueAddToRegistry+0x50>)
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	683a      	ldr	r2, [r7, #0]
 8017946:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801794a:	4a0a      	ldr	r2, [pc, #40]	; (8017974 <vQueueAddToRegistry+0x50>)
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	00db      	lsls	r3, r3, #3
 8017950:	4413      	add	r3, r2
 8017952:	687a      	ldr	r2, [r7, #4]
 8017954:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017956:	e006      	b.n	8017966 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	3301      	adds	r3, #1
 801795c:	60fb      	str	r3, [r7, #12]
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	2b07      	cmp	r3, #7
 8017962:	d9e7      	bls.n	8017934 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017964:	bf00      	nop
 8017966:	bf00      	nop
 8017968:	3714      	adds	r7, #20
 801796a:	46bd      	mov	sp, r7
 801796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017970:	4770      	bx	lr
 8017972:	bf00      	nop
 8017974:	24002824 	.word	0x24002824

08017978 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017978:	b580      	push	{r7, lr}
 801797a:	b086      	sub	sp, #24
 801797c:	af00      	add	r7, sp, #0
 801797e:	60f8      	str	r0, [r7, #12]
 8017980:	60b9      	str	r1, [r7, #8]
 8017982:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017988:	f001 fd94 	bl	80194b4 <vPortEnterCritical>
 801798c:	697b      	ldr	r3, [r7, #20]
 801798e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017992:	b25b      	sxtb	r3, r3
 8017994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017998:	d103      	bne.n	80179a2 <vQueueWaitForMessageRestricted+0x2a>
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	2200      	movs	r2, #0
 801799e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80179a8:	b25b      	sxtb	r3, r3
 80179aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179ae:	d103      	bne.n	80179b8 <vQueueWaitForMessageRestricted+0x40>
 80179b0:	697b      	ldr	r3, [r7, #20]
 80179b2:	2200      	movs	r2, #0
 80179b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80179b8:	f001 fdac 	bl	8019514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d106      	bne.n	80179d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80179c4:	697b      	ldr	r3, [r7, #20]
 80179c6:	3324      	adds	r3, #36	; 0x24
 80179c8:	687a      	ldr	r2, [r7, #4]
 80179ca:	68b9      	ldr	r1, [r7, #8]
 80179cc:	4618      	mov	r0, r3
 80179ce:	f000 fd93 	bl	80184f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80179d2:	6978      	ldr	r0, [r7, #20]
 80179d4:	f7ff ff26 	bl	8017824 <prvUnlockQueue>
	}
 80179d8:	bf00      	nop
 80179da:	3718      	adds	r7, #24
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}

080179e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b08e      	sub	sp, #56	; 0x38
 80179e4:	af04      	add	r7, sp, #16
 80179e6:	60f8      	str	r0, [r7, #12]
 80179e8:	60b9      	str	r1, [r7, #8]
 80179ea:	607a      	str	r2, [r7, #4]
 80179ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80179ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d10a      	bne.n	8017a0a <xTaskCreateStatic+0x2a>
	__asm volatile
 80179f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179f8:	f383 8811 	msr	BASEPRI, r3
 80179fc:	f3bf 8f6f 	isb	sy
 8017a00:	f3bf 8f4f 	dsb	sy
 8017a04:	623b      	str	r3, [r7, #32]
}
 8017a06:	bf00      	nop
 8017a08:	e7fe      	b.n	8017a08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8017a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d10a      	bne.n	8017a26 <xTaskCreateStatic+0x46>
	__asm volatile
 8017a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a14:	f383 8811 	msr	BASEPRI, r3
 8017a18:	f3bf 8f6f 	isb	sy
 8017a1c:	f3bf 8f4f 	dsb	sy
 8017a20:	61fb      	str	r3, [r7, #28]
}
 8017a22:	bf00      	nop
 8017a24:	e7fe      	b.n	8017a24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017a26:	235c      	movs	r3, #92	; 0x5c
 8017a28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017a2a:	693b      	ldr	r3, [r7, #16]
 8017a2c:	2b5c      	cmp	r3, #92	; 0x5c
 8017a2e:	d00a      	beq.n	8017a46 <xTaskCreateStatic+0x66>
	__asm volatile
 8017a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a34:	f383 8811 	msr	BASEPRI, r3
 8017a38:	f3bf 8f6f 	isb	sy
 8017a3c:	f3bf 8f4f 	dsb	sy
 8017a40:	61bb      	str	r3, [r7, #24]
}
 8017a42:	bf00      	nop
 8017a44:	e7fe      	b.n	8017a44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017a46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d01e      	beq.n	8017a8c <xTaskCreateStatic+0xac>
 8017a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d01b      	beq.n	8017a8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a60:	2202      	movs	r2, #2
 8017a62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017a66:	2300      	movs	r3, #0
 8017a68:	9303      	str	r3, [sp, #12]
 8017a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a6c:	9302      	str	r3, [sp, #8]
 8017a6e:	f107 0314 	add.w	r3, r7, #20
 8017a72:	9301      	str	r3, [sp, #4]
 8017a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a76:	9300      	str	r3, [sp, #0]
 8017a78:	683b      	ldr	r3, [r7, #0]
 8017a7a:	687a      	ldr	r2, [r7, #4]
 8017a7c:	68b9      	ldr	r1, [r7, #8]
 8017a7e:	68f8      	ldr	r0, [r7, #12]
 8017a80:	f000 f850 	bl	8017b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a86:	f000 f8dd 	bl	8017c44 <prvAddNewTaskToReadyList>
 8017a8a:	e001      	b.n	8017a90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017a90:	697b      	ldr	r3, [r7, #20]
	}
 8017a92:	4618      	mov	r0, r3
 8017a94:	3728      	adds	r7, #40	; 0x28
 8017a96:	46bd      	mov	sp, r7
 8017a98:	bd80      	pop	{r7, pc}

08017a9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017a9a:	b580      	push	{r7, lr}
 8017a9c:	b08c      	sub	sp, #48	; 0x30
 8017a9e:	af04      	add	r7, sp, #16
 8017aa0:	60f8      	str	r0, [r7, #12]
 8017aa2:	60b9      	str	r1, [r7, #8]
 8017aa4:	603b      	str	r3, [r7, #0]
 8017aa6:	4613      	mov	r3, r2
 8017aa8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017aaa:	88fb      	ldrh	r3, [r7, #6]
 8017aac:	009b      	lsls	r3, r3, #2
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f001 fe22 	bl	80196f8 <pvPortMalloc>
 8017ab4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017ab6:	697b      	ldr	r3, [r7, #20]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d00e      	beq.n	8017ada <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017abc:	205c      	movs	r0, #92	; 0x5c
 8017abe:	f001 fe1b 	bl	80196f8 <pvPortMalloc>
 8017ac2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017ac4:	69fb      	ldr	r3, [r7, #28]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d003      	beq.n	8017ad2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017aca:	69fb      	ldr	r3, [r7, #28]
 8017acc:	697a      	ldr	r2, [r7, #20]
 8017ace:	631a      	str	r2, [r3, #48]	; 0x30
 8017ad0:	e005      	b.n	8017ade <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017ad2:	6978      	ldr	r0, [r7, #20]
 8017ad4:	f001 fedc 	bl	8019890 <vPortFree>
 8017ad8:	e001      	b.n	8017ade <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017ada:	2300      	movs	r3, #0
 8017adc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017ade:	69fb      	ldr	r3, [r7, #28]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d017      	beq.n	8017b14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017ae4:	69fb      	ldr	r3, [r7, #28]
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017aec:	88fa      	ldrh	r2, [r7, #6]
 8017aee:	2300      	movs	r3, #0
 8017af0:	9303      	str	r3, [sp, #12]
 8017af2:	69fb      	ldr	r3, [r7, #28]
 8017af4:	9302      	str	r3, [sp, #8]
 8017af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017af8:	9301      	str	r3, [sp, #4]
 8017afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017afc:	9300      	str	r3, [sp, #0]
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	68b9      	ldr	r1, [r7, #8]
 8017b02:	68f8      	ldr	r0, [r7, #12]
 8017b04:	f000 f80e 	bl	8017b24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017b08:	69f8      	ldr	r0, [r7, #28]
 8017b0a:	f000 f89b 	bl	8017c44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017b0e:	2301      	movs	r3, #1
 8017b10:	61bb      	str	r3, [r7, #24]
 8017b12:	e002      	b.n	8017b1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017b14:	f04f 33ff 	mov.w	r3, #4294967295
 8017b18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017b1a:	69bb      	ldr	r3, [r7, #24]
	}
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	3720      	adds	r7, #32
 8017b20:	46bd      	mov	sp, r7
 8017b22:	bd80      	pop	{r7, pc}

08017b24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b088      	sub	sp, #32
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	60f8      	str	r0, [r7, #12]
 8017b2c:	60b9      	str	r1, [r7, #8]
 8017b2e:	607a      	str	r2, [r7, #4]
 8017b30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	009b      	lsls	r3, r3, #2
 8017b3a:	461a      	mov	r2, r3
 8017b3c:	21a5      	movs	r1, #165	; 0xa5
 8017b3e:	f001 fffd 	bl	8019b3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017b46:	6879      	ldr	r1, [r7, #4]
 8017b48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017b4c:	440b      	add	r3, r1
 8017b4e:	009b      	lsls	r3, r3, #2
 8017b50:	4413      	add	r3, r2
 8017b52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017b54:	69bb      	ldr	r3, [r7, #24]
 8017b56:	f023 0307 	bic.w	r3, r3, #7
 8017b5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017b5c:	69bb      	ldr	r3, [r7, #24]
 8017b5e:	f003 0307 	and.w	r3, r3, #7
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d00a      	beq.n	8017b7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8017b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b6a:	f383 8811 	msr	BASEPRI, r3
 8017b6e:	f3bf 8f6f 	isb	sy
 8017b72:	f3bf 8f4f 	dsb	sy
 8017b76:	617b      	str	r3, [r7, #20]
}
 8017b78:	bf00      	nop
 8017b7a:	e7fe      	b.n	8017b7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017b7c:	68bb      	ldr	r3, [r7, #8]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d01f      	beq.n	8017bc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017b82:	2300      	movs	r3, #0
 8017b84:	61fb      	str	r3, [r7, #28]
 8017b86:	e012      	b.n	8017bae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017b88:	68ba      	ldr	r2, [r7, #8]
 8017b8a:	69fb      	ldr	r3, [r7, #28]
 8017b8c:	4413      	add	r3, r2
 8017b8e:	7819      	ldrb	r1, [r3, #0]
 8017b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b92:	69fb      	ldr	r3, [r7, #28]
 8017b94:	4413      	add	r3, r2
 8017b96:	3334      	adds	r3, #52	; 0x34
 8017b98:	460a      	mov	r2, r1
 8017b9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017b9c:	68ba      	ldr	r2, [r7, #8]
 8017b9e:	69fb      	ldr	r3, [r7, #28]
 8017ba0:	4413      	add	r3, r2
 8017ba2:	781b      	ldrb	r3, [r3, #0]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d006      	beq.n	8017bb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017ba8:	69fb      	ldr	r3, [r7, #28]
 8017baa:	3301      	adds	r3, #1
 8017bac:	61fb      	str	r3, [r7, #28]
 8017bae:	69fb      	ldr	r3, [r7, #28]
 8017bb0:	2b0f      	cmp	r3, #15
 8017bb2:	d9e9      	bls.n	8017b88 <prvInitialiseNewTask+0x64>
 8017bb4:	e000      	b.n	8017bb8 <prvInitialiseNewTask+0x94>
			{
				break;
 8017bb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bba:	2200      	movs	r2, #0
 8017bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017bc0:	e003      	b.n	8017bca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bcc:	2b37      	cmp	r3, #55	; 0x37
 8017bce:	d901      	bls.n	8017bd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017bd0:	2337      	movs	r3, #55	; 0x37
 8017bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017be2:	2200      	movs	r2, #0
 8017be4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017be8:	3304      	adds	r3, #4
 8017bea:	4618      	mov	r0, r3
 8017bec:	f7ff f978 	bl	8016ee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bf2:	3318      	adds	r3, #24
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7ff f973 	bl	8016ee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c12:	2200      	movs	r2, #0
 8017c14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c18:	2200      	movs	r2, #0
 8017c1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017c1e:	683a      	ldr	r2, [r7, #0]
 8017c20:	68f9      	ldr	r1, [r7, #12]
 8017c22:	69b8      	ldr	r0, [r7, #24]
 8017c24:	f001 fb1a 	bl	801925c <pxPortInitialiseStack>
 8017c28:	4602      	mov	r2, r0
 8017c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d002      	beq.n	8017c3a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017c3a:	bf00      	nop
 8017c3c:	3720      	adds	r7, #32
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
	...

08017c44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b082      	sub	sp, #8
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017c4c:	f001 fc32 	bl	80194b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017c50:	4b2d      	ldr	r3, [pc, #180]	; (8017d08 <prvAddNewTaskToReadyList+0xc4>)
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	3301      	adds	r3, #1
 8017c56:	4a2c      	ldr	r2, [pc, #176]	; (8017d08 <prvAddNewTaskToReadyList+0xc4>)
 8017c58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017c5a:	4b2c      	ldr	r3, [pc, #176]	; (8017d0c <prvAddNewTaskToReadyList+0xc8>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d109      	bne.n	8017c76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017c62:	4a2a      	ldr	r2, [pc, #168]	; (8017d0c <prvAddNewTaskToReadyList+0xc8>)
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017c68:	4b27      	ldr	r3, [pc, #156]	; (8017d08 <prvAddNewTaskToReadyList+0xc4>)
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	2b01      	cmp	r3, #1
 8017c6e:	d110      	bne.n	8017c92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017c70:	f000 fdd0 	bl	8018814 <prvInitialiseTaskLists>
 8017c74:	e00d      	b.n	8017c92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017c76:	4b26      	ldr	r3, [pc, #152]	; (8017d10 <prvAddNewTaskToReadyList+0xcc>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d109      	bne.n	8017c92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017c7e:	4b23      	ldr	r3, [pc, #140]	; (8017d0c <prvAddNewTaskToReadyList+0xc8>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c88:	429a      	cmp	r2, r3
 8017c8a:	d802      	bhi.n	8017c92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017c8c:	4a1f      	ldr	r2, [pc, #124]	; (8017d0c <prvAddNewTaskToReadyList+0xc8>)
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017c92:	4b20      	ldr	r3, [pc, #128]	; (8017d14 <prvAddNewTaskToReadyList+0xd0>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	3301      	adds	r3, #1
 8017c98:	4a1e      	ldr	r2, [pc, #120]	; (8017d14 <prvAddNewTaskToReadyList+0xd0>)
 8017c9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017c9c:	4b1d      	ldr	r3, [pc, #116]	; (8017d14 <prvAddNewTaskToReadyList+0xd0>)
 8017c9e:	681a      	ldr	r2, [r3, #0]
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ca8:	4b1b      	ldr	r3, [pc, #108]	; (8017d18 <prvAddNewTaskToReadyList+0xd4>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	429a      	cmp	r2, r3
 8017cae:	d903      	bls.n	8017cb8 <prvAddNewTaskToReadyList+0x74>
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cb4:	4a18      	ldr	r2, [pc, #96]	; (8017d18 <prvAddNewTaskToReadyList+0xd4>)
 8017cb6:	6013      	str	r3, [r2, #0]
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cbc:	4613      	mov	r3, r2
 8017cbe:	009b      	lsls	r3, r3, #2
 8017cc0:	4413      	add	r3, r2
 8017cc2:	009b      	lsls	r3, r3, #2
 8017cc4:	4a15      	ldr	r2, [pc, #84]	; (8017d1c <prvAddNewTaskToReadyList+0xd8>)
 8017cc6:	441a      	add	r2, r3
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	3304      	adds	r3, #4
 8017ccc:	4619      	mov	r1, r3
 8017cce:	4610      	mov	r0, r2
 8017cd0:	f7ff f913 	bl	8016efa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017cd4:	f001 fc1e 	bl	8019514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017cd8:	4b0d      	ldr	r3, [pc, #52]	; (8017d10 <prvAddNewTaskToReadyList+0xcc>)
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d00e      	beq.n	8017cfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017ce0:	4b0a      	ldr	r3, [pc, #40]	; (8017d0c <prvAddNewTaskToReadyList+0xc8>)
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d207      	bcs.n	8017cfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017cee:	4b0c      	ldr	r3, [pc, #48]	; (8017d20 <prvAddNewTaskToReadyList+0xdc>)
 8017cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cf4:	601a      	str	r2, [r3, #0]
 8017cf6:	f3bf 8f4f 	dsb	sy
 8017cfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017cfe:	bf00      	nop
 8017d00:	3708      	adds	r7, #8
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bd80      	pop	{r7, pc}
 8017d06:	bf00      	nop
 8017d08:	24002d38 	.word	0x24002d38
 8017d0c:	24002864 	.word	0x24002864
 8017d10:	24002d44 	.word	0x24002d44
 8017d14:	24002d54 	.word	0x24002d54
 8017d18:	24002d40 	.word	0x24002d40
 8017d1c:	24002868 	.word	0x24002868
 8017d20:	e000ed04 	.word	0xe000ed04

08017d24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b084      	sub	sp, #16
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d017      	beq.n	8017d66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017d36:	4b13      	ldr	r3, [pc, #76]	; (8017d84 <vTaskDelay+0x60>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d00a      	beq.n	8017d54 <vTaskDelay+0x30>
	__asm volatile
 8017d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d42:	f383 8811 	msr	BASEPRI, r3
 8017d46:	f3bf 8f6f 	isb	sy
 8017d4a:	f3bf 8f4f 	dsb	sy
 8017d4e:	60bb      	str	r3, [r7, #8]
}
 8017d50:	bf00      	nop
 8017d52:	e7fe      	b.n	8017d52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017d54:	f000 f986 	bl	8018064 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017d58:	2100      	movs	r1, #0
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f000 febc 	bl	8018ad8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017d60:	f000 f98e 	bl	8018080 <xTaskResumeAll>
 8017d64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d107      	bne.n	8017d7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017d6c:	4b06      	ldr	r3, [pc, #24]	; (8017d88 <vTaskDelay+0x64>)
 8017d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d72:	601a      	str	r2, [r3, #0]
 8017d74:	f3bf 8f4f 	dsb	sy
 8017d78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017d7c:	bf00      	nop
 8017d7e:	3710      	adds	r7, #16
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}
 8017d84:	24002d60 	.word	0x24002d60
 8017d88:	e000ed04 	.word	0xe000ed04

08017d8c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b084      	sub	sp, #16
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8017d94:	f001 fb8e 	bl	80194b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d102      	bne.n	8017da4 <vTaskSuspend+0x18>
 8017d9e:	4b30      	ldr	r3, [pc, #192]	; (8017e60 <vTaskSuspend+0xd4>)
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	e000      	b.n	8017da6 <vTaskSuspend+0x1a>
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	3304      	adds	r3, #4
 8017dac:	4618      	mov	r0, r3
 8017dae:	f7ff f901 	bl	8016fb4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d004      	beq.n	8017dc4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	3318      	adds	r3, #24
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f7ff f8f8 	bl	8016fb4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	3304      	adds	r3, #4
 8017dc8:	4619      	mov	r1, r3
 8017dca:	4826      	ldr	r0, [pc, #152]	; (8017e64 <vTaskSuspend+0xd8>)
 8017dcc:	f7ff f895 	bl	8016efa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8017dd6:	b2db      	uxtb	r3, r3
 8017dd8:	2b01      	cmp	r3, #1
 8017dda:	d103      	bne.n	8017de4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	2200      	movs	r2, #0
 8017de0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8017de4:	f001 fb96 	bl	8019514 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8017de8:	4b1f      	ldr	r3, [pc, #124]	; (8017e68 <vTaskSuspend+0xdc>)
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d005      	beq.n	8017dfc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8017df0:	f001 fb60 	bl	80194b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8017df4:	f000 fdac 	bl	8018950 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8017df8:	f001 fb8c 	bl	8019514 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8017dfc:	4b18      	ldr	r3, [pc, #96]	; (8017e60 <vTaskSuspend+0xd4>)
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	68fa      	ldr	r2, [r7, #12]
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d127      	bne.n	8017e56 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8017e06:	4b18      	ldr	r3, [pc, #96]	; (8017e68 <vTaskSuspend+0xdc>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d017      	beq.n	8017e3e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8017e0e:	4b17      	ldr	r3, [pc, #92]	; (8017e6c <vTaskSuspend+0xe0>)
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d00a      	beq.n	8017e2c <vTaskSuspend+0xa0>
	__asm volatile
 8017e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e1a:	f383 8811 	msr	BASEPRI, r3
 8017e1e:	f3bf 8f6f 	isb	sy
 8017e22:	f3bf 8f4f 	dsb	sy
 8017e26:	60bb      	str	r3, [r7, #8]
}
 8017e28:	bf00      	nop
 8017e2a:	e7fe      	b.n	8017e2a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8017e2c:	4b10      	ldr	r3, [pc, #64]	; (8017e70 <vTaskSuspend+0xe4>)
 8017e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e32:	601a      	str	r2, [r3, #0]
 8017e34:	f3bf 8f4f 	dsb	sy
 8017e38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017e3c:	e00b      	b.n	8017e56 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8017e3e:	4b09      	ldr	r3, [pc, #36]	; (8017e64 <vTaskSuspend+0xd8>)
 8017e40:	681a      	ldr	r2, [r3, #0]
 8017e42:	4b0c      	ldr	r3, [pc, #48]	; (8017e74 <vTaskSuspend+0xe8>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	429a      	cmp	r2, r3
 8017e48:	d103      	bne.n	8017e52 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8017e4a:	4b05      	ldr	r3, [pc, #20]	; (8017e60 <vTaskSuspend+0xd4>)
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	601a      	str	r2, [r3, #0]
	}
 8017e50:	e001      	b.n	8017e56 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8017e52:	f000 fa85 	bl	8018360 <vTaskSwitchContext>
	}
 8017e56:	bf00      	nop
 8017e58:	3710      	adds	r7, #16
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	bd80      	pop	{r7, pc}
 8017e5e:	bf00      	nop
 8017e60:	24002864 	.word	0x24002864
 8017e64:	24002d24 	.word	0x24002d24
 8017e68:	24002d44 	.word	0x24002d44
 8017e6c:	24002d60 	.word	0x24002d60
 8017e70:	e000ed04 	.word	0xe000ed04
 8017e74:	24002d38 	.word	0x24002d38

08017e78 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8017e78:	b480      	push	{r7}
 8017e7a:	b087      	sub	sp, #28
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8017e80:	2300      	movs	r3, #0
 8017e82:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d10a      	bne.n	8017ea4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8017e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e92:	f383 8811 	msr	BASEPRI, r3
 8017e96:	f3bf 8f6f 	isb	sy
 8017e9a:	f3bf 8f4f 	dsb	sy
 8017e9e:	60fb      	str	r3, [r7, #12]
}
 8017ea0:	bf00      	nop
 8017ea2:	e7fe      	b.n	8017ea2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017ea4:	693b      	ldr	r3, [r7, #16]
 8017ea6:	695b      	ldr	r3, [r3, #20]
 8017ea8:	4a0a      	ldr	r2, [pc, #40]	; (8017ed4 <prvTaskIsTaskSuspended+0x5c>)
 8017eaa:	4293      	cmp	r3, r2
 8017eac:	d10a      	bne.n	8017ec4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8017eae:	693b      	ldr	r3, [r7, #16]
 8017eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017eb2:	4a09      	ldr	r2, [pc, #36]	; (8017ed8 <prvTaskIsTaskSuspended+0x60>)
 8017eb4:	4293      	cmp	r3, r2
 8017eb6:	d005      	beq.n	8017ec4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8017eb8:	693b      	ldr	r3, [r7, #16]
 8017eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d101      	bne.n	8017ec4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8017ec0:	2301      	movs	r3, #1
 8017ec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017ec4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	371c      	adds	r7, #28
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed0:	4770      	bx	lr
 8017ed2:	bf00      	nop
 8017ed4:	24002d24 	.word	0x24002d24
 8017ed8:	24002cf8 	.word	0x24002cf8

08017edc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b084      	sub	sp, #16
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d10a      	bne.n	8017f04 <vTaskResume+0x28>
	__asm volatile
 8017eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ef2:	f383 8811 	msr	BASEPRI, r3
 8017ef6:	f3bf 8f6f 	isb	sy
 8017efa:	f3bf 8f4f 	dsb	sy
 8017efe:	60bb      	str	r3, [r7, #8]
}
 8017f00:	bf00      	nop
 8017f02:	e7fe      	b.n	8017f02 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8017f04:	4b20      	ldr	r3, [pc, #128]	; (8017f88 <vTaskResume+0xac>)
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	68fa      	ldr	r2, [r7, #12]
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	d038      	beq.n	8017f80 <vTaskResume+0xa4>
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d035      	beq.n	8017f80 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8017f14:	f001 face 	bl	80194b4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8017f18:	68f8      	ldr	r0, [r7, #12]
 8017f1a:	f7ff ffad 	bl	8017e78 <prvTaskIsTaskSuspended>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d02b      	beq.n	8017f7c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	3304      	adds	r3, #4
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7ff f843 	bl	8016fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f32:	4b16      	ldr	r3, [pc, #88]	; (8017f8c <vTaskResume+0xb0>)
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d903      	bls.n	8017f42 <vTaskResume+0x66>
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f3e:	4a13      	ldr	r2, [pc, #76]	; (8017f8c <vTaskResume+0xb0>)
 8017f40:	6013      	str	r3, [r2, #0]
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f46:	4613      	mov	r3, r2
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	4413      	add	r3, r2
 8017f4c:	009b      	lsls	r3, r3, #2
 8017f4e:	4a10      	ldr	r2, [pc, #64]	; (8017f90 <vTaskResume+0xb4>)
 8017f50:	441a      	add	r2, r3
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	3304      	adds	r3, #4
 8017f56:	4619      	mov	r1, r3
 8017f58:	4610      	mov	r0, r2
 8017f5a:	f7fe ffce 	bl	8016efa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f62:	4b09      	ldr	r3, [pc, #36]	; (8017f88 <vTaskResume+0xac>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f68:	429a      	cmp	r2, r3
 8017f6a:	d307      	bcc.n	8017f7c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8017f6c:	4b09      	ldr	r3, [pc, #36]	; (8017f94 <vTaskResume+0xb8>)
 8017f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f72:	601a      	str	r2, [r3, #0]
 8017f74:	f3bf 8f4f 	dsb	sy
 8017f78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8017f7c:	f001 faca 	bl	8019514 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017f80:	bf00      	nop
 8017f82:	3710      	adds	r7, #16
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}
 8017f88:	24002864 	.word	0x24002864
 8017f8c:	24002d40 	.word	0x24002d40
 8017f90:	24002868 	.word	0x24002868
 8017f94:	e000ed04 	.word	0xe000ed04

08017f98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b08a      	sub	sp, #40	; 0x28
 8017f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017fa6:	463a      	mov	r2, r7
 8017fa8:	1d39      	adds	r1, r7, #4
 8017faa:	f107 0308 	add.w	r3, r7, #8
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f7fe fcd6 	bl	8016960 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017fb4:	6839      	ldr	r1, [r7, #0]
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	68ba      	ldr	r2, [r7, #8]
 8017fba:	9202      	str	r2, [sp, #8]
 8017fbc:	9301      	str	r3, [sp, #4]
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	9300      	str	r3, [sp, #0]
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	460a      	mov	r2, r1
 8017fc6:	4921      	ldr	r1, [pc, #132]	; (801804c <vTaskStartScheduler+0xb4>)
 8017fc8:	4821      	ldr	r0, [pc, #132]	; (8018050 <vTaskStartScheduler+0xb8>)
 8017fca:	f7ff fd09 	bl	80179e0 <xTaskCreateStatic>
 8017fce:	4603      	mov	r3, r0
 8017fd0:	4a20      	ldr	r2, [pc, #128]	; (8018054 <vTaskStartScheduler+0xbc>)
 8017fd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017fd4:	4b1f      	ldr	r3, [pc, #124]	; (8018054 <vTaskStartScheduler+0xbc>)
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d002      	beq.n	8017fe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017fdc:	2301      	movs	r3, #1
 8017fde:	617b      	str	r3, [r7, #20]
 8017fe0:	e001      	b.n	8017fe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017fe6:	697b      	ldr	r3, [r7, #20]
 8017fe8:	2b01      	cmp	r3, #1
 8017fea:	d102      	bne.n	8017ff2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017fec:	f000 fdc8 	bl	8018b80 <xTimerCreateTimerTask>
 8017ff0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017ff2:	697b      	ldr	r3, [r7, #20]
 8017ff4:	2b01      	cmp	r3, #1
 8017ff6:	d116      	bne.n	8018026 <vTaskStartScheduler+0x8e>
	__asm volatile
 8017ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ffc:	f383 8811 	msr	BASEPRI, r3
 8018000:	f3bf 8f6f 	isb	sy
 8018004:	f3bf 8f4f 	dsb	sy
 8018008:	613b      	str	r3, [r7, #16]
}
 801800a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801800c:	4b12      	ldr	r3, [pc, #72]	; (8018058 <vTaskStartScheduler+0xc0>)
 801800e:	f04f 32ff 	mov.w	r2, #4294967295
 8018012:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018014:	4b11      	ldr	r3, [pc, #68]	; (801805c <vTaskStartScheduler+0xc4>)
 8018016:	2201      	movs	r2, #1
 8018018:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801801a:	4b11      	ldr	r3, [pc, #68]	; (8018060 <vTaskStartScheduler+0xc8>)
 801801c:	2200      	movs	r2, #0
 801801e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018020:	f001 f9a6 	bl	8019370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018024:	e00e      	b.n	8018044 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018026:	697b      	ldr	r3, [r7, #20]
 8018028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801802c:	d10a      	bne.n	8018044 <vTaskStartScheduler+0xac>
	__asm volatile
 801802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018032:	f383 8811 	msr	BASEPRI, r3
 8018036:	f3bf 8f6f 	isb	sy
 801803a:	f3bf 8f4f 	dsb	sy
 801803e:	60fb      	str	r3, [r7, #12]
}
 8018040:	bf00      	nop
 8018042:	e7fe      	b.n	8018042 <vTaskStartScheduler+0xaa>
}
 8018044:	bf00      	nop
 8018046:	3718      	adds	r7, #24
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}
 801804c:	0801a7b0 	.word	0x0801a7b0
 8018050:	080187e5 	.word	0x080187e5
 8018054:	24002d5c 	.word	0x24002d5c
 8018058:	24002d58 	.word	0x24002d58
 801805c:	24002d44 	.word	0x24002d44
 8018060:	24002d3c 	.word	0x24002d3c

08018064 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018064:	b480      	push	{r7}
 8018066:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018068:	4b04      	ldr	r3, [pc, #16]	; (801807c <vTaskSuspendAll+0x18>)
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	3301      	adds	r3, #1
 801806e:	4a03      	ldr	r2, [pc, #12]	; (801807c <vTaskSuspendAll+0x18>)
 8018070:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018072:	bf00      	nop
 8018074:	46bd      	mov	sp, r7
 8018076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807a:	4770      	bx	lr
 801807c:	24002d60 	.word	0x24002d60

08018080 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b084      	sub	sp, #16
 8018084:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018086:	2300      	movs	r3, #0
 8018088:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801808a:	2300      	movs	r3, #0
 801808c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801808e:	4b42      	ldr	r3, [pc, #264]	; (8018198 <xTaskResumeAll+0x118>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d10a      	bne.n	80180ac <xTaskResumeAll+0x2c>
	__asm volatile
 8018096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801809a:	f383 8811 	msr	BASEPRI, r3
 801809e:	f3bf 8f6f 	isb	sy
 80180a2:	f3bf 8f4f 	dsb	sy
 80180a6:	603b      	str	r3, [r7, #0]
}
 80180a8:	bf00      	nop
 80180aa:	e7fe      	b.n	80180aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80180ac:	f001 fa02 	bl	80194b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80180b0:	4b39      	ldr	r3, [pc, #228]	; (8018198 <xTaskResumeAll+0x118>)
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	3b01      	subs	r3, #1
 80180b6:	4a38      	ldr	r2, [pc, #224]	; (8018198 <xTaskResumeAll+0x118>)
 80180b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80180ba:	4b37      	ldr	r3, [pc, #220]	; (8018198 <xTaskResumeAll+0x118>)
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d162      	bne.n	8018188 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80180c2:	4b36      	ldr	r3, [pc, #216]	; (801819c <xTaskResumeAll+0x11c>)
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d05e      	beq.n	8018188 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80180ca:	e02f      	b.n	801812c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80180cc:	4b34      	ldr	r3, [pc, #208]	; (80181a0 <xTaskResumeAll+0x120>)
 80180ce:	68db      	ldr	r3, [r3, #12]
 80180d0:	68db      	ldr	r3, [r3, #12]
 80180d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	3318      	adds	r3, #24
 80180d8:	4618      	mov	r0, r3
 80180da:	f7fe ff6b 	bl	8016fb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	3304      	adds	r3, #4
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7fe ff66 	bl	8016fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180ec:	4b2d      	ldr	r3, [pc, #180]	; (80181a4 <xTaskResumeAll+0x124>)
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d903      	bls.n	80180fc <xTaskResumeAll+0x7c>
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180f8:	4a2a      	ldr	r2, [pc, #168]	; (80181a4 <xTaskResumeAll+0x124>)
 80180fa:	6013      	str	r3, [r2, #0]
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018100:	4613      	mov	r3, r2
 8018102:	009b      	lsls	r3, r3, #2
 8018104:	4413      	add	r3, r2
 8018106:	009b      	lsls	r3, r3, #2
 8018108:	4a27      	ldr	r2, [pc, #156]	; (80181a8 <xTaskResumeAll+0x128>)
 801810a:	441a      	add	r2, r3
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	3304      	adds	r3, #4
 8018110:	4619      	mov	r1, r3
 8018112:	4610      	mov	r0, r2
 8018114:	f7fe fef1 	bl	8016efa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801811c:	4b23      	ldr	r3, [pc, #140]	; (80181ac <xTaskResumeAll+0x12c>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018122:	429a      	cmp	r2, r3
 8018124:	d302      	bcc.n	801812c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018126:	4b22      	ldr	r3, [pc, #136]	; (80181b0 <xTaskResumeAll+0x130>)
 8018128:	2201      	movs	r2, #1
 801812a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801812c:	4b1c      	ldr	r3, [pc, #112]	; (80181a0 <xTaskResumeAll+0x120>)
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d1cb      	bne.n	80180cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d001      	beq.n	801813e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801813a:	f000 fc09 	bl	8018950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801813e:	4b1d      	ldr	r3, [pc, #116]	; (80181b4 <xTaskResumeAll+0x134>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d010      	beq.n	801816c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801814a:	f000 f847 	bl	80181dc <xTaskIncrementTick>
 801814e:	4603      	mov	r3, r0
 8018150:	2b00      	cmp	r3, #0
 8018152:	d002      	beq.n	801815a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018154:	4b16      	ldr	r3, [pc, #88]	; (80181b0 <xTaskResumeAll+0x130>)
 8018156:	2201      	movs	r2, #1
 8018158:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	3b01      	subs	r3, #1
 801815e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d1f1      	bne.n	801814a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018166:	4b13      	ldr	r3, [pc, #76]	; (80181b4 <xTaskResumeAll+0x134>)
 8018168:	2200      	movs	r2, #0
 801816a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801816c:	4b10      	ldr	r3, [pc, #64]	; (80181b0 <xTaskResumeAll+0x130>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d009      	beq.n	8018188 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018174:	2301      	movs	r3, #1
 8018176:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018178:	4b0f      	ldr	r3, [pc, #60]	; (80181b8 <xTaskResumeAll+0x138>)
 801817a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801817e:	601a      	str	r2, [r3, #0]
 8018180:	f3bf 8f4f 	dsb	sy
 8018184:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018188:	f001 f9c4 	bl	8019514 <vPortExitCritical>

	return xAlreadyYielded;
 801818c:	68bb      	ldr	r3, [r7, #8]
}
 801818e:	4618      	mov	r0, r3
 8018190:	3710      	adds	r7, #16
 8018192:	46bd      	mov	sp, r7
 8018194:	bd80      	pop	{r7, pc}
 8018196:	bf00      	nop
 8018198:	24002d60 	.word	0x24002d60
 801819c:	24002d38 	.word	0x24002d38
 80181a0:	24002cf8 	.word	0x24002cf8
 80181a4:	24002d40 	.word	0x24002d40
 80181a8:	24002868 	.word	0x24002868
 80181ac:	24002864 	.word	0x24002864
 80181b0:	24002d4c 	.word	0x24002d4c
 80181b4:	24002d48 	.word	0x24002d48
 80181b8:	e000ed04 	.word	0xe000ed04

080181bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80181bc:	b480      	push	{r7}
 80181be:	b083      	sub	sp, #12
 80181c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80181c2:	4b05      	ldr	r3, [pc, #20]	; (80181d8 <xTaskGetTickCount+0x1c>)
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80181c8:	687b      	ldr	r3, [r7, #4]
}
 80181ca:	4618      	mov	r0, r3
 80181cc:	370c      	adds	r7, #12
 80181ce:	46bd      	mov	sp, r7
 80181d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d4:	4770      	bx	lr
 80181d6:	bf00      	nop
 80181d8:	24002d3c 	.word	0x24002d3c

080181dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b086      	sub	sp, #24
 80181e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80181e2:	2300      	movs	r3, #0
 80181e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80181e6:	4b53      	ldr	r3, [pc, #332]	; (8018334 <xTaskIncrementTick+0x158>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	f040 8095 	bne.w	801831a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80181f0:	4b51      	ldr	r3, [pc, #324]	; (8018338 <xTaskIncrementTick+0x15c>)
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	3301      	adds	r3, #1
 80181f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80181f8:	4a4f      	ldr	r2, [pc, #316]	; (8018338 <xTaskIncrementTick+0x15c>)
 80181fa:	693b      	ldr	r3, [r7, #16]
 80181fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80181fe:	693b      	ldr	r3, [r7, #16]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d120      	bne.n	8018246 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018204:	4b4d      	ldr	r3, [pc, #308]	; (801833c <xTaskIncrementTick+0x160>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d00a      	beq.n	8018224 <xTaskIncrementTick+0x48>
	__asm volatile
 801820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018212:	f383 8811 	msr	BASEPRI, r3
 8018216:	f3bf 8f6f 	isb	sy
 801821a:	f3bf 8f4f 	dsb	sy
 801821e:	603b      	str	r3, [r7, #0]
}
 8018220:	bf00      	nop
 8018222:	e7fe      	b.n	8018222 <xTaskIncrementTick+0x46>
 8018224:	4b45      	ldr	r3, [pc, #276]	; (801833c <xTaskIncrementTick+0x160>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	60fb      	str	r3, [r7, #12]
 801822a:	4b45      	ldr	r3, [pc, #276]	; (8018340 <xTaskIncrementTick+0x164>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	4a43      	ldr	r2, [pc, #268]	; (801833c <xTaskIncrementTick+0x160>)
 8018230:	6013      	str	r3, [r2, #0]
 8018232:	4a43      	ldr	r2, [pc, #268]	; (8018340 <xTaskIncrementTick+0x164>)
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	6013      	str	r3, [r2, #0]
 8018238:	4b42      	ldr	r3, [pc, #264]	; (8018344 <xTaskIncrementTick+0x168>)
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	3301      	adds	r3, #1
 801823e:	4a41      	ldr	r2, [pc, #260]	; (8018344 <xTaskIncrementTick+0x168>)
 8018240:	6013      	str	r3, [r2, #0]
 8018242:	f000 fb85 	bl	8018950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018246:	4b40      	ldr	r3, [pc, #256]	; (8018348 <xTaskIncrementTick+0x16c>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	693a      	ldr	r2, [r7, #16]
 801824c:	429a      	cmp	r2, r3
 801824e:	d349      	bcc.n	80182e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018250:	4b3a      	ldr	r3, [pc, #232]	; (801833c <xTaskIncrementTick+0x160>)
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d104      	bne.n	8018264 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801825a:	4b3b      	ldr	r3, [pc, #236]	; (8018348 <xTaskIncrementTick+0x16c>)
 801825c:	f04f 32ff 	mov.w	r2, #4294967295
 8018260:	601a      	str	r2, [r3, #0]
					break;
 8018262:	e03f      	b.n	80182e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018264:	4b35      	ldr	r3, [pc, #212]	; (801833c <xTaskIncrementTick+0x160>)
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	68db      	ldr	r3, [r3, #12]
 801826a:	68db      	ldr	r3, [r3, #12]
 801826c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801826e:	68bb      	ldr	r3, [r7, #8]
 8018270:	685b      	ldr	r3, [r3, #4]
 8018272:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018274:	693a      	ldr	r2, [r7, #16]
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	429a      	cmp	r2, r3
 801827a:	d203      	bcs.n	8018284 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801827c:	4a32      	ldr	r2, [pc, #200]	; (8018348 <xTaskIncrementTick+0x16c>)
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018282:	e02f      	b.n	80182e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018284:	68bb      	ldr	r3, [r7, #8]
 8018286:	3304      	adds	r3, #4
 8018288:	4618      	mov	r0, r3
 801828a:	f7fe fe93 	bl	8016fb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801828e:	68bb      	ldr	r3, [r7, #8]
 8018290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018292:	2b00      	cmp	r3, #0
 8018294:	d004      	beq.n	80182a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	3318      	adds	r3, #24
 801829a:	4618      	mov	r0, r3
 801829c:	f7fe fe8a 	bl	8016fb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182a4:	4b29      	ldr	r3, [pc, #164]	; (801834c <xTaskIncrementTick+0x170>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d903      	bls.n	80182b4 <xTaskIncrementTick+0xd8>
 80182ac:	68bb      	ldr	r3, [r7, #8]
 80182ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182b0:	4a26      	ldr	r2, [pc, #152]	; (801834c <xTaskIncrementTick+0x170>)
 80182b2:	6013      	str	r3, [r2, #0]
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182b8:	4613      	mov	r3, r2
 80182ba:	009b      	lsls	r3, r3, #2
 80182bc:	4413      	add	r3, r2
 80182be:	009b      	lsls	r3, r3, #2
 80182c0:	4a23      	ldr	r2, [pc, #140]	; (8018350 <xTaskIncrementTick+0x174>)
 80182c2:	441a      	add	r2, r3
 80182c4:	68bb      	ldr	r3, [r7, #8]
 80182c6:	3304      	adds	r3, #4
 80182c8:	4619      	mov	r1, r3
 80182ca:	4610      	mov	r0, r2
 80182cc:	f7fe fe15 	bl	8016efa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80182d0:	68bb      	ldr	r3, [r7, #8]
 80182d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182d4:	4b1f      	ldr	r3, [pc, #124]	; (8018354 <xTaskIncrementTick+0x178>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182da:	429a      	cmp	r2, r3
 80182dc:	d3b8      	bcc.n	8018250 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80182de:	2301      	movs	r3, #1
 80182e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80182e2:	e7b5      	b.n	8018250 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80182e4:	4b1b      	ldr	r3, [pc, #108]	; (8018354 <xTaskIncrementTick+0x178>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182ea:	4919      	ldr	r1, [pc, #100]	; (8018350 <xTaskIncrementTick+0x174>)
 80182ec:	4613      	mov	r3, r2
 80182ee:	009b      	lsls	r3, r3, #2
 80182f0:	4413      	add	r3, r2
 80182f2:	009b      	lsls	r3, r3, #2
 80182f4:	440b      	add	r3, r1
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	2b01      	cmp	r3, #1
 80182fa:	d901      	bls.n	8018300 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80182fc:	2301      	movs	r3, #1
 80182fe:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018300:	4b15      	ldr	r3, [pc, #84]	; (8018358 <xTaskIncrementTick+0x17c>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d101      	bne.n	801830c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018308:	f7e9 f9cc 	bl	80016a4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801830c:	4b13      	ldr	r3, [pc, #76]	; (801835c <xTaskIncrementTick+0x180>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d009      	beq.n	8018328 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018314:	2301      	movs	r3, #1
 8018316:	617b      	str	r3, [r7, #20]
 8018318:	e006      	b.n	8018328 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801831a:	4b0f      	ldr	r3, [pc, #60]	; (8018358 <xTaskIncrementTick+0x17c>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	3301      	adds	r3, #1
 8018320:	4a0d      	ldr	r2, [pc, #52]	; (8018358 <xTaskIncrementTick+0x17c>)
 8018322:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018324:	f7e9 f9be 	bl	80016a4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018328:	697b      	ldr	r3, [r7, #20]
}
 801832a:	4618      	mov	r0, r3
 801832c:	3718      	adds	r7, #24
 801832e:	46bd      	mov	sp, r7
 8018330:	bd80      	pop	{r7, pc}
 8018332:	bf00      	nop
 8018334:	24002d60 	.word	0x24002d60
 8018338:	24002d3c 	.word	0x24002d3c
 801833c:	24002cf0 	.word	0x24002cf0
 8018340:	24002cf4 	.word	0x24002cf4
 8018344:	24002d50 	.word	0x24002d50
 8018348:	24002d58 	.word	0x24002d58
 801834c:	24002d40 	.word	0x24002d40
 8018350:	24002868 	.word	0x24002868
 8018354:	24002864 	.word	0x24002864
 8018358:	24002d48 	.word	0x24002d48
 801835c:	24002d4c 	.word	0x24002d4c

08018360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b084      	sub	sp, #16
 8018364:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018366:	4b2f      	ldr	r3, [pc, #188]	; (8018424 <vTaskSwitchContext+0xc4>)
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d003      	beq.n	8018376 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801836e:	4b2e      	ldr	r3, [pc, #184]	; (8018428 <vTaskSwitchContext+0xc8>)
 8018370:	2201      	movs	r2, #1
 8018372:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018374:	e052      	b.n	801841c <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8018376:	4b2c      	ldr	r3, [pc, #176]	; (8018428 <vTaskSwitchContext+0xc8>)
 8018378:	2200      	movs	r2, #0
 801837a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801837c:	4b2b      	ldr	r3, [pc, #172]	; (801842c <vTaskSwitchContext+0xcc>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	681a      	ldr	r2, [r3, #0]
 8018382:	4b2a      	ldr	r3, [pc, #168]	; (801842c <vTaskSwitchContext+0xcc>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018388:	429a      	cmp	r2, r3
 801838a:	d808      	bhi.n	801839e <vTaskSwitchContext+0x3e>
 801838c:	4b27      	ldr	r3, [pc, #156]	; (801842c <vTaskSwitchContext+0xcc>)
 801838e:	681a      	ldr	r2, [r3, #0]
 8018390:	4b26      	ldr	r3, [pc, #152]	; (801842c <vTaskSwitchContext+0xcc>)
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	3334      	adds	r3, #52	; 0x34
 8018396:	4619      	mov	r1, r3
 8018398:	4610      	mov	r0, r2
 801839a:	f7e9 f991 	bl	80016c0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801839e:	4b24      	ldr	r3, [pc, #144]	; (8018430 <vTaskSwitchContext+0xd0>)
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	60fb      	str	r3, [r7, #12]
 80183a4:	e010      	b.n	80183c8 <vTaskSwitchContext+0x68>
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d10a      	bne.n	80183c2 <vTaskSwitchContext+0x62>
	__asm volatile
 80183ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183b0:	f383 8811 	msr	BASEPRI, r3
 80183b4:	f3bf 8f6f 	isb	sy
 80183b8:	f3bf 8f4f 	dsb	sy
 80183bc:	607b      	str	r3, [r7, #4]
}
 80183be:	bf00      	nop
 80183c0:	e7fe      	b.n	80183c0 <vTaskSwitchContext+0x60>
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	3b01      	subs	r3, #1
 80183c6:	60fb      	str	r3, [r7, #12]
 80183c8:	491a      	ldr	r1, [pc, #104]	; (8018434 <vTaskSwitchContext+0xd4>)
 80183ca:	68fa      	ldr	r2, [r7, #12]
 80183cc:	4613      	mov	r3, r2
 80183ce:	009b      	lsls	r3, r3, #2
 80183d0:	4413      	add	r3, r2
 80183d2:	009b      	lsls	r3, r3, #2
 80183d4:	440b      	add	r3, r1
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d0e4      	beq.n	80183a6 <vTaskSwitchContext+0x46>
 80183dc:	68fa      	ldr	r2, [r7, #12]
 80183de:	4613      	mov	r3, r2
 80183e0:	009b      	lsls	r3, r3, #2
 80183e2:	4413      	add	r3, r2
 80183e4:	009b      	lsls	r3, r3, #2
 80183e6:	4a13      	ldr	r2, [pc, #76]	; (8018434 <vTaskSwitchContext+0xd4>)
 80183e8:	4413      	add	r3, r2
 80183ea:	60bb      	str	r3, [r7, #8]
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	685b      	ldr	r3, [r3, #4]
 80183f0:	685a      	ldr	r2, [r3, #4]
 80183f2:	68bb      	ldr	r3, [r7, #8]
 80183f4:	605a      	str	r2, [r3, #4]
 80183f6:	68bb      	ldr	r3, [r7, #8]
 80183f8:	685a      	ldr	r2, [r3, #4]
 80183fa:	68bb      	ldr	r3, [r7, #8]
 80183fc:	3308      	adds	r3, #8
 80183fe:	429a      	cmp	r2, r3
 8018400:	d104      	bne.n	801840c <vTaskSwitchContext+0xac>
 8018402:	68bb      	ldr	r3, [r7, #8]
 8018404:	685b      	ldr	r3, [r3, #4]
 8018406:	685a      	ldr	r2, [r3, #4]
 8018408:	68bb      	ldr	r3, [r7, #8]
 801840a:	605a      	str	r2, [r3, #4]
 801840c:	68bb      	ldr	r3, [r7, #8]
 801840e:	685b      	ldr	r3, [r3, #4]
 8018410:	68db      	ldr	r3, [r3, #12]
 8018412:	4a06      	ldr	r2, [pc, #24]	; (801842c <vTaskSwitchContext+0xcc>)
 8018414:	6013      	str	r3, [r2, #0]
 8018416:	4a06      	ldr	r2, [pc, #24]	; (8018430 <vTaskSwitchContext+0xd0>)
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	6013      	str	r3, [r2, #0]
}
 801841c:	bf00      	nop
 801841e:	3710      	adds	r7, #16
 8018420:	46bd      	mov	sp, r7
 8018422:	bd80      	pop	{r7, pc}
 8018424:	24002d60 	.word	0x24002d60
 8018428:	24002d4c 	.word	0x24002d4c
 801842c:	24002864 	.word	0x24002864
 8018430:	24002d40 	.word	0x24002d40
 8018434:	24002868 	.word	0x24002868

08018438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d10a      	bne.n	801845e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801844c:	f383 8811 	msr	BASEPRI, r3
 8018450:	f3bf 8f6f 	isb	sy
 8018454:	f3bf 8f4f 	dsb	sy
 8018458:	60fb      	str	r3, [r7, #12]
}
 801845a:	bf00      	nop
 801845c:	e7fe      	b.n	801845c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801845e:	4b07      	ldr	r3, [pc, #28]	; (801847c <vTaskPlaceOnEventList+0x44>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	3318      	adds	r3, #24
 8018464:	4619      	mov	r1, r3
 8018466:	6878      	ldr	r0, [r7, #4]
 8018468:	f7fe fd6b 	bl	8016f42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801846c:	2101      	movs	r1, #1
 801846e:	6838      	ldr	r0, [r7, #0]
 8018470:	f000 fb32 	bl	8018ad8 <prvAddCurrentTaskToDelayedList>
}
 8018474:	bf00      	nop
 8018476:	3710      	adds	r7, #16
 8018478:	46bd      	mov	sp, r7
 801847a:	bd80      	pop	{r7, pc}
 801847c:	24002864 	.word	0x24002864

08018480 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b086      	sub	sp, #24
 8018484:	af00      	add	r7, sp, #0
 8018486:	60f8      	str	r0, [r7, #12]
 8018488:	60b9      	str	r1, [r7, #8]
 801848a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d10a      	bne.n	80184a8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8018492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018496:	f383 8811 	msr	BASEPRI, r3
 801849a:	f3bf 8f6f 	isb	sy
 801849e:	f3bf 8f4f 	dsb	sy
 80184a2:	617b      	str	r3, [r7, #20]
}
 80184a4:	bf00      	nop
 80184a6:	e7fe      	b.n	80184a6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80184a8:	4b11      	ldr	r3, [pc, #68]	; (80184f0 <vTaskPlaceOnUnorderedEventList+0x70>)
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d10a      	bne.n	80184c6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80184b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184b4:	f383 8811 	msr	BASEPRI, r3
 80184b8:	f3bf 8f6f 	isb	sy
 80184bc:	f3bf 8f4f 	dsb	sy
 80184c0:	613b      	str	r3, [r7, #16]
}
 80184c2:	bf00      	nop
 80184c4:	e7fe      	b.n	80184c4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80184c6:	4b0b      	ldr	r3, [pc, #44]	; (80184f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	68ba      	ldr	r2, [r7, #8]
 80184cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80184d0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80184d2:	4b08      	ldr	r3, [pc, #32]	; (80184f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	3318      	adds	r3, #24
 80184d8:	4619      	mov	r1, r3
 80184da:	68f8      	ldr	r0, [r7, #12]
 80184dc:	f7fe fd0d 	bl	8016efa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80184e0:	2101      	movs	r1, #1
 80184e2:	6878      	ldr	r0, [r7, #4]
 80184e4:	f000 faf8 	bl	8018ad8 <prvAddCurrentTaskToDelayedList>
}
 80184e8:	bf00      	nop
 80184ea:	3718      	adds	r7, #24
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}
 80184f0:	24002d60 	.word	0x24002d60
 80184f4:	24002864 	.word	0x24002864

080184f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b086      	sub	sp, #24
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	60f8      	str	r0, [r7, #12]
 8018500:	60b9      	str	r1, [r7, #8]
 8018502:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d10a      	bne.n	8018520 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801850e:	f383 8811 	msr	BASEPRI, r3
 8018512:	f3bf 8f6f 	isb	sy
 8018516:	f3bf 8f4f 	dsb	sy
 801851a:	617b      	str	r3, [r7, #20]
}
 801851c:	bf00      	nop
 801851e:	e7fe      	b.n	801851e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018520:	4b0a      	ldr	r3, [pc, #40]	; (801854c <vTaskPlaceOnEventListRestricted+0x54>)
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	3318      	adds	r3, #24
 8018526:	4619      	mov	r1, r3
 8018528:	68f8      	ldr	r0, [r7, #12]
 801852a:	f7fe fce6 	bl	8016efa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d002      	beq.n	801853a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018534:	f04f 33ff 	mov.w	r3, #4294967295
 8018538:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801853a:	6879      	ldr	r1, [r7, #4]
 801853c:	68b8      	ldr	r0, [r7, #8]
 801853e:	f000 facb 	bl	8018ad8 <prvAddCurrentTaskToDelayedList>
	}
 8018542:	bf00      	nop
 8018544:	3718      	adds	r7, #24
 8018546:	46bd      	mov	sp, r7
 8018548:	bd80      	pop	{r7, pc}
 801854a:	bf00      	nop
 801854c:	24002864 	.word	0x24002864

08018550 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018550:	b580      	push	{r7, lr}
 8018552:	b086      	sub	sp, #24
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	68db      	ldr	r3, [r3, #12]
 801855c:	68db      	ldr	r3, [r3, #12]
 801855e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018560:	693b      	ldr	r3, [r7, #16]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d10a      	bne.n	801857c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801856a:	f383 8811 	msr	BASEPRI, r3
 801856e:	f3bf 8f6f 	isb	sy
 8018572:	f3bf 8f4f 	dsb	sy
 8018576:	60fb      	str	r3, [r7, #12]
}
 8018578:	bf00      	nop
 801857a:	e7fe      	b.n	801857a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801857c:	693b      	ldr	r3, [r7, #16]
 801857e:	3318      	adds	r3, #24
 8018580:	4618      	mov	r0, r3
 8018582:	f7fe fd17 	bl	8016fb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018586:	4b1e      	ldr	r3, [pc, #120]	; (8018600 <xTaskRemoveFromEventList+0xb0>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d11d      	bne.n	80185ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801858e:	693b      	ldr	r3, [r7, #16]
 8018590:	3304      	adds	r3, #4
 8018592:	4618      	mov	r0, r3
 8018594:	f7fe fd0e 	bl	8016fb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018598:	693b      	ldr	r3, [r7, #16]
 801859a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801859c:	4b19      	ldr	r3, [pc, #100]	; (8018604 <xTaskRemoveFromEventList+0xb4>)
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	429a      	cmp	r2, r3
 80185a2:	d903      	bls.n	80185ac <xTaskRemoveFromEventList+0x5c>
 80185a4:	693b      	ldr	r3, [r7, #16]
 80185a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185a8:	4a16      	ldr	r2, [pc, #88]	; (8018604 <xTaskRemoveFromEventList+0xb4>)
 80185aa:	6013      	str	r3, [r2, #0]
 80185ac:	693b      	ldr	r3, [r7, #16]
 80185ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185b0:	4613      	mov	r3, r2
 80185b2:	009b      	lsls	r3, r3, #2
 80185b4:	4413      	add	r3, r2
 80185b6:	009b      	lsls	r3, r3, #2
 80185b8:	4a13      	ldr	r2, [pc, #76]	; (8018608 <xTaskRemoveFromEventList+0xb8>)
 80185ba:	441a      	add	r2, r3
 80185bc:	693b      	ldr	r3, [r7, #16]
 80185be:	3304      	adds	r3, #4
 80185c0:	4619      	mov	r1, r3
 80185c2:	4610      	mov	r0, r2
 80185c4:	f7fe fc99 	bl	8016efa <vListInsertEnd>
 80185c8:	e005      	b.n	80185d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80185ca:	693b      	ldr	r3, [r7, #16]
 80185cc:	3318      	adds	r3, #24
 80185ce:	4619      	mov	r1, r3
 80185d0:	480e      	ldr	r0, [pc, #56]	; (801860c <xTaskRemoveFromEventList+0xbc>)
 80185d2:	f7fe fc92 	bl	8016efa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80185d6:	693b      	ldr	r3, [r7, #16]
 80185d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185da:	4b0d      	ldr	r3, [pc, #52]	; (8018610 <xTaskRemoveFromEventList+0xc0>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d905      	bls.n	80185f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80185e4:	2301      	movs	r3, #1
 80185e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80185e8:	4b0a      	ldr	r3, [pc, #40]	; (8018614 <xTaskRemoveFromEventList+0xc4>)
 80185ea:	2201      	movs	r2, #1
 80185ec:	601a      	str	r2, [r3, #0]
 80185ee:	e001      	b.n	80185f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80185f0:	2300      	movs	r3, #0
 80185f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80185f4:	697b      	ldr	r3, [r7, #20]
}
 80185f6:	4618      	mov	r0, r3
 80185f8:	3718      	adds	r7, #24
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bd80      	pop	{r7, pc}
 80185fe:	bf00      	nop
 8018600:	24002d60 	.word	0x24002d60
 8018604:	24002d40 	.word	0x24002d40
 8018608:	24002868 	.word	0x24002868
 801860c:	24002cf8 	.word	0x24002cf8
 8018610:	24002864 	.word	0x24002864
 8018614:	24002d4c 	.word	0x24002d4c

08018618 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b086      	sub	sp, #24
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018622:	4b29      	ldr	r3, [pc, #164]	; (80186c8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d10a      	bne.n	8018640 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801862e:	f383 8811 	msr	BASEPRI, r3
 8018632:	f3bf 8f6f 	isb	sy
 8018636:	f3bf 8f4f 	dsb	sy
 801863a:	613b      	str	r3, [r7, #16]
}
 801863c:	bf00      	nop
 801863e:	e7fe      	b.n	801863e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018640:	683b      	ldr	r3, [r7, #0]
 8018642:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	68db      	ldr	r3, [r3, #12]
 801864e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d10a      	bne.n	801866c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801865a:	f383 8811 	msr	BASEPRI, r3
 801865e:	f3bf 8f6f 	isb	sy
 8018662:	f3bf 8f4f 	dsb	sy
 8018666:	60fb      	str	r3, [r7, #12]
}
 8018668:	bf00      	nop
 801866a:	e7fe      	b.n	801866a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801866c:	6878      	ldr	r0, [r7, #4]
 801866e:	f7fe fca1 	bl	8016fb4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018672:	697b      	ldr	r3, [r7, #20]
 8018674:	3304      	adds	r3, #4
 8018676:	4618      	mov	r0, r3
 8018678:	f7fe fc9c 	bl	8016fb4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801867c:	697b      	ldr	r3, [r7, #20]
 801867e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018680:	4b12      	ldr	r3, [pc, #72]	; (80186cc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	429a      	cmp	r2, r3
 8018686:	d903      	bls.n	8018690 <vTaskRemoveFromUnorderedEventList+0x78>
 8018688:	697b      	ldr	r3, [r7, #20]
 801868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801868c:	4a0f      	ldr	r2, [pc, #60]	; (80186cc <vTaskRemoveFromUnorderedEventList+0xb4>)
 801868e:	6013      	str	r3, [r2, #0]
 8018690:	697b      	ldr	r3, [r7, #20]
 8018692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018694:	4613      	mov	r3, r2
 8018696:	009b      	lsls	r3, r3, #2
 8018698:	4413      	add	r3, r2
 801869a:	009b      	lsls	r3, r3, #2
 801869c:	4a0c      	ldr	r2, [pc, #48]	; (80186d0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801869e:	441a      	add	r2, r3
 80186a0:	697b      	ldr	r3, [r7, #20]
 80186a2:	3304      	adds	r3, #4
 80186a4:	4619      	mov	r1, r3
 80186a6:	4610      	mov	r0, r2
 80186a8:	f7fe fc27 	bl	8016efa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80186ac:	697b      	ldr	r3, [r7, #20]
 80186ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186b0:	4b08      	ldr	r3, [pc, #32]	; (80186d4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186b6:	429a      	cmp	r2, r3
 80186b8:	d902      	bls.n	80186c0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80186ba:	4b07      	ldr	r3, [pc, #28]	; (80186d8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80186bc:	2201      	movs	r2, #1
 80186be:	601a      	str	r2, [r3, #0]
	}
}
 80186c0:	bf00      	nop
 80186c2:	3718      	adds	r7, #24
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	24002d60 	.word	0x24002d60
 80186cc:	24002d40 	.word	0x24002d40
 80186d0:	24002868 	.word	0x24002868
 80186d4:	24002864 	.word	0x24002864
 80186d8:	24002d4c 	.word	0x24002d4c

080186dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80186dc:	b480      	push	{r7}
 80186de:	b083      	sub	sp, #12
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80186e4:	4b06      	ldr	r3, [pc, #24]	; (8018700 <vTaskInternalSetTimeOutState+0x24>)
 80186e6:	681a      	ldr	r2, [r3, #0]
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80186ec:	4b05      	ldr	r3, [pc, #20]	; (8018704 <vTaskInternalSetTimeOutState+0x28>)
 80186ee:	681a      	ldr	r2, [r3, #0]
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	605a      	str	r2, [r3, #4]
}
 80186f4:	bf00      	nop
 80186f6:	370c      	adds	r7, #12
 80186f8:	46bd      	mov	sp, r7
 80186fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fe:	4770      	bx	lr
 8018700:	24002d50 	.word	0x24002d50
 8018704:	24002d3c 	.word	0x24002d3c

08018708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b088      	sub	sp, #32
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
 8018710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d10a      	bne.n	801872e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801871c:	f383 8811 	msr	BASEPRI, r3
 8018720:	f3bf 8f6f 	isb	sy
 8018724:	f3bf 8f4f 	dsb	sy
 8018728:	613b      	str	r3, [r7, #16]
}
 801872a:	bf00      	nop
 801872c:	e7fe      	b.n	801872c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801872e:	683b      	ldr	r3, [r7, #0]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d10a      	bne.n	801874a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018738:	f383 8811 	msr	BASEPRI, r3
 801873c:	f3bf 8f6f 	isb	sy
 8018740:	f3bf 8f4f 	dsb	sy
 8018744:	60fb      	str	r3, [r7, #12]
}
 8018746:	bf00      	nop
 8018748:	e7fe      	b.n	8018748 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801874a:	f000 feb3 	bl	80194b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801874e:	4b1d      	ldr	r3, [pc, #116]	; (80187c4 <xTaskCheckForTimeOut+0xbc>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	685b      	ldr	r3, [r3, #4]
 8018758:	69ba      	ldr	r2, [r7, #24]
 801875a:	1ad3      	subs	r3, r2, r3
 801875c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018766:	d102      	bne.n	801876e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018768:	2300      	movs	r3, #0
 801876a:	61fb      	str	r3, [r7, #28]
 801876c:	e023      	b.n	80187b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681a      	ldr	r2, [r3, #0]
 8018772:	4b15      	ldr	r3, [pc, #84]	; (80187c8 <xTaskCheckForTimeOut+0xc0>)
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	429a      	cmp	r2, r3
 8018778:	d007      	beq.n	801878a <xTaskCheckForTimeOut+0x82>
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	685b      	ldr	r3, [r3, #4]
 801877e:	69ba      	ldr	r2, [r7, #24]
 8018780:	429a      	cmp	r2, r3
 8018782:	d302      	bcc.n	801878a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018784:	2301      	movs	r3, #1
 8018786:	61fb      	str	r3, [r7, #28]
 8018788:	e015      	b.n	80187b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801878a:	683b      	ldr	r3, [r7, #0]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	697a      	ldr	r2, [r7, #20]
 8018790:	429a      	cmp	r2, r3
 8018792:	d20b      	bcs.n	80187ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	681a      	ldr	r2, [r3, #0]
 8018798:	697b      	ldr	r3, [r7, #20]
 801879a:	1ad2      	subs	r2, r2, r3
 801879c:	683b      	ldr	r3, [r7, #0]
 801879e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80187a0:	6878      	ldr	r0, [r7, #4]
 80187a2:	f7ff ff9b 	bl	80186dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80187a6:	2300      	movs	r3, #0
 80187a8:	61fb      	str	r3, [r7, #28]
 80187aa:	e004      	b.n	80187b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80187ac:	683b      	ldr	r3, [r7, #0]
 80187ae:	2200      	movs	r2, #0
 80187b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80187b2:	2301      	movs	r3, #1
 80187b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80187b6:	f000 fead 	bl	8019514 <vPortExitCritical>

	return xReturn;
 80187ba:	69fb      	ldr	r3, [r7, #28]
}
 80187bc:	4618      	mov	r0, r3
 80187be:	3720      	adds	r7, #32
 80187c0:	46bd      	mov	sp, r7
 80187c2:	bd80      	pop	{r7, pc}
 80187c4:	24002d3c 	.word	0x24002d3c
 80187c8:	24002d50 	.word	0x24002d50

080187cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80187cc:	b480      	push	{r7}
 80187ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80187d0:	4b03      	ldr	r3, [pc, #12]	; (80187e0 <vTaskMissedYield+0x14>)
 80187d2:	2201      	movs	r2, #1
 80187d4:	601a      	str	r2, [r3, #0]
}
 80187d6:	bf00      	nop
 80187d8:	46bd      	mov	sp, r7
 80187da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187de:	4770      	bx	lr
 80187e0:	24002d4c 	.word	0x24002d4c

080187e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b082      	sub	sp, #8
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80187ec:	f000 f852 	bl	8018894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80187f0:	4b06      	ldr	r3, [pc, #24]	; (801880c <prvIdleTask+0x28>)
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	2b01      	cmp	r3, #1
 80187f6:	d9f9      	bls.n	80187ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80187f8:	4b05      	ldr	r3, [pc, #20]	; (8018810 <prvIdleTask+0x2c>)
 80187fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187fe:	601a      	str	r2, [r3, #0]
 8018800:	f3bf 8f4f 	dsb	sy
 8018804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018808:	e7f0      	b.n	80187ec <prvIdleTask+0x8>
 801880a:	bf00      	nop
 801880c:	24002868 	.word	0x24002868
 8018810:	e000ed04 	.word	0xe000ed04

08018814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b082      	sub	sp, #8
 8018818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801881a:	2300      	movs	r3, #0
 801881c:	607b      	str	r3, [r7, #4]
 801881e:	e00c      	b.n	801883a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018820:	687a      	ldr	r2, [r7, #4]
 8018822:	4613      	mov	r3, r2
 8018824:	009b      	lsls	r3, r3, #2
 8018826:	4413      	add	r3, r2
 8018828:	009b      	lsls	r3, r3, #2
 801882a:	4a12      	ldr	r2, [pc, #72]	; (8018874 <prvInitialiseTaskLists+0x60>)
 801882c:	4413      	add	r3, r2
 801882e:	4618      	mov	r0, r3
 8018830:	f7fe fb36 	bl	8016ea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	3301      	adds	r3, #1
 8018838:	607b      	str	r3, [r7, #4]
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	2b37      	cmp	r3, #55	; 0x37
 801883e:	d9ef      	bls.n	8018820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018840:	480d      	ldr	r0, [pc, #52]	; (8018878 <prvInitialiseTaskLists+0x64>)
 8018842:	f7fe fb2d 	bl	8016ea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018846:	480d      	ldr	r0, [pc, #52]	; (801887c <prvInitialiseTaskLists+0x68>)
 8018848:	f7fe fb2a 	bl	8016ea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801884c:	480c      	ldr	r0, [pc, #48]	; (8018880 <prvInitialiseTaskLists+0x6c>)
 801884e:	f7fe fb27 	bl	8016ea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018852:	480c      	ldr	r0, [pc, #48]	; (8018884 <prvInitialiseTaskLists+0x70>)
 8018854:	f7fe fb24 	bl	8016ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018858:	480b      	ldr	r0, [pc, #44]	; (8018888 <prvInitialiseTaskLists+0x74>)
 801885a:	f7fe fb21 	bl	8016ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801885e:	4b0b      	ldr	r3, [pc, #44]	; (801888c <prvInitialiseTaskLists+0x78>)
 8018860:	4a05      	ldr	r2, [pc, #20]	; (8018878 <prvInitialiseTaskLists+0x64>)
 8018862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018864:	4b0a      	ldr	r3, [pc, #40]	; (8018890 <prvInitialiseTaskLists+0x7c>)
 8018866:	4a05      	ldr	r2, [pc, #20]	; (801887c <prvInitialiseTaskLists+0x68>)
 8018868:	601a      	str	r2, [r3, #0]
}
 801886a:	bf00      	nop
 801886c:	3708      	adds	r7, #8
 801886e:	46bd      	mov	sp, r7
 8018870:	bd80      	pop	{r7, pc}
 8018872:	bf00      	nop
 8018874:	24002868 	.word	0x24002868
 8018878:	24002cc8 	.word	0x24002cc8
 801887c:	24002cdc 	.word	0x24002cdc
 8018880:	24002cf8 	.word	0x24002cf8
 8018884:	24002d0c 	.word	0x24002d0c
 8018888:	24002d24 	.word	0x24002d24
 801888c:	24002cf0 	.word	0x24002cf0
 8018890:	24002cf4 	.word	0x24002cf4

08018894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b082      	sub	sp, #8
 8018898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801889a:	e019      	b.n	80188d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801889c:	f000 fe0a 	bl	80194b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188a0:	4b10      	ldr	r3, [pc, #64]	; (80188e4 <prvCheckTasksWaitingTermination+0x50>)
 80188a2:	68db      	ldr	r3, [r3, #12]
 80188a4:	68db      	ldr	r3, [r3, #12]
 80188a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	3304      	adds	r3, #4
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7fe fb81 	bl	8016fb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80188b2:	4b0d      	ldr	r3, [pc, #52]	; (80188e8 <prvCheckTasksWaitingTermination+0x54>)
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	3b01      	subs	r3, #1
 80188b8:	4a0b      	ldr	r2, [pc, #44]	; (80188e8 <prvCheckTasksWaitingTermination+0x54>)
 80188ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80188bc:	4b0b      	ldr	r3, [pc, #44]	; (80188ec <prvCheckTasksWaitingTermination+0x58>)
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	3b01      	subs	r3, #1
 80188c2:	4a0a      	ldr	r2, [pc, #40]	; (80188ec <prvCheckTasksWaitingTermination+0x58>)
 80188c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80188c6:	f000 fe25 	bl	8019514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80188ca:	6878      	ldr	r0, [r7, #4]
 80188cc:	f000 f810 	bl	80188f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80188d0:	4b06      	ldr	r3, [pc, #24]	; (80188ec <prvCheckTasksWaitingTermination+0x58>)
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d1e1      	bne.n	801889c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80188d8:	bf00      	nop
 80188da:	bf00      	nop
 80188dc:	3708      	adds	r7, #8
 80188de:	46bd      	mov	sp, r7
 80188e0:	bd80      	pop	{r7, pc}
 80188e2:	bf00      	nop
 80188e4:	24002d0c 	.word	0x24002d0c
 80188e8:	24002d38 	.word	0x24002d38
 80188ec:	24002d20 	.word	0x24002d20

080188f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b084      	sub	sp, #16
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d108      	bne.n	8018914 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018906:	4618      	mov	r0, r3
 8018908:	f000 ffc2 	bl	8019890 <vPortFree>
				vPortFree( pxTCB );
 801890c:	6878      	ldr	r0, [r7, #4]
 801890e:	f000 ffbf 	bl	8019890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018912:	e018      	b.n	8018946 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801891a:	2b01      	cmp	r3, #1
 801891c:	d103      	bne.n	8018926 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801891e:	6878      	ldr	r0, [r7, #4]
 8018920:	f000 ffb6 	bl	8019890 <vPortFree>
	}
 8018924:	e00f      	b.n	8018946 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801892c:	2b02      	cmp	r3, #2
 801892e:	d00a      	beq.n	8018946 <prvDeleteTCB+0x56>
	__asm volatile
 8018930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018934:	f383 8811 	msr	BASEPRI, r3
 8018938:	f3bf 8f6f 	isb	sy
 801893c:	f3bf 8f4f 	dsb	sy
 8018940:	60fb      	str	r3, [r7, #12]
}
 8018942:	bf00      	nop
 8018944:	e7fe      	b.n	8018944 <prvDeleteTCB+0x54>
	}
 8018946:	bf00      	nop
 8018948:	3710      	adds	r7, #16
 801894a:	46bd      	mov	sp, r7
 801894c:	bd80      	pop	{r7, pc}
	...

08018950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018950:	b480      	push	{r7}
 8018952:	b083      	sub	sp, #12
 8018954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018956:	4b0c      	ldr	r3, [pc, #48]	; (8018988 <prvResetNextTaskUnblockTime+0x38>)
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d104      	bne.n	801896a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018960:	4b0a      	ldr	r3, [pc, #40]	; (801898c <prvResetNextTaskUnblockTime+0x3c>)
 8018962:	f04f 32ff 	mov.w	r2, #4294967295
 8018966:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018968:	e008      	b.n	801897c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801896a:	4b07      	ldr	r3, [pc, #28]	; (8018988 <prvResetNextTaskUnblockTime+0x38>)
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	68db      	ldr	r3, [r3, #12]
 8018970:	68db      	ldr	r3, [r3, #12]
 8018972:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	685b      	ldr	r3, [r3, #4]
 8018978:	4a04      	ldr	r2, [pc, #16]	; (801898c <prvResetNextTaskUnblockTime+0x3c>)
 801897a:	6013      	str	r3, [r2, #0]
}
 801897c:	bf00      	nop
 801897e:	370c      	adds	r7, #12
 8018980:	46bd      	mov	sp, r7
 8018982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018986:	4770      	bx	lr
 8018988:	24002cf0 	.word	0x24002cf0
 801898c:	24002d58 	.word	0x24002d58

08018990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018990:	b480      	push	{r7}
 8018992:	b083      	sub	sp, #12
 8018994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018996:	4b0b      	ldr	r3, [pc, #44]	; (80189c4 <xTaskGetSchedulerState+0x34>)
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d102      	bne.n	80189a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801899e:	2301      	movs	r3, #1
 80189a0:	607b      	str	r3, [r7, #4]
 80189a2:	e008      	b.n	80189b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80189a4:	4b08      	ldr	r3, [pc, #32]	; (80189c8 <xTaskGetSchedulerState+0x38>)
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d102      	bne.n	80189b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80189ac:	2302      	movs	r3, #2
 80189ae:	607b      	str	r3, [r7, #4]
 80189b0:	e001      	b.n	80189b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80189b2:	2300      	movs	r3, #0
 80189b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80189b6:	687b      	ldr	r3, [r7, #4]
	}
 80189b8:	4618      	mov	r0, r3
 80189ba:	370c      	adds	r7, #12
 80189bc:	46bd      	mov	sp, r7
 80189be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c2:	4770      	bx	lr
 80189c4:	24002d44 	.word	0x24002d44
 80189c8:	24002d60 	.word	0x24002d60

080189cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b086      	sub	sp, #24
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80189d8:	2300      	movs	r3, #0
 80189da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d056      	beq.n	8018a90 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80189e2:	4b2e      	ldr	r3, [pc, #184]	; (8018a9c <xTaskPriorityDisinherit+0xd0>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	693a      	ldr	r2, [r7, #16]
 80189e8:	429a      	cmp	r2, r3
 80189ea:	d00a      	beq.n	8018a02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80189ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189f0:	f383 8811 	msr	BASEPRI, r3
 80189f4:	f3bf 8f6f 	isb	sy
 80189f8:	f3bf 8f4f 	dsb	sy
 80189fc:	60fb      	str	r3, [r7, #12]
}
 80189fe:	bf00      	nop
 8018a00:	e7fe      	b.n	8018a00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018a02:	693b      	ldr	r3, [r7, #16]
 8018a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d10a      	bne.n	8018a20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a0e:	f383 8811 	msr	BASEPRI, r3
 8018a12:	f3bf 8f6f 	isb	sy
 8018a16:	f3bf 8f4f 	dsb	sy
 8018a1a:	60bb      	str	r3, [r7, #8]
}
 8018a1c:	bf00      	nop
 8018a1e:	e7fe      	b.n	8018a1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018a20:	693b      	ldr	r3, [r7, #16]
 8018a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a24:	1e5a      	subs	r2, r3, #1
 8018a26:	693b      	ldr	r3, [r7, #16]
 8018a28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a2e:	693b      	ldr	r3, [r7, #16]
 8018a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a32:	429a      	cmp	r2, r3
 8018a34:	d02c      	beq.n	8018a90 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018a36:	693b      	ldr	r3, [r7, #16]
 8018a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d128      	bne.n	8018a90 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a3e:	693b      	ldr	r3, [r7, #16]
 8018a40:	3304      	adds	r3, #4
 8018a42:	4618      	mov	r0, r3
 8018a44:	f7fe fab6 	bl	8016fb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018a48:	693b      	ldr	r3, [r7, #16]
 8018a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018a4c:	693b      	ldr	r3, [r7, #16]
 8018a4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a50:	693b      	ldr	r3, [r7, #16]
 8018a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018a58:	693b      	ldr	r3, [r7, #16]
 8018a5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a60:	4b0f      	ldr	r3, [pc, #60]	; (8018aa0 <xTaskPriorityDisinherit+0xd4>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	429a      	cmp	r2, r3
 8018a66:	d903      	bls.n	8018a70 <xTaskPriorityDisinherit+0xa4>
 8018a68:	693b      	ldr	r3, [r7, #16]
 8018a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a6c:	4a0c      	ldr	r2, [pc, #48]	; (8018aa0 <xTaskPriorityDisinherit+0xd4>)
 8018a6e:	6013      	str	r3, [r2, #0]
 8018a70:	693b      	ldr	r3, [r7, #16]
 8018a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a74:	4613      	mov	r3, r2
 8018a76:	009b      	lsls	r3, r3, #2
 8018a78:	4413      	add	r3, r2
 8018a7a:	009b      	lsls	r3, r3, #2
 8018a7c:	4a09      	ldr	r2, [pc, #36]	; (8018aa4 <xTaskPriorityDisinherit+0xd8>)
 8018a7e:	441a      	add	r2, r3
 8018a80:	693b      	ldr	r3, [r7, #16]
 8018a82:	3304      	adds	r3, #4
 8018a84:	4619      	mov	r1, r3
 8018a86:	4610      	mov	r0, r2
 8018a88:	f7fe fa37 	bl	8016efa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018a8c:	2301      	movs	r3, #1
 8018a8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018a90:	697b      	ldr	r3, [r7, #20]
	}
 8018a92:	4618      	mov	r0, r3
 8018a94:	3718      	adds	r7, #24
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	bf00      	nop
 8018a9c:	24002864 	.word	0x24002864
 8018aa0:	24002d40 	.word	0x24002d40
 8018aa4:	24002868 	.word	0x24002868

08018aa8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018aa8:	b480      	push	{r7}
 8018aaa:	b083      	sub	sp, #12
 8018aac:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018aae:	4b09      	ldr	r3, [pc, #36]	; (8018ad4 <uxTaskResetEventItemValue+0x2c>)
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	699b      	ldr	r3, [r3, #24]
 8018ab4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018ab6:	4b07      	ldr	r3, [pc, #28]	; (8018ad4 <uxTaskResetEventItemValue+0x2c>)
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018abc:	4b05      	ldr	r3, [pc, #20]	; (8018ad4 <uxTaskResetEventItemValue+0x2c>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018ac4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018ac6:	687b      	ldr	r3, [r7, #4]
}
 8018ac8:	4618      	mov	r0, r3
 8018aca:	370c      	adds	r7, #12
 8018acc:	46bd      	mov	sp, r7
 8018ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad2:	4770      	bx	lr
 8018ad4:	24002864 	.word	0x24002864

08018ad8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b084      	sub	sp, #16
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
 8018ae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018ae2:	4b21      	ldr	r3, [pc, #132]	; (8018b68 <prvAddCurrentTaskToDelayedList+0x90>)
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018ae8:	4b20      	ldr	r3, [pc, #128]	; (8018b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	3304      	adds	r3, #4
 8018aee:	4618      	mov	r0, r3
 8018af0:	f7fe fa60 	bl	8016fb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018afa:	d10a      	bne.n	8018b12 <prvAddCurrentTaskToDelayedList+0x3a>
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d007      	beq.n	8018b12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018b02:	4b1a      	ldr	r3, [pc, #104]	; (8018b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	3304      	adds	r3, #4
 8018b08:	4619      	mov	r1, r3
 8018b0a:	4819      	ldr	r0, [pc, #100]	; (8018b70 <prvAddCurrentTaskToDelayedList+0x98>)
 8018b0c:	f7fe f9f5 	bl	8016efa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018b10:	e026      	b.n	8018b60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018b12:	68fa      	ldr	r2, [r7, #12]
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	4413      	add	r3, r2
 8018b18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018b1a:	4b14      	ldr	r3, [pc, #80]	; (8018b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	68ba      	ldr	r2, [r7, #8]
 8018b20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018b22:	68ba      	ldr	r2, [r7, #8]
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	429a      	cmp	r2, r3
 8018b28:	d209      	bcs.n	8018b3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018b2a:	4b12      	ldr	r3, [pc, #72]	; (8018b74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018b2c:	681a      	ldr	r2, [r3, #0]
 8018b2e:	4b0f      	ldr	r3, [pc, #60]	; (8018b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	3304      	adds	r3, #4
 8018b34:	4619      	mov	r1, r3
 8018b36:	4610      	mov	r0, r2
 8018b38:	f7fe fa03 	bl	8016f42 <vListInsert>
}
 8018b3c:	e010      	b.n	8018b60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018b3e:	4b0e      	ldr	r3, [pc, #56]	; (8018b78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018b40:	681a      	ldr	r2, [r3, #0]
 8018b42:	4b0a      	ldr	r3, [pc, #40]	; (8018b6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	3304      	adds	r3, #4
 8018b48:	4619      	mov	r1, r3
 8018b4a:	4610      	mov	r0, r2
 8018b4c:	f7fe f9f9 	bl	8016f42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018b50:	4b0a      	ldr	r3, [pc, #40]	; (8018b7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	68ba      	ldr	r2, [r7, #8]
 8018b56:	429a      	cmp	r2, r3
 8018b58:	d202      	bcs.n	8018b60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018b5a:	4a08      	ldr	r2, [pc, #32]	; (8018b7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018b5c:	68bb      	ldr	r3, [r7, #8]
 8018b5e:	6013      	str	r3, [r2, #0]
}
 8018b60:	bf00      	nop
 8018b62:	3710      	adds	r7, #16
 8018b64:	46bd      	mov	sp, r7
 8018b66:	bd80      	pop	{r7, pc}
 8018b68:	24002d3c 	.word	0x24002d3c
 8018b6c:	24002864 	.word	0x24002864
 8018b70:	24002d24 	.word	0x24002d24
 8018b74:	24002cf4 	.word	0x24002cf4
 8018b78:	24002cf0 	.word	0x24002cf0
 8018b7c:	24002d58 	.word	0x24002d58

08018b80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b08a      	sub	sp, #40	; 0x28
 8018b84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018b86:	2300      	movs	r3, #0
 8018b88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018b8a:	f000 fb07 	bl	801919c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018b8e:	4b1c      	ldr	r3, [pc, #112]	; (8018c00 <xTimerCreateTimerTask+0x80>)
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d021      	beq.n	8018bda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018b96:	2300      	movs	r3, #0
 8018b98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018b9e:	1d3a      	adds	r2, r7, #4
 8018ba0:	f107 0108 	add.w	r1, r7, #8
 8018ba4:	f107 030c 	add.w	r3, r7, #12
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f7fd fef3 	bl	8016994 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018bae:	6879      	ldr	r1, [r7, #4]
 8018bb0:	68bb      	ldr	r3, [r7, #8]
 8018bb2:	68fa      	ldr	r2, [r7, #12]
 8018bb4:	9202      	str	r2, [sp, #8]
 8018bb6:	9301      	str	r3, [sp, #4]
 8018bb8:	2302      	movs	r3, #2
 8018bba:	9300      	str	r3, [sp, #0]
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	460a      	mov	r2, r1
 8018bc0:	4910      	ldr	r1, [pc, #64]	; (8018c04 <xTimerCreateTimerTask+0x84>)
 8018bc2:	4811      	ldr	r0, [pc, #68]	; (8018c08 <xTimerCreateTimerTask+0x88>)
 8018bc4:	f7fe ff0c 	bl	80179e0 <xTaskCreateStatic>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	4a10      	ldr	r2, [pc, #64]	; (8018c0c <xTimerCreateTimerTask+0x8c>)
 8018bcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018bce:	4b0f      	ldr	r3, [pc, #60]	; (8018c0c <xTimerCreateTimerTask+0x8c>)
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d001      	beq.n	8018bda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018bda:	697b      	ldr	r3, [r7, #20]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d10a      	bne.n	8018bf6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018be4:	f383 8811 	msr	BASEPRI, r3
 8018be8:	f3bf 8f6f 	isb	sy
 8018bec:	f3bf 8f4f 	dsb	sy
 8018bf0:	613b      	str	r3, [r7, #16]
}
 8018bf2:	bf00      	nop
 8018bf4:	e7fe      	b.n	8018bf4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018bf6:	697b      	ldr	r3, [r7, #20]
}
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	3718      	adds	r7, #24
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	bd80      	pop	{r7, pc}
 8018c00:	24002d94 	.word	0x24002d94
 8018c04:	0801a7b8 	.word	0x0801a7b8
 8018c08:	08018d45 	.word	0x08018d45
 8018c0c:	24002d98 	.word	0x24002d98

08018c10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	b08a      	sub	sp, #40	; 0x28
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	60f8      	str	r0, [r7, #12]
 8018c18:	60b9      	str	r1, [r7, #8]
 8018c1a:	607a      	str	r2, [r7, #4]
 8018c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018c1e:	2300      	movs	r3, #0
 8018c20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d10a      	bne.n	8018c3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8018c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c2c:	f383 8811 	msr	BASEPRI, r3
 8018c30:	f3bf 8f6f 	isb	sy
 8018c34:	f3bf 8f4f 	dsb	sy
 8018c38:	623b      	str	r3, [r7, #32]
}
 8018c3a:	bf00      	nop
 8018c3c:	e7fe      	b.n	8018c3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018c3e:	4b1a      	ldr	r3, [pc, #104]	; (8018ca8 <xTimerGenericCommand+0x98>)
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d02a      	beq.n	8018c9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018c46:	68bb      	ldr	r3, [r7, #8]
 8018c48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018c52:	68bb      	ldr	r3, [r7, #8]
 8018c54:	2b05      	cmp	r3, #5
 8018c56:	dc18      	bgt.n	8018c8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018c58:	f7ff fe9a 	bl	8018990 <xTaskGetSchedulerState>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	2b02      	cmp	r3, #2
 8018c60:	d109      	bne.n	8018c76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018c62:	4b11      	ldr	r3, [pc, #68]	; (8018ca8 <xTimerGenericCommand+0x98>)
 8018c64:	6818      	ldr	r0, [r3, #0]
 8018c66:	f107 0110 	add.w	r1, r7, #16
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c6e:	f7fe facf 	bl	8017210 <xQueueGenericSend>
 8018c72:	6278      	str	r0, [r7, #36]	; 0x24
 8018c74:	e012      	b.n	8018c9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018c76:	4b0c      	ldr	r3, [pc, #48]	; (8018ca8 <xTimerGenericCommand+0x98>)
 8018c78:	6818      	ldr	r0, [r3, #0]
 8018c7a:	f107 0110 	add.w	r1, r7, #16
 8018c7e:	2300      	movs	r3, #0
 8018c80:	2200      	movs	r2, #0
 8018c82:	f7fe fac5 	bl	8017210 <xQueueGenericSend>
 8018c86:	6278      	str	r0, [r7, #36]	; 0x24
 8018c88:	e008      	b.n	8018c9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018c8a:	4b07      	ldr	r3, [pc, #28]	; (8018ca8 <xTimerGenericCommand+0x98>)
 8018c8c:	6818      	ldr	r0, [r3, #0]
 8018c8e:	f107 0110 	add.w	r1, r7, #16
 8018c92:	2300      	movs	r3, #0
 8018c94:	683a      	ldr	r2, [r7, #0]
 8018c96:	f7fe fbb9 	bl	801740c <xQueueGenericSendFromISR>
 8018c9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	3728      	adds	r7, #40	; 0x28
 8018ca2:	46bd      	mov	sp, r7
 8018ca4:	bd80      	pop	{r7, pc}
 8018ca6:	bf00      	nop
 8018ca8:	24002d94 	.word	0x24002d94

08018cac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b088      	sub	sp, #32
 8018cb0:	af02      	add	r7, sp, #8
 8018cb2:	6078      	str	r0, [r7, #4]
 8018cb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018cb6:	4b22      	ldr	r3, [pc, #136]	; (8018d40 <prvProcessExpiredTimer+0x94>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	68db      	ldr	r3, [r3, #12]
 8018cbc:	68db      	ldr	r3, [r3, #12]
 8018cbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018cc0:	697b      	ldr	r3, [r7, #20]
 8018cc2:	3304      	adds	r3, #4
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f7fe f975 	bl	8016fb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018cd0:	f003 0304 	and.w	r3, r3, #4
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d022      	beq.n	8018d1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	699a      	ldr	r2, [r3, #24]
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	18d1      	adds	r1, r2, r3
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	683a      	ldr	r2, [r7, #0]
 8018ce4:	6978      	ldr	r0, [r7, #20]
 8018ce6:	f000 f8d1 	bl	8018e8c <prvInsertTimerInActiveList>
 8018cea:	4603      	mov	r3, r0
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d01f      	beq.n	8018d30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	9300      	str	r3, [sp, #0]
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	687a      	ldr	r2, [r7, #4]
 8018cf8:	2100      	movs	r1, #0
 8018cfa:	6978      	ldr	r0, [r7, #20]
 8018cfc:	f7ff ff88 	bl	8018c10 <xTimerGenericCommand>
 8018d00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018d02:	693b      	ldr	r3, [r7, #16]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d113      	bne.n	8018d30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d0c:	f383 8811 	msr	BASEPRI, r3
 8018d10:	f3bf 8f6f 	isb	sy
 8018d14:	f3bf 8f4f 	dsb	sy
 8018d18:	60fb      	str	r3, [r7, #12]
}
 8018d1a:	bf00      	nop
 8018d1c:	e7fe      	b.n	8018d1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018d1e:	697b      	ldr	r3, [r7, #20]
 8018d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d24:	f023 0301 	bic.w	r3, r3, #1
 8018d28:	b2da      	uxtb	r2, r3
 8018d2a:	697b      	ldr	r3, [r7, #20]
 8018d2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	6a1b      	ldr	r3, [r3, #32]
 8018d34:	6978      	ldr	r0, [r7, #20]
 8018d36:	4798      	blx	r3
}
 8018d38:	bf00      	nop
 8018d3a:	3718      	adds	r7, #24
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd80      	pop	{r7, pc}
 8018d40:	24002d8c 	.word	0x24002d8c

08018d44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b084      	sub	sp, #16
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018d4c:	f107 0308 	add.w	r3, r7, #8
 8018d50:	4618      	mov	r0, r3
 8018d52:	f000 f857 	bl	8018e04 <prvGetNextExpireTime>
 8018d56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018d58:	68bb      	ldr	r3, [r7, #8]
 8018d5a:	4619      	mov	r1, r3
 8018d5c:	68f8      	ldr	r0, [r7, #12]
 8018d5e:	f000 f803 	bl	8018d68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018d62:	f000 f8d5 	bl	8018f10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018d66:	e7f1      	b.n	8018d4c <prvTimerTask+0x8>

08018d68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b084      	sub	sp, #16
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
 8018d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018d72:	f7ff f977 	bl	8018064 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018d76:	f107 0308 	add.w	r3, r7, #8
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f000 f866 	bl	8018e4c <prvSampleTimeNow>
 8018d80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018d82:	68bb      	ldr	r3, [r7, #8]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d130      	bne.n	8018dea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018d88:	683b      	ldr	r3, [r7, #0]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d10a      	bne.n	8018da4 <prvProcessTimerOrBlockTask+0x3c>
 8018d8e:	687a      	ldr	r2, [r7, #4]
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	429a      	cmp	r2, r3
 8018d94:	d806      	bhi.n	8018da4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018d96:	f7ff f973 	bl	8018080 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018d9a:	68f9      	ldr	r1, [r7, #12]
 8018d9c:	6878      	ldr	r0, [r7, #4]
 8018d9e:	f7ff ff85 	bl	8018cac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018da2:	e024      	b.n	8018dee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018da4:	683b      	ldr	r3, [r7, #0]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d008      	beq.n	8018dbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018daa:	4b13      	ldr	r3, [pc, #76]	; (8018df8 <prvProcessTimerOrBlockTask+0x90>)
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d101      	bne.n	8018db8 <prvProcessTimerOrBlockTask+0x50>
 8018db4:	2301      	movs	r3, #1
 8018db6:	e000      	b.n	8018dba <prvProcessTimerOrBlockTask+0x52>
 8018db8:	2300      	movs	r3, #0
 8018dba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018dbc:	4b0f      	ldr	r3, [pc, #60]	; (8018dfc <prvProcessTimerOrBlockTask+0x94>)
 8018dbe:	6818      	ldr	r0, [r3, #0]
 8018dc0:	687a      	ldr	r2, [r7, #4]
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	1ad3      	subs	r3, r2, r3
 8018dc6:	683a      	ldr	r2, [r7, #0]
 8018dc8:	4619      	mov	r1, r3
 8018dca:	f7fe fdd5 	bl	8017978 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018dce:	f7ff f957 	bl	8018080 <xTaskResumeAll>
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d10a      	bne.n	8018dee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018dd8:	4b09      	ldr	r3, [pc, #36]	; (8018e00 <prvProcessTimerOrBlockTask+0x98>)
 8018dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018dde:	601a      	str	r2, [r3, #0]
 8018de0:	f3bf 8f4f 	dsb	sy
 8018de4:	f3bf 8f6f 	isb	sy
}
 8018de8:	e001      	b.n	8018dee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018dea:	f7ff f949 	bl	8018080 <xTaskResumeAll>
}
 8018dee:	bf00      	nop
 8018df0:	3710      	adds	r7, #16
 8018df2:	46bd      	mov	sp, r7
 8018df4:	bd80      	pop	{r7, pc}
 8018df6:	bf00      	nop
 8018df8:	24002d90 	.word	0x24002d90
 8018dfc:	24002d94 	.word	0x24002d94
 8018e00:	e000ed04 	.word	0xe000ed04

08018e04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018e04:	b480      	push	{r7}
 8018e06:	b085      	sub	sp, #20
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018e0c:	4b0e      	ldr	r3, [pc, #56]	; (8018e48 <prvGetNextExpireTime+0x44>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d101      	bne.n	8018e1a <prvGetNextExpireTime+0x16>
 8018e16:	2201      	movs	r2, #1
 8018e18:	e000      	b.n	8018e1c <prvGetNextExpireTime+0x18>
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d105      	bne.n	8018e34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018e28:	4b07      	ldr	r3, [pc, #28]	; (8018e48 <prvGetNextExpireTime+0x44>)
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	68db      	ldr	r3, [r3, #12]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	60fb      	str	r3, [r7, #12]
 8018e32:	e001      	b.n	8018e38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018e34:	2300      	movs	r3, #0
 8018e36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018e38:	68fb      	ldr	r3, [r7, #12]
}
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	3714      	adds	r7, #20
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e44:	4770      	bx	lr
 8018e46:	bf00      	nop
 8018e48:	24002d8c 	.word	0x24002d8c

08018e4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018e54:	f7ff f9b2 	bl	80181bc <xTaskGetTickCount>
 8018e58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018e5a:	4b0b      	ldr	r3, [pc, #44]	; (8018e88 <prvSampleTimeNow+0x3c>)
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	68fa      	ldr	r2, [r7, #12]
 8018e60:	429a      	cmp	r2, r3
 8018e62:	d205      	bcs.n	8018e70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018e64:	f000 f936 	bl	80190d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	2201      	movs	r2, #1
 8018e6c:	601a      	str	r2, [r3, #0]
 8018e6e:	e002      	b.n	8018e76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	2200      	movs	r2, #0
 8018e74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018e76:	4a04      	ldr	r2, [pc, #16]	; (8018e88 <prvSampleTimeNow+0x3c>)
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018e7c:	68fb      	ldr	r3, [r7, #12]
}
 8018e7e:	4618      	mov	r0, r3
 8018e80:	3710      	adds	r7, #16
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd80      	pop	{r7, pc}
 8018e86:	bf00      	nop
 8018e88:	24002d9c 	.word	0x24002d9c

08018e8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b086      	sub	sp, #24
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	60f8      	str	r0, [r7, #12]
 8018e94:	60b9      	str	r1, [r7, #8]
 8018e96:	607a      	str	r2, [r7, #4]
 8018e98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	68ba      	ldr	r2, [r7, #8]
 8018ea2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	68fa      	ldr	r2, [r7, #12]
 8018ea8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018eaa:	68ba      	ldr	r2, [r7, #8]
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	429a      	cmp	r2, r3
 8018eb0:	d812      	bhi.n	8018ed8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018eb2:	687a      	ldr	r2, [r7, #4]
 8018eb4:	683b      	ldr	r3, [r7, #0]
 8018eb6:	1ad2      	subs	r2, r2, r3
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	699b      	ldr	r3, [r3, #24]
 8018ebc:	429a      	cmp	r2, r3
 8018ebe:	d302      	bcc.n	8018ec6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018ec0:	2301      	movs	r3, #1
 8018ec2:	617b      	str	r3, [r7, #20]
 8018ec4:	e01b      	b.n	8018efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018ec6:	4b10      	ldr	r3, [pc, #64]	; (8018f08 <prvInsertTimerInActiveList+0x7c>)
 8018ec8:	681a      	ldr	r2, [r3, #0]
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	3304      	adds	r3, #4
 8018ece:	4619      	mov	r1, r3
 8018ed0:	4610      	mov	r0, r2
 8018ed2:	f7fe f836 	bl	8016f42 <vListInsert>
 8018ed6:	e012      	b.n	8018efe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018ed8:	687a      	ldr	r2, [r7, #4]
 8018eda:	683b      	ldr	r3, [r7, #0]
 8018edc:	429a      	cmp	r2, r3
 8018ede:	d206      	bcs.n	8018eee <prvInsertTimerInActiveList+0x62>
 8018ee0:	68ba      	ldr	r2, [r7, #8]
 8018ee2:	683b      	ldr	r3, [r7, #0]
 8018ee4:	429a      	cmp	r2, r3
 8018ee6:	d302      	bcc.n	8018eee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018ee8:	2301      	movs	r3, #1
 8018eea:	617b      	str	r3, [r7, #20]
 8018eec:	e007      	b.n	8018efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018eee:	4b07      	ldr	r3, [pc, #28]	; (8018f0c <prvInsertTimerInActiveList+0x80>)
 8018ef0:	681a      	ldr	r2, [r3, #0]
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	3304      	adds	r3, #4
 8018ef6:	4619      	mov	r1, r3
 8018ef8:	4610      	mov	r0, r2
 8018efa:	f7fe f822 	bl	8016f42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018efe:	697b      	ldr	r3, [r7, #20]
}
 8018f00:	4618      	mov	r0, r3
 8018f02:	3718      	adds	r7, #24
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd80      	pop	{r7, pc}
 8018f08:	24002d90 	.word	0x24002d90
 8018f0c:	24002d8c 	.word	0x24002d8c

08018f10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b08e      	sub	sp, #56	; 0x38
 8018f14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018f16:	e0ca      	b.n	80190ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	da18      	bge.n	8018f50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018f1e:	1d3b      	adds	r3, r7, #4
 8018f20:	3304      	adds	r3, #4
 8018f22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d10a      	bne.n	8018f40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f2e:	f383 8811 	msr	BASEPRI, r3
 8018f32:	f3bf 8f6f 	isb	sy
 8018f36:	f3bf 8f4f 	dsb	sy
 8018f3a:	61fb      	str	r3, [r7, #28]
}
 8018f3c:	bf00      	nop
 8018f3e:	e7fe      	b.n	8018f3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f46:	6850      	ldr	r0, [r2, #4]
 8018f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f4a:	6892      	ldr	r2, [r2, #8]
 8018f4c:	4611      	mov	r1, r2
 8018f4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	f2c0 80aa 	blt.w	80190ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f5e:	695b      	ldr	r3, [r3, #20]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d004      	beq.n	8018f6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f66:	3304      	adds	r3, #4
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f7fe f823 	bl	8016fb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018f6e:	463b      	mov	r3, r7
 8018f70:	4618      	mov	r0, r3
 8018f72:	f7ff ff6b 	bl	8018e4c <prvSampleTimeNow>
 8018f76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	2b09      	cmp	r3, #9
 8018f7c:	f200 8097 	bhi.w	80190ae <prvProcessReceivedCommands+0x19e>
 8018f80:	a201      	add	r2, pc, #4	; (adr r2, 8018f88 <prvProcessReceivedCommands+0x78>)
 8018f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f86:	bf00      	nop
 8018f88:	08018fb1 	.word	0x08018fb1
 8018f8c:	08018fb1 	.word	0x08018fb1
 8018f90:	08018fb1 	.word	0x08018fb1
 8018f94:	08019025 	.word	0x08019025
 8018f98:	08019039 	.word	0x08019039
 8018f9c:	08019083 	.word	0x08019083
 8018fa0:	08018fb1 	.word	0x08018fb1
 8018fa4:	08018fb1 	.word	0x08018fb1
 8018fa8:	08019025 	.word	0x08019025
 8018fac:	08019039 	.word	0x08019039
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fb6:	f043 0301 	orr.w	r3, r3, #1
 8018fba:	b2da      	uxtb	r2, r3
 8018fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018fc2:	68ba      	ldr	r2, [r7, #8]
 8018fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc6:	699b      	ldr	r3, [r3, #24]
 8018fc8:	18d1      	adds	r1, r2, r3
 8018fca:	68bb      	ldr	r3, [r7, #8]
 8018fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fd0:	f7ff ff5c 	bl	8018e8c <prvInsertTimerInActiveList>
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d069      	beq.n	80190ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fdc:	6a1b      	ldr	r3, [r3, #32]
 8018fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fe0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fe8:	f003 0304 	and.w	r3, r3, #4
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d05e      	beq.n	80190ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018ff0:	68ba      	ldr	r2, [r7, #8]
 8018ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ff4:	699b      	ldr	r3, [r3, #24]
 8018ff6:	441a      	add	r2, r3
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	9300      	str	r3, [sp, #0]
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	2100      	movs	r1, #0
 8019000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019002:	f7ff fe05 	bl	8018c10 <xTimerGenericCommand>
 8019006:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019008:	6a3b      	ldr	r3, [r7, #32]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d14f      	bne.n	80190ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019012:	f383 8811 	msr	BASEPRI, r3
 8019016:	f3bf 8f6f 	isb	sy
 801901a:	f3bf 8f4f 	dsb	sy
 801901e:	61bb      	str	r3, [r7, #24]
}
 8019020:	bf00      	nop
 8019022:	e7fe      	b.n	8019022 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801902a:	f023 0301 	bic.w	r3, r3, #1
 801902e:	b2da      	uxtb	r2, r3
 8019030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019036:	e03a      	b.n	80190ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801903a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801903e:	f043 0301 	orr.w	r3, r3, #1
 8019042:	b2da      	uxtb	r2, r3
 8019044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801904a:	68ba      	ldr	r2, [r7, #8]
 801904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801904e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019052:	699b      	ldr	r3, [r3, #24]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d10a      	bne.n	801906e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801905c:	f383 8811 	msr	BASEPRI, r3
 8019060:	f3bf 8f6f 	isb	sy
 8019064:	f3bf 8f4f 	dsb	sy
 8019068:	617b      	str	r3, [r7, #20]
}
 801906a:	bf00      	nop
 801906c:	e7fe      	b.n	801906c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019070:	699a      	ldr	r2, [r3, #24]
 8019072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019074:	18d1      	adds	r1, r2, r3
 8019076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801907a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801907c:	f7ff ff06 	bl	8018e8c <prvInsertTimerInActiveList>
					break;
 8019080:	e015      	b.n	80190ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019088:	f003 0302 	and.w	r3, r3, #2
 801908c:	2b00      	cmp	r3, #0
 801908e:	d103      	bne.n	8019098 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019092:	f000 fbfd 	bl	8019890 <vPortFree>
 8019096:	e00a      	b.n	80190ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801909a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801909e:	f023 0301 	bic.w	r3, r3, #1
 80190a2:	b2da      	uxtb	r2, r3
 80190a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80190aa:	e000      	b.n	80190ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80190ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80190ae:	4b08      	ldr	r3, [pc, #32]	; (80190d0 <prvProcessReceivedCommands+0x1c0>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	1d39      	adds	r1, r7, #4
 80190b4:	2200      	movs	r2, #0
 80190b6:	4618      	mov	r0, r3
 80190b8:	f7fe fa44 	bl	8017544 <xQueueReceive>
 80190bc:	4603      	mov	r3, r0
 80190be:	2b00      	cmp	r3, #0
 80190c0:	f47f af2a 	bne.w	8018f18 <prvProcessReceivedCommands+0x8>
	}
}
 80190c4:	bf00      	nop
 80190c6:	bf00      	nop
 80190c8:	3730      	adds	r7, #48	; 0x30
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bd80      	pop	{r7, pc}
 80190ce:	bf00      	nop
 80190d0:	24002d94 	.word	0x24002d94

080190d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b088      	sub	sp, #32
 80190d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80190da:	e048      	b.n	801916e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80190dc:	4b2d      	ldr	r3, [pc, #180]	; (8019194 <prvSwitchTimerLists+0xc0>)
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	68db      	ldr	r3, [r3, #12]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190e6:	4b2b      	ldr	r3, [pc, #172]	; (8019194 <prvSwitchTimerLists+0xc0>)
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	68db      	ldr	r3, [r3, #12]
 80190ec:	68db      	ldr	r3, [r3, #12]
 80190ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	3304      	adds	r3, #4
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7fd ff5d 	bl	8016fb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	6a1b      	ldr	r3, [r3, #32]
 80190fe:	68f8      	ldr	r0, [r7, #12]
 8019100:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019108:	f003 0304 	and.w	r3, r3, #4
 801910c:	2b00      	cmp	r3, #0
 801910e:	d02e      	beq.n	801916e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	699b      	ldr	r3, [r3, #24]
 8019114:	693a      	ldr	r2, [r7, #16]
 8019116:	4413      	add	r3, r2
 8019118:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801911a:	68ba      	ldr	r2, [r7, #8]
 801911c:	693b      	ldr	r3, [r7, #16]
 801911e:	429a      	cmp	r2, r3
 8019120:	d90e      	bls.n	8019140 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	68ba      	ldr	r2, [r7, #8]
 8019126:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	68fa      	ldr	r2, [r7, #12]
 801912c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801912e:	4b19      	ldr	r3, [pc, #100]	; (8019194 <prvSwitchTimerLists+0xc0>)
 8019130:	681a      	ldr	r2, [r3, #0]
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	3304      	adds	r3, #4
 8019136:	4619      	mov	r1, r3
 8019138:	4610      	mov	r0, r2
 801913a:	f7fd ff02 	bl	8016f42 <vListInsert>
 801913e:	e016      	b.n	801916e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019140:	2300      	movs	r3, #0
 8019142:	9300      	str	r3, [sp, #0]
 8019144:	2300      	movs	r3, #0
 8019146:	693a      	ldr	r2, [r7, #16]
 8019148:	2100      	movs	r1, #0
 801914a:	68f8      	ldr	r0, [r7, #12]
 801914c:	f7ff fd60 	bl	8018c10 <xTimerGenericCommand>
 8019150:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d10a      	bne.n	801916e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801915c:	f383 8811 	msr	BASEPRI, r3
 8019160:	f3bf 8f6f 	isb	sy
 8019164:	f3bf 8f4f 	dsb	sy
 8019168:	603b      	str	r3, [r7, #0]
}
 801916a:	bf00      	nop
 801916c:	e7fe      	b.n	801916c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801916e:	4b09      	ldr	r3, [pc, #36]	; (8019194 <prvSwitchTimerLists+0xc0>)
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d1b1      	bne.n	80190dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019178:	4b06      	ldr	r3, [pc, #24]	; (8019194 <prvSwitchTimerLists+0xc0>)
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801917e:	4b06      	ldr	r3, [pc, #24]	; (8019198 <prvSwitchTimerLists+0xc4>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	4a04      	ldr	r2, [pc, #16]	; (8019194 <prvSwitchTimerLists+0xc0>)
 8019184:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019186:	4a04      	ldr	r2, [pc, #16]	; (8019198 <prvSwitchTimerLists+0xc4>)
 8019188:	697b      	ldr	r3, [r7, #20]
 801918a:	6013      	str	r3, [r2, #0]
}
 801918c:	bf00      	nop
 801918e:	3718      	adds	r7, #24
 8019190:	46bd      	mov	sp, r7
 8019192:	bd80      	pop	{r7, pc}
 8019194:	24002d8c 	.word	0x24002d8c
 8019198:	24002d90 	.word	0x24002d90

0801919c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801919c:	b580      	push	{r7, lr}
 801919e:	b082      	sub	sp, #8
 80191a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80191a2:	f000 f987 	bl	80194b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80191a6:	4b15      	ldr	r3, [pc, #84]	; (80191fc <prvCheckForValidListAndQueue+0x60>)
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d120      	bne.n	80191f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80191ae:	4814      	ldr	r0, [pc, #80]	; (8019200 <prvCheckForValidListAndQueue+0x64>)
 80191b0:	f7fd fe76 	bl	8016ea0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80191b4:	4813      	ldr	r0, [pc, #76]	; (8019204 <prvCheckForValidListAndQueue+0x68>)
 80191b6:	f7fd fe73 	bl	8016ea0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80191ba:	4b13      	ldr	r3, [pc, #76]	; (8019208 <prvCheckForValidListAndQueue+0x6c>)
 80191bc:	4a10      	ldr	r2, [pc, #64]	; (8019200 <prvCheckForValidListAndQueue+0x64>)
 80191be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80191c0:	4b12      	ldr	r3, [pc, #72]	; (801920c <prvCheckForValidListAndQueue+0x70>)
 80191c2:	4a10      	ldr	r2, [pc, #64]	; (8019204 <prvCheckForValidListAndQueue+0x68>)
 80191c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80191c6:	2300      	movs	r3, #0
 80191c8:	9300      	str	r3, [sp, #0]
 80191ca:	4b11      	ldr	r3, [pc, #68]	; (8019210 <prvCheckForValidListAndQueue+0x74>)
 80191cc:	4a11      	ldr	r2, [pc, #68]	; (8019214 <prvCheckForValidListAndQueue+0x78>)
 80191ce:	2110      	movs	r1, #16
 80191d0:	200a      	movs	r0, #10
 80191d2:	f7fd ff81 	bl	80170d8 <xQueueGenericCreateStatic>
 80191d6:	4603      	mov	r3, r0
 80191d8:	4a08      	ldr	r2, [pc, #32]	; (80191fc <prvCheckForValidListAndQueue+0x60>)
 80191da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80191dc:	4b07      	ldr	r3, [pc, #28]	; (80191fc <prvCheckForValidListAndQueue+0x60>)
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d005      	beq.n	80191f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80191e4:	4b05      	ldr	r3, [pc, #20]	; (80191fc <prvCheckForValidListAndQueue+0x60>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	490b      	ldr	r1, [pc, #44]	; (8019218 <prvCheckForValidListAndQueue+0x7c>)
 80191ea:	4618      	mov	r0, r3
 80191ec:	f7fe fb9a 	bl	8017924 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80191f0:	f000 f990 	bl	8019514 <vPortExitCritical>
}
 80191f4:	bf00      	nop
 80191f6:	46bd      	mov	sp, r7
 80191f8:	bd80      	pop	{r7, pc}
 80191fa:	bf00      	nop
 80191fc:	24002d94 	.word	0x24002d94
 8019200:	24002d64 	.word	0x24002d64
 8019204:	24002d78 	.word	0x24002d78
 8019208:	24002d8c 	.word	0x24002d8c
 801920c:	24002d90 	.word	0x24002d90
 8019210:	24002e40 	.word	0x24002e40
 8019214:	24002da0 	.word	0x24002da0
 8019218:	0801a7c0 	.word	0x0801a7c0

0801921c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801921c:	b580      	push	{r7, lr}
 801921e:	b08a      	sub	sp, #40	; 0x28
 8019220:	af00      	add	r7, sp, #0
 8019222:	60f8      	str	r0, [r7, #12]
 8019224:	60b9      	str	r1, [r7, #8]
 8019226:	607a      	str	r2, [r7, #4]
 8019228:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801922a:	f06f 0301 	mvn.w	r3, #1
 801922e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019234:	68bb      	ldr	r3, [r7, #8]
 8019236:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801923c:	4b06      	ldr	r3, [pc, #24]	; (8019258 <xTimerPendFunctionCallFromISR+0x3c>)
 801923e:	6818      	ldr	r0, [r3, #0]
 8019240:	f107 0114 	add.w	r1, r7, #20
 8019244:	2300      	movs	r3, #0
 8019246:	683a      	ldr	r2, [r7, #0]
 8019248:	f7fe f8e0 	bl	801740c <xQueueGenericSendFromISR>
 801924c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019250:	4618      	mov	r0, r3
 8019252:	3728      	adds	r7, #40	; 0x28
 8019254:	46bd      	mov	sp, r7
 8019256:	bd80      	pop	{r7, pc}
 8019258:	24002d94 	.word	0x24002d94

0801925c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801925c:	b480      	push	{r7}
 801925e:	b085      	sub	sp, #20
 8019260:	af00      	add	r7, sp, #0
 8019262:	60f8      	str	r0, [r7, #12]
 8019264:	60b9      	str	r1, [r7, #8]
 8019266:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	3b04      	subs	r3, #4
 801926c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	3b04      	subs	r3, #4
 801927a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801927c:	68bb      	ldr	r3, [r7, #8]
 801927e:	f023 0201 	bic.w	r2, r3, #1
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	3b04      	subs	r3, #4
 801928a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801928c:	4a0c      	ldr	r2, [pc, #48]	; (80192c0 <pxPortInitialiseStack+0x64>)
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	3b14      	subs	r3, #20
 8019296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019298:	687a      	ldr	r2, [r7, #4]
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	3b04      	subs	r3, #4
 80192a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	f06f 0202 	mvn.w	r2, #2
 80192aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	3b20      	subs	r3, #32
 80192b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80192b2:	68fb      	ldr	r3, [r7, #12]
}
 80192b4:	4618      	mov	r0, r3
 80192b6:	3714      	adds	r7, #20
 80192b8:	46bd      	mov	sp, r7
 80192ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192be:	4770      	bx	lr
 80192c0:	080192c5 	.word	0x080192c5

080192c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80192c4:	b480      	push	{r7}
 80192c6:	b085      	sub	sp, #20
 80192c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80192ca:	2300      	movs	r3, #0
 80192cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80192ce:	4b12      	ldr	r3, [pc, #72]	; (8019318 <prvTaskExitError+0x54>)
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192d6:	d00a      	beq.n	80192ee <prvTaskExitError+0x2a>
	__asm volatile
 80192d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192dc:	f383 8811 	msr	BASEPRI, r3
 80192e0:	f3bf 8f6f 	isb	sy
 80192e4:	f3bf 8f4f 	dsb	sy
 80192e8:	60fb      	str	r3, [r7, #12]
}
 80192ea:	bf00      	nop
 80192ec:	e7fe      	b.n	80192ec <prvTaskExitError+0x28>
	__asm volatile
 80192ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192f2:	f383 8811 	msr	BASEPRI, r3
 80192f6:	f3bf 8f6f 	isb	sy
 80192fa:	f3bf 8f4f 	dsb	sy
 80192fe:	60bb      	str	r3, [r7, #8]
}
 8019300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019302:	bf00      	nop
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d0fc      	beq.n	8019304 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801930a:	bf00      	nop
 801930c:	bf00      	nop
 801930e:	3714      	adds	r7, #20
 8019310:	46bd      	mov	sp, r7
 8019312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019316:	4770      	bx	lr
 8019318:	240000d8 	.word	0x240000d8
 801931c:	00000000 	.word	0x00000000

08019320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019320:	4b07      	ldr	r3, [pc, #28]	; (8019340 <pxCurrentTCBConst2>)
 8019322:	6819      	ldr	r1, [r3, #0]
 8019324:	6808      	ldr	r0, [r1, #0]
 8019326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801932a:	f380 8809 	msr	PSP, r0
 801932e:	f3bf 8f6f 	isb	sy
 8019332:	f04f 0000 	mov.w	r0, #0
 8019336:	f380 8811 	msr	BASEPRI, r0
 801933a:	4770      	bx	lr
 801933c:	f3af 8000 	nop.w

08019340 <pxCurrentTCBConst2>:
 8019340:	24002864 	.word	0x24002864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019344:	bf00      	nop
 8019346:	bf00      	nop

08019348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019348:	4808      	ldr	r0, [pc, #32]	; (801936c <prvPortStartFirstTask+0x24>)
 801934a:	6800      	ldr	r0, [r0, #0]
 801934c:	6800      	ldr	r0, [r0, #0]
 801934e:	f380 8808 	msr	MSP, r0
 8019352:	f04f 0000 	mov.w	r0, #0
 8019356:	f380 8814 	msr	CONTROL, r0
 801935a:	b662      	cpsie	i
 801935c:	b661      	cpsie	f
 801935e:	f3bf 8f4f 	dsb	sy
 8019362:	f3bf 8f6f 	isb	sy
 8019366:	df00      	svc	0
 8019368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801936a:	bf00      	nop
 801936c:	e000ed08 	.word	0xe000ed08

08019370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b086      	sub	sp, #24
 8019374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019376:	4b46      	ldr	r3, [pc, #280]	; (8019490 <xPortStartScheduler+0x120>)
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	4a46      	ldr	r2, [pc, #280]	; (8019494 <xPortStartScheduler+0x124>)
 801937c:	4293      	cmp	r3, r2
 801937e:	d10a      	bne.n	8019396 <xPortStartScheduler+0x26>
	__asm volatile
 8019380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019384:	f383 8811 	msr	BASEPRI, r3
 8019388:	f3bf 8f6f 	isb	sy
 801938c:	f3bf 8f4f 	dsb	sy
 8019390:	613b      	str	r3, [r7, #16]
}
 8019392:	bf00      	nop
 8019394:	e7fe      	b.n	8019394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019396:	4b3e      	ldr	r3, [pc, #248]	; (8019490 <xPortStartScheduler+0x120>)
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	4a3f      	ldr	r2, [pc, #252]	; (8019498 <xPortStartScheduler+0x128>)
 801939c:	4293      	cmp	r3, r2
 801939e:	d10a      	bne.n	80193b6 <xPortStartScheduler+0x46>
	__asm volatile
 80193a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193a4:	f383 8811 	msr	BASEPRI, r3
 80193a8:	f3bf 8f6f 	isb	sy
 80193ac:	f3bf 8f4f 	dsb	sy
 80193b0:	60fb      	str	r3, [r7, #12]
}
 80193b2:	bf00      	nop
 80193b4:	e7fe      	b.n	80193b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80193b6:	4b39      	ldr	r3, [pc, #228]	; (801949c <xPortStartScheduler+0x12c>)
 80193b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80193ba:	697b      	ldr	r3, [r7, #20]
 80193bc:	781b      	ldrb	r3, [r3, #0]
 80193be:	b2db      	uxtb	r3, r3
 80193c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80193c2:	697b      	ldr	r3, [r7, #20]
 80193c4:	22ff      	movs	r2, #255	; 0xff
 80193c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80193c8:	697b      	ldr	r3, [r7, #20]
 80193ca:	781b      	ldrb	r3, [r3, #0]
 80193cc:	b2db      	uxtb	r3, r3
 80193ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80193d0:	78fb      	ldrb	r3, [r7, #3]
 80193d2:	b2db      	uxtb	r3, r3
 80193d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80193d8:	b2da      	uxtb	r2, r3
 80193da:	4b31      	ldr	r3, [pc, #196]	; (80194a0 <xPortStartScheduler+0x130>)
 80193dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80193de:	4b31      	ldr	r3, [pc, #196]	; (80194a4 <xPortStartScheduler+0x134>)
 80193e0:	2207      	movs	r2, #7
 80193e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80193e4:	e009      	b.n	80193fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80193e6:	4b2f      	ldr	r3, [pc, #188]	; (80194a4 <xPortStartScheduler+0x134>)
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	3b01      	subs	r3, #1
 80193ec:	4a2d      	ldr	r2, [pc, #180]	; (80194a4 <xPortStartScheduler+0x134>)
 80193ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80193f0:	78fb      	ldrb	r3, [r7, #3]
 80193f2:	b2db      	uxtb	r3, r3
 80193f4:	005b      	lsls	r3, r3, #1
 80193f6:	b2db      	uxtb	r3, r3
 80193f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80193fa:	78fb      	ldrb	r3, [r7, #3]
 80193fc:	b2db      	uxtb	r3, r3
 80193fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019402:	2b80      	cmp	r3, #128	; 0x80
 8019404:	d0ef      	beq.n	80193e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019406:	4b27      	ldr	r3, [pc, #156]	; (80194a4 <xPortStartScheduler+0x134>)
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	f1c3 0307 	rsb	r3, r3, #7
 801940e:	2b04      	cmp	r3, #4
 8019410:	d00a      	beq.n	8019428 <xPortStartScheduler+0xb8>
	__asm volatile
 8019412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019416:	f383 8811 	msr	BASEPRI, r3
 801941a:	f3bf 8f6f 	isb	sy
 801941e:	f3bf 8f4f 	dsb	sy
 8019422:	60bb      	str	r3, [r7, #8]
}
 8019424:	bf00      	nop
 8019426:	e7fe      	b.n	8019426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019428:	4b1e      	ldr	r3, [pc, #120]	; (80194a4 <xPortStartScheduler+0x134>)
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	021b      	lsls	r3, r3, #8
 801942e:	4a1d      	ldr	r2, [pc, #116]	; (80194a4 <xPortStartScheduler+0x134>)
 8019430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019432:	4b1c      	ldr	r3, [pc, #112]	; (80194a4 <xPortStartScheduler+0x134>)
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801943a:	4a1a      	ldr	r2, [pc, #104]	; (80194a4 <xPortStartScheduler+0x134>)
 801943c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	b2da      	uxtb	r2, r3
 8019442:	697b      	ldr	r3, [r7, #20]
 8019444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019446:	4b18      	ldr	r3, [pc, #96]	; (80194a8 <xPortStartScheduler+0x138>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	4a17      	ldr	r2, [pc, #92]	; (80194a8 <xPortStartScheduler+0x138>)
 801944c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019452:	4b15      	ldr	r3, [pc, #84]	; (80194a8 <xPortStartScheduler+0x138>)
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	4a14      	ldr	r2, [pc, #80]	; (80194a8 <xPortStartScheduler+0x138>)
 8019458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801945c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801945e:	f000 f8dd 	bl	801961c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019462:	4b12      	ldr	r3, [pc, #72]	; (80194ac <xPortStartScheduler+0x13c>)
 8019464:	2200      	movs	r2, #0
 8019466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019468:	f000 f8fc 	bl	8019664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801946c:	4b10      	ldr	r3, [pc, #64]	; (80194b0 <xPortStartScheduler+0x140>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	4a0f      	ldr	r2, [pc, #60]	; (80194b0 <xPortStartScheduler+0x140>)
 8019472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019478:	f7ff ff66 	bl	8019348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801947c:	f7fe ff70 	bl	8018360 <vTaskSwitchContext>
	prvTaskExitError();
 8019480:	f7ff ff20 	bl	80192c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019484:	2300      	movs	r3, #0
}
 8019486:	4618      	mov	r0, r3
 8019488:	3718      	adds	r7, #24
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}
 801948e:	bf00      	nop
 8019490:	e000ed00 	.word	0xe000ed00
 8019494:	410fc271 	.word	0x410fc271
 8019498:	410fc270 	.word	0x410fc270
 801949c:	e000e400 	.word	0xe000e400
 80194a0:	24002e90 	.word	0x24002e90
 80194a4:	24002e94 	.word	0x24002e94
 80194a8:	e000ed20 	.word	0xe000ed20
 80194ac:	240000d8 	.word	0x240000d8
 80194b0:	e000ef34 	.word	0xe000ef34

080194b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80194b4:	b480      	push	{r7}
 80194b6:	b083      	sub	sp, #12
 80194b8:	af00      	add	r7, sp, #0
	__asm volatile
 80194ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194be:	f383 8811 	msr	BASEPRI, r3
 80194c2:	f3bf 8f6f 	isb	sy
 80194c6:	f3bf 8f4f 	dsb	sy
 80194ca:	607b      	str	r3, [r7, #4]
}
 80194cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80194ce:	4b0f      	ldr	r3, [pc, #60]	; (801950c <vPortEnterCritical+0x58>)
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	3301      	adds	r3, #1
 80194d4:	4a0d      	ldr	r2, [pc, #52]	; (801950c <vPortEnterCritical+0x58>)
 80194d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80194d8:	4b0c      	ldr	r3, [pc, #48]	; (801950c <vPortEnterCritical+0x58>)
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	2b01      	cmp	r3, #1
 80194de:	d10f      	bne.n	8019500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80194e0:	4b0b      	ldr	r3, [pc, #44]	; (8019510 <vPortEnterCritical+0x5c>)
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	b2db      	uxtb	r3, r3
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d00a      	beq.n	8019500 <vPortEnterCritical+0x4c>
	__asm volatile
 80194ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194ee:	f383 8811 	msr	BASEPRI, r3
 80194f2:	f3bf 8f6f 	isb	sy
 80194f6:	f3bf 8f4f 	dsb	sy
 80194fa:	603b      	str	r3, [r7, #0]
}
 80194fc:	bf00      	nop
 80194fe:	e7fe      	b.n	80194fe <vPortEnterCritical+0x4a>
	}
}
 8019500:	bf00      	nop
 8019502:	370c      	adds	r7, #12
 8019504:	46bd      	mov	sp, r7
 8019506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801950a:	4770      	bx	lr
 801950c:	240000d8 	.word	0x240000d8
 8019510:	e000ed04 	.word	0xe000ed04

08019514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019514:	b480      	push	{r7}
 8019516:	b083      	sub	sp, #12
 8019518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801951a:	4b12      	ldr	r3, [pc, #72]	; (8019564 <vPortExitCritical+0x50>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d10a      	bne.n	8019538 <vPortExitCritical+0x24>
	__asm volatile
 8019522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019526:	f383 8811 	msr	BASEPRI, r3
 801952a:	f3bf 8f6f 	isb	sy
 801952e:	f3bf 8f4f 	dsb	sy
 8019532:	607b      	str	r3, [r7, #4]
}
 8019534:	bf00      	nop
 8019536:	e7fe      	b.n	8019536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019538:	4b0a      	ldr	r3, [pc, #40]	; (8019564 <vPortExitCritical+0x50>)
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	3b01      	subs	r3, #1
 801953e:	4a09      	ldr	r2, [pc, #36]	; (8019564 <vPortExitCritical+0x50>)
 8019540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019542:	4b08      	ldr	r3, [pc, #32]	; (8019564 <vPortExitCritical+0x50>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d105      	bne.n	8019556 <vPortExitCritical+0x42>
 801954a:	2300      	movs	r3, #0
 801954c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	f383 8811 	msr	BASEPRI, r3
}
 8019554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019556:	bf00      	nop
 8019558:	370c      	adds	r7, #12
 801955a:	46bd      	mov	sp, r7
 801955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019560:	4770      	bx	lr
 8019562:	bf00      	nop
 8019564:	240000d8 	.word	0x240000d8
	...

08019570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019570:	f3ef 8009 	mrs	r0, PSP
 8019574:	f3bf 8f6f 	isb	sy
 8019578:	4b15      	ldr	r3, [pc, #84]	; (80195d0 <pxCurrentTCBConst>)
 801957a:	681a      	ldr	r2, [r3, #0]
 801957c:	f01e 0f10 	tst.w	lr, #16
 8019580:	bf08      	it	eq
 8019582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801958a:	6010      	str	r0, [r2, #0]
 801958c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019594:	f380 8811 	msr	BASEPRI, r0
 8019598:	f3bf 8f4f 	dsb	sy
 801959c:	f3bf 8f6f 	isb	sy
 80195a0:	f7fe fede 	bl	8018360 <vTaskSwitchContext>
 80195a4:	f04f 0000 	mov.w	r0, #0
 80195a8:	f380 8811 	msr	BASEPRI, r0
 80195ac:	bc09      	pop	{r0, r3}
 80195ae:	6819      	ldr	r1, [r3, #0]
 80195b0:	6808      	ldr	r0, [r1, #0]
 80195b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b6:	f01e 0f10 	tst.w	lr, #16
 80195ba:	bf08      	it	eq
 80195bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80195c0:	f380 8809 	msr	PSP, r0
 80195c4:	f3bf 8f6f 	isb	sy
 80195c8:	4770      	bx	lr
 80195ca:	bf00      	nop
 80195cc:	f3af 8000 	nop.w

080195d0 <pxCurrentTCBConst>:
 80195d0:	24002864 	.word	0x24002864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80195d4:	bf00      	nop
 80195d6:	bf00      	nop

080195d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	b082      	sub	sp, #8
 80195dc:	af00      	add	r7, sp, #0
	__asm volatile
 80195de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e2:	f383 8811 	msr	BASEPRI, r3
 80195e6:	f3bf 8f6f 	isb	sy
 80195ea:	f3bf 8f4f 	dsb	sy
 80195ee:	607b      	str	r3, [r7, #4]
}
 80195f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80195f2:	f7fe fdf3 	bl	80181dc <xTaskIncrementTick>
 80195f6:	4603      	mov	r3, r0
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d003      	beq.n	8019604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80195fc:	4b06      	ldr	r3, [pc, #24]	; (8019618 <xPortSysTickHandler+0x40>)
 80195fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019602:	601a      	str	r2, [r3, #0]
 8019604:	2300      	movs	r3, #0
 8019606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019608:	683b      	ldr	r3, [r7, #0]
 801960a:	f383 8811 	msr	BASEPRI, r3
}
 801960e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019610:	bf00      	nop
 8019612:	3708      	adds	r7, #8
 8019614:	46bd      	mov	sp, r7
 8019616:	bd80      	pop	{r7, pc}
 8019618:	e000ed04 	.word	0xe000ed04

0801961c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801961c:	b480      	push	{r7}
 801961e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019620:	4b0b      	ldr	r3, [pc, #44]	; (8019650 <vPortSetupTimerInterrupt+0x34>)
 8019622:	2200      	movs	r2, #0
 8019624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019626:	4b0b      	ldr	r3, [pc, #44]	; (8019654 <vPortSetupTimerInterrupt+0x38>)
 8019628:	2200      	movs	r2, #0
 801962a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801962c:	4b0a      	ldr	r3, [pc, #40]	; (8019658 <vPortSetupTimerInterrupt+0x3c>)
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	4a0a      	ldr	r2, [pc, #40]	; (801965c <vPortSetupTimerInterrupt+0x40>)
 8019632:	fba2 2303 	umull	r2, r3, r2, r3
 8019636:	099b      	lsrs	r3, r3, #6
 8019638:	4a09      	ldr	r2, [pc, #36]	; (8019660 <vPortSetupTimerInterrupt+0x44>)
 801963a:	3b01      	subs	r3, #1
 801963c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801963e:	4b04      	ldr	r3, [pc, #16]	; (8019650 <vPortSetupTimerInterrupt+0x34>)
 8019640:	2207      	movs	r2, #7
 8019642:	601a      	str	r2, [r3, #0]
}
 8019644:	bf00      	nop
 8019646:	46bd      	mov	sp, r7
 8019648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964c:	4770      	bx	lr
 801964e:	bf00      	nop
 8019650:	e000e010 	.word	0xe000e010
 8019654:	e000e018 	.word	0xe000e018
 8019658:	240000c8 	.word	0x240000c8
 801965c:	10624dd3 	.word	0x10624dd3
 8019660:	e000e014 	.word	0xe000e014

08019664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019674 <vPortEnableVFP+0x10>
 8019668:	6801      	ldr	r1, [r0, #0]
 801966a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801966e:	6001      	str	r1, [r0, #0]
 8019670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019672:	bf00      	nop
 8019674:	e000ed88 	.word	0xe000ed88

08019678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019678:	b480      	push	{r7}
 801967a:	b085      	sub	sp, #20
 801967c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801967e:	f3ef 8305 	mrs	r3, IPSR
 8019682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	2b0f      	cmp	r3, #15
 8019688:	d914      	bls.n	80196b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801968a:	4a17      	ldr	r2, [pc, #92]	; (80196e8 <vPortValidateInterruptPriority+0x70>)
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	4413      	add	r3, r2
 8019690:	781b      	ldrb	r3, [r3, #0]
 8019692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019694:	4b15      	ldr	r3, [pc, #84]	; (80196ec <vPortValidateInterruptPriority+0x74>)
 8019696:	781b      	ldrb	r3, [r3, #0]
 8019698:	7afa      	ldrb	r2, [r7, #11]
 801969a:	429a      	cmp	r2, r3
 801969c:	d20a      	bcs.n	80196b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196a2:	f383 8811 	msr	BASEPRI, r3
 80196a6:	f3bf 8f6f 	isb	sy
 80196aa:	f3bf 8f4f 	dsb	sy
 80196ae:	607b      	str	r3, [r7, #4]
}
 80196b0:	bf00      	nop
 80196b2:	e7fe      	b.n	80196b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80196b4:	4b0e      	ldr	r3, [pc, #56]	; (80196f0 <vPortValidateInterruptPriority+0x78>)
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80196bc:	4b0d      	ldr	r3, [pc, #52]	; (80196f4 <vPortValidateInterruptPriority+0x7c>)
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	429a      	cmp	r2, r3
 80196c2:	d90a      	bls.n	80196da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80196c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196c8:	f383 8811 	msr	BASEPRI, r3
 80196cc:	f3bf 8f6f 	isb	sy
 80196d0:	f3bf 8f4f 	dsb	sy
 80196d4:	603b      	str	r3, [r7, #0]
}
 80196d6:	bf00      	nop
 80196d8:	e7fe      	b.n	80196d8 <vPortValidateInterruptPriority+0x60>
	}
 80196da:	bf00      	nop
 80196dc:	3714      	adds	r7, #20
 80196de:	46bd      	mov	sp, r7
 80196e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196e4:	4770      	bx	lr
 80196e6:	bf00      	nop
 80196e8:	e000e3f0 	.word	0xe000e3f0
 80196ec:	24002e90 	.word	0x24002e90
 80196f0:	e000ed0c 	.word	0xe000ed0c
 80196f4:	24002e94 	.word	0x24002e94

080196f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b08a      	sub	sp, #40	; 0x28
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019700:	2300      	movs	r3, #0
 8019702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019704:	f7fe fcae 	bl	8018064 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019708:	4b5b      	ldr	r3, [pc, #364]	; (8019878 <pvPortMalloc+0x180>)
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d101      	bne.n	8019714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019710:	f000 f920 	bl	8019954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019714:	4b59      	ldr	r3, [pc, #356]	; (801987c <pvPortMalloc+0x184>)
 8019716:	681a      	ldr	r2, [r3, #0]
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	4013      	ands	r3, r2
 801971c:	2b00      	cmp	r3, #0
 801971e:	f040 8093 	bne.w	8019848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	2b00      	cmp	r3, #0
 8019726:	d01d      	beq.n	8019764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019728:	2208      	movs	r2, #8
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	4413      	add	r3, r2
 801972e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	f003 0307 	and.w	r3, r3, #7
 8019736:	2b00      	cmp	r3, #0
 8019738:	d014      	beq.n	8019764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	f023 0307 	bic.w	r3, r3, #7
 8019740:	3308      	adds	r3, #8
 8019742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	f003 0307 	and.w	r3, r3, #7
 801974a:	2b00      	cmp	r3, #0
 801974c:	d00a      	beq.n	8019764 <pvPortMalloc+0x6c>
	__asm volatile
 801974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019752:	f383 8811 	msr	BASEPRI, r3
 8019756:	f3bf 8f6f 	isb	sy
 801975a:	f3bf 8f4f 	dsb	sy
 801975e:	617b      	str	r3, [r7, #20]
}
 8019760:	bf00      	nop
 8019762:	e7fe      	b.n	8019762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d06e      	beq.n	8019848 <pvPortMalloc+0x150>
 801976a:	4b45      	ldr	r3, [pc, #276]	; (8019880 <pvPortMalloc+0x188>)
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	687a      	ldr	r2, [r7, #4]
 8019770:	429a      	cmp	r2, r3
 8019772:	d869      	bhi.n	8019848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019774:	4b43      	ldr	r3, [pc, #268]	; (8019884 <pvPortMalloc+0x18c>)
 8019776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019778:	4b42      	ldr	r3, [pc, #264]	; (8019884 <pvPortMalloc+0x18c>)
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801977e:	e004      	b.n	801978a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801978c:	685b      	ldr	r3, [r3, #4]
 801978e:	687a      	ldr	r2, [r7, #4]
 8019790:	429a      	cmp	r2, r3
 8019792:	d903      	bls.n	801979c <pvPortMalloc+0xa4>
 8019794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d1f1      	bne.n	8019780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801979c:	4b36      	ldr	r3, [pc, #216]	; (8019878 <pvPortMalloc+0x180>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197a2:	429a      	cmp	r2, r3
 80197a4:	d050      	beq.n	8019848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80197a6:	6a3b      	ldr	r3, [r7, #32]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	2208      	movs	r2, #8
 80197ac:	4413      	add	r3, r2
 80197ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80197b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197b2:	681a      	ldr	r2, [r3, #0]
 80197b4:	6a3b      	ldr	r3, [r7, #32]
 80197b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80197b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ba:	685a      	ldr	r2, [r3, #4]
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	1ad2      	subs	r2, r2, r3
 80197c0:	2308      	movs	r3, #8
 80197c2:	005b      	lsls	r3, r3, #1
 80197c4:	429a      	cmp	r2, r3
 80197c6:	d91f      	bls.n	8019808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80197c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	4413      	add	r3, r2
 80197ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80197d0:	69bb      	ldr	r3, [r7, #24]
 80197d2:	f003 0307 	and.w	r3, r3, #7
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d00a      	beq.n	80197f0 <pvPortMalloc+0xf8>
	__asm volatile
 80197da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197de:	f383 8811 	msr	BASEPRI, r3
 80197e2:	f3bf 8f6f 	isb	sy
 80197e6:	f3bf 8f4f 	dsb	sy
 80197ea:	613b      	str	r3, [r7, #16]
}
 80197ec:	bf00      	nop
 80197ee:	e7fe      	b.n	80197ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80197f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197f2:	685a      	ldr	r2, [r3, #4]
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	1ad2      	subs	r2, r2, r3
 80197f8:	69bb      	ldr	r3, [r7, #24]
 80197fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80197fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197fe:	687a      	ldr	r2, [r7, #4]
 8019800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019802:	69b8      	ldr	r0, [r7, #24]
 8019804:	f000 f908 	bl	8019a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019808:	4b1d      	ldr	r3, [pc, #116]	; (8019880 <pvPortMalloc+0x188>)
 801980a:	681a      	ldr	r2, [r3, #0]
 801980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801980e:	685b      	ldr	r3, [r3, #4]
 8019810:	1ad3      	subs	r3, r2, r3
 8019812:	4a1b      	ldr	r2, [pc, #108]	; (8019880 <pvPortMalloc+0x188>)
 8019814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019816:	4b1a      	ldr	r3, [pc, #104]	; (8019880 <pvPortMalloc+0x188>)
 8019818:	681a      	ldr	r2, [r3, #0]
 801981a:	4b1b      	ldr	r3, [pc, #108]	; (8019888 <pvPortMalloc+0x190>)
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	429a      	cmp	r2, r3
 8019820:	d203      	bcs.n	801982a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019822:	4b17      	ldr	r3, [pc, #92]	; (8019880 <pvPortMalloc+0x188>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	4a18      	ldr	r2, [pc, #96]	; (8019888 <pvPortMalloc+0x190>)
 8019828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801982c:	685a      	ldr	r2, [r3, #4]
 801982e:	4b13      	ldr	r3, [pc, #76]	; (801987c <pvPortMalloc+0x184>)
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	431a      	orrs	r2, r3
 8019834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801983a:	2200      	movs	r2, #0
 801983c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801983e:	4b13      	ldr	r3, [pc, #76]	; (801988c <pvPortMalloc+0x194>)
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	3301      	adds	r3, #1
 8019844:	4a11      	ldr	r2, [pc, #68]	; (801988c <pvPortMalloc+0x194>)
 8019846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019848:	f7fe fc1a 	bl	8018080 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801984c:	69fb      	ldr	r3, [r7, #28]
 801984e:	f003 0307 	and.w	r3, r3, #7
 8019852:	2b00      	cmp	r3, #0
 8019854:	d00a      	beq.n	801986c <pvPortMalloc+0x174>
	__asm volatile
 8019856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801985a:	f383 8811 	msr	BASEPRI, r3
 801985e:	f3bf 8f6f 	isb	sy
 8019862:	f3bf 8f4f 	dsb	sy
 8019866:	60fb      	str	r3, [r7, #12]
}
 8019868:	bf00      	nop
 801986a:	e7fe      	b.n	801986a <pvPortMalloc+0x172>
	return pvReturn;
 801986c:	69fb      	ldr	r3, [r7, #28]
}
 801986e:	4618      	mov	r0, r3
 8019870:	3728      	adds	r7, #40	; 0x28
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}
 8019876:	bf00      	nop
 8019878:	24006aa0 	.word	0x24006aa0
 801987c:	24006ab4 	.word	0x24006ab4
 8019880:	24006aa4 	.word	0x24006aa4
 8019884:	24006a98 	.word	0x24006a98
 8019888:	24006aa8 	.word	0x24006aa8
 801988c:	24006aac 	.word	0x24006aac

08019890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b086      	sub	sp, #24
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d04d      	beq.n	801993e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80198a2:	2308      	movs	r3, #8
 80198a4:	425b      	negs	r3, r3
 80198a6:	697a      	ldr	r2, [r7, #20]
 80198a8:	4413      	add	r3, r2
 80198aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80198ac:	697b      	ldr	r3, [r7, #20]
 80198ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80198b0:	693b      	ldr	r3, [r7, #16]
 80198b2:	685a      	ldr	r2, [r3, #4]
 80198b4:	4b24      	ldr	r3, [pc, #144]	; (8019948 <vPortFree+0xb8>)
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	4013      	ands	r3, r2
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d10a      	bne.n	80198d4 <vPortFree+0x44>
	__asm volatile
 80198be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198c2:	f383 8811 	msr	BASEPRI, r3
 80198c6:	f3bf 8f6f 	isb	sy
 80198ca:	f3bf 8f4f 	dsb	sy
 80198ce:	60fb      	str	r3, [r7, #12]
}
 80198d0:	bf00      	nop
 80198d2:	e7fe      	b.n	80198d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80198d4:	693b      	ldr	r3, [r7, #16]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d00a      	beq.n	80198f2 <vPortFree+0x62>
	__asm volatile
 80198dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198e0:	f383 8811 	msr	BASEPRI, r3
 80198e4:	f3bf 8f6f 	isb	sy
 80198e8:	f3bf 8f4f 	dsb	sy
 80198ec:	60bb      	str	r3, [r7, #8]
}
 80198ee:	bf00      	nop
 80198f0:	e7fe      	b.n	80198f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80198f2:	693b      	ldr	r3, [r7, #16]
 80198f4:	685a      	ldr	r2, [r3, #4]
 80198f6:	4b14      	ldr	r3, [pc, #80]	; (8019948 <vPortFree+0xb8>)
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	4013      	ands	r3, r2
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d01e      	beq.n	801993e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019900:	693b      	ldr	r3, [r7, #16]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	2b00      	cmp	r3, #0
 8019906:	d11a      	bne.n	801993e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019908:	693b      	ldr	r3, [r7, #16]
 801990a:	685a      	ldr	r2, [r3, #4]
 801990c:	4b0e      	ldr	r3, [pc, #56]	; (8019948 <vPortFree+0xb8>)
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	43db      	mvns	r3, r3
 8019912:	401a      	ands	r2, r3
 8019914:	693b      	ldr	r3, [r7, #16]
 8019916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019918:	f7fe fba4 	bl	8018064 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801991c:	693b      	ldr	r3, [r7, #16]
 801991e:	685a      	ldr	r2, [r3, #4]
 8019920:	4b0a      	ldr	r3, [pc, #40]	; (801994c <vPortFree+0xbc>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	4413      	add	r3, r2
 8019926:	4a09      	ldr	r2, [pc, #36]	; (801994c <vPortFree+0xbc>)
 8019928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801992a:	6938      	ldr	r0, [r7, #16]
 801992c:	f000 f874 	bl	8019a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019930:	4b07      	ldr	r3, [pc, #28]	; (8019950 <vPortFree+0xc0>)
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	3301      	adds	r3, #1
 8019936:	4a06      	ldr	r2, [pc, #24]	; (8019950 <vPortFree+0xc0>)
 8019938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801993a:	f7fe fba1 	bl	8018080 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801993e:	bf00      	nop
 8019940:	3718      	adds	r7, #24
 8019942:	46bd      	mov	sp, r7
 8019944:	bd80      	pop	{r7, pc}
 8019946:	bf00      	nop
 8019948:	24006ab4 	.word	0x24006ab4
 801994c:	24006aa4 	.word	0x24006aa4
 8019950:	24006ab0 	.word	0x24006ab0

08019954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019954:	b480      	push	{r7}
 8019956:	b085      	sub	sp, #20
 8019958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801995a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801995e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019960:	4b27      	ldr	r3, [pc, #156]	; (8019a00 <prvHeapInit+0xac>)
 8019962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	f003 0307 	and.w	r3, r3, #7
 801996a:	2b00      	cmp	r3, #0
 801996c:	d00c      	beq.n	8019988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	3307      	adds	r3, #7
 8019972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	f023 0307 	bic.w	r3, r3, #7
 801997a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801997c:	68ba      	ldr	r2, [r7, #8]
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	1ad3      	subs	r3, r2, r3
 8019982:	4a1f      	ldr	r2, [pc, #124]	; (8019a00 <prvHeapInit+0xac>)
 8019984:	4413      	add	r3, r2
 8019986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801998c:	4a1d      	ldr	r2, [pc, #116]	; (8019a04 <prvHeapInit+0xb0>)
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019992:	4b1c      	ldr	r3, [pc, #112]	; (8019a04 <prvHeapInit+0xb0>)
 8019994:	2200      	movs	r2, #0
 8019996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	68ba      	ldr	r2, [r7, #8]
 801999c:	4413      	add	r3, r2
 801999e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80199a0:	2208      	movs	r2, #8
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	1a9b      	subs	r3, r3, r2
 80199a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	f023 0307 	bic.w	r3, r3, #7
 80199ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	4a15      	ldr	r2, [pc, #84]	; (8019a08 <prvHeapInit+0xb4>)
 80199b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80199b6:	4b14      	ldr	r3, [pc, #80]	; (8019a08 <prvHeapInit+0xb4>)
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	2200      	movs	r2, #0
 80199bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80199be:	4b12      	ldr	r3, [pc, #72]	; (8019a08 <prvHeapInit+0xb4>)
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	2200      	movs	r2, #0
 80199c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80199ca:	683b      	ldr	r3, [r7, #0]
 80199cc:	68fa      	ldr	r2, [r7, #12]
 80199ce:	1ad2      	subs	r2, r2, r3
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80199d4:	4b0c      	ldr	r3, [pc, #48]	; (8019a08 <prvHeapInit+0xb4>)
 80199d6:	681a      	ldr	r2, [r3, #0]
 80199d8:	683b      	ldr	r3, [r7, #0]
 80199da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80199dc:	683b      	ldr	r3, [r7, #0]
 80199de:	685b      	ldr	r3, [r3, #4]
 80199e0:	4a0a      	ldr	r2, [pc, #40]	; (8019a0c <prvHeapInit+0xb8>)
 80199e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	685b      	ldr	r3, [r3, #4]
 80199e8:	4a09      	ldr	r2, [pc, #36]	; (8019a10 <prvHeapInit+0xbc>)
 80199ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80199ec:	4b09      	ldr	r3, [pc, #36]	; (8019a14 <prvHeapInit+0xc0>)
 80199ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80199f2:	601a      	str	r2, [r3, #0]
}
 80199f4:	bf00      	nop
 80199f6:	3714      	adds	r7, #20
 80199f8:	46bd      	mov	sp, r7
 80199fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199fe:	4770      	bx	lr
 8019a00:	24002e98 	.word	0x24002e98
 8019a04:	24006a98 	.word	0x24006a98
 8019a08:	24006aa0 	.word	0x24006aa0
 8019a0c:	24006aa8 	.word	0x24006aa8
 8019a10:	24006aa4 	.word	0x24006aa4
 8019a14:	24006ab4 	.word	0x24006ab4

08019a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019a18:	b480      	push	{r7}
 8019a1a:	b085      	sub	sp, #20
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019a20:	4b28      	ldr	r3, [pc, #160]	; (8019ac4 <prvInsertBlockIntoFreeList+0xac>)
 8019a22:	60fb      	str	r3, [r7, #12]
 8019a24:	e002      	b.n	8019a2c <prvInsertBlockIntoFreeList+0x14>
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	60fb      	str	r3, [r7, #12]
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	687a      	ldr	r2, [r7, #4]
 8019a32:	429a      	cmp	r2, r3
 8019a34:	d8f7      	bhi.n	8019a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019a36:	68fb      	ldr	r3, [r7, #12]
 8019a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	685b      	ldr	r3, [r3, #4]
 8019a3e:	68ba      	ldr	r2, [r7, #8]
 8019a40:	4413      	add	r3, r2
 8019a42:	687a      	ldr	r2, [r7, #4]
 8019a44:	429a      	cmp	r2, r3
 8019a46:	d108      	bne.n	8019a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	685a      	ldr	r2, [r3, #4]
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	685b      	ldr	r3, [r3, #4]
 8019a50:	441a      	add	r2, r3
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	685b      	ldr	r3, [r3, #4]
 8019a62:	68ba      	ldr	r2, [r7, #8]
 8019a64:	441a      	add	r2, r3
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	429a      	cmp	r2, r3
 8019a6c:	d118      	bne.n	8019aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	681a      	ldr	r2, [r3, #0]
 8019a72:	4b15      	ldr	r3, [pc, #84]	; (8019ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	429a      	cmp	r2, r3
 8019a78:	d00d      	beq.n	8019a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	685a      	ldr	r2, [r3, #4]
 8019a7e:	68fb      	ldr	r3, [r7, #12]
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	685b      	ldr	r3, [r3, #4]
 8019a84:	441a      	add	r2, r3
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	681a      	ldr	r2, [r3, #0]
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	601a      	str	r2, [r3, #0]
 8019a94:	e008      	b.n	8019aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019a96:	4b0c      	ldr	r3, [pc, #48]	; (8019ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8019a98:	681a      	ldr	r2, [r3, #0]
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	601a      	str	r2, [r3, #0]
 8019a9e:	e003      	b.n	8019aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	681a      	ldr	r2, [r3, #0]
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019aa8:	68fa      	ldr	r2, [r7, #12]
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	429a      	cmp	r2, r3
 8019aae:	d002      	beq.n	8019ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	687a      	ldr	r2, [r7, #4]
 8019ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019ab6:	bf00      	nop
 8019ab8:	3714      	adds	r7, #20
 8019aba:	46bd      	mov	sp, r7
 8019abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac0:	4770      	bx	lr
 8019ac2:	bf00      	nop
 8019ac4:	24006a98 	.word	0x24006a98
 8019ac8:	24006aa0 	.word	0x24006aa0

08019acc <__errno>:
 8019acc:	4b01      	ldr	r3, [pc, #4]	; (8019ad4 <__errno+0x8>)
 8019ace:	6818      	ldr	r0, [r3, #0]
 8019ad0:	4770      	bx	lr
 8019ad2:	bf00      	nop
 8019ad4:	240000dc 	.word	0x240000dc

08019ad8 <__libc_init_array>:
 8019ad8:	b570      	push	{r4, r5, r6, lr}
 8019ada:	4d0d      	ldr	r5, [pc, #52]	; (8019b10 <__libc_init_array+0x38>)
 8019adc:	4c0d      	ldr	r4, [pc, #52]	; (8019b14 <__libc_init_array+0x3c>)
 8019ade:	1b64      	subs	r4, r4, r5
 8019ae0:	10a4      	asrs	r4, r4, #2
 8019ae2:	2600      	movs	r6, #0
 8019ae4:	42a6      	cmp	r6, r4
 8019ae6:	d109      	bne.n	8019afc <__libc_init_array+0x24>
 8019ae8:	4d0b      	ldr	r5, [pc, #44]	; (8019b18 <__libc_init_array+0x40>)
 8019aea:	4c0c      	ldr	r4, [pc, #48]	; (8019b1c <__libc_init_array+0x44>)
 8019aec:	f000 fd2c 	bl	801a548 <_init>
 8019af0:	1b64      	subs	r4, r4, r5
 8019af2:	10a4      	asrs	r4, r4, #2
 8019af4:	2600      	movs	r6, #0
 8019af6:	42a6      	cmp	r6, r4
 8019af8:	d105      	bne.n	8019b06 <__libc_init_array+0x2e>
 8019afa:	bd70      	pop	{r4, r5, r6, pc}
 8019afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b00:	4798      	blx	r3
 8019b02:	3601      	adds	r6, #1
 8019b04:	e7ee      	b.n	8019ae4 <__libc_init_array+0xc>
 8019b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b0a:	4798      	blx	r3
 8019b0c:	3601      	adds	r6, #1
 8019b0e:	e7f2      	b.n	8019af6 <__libc_init_array+0x1e>
 8019b10:	0801aa00 	.word	0x0801aa00
 8019b14:	0801aa00 	.word	0x0801aa00
 8019b18:	0801aa00 	.word	0x0801aa00
 8019b1c:	0801aa04 	.word	0x0801aa04

08019b20 <memcpy>:
 8019b20:	440a      	add	r2, r1
 8019b22:	4291      	cmp	r1, r2
 8019b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8019b28:	d100      	bne.n	8019b2c <memcpy+0xc>
 8019b2a:	4770      	bx	lr
 8019b2c:	b510      	push	{r4, lr}
 8019b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019b36:	4291      	cmp	r1, r2
 8019b38:	d1f9      	bne.n	8019b2e <memcpy+0xe>
 8019b3a:	bd10      	pop	{r4, pc}

08019b3c <memset>:
 8019b3c:	4402      	add	r2, r0
 8019b3e:	4603      	mov	r3, r0
 8019b40:	4293      	cmp	r3, r2
 8019b42:	d100      	bne.n	8019b46 <memset+0xa>
 8019b44:	4770      	bx	lr
 8019b46:	f803 1b01 	strb.w	r1, [r3], #1
 8019b4a:	e7f9      	b.n	8019b40 <memset+0x4>

08019b4c <_puts_r>:
 8019b4c:	b570      	push	{r4, r5, r6, lr}
 8019b4e:	460e      	mov	r6, r1
 8019b50:	4605      	mov	r5, r0
 8019b52:	b118      	cbz	r0, 8019b5c <_puts_r+0x10>
 8019b54:	6983      	ldr	r3, [r0, #24]
 8019b56:	b90b      	cbnz	r3, 8019b5c <_puts_r+0x10>
 8019b58:	f000 fa48 	bl	8019fec <__sinit>
 8019b5c:	69ab      	ldr	r3, [r5, #24]
 8019b5e:	68ac      	ldr	r4, [r5, #8]
 8019b60:	b913      	cbnz	r3, 8019b68 <_puts_r+0x1c>
 8019b62:	4628      	mov	r0, r5
 8019b64:	f000 fa42 	bl	8019fec <__sinit>
 8019b68:	4b2c      	ldr	r3, [pc, #176]	; (8019c1c <_puts_r+0xd0>)
 8019b6a:	429c      	cmp	r4, r3
 8019b6c:	d120      	bne.n	8019bb0 <_puts_r+0x64>
 8019b6e:	686c      	ldr	r4, [r5, #4]
 8019b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b72:	07db      	lsls	r3, r3, #31
 8019b74:	d405      	bmi.n	8019b82 <_puts_r+0x36>
 8019b76:	89a3      	ldrh	r3, [r4, #12]
 8019b78:	0598      	lsls	r0, r3, #22
 8019b7a:	d402      	bmi.n	8019b82 <_puts_r+0x36>
 8019b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b7e:	f000 fad3 	bl	801a128 <__retarget_lock_acquire_recursive>
 8019b82:	89a3      	ldrh	r3, [r4, #12]
 8019b84:	0719      	lsls	r1, r3, #28
 8019b86:	d51d      	bpl.n	8019bc4 <_puts_r+0x78>
 8019b88:	6923      	ldr	r3, [r4, #16]
 8019b8a:	b1db      	cbz	r3, 8019bc4 <_puts_r+0x78>
 8019b8c:	3e01      	subs	r6, #1
 8019b8e:	68a3      	ldr	r3, [r4, #8]
 8019b90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019b94:	3b01      	subs	r3, #1
 8019b96:	60a3      	str	r3, [r4, #8]
 8019b98:	bb39      	cbnz	r1, 8019bea <_puts_r+0x9e>
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	da38      	bge.n	8019c10 <_puts_r+0xc4>
 8019b9e:	4622      	mov	r2, r4
 8019ba0:	210a      	movs	r1, #10
 8019ba2:	4628      	mov	r0, r5
 8019ba4:	f000 f848 	bl	8019c38 <__swbuf_r>
 8019ba8:	3001      	adds	r0, #1
 8019baa:	d011      	beq.n	8019bd0 <_puts_r+0x84>
 8019bac:	250a      	movs	r5, #10
 8019bae:	e011      	b.n	8019bd4 <_puts_r+0x88>
 8019bb0:	4b1b      	ldr	r3, [pc, #108]	; (8019c20 <_puts_r+0xd4>)
 8019bb2:	429c      	cmp	r4, r3
 8019bb4:	d101      	bne.n	8019bba <_puts_r+0x6e>
 8019bb6:	68ac      	ldr	r4, [r5, #8]
 8019bb8:	e7da      	b.n	8019b70 <_puts_r+0x24>
 8019bba:	4b1a      	ldr	r3, [pc, #104]	; (8019c24 <_puts_r+0xd8>)
 8019bbc:	429c      	cmp	r4, r3
 8019bbe:	bf08      	it	eq
 8019bc0:	68ec      	ldreq	r4, [r5, #12]
 8019bc2:	e7d5      	b.n	8019b70 <_puts_r+0x24>
 8019bc4:	4621      	mov	r1, r4
 8019bc6:	4628      	mov	r0, r5
 8019bc8:	f000 f888 	bl	8019cdc <__swsetup_r>
 8019bcc:	2800      	cmp	r0, #0
 8019bce:	d0dd      	beq.n	8019b8c <_puts_r+0x40>
 8019bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8019bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019bd6:	07da      	lsls	r2, r3, #31
 8019bd8:	d405      	bmi.n	8019be6 <_puts_r+0x9a>
 8019bda:	89a3      	ldrh	r3, [r4, #12]
 8019bdc:	059b      	lsls	r3, r3, #22
 8019bde:	d402      	bmi.n	8019be6 <_puts_r+0x9a>
 8019be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019be2:	f000 faa2 	bl	801a12a <__retarget_lock_release_recursive>
 8019be6:	4628      	mov	r0, r5
 8019be8:	bd70      	pop	{r4, r5, r6, pc}
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	da04      	bge.n	8019bf8 <_puts_r+0xac>
 8019bee:	69a2      	ldr	r2, [r4, #24]
 8019bf0:	429a      	cmp	r2, r3
 8019bf2:	dc06      	bgt.n	8019c02 <_puts_r+0xb6>
 8019bf4:	290a      	cmp	r1, #10
 8019bf6:	d004      	beq.n	8019c02 <_puts_r+0xb6>
 8019bf8:	6823      	ldr	r3, [r4, #0]
 8019bfa:	1c5a      	adds	r2, r3, #1
 8019bfc:	6022      	str	r2, [r4, #0]
 8019bfe:	7019      	strb	r1, [r3, #0]
 8019c00:	e7c5      	b.n	8019b8e <_puts_r+0x42>
 8019c02:	4622      	mov	r2, r4
 8019c04:	4628      	mov	r0, r5
 8019c06:	f000 f817 	bl	8019c38 <__swbuf_r>
 8019c0a:	3001      	adds	r0, #1
 8019c0c:	d1bf      	bne.n	8019b8e <_puts_r+0x42>
 8019c0e:	e7df      	b.n	8019bd0 <_puts_r+0x84>
 8019c10:	6823      	ldr	r3, [r4, #0]
 8019c12:	250a      	movs	r5, #10
 8019c14:	1c5a      	adds	r2, r3, #1
 8019c16:	6022      	str	r2, [r4, #0]
 8019c18:	701d      	strb	r5, [r3, #0]
 8019c1a:	e7db      	b.n	8019bd4 <_puts_r+0x88>
 8019c1c:	0801a9b8 	.word	0x0801a9b8
 8019c20:	0801a9d8 	.word	0x0801a9d8
 8019c24:	0801a998 	.word	0x0801a998

08019c28 <puts>:
 8019c28:	4b02      	ldr	r3, [pc, #8]	; (8019c34 <puts+0xc>)
 8019c2a:	4601      	mov	r1, r0
 8019c2c:	6818      	ldr	r0, [r3, #0]
 8019c2e:	f7ff bf8d 	b.w	8019b4c <_puts_r>
 8019c32:	bf00      	nop
 8019c34:	240000dc 	.word	0x240000dc

08019c38 <__swbuf_r>:
 8019c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c3a:	460e      	mov	r6, r1
 8019c3c:	4614      	mov	r4, r2
 8019c3e:	4605      	mov	r5, r0
 8019c40:	b118      	cbz	r0, 8019c4a <__swbuf_r+0x12>
 8019c42:	6983      	ldr	r3, [r0, #24]
 8019c44:	b90b      	cbnz	r3, 8019c4a <__swbuf_r+0x12>
 8019c46:	f000 f9d1 	bl	8019fec <__sinit>
 8019c4a:	4b21      	ldr	r3, [pc, #132]	; (8019cd0 <__swbuf_r+0x98>)
 8019c4c:	429c      	cmp	r4, r3
 8019c4e:	d12b      	bne.n	8019ca8 <__swbuf_r+0x70>
 8019c50:	686c      	ldr	r4, [r5, #4]
 8019c52:	69a3      	ldr	r3, [r4, #24]
 8019c54:	60a3      	str	r3, [r4, #8]
 8019c56:	89a3      	ldrh	r3, [r4, #12]
 8019c58:	071a      	lsls	r2, r3, #28
 8019c5a:	d52f      	bpl.n	8019cbc <__swbuf_r+0x84>
 8019c5c:	6923      	ldr	r3, [r4, #16]
 8019c5e:	b36b      	cbz	r3, 8019cbc <__swbuf_r+0x84>
 8019c60:	6923      	ldr	r3, [r4, #16]
 8019c62:	6820      	ldr	r0, [r4, #0]
 8019c64:	1ac0      	subs	r0, r0, r3
 8019c66:	6963      	ldr	r3, [r4, #20]
 8019c68:	b2f6      	uxtb	r6, r6
 8019c6a:	4283      	cmp	r3, r0
 8019c6c:	4637      	mov	r7, r6
 8019c6e:	dc04      	bgt.n	8019c7a <__swbuf_r+0x42>
 8019c70:	4621      	mov	r1, r4
 8019c72:	4628      	mov	r0, r5
 8019c74:	f000 f926 	bl	8019ec4 <_fflush_r>
 8019c78:	bb30      	cbnz	r0, 8019cc8 <__swbuf_r+0x90>
 8019c7a:	68a3      	ldr	r3, [r4, #8]
 8019c7c:	3b01      	subs	r3, #1
 8019c7e:	60a3      	str	r3, [r4, #8]
 8019c80:	6823      	ldr	r3, [r4, #0]
 8019c82:	1c5a      	adds	r2, r3, #1
 8019c84:	6022      	str	r2, [r4, #0]
 8019c86:	701e      	strb	r6, [r3, #0]
 8019c88:	6963      	ldr	r3, [r4, #20]
 8019c8a:	3001      	adds	r0, #1
 8019c8c:	4283      	cmp	r3, r0
 8019c8e:	d004      	beq.n	8019c9a <__swbuf_r+0x62>
 8019c90:	89a3      	ldrh	r3, [r4, #12]
 8019c92:	07db      	lsls	r3, r3, #31
 8019c94:	d506      	bpl.n	8019ca4 <__swbuf_r+0x6c>
 8019c96:	2e0a      	cmp	r6, #10
 8019c98:	d104      	bne.n	8019ca4 <__swbuf_r+0x6c>
 8019c9a:	4621      	mov	r1, r4
 8019c9c:	4628      	mov	r0, r5
 8019c9e:	f000 f911 	bl	8019ec4 <_fflush_r>
 8019ca2:	b988      	cbnz	r0, 8019cc8 <__swbuf_r+0x90>
 8019ca4:	4638      	mov	r0, r7
 8019ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ca8:	4b0a      	ldr	r3, [pc, #40]	; (8019cd4 <__swbuf_r+0x9c>)
 8019caa:	429c      	cmp	r4, r3
 8019cac:	d101      	bne.n	8019cb2 <__swbuf_r+0x7a>
 8019cae:	68ac      	ldr	r4, [r5, #8]
 8019cb0:	e7cf      	b.n	8019c52 <__swbuf_r+0x1a>
 8019cb2:	4b09      	ldr	r3, [pc, #36]	; (8019cd8 <__swbuf_r+0xa0>)
 8019cb4:	429c      	cmp	r4, r3
 8019cb6:	bf08      	it	eq
 8019cb8:	68ec      	ldreq	r4, [r5, #12]
 8019cba:	e7ca      	b.n	8019c52 <__swbuf_r+0x1a>
 8019cbc:	4621      	mov	r1, r4
 8019cbe:	4628      	mov	r0, r5
 8019cc0:	f000 f80c 	bl	8019cdc <__swsetup_r>
 8019cc4:	2800      	cmp	r0, #0
 8019cc6:	d0cb      	beq.n	8019c60 <__swbuf_r+0x28>
 8019cc8:	f04f 37ff 	mov.w	r7, #4294967295
 8019ccc:	e7ea      	b.n	8019ca4 <__swbuf_r+0x6c>
 8019cce:	bf00      	nop
 8019cd0:	0801a9b8 	.word	0x0801a9b8
 8019cd4:	0801a9d8 	.word	0x0801a9d8
 8019cd8:	0801a998 	.word	0x0801a998

08019cdc <__swsetup_r>:
 8019cdc:	4b32      	ldr	r3, [pc, #200]	; (8019da8 <__swsetup_r+0xcc>)
 8019cde:	b570      	push	{r4, r5, r6, lr}
 8019ce0:	681d      	ldr	r5, [r3, #0]
 8019ce2:	4606      	mov	r6, r0
 8019ce4:	460c      	mov	r4, r1
 8019ce6:	b125      	cbz	r5, 8019cf2 <__swsetup_r+0x16>
 8019ce8:	69ab      	ldr	r3, [r5, #24]
 8019cea:	b913      	cbnz	r3, 8019cf2 <__swsetup_r+0x16>
 8019cec:	4628      	mov	r0, r5
 8019cee:	f000 f97d 	bl	8019fec <__sinit>
 8019cf2:	4b2e      	ldr	r3, [pc, #184]	; (8019dac <__swsetup_r+0xd0>)
 8019cf4:	429c      	cmp	r4, r3
 8019cf6:	d10f      	bne.n	8019d18 <__swsetup_r+0x3c>
 8019cf8:	686c      	ldr	r4, [r5, #4]
 8019cfa:	89a3      	ldrh	r3, [r4, #12]
 8019cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019d00:	0719      	lsls	r1, r3, #28
 8019d02:	d42c      	bmi.n	8019d5e <__swsetup_r+0x82>
 8019d04:	06dd      	lsls	r5, r3, #27
 8019d06:	d411      	bmi.n	8019d2c <__swsetup_r+0x50>
 8019d08:	2309      	movs	r3, #9
 8019d0a:	6033      	str	r3, [r6, #0]
 8019d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019d10:	81a3      	strh	r3, [r4, #12]
 8019d12:	f04f 30ff 	mov.w	r0, #4294967295
 8019d16:	e03e      	b.n	8019d96 <__swsetup_r+0xba>
 8019d18:	4b25      	ldr	r3, [pc, #148]	; (8019db0 <__swsetup_r+0xd4>)
 8019d1a:	429c      	cmp	r4, r3
 8019d1c:	d101      	bne.n	8019d22 <__swsetup_r+0x46>
 8019d1e:	68ac      	ldr	r4, [r5, #8]
 8019d20:	e7eb      	b.n	8019cfa <__swsetup_r+0x1e>
 8019d22:	4b24      	ldr	r3, [pc, #144]	; (8019db4 <__swsetup_r+0xd8>)
 8019d24:	429c      	cmp	r4, r3
 8019d26:	bf08      	it	eq
 8019d28:	68ec      	ldreq	r4, [r5, #12]
 8019d2a:	e7e6      	b.n	8019cfa <__swsetup_r+0x1e>
 8019d2c:	0758      	lsls	r0, r3, #29
 8019d2e:	d512      	bpl.n	8019d56 <__swsetup_r+0x7a>
 8019d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d32:	b141      	cbz	r1, 8019d46 <__swsetup_r+0x6a>
 8019d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d38:	4299      	cmp	r1, r3
 8019d3a:	d002      	beq.n	8019d42 <__swsetup_r+0x66>
 8019d3c:	4630      	mov	r0, r6
 8019d3e:	f000 fa5b 	bl	801a1f8 <_free_r>
 8019d42:	2300      	movs	r3, #0
 8019d44:	6363      	str	r3, [r4, #52]	; 0x34
 8019d46:	89a3      	ldrh	r3, [r4, #12]
 8019d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019d4c:	81a3      	strh	r3, [r4, #12]
 8019d4e:	2300      	movs	r3, #0
 8019d50:	6063      	str	r3, [r4, #4]
 8019d52:	6923      	ldr	r3, [r4, #16]
 8019d54:	6023      	str	r3, [r4, #0]
 8019d56:	89a3      	ldrh	r3, [r4, #12]
 8019d58:	f043 0308 	orr.w	r3, r3, #8
 8019d5c:	81a3      	strh	r3, [r4, #12]
 8019d5e:	6923      	ldr	r3, [r4, #16]
 8019d60:	b94b      	cbnz	r3, 8019d76 <__swsetup_r+0x9a>
 8019d62:	89a3      	ldrh	r3, [r4, #12]
 8019d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019d6c:	d003      	beq.n	8019d76 <__swsetup_r+0x9a>
 8019d6e:	4621      	mov	r1, r4
 8019d70:	4630      	mov	r0, r6
 8019d72:	f000 fa01 	bl	801a178 <__smakebuf_r>
 8019d76:	89a0      	ldrh	r0, [r4, #12]
 8019d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019d7c:	f010 0301 	ands.w	r3, r0, #1
 8019d80:	d00a      	beq.n	8019d98 <__swsetup_r+0xbc>
 8019d82:	2300      	movs	r3, #0
 8019d84:	60a3      	str	r3, [r4, #8]
 8019d86:	6963      	ldr	r3, [r4, #20]
 8019d88:	425b      	negs	r3, r3
 8019d8a:	61a3      	str	r3, [r4, #24]
 8019d8c:	6923      	ldr	r3, [r4, #16]
 8019d8e:	b943      	cbnz	r3, 8019da2 <__swsetup_r+0xc6>
 8019d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019d94:	d1ba      	bne.n	8019d0c <__swsetup_r+0x30>
 8019d96:	bd70      	pop	{r4, r5, r6, pc}
 8019d98:	0781      	lsls	r1, r0, #30
 8019d9a:	bf58      	it	pl
 8019d9c:	6963      	ldrpl	r3, [r4, #20]
 8019d9e:	60a3      	str	r3, [r4, #8]
 8019da0:	e7f4      	b.n	8019d8c <__swsetup_r+0xb0>
 8019da2:	2000      	movs	r0, #0
 8019da4:	e7f7      	b.n	8019d96 <__swsetup_r+0xba>
 8019da6:	bf00      	nop
 8019da8:	240000dc 	.word	0x240000dc
 8019dac:	0801a9b8 	.word	0x0801a9b8
 8019db0:	0801a9d8 	.word	0x0801a9d8
 8019db4:	0801a998 	.word	0x0801a998

08019db8 <__sflush_r>:
 8019db8:	898a      	ldrh	r2, [r1, #12]
 8019dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dbe:	4605      	mov	r5, r0
 8019dc0:	0710      	lsls	r0, r2, #28
 8019dc2:	460c      	mov	r4, r1
 8019dc4:	d458      	bmi.n	8019e78 <__sflush_r+0xc0>
 8019dc6:	684b      	ldr	r3, [r1, #4]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	dc05      	bgt.n	8019dd8 <__sflush_r+0x20>
 8019dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	dc02      	bgt.n	8019dd8 <__sflush_r+0x20>
 8019dd2:	2000      	movs	r0, #0
 8019dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019dda:	2e00      	cmp	r6, #0
 8019ddc:	d0f9      	beq.n	8019dd2 <__sflush_r+0x1a>
 8019dde:	2300      	movs	r3, #0
 8019de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019de4:	682f      	ldr	r7, [r5, #0]
 8019de6:	602b      	str	r3, [r5, #0]
 8019de8:	d032      	beq.n	8019e50 <__sflush_r+0x98>
 8019dea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019dec:	89a3      	ldrh	r3, [r4, #12]
 8019dee:	075a      	lsls	r2, r3, #29
 8019df0:	d505      	bpl.n	8019dfe <__sflush_r+0x46>
 8019df2:	6863      	ldr	r3, [r4, #4]
 8019df4:	1ac0      	subs	r0, r0, r3
 8019df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019df8:	b10b      	cbz	r3, 8019dfe <__sflush_r+0x46>
 8019dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019dfc:	1ac0      	subs	r0, r0, r3
 8019dfe:	2300      	movs	r3, #0
 8019e00:	4602      	mov	r2, r0
 8019e02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019e04:	6a21      	ldr	r1, [r4, #32]
 8019e06:	4628      	mov	r0, r5
 8019e08:	47b0      	blx	r6
 8019e0a:	1c43      	adds	r3, r0, #1
 8019e0c:	89a3      	ldrh	r3, [r4, #12]
 8019e0e:	d106      	bne.n	8019e1e <__sflush_r+0x66>
 8019e10:	6829      	ldr	r1, [r5, #0]
 8019e12:	291d      	cmp	r1, #29
 8019e14:	d82c      	bhi.n	8019e70 <__sflush_r+0xb8>
 8019e16:	4a2a      	ldr	r2, [pc, #168]	; (8019ec0 <__sflush_r+0x108>)
 8019e18:	40ca      	lsrs	r2, r1
 8019e1a:	07d6      	lsls	r6, r2, #31
 8019e1c:	d528      	bpl.n	8019e70 <__sflush_r+0xb8>
 8019e1e:	2200      	movs	r2, #0
 8019e20:	6062      	str	r2, [r4, #4]
 8019e22:	04d9      	lsls	r1, r3, #19
 8019e24:	6922      	ldr	r2, [r4, #16]
 8019e26:	6022      	str	r2, [r4, #0]
 8019e28:	d504      	bpl.n	8019e34 <__sflush_r+0x7c>
 8019e2a:	1c42      	adds	r2, r0, #1
 8019e2c:	d101      	bne.n	8019e32 <__sflush_r+0x7a>
 8019e2e:	682b      	ldr	r3, [r5, #0]
 8019e30:	b903      	cbnz	r3, 8019e34 <__sflush_r+0x7c>
 8019e32:	6560      	str	r0, [r4, #84]	; 0x54
 8019e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e36:	602f      	str	r7, [r5, #0]
 8019e38:	2900      	cmp	r1, #0
 8019e3a:	d0ca      	beq.n	8019dd2 <__sflush_r+0x1a>
 8019e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e40:	4299      	cmp	r1, r3
 8019e42:	d002      	beq.n	8019e4a <__sflush_r+0x92>
 8019e44:	4628      	mov	r0, r5
 8019e46:	f000 f9d7 	bl	801a1f8 <_free_r>
 8019e4a:	2000      	movs	r0, #0
 8019e4c:	6360      	str	r0, [r4, #52]	; 0x34
 8019e4e:	e7c1      	b.n	8019dd4 <__sflush_r+0x1c>
 8019e50:	6a21      	ldr	r1, [r4, #32]
 8019e52:	2301      	movs	r3, #1
 8019e54:	4628      	mov	r0, r5
 8019e56:	47b0      	blx	r6
 8019e58:	1c41      	adds	r1, r0, #1
 8019e5a:	d1c7      	bne.n	8019dec <__sflush_r+0x34>
 8019e5c:	682b      	ldr	r3, [r5, #0]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d0c4      	beq.n	8019dec <__sflush_r+0x34>
 8019e62:	2b1d      	cmp	r3, #29
 8019e64:	d001      	beq.n	8019e6a <__sflush_r+0xb2>
 8019e66:	2b16      	cmp	r3, #22
 8019e68:	d101      	bne.n	8019e6e <__sflush_r+0xb6>
 8019e6a:	602f      	str	r7, [r5, #0]
 8019e6c:	e7b1      	b.n	8019dd2 <__sflush_r+0x1a>
 8019e6e:	89a3      	ldrh	r3, [r4, #12]
 8019e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e74:	81a3      	strh	r3, [r4, #12]
 8019e76:	e7ad      	b.n	8019dd4 <__sflush_r+0x1c>
 8019e78:	690f      	ldr	r7, [r1, #16]
 8019e7a:	2f00      	cmp	r7, #0
 8019e7c:	d0a9      	beq.n	8019dd2 <__sflush_r+0x1a>
 8019e7e:	0793      	lsls	r3, r2, #30
 8019e80:	680e      	ldr	r6, [r1, #0]
 8019e82:	bf08      	it	eq
 8019e84:	694b      	ldreq	r3, [r1, #20]
 8019e86:	600f      	str	r7, [r1, #0]
 8019e88:	bf18      	it	ne
 8019e8a:	2300      	movne	r3, #0
 8019e8c:	eba6 0807 	sub.w	r8, r6, r7
 8019e90:	608b      	str	r3, [r1, #8]
 8019e92:	f1b8 0f00 	cmp.w	r8, #0
 8019e96:	dd9c      	ble.n	8019dd2 <__sflush_r+0x1a>
 8019e98:	6a21      	ldr	r1, [r4, #32]
 8019e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019e9c:	4643      	mov	r3, r8
 8019e9e:	463a      	mov	r2, r7
 8019ea0:	4628      	mov	r0, r5
 8019ea2:	47b0      	blx	r6
 8019ea4:	2800      	cmp	r0, #0
 8019ea6:	dc06      	bgt.n	8019eb6 <__sflush_r+0xfe>
 8019ea8:	89a3      	ldrh	r3, [r4, #12]
 8019eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019eae:	81a3      	strh	r3, [r4, #12]
 8019eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8019eb4:	e78e      	b.n	8019dd4 <__sflush_r+0x1c>
 8019eb6:	4407      	add	r7, r0
 8019eb8:	eba8 0800 	sub.w	r8, r8, r0
 8019ebc:	e7e9      	b.n	8019e92 <__sflush_r+0xda>
 8019ebe:	bf00      	nop
 8019ec0:	20400001 	.word	0x20400001

08019ec4 <_fflush_r>:
 8019ec4:	b538      	push	{r3, r4, r5, lr}
 8019ec6:	690b      	ldr	r3, [r1, #16]
 8019ec8:	4605      	mov	r5, r0
 8019eca:	460c      	mov	r4, r1
 8019ecc:	b913      	cbnz	r3, 8019ed4 <_fflush_r+0x10>
 8019ece:	2500      	movs	r5, #0
 8019ed0:	4628      	mov	r0, r5
 8019ed2:	bd38      	pop	{r3, r4, r5, pc}
 8019ed4:	b118      	cbz	r0, 8019ede <_fflush_r+0x1a>
 8019ed6:	6983      	ldr	r3, [r0, #24]
 8019ed8:	b90b      	cbnz	r3, 8019ede <_fflush_r+0x1a>
 8019eda:	f000 f887 	bl	8019fec <__sinit>
 8019ede:	4b14      	ldr	r3, [pc, #80]	; (8019f30 <_fflush_r+0x6c>)
 8019ee0:	429c      	cmp	r4, r3
 8019ee2:	d11b      	bne.n	8019f1c <_fflush_r+0x58>
 8019ee4:	686c      	ldr	r4, [r5, #4]
 8019ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d0ef      	beq.n	8019ece <_fflush_r+0xa>
 8019eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019ef0:	07d0      	lsls	r0, r2, #31
 8019ef2:	d404      	bmi.n	8019efe <_fflush_r+0x3a>
 8019ef4:	0599      	lsls	r1, r3, #22
 8019ef6:	d402      	bmi.n	8019efe <_fflush_r+0x3a>
 8019ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019efa:	f000 f915 	bl	801a128 <__retarget_lock_acquire_recursive>
 8019efe:	4628      	mov	r0, r5
 8019f00:	4621      	mov	r1, r4
 8019f02:	f7ff ff59 	bl	8019db8 <__sflush_r>
 8019f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019f08:	07da      	lsls	r2, r3, #31
 8019f0a:	4605      	mov	r5, r0
 8019f0c:	d4e0      	bmi.n	8019ed0 <_fflush_r+0xc>
 8019f0e:	89a3      	ldrh	r3, [r4, #12]
 8019f10:	059b      	lsls	r3, r3, #22
 8019f12:	d4dd      	bmi.n	8019ed0 <_fflush_r+0xc>
 8019f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f16:	f000 f908 	bl	801a12a <__retarget_lock_release_recursive>
 8019f1a:	e7d9      	b.n	8019ed0 <_fflush_r+0xc>
 8019f1c:	4b05      	ldr	r3, [pc, #20]	; (8019f34 <_fflush_r+0x70>)
 8019f1e:	429c      	cmp	r4, r3
 8019f20:	d101      	bne.n	8019f26 <_fflush_r+0x62>
 8019f22:	68ac      	ldr	r4, [r5, #8]
 8019f24:	e7df      	b.n	8019ee6 <_fflush_r+0x22>
 8019f26:	4b04      	ldr	r3, [pc, #16]	; (8019f38 <_fflush_r+0x74>)
 8019f28:	429c      	cmp	r4, r3
 8019f2a:	bf08      	it	eq
 8019f2c:	68ec      	ldreq	r4, [r5, #12]
 8019f2e:	e7da      	b.n	8019ee6 <_fflush_r+0x22>
 8019f30:	0801a9b8 	.word	0x0801a9b8
 8019f34:	0801a9d8 	.word	0x0801a9d8
 8019f38:	0801a998 	.word	0x0801a998

08019f3c <std>:
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	b510      	push	{r4, lr}
 8019f40:	4604      	mov	r4, r0
 8019f42:	e9c0 3300 	strd	r3, r3, [r0]
 8019f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019f4a:	6083      	str	r3, [r0, #8]
 8019f4c:	8181      	strh	r1, [r0, #12]
 8019f4e:	6643      	str	r3, [r0, #100]	; 0x64
 8019f50:	81c2      	strh	r2, [r0, #14]
 8019f52:	6183      	str	r3, [r0, #24]
 8019f54:	4619      	mov	r1, r3
 8019f56:	2208      	movs	r2, #8
 8019f58:	305c      	adds	r0, #92	; 0x5c
 8019f5a:	f7ff fdef 	bl	8019b3c <memset>
 8019f5e:	4b05      	ldr	r3, [pc, #20]	; (8019f74 <std+0x38>)
 8019f60:	6263      	str	r3, [r4, #36]	; 0x24
 8019f62:	4b05      	ldr	r3, [pc, #20]	; (8019f78 <std+0x3c>)
 8019f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8019f66:	4b05      	ldr	r3, [pc, #20]	; (8019f7c <std+0x40>)
 8019f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019f6a:	4b05      	ldr	r3, [pc, #20]	; (8019f80 <std+0x44>)
 8019f6c:	6224      	str	r4, [r4, #32]
 8019f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8019f70:	bd10      	pop	{r4, pc}
 8019f72:	bf00      	nop
 8019f74:	0801a3d9 	.word	0x0801a3d9
 8019f78:	0801a3fb 	.word	0x0801a3fb
 8019f7c:	0801a433 	.word	0x0801a433
 8019f80:	0801a457 	.word	0x0801a457

08019f84 <_cleanup_r>:
 8019f84:	4901      	ldr	r1, [pc, #4]	; (8019f8c <_cleanup_r+0x8>)
 8019f86:	f000 b8af 	b.w	801a0e8 <_fwalk_reent>
 8019f8a:	bf00      	nop
 8019f8c:	08019ec5 	.word	0x08019ec5

08019f90 <__sfmoreglue>:
 8019f90:	b570      	push	{r4, r5, r6, lr}
 8019f92:	2268      	movs	r2, #104	; 0x68
 8019f94:	1e4d      	subs	r5, r1, #1
 8019f96:	4355      	muls	r5, r2
 8019f98:	460e      	mov	r6, r1
 8019f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019f9e:	f000 f997 	bl	801a2d0 <_malloc_r>
 8019fa2:	4604      	mov	r4, r0
 8019fa4:	b140      	cbz	r0, 8019fb8 <__sfmoreglue+0x28>
 8019fa6:	2100      	movs	r1, #0
 8019fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8019fac:	300c      	adds	r0, #12
 8019fae:	60a0      	str	r0, [r4, #8]
 8019fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019fb4:	f7ff fdc2 	bl	8019b3c <memset>
 8019fb8:	4620      	mov	r0, r4
 8019fba:	bd70      	pop	{r4, r5, r6, pc}

08019fbc <__sfp_lock_acquire>:
 8019fbc:	4801      	ldr	r0, [pc, #4]	; (8019fc4 <__sfp_lock_acquire+0x8>)
 8019fbe:	f000 b8b3 	b.w	801a128 <__retarget_lock_acquire_recursive>
 8019fc2:	bf00      	nop
 8019fc4:	24006ab9 	.word	0x24006ab9

08019fc8 <__sfp_lock_release>:
 8019fc8:	4801      	ldr	r0, [pc, #4]	; (8019fd0 <__sfp_lock_release+0x8>)
 8019fca:	f000 b8ae 	b.w	801a12a <__retarget_lock_release_recursive>
 8019fce:	bf00      	nop
 8019fd0:	24006ab9 	.word	0x24006ab9

08019fd4 <__sinit_lock_acquire>:
 8019fd4:	4801      	ldr	r0, [pc, #4]	; (8019fdc <__sinit_lock_acquire+0x8>)
 8019fd6:	f000 b8a7 	b.w	801a128 <__retarget_lock_acquire_recursive>
 8019fda:	bf00      	nop
 8019fdc:	24006aba 	.word	0x24006aba

08019fe0 <__sinit_lock_release>:
 8019fe0:	4801      	ldr	r0, [pc, #4]	; (8019fe8 <__sinit_lock_release+0x8>)
 8019fe2:	f000 b8a2 	b.w	801a12a <__retarget_lock_release_recursive>
 8019fe6:	bf00      	nop
 8019fe8:	24006aba 	.word	0x24006aba

08019fec <__sinit>:
 8019fec:	b510      	push	{r4, lr}
 8019fee:	4604      	mov	r4, r0
 8019ff0:	f7ff fff0 	bl	8019fd4 <__sinit_lock_acquire>
 8019ff4:	69a3      	ldr	r3, [r4, #24]
 8019ff6:	b11b      	cbz	r3, 801a000 <__sinit+0x14>
 8019ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ffc:	f7ff bff0 	b.w	8019fe0 <__sinit_lock_release>
 801a000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a004:	6523      	str	r3, [r4, #80]	; 0x50
 801a006:	4b13      	ldr	r3, [pc, #76]	; (801a054 <__sinit+0x68>)
 801a008:	4a13      	ldr	r2, [pc, #76]	; (801a058 <__sinit+0x6c>)
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a00e:	42a3      	cmp	r3, r4
 801a010:	bf04      	itt	eq
 801a012:	2301      	moveq	r3, #1
 801a014:	61a3      	streq	r3, [r4, #24]
 801a016:	4620      	mov	r0, r4
 801a018:	f000 f820 	bl	801a05c <__sfp>
 801a01c:	6060      	str	r0, [r4, #4]
 801a01e:	4620      	mov	r0, r4
 801a020:	f000 f81c 	bl	801a05c <__sfp>
 801a024:	60a0      	str	r0, [r4, #8]
 801a026:	4620      	mov	r0, r4
 801a028:	f000 f818 	bl	801a05c <__sfp>
 801a02c:	2200      	movs	r2, #0
 801a02e:	60e0      	str	r0, [r4, #12]
 801a030:	2104      	movs	r1, #4
 801a032:	6860      	ldr	r0, [r4, #4]
 801a034:	f7ff ff82 	bl	8019f3c <std>
 801a038:	68a0      	ldr	r0, [r4, #8]
 801a03a:	2201      	movs	r2, #1
 801a03c:	2109      	movs	r1, #9
 801a03e:	f7ff ff7d 	bl	8019f3c <std>
 801a042:	68e0      	ldr	r0, [r4, #12]
 801a044:	2202      	movs	r2, #2
 801a046:	2112      	movs	r1, #18
 801a048:	f7ff ff78 	bl	8019f3c <std>
 801a04c:	2301      	movs	r3, #1
 801a04e:	61a3      	str	r3, [r4, #24]
 801a050:	e7d2      	b.n	8019ff8 <__sinit+0xc>
 801a052:	bf00      	nop
 801a054:	0801a994 	.word	0x0801a994
 801a058:	08019f85 	.word	0x08019f85

0801a05c <__sfp>:
 801a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a05e:	4607      	mov	r7, r0
 801a060:	f7ff ffac 	bl	8019fbc <__sfp_lock_acquire>
 801a064:	4b1e      	ldr	r3, [pc, #120]	; (801a0e0 <__sfp+0x84>)
 801a066:	681e      	ldr	r6, [r3, #0]
 801a068:	69b3      	ldr	r3, [r6, #24]
 801a06a:	b913      	cbnz	r3, 801a072 <__sfp+0x16>
 801a06c:	4630      	mov	r0, r6
 801a06e:	f7ff ffbd 	bl	8019fec <__sinit>
 801a072:	3648      	adds	r6, #72	; 0x48
 801a074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a078:	3b01      	subs	r3, #1
 801a07a:	d503      	bpl.n	801a084 <__sfp+0x28>
 801a07c:	6833      	ldr	r3, [r6, #0]
 801a07e:	b30b      	cbz	r3, 801a0c4 <__sfp+0x68>
 801a080:	6836      	ldr	r6, [r6, #0]
 801a082:	e7f7      	b.n	801a074 <__sfp+0x18>
 801a084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a088:	b9d5      	cbnz	r5, 801a0c0 <__sfp+0x64>
 801a08a:	4b16      	ldr	r3, [pc, #88]	; (801a0e4 <__sfp+0x88>)
 801a08c:	60e3      	str	r3, [r4, #12]
 801a08e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a092:	6665      	str	r5, [r4, #100]	; 0x64
 801a094:	f000 f847 	bl	801a126 <__retarget_lock_init_recursive>
 801a098:	f7ff ff96 	bl	8019fc8 <__sfp_lock_release>
 801a09c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a0a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a0a4:	6025      	str	r5, [r4, #0]
 801a0a6:	61a5      	str	r5, [r4, #24]
 801a0a8:	2208      	movs	r2, #8
 801a0aa:	4629      	mov	r1, r5
 801a0ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a0b0:	f7ff fd44 	bl	8019b3c <memset>
 801a0b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a0b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a0bc:	4620      	mov	r0, r4
 801a0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0c0:	3468      	adds	r4, #104	; 0x68
 801a0c2:	e7d9      	b.n	801a078 <__sfp+0x1c>
 801a0c4:	2104      	movs	r1, #4
 801a0c6:	4638      	mov	r0, r7
 801a0c8:	f7ff ff62 	bl	8019f90 <__sfmoreglue>
 801a0cc:	4604      	mov	r4, r0
 801a0ce:	6030      	str	r0, [r6, #0]
 801a0d0:	2800      	cmp	r0, #0
 801a0d2:	d1d5      	bne.n	801a080 <__sfp+0x24>
 801a0d4:	f7ff ff78 	bl	8019fc8 <__sfp_lock_release>
 801a0d8:	230c      	movs	r3, #12
 801a0da:	603b      	str	r3, [r7, #0]
 801a0dc:	e7ee      	b.n	801a0bc <__sfp+0x60>
 801a0de:	bf00      	nop
 801a0e0:	0801a994 	.word	0x0801a994
 801a0e4:	ffff0001 	.word	0xffff0001

0801a0e8 <_fwalk_reent>:
 801a0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0ec:	4606      	mov	r6, r0
 801a0ee:	4688      	mov	r8, r1
 801a0f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a0f4:	2700      	movs	r7, #0
 801a0f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a0fa:	f1b9 0901 	subs.w	r9, r9, #1
 801a0fe:	d505      	bpl.n	801a10c <_fwalk_reent+0x24>
 801a100:	6824      	ldr	r4, [r4, #0]
 801a102:	2c00      	cmp	r4, #0
 801a104:	d1f7      	bne.n	801a0f6 <_fwalk_reent+0xe>
 801a106:	4638      	mov	r0, r7
 801a108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a10c:	89ab      	ldrh	r3, [r5, #12]
 801a10e:	2b01      	cmp	r3, #1
 801a110:	d907      	bls.n	801a122 <_fwalk_reent+0x3a>
 801a112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a116:	3301      	adds	r3, #1
 801a118:	d003      	beq.n	801a122 <_fwalk_reent+0x3a>
 801a11a:	4629      	mov	r1, r5
 801a11c:	4630      	mov	r0, r6
 801a11e:	47c0      	blx	r8
 801a120:	4307      	orrs	r7, r0
 801a122:	3568      	adds	r5, #104	; 0x68
 801a124:	e7e9      	b.n	801a0fa <_fwalk_reent+0x12>

0801a126 <__retarget_lock_init_recursive>:
 801a126:	4770      	bx	lr

0801a128 <__retarget_lock_acquire_recursive>:
 801a128:	4770      	bx	lr

0801a12a <__retarget_lock_release_recursive>:
 801a12a:	4770      	bx	lr

0801a12c <__swhatbuf_r>:
 801a12c:	b570      	push	{r4, r5, r6, lr}
 801a12e:	460e      	mov	r6, r1
 801a130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a134:	2900      	cmp	r1, #0
 801a136:	b096      	sub	sp, #88	; 0x58
 801a138:	4614      	mov	r4, r2
 801a13a:	461d      	mov	r5, r3
 801a13c:	da08      	bge.n	801a150 <__swhatbuf_r+0x24>
 801a13e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a142:	2200      	movs	r2, #0
 801a144:	602a      	str	r2, [r5, #0]
 801a146:	061a      	lsls	r2, r3, #24
 801a148:	d410      	bmi.n	801a16c <__swhatbuf_r+0x40>
 801a14a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a14e:	e00e      	b.n	801a16e <__swhatbuf_r+0x42>
 801a150:	466a      	mov	r2, sp
 801a152:	f000 f9a7 	bl	801a4a4 <_fstat_r>
 801a156:	2800      	cmp	r0, #0
 801a158:	dbf1      	blt.n	801a13e <__swhatbuf_r+0x12>
 801a15a:	9a01      	ldr	r2, [sp, #4]
 801a15c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a160:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a164:	425a      	negs	r2, r3
 801a166:	415a      	adcs	r2, r3
 801a168:	602a      	str	r2, [r5, #0]
 801a16a:	e7ee      	b.n	801a14a <__swhatbuf_r+0x1e>
 801a16c:	2340      	movs	r3, #64	; 0x40
 801a16e:	2000      	movs	r0, #0
 801a170:	6023      	str	r3, [r4, #0]
 801a172:	b016      	add	sp, #88	; 0x58
 801a174:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a178 <__smakebuf_r>:
 801a178:	898b      	ldrh	r3, [r1, #12]
 801a17a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a17c:	079d      	lsls	r5, r3, #30
 801a17e:	4606      	mov	r6, r0
 801a180:	460c      	mov	r4, r1
 801a182:	d507      	bpl.n	801a194 <__smakebuf_r+0x1c>
 801a184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a188:	6023      	str	r3, [r4, #0]
 801a18a:	6123      	str	r3, [r4, #16]
 801a18c:	2301      	movs	r3, #1
 801a18e:	6163      	str	r3, [r4, #20]
 801a190:	b002      	add	sp, #8
 801a192:	bd70      	pop	{r4, r5, r6, pc}
 801a194:	ab01      	add	r3, sp, #4
 801a196:	466a      	mov	r2, sp
 801a198:	f7ff ffc8 	bl	801a12c <__swhatbuf_r>
 801a19c:	9900      	ldr	r1, [sp, #0]
 801a19e:	4605      	mov	r5, r0
 801a1a0:	4630      	mov	r0, r6
 801a1a2:	f000 f895 	bl	801a2d0 <_malloc_r>
 801a1a6:	b948      	cbnz	r0, 801a1bc <__smakebuf_r+0x44>
 801a1a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1ac:	059a      	lsls	r2, r3, #22
 801a1ae:	d4ef      	bmi.n	801a190 <__smakebuf_r+0x18>
 801a1b0:	f023 0303 	bic.w	r3, r3, #3
 801a1b4:	f043 0302 	orr.w	r3, r3, #2
 801a1b8:	81a3      	strh	r3, [r4, #12]
 801a1ba:	e7e3      	b.n	801a184 <__smakebuf_r+0xc>
 801a1bc:	4b0d      	ldr	r3, [pc, #52]	; (801a1f4 <__smakebuf_r+0x7c>)
 801a1be:	62b3      	str	r3, [r6, #40]	; 0x28
 801a1c0:	89a3      	ldrh	r3, [r4, #12]
 801a1c2:	6020      	str	r0, [r4, #0]
 801a1c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1c8:	81a3      	strh	r3, [r4, #12]
 801a1ca:	9b00      	ldr	r3, [sp, #0]
 801a1cc:	6163      	str	r3, [r4, #20]
 801a1ce:	9b01      	ldr	r3, [sp, #4]
 801a1d0:	6120      	str	r0, [r4, #16]
 801a1d2:	b15b      	cbz	r3, 801a1ec <__smakebuf_r+0x74>
 801a1d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1d8:	4630      	mov	r0, r6
 801a1da:	f000 f975 	bl	801a4c8 <_isatty_r>
 801a1de:	b128      	cbz	r0, 801a1ec <__smakebuf_r+0x74>
 801a1e0:	89a3      	ldrh	r3, [r4, #12]
 801a1e2:	f023 0303 	bic.w	r3, r3, #3
 801a1e6:	f043 0301 	orr.w	r3, r3, #1
 801a1ea:	81a3      	strh	r3, [r4, #12]
 801a1ec:	89a0      	ldrh	r0, [r4, #12]
 801a1ee:	4305      	orrs	r5, r0
 801a1f0:	81a5      	strh	r5, [r4, #12]
 801a1f2:	e7cd      	b.n	801a190 <__smakebuf_r+0x18>
 801a1f4:	08019f85 	.word	0x08019f85

0801a1f8 <_free_r>:
 801a1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1fa:	2900      	cmp	r1, #0
 801a1fc:	d044      	beq.n	801a288 <_free_r+0x90>
 801a1fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a202:	9001      	str	r0, [sp, #4]
 801a204:	2b00      	cmp	r3, #0
 801a206:	f1a1 0404 	sub.w	r4, r1, #4
 801a20a:	bfb8      	it	lt
 801a20c:	18e4      	addlt	r4, r4, r3
 801a20e:	f000 f97d 	bl	801a50c <__malloc_lock>
 801a212:	4a1e      	ldr	r2, [pc, #120]	; (801a28c <_free_r+0x94>)
 801a214:	9801      	ldr	r0, [sp, #4]
 801a216:	6813      	ldr	r3, [r2, #0]
 801a218:	b933      	cbnz	r3, 801a228 <_free_r+0x30>
 801a21a:	6063      	str	r3, [r4, #4]
 801a21c:	6014      	str	r4, [r2, #0]
 801a21e:	b003      	add	sp, #12
 801a220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a224:	f000 b978 	b.w	801a518 <__malloc_unlock>
 801a228:	42a3      	cmp	r3, r4
 801a22a:	d908      	bls.n	801a23e <_free_r+0x46>
 801a22c:	6825      	ldr	r5, [r4, #0]
 801a22e:	1961      	adds	r1, r4, r5
 801a230:	428b      	cmp	r3, r1
 801a232:	bf01      	itttt	eq
 801a234:	6819      	ldreq	r1, [r3, #0]
 801a236:	685b      	ldreq	r3, [r3, #4]
 801a238:	1949      	addeq	r1, r1, r5
 801a23a:	6021      	streq	r1, [r4, #0]
 801a23c:	e7ed      	b.n	801a21a <_free_r+0x22>
 801a23e:	461a      	mov	r2, r3
 801a240:	685b      	ldr	r3, [r3, #4]
 801a242:	b10b      	cbz	r3, 801a248 <_free_r+0x50>
 801a244:	42a3      	cmp	r3, r4
 801a246:	d9fa      	bls.n	801a23e <_free_r+0x46>
 801a248:	6811      	ldr	r1, [r2, #0]
 801a24a:	1855      	adds	r5, r2, r1
 801a24c:	42a5      	cmp	r5, r4
 801a24e:	d10b      	bne.n	801a268 <_free_r+0x70>
 801a250:	6824      	ldr	r4, [r4, #0]
 801a252:	4421      	add	r1, r4
 801a254:	1854      	adds	r4, r2, r1
 801a256:	42a3      	cmp	r3, r4
 801a258:	6011      	str	r1, [r2, #0]
 801a25a:	d1e0      	bne.n	801a21e <_free_r+0x26>
 801a25c:	681c      	ldr	r4, [r3, #0]
 801a25e:	685b      	ldr	r3, [r3, #4]
 801a260:	6053      	str	r3, [r2, #4]
 801a262:	4421      	add	r1, r4
 801a264:	6011      	str	r1, [r2, #0]
 801a266:	e7da      	b.n	801a21e <_free_r+0x26>
 801a268:	d902      	bls.n	801a270 <_free_r+0x78>
 801a26a:	230c      	movs	r3, #12
 801a26c:	6003      	str	r3, [r0, #0]
 801a26e:	e7d6      	b.n	801a21e <_free_r+0x26>
 801a270:	6825      	ldr	r5, [r4, #0]
 801a272:	1961      	adds	r1, r4, r5
 801a274:	428b      	cmp	r3, r1
 801a276:	bf04      	itt	eq
 801a278:	6819      	ldreq	r1, [r3, #0]
 801a27a:	685b      	ldreq	r3, [r3, #4]
 801a27c:	6063      	str	r3, [r4, #4]
 801a27e:	bf04      	itt	eq
 801a280:	1949      	addeq	r1, r1, r5
 801a282:	6021      	streq	r1, [r4, #0]
 801a284:	6054      	str	r4, [r2, #4]
 801a286:	e7ca      	b.n	801a21e <_free_r+0x26>
 801a288:	b003      	add	sp, #12
 801a28a:	bd30      	pop	{r4, r5, pc}
 801a28c:	24006abc 	.word	0x24006abc

0801a290 <sbrk_aligned>:
 801a290:	b570      	push	{r4, r5, r6, lr}
 801a292:	4e0e      	ldr	r6, [pc, #56]	; (801a2cc <sbrk_aligned+0x3c>)
 801a294:	460c      	mov	r4, r1
 801a296:	6831      	ldr	r1, [r6, #0]
 801a298:	4605      	mov	r5, r0
 801a29a:	b911      	cbnz	r1, 801a2a2 <sbrk_aligned+0x12>
 801a29c:	f000 f88c 	bl	801a3b8 <_sbrk_r>
 801a2a0:	6030      	str	r0, [r6, #0]
 801a2a2:	4621      	mov	r1, r4
 801a2a4:	4628      	mov	r0, r5
 801a2a6:	f000 f887 	bl	801a3b8 <_sbrk_r>
 801a2aa:	1c43      	adds	r3, r0, #1
 801a2ac:	d00a      	beq.n	801a2c4 <sbrk_aligned+0x34>
 801a2ae:	1cc4      	adds	r4, r0, #3
 801a2b0:	f024 0403 	bic.w	r4, r4, #3
 801a2b4:	42a0      	cmp	r0, r4
 801a2b6:	d007      	beq.n	801a2c8 <sbrk_aligned+0x38>
 801a2b8:	1a21      	subs	r1, r4, r0
 801a2ba:	4628      	mov	r0, r5
 801a2bc:	f000 f87c 	bl	801a3b8 <_sbrk_r>
 801a2c0:	3001      	adds	r0, #1
 801a2c2:	d101      	bne.n	801a2c8 <sbrk_aligned+0x38>
 801a2c4:	f04f 34ff 	mov.w	r4, #4294967295
 801a2c8:	4620      	mov	r0, r4
 801a2ca:	bd70      	pop	{r4, r5, r6, pc}
 801a2cc:	24006ac0 	.word	0x24006ac0

0801a2d0 <_malloc_r>:
 801a2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2d4:	1ccd      	adds	r5, r1, #3
 801a2d6:	f025 0503 	bic.w	r5, r5, #3
 801a2da:	3508      	adds	r5, #8
 801a2dc:	2d0c      	cmp	r5, #12
 801a2de:	bf38      	it	cc
 801a2e0:	250c      	movcc	r5, #12
 801a2e2:	2d00      	cmp	r5, #0
 801a2e4:	4607      	mov	r7, r0
 801a2e6:	db01      	blt.n	801a2ec <_malloc_r+0x1c>
 801a2e8:	42a9      	cmp	r1, r5
 801a2ea:	d905      	bls.n	801a2f8 <_malloc_r+0x28>
 801a2ec:	230c      	movs	r3, #12
 801a2ee:	603b      	str	r3, [r7, #0]
 801a2f0:	2600      	movs	r6, #0
 801a2f2:	4630      	mov	r0, r6
 801a2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2f8:	4e2e      	ldr	r6, [pc, #184]	; (801a3b4 <_malloc_r+0xe4>)
 801a2fa:	f000 f907 	bl	801a50c <__malloc_lock>
 801a2fe:	6833      	ldr	r3, [r6, #0]
 801a300:	461c      	mov	r4, r3
 801a302:	bb34      	cbnz	r4, 801a352 <_malloc_r+0x82>
 801a304:	4629      	mov	r1, r5
 801a306:	4638      	mov	r0, r7
 801a308:	f7ff ffc2 	bl	801a290 <sbrk_aligned>
 801a30c:	1c43      	adds	r3, r0, #1
 801a30e:	4604      	mov	r4, r0
 801a310:	d14d      	bne.n	801a3ae <_malloc_r+0xde>
 801a312:	6834      	ldr	r4, [r6, #0]
 801a314:	4626      	mov	r6, r4
 801a316:	2e00      	cmp	r6, #0
 801a318:	d140      	bne.n	801a39c <_malloc_r+0xcc>
 801a31a:	6823      	ldr	r3, [r4, #0]
 801a31c:	4631      	mov	r1, r6
 801a31e:	4638      	mov	r0, r7
 801a320:	eb04 0803 	add.w	r8, r4, r3
 801a324:	f000 f848 	bl	801a3b8 <_sbrk_r>
 801a328:	4580      	cmp	r8, r0
 801a32a:	d13a      	bne.n	801a3a2 <_malloc_r+0xd2>
 801a32c:	6821      	ldr	r1, [r4, #0]
 801a32e:	3503      	adds	r5, #3
 801a330:	1a6d      	subs	r5, r5, r1
 801a332:	f025 0503 	bic.w	r5, r5, #3
 801a336:	3508      	adds	r5, #8
 801a338:	2d0c      	cmp	r5, #12
 801a33a:	bf38      	it	cc
 801a33c:	250c      	movcc	r5, #12
 801a33e:	4629      	mov	r1, r5
 801a340:	4638      	mov	r0, r7
 801a342:	f7ff ffa5 	bl	801a290 <sbrk_aligned>
 801a346:	3001      	adds	r0, #1
 801a348:	d02b      	beq.n	801a3a2 <_malloc_r+0xd2>
 801a34a:	6823      	ldr	r3, [r4, #0]
 801a34c:	442b      	add	r3, r5
 801a34e:	6023      	str	r3, [r4, #0]
 801a350:	e00e      	b.n	801a370 <_malloc_r+0xa0>
 801a352:	6822      	ldr	r2, [r4, #0]
 801a354:	1b52      	subs	r2, r2, r5
 801a356:	d41e      	bmi.n	801a396 <_malloc_r+0xc6>
 801a358:	2a0b      	cmp	r2, #11
 801a35a:	d916      	bls.n	801a38a <_malloc_r+0xba>
 801a35c:	1961      	adds	r1, r4, r5
 801a35e:	42a3      	cmp	r3, r4
 801a360:	6025      	str	r5, [r4, #0]
 801a362:	bf18      	it	ne
 801a364:	6059      	strne	r1, [r3, #4]
 801a366:	6863      	ldr	r3, [r4, #4]
 801a368:	bf08      	it	eq
 801a36a:	6031      	streq	r1, [r6, #0]
 801a36c:	5162      	str	r2, [r4, r5]
 801a36e:	604b      	str	r3, [r1, #4]
 801a370:	4638      	mov	r0, r7
 801a372:	f104 060b 	add.w	r6, r4, #11
 801a376:	f000 f8cf 	bl	801a518 <__malloc_unlock>
 801a37a:	f026 0607 	bic.w	r6, r6, #7
 801a37e:	1d23      	adds	r3, r4, #4
 801a380:	1af2      	subs	r2, r6, r3
 801a382:	d0b6      	beq.n	801a2f2 <_malloc_r+0x22>
 801a384:	1b9b      	subs	r3, r3, r6
 801a386:	50a3      	str	r3, [r4, r2]
 801a388:	e7b3      	b.n	801a2f2 <_malloc_r+0x22>
 801a38a:	6862      	ldr	r2, [r4, #4]
 801a38c:	42a3      	cmp	r3, r4
 801a38e:	bf0c      	ite	eq
 801a390:	6032      	streq	r2, [r6, #0]
 801a392:	605a      	strne	r2, [r3, #4]
 801a394:	e7ec      	b.n	801a370 <_malloc_r+0xa0>
 801a396:	4623      	mov	r3, r4
 801a398:	6864      	ldr	r4, [r4, #4]
 801a39a:	e7b2      	b.n	801a302 <_malloc_r+0x32>
 801a39c:	4634      	mov	r4, r6
 801a39e:	6876      	ldr	r6, [r6, #4]
 801a3a0:	e7b9      	b.n	801a316 <_malloc_r+0x46>
 801a3a2:	230c      	movs	r3, #12
 801a3a4:	603b      	str	r3, [r7, #0]
 801a3a6:	4638      	mov	r0, r7
 801a3a8:	f000 f8b6 	bl	801a518 <__malloc_unlock>
 801a3ac:	e7a1      	b.n	801a2f2 <_malloc_r+0x22>
 801a3ae:	6025      	str	r5, [r4, #0]
 801a3b0:	e7de      	b.n	801a370 <_malloc_r+0xa0>
 801a3b2:	bf00      	nop
 801a3b4:	24006abc 	.word	0x24006abc

0801a3b8 <_sbrk_r>:
 801a3b8:	b538      	push	{r3, r4, r5, lr}
 801a3ba:	4d06      	ldr	r5, [pc, #24]	; (801a3d4 <_sbrk_r+0x1c>)
 801a3bc:	2300      	movs	r3, #0
 801a3be:	4604      	mov	r4, r0
 801a3c0:	4608      	mov	r0, r1
 801a3c2:	602b      	str	r3, [r5, #0]
 801a3c4:	f7e9 fd94 	bl	8003ef0 <_sbrk>
 801a3c8:	1c43      	adds	r3, r0, #1
 801a3ca:	d102      	bne.n	801a3d2 <_sbrk_r+0x1a>
 801a3cc:	682b      	ldr	r3, [r5, #0]
 801a3ce:	b103      	cbz	r3, 801a3d2 <_sbrk_r+0x1a>
 801a3d0:	6023      	str	r3, [r4, #0]
 801a3d2:	bd38      	pop	{r3, r4, r5, pc}
 801a3d4:	24006ac4 	.word	0x24006ac4

0801a3d8 <__sread>:
 801a3d8:	b510      	push	{r4, lr}
 801a3da:	460c      	mov	r4, r1
 801a3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3e0:	f000 f8a0 	bl	801a524 <_read_r>
 801a3e4:	2800      	cmp	r0, #0
 801a3e6:	bfab      	itete	ge
 801a3e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a3ea:	89a3      	ldrhlt	r3, [r4, #12]
 801a3ec:	181b      	addge	r3, r3, r0
 801a3ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a3f2:	bfac      	ite	ge
 801a3f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a3f6:	81a3      	strhlt	r3, [r4, #12]
 801a3f8:	bd10      	pop	{r4, pc}

0801a3fa <__swrite>:
 801a3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3fe:	461f      	mov	r7, r3
 801a400:	898b      	ldrh	r3, [r1, #12]
 801a402:	05db      	lsls	r3, r3, #23
 801a404:	4605      	mov	r5, r0
 801a406:	460c      	mov	r4, r1
 801a408:	4616      	mov	r6, r2
 801a40a:	d505      	bpl.n	801a418 <__swrite+0x1e>
 801a40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a410:	2302      	movs	r3, #2
 801a412:	2200      	movs	r2, #0
 801a414:	f000 f868 	bl	801a4e8 <_lseek_r>
 801a418:	89a3      	ldrh	r3, [r4, #12]
 801a41a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a41e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a422:	81a3      	strh	r3, [r4, #12]
 801a424:	4632      	mov	r2, r6
 801a426:	463b      	mov	r3, r7
 801a428:	4628      	mov	r0, r5
 801a42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a42e:	f000 b817 	b.w	801a460 <_write_r>

0801a432 <__sseek>:
 801a432:	b510      	push	{r4, lr}
 801a434:	460c      	mov	r4, r1
 801a436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a43a:	f000 f855 	bl	801a4e8 <_lseek_r>
 801a43e:	1c43      	adds	r3, r0, #1
 801a440:	89a3      	ldrh	r3, [r4, #12]
 801a442:	bf15      	itete	ne
 801a444:	6560      	strne	r0, [r4, #84]	; 0x54
 801a446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a44a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a44e:	81a3      	strheq	r3, [r4, #12]
 801a450:	bf18      	it	ne
 801a452:	81a3      	strhne	r3, [r4, #12]
 801a454:	bd10      	pop	{r4, pc}

0801a456 <__sclose>:
 801a456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a45a:	f000 b813 	b.w	801a484 <_close_r>
	...

0801a460 <_write_r>:
 801a460:	b538      	push	{r3, r4, r5, lr}
 801a462:	4d07      	ldr	r5, [pc, #28]	; (801a480 <_write_r+0x20>)
 801a464:	4604      	mov	r4, r0
 801a466:	4608      	mov	r0, r1
 801a468:	4611      	mov	r1, r2
 801a46a:	2200      	movs	r2, #0
 801a46c:	602a      	str	r2, [r5, #0]
 801a46e:	461a      	mov	r2, r3
 801a470:	f7e9 fced 	bl	8003e4e <_write>
 801a474:	1c43      	adds	r3, r0, #1
 801a476:	d102      	bne.n	801a47e <_write_r+0x1e>
 801a478:	682b      	ldr	r3, [r5, #0]
 801a47a:	b103      	cbz	r3, 801a47e <_write_r+0x1e>
 801a47c:	6023      	str	r3, [r4, #0]
 801a47e:	bd38      	pop	{r3, r4, r5, pc}
 801a480:	24006ac4 	.word	0x24006ac4

0801a484 <_close_r>:
 801a484:	b538      	push	{r3, r4, r5, lr}
 801a486:	4d06      	ldr	r5, [pc, #24]	; (801a4a0 <_close_r+0x1c>)
 801a488:	2300      	movs	r3, #0
 801a48a:	4604      	mov	r4, r0
 801a48c:	4608      	mov	r0, r1
 801a48e:	602b      	str	r3, [r5, #0]
 801a490:	f7e9 fcf9 	bl	8003e86 <_close>
 801a494:	1c43      	adds	r3, r0, #1
 801a496:	d102      	bne.n	801a49e <_close_r+0x1a>
 801a498:	682b      	ldr	r3, [r5, #0]
 801a49a:	b103      	cbz	r3, 801a49e <_close_r+0x1a>
 801a49c:	6023      	str	r3, [r4, #0]
 801a49e:	bd38      	pop	{r3, r4, r5, pc}
 801a4a0:	24006ac4 	.word	0x24006ac4

0801a4a4 <_fstat_r>:
 801a4a4:	b538      	push	{r3, r4, r5, lr}
 801a4a6:	4d07      	ldr	r5, [pc, #28]	; (801a4c4 <_fstat_r+0x20>)
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	4604      	mov	r4, r0
 801a4ac:	4608      	mov	r0, r1
 801a4ae:	4611      	mov	r1, r2
 801a4b0:	602b      	str	r3, [r5, #0]
 801a4b2:	f7e9 fcf4 	bl	8003e9e <_fstat>
 801a4b6:	1c43      	adds	r3, r0, #1
 801a4b8:	d102      	bne.n	801a4c0 <_fstat_r+0x1c>
 801a4ba:	682b      	ldr	r3, [r5, #0]
 801a4bc:	b103      	cbz	r3, 801a4c0 <_fstat_r+0x1c>
 801a4be:	6023      	str	r3, [r4, #0]
 801a4c0:	bd38      	pop	{r3, r4, r5, pc}
 801a4c2:	bf00      	nop
 801a4c4:	24006ac4 	.word	0x24006ac4

0801a4c8 <_isatty_r>:
 801a4c8:	b538      	push	{r3, r4, r5, lr}
 801a4ca:	4d06      	ldr	r5, [pc, #24]	; (801a4e4 <_isatty_r+0x1c>)
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	4604      	mov	r4, r0
 801a4d0:	4608      	mov	r0, r1
 801a4d2:	602b      	str	r3, [r5, #0]
 801a4d4:	f7e9 fcf3 	bl	8003ebe <_isatty>
 801a4d8:	1c43      	adds	r3, r0, #1
 801a4da:	d102      	bne.n	801a4e2 <_isatty_r+0x1a>
 801a4dc:	682b      	ldr	r3, [r5, #0]
 801a4de:	b103      	cbz	r3, 801a4e2 <_isatty_r+0x1a>
 801a4e0:	6023      	str	r3, [r4, #0]
 801a4e2:	bd38      	pop	{r3, r4, r5, pc}
 801a4e4:	24006ac4 	.word	0x24006ac4

0801a4e8 <_lseek_r>:
 801a4e8:	b538      	push	{r3, r4, r5, lr}
 801a4ea:	4d07      	ldr	r5, [pc, #28]	; (801a508 <_lseek_r+0x20>)
 801a4ec:	4604      	mov	r4, r0
 801a4ee:	4608      	mov	r0, r1
 801a4f0:	4611      	mov	r1, r2
 801a4f2:	2200      	movs	r2, #0
 801a4f4:	602a      	str	r2, [r5, #0]
 801a4f6:	461a      	mov	r2, r3
 801a4f8:	f7e9 fcec 	bl	8003ed4 <_lseek>
 801a4fc:	1c43      	adds	r3, r0, #1
 801a4fe:	d102      	bne.n	801a506 <_lseek_r+0x1e>
 801a500:	682b      	ldr	r3, [r5, #0]
 801a502:	b103      	cbz	r3, 801a506 <_lseek_r+0x1e>
 801a504:	6023      	str	r3, [r4, #0]
 801a506:	bd38      	pop	{r3, r4, r5, pc}
 801a508:	24006ac4 	.word	0x24006ac4

0801a50c <__malloc_lock>:
 801a50c:	4801      	ldr	r0, [pc, #4]	; (801a514 <__malloc_lock+0x8>)
 801a50e:	f7ff be0b 	b.w	801a128 <__retarget_lock_acquire_recursive>
 801a512:	bf00      	nop
 801a514:	24006ab8 	.word	0x24006ab8

0801a518 <__malloc_unlock>:
 801a518:	4801      	ldr	r0, [pc, #4]	; (801a520 <__malloc_unlock+0x8>)
 801a51a:	f7ff be06 	b.w	801a12a <__retarget_lock_release_recursive>
 801a51e:	bf00      	nop
 801a520:	24006ab8 	.word	0x24006ab8

0801a524 <_read_r>:
 801a524:	b538      	push	{r3, r4, r5, lr}
 801a526:	4d07      	ldr	r5, [pc, #28]	; (801a544 <_read_r+0x20>)
 801a528:	4604      	mov	r4, r0
 801a52a:	4608      	mov	r0, r1
 801a52c:	4611      	mov	r1, r2
 801a52e:	2200      	movs	r2, #0
 801a530:	602a      	str	r2, [r5, #0]
 801a532:	461a      	mov	r2, r3
 801a534:	f7e9 fc6e 	bl	8003e14 <_read>
 801a538:	1c43      	adds	r3, r0, #1
 801a53a:	d102      	bne.n	801a542 <_read_r+0x1e>
 801a53c:	682b      	ldr	r3, [r5, #0]
 801a53e:	b103      	cbz	r3, 801a542 <_read_r+0x1e>
 801a540:	6023      	str	r3, [r4, #0]
 801a542:	bd38      	pop	{r3, r4, r5, pc}
 801a544:	24006ac4 	.word	0x24006ac4

0801a548 <_init>:
 801a548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a54a:	bf00      	nop
 801a54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a54e:	bc08      	pop	{r3}
 801a550:	469e      	mov	lr, r3
 801a552:	4770      	bx	lr

0801a554 <_fini>:
 801a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a556:	bf00      	nop
 801a558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a55a:	bc08      	pop	{r3}
 801a55c:	469e      	mov	lr, r3
 801a55e:	4770      	bx	lr
